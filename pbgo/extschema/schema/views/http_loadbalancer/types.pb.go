// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/http_loadbalancer/types.proto

package http_loadbalancer

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type"
	policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter"
	route "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/route"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	common_security "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_security"
	common_waf "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_waf"
	origin_pool "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/origin_pool"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy"
	virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
	virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BYOC HTTPS Choice
//
// x-displayName: "BYOC HTTPS Choice"
// Choice for selecting HTTP proxy with bring your own certificates
type ProxyTypeHttps struct {
	// HTTP Redirect
	//
	// x-displayName: "HTTP Redirect to HTTPS"
	// Redirect HTTP traffic to HTTPS
	HttpRedirect bool `protobuf:"varint,1,opt,name=http_redirect,json=httpRedirect,proto3" json:"http_redirect,omitempty"`
	// Add HSTS
	//
	// x-displayName: "Add HSTS Header"
	// Add HTTP Strict-Transport-Security response header
	AddHsts bool `protobuf:"varint,2,opt,name=add_hsts,json=addHsts,proto3" json:"add_hsts,omitempty"`
	// TLS Configuration
	//
	// x-displayName: "TLS Configuration"
	// x-required
	// TLS Certificate Configuration for downstream connections
	//
	// Types that are valid to be assigned to TlsCertificatesChoice:
	//	*ProxyTypeHttps_TlsParameters
	//	*ProxyTypeHttps_TlsCertParams
	TlsCertificatesChoice isProxyTypeHttps_TlsCertificatesChoice `protobuf_oneof:"tls_certificates_choice"`
	// Server Header configuration
	//
	// x-displayName: "Server Response Header"
	// Define the settings of “server” response header.
	// A response header with name “server” and value “volt-adc” is added to responses by default.
	//
	// Types that are valid to be assigned to ServerHeaderChoice:
	//	*ProxyTypeHttps_DefaultHeader
	//	*ProxyTypeHttps_ServerName
	//	*ProxyTypeHttps_AppendServerName
	//	*ProxyTypeHttps_PassThrough
	ServerHeaderChoice isProxyTypeHttps_ServerHeaderChoice `protobuf_oneof:"server_header_choice"`
	// Normalize Path
	//
	// x-displayName: "Path Normalization"
	//
	// x-required
	// URI Path is normalized and adjacent slashes in the path are merged into one.
	// The platform does not perform case normalization.
	//
	// Types that are valid to be assigned to PathNormalizeChoice:
	//	*ProxyTypeHttps_EnablePathNormalize
	//	*ProxyTypeHttps_DisablePathNormalize
	PathNormalizeChoice isProxyTypeHttps_PathNormalizeChoice `protobuf_oneof:"path_normalize_choice"`
	// HTTPS Port Choice
	//
	// x-required
	// x-displayName: "Listen Port"
	// Available options: user provided port or system default port or port range
	//
	// Types that are valid to be assigned to PortChoice:
	//	*ProxyTypeHttps_Port
	//	*ProxyTypeHttps_PortRanges
	PortChoice isProxyTypeHttps_PortChoice `protobuf_oneof:"port_choice"`
	// Default Load Balancer
	//
	// x-displayName: "Default Load Balancer"
	//
	// Designate the Load balancer as default for clients that don't present
	// the SNI header in TLS handshake.
	//
	// Types that are valid to be assigned to DefaultLbChoice:
	//	*ProxyTypeHttps_NonDefaultLoadbalancer
	//	*ProxyTypeHttps_DefaultLoadbalancer
	DefaultLbChoice isProxyTypeHttps_DefaultLbChoice `protobuf_oneof:"default_lb_choice"`
	// Header transformation
	//
	// x-displayName: "Header Transformation Configuration"
	// Header transformation options for response headers to the client
	HeaderTransformationType *schema.HeaderTransformationType `protobuf:"bytes,19,opt,name=header_transformation_type,json=headerTransformationType,proto3" json:"header_transformation_type,omitempty"` // Deprecated: Do not use.
	// Connection Idle Timeout
	//
	// x-displayName: "Connection Idle Timeout"
	// x-example: "60000"
	// The idle timeout for downstream connections. The idle timeout is defined as the
	// period in which there are no active requests. When the idle timeout is reached the connection
	// will be closed. Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
	// This is specified in milliseconds. The default value is 2 minutes.
	ConnectionIdleTimeout uint32 `protobuf:"varint,20,opt,name=connection_idle_timeout,json=connectionIdleTimeout,proto3" json:"connection_idle_timeout,omitempty"`
	// http_protocol_options
	//
	// x-displayName: "HTTP Protocol Configuration"
	// HTTP protocol configuration options for downstream connections.
	HttpProtocolOptions *virtual_host.HttpProtocolOptions `protobuf:"bytes,23,opt,name=http_protocol_options,json=httpProtocolOptions,proto3" json:"http_protocol_options,omitempty"`
}

func (m *ProxyTypeHttps) Reset()      { *m = ProxyTypeHttps{} }
func (*ProxyTypeHttps) ProtoMessage() {}
func (*ProxyTypeHttps) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{0}
}
func (m *ProxyTypeHttps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyTypeHttps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProxyTypeHttps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyTypeHttps.Merge(m, src)
}
func (m *ProxyTypeHttps) XXX_Size() int {
	return m.Size()
}
func (m *ProxyTypeHttps) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyTypeHttps.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyTypeHttps proto.InternalMessageInfo

type isProxyTypeHttps_TlsCertificatesChoice interface {
	isProxyTypeHttps_TlsCertificatesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProxyTypeHttps_ServerHeaderChoice interface {
	isProxyTypeHttps_ServerHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProxyTypeHttps_PathNormalizeChoice interface {
	isProxyTypeHttps_PathNormalizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProxyTypeHttps_PortChoice interface {
	isProxyTypeHttps_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProxyTypeHttps_DefaultLbChoice interface {
	isProxyTypeHttps_DefaultLbChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxyTypeHttps_TlsParameters struct {
	TlsParameters *views.DownstreamTlsParamsType `protobuf:"bytes,3,opt,name=tls_parameters,json=tlsParameters,proto3,oneof" json:"tls_parameters,omitempty"`
}
type ProxyTypeHttps_TlsCertParams struct {
	TlsCertParams *views.DownstreamTLSCertsParams `protobuf:"bytes,22,opt,name=tls_cert_params,json=tlsCertParams,proto3,oneof" json:"tls_cert_params,omitempty"`
}
type ProxyTypeHttps_DefaultHeader struct {
	DefaultHeader *schema.Empty `protobuf:"bytes,5,opt,name=default_header,json=defaultHeader,proto3,oneof" json:"default_header,omitempty"`
}
type ProxyTypeHttps_ServerName struct {
	ServerName string `protobuf:"bytes,6,opt,name=server_name,json=serverName,proto3,oneof" json:"server_name,omitempty"`
}
type ProxyTypeHttps_AppendServerName struct {
	AppendServerName string `protobuf:"bytes,7,opt,name=append_server_name,json=appendServerName,proto3,oneof" json:"append_server_name,omitempty"`
}
type ProxyTypeHttps_PassThrough struct {
	PassThrough *schema.Empty `protobuf:"bytes,8,opt,name=pass_through,json=passThrough,proto3,oneof" json:"pass_through,omitempty"`
}
type ProxyTypeHttps_EnablePathNormalize struct {
	EnablePathNormalize *schema.Empty `protobuf:"bytes,10,opt,name=enable_path_normalize,json=enablePathNormalize,proto3,oneof" json:"enable_path_normalize,omitempty"`
}
type ProxyTypeHttps_DisablePathNormalize struct {
	DisablePathNormalize *schema.Empty `protobuf:"bytes,11,opt,name=disable_path_normalize,json=disablePathNormalize,proto3,oneof" json:"disable_path_normalize,omitempty"`
}
type ProxyTypeHttps_Port struct {
	Port uint32 `protobuf:"varint,15,opt,name=port,proto3,oneof" json:"port,omitempty"`
}
type ProxyTypeHttps_PortRanges struct {
	PortRanges string `protobuf:"bytes,25,opt,name=port_ranges,json=portRanges,proto3,oneof" json:"port_ranges,omitempty"`
}
type ProxyTypeHttps_NonDefaultLoadbalancer struct {
	NonDefaultLoadbalancer *schema.Empty `protobuf:"bytes,17,opt,name=non_default_loadbalancer,json=nonDefaultLoadbalancer,proto3,oneof" json:"non_default_loadbalancer,omitempty"`
}
type ProxyTypeHttps_DefaultLoadbalancer struct {
	DefaultLoadbalancer *schema.Empty `protobuf:"bytes,18,opt,name=default_loadbalancer,json=defaultLoadbalancer,proto3,oneof" json:"default_loadbalancer,omitempty"`
}

func (*ProxyTypeHttps_TlsParameters) isProxyTypeHttps_TlsCertificatesChoice()      {}
func (*ProxyTypeHttps_TlsCertParams) isProxyTypeHttps_TlsCertificatesChoice()      {}
func (*ProxyTypeHttps_DefaultHeader) isProxyTypeHttps_ServerHeaderChoice()         {}
func (*ProxyTypeHttps_ServerName) isProxyTypeHttps_ServerHeaderChoice()            {}
func (*ProxyTypeHttps_AppendServerName) isProxyTypeHttps_ServerHeaderChoice()      {}
func (*ProxyTypeHttps_PassThrough) isProxyTypeHttps_ServerHeaderChoice()           {}
func (*ProxyTypeHttps_EnablePathNormalize) isProxyTypeHttps_PathNormalizeChoice()  {}
func (*ProxyTypeHttps_DisablePathNormalize) isProxyTypeHttps_PathNormalizeChoice() {}
func (*ProxyTypeHttps_Port) isProxyTypeHttps_PortChoice()                          {}
func (*ProxyTypeHttps_PortRanges) isProxyTypeHttps_PortChoice()                    {}
func (*ProxyTypeHttps_NonDefaultLoadbalancer) isProxyTypeHttps_DefaultLbChoice()   {}
func (*ProxyTypeHttps_DefaultLoadbalancer) isProxyTypeHttps_DefaultLbChoice()      {}

func (m *ProxyTypeHttps) GetTlsCertificatesChoice() isProxyTypeHttps_TlsCertificatesChoice {
	if m != nil {
		return m.TlsCertificatesChoice
	}
	return nil
}
func (m *ProxyTypeHttps) GetServerHeaderChoice() isProxyTypeHttps_ServerHeaderChoice {
	if m != nil {
		return m.ServerHeaderChoice
	}
	return nil
}
func (m *ProxyTypeHttps) GetPathNormalizeChoice() isProxyTypeHttps_PathNormalizeChoice {
	if m != nil {
		return m.PathNormalizeChoice
	}
	return nil
}
func (m *ProxyTypeHttps) GetPortChoice() isProxyTypeHttps_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}
func (m *ProxyTypeHttps) GetDefaultLbChoice() isProxyTypeHttps_DefaultLbChoice {
	if m != nil {
		return m.DefaultLbChoice
	}
	return nil
}

func (m *ProxyTypeHttps) GetHttpRedirect() bool {
	if m != nil {
		return m.HttpRedirect
	}
	return false
}

func (m *ProxyTypeHttps) GetAddHsts() bool {
	if m != nil {
		return m.AddHsts
	}
	return false
}

func (m *ProxyTypeHttps) GetTlsParameters() *views.DownstreamTlsParamsType {
	if x, ok := m.GetTlsCertificatesChoice().(*ProxyTypeHttps_TlsParameters); ok {
		return x.TlsParameters
	}
	return nil
}

func (m *ProxyTypeHttps) GetTlsCertParams() *views.DownstreamTLSCertsParams {
	if x, ok := m.GetTlsCertificatesChoice().(*ProxyTypeHttps_TlsCertParams); ok {
		return x.TlsCertParams
	}
	return nil
}

func (m *ProxyTypeHttps) GetDefaultHeader() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttps_DefaultHeader); ok {
		return x.DefaultHeader
	}
	return nil
}

func (m *ProxyTypeHttps) GetServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttps_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *ProxyTypeHttps) GetAppendServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttps_AppendServerName); ok {
		return x.AppendServerName
	}
	return ""
}

func (m *ProxyTypeHttps) GetPassThrough() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttps_PassThrough); ok {
		return x.PassThrough
	}
	return nil
}

func (m *ProxyTypeHttps) GetEnablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*ProxyTypeHttps_EnablePathNormalize); ok {
		return x.EnablePathNormalize
	}
	return nil
}

func (m *ProxyTypeHttps) GetDisablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*ProxyTypeHttps_DisablePathNormalize); ok {
		return x.DisablePathNormalize
	}
	return nil
}

func (m *ProxyTypeHttps) GetPort() uint32 {
	if x, ok := m.GetPortChoice().(*ProxyTypeHttps_Port); ok {
		return x.Port
	}
	return 0
}

func (m *ProxyTypeHttps) GetPortRanges() string {
	if x, ok := m.GetPortChoice().(*ProxyTypeHttps_PortRanges); ok {
		return x.PortRanges
	}
	return ""
}

func (m *ProxyTypeHttps) GetNonDefaultLoadbalancer() *schema.Empty {
	if x, ok := m.GetDefaultLbChoice().(*ProxyTypeHttps_NonDefaultLoadbalancer); ok {
		return x.NonDefaultLoadbalancer
	}
	return nil
}

func (m *ProxyTypeHttps) GetDefaultLoadbalancer() *schema.Empty {
	if x, ok := m.GetDefaultLbChoice().(*ProxyTypeHttps_DefaultLoadbalancer); ok {
		return x.DefaultLoadbalancer
	}
	return nil
}

// Deprecated: Do not use.
func (m *ProxyTypeHttps) GetHeaderTransformationType() *schema.HeaderTransformationType {
	if m != nil {
		return m.HeaderTransformationType
	}
	return nil
}

func (m *ProxyTypeHttps) GetConnectionIdleTimeout() uint32 {
	if m != nil {
		return m.ConnectionIdleTimeout
	}
	return 0
}

func (m *ProxyTypeHttps) GetHttpProtocolOptions() *virtual_host.HttpProtocolOptions {
	if m != nil {
		return m.HttpProtocolOptions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProxyTypeHttps) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProxyTypeHttps_TlsParameters)(nil),
		(*ProxyTypeHttps_TlsCertParams)(nil),
		(*ProxyTypeHttps_DefaultHeader)(nil),
		(*ProxyTypeHttps_ServerName)(nil),
		(*ProxyTypeHttps_AppendServerName)(nil),
		(*ProxyTypeHttps_PassThrough)(nil),
		(*ProxyTypeHttps_EnablePathNormalize)(nil),
		(*ProxyTypeHttps_DisablePathNormalize)(nil),
		(*ProxyTypeHttps_Port)(nil),
		(*ProxyTypeHttps_PortRanges)(nil),
		(*ProxyTypeHttps_NonDefaultLoadbalancer)(nil),
		(*ProxyTypeHttps_DefaultLoadbalancer)(nil),
	}
}

// HTTP Choice
//
// x-displayName: "HTTP Choice"
// Choice for selecting HTTP proxy
type ProxyTypeHttp struct {
	// Manage DNS Domain
	//
	// x-displayName: "Automatically Manage DNS Records"
	// DNS records for domains will be managed automatically by F5 Distributed Cloud.
	// As a prerequisite, the domain must be delegated to F5 Distributed Cloud using Delegated domain feature
	// or a DNS CNAME record should be created in your DNS provider's portal.
	DnsVolterraManaged bool `protobuf:"varint,1,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
	// HTTP Port Choice
	//
	// x-required
	// x-displayName: "HTTP Listen Port Choice"
	// Available options: user provided port or system default port or port range
	//
	// Types that are valid to be assigned to PortChoice:
	//	*ProxyTypeHttp_Port
	//	*ProxyTypeHttp_PortRanges
	PortChoice isProxyTypeHttp_PortChoice `protobuf_oneof:"port_choice"`
}

func (m *ProxyTypeHttp) Reset()      { *m = ProxyTypeHttp{} }
func (*ProxyTypeHttp) ProtoMessage() {}
func (*ProxyTypeHttp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{1}
}
func (m *ProxyTypeHttp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyTypeHttp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProxyTypeHttp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyTypeHttp.Merge(m, src)
}
func (m *ProxyTypeHttp) XXX_Size() int {
	return m.Size()
}
func (m *ProxyTypeHttp) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyTypeHttp.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyTypeHttp proto.InternalMessageInfo

type isProxyTypeHttp_PortChoice interface {
	isProxyTypeHttp_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxyTypeHttp_Port struct {
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3,oneof" json:"port,omitempty"`
}
type ProxyTypeHttp_PortRanges struct {
	PortRanges string `protobuf:"bytes,4,opt,name=port_ranges,json=portRanges,proto3,oneof" json:"port_ranges,omitempty"`
}

func (*ProxyTypeHttp_Port) isProxyTypeHttp_PortChoice()       {}
func (*ProxyTypeHttp_PortRanges) isProxyTypeHttp_PortChoice() {}

func (m *ProxyTypeHttp) GetPortChoice() isProxyTypeHttp_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}

func (m *ProxyTypeHttp) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

func (m *ProxyTypeHttp) GetPort() uint32 {
	if x, ok := m.GetPortChoice().(*ProxyTypeHttp_Port); ok {
		return x.Port
	}
	return 0
}

func (m *ProxyTypeHttp) GetPortRanges() string {
	if x, ok := m.GetPortChoice().(*ProxyTypeHttp_PortRanges); ok {
		return x.PortRanges
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProxyTypeHttp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProxyTypeHttp_Port)(nil),
		(*ProxyTypeHttp_PortRanges)(nil),
	}
}

// HTTPS with Auto Certs Choice
//
// x-displayName: "HTTPS with Auto Certs Choice"
// Choice for selecting HTTP proxy with bring your own certificates
type ProxyTypeHttpsAutoCerts struct {
	// HTTP Redirect
	//
	// x-displayName: "HTTP Redirect to HTTPS"
	// Redirect HTTP traffic to HTTPS
	HttpRedirect bool `protobuf:"varint,1,opt,name=http_redirect,json=httpRedirect,proto3" json:"http_redirect,omitempty"`
	// Add HSTS
	//
	// x-displayName: "Add HSTS Header"
	// Add HTTP Strict-Transport-Security response header
	AddHsts bool `protobuf:"varint,2,opt,name=add_hsts,json=addHsts,proto3" json:"add_hsts,omitempty"`
	// TLS Config
	//
	// x-displayName: "TLS"
	// Configuration of TLS settings such as min/max TLS version and ciphersuites
	TlsConfig *views.TlsConfig `protobuf:"bytes,3,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	// mTLS choice
	//
	// x-displayName: "mTLS"
	// x-required
	// mTLS authentication between clients and HTTPS load balancer
	//
	// Types that are valid to be assigned to MtlsChoice:
	//	*ProxyTypeHttpsAutoCerts_NoMtls
	//	*ProxyTypeHttpsAutoCerts_UseMtls
	MtlsChoice isProxyTypeHttpsAutoCerts_MtlsChoice `protobuf_oneof:"mtls_choice"`
	// Server Header configuration
	//
	// x-displayName: "Server Response Header"
	// Define the settings of “server” response header.
	// A response header with name “server” and value “volt-adc” is added to responses by default.
	//
	// Types that are valid to be assigned to ServerHeaderChoice:
	//	*ProxyTypeHttpsAutoCerts_DefaultHeader
	//	*ProxyTypeHttpsAutoCerts_ServerName
	//	*ProxyTypeHttpsAutoCerts_AppendServerName
	//	*ProxyTypeHttpsAutoCerts_PassThrough
	ServerHeaderChoice isProxyTypeHttpsAutoCerts_ServerHeaderChoice `protobuf_oneof:"server_header_choice"`
	// Normalize Path
	//
	// x-displayName: "Path Normalization"
	// x-required
	// URI Path is normalized and adjacent slashes in the path are merged into one.
	// The platform does not perform case normalization.
	//
	// Types that are valid to be assigned to PathNormalizeChoice:
	//	*ProxyTypeHttpsAutoCerts_EnablePathNormalize
	//	*ProxyTypeHttpsAutoCerts_DisablePathNormalize
	PathNormalizeChoice isProxyTypeHttpsAutoCerts_PathNormalizeChoice `protobuf_oneof:"path_normalize_choice"`
	// HTTPS Port Choice
	//
	// x-displayName: "HTTPS Listen Port Choice"
	// Available options: user provided port or system default port or port range
	//
	// Types that are valid to be assigned to PortChoice:
	//	*ProxyTypeHttpsAutoCerts_Port
	//	*ProxyTypeHttpsAutoCerts_PortRanges
	PortChoice isProxyTypeHttpsAutoCerts_PortChoice `protobuf_oneof:"port_choice"`
	// Default Load Balancer
	//
	// x-displayName: "Default Load Balancer"
	// For clients that don't specify the SNI field in the TLS handshake, designate this Load Balancer as default among any listening on the same VIP and port.
	//
	// Types that are valid to be assigned to DefaultLbChoice:
	//	*ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer
	//	*ProxyTypeHttpsAutoCerts_DefaultLoadbalancer
	DefaultLbChoice isProxyTypeHttpsAutoCerts_DefaultLbChoice `protobuf_oneof:"default_lb_choice"`
	// Header transformation
	//
	// x-displayName: "Header Transformation"
	// Header transformation options for response headers to the client
	HeaderTransformationType *schema.HeaderTransformationType `protobuf:"bytes,22,opt,name=header_transformation_type,json=headerTransformationType,proto3" json:"header_transformation_type,omitempty"` // Deprecated: Do not use.
	// Connection Idle Timeout
	//
	// x-displayName: "Connection Idle Timeout"
	// x-example: "60000"
	// The idle timeout for downstream connections. The idle timeout is defined as the
	// period in which there are no active requests. When the idle timeout is reached the connection
	// will be closed. Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
	// This is specified in milliseconds. The default value is 2 minutes.
	ConnectionIdleTimeout uint32 `protobuf:"varint,23,opt,name=connection_idle_timeout,json=connectionIdleTimeout,proto3" json:"connection_idle_timeout,omitempty"`
	// http_protocol_options
	//
	// x-displayName: "HTTP Protocol Configuration"
	// HTTP protocol configuration options for downstream connections.
	HttpProtocolOptions *virtual_host.HttpProtocolOptions `protobuf:"bytes,24,opt,name=http_protocol_options,json=httpProtocolOptions,proto3" json:"http_protocol_options,omitempty"`
}

func (m *ProxyTypeHttpsAutoCerts) Reset()      { *m = ProxyTypeHttpsAutoCerts{} }
func (*ProxyTypeHttpsAutoCerts) ProtoMessage() {}
func (*ProxyTypeHttpsAutoCerts) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{2}
}
func (m *ProxyTypeHttpsAutoCerts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyTypeHttpsAutoCerts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProxyTypeHttpsAutoCerts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyTypeHttpsAutoCerts.Merge(m, src)
}
func (m *ProxyTypeHttpsAutoCerts) XXX_Size() int {
	return m.Size()
}
func (m *ProxyTypeHttpsAutoCerts) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyTypeHttpsAutoCerts.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyTypeHttpsAutoCerts proto.InternalMessageInfo

type isProxyTypeHttpsAutoCerts_MtlsChoice interface {
	isProxyTypeHttpsAutoCerts_MtlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProxyTypeHttpsAutoCerts_ServerHeaderChoice interface {
	isProxyTypeHttpsAutoCerts_ServerHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProxyTypeHttpsAutoCerts_PathNormalizeChoice interface {
	isProxyTypeHttpsAutoCerts_PathNormalizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProxyTypeHttpsAutoCerts_PortChoice interface {
	isProxyTypeHttpsAutoCerts_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProxyTypeHttpsAutoCerts_DefaultLbChoice interface {
	isProxyTypeHttpsAutoCerts_DefaultLbChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxyTypeHttpsAutoCerts_NoMtls struct {
	NoMtls *schema.Empty `protobuf:"bytes,5,opt,name=no_mtls,json=noMtls,proto3,oneof" json:"no_mtls,omitempty"`
}
type ProxyTypeHttpsAutoCerts_UseMtls struct {
	UseMtls *views.DownstreamTlsValidationContext `protobuf:"bytes,6,opt,name=use_mtls,json=useMtls,proto3,oneof" json:"use_mtls,omitempty"`
}
type ProxyTypeHttpsAutoCerts_DefaultHeader struct {
	DefaultHeader *schema.Empty `protobuf:"bytes,8,opt,name=default_header,json=defaultHeader,proto3,oneof" json:"default_header,omitempty"`
}
type ProxyTypeHttpsAutoCerts_ServerName struct {
	ServerName string `protobuf:"bytes,9,opt,name=server_name,json=serverName,proto3,oneof" json:"server_name,omitempty"`
}
type ProxyTypeHttpsAutoCerts_AppendServerName struct {
	AppendServerName string `protobuf:"bytes,10,opt,name=append_server_name,json=appendServerName,proto3,oneof" json:"append_server_name,omitempty"`
}
type ProxyTypeHttpsAutoCerts_PassThrough struct {
	PassThrough *schema.Empty `protobuf:"bytes,11,opt,name=pass_through,json=passThrough,proto3,oneof" json:"pass_through,omitempty"`
}
type ProxyTypeHttpsAutoCerts_EnablePathNormalize struct {
	EnablePathNormalize *schema.Empty `protobuf:"bytes,13,opt,name=enable_path_normalize,json=enablePathNormalize,proto3,oneof" json:"enable_path_normalize,omitempty"`
}
type ProxyTypeHttpsAutoCerts_DisablePathNormalize struct {
	DisablePathNormalize *schema.Empty `protobuf:"bytes,14,opt,name=disable_path_normalize,json=disablePathNormalize,proto3,oneof" json:"disable_path_normalize,omitempty"`
}
type ProxyTypeHttpsAutoCerts_Port struct {
	Port uint32 `protobuf:"varint,18,opt,name=port,proto3,oneof" json:"port,omitempty"`
}
type ProxyTypeHttpsAutoCerts_PortRanges struct {
	PortRanges string `protobuf:"bytes,26,opt,name=port_ranges,json=portRanges,proto3,oneof" json:"port_ranges,omitempty"`
}
type ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer struct {
	NonDefaultLoadbalancer *schema.Empty `protobuf:"bytes,20,opt,name=non_default_loadbalancer,json=nonDefaultLoadbalancer,proto3,oneof" json:"non_default_loadbalancer,omitempty"`
}
type ProxyTypeHttpsAutoCerts_DefaultLoadbalancer struct {
	DefaultLoadbalancer *schema.Empty `protobuf:"bytes,21,opt,name=default_loadbalancer,json=defaultLoadbalancer,proto3,oneof" json:"default_loadbalancer,omitempty"`
}

func (*ProxyTypeHttpsAutoCerts_NoMtls) isProxyTypeHttpsAutoCerts_MtlsChoice()                       {}
func (*ProxyTypeHttpsAutoCerts_UseMtls) isProxyTypeHttpsAutoCerts_MtlsChoice()                      {}
func (*ProxyTypeHttpsAutoCerts_DefaultHeader) isProxyTypeHttpsAutoCerts_ServerHeaderChoice()        {}
func (*ProxyTypeHttpsAutoCerts_ServerName) isProxyTypeHttpsAutoCerts_ServerHeaderChoice()           {}
func (*ProxyTypeHttpsAutoCerts_AppendServerName) isProxyTypeHttpsAutoCerts_ServerHeaderChoice()     {}
func (*ProxyTypeHttpsAutoCerts_PassThrough) isProxyTypeHttpsAutoCerts_ServerHeaderChoice()          {}
func (*ProxyTypeHttpsAutoCerts_EnablePathNormalize) isProxyTypeHttpsAutoCerts_PathNormalizeChoice() {}
func (*ProxyTypeHttpsAutoCerts_DisablePathNormalize) isProxyTypeHttpsAutoCerts_PathNormalizeChoice() {
}
func (*ProxyTypeHttpsAutoCerts_Port) isProxyTypeHttpsAutoCerts_PortChoice()                        {}
func (*ProxyTypeHttpsAutoCerts_PortRanges) isProxyTypeHttpsAutoCerts_PortChoice()                  {}
func (*ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer) isProxyTypeHttpsAutoCerts_DefaultLbChoice() {}
func (*ProxyTypeHttpsAutoCerts_DefaultLoadbalancer) isProxyTypeHttpsAutoCerts_DefaultLbChoice()    {}

func (m *ProxyTypeHttpsAutoCerts) GetMtlsChoice() isProxyTypeHttpsAutoCerts_MtlsChoice {
	if m != nil {
		return m.MtlsChoice
	}
	return nil
}
func (m *ProxyTypeHttpsAutoCerts) GetServerHeaderChoice() isProxyTypeHttpsAutoCerts_ServerHeaderChoice {
	if m != nil {
		return m.ServerHeaderChoice
	}
	return nil
}
func (m *ProxyTypeHttpsAutoCerts) GetPathNormalizeChoice() isProxyTypeHttpsAutoCerts_PathNormalizeChoice {
	if m != nil {
		return m.PathNormalizeChoice
	}
	return nil
}
func (m *ProxyTypeHttpsAutoCerts) GetPortChoice() isProxyTypeHttpsAutoCerts_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}
func (m *ProxyTypeHttpsAutoCerts) GetDefaultLbChoice() isProxyTypeHttpsAutoCerts_DefaultLbChoice {
	if m != nil {
		return m.DefaultLbChoice
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetHttpRedirect() bool {
	if m != nil {
		return m.HttpRedirect
	}
	return false
}

func (m *ProxyTypeHttpsAutoCerts) GetAddHsts() bool {
	if m != nil {
		return m.AddHsts
	}
	return false
}

func (m *ProxyTypeHttpsAutoCerts) GetTlsConfig() *views.TlsConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetNoMtls() *schema.Empty {
	if x, ok := m.GetMtlsChoice().(*ProxyTypeHttpsAutoCerts_NoMtls); ok {
		return x.NoMtls
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetUseMtls() *views.DownstreamTlsValidationContext {
	if x, ok := m.GetMtlsChoice().(*ProxyTypeHttpsAutoCerts_UseMtls); ok {
		return x.UseMtls
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetDefaultHeader() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_DefaultHeader); ok {
		return x.DefaultHeader
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *ProxyTypeHttpsAutoCerts) GetAppendServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_AppendServerName); ok {
		return x.AppendServerName
	}
	return ""
}

func (m *ProxyTypeHttpsAutoCerts) GetPassThrough() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_PassThrough); ok {
		return x.PassThrough
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetEnablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*ProxyTypeHttpsAutoCerts_EnablePathNormalize); ok {
		return x.EnablePathNormalize
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetDisablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*ProxyTypeHttpsAutoCerts_DisablePathNormalize); ok {
		return x.DisablePathNormalize
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetPort() uint32 {
	if x, ok := m.GetPortChoice().(*ProxyTypeHttpsAutoCerts_Port); ok {
		return x.Port
	}
	return 0
}

func (m *ProxyTypeHttpsAutoCerts) GetPortRanges() string {
	if x, ok := m.GetPortChoice().(*ProxyTypeHttpsAutoCerts_PortRanges); ok {
		return x.PortRanges
	}
	return ""
}

func (m *ProxyTypeHttpsAutoCerts) GetNonDefaultLoadbalancer() *schema.Empty {
	if x, ok := m.GetDefaultLbChoice().(*ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer); ok {
		return x.NonDefaultLoadbalancer
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetDefaultLoadbalancer() *schema.Empty {
	if x, ok := m.GetDefaultLbChoice().(*ProxyTypeHttpsAutoCerts_DefaultLoadbalancer); ok {
		return x.DefaultLoadbalancer
	}
	return nil
}

// Deprecated: Do not use.
func (m *ProxyTypeHttpsAutoCerts) GetHeaderTransformationType() *schema.HeaderTransformationType {
	if m != nil {
		return m.HeaderTransformationType
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetConnectionIdleTimeout() uint32 {
	if m != nil {
		return m.ConnectionIdleTimeout
	}
	return 0
}

func (m *ProxyTypeHttpsAutoCerts) GetHttpProtocolOptions() *virtual_host.HttpProtocolOptions {
	if m != nil {
		return m.HttpProtocolOptions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProxyTypeHttpsAutoCerts) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProxyTypeHttpsAutoCerts_NoMtls)(nil),
		(*ProxyTypeHttpsAutoCerts_UseMtls)(nil),
		(*ProxyTypeHttpsAutoCerts_DefaultHeader)(nil),
		(*ProxyTypeHttpsAutoCerts_ServerName)(nil),
		(*ProxyTypeHttpsAutoCerts_AppendServerName)(nil),
		(*ProxyTypeHttpsAutoCerts_PassThrough)(nil),
		(*ProxyTypeHttpsAutoCerts_EnablePathNormalize)(nil),
		(*ProxyTypeHttpsAutoCerts_DisablePathNormalize)(nil),
		(*ProxyTypeHttpsAutoCerts_Port)(nil),
		(*ProxyTypeHttpsAutoCerts_PortRanges)(nil),
		(*ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer)(nil),
		(*ProxyTypeHttpsAutoCerts_DefaultLoadbalancer)(nil),
	}
}

// Hash Policy List
//
// x-displayName: "Hash Policy List"
// List of hash policy rules
type HashPolicyListType struct {
	// hash_policy
	//
	// x-displayName: "Hash Policy"
	// x-required
	// Specifies a list of hash policies to use for ring hash load balancing. Each
	// hash policy is evaluated individually and the combined result is used to
	// route the request
	HashPolicy []*route.HashPolicyType `protobuf:"bytes,16,rep,name=hash_policy,json=hashPolicy,proto3" json:"hash_policy,omitempty"`
}

func (m *HashPolicyListType) Reset()      { *m = HashPolicyListType{} }
func (*HashPolicyListType) ProtoMessage() {}
func (*HashPolicyListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{3}
}
func (m *HashPolicyListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HashPolicyListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HashPolicyListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashPolicyListType.Merge(m, src)
}
func (m *HashPolicyListType) XXX_Size() int {
	return m.Size()
}
func (m *HashPolicyListType) XXX_DiscardUnknown() {
	xxx_messageInfo_HashPolicyListType.DiscardUnknown(m)
}

var xxx_messageInfo_HashPolicyListType proto.InternalMessageInfo

func (m *HashPolicyListType) GetHashPolicy() []*route.HashPolicyType {
	if m != nil {
		return m.HashPolicy
	}
	return nil
}

// MirrorPolicyType
//
// x-displayName: "Mirror Policy"
// MirrorPolicy is used for shadowing traffic from one origin pool to another. The approach used
// is "fire and forget", meaning it will not wait for the shadow origin pool to
// respond before returning the response from the primary origin pool. All normal statistics are
// collected for the shadow origin pool making this feature useful for testing and troubleshooting.
type MirrorPolicyType struct {
	// cluster
	//
	// x-displayName: "Mirror Destination Cluster"
	// x-required
	// Specifies the cluster to which the requests will be mirrored. The cluster object
	// referred here must be present.
	OriginPool *views.ObjectRefType `protobuf:"bytes,1,opt,name=origin_pool,json=originPool,proto3" json:"origin_pool,omitempty"`
	// percent
	//
	// x-displayName: "Mirror Percentage"
	// x-required
	// Percentage of requests to be mirrored
	Percent *schema.FractionalPercent `protobuf:"bytes,2,opt,name=percent,proto3" json:"percent,omitempty"`
}

func (m *MirrorPolicyType) Reset()      { *m = MirrorPolicyType{} }
func (*MirrorPolicyType) ProtoMessage() {}
func (*MirrorPolicyType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{4}
}
func (m *MirrorPolicyType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MirrorPolicyType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MirrorPolicyType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MirrorPolicyType.Merge(m, src)
}
func (m *MirrorPolicyType) XXX_Size() int {
	return m.Size()
}
func (m *MirrorPolicyType) XXX_DiscardUnknown() {
	xxx_messageInfo_MirrorPolicyType.DiscardUnknown(m)
}

var xxx_messageInfo_MirrorPolicyType proto.InternalMessageInfo

func (m *MirrorPolicyType) GetOriginPool() *views.ObjectRefType {
	if m != nil {
		return m.OriginPool
	}
	return nil
}

func (m *MirrorPolicyType) GetPercent() *schema.FractionalPercent {
	if m != nil {
		return m.Percent
	}
	return nil
}

// Advanced Route Options
//
// x-displayName: "Advanced Route Options"
// Configure advanced options for route like path rewrite, hash policy, etc.
type RouteSimpleAdvancedOptions struct {
	// Hash Policy Choice
	//
	// x-displayName: "Hash Policy Choice"
	// x-required
	// Enable route specific hash policy for this route
	//
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*RouteSimpleAdvancedOptions_CommonHashPolicy
	//	*RouteSimpleAdvancedOptions_SpecificHashPolicy
	HashPolicyChoice isRouteSimpleAdvancedOptions_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	// priority
	//
	// x-displayName: "Priority"
	// Priority routing for each route. Different connection pools are used based on the priority of the route.
	// Also, circuit-breaker configuration at destination cluster is chosen based on the route priority.
	Priority schema.RoutingPriority `protobuf:"varint,4,opt,name=priority,proto3,enum=ves.io.schema.RoutingPriority" json:"priority,omitempty"`
	// Origin Servers Subset
	//
	// x-displayName: "Origin Servers Subsets"
	// x-example: "value"
	// Upstream origin pool may be configured to divide its origin servers into subsets based on metadata
	// attached to the origin servers. Routes may then specify the metadata that a endpoint must match in
	// order to be selected by the load balancer
	//
	// For origin servers which are discovered in K8S or Consul cluster, the label of the service is merged with
	// endpoint's labels. In case of Consul, the label is derived from the "Tag" field.
	// For labels that are common between configured endpoint and discovered service, labels from discovered service
	// takes precedence.
	//
	// List of key-value pairs that will be used as matching metadata. Only those origin servers of
	// upstream origin pool which match this metadata will be selected for load balancing
	EndpointSubsets map[string]string `protobuf:"bytes,5,rep,name=endpoint_subsets,json=endpointSubsets,proto3" json:"endpoint_subsets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Enable Rewrite
	//
	// x-displayName: "Enable Rewrite"
	// x-required
	// Select to enable prefix or regex rewrite or disable all options
	//
	// Types that are valid to be assigned to RewriteChoice:
	//	*RouteSimpleAdvancedOptions_DisablePrefixRewrite
	//	*RouteSimpleAdvancedOptions_PrefixRewrite
	//	*RouteSimpleAdvancedOptions_RegexRewrite
	RewriteChoice isRouteSimpleAdvancedOptions_RewriteChoice `protobuf_oneof:"rewrite_choice"`
	// Headers to add in request
	//
	// x-displayName: "Add Request Headers"
	// Headers are key-value pairs to be added to HTTP request being routed towards upstream.
	RequestHeadersToAdd []*schema.HeaderManipulationOptionType `protobuf:"bytes,9,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// Header to be removed from request
	//
	// x-displayName: "Remove Request Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP request being sent towards upstream.
	RequestHeadersToRemove []string `protobuf:"bytes,10,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// Headers to add in response
	//
	// x-displayName: "Add Response Headers"
	// Headers are key-value pairs to be added to HTTP response being sent towards downstream.
	ResponseHeadersToAdd []*schema.HeaderManipulationOptionType `protobuf:"bytes,11,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	// Header to be removed from response
	//
	// x-displayName: "Remove Response Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP response being sent towards downstream.
	ResponseHeadersToRemove []string `protobuf:"bytes,12,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
	// disable_location_add
	//
	// x-displayName: "Disable Location Addition"
	// x-example: true
	// disables append of x-volterra-location = <re-site-name> at route level, if it is configured at
	// virtual-host level. This configuration is ignored on CE sites.
	DisableLocationAdd bool `protobuf:"varint,13,opt,name=disable_location_add,json=disableLocationAdd,proto3" json:"disable_location_add,omitempty"`
	// Enable the WAF (Web Application Firewall) functionality for VirtualHost
	//
	// x-displayName: "Web Application Firewall (WAF)"
	//
	// WAF can be used to analyze inbound and outbound http/https traffic.
	// WAF can be configured either in BLOCKing Mode or ALERTing Mode.
	// In BLOCKing mode if WAF detects suspicious inbound/outbound traffic it blocks the request or response.
	// In ALERTing mode if suspicious traffic is detected, WAF generates ALERTs with details on the
	// suspicious traffic (instead of blocking traffic).
	//
	// Types that are valid to be assigned to WafChoice:
	//	*RouteSimpleAdvancedOptions_InheritedWaf
	//	*RouteSimpleAdvancedOptions_AppFirewall
	//	*RouteSimpleAdvancedOptions_DisableWaf
	WafChoice isRouteSimpleAdvancedOptions_WafChoice `protobuf_oneof:"waf_choice"`
	// cors_policy
	//
	// x-displayName: "CORS Policy"
	// Cross-Origin Resource Sharing requests configuration
	//
	// CORS is a mechanism that uses additional HTTP headers to tell a browser to let
	// a web application running at one origin (domain) have permission to access selected
	// resources from a server at a different origin
	CorsPolicy *schema.CorsPolicy `protobuf:"bytes,18,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// csrf_policy
	//
	// x-displayName: "CSRF Policy"
	// Cross-Site Request Forgery (CSRF) is an attack that occurs when a malicious third-party website exploits a vulnerability thats allows them to submit an undesired request on user's behalf.
	//
	// The policy checks where a request is coming from to determine if the request's origin is the same as its destination. The policy relies on two pieces of information used in determining if a request originated from the same host.
	//
	// 1. The origin that caused the user agent to issue the request (source origin).
	// 2. The origin that the request is going to (target origin).
	// When the policy evaluating a request, it ensures both pieces of information are present and compare their values. If the source origin is missing or origins do not match the request is rejected. The exception to this being the source-origin has been added to the policy as valid.
	// Because CSRF attacks specifically target state-changing requests, the policy only acts on the HTTP requests that have state-changing method (PUT,POST, etc.).
	CsrfPolicy *schema.CsrfPolicy `protobuf:"bytes,43,opt,name=csrf_policy,json=csrfPolicy,proto3" json:"csrf_policy,omitempty"`
	// SPDY Choice
	//
	// x-displayName: "Enable/Disable SPDY Upgrade"
	// x-required
	// Select to enable or disable spdy upgrade
	//
	// Types that are valid to be assigned to SpdyChoice:
	//	*RouteSimpleAdvancedOptions_DisableSpdy
	//	*RouteSimpleAdvancedOptions_EnableSpdy
	SpdyChoice isRouteSimpleAdvancedOptions_SpdyChoice `protobuf_oneof:"spdy_choice"`
	// Websocket Choice
	//
	// x-displayName: "Enable/Disable Websocket Upgrade"
	// x-required
	// Select to enable or disable websocket upgrade
	//
	// Types that are valid to be assigned to WebsocketChoice:
	//	*RouteSimpleAdvancedOptions_DisableWebSocketConfig
	//	*RouteSimpleAdvancedOptions_WebSocketConfig
	WebsocketChoice isRouteSimpleAdvancedOptions_WebsocketChoice `protobuf_oneof:"websocket_choice"`
	//  Retry Policy Choice
	//
	// x-displayName: "Select Retry Policy"
	// x-required
	// Select default retry policy or configure custom
	//
	// Types that are valid to be assigned to RetryPolicyChoice:
	//	*RouteSimpleAdvancedOptions_DefaultRetryPolicy
	//	*RouteSimpleAdvancedOptions_NoRetryPolicy
	//	*RouteSimpleAdvancedOptions_RetryPolicy
	RetryPolicyChoice isRouteSimpleAdvancedOptions_RetryPolicyChoice `protobuf_oneof:"retry_policy_choice"`
	// timeout
	//
	// x-displayName: "Timeout"
	// x-example: "2000"
	// The timeout for the route including all retries, in milliseconds.
	// Should be set to a high value or 0 (infinite timeout) for server-side streaming.
	Timeout uint32 `protobuf:"varint,28,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Enable Route Specific Buffering
	//
	// x-displayName: "Enable Route Specific Buffering"
	// x-required
	// Enable or disable route specific buffering
	//
	// Types that are valid to be assigned to BufferChoice:
	//	*RouteSimpleAdvancedOptions_CommonBuffering
	//	*RouteSimpleAdvancedOptions_BufferPolicy
	BufferChoice isRouteSimpleAdvancedOptions_BufferChoice `protobuf_oneof:"buffer_choice"`
	// Mirroring
	//
	// x-displayName: "Mirroring"
	// x-required
	// Enable/disable Mirroring
	//
	// Types that are valid to be assigned to MirroringChoice:
	//	*RouteSimpleAdvancedOptions_DisableMirroring
	//	*RouteSimpleAdvancedOptions_MirrorPolicy
	MirroringChoice isRouteSimpleAdvancedOptions_MirroringChoice `protobuf_oneof:"mirroring_choice"`
	// Oneof for Cluster retraction
	//
	// x-displayName: "Select Cluster retract option"
	// x-required
	// Specifies whether retraction of cluster has to be enabled or
	// disabled
	//
	// Types that are valid to be assigned to ClusterRetractChoice:
	//	*RouteSimpleAdvancedOptions_RetractCluster
	//	*RouteSimpleAdvancedOptions_DoNotRetractCluster
	ClusterRetractChoice isRouteSimpleAdvancedOptions_ClusterRetractChoice `protobuf_oneof:"cluster_retract_choice"`
	// Oneof Bot Defense JavaScript Injection
	//
	// x-displayName: "Insert JavaScript Tag"
	// Specifies whether bot defense javascript injection has a specific
	// configuration for this route
	//
	// Types that are valid to be assigned to BotDefenseJavascriptInjectionChoice:
	//	*RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection
	//	*RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection
	BotDefenseJavascriptInjectionChoice isRouteSimpleAdvancedOptions_BotDefenseJavascriptInjectionChoice `protobuf_oneof:"bot_defense_javascript_injection_choice"`
}

func (m *RouteSimpleAdvancedOptions) Reset()      { *m = RouteSimpleAdvancedOptions{} }
func (*RouteSimpleAdvancedOptions) ProtoMessage() {}
func (*RouteSimpleAdvancedOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{5}
}
func (m *RouteSimpleAdvancedOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteSimpleAdvancedOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RouteSimpleAdvancedOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteSimpleAdvancedOptions.Merge(m, src)
}
func (m *RouteSimpleAdvancedOptions) XXX_Size() int {
	return m.Size()
}
func (m *RouteSimpleAdvancedOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteSimpleAdvancedOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RouteSimpleAdvancedOptions proto.InternalMessageInfo

type isRouteSimpleAdvancedOptions_HashPolicyChoice interface {
	isRouteSimpleAdvancedOptions_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_RewriteChoice interface {
	isRouteSimpleAdvancedOptions_RewriteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_WafChoice interface {
	isRouteSimpleAdvancedOptions_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_SpdyChoice interface {
	isRouteSimpleAdvancedOptions_SpdyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_WebsocketChoice interface {
	isRouteSimpleAdvancedOptions_WebsocketChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_RetryPolicyChoice interface {
	isRouteSimpleAdvancedOptions_RetryPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_BufferChoice interface {
	isRouteSimpleAdvancedOptions_BufferChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_MirroringChoice interface {
	isRouteSimpleAdvancedOptions_MirroringChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_ClusterRetractChoice interface {
	isRouteSimpleAdvancedOptions_ClusterRetractChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_BotDefenseJavascriptInjectionChoice interface {
	isRouteSimpleAdvancedOptions_BotDefenseJavascriptInjectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RouteSimpleAdvancedOptions_CommonHashPolicy struct {
	CommonHashPolicy *schema.Empty `protobuf:"bytes,2,opt,name=common_hash_policy,json=commonHashPolicy,proto3,oneof" json:"common_hash_policy,omitempty"`
}
type RouteSimpleAdvancedOptions_SpecificHashPolicy struct {
	SpecificHashPolicy *HashPolicyListType `protobuf:"bytes,3,opt,name=specific_hash_policy,json=specificHashPolicy,proto3,oneof" json:"specific_hash_policy,omitempty"`
}
type RouteSimpleAdvancedOptions_DisablePrefixRewrite struct {
	DisablePrefixRewrite *schema.Empty `protobuf:"bytes,7,opt,name=disable_prefix_rewrite,json=disablePrefixRewrite,proto3,oneof" json:"disable_prefix_rewrite,omitempty"`
}
type RouteSimpleAdvancedOptions_PrefixRewrite struct {
	PrefixRewrite string `protobuf:"bytes,8,opt,name=prefix_rewrite,json=prefixRewrite,proto3,oneof" json:"prefix_rewrite,omitempty"`
}
type RouteSimpleAdvancedOptions_RegexRewrite struct {
	RegexRewrite *schema.RegexMatchRewrite `protobuf:"bytes,44,opt,name=regex_rewrite,json=regexRewrite,proto3,oneof" json:"regex_rewrite,omitempty"`
}
type RouteSimpleAdvancedOptions_InheritedWaf struct {
	InheritedWaf *schema.Empty `protobuf:"bytes,15,opt,name=inherited_waf,json=inheritedWaf,proto3,oneof" json:"inherited_waf,omitempty"`
}
type RouteSimpleAdvancedOptions_AppFirewall struct {
	AppFirewall *views.ObjectRefType `protobuf:"bytes,52,opt,name=app_firewall,json=appFirewall,proto3,oneof" json:"app_firewall,omitempty"`
}
type RouteSimpleAdvancedOptions_DisableWaf struct {
	DisableWaf *schema.Empty `protobuf:"bytes,41,opt,name=disable_waf,json=disableWaf,proto3,oneof" json:"disable_waf,omitempty"`
}
type RouteSimpleAdvancedOptions_DisableSpdy struct {
	DisableSpdy *schema.Empty `protobuf:"bytes,20,opt,name=disable_spdy,json=disableSpdy,proto3,oneof" json:"disable_spdy,omitempty"`
}
type RouteSimpleAdvancedOptions_EnableSpdy struct {
	EnableSpdy *schema.Empty `protobuf:"bytes,21,opt,name=enable_spdy,json=enableSpdy,proto3,oneof" json:"enable_spdy,omitempty"`
}
type RouteSimpleAdvancedOptions_DisableWebSocketConfig struct {
	DisableWebSocketConfig *schema.Empty `protobuf:"bytes,23,opt,name=disable_web_socket_config,json=disableWebSocketConfig,proto3,oneof" json:"disable_web_socket_config,omitempty"`
}
type RouteSimpleAdvancedOptions_WebSocketConfig struct {
	WebSocketConfig *route.WebsocketConfigType `protobuf:"bytes,24,opt,name=web_socket_config,json=webSocketConfig,proto3,oneof" json:"web_socket_config,omitempty"`
}
type RouteSimpleAdvancedOptions_DefaultRetryPolicy struct {
	DefaultRetryPolicy *schema.Empty `protobuf:"bytes,26,opt,name=default_retry_policy,json=defaultRetryPolicy,proto3,oneof" json:"default_retry_policy,omitempty"`
}
type RouteSimpleAdvancedOptions_NoRetryPolicy struct {
	NoRetryPolicy *schema.Empty `protobuf:"bytes,42,opt,name=no_retry_policy,json=noRetryPolicy,proto3,oneof" json:"no_retry_policy,omitempty"`
}
type RouteSimpleAdvancedOptions_RetryPolicy struct {
	RetryPolicy *schema.RetryPolicyType `protobuf:"bytes,27,opt,name=retry_policy,json=retryPolicy,proto3,oneof" json:"retry_policy,omitempty"`
}
type RouteSimpleAdvancedOptions_CommonBuffering struct {
	CommonBuffering *schema.Empty `protobuf:"bytes,30,opt,name=common_buffering,json=commonBuffering,proto3,oneof" json:"common_buffering,omitempty"`
}
type RouteSimpleAdvancedOptions_BufferPolicy struct {
	BufferPolicy *schema.BufferConfigType `protobuf:"bytes,31,opt,name=buffer_policy,json=bufferPolicy,proto3,oneof" json:"buffer_policy,omitempty"`
}
type RouteSimpleAdvancedOptions_DisableMirroring struct {
	DisableMirroring *schema.Empty `protobuf:"bytes,33,opt,name=disable_mirroring,json=disableMirroring,proto3,oneof" json:"disable_mirroring,omitempty"`
}
type RouteSimpleAdvancedOptions_MirrorPolicy struct {
	MirrorPolicy *MirrorPolicyType `protobuf:"bytes,34,opt,name=mirror_policy,json=mirrorPolicy,proto3,oneof" json:"mirror_policy,omitempty"`
}
type RouteSimpleAdvancedOptions_RetractCluster struct {
	RetractCluster *schema.Empty `protobuf:"bytes,36,opt,name=retract_cluster,json=retractCluster,proto3,oneof" json:"retract_cluster,omitempty"`
}
type RouteSimpleAdvancedOptions_DoNotRetractCluster struct {
	DoNotRetractCluster *schema.Empty `protobuf:"bytes,37,opt,name=do_not_retract_cluster,json=doNotRetractCluster,proto3,oneof" json:"do_not_retract_cluster,omitempty"`
}
type RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection struct {
	InheritedBotDefenseJavascriptInjection *schema.Empty `protobuf:"bytes,39,opt,name=inherited_bot_defense_javascript_injection,json=inheritedBotDefenseJavascriptInjection,proto3,oneof" json:"inherited_bot_defense_javascript_injection,omitempty"`
}
type RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection struct {
	BotDefenseJavascriptInjection *route.BotDefenseJavascriptInjectionType `protobuf:"bytes,40,opt,name=bot_defense_javascript_injection,json=botDefenseJavascriptInjection,proto3,oneof" json:"bot_defense_javascript_injection,omitempty"`
}

func (*RouteSimpleAdvancedOptions_CommonHashPolicy) isRouteSimpleAdvancedOptions_HashPolicyChoice() {}
func (*RouteSimpleAdvancedOptions_SpecificHashPolicy) isRouteSimpleAdvancedOptions_HashPolicyChoice() {
}
func (*RouteSimpleAdvancedOptions_DisablePrefixRewrite) isRouteSimpleAdvancedOptions_RewriteChoice() {
}
func (*RouteSimpleAdvancedOptions_PrefixRewrite) isRouteSimpleAdvancedOptions_RewriteChoice() {}
func (*RouteSimpleAdvancedOptions_RegexRewrite) isRouteSimpleAdvancedOptions_RewriteChoice()  {}
func (*RouteSimpleAdvancedOptions_InheritedWaf) isRouteSimpleAdvancedOptions_WafChoice()      {}
func (*RouteSimpleAdvancedOptions_AppFirewall) isRouteSimpleAdvancedOptions_WafChoice()       {}
func (*RouteSimpleAdvancedOptions_DisableWaf) isRouteSimpleAdvancedOptions_WafChoice()        {}
func (*RouteSimpleAdvancedOptions_DisableSpdy) isRouteSimpleAdvancedOptions_SpdyChoice()      {}
func (*RouteSimpleAdvancedOptions_EnableSpdy) isRouteSimpleAdvancedOptions_SpdyChoice()       {}
func (*RouteSimpleAdvancedOptions_DisableWebSocketConfig) isRouteSimpleAdvancedOptions_WebsocketChoice() {
}
func (*RouteSimpleAdvancedOptions_WebSocketConfig) isRouteSimpleAdvancedOptions_WebsocketChoice() {}
func (*RouteSimpleAdvancedOptions_DefaultRetryPolicy) isRouteSimpleAdvancedOptions_RetryPolicyChoice() {
}
func (*RouteSimpleAdvancedOptions_NoRetryPolicy) isRouteSimpleAdvancedOptions_RetryPolicyChoice()  {}
func (*RouteSimpleAdvancedOptions_RetryPolicy) isRouteSimpleAdvancedOptions_RetryPolicyChoice()    {}
func (*RouteSimpleAdvancedOptions_CommonBuffering) isRouteSimpleAdvancedOptions_BufferChoice()     {}
func (*RouteSimpleAdvancedOptions_BufferPolicy) isRouteSimpleAdvancedOptions_BufferChoice()        {}
func (*RouteSimpleAdvancedOptions_DisableMirroring) isRouteSimpleAdvancedOptions_MirroringChoice() {}
func (*RouteSimpleAdvancedOptions_MirrorPolicy) isRouteSimpleAdvancedOptions_MirroringChoice()     {}
func (*RouteSimpleAdvancedOptions_RetractCluster) isRouteSimpleAdvancedOptions_ClusterRetractChoice() {
}
func (*RouteSimpleAdvancedOptions_DoNotRetractCluster) isRouteSimpleAdvancedOptions_ClusterRetractChoice() {
}
func (*RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection) isRouteSimpleAdvancedOptions_BotDefenseJavascriptInjectionChoice() {
}
func (*RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection) isRouteSimpleAdvancedOptions_BotDefenseJavascriptInjectionChoice() {
}

func (m *RouteSimpleAdvancedOptions) GetHashPolicyChoice() isRouteSimpleAdvancedOptions_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetRewriteChoice() isRouteSimpleAdvancedOptions_RewriteChoice {
	if m != nil {
		return m.RewriteChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetWafChoice() isRouteSimpleAdvancedOptions_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetSpdyChoice() isRouteSimpleAdvancedOptions_SpdyChoice {
	if m != nil {
		return m.SpdyChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetWebsocketChoice() isRouteSimpleAdvancedOptions_WebsocketChoice {
	if m != nil {
		return m.WebsocketChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetRetryPolicyChoice() isRouteSimpleAdvancedOptions_RetryPolicyChoice {
	if m != nil {
		return m.RetryPolicyChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetBufferChoice() isRouteSimpleAdvancedOptions_BufferChoice {
	if m != nil {
		return m.BufferChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetMirroringChoice() isRouteSimpleAdvancedOptions_MirroringChoice {
	if m != nil {
		return m.MirroringChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetClusterRetractChoice() isRouteSimpleAdvancedOptions_ClusterRetractChoice {
	if m != nil {
		return m.ClusterRetractChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetBotDefenseJavascriptInjectionChoice() isRouteSimpleAdvancedOptions_BotDefenseJavascriptInjectionChoice {
	if m != nil {
		return m.BotDefenseJavascriptInjectionChoice
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetCommonHashPolicy() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*RouteSimpleAdvancedOptions_CommonHashPolicy); ok {
		return x.CommonHashPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetSpecificHashPolicy() *HashPolicyListType {
	if x, ok := m.GetHashPolicyChoice().(*RouteSimpleAdvancedOptions_SpecificHashPolicy); ok {
		return x.SpecificHashPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetPriority() schema.RoutingPriority {
	if m != nil {
		return m.Priority
	}
	return schema.DEFAULT
}

func (m *RouteSimpleAdvancedOptions) GetEndpointSubsets() map[string]string {
	if m != nil {
		return m.EndpointSubsets
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDisablePrefixRewrite() *schema.Empty {
	if x, ok := m.GetRewriteChoice().(*RouteSimpleAdvancedOptions_DisablePrefixRewrite); ok {
		return x.DisablePrefixRewrite
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetPrefixRewrite() string {
	if x, ok := m.GetRewriteChoice().(*RouteSimpleAdvancedOptions_PrefixRewrite); ok {
		return x.PrefixRewrite
	}
	return ""
}

func (m *RouteSimpleAdvancedOptions) GetRegexRewrite() *schema.RegexMatchRewrite {
	if x, ok := m.GetRewriteChoice().(*RouteSimpleAdvancedOptions_RegexRewrite); ok {
		return x.RegexRewrite
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetRequestHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetResponseHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDisableLocationAdd() bool {
	if m != nil {
		return m.DisableLocationAdd
	}
	return false
}

func (m *RouteSimpleAdvancedOptions) GetInheritedWaf() *schema.Empty {
	if x, ok := m.GetWafChoice().(*RouteSimpleAdvancedOptions_InheritedWaf); ok {
		return x.InheritedWaf
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetAppFirewall() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*RouteSimpleAdvancedOptions_AppFirewall); ok {
		return x.AppFirewall
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDisableWaf() *schema.Empty {
	if x, ok := m.GetWafChoice().(*RouteSimpleAdvancedOptions_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetCsrfPolicy() *schema.CsrfPolicy {
	if m != nil {
		return m.CsrfPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDisableSpdy() *schema.Empty {
	if x, ok := m.GetSpdyChoice().(*RouteSimpleAdvancedOptions_DisableSpdy); ok {
		return x.DisableSpdy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetEnableSpdy() *schema.Empty {
	if x, ok := m.GetSpdyChoice().(*RouteSimpleAdvancedOptions_EnableSpdy); ok {
		return x.EnableSpdy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDisableWebSocketConfig() *schema.Empty {
	if x, ok := m.GetWebsocketChoice().(*RouteSimpleAdvancedOptions_DisableWebSocketConfig); ok {
		return x.DisableWebSocketConfig
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetWebSocketConfig() *route.WebsocketConfigType {
	if x, ok := m.GetWebsocketChoice().(*RouteSimpleAdvancedOptions_WebSocketConfig); ok {
		return x.WebSocketConfig
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDefaultRetryPolicy() *schema.Empty {
	if x, ok := m.GetRetryPolicyChoice().(*RouteSimpleAdvancedOptions_DefaultRetryPolicy); ok {
		return x.DefaultRetryPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetNoRetryPolicy() *schema.Empty {
	if x, ok := m.GetRetryPolicyChoice().(*RouteSimpleAdvancedOptions_NoRetryPolicy); ok {
		return x.NoRetryPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetRetryPolicy() *schema.RetryPolicyType {
	if x, ok := m.GetRetryPolicyChoice().(*RouteSimpleAdvancedOptions_RetryPolicy); ok {
		return x.RetryPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *RouteSimpleAdvancedOptions) GetCommonBuffering() *schema.Empty {
	if x, ok := m.GetBufferChoice().(*RouteSimpleAdvancedOptions_CommonBuffering); ok {
		return x.CommonBuffering
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetBufferPolicy() *schema.BufferConfigType {
	if x, ok := m.GetBufferChoice().(*RouteSimpleAdvancedOptions_BufferPolicy); ok {
		return x.BufferPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDisableMirroring() *schema.Empty {
	if x, ok := m.GetMirroringChoice().(*RouteSimpleAdvancedOptions_DisableMirroring); ok {
		return x.DisableMirroring
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetMirrorPolicy() *MirrorPolicyType {
	if x, ok := m.GetMirroringChoice().(*RouteSimpleAdvancedOptions_MirrorPolicy); ok {
		return x.MirrorPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*RouteSimpleAdvancedOptions_RetractCluster); ok {
		return x.RetractCluster
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDoNotRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*RouteSimpleAdvancedOptions_DoNotRetractCluster); ok {
		return x.DoNotRetractCluster
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetInheritedBotDefenseJavascriptInjection() *schema.Empty {
	if x, ok := m.GetBotDefenseJavascriptInjectionChoice().(*RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection); ok {
		return x.InheritedBotDefenseJavascriptInjection
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetBotDefenseJavascriptInjection() *route.BotDefenseJavascriptInjectionType {
	if x, ok := m.GetBotDefenseJavascriptInjectionChoice().(*RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection); ok {
		return x.BotDefenseJavascriptInjection
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RouteSimpleAdvancedOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RouteSimpleAdvancedOptions_CommonHashPolicy)(nil),
		(*RouteSimpleAdvancedOptions_SpecificHashPolicy)(nil),
		(*RouteSimpleAdvancedOptions_DisablePrefixRewrite)(nil),
		(*RouteSimpleAdvancedOptions_PrefixRewrite)(nil),
		(*RouteSimpleAdvancedOptions_RegexRewrite)(nil),
		(*RouteSimpleAdvancedOptions_InheritedWaf)(nil),
		(*RouteSimpleAdvancedOptions_AppFirewall)(nil),
		(*RouteSimpleAdvancedOptions_DisableWaf)(nil),
		(*RouteSimpleAdvancedOptions_DisableSpdy)(nil),
		(*RouteSimpleAdvancedOptions_EnableSpdy)(nil),
		(*RouteSimpleAdvancedOptions_DisableWebSocketConfig)(nil),
		(*RouteSimpleAdvancedOptions_WebSocketConfig)(nil),
		(*RouteSimpleAdvancedOptions_DefaultRetryPolicy)(nil),
		(*RouteSimpleAdvancedOptions_NoRetryPolicy)(nil),
		(*RouteSimpleAdvancedOptions_RetryPolicy)(nil),
		(*RouteSimpleAdvancedOptions_CommonBuffering)(nil),
		(*RouteSimpleAdvancedOptions_BufferPolicy)(nil),
		(*RouteSimpleAdvancedOptions_DisableMirroring)(nil),
		(*RouteSimpleAdvancedOptions_MirrorPolicy)(nil),
		(*RouteSimpleAdvancedOptions_RetractCluster)(nil),
		(*RouteSimpleAdvancedOptions_DoNotRetractCluster)(nil),
		(*RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection)(nil),
		(*RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection)(nil),
	}
}

// RouteTypeSimpleWithDefaultOriginPool
//
// x-displayName: "Simple Route"
// A simple route matches on path and/or HTTP method and forwards the matching traffic to the default origin pool specified outside
type RouteTypeSimpleWithDefaultOriginPool struct {
	// http_method
	//
	// x-displayName: "HTTP Method"
	// The name of the HTTP Method (GET, PUT, POST, etc)
	HttpMethod schema.HttpMethod `protobuf:"varint,1,opt,name=http_method,json=httpMethod,proto3,enum=ves.io.schema.HttpMethod" json:"http_method,omitempty"`
	// path
	//
	// x-displayName: "Path"
	// x-required
	// URI path of route
	Path *schema.PathMatcherType `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// HostRewriteParams
	//
	// x-displayName: "Select Host Rewrite Method"
	// x-required
	// Specifies how the host header can be modified during forwarding
	//
	// Types that are valid to be assigned to HostRewriteParams:
	//	*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite
	//	*RouteTypeSimpleWithDefaultOriginPool_HostRewrite
	//	*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite
	HostRewriteParams isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams `protobuf_oneof:"host_rewrite_params"`
}

func (m *RouteTypeSimpleWithDefaultOriginPool) Reset()      { *m = RouteTypeSimpleWithDefaultOriginPool{} }
func (*RouteTypeSimpleWithDefaultOriginPool) ProtoMessage() {}
func (*RouteTypeSimpleWithDefaultOriginPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{6}
}
func (m *RouteTypeSimpleWithDefaultOriginPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteTypeSimpleWithDefaultOriginPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTypeSimpleWithDefaultOriginPool.Merge(m, src)
}
func (m *RouteTypeSimpleWithDefaultOriginPool) XXX_Size() int {
	return m.Size()
}
func (m *RouteTypeSimpleWithDefaultOriginPool) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTypeSimpleWithDefaultOriginPool.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTypeSimpleWithDefaultOriginPool proto.InternalMessageInfo

type isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams interface {
	isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite struct {
	AutoHostRewrite *schema.Empty `protobuf:"bytes,4,opt,name=auto_host_rewrite,json=autoHostRewrite,proto3,oneof" json:"auto_host_rewrite,omitempty"`
}
type RouteTypeSimpleWithDefaultOriginPool_HostRewrite struct {
	HostRewrite string `protobuf:"bytes,5,opt,name=host_rewrite,json=hostRewrite,proto3,oneof" json:"host_rewrite,omitempty"`
}
type RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite struct {
	DisableHostRewrite *schema.Empty `protobuf:"bytes,6,opt,name=disable_host_rewrite,json=disableHostRewrite,proto3,oneof" json:"disable_host_rewrite,omitempty"`
}

func (*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams() {
}
func (*RouteTypeSimpleWithDefaultOriginPool_HostRewrite) isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams() {
}
func (*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams() {
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetHostRewriteParams() isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams {
	if m != nil {
		return m.HostRewriteParams
	}
	return nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetHttpMethod() schema.HttpMethod {
	if m != nil {
		return m.HttpMethod
	}
	return schema.ANY
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetAutoHostRewrite() *schema.Empty {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite); ok {
		return x.AutoHostRewrite
	}
	return nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetHostRewrite() string {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_HostRewrite); ok {
		return x.HostRewrite
	}
	return ""
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetDisableHostRewrite() *schema.Empty {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite); ok {
		return x.DisableHostRewrite
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RouteTypeSimpleWithDefaultOriginPool) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite)(nil),
		(*RouteTypeSimpleWithDefaultOriginPool_HostRewrite)(nil),
		(*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite)(nil),
	}
}

// RouteTypeSimple
//
// x-displayName: "Simple Route"
// A simple route matches on path, incoming header, incoming port and/or HTTP method
// and forwards the matching traffic to the associated pools
type RouteTypeSimple struct {
	// path
	//
	// x-displayName: "Path"
	// x-required
	// URI path of route
	Path *schema.PathMatcherType `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// http_method
	//
	// x-displayName: "HTTP Method"
	// The name of the HTTP Method (GET, PUT, POST, etc)
	HttpMethod schema.HttpMethod `protobuf:"varint,2,opt,name=http_method,json=httpMethod,proto3,enum=ves.io.schema.HttpMethod" json:"http_method,omitempty"`
	// Origin Pools
	//
	// x-displayName: "Origin Pools"
	// x-required
	// Origin Pools for this route
	OriginPools []*views.OriginPoolWithWeight `protobuf:"bytes,3,rep,name=origin_pools,json=originPools,proto3" json:"origin_pools,omitempty"`
	// HostRewriteParams
	//
	// x-displayName: "Host Rewrite Method"
	// x-required
	// Specifies how the host header can be modified during forwarding
	//
	// Types that are valid to be assigned to HostRewriteParams:
	//	*RouteTypeSimple_AutoHostRewrite
	//	*RouteTypeSimple_HostRewrite
	//	*RouteTypeSimple_DisableHostRewrite
	HostRewriteParams isRouteTypeSimple_HostRewriteParams `protobuf_oneof:"host_rewrite_params"`
	// headers
	//
	// x-displayName: "Headers"
	// List of (key, value) headers
	Headers []*schema.HeaderMatcherType `protobuf:"bytes,9,rep,name=headers,proto3" json:"headers,omitempty"`
	// incoming_port
	//
	// x-displayName: "Match LB port"
	// The port on which the request is received
	IncomingPort *schema.PortMatcherType `protobuf:"bytes,10,opt,name=incoming_port,json=incomingPort,proto3" json:"incoming_port,omitempty"`
	// Advanced Options
	//
	// x-displayName: "Advanced Options"
	// Configure Advanced per route options
	AdvancedOptions *RouteSimpleAdvancedOptions `protobuf:"bytes,8,opt,name=advanced_options,json=advancedOptions,proto3" json:"advanced_options,omitempty"`
}

func (m *RouteTypeSimple) Reset()      { *m = RouteTypeSimple{} }
func (*RouteTypeSimple) ProtoMessage() {}
func (*RouteTypeSimple) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{7}
}
func (m *RouteTypeSimple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteTypeSimple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RouteTypeSimple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTypeSimple.Merge(m, src)
}
func (m *RouteTypeSimple) XXX_Size() int {
	return m.Size()
}
func (m *RouteTypeSimple) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTypeSimple.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTypeSimple proto.InternalMessageInfo

type isRouteTypeSimple_HostRewriteParams interface {
	isRouteTypeSimple_HostRewriteParams()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RouteTypeSimple_AutoHostRewrite struct {
	AutoHostRewrite *schema.Empty `protobuf:"bytes,5,opt,name=auto_host_rewrite,json=autoHostRewrite,proto3,oneof" json:"auto_host_rewrite,omitempty"`
}
type RouteTypeSimple_HostRewrite struct {
	HostRewrite string `protobuf:"bytes,6,opt,name=host_rewrite,json=hostRewrite,proto3,oneof" json:"host_rewrite,omitempty"`
}
type RouteTypeSimple_DisableHostRewrite struct {
	DisableHostRewrite *schema.Empty `protobuf:"bytes,7,opt,name=disable_host_rewrite,json=disableHostRewrite,proto3,oneof" json:"disable_host_rewrite,omitempty"`
}

func (*RouteTypeSimple_AutoHostRewrite) isRouteTypeSimple_HostRewriteParams()    {}
func (*RouteTypeSimple_HostRewrite) isRouteTypeSimple_HostRewriteParams()        {}
func (*RouteTypeSimple_DisableHostRewrite) isRouteTypeSimple_HostRewriteParams() {}

func (m *RouteTypeSimple) GetHostRewriteParams() isRouteTypeSimple_HostRewriteParams {
	if m != nil {
		return m.HostRewriteParams
	}
	return nil
}

func (m *RouteTypeSimple) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RouteTypeSimple) GetHttpMethod() schema.HttpMethod {
	if m != nil {
		return m.HttpMethod
	}
	return schema.ANY
}

func (m *RouteTypeSimple) GetOriginPools() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.OriginPools
	}
	return nil
}

func (m *RouteTypeSimple) GetAutoHostRewrite() *schema.Empty {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimple_AutoHostRewrite); ok {
		return x.AutoHostRewrite
	}
	return nil
}

func (m *RouteTypeSimple) GetHostRewrite() string {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimple_HostRewrite); ok {
		return x.HostRewrite
	}
	return ""
}

func (m *RouteTypeSimple) GetDisableHostRewrite() *schema.Empty {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimple_DisableHostRewrite); ok {
		return x.DisableHostRewrite
	}
	return nil
}

func (m *RouteTypeSimple) GetHeaders() []*schema.HeaderMatcherType {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RouteTypeSimple) GetIncomingPort() *schema.PortMatcherType {
	if m != nil {
		return m.IncomingPort
	}
	return nil
}

func (m *RouteTypeSimple) GetAdvancedOptions() *RouteSimpleAdvancedOptions {
	if m != nil {
		return m.AdvancedOptions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RouteTypeSimple) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RouteTypeSimple_AutoHostRewrite)(nil),
		(*RouteTypeSimple_HostRewrite)(nil),
		(*RouteTypeSimple_DisableHostRewrite)(nil),
	}
}

// RouteTypeRedirect
//
// x-displayName: "Redirect Route"
// A redirect route matches on path, incoming header, incoming port and/or HTTP method
// and redirects the matching traffic to a different URL
type RouteTypeRedirect struct {
	// path
	//
	// x-displayName: "Path"
	// x-required
	// URI path of route
	Path *schema.PathMatcherType `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// http_method
	//
	// x-displayName: "HTTP Method"
	// The name of the HTTP Method (GET, PUT, POST, etc)
	HttpMethod schema.HttpMethod `protobuf:"varint,2,opt,name=http_method,json=httpMethod,proto3,enum=ves.io.schema.HttpMethod" json:"http_method,omitempty"`
	// route_redirect
	//
	// x-displayName: "Redirect Parameters"
	// Send redirect response
	RouteRedirect *route.RouteRedirect `protobuf:"bytes,3,opt,name=route_redirect,json=routeRedirect,proto3" json:"route_redirect,omitempty"`
	// headers
	//
	// x-displayName: "Headers"
	// List of (key, value) headers
	Headers []*schema.HeaderMatcherType `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty"`
	// incoming_port
	//
	// x-displayName: "Match LB port"
	// The port on which the request is received
	IncomingPort *schema.PortMatcherType `protobuf:"bytes,5,opt,name=incoming_port,json=incomingPort,proto3" json:"incoming_port,omitempty"`
}

func (m *RouteTypeRedirect) Reset()      { *m = RouteTypeRedirect{} }
func (*RouteTypeRedirect) ProtoMessage() {}
func (*RouteTypeRedirect) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{8}
}
func (m *RouteTypeRedirect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteTypeRedirect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RouteTypeRedirect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTypeRedirect.Merge(m, src)
}
func (m *RouteTypeRedirect) XXX_Size() int {
	return m.Size()
}
func (m *RouteTypeRedirect) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTypeRedirect.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTypeRedirect proto.InternalMessageInfo

func (m *RouteTypeRedirect) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RouteTypeRedirect) GetHttpMethod() schema.HttpMethod {
	if m != nil {
		return m.HttpMethod
	}
	return schema.ANY
}

func (m *RouteTypeRedirect) GetRouteRedirect() *route.RouteRedirect {
	if m != nil {
		return m.RouteRedirect
	}
	return nil
}

func (m *RouteTypeRedirect) GetHeaders() []*schema.HeaderMatcherType {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RouteTypeRedirect) GetIncomingPort() *schema.PortMatcherType {
	if m != nil {
		return m.IncomingPort
	}
	return nil
}

// RouteTypeDirectResponse
//
// x-displayName: "Direct Response Route"
// A direct response route matches on path, incoming header, incoming port and/or HTTP method
// and responds directly to the matching traffic
type RouteTypeDirectResponse struct {
	// path
	//
	// x-displayName: "Path"
	// x-required
	// URI path of route
	Path *schema.PathMatcherType `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// http_method
	//
	// x-displayName: "HTTP Method"
	// The name of the HTTP Method (GET, PUT, POST, etc)
	HttpMethod schema.HttpMethod `protobuf:"varint,2,opt,name=http_method,json=httpMethod,proto3,enum=ves.io.schema.HttpMethod" json:"http_method,omitempty"`
	// route_direct_response
	//
	// x-displayName: "Direct Response"
	// Send direct response
	RouteDirectResponse *route.RouteDirectResponse `protobuf:"bytes,3,opt,name=route_direct_response,json=routeDirectResponse,proto3" json:"route_direct_response,omitempty"`
	// headers
	//
	// x-displayName: "Headers"
	// List of (key, value) headers
	Headers []*schema.HeaderMatcherType `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty"`
	// incoming_port
	//
	// x-displayName: "Match LB port"
	// The port on which the request is received
	IncomingPort *schema.PortMatcherType `protobuf:"bytes,5,opt,name=incoming_port,json=incomingPort,proto3" json:"incoming_port,omitempty"`
}

func (m *RouteTypeDirectResponse) Reset()      { *m = RouteTypeDirectResponse{} }
func (*RouteTypeDirectResponse) ProtoMessage() {}
func (*RouteTypeDirectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{9}
}
func (m *RouteTypeDirectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteTypeDirectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RouteTypeDirectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTypeDirectResponse.Merge(m, src)
}
func (m *RouteTypeDirectResponse) XXX_Size() int {
	return m.Size()
}
func (m *RouteTypeDirectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTypeDirectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTypeDirectResponse proto.InternalMessageInfo

func (m *RouteTypeDirectResponse) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RouteTypeDirectResponse) GetHttpMethod() schema.HttpMethod {
	if m != nil {
		return m.HttpMethod
	}
	return schema.ANY
}

func (m *RouteTypeDirectResponse) GetRouteDirectResponse() *route.RouteDirectResponse {
	if m != nil {
		return m.RouteDirectResponse
	}
	return nil
}

func (m *RouteTypeDirectResponse) GetHeaders() []*schema.HeaderMatcherType {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RouteTypeDirectResponse) GetIncomingPort() *schema.PortMatcherType {
	if m != nil {
		return m.IncomingPort
	}
	return nil
}

// RouteTypeCustomRoute
//
// x-displayName: "Custom Route Object"
// A custom route uses a route object created outside of this view.
type RouteTypeCustomRoute struct {
	// route_refs
	//
	// x-displayName: "Reference to Custom Route"
	// Reference to a custom route object
	RouteRef *views.ObjectRefType `protobuf:"bytes,1,opt,name=route_ref,json=routeRef,proto3" json:"route_ref,omitempty"`
}

func (m *RouteTypeCustomRoute) Reset()      { *m = RouteTypeCustomRoute{} }
func (*RouteTypeCustomRoute) ProtoMessage() {}
func (*RouteTypeCustomRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{10}
}
func (m *RouteTypeCustomRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteTypeCustomRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RouteTypeCustomRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTypeCustomRoute.Merge(m, src)
}
func (m *RouteTypeCustomRoute) XXX_Size() int {
	return m.Size()
}
func (m *RouteTypeCustomRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTypeCustomRoute.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTypeCustomRoute proto.InternalMessageInfo

func (m *RouteTypeCustomRoute) GetRouteRef() *views.ObjectRefType {
	if m != nil {
		return m.RouteRef
	}
	return nil
}

// RouteType
//
// x-displayName: "Route Type"
// This defines various options to define a route
type RouteType struct {
	// choice
	//
	// x-displayName: "Route Type"
	// x-required
	// Define a simple, redirect, direct response or custom route
	//
	// Types that are valid to be assigned to Choice:
	//	*RouteType_SimpleRoute
	//	*RouteType_RedirectRoute
	//	*RouteType_DirectResponseRoute
	//	*RouteType_CustomRouteObject
	Choice isRouteType_Choice `protobuf_oneof:"choice"`
}

func (m *RouteType) Reset()      { *m = RouteType{} }
func (*RouteType) ProtoMessage() {}
func (*RouteType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{11}
}
func (m *RouteType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RouteType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteType.Merge(m, src)
}
func (m *RouteType) XXX_Size() int {
	return m.Size()
}
func (m *RouteType) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteType.DiscardUnknown(m)
}

var xxx_messageInfo_RouteType proto.InternalMessageInfo

type isRouteType_Choice interface {
	isRouteType_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RouteType_SimpleRoute struct {
	SimpleRoute *RouteTypeSimple `protobuf:"bytes,1,opt,name=simple_route,json=simpleRoute,proto3,oneof" json:"simple_route,omitempty"`
}
type RouteType_RedirectRoute struct {
	RedirectRoute *RouteTypeRedirect `protobuf:"bytes,2,opt,name=redirect_route,json=redirectRoute,proto3,oneof" json:"redirect_route,omitempty"`
}
type RouteType_DirectResponseRoute struct {
	DirectResponseRoute *RouteTypeDirectResponse `protobuf:"bytes,3,opt,name=direct_response_route,json=directResponseRoute,proto3,oneof" json:"direct_response_route,omitempty"`
}
type RouteType_CustomRouteObject struct {
	CustomRouteObject *RouteTypeCustomRoute `protobuf:"bytes,4,opt,name=custom_route_object,json=customRouteObject,proto3,oneof" json:"custom_route_object,omitempty"`
}

func (*RouteType_SimpleRoute) isRouteType_Choice()         {}
func (*RouteType_RedirectRoute) isRouteType_Choice()       {}
func (*RouteType_DirectResponseRoute) isRouteType_Choice() {}
func (*RouteType_CustomRouteObject) isRouteType_Choice()   {}

func (m *RouteType) GetChoice() isRouteType_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *RouteType) GetSimpleRoute() *RouteTypeSimple {
	if x, ok := m.GetChoice().(*RouteType_SimpleRoute); ok {
		return x.SimpleRoute
	}
	return nil
}

func (m *RouteType) GetRedirectRoute() *RouteTypeRedirect {
	if x, ok := m.GetChoice().(*RouteType_RedirectRoute); ok {
		return x.RedirectRoute
	}
	return nil
}

func (m *RouteType) GetDirectResponseRoute() *RouteTypeDirectResponse {
	if x, ok := m.GetChoice().(*RouteType_DirectResponseRoute); ok {
		return x.DirectResponseRoute
	}
	return nil
}

func (m *RouteType) GetCustomRouteObject() *RouteTypeCustomRoute {
	if x, ok := m.GetChoice().(*RouteType_CustomRouteObject); ok {
		return x.CustomRouteObject
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RouteType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RouteType_SimpleRoute)(nil),
		(*RouteType_RedirectRoute)(nil),
		(*RouteType_DirectResponseRoute)(nil),
		(*RouteType_CustomRouteObject)(nil),
	}
}

// Advanced options
//
// x-displayName: "Advanced Options"
// This defines various options to define a route
type AdvancedOptionsType struct {
	// Headers to add in request
	//
	// x-displayName: "Add Request Headers"
	// Headers are key-value pairs to be added to HTTP request being routed towards upstream.
	// Headers specified at this level are applied after headers from matched Route are applied
	RequestHeadersToAdd []*schema.HeaderManipulationOptionType `protobuf:"bytes,1,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// Header to be removed from request
	//
	// x-displayName: "Remove Request Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP request being sent towards upstream.
	RequestHeadersToRemove []string `protobuf:"bytes,2,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// Headers to add in response
	//
	// x-displayName: "Add Response Headers"
	// Headers are key-value pairs to be added to HTTP response being sent towards downstream.
	// Headers specified at this level are applied after headers from matched Route are applied
	ResponseHeadersToAdd []*schema.HeaderManipulationOptionType `protobuf:"bytes,3,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	// Header to be removed from response
	//
	// x-displayName: "Remove Response Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP response being sent towards downstream.
	ResponseHeadersToRemove []string `protobuf:"bytes,4,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
	// Maximum request header size
	//
	// x-displayName: "Maximum Request Header Size"
	// x-example: "60"
	// The maximum request header size for downstream connections, in KiB.
	// A HTTP 431 (Request Header Fields Too Large) error code is sent for requests that exceed this size.
	//
	// If multiple load balancers share the same advertise_policy, the highest value configured across all
	// such load balancers is used for all the load balancers in question.
	MaxRequestHeaderSize uint32 `protobuf:"varint,5,opt,name=max_request_header_size,json=maxRequestHeaderSize,proto3" json:"max_request_header_size,omitempty"`
	// Buffer configuration for requests
	//
	// x-displayName: "Buffer Policy"
	// Some upstream applications are not capable of handling streamed data and high network latency.
	// This config enables buffering the entire request before sending to upstream application. We can
	// specify the maximum buffer size and buffer interval with this config.
	BufferPolicy *schema.BufferConfigType `protobuf:"bytes,6,opt,name=buffer_policy,json=bufferPolicy,proto3" json:"buffer_policy,omitempty"`
	// Compression configuration
	//
	// x-displayName: "Compression Parameters"
	// Enables load balancer to compress dispatched data from an upstream service upon client request.
	// Only GZIP compression is supported
	CompressionParams *virtual_host.CompressionType `protobuf:"bytes,7,opt,name=compression_params,json=compressionParams,proto3" json:"compression_params,omitempty"`
	// Custom Errors
	//
	// x-displayName: "Custom Error Responses"
	// x-example: "value"
	// Map of integer error codes as keys and string values that can be used to provide custom
	// http pages for each error code.
	// Key of the map can be either response code class or HTTP Error code. Response code classes
	// for key is configured as follows
	// 3 -- for 3xx response code class
	// 4 -- for 4xx response code class
	// 5 -- for 5xx response code class
	// Value of the map is string which represents custom HTTP responses.
	// Specific response code takes preference when both response code and response code class
	// matches for a request.
	CustomErrors map[uint32]string `protobuf:"bytes,8,rep,name=custom_errors,json=customErrors,proto3" json:"custom_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// javascript_info
	//
	// x-displayName: "JavaScript Info"
	// Custom JavaScript Configuration. Custom JavaScript code can be executed at various stages of request processing.
	JavascriptInfo *virtual_host.JavaScriptConfigType `protobuf:"bytes,9,opt,name=javascript_info,json=javascriptInfo,proto3" json:"javascript_info,omitempty"`
	// JSON Web Token authentication (JWT) configuration for requests
	//
	// x-displayName: "JWT Config"
	// This HTTP filter specifies how to verify JSON Web Token (JWT). It will verify its signature,
	// audiences and issuer
	Jwt []*views.ObjectRefType `protobuf:"bytes,10,rep,name=jwt,proto3" json:"jwt,omitempty"`
	// Idle timeout
	//
	// x-displayName: "Idle Timeout"
	// x-example: "2000"
	// The amount of time that a stream can exist without upstream or downstream activity, in milliseconds.
	// The stream is terminated with a HTTP 504 (Gateway Timeout) error code if no upstream response header has been
	// received, otherwise the stream is reset.
	IdleTimeout uint32 `protobuf:"varint,11,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Disable the use of default F5XC error pages
	//
	// x-displayName: "Disable Default Error Pages"
	// Disable the use of default F5XC error pages.
	DisableDefaultErrorPages bool `protobuf:"varint,13,opt,name=disable_default_error_pages,json=disableDefaultErrorPages,proto3" json:"disable_default_error_pages,omitempty"`
	// Normalize Path
	//
	// x-displayName: "Path Normalization"
	// URI Path is normalized and adjacent slashes in the path are merged into one.
	// The platform does not perform case normalization.
	//
	// Types that are valid to be assigned to PathNormalizeChoice:
	//	*AdvancedOptionsType_EnablePathNormalize
	//	*AdvancedOptionsType_DisablePathNormalize
	PathNormalizeChoice isAdvancedOptionsType_PathNormalizeChoice `protobuf_oneof:"path_normalize_choice"`
	// Strict check of SNI and Host header
	//
	// x-displayName: "Strict SNI and Host header check"
	//
	// F5XC allows request only if Server Name Indication(SNI) and Host header match.
	// The domains for which this check needs to be bypassed can be configured here.
	//
	// Types that are valid to be assigned to StrictSniHostHeaderCheckChoice:
	//	*AdvancedOptionsType_EnableStrictSniHostHeaderCheck
	//	*AdvancedOptionsType_AdditionalDomains
	StrictSniHostHeaderCheckChoice isAdvancedOptionsType_StrictSniHostHeaderCheckChoice `protobuf_oneof:"strict_sni_host_header_check_choice"`
	// Cookie to modify from response
	//
	// x-displayName: "Modify Set-Cookie Response Header"
	// List of cookies to be modified from the HTTP response being sent towards downstream.
	CookiesToModify []*schema.CookieManipulationOptionType `protobuf:"bytes,20,rep,name=cookies_to_modify,json=cookiesToModify,proto3" json:"cookies_to_modify,omitempty"`
}

func (m *AdvancedOptionsType) Reset()      { *m = AdvancedOptionsType{} }
func (*AdvancedOptionsType) ProtoMessage() {}
func (*AdvancedOptionsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{12}
}
func (m *AdvancedOptionsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvancedOptionsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AdvancedOptionsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvancedOptionsType.Merge(m, src)
}
func (m *AdvancedOptionsType) XXX_Size() int {
	return m.Size()
}
func (m *AdvancedOptionsType) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvancedOptionsType.DiscardUnknown(m)
}

var xxx_messageInfo_AdvancedOptionsType proto.InternalMessageInfo

type isAdvancedOptionsType_PathNormalizeChoice interface {
	isAdvancedOptionsType_PathNormalizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAdvancedOptionsType_StrictSniHostHeaderCheckChoice interface {
	isAdvancedOptionsType_StrictSniHostHeaderCheckChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AdvancedOptionsType_EnablePathNormalize struct {
	EnablePathNormalize *schema.Empty `protobuf:"bytes,15,opt,name=enable_path_normalize,json=enablePathNormalize,proto3,oneof" json:"enable_path_normalize,omitempty"`
}
type AdvancedOptionsType_DisablePathNormalize struct {
	DisablePathNormalize *schema.Empty `protobuf:"bytes,16,opt,name=disable_path_normalize,json=disablePathNormalize,proto3,oneof" json:"disable_path_normalize,omitempty"`
}
type AdvancedOptionsType_EnableStrictSniHostHeaderCheck struct {
	EnableStrictSniHostHeaderCheck *schema.Empty `protobuf:"bytes,18,opt,name=enable_strict_sni_host_header_check,json=enableStrictSniHostHeaderCheck,proto3,oneof" json:"enable_strict_sni_host_header_check,omitempty"`
}
type AdvancedOptionsType_AdditionalDomains struct {
	AdditionalDomains *schema.DomainNameList `protobuf:"bytes,19,opt,name=additional_domains,json=additionalDomains,proto3,oneof" json:"additional_domains,omitempty"`
}

func (*AdvancedOptionsType_EnablePathNormalize) isAdvancedOptionsType_PathNormalizeChoice()  {}
func (*AdvancedOptionsType_DisablePathNormalize) isAdvancedOptionsType_PathNormalizeChoice() {}
func (*AdvancedOptionsType_EnableStrictSniHostHeaderCheck) isAdvancedOptionsType_StrictSniHostHeaderCheckChoice() {
}
func (*AdvancedOptionsType_AdditionalDomains) isAdvancedOptionsType_StrictSniHostHeaderCheckChoice() {
}

func (m *AdvancedOptionsType) GetPathNormalizeChoice() isAdvancedOptionsType_PathNormalizeChoice {
	if m != nil {
		return m.PathNormalizeChoice
	}
	return nil
}
func (m *AdvancedOptionsType) GetStrictSniHostHeaderCheckChoice() isAdvancedOptionsType_StrictSniHostHeaderCheckChoice {
	if m != nil {
		return m.StrictSniHostHeaderCheckChoice
	}
	return nil
}

func (m *AdvancedOptionsType) GetRequestHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *AdvancedOptionsType) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *AdvancedOptionsType) GetResponseHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *AdvancedOptionsType) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *AdvancedOptionsType) GetMaxRequestHeaderSize() uint32 {
	if m != nil {
		return m.MaxRequestHeaderSize
	}
	return 0
}

func (m *AdvancedOptionsType) GetBufferPolicy() *schema.BufferConfigType {
	if m != nil {
		return m.BufferPolicy
	}
	return nil
}

func (m *AdvancedOptionsType) GetCompressionParams() *virtual_host.CompressionType {
	if m != nil {
		return m.CompressionParams
	}
	return nil
}

func (m *AdvancedOptionsType) GetCustomErrors() map[uint32]string {
	if m != nil {
		return m.CustomErrors
	}
	return nil
}

func (m *AdvancedOptionsType) GetJavascriptInfo() *virtual_host.JavaScriptConfigType {
	if m != nil {
		return m.JavascriptInfo
	}
	return nil
}

func (m *AdvancedOptionsType) GetJwt() []*views.ObjectRefType {
	if m != nil {
		return m.Jwt
	}
	return nil
}

func (m *AdvancedOptionsType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *AdvancedOptionsType) GetDisableDefaultErrorPages() bool {
	if m != nil {
		return m.DisableDefaultErrorPages
	}
	return false
}

// Deprecated: Do not use.
func (m *AdvancedOptionsType) GetEnablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*AdvancedOptionsType_EnablePathNormalize); ok {
		return x.EnablePathNormalize
	}
	return nil
}

// Deprecated: Do not use.
func (m *AdvancedOptionsType) GetDisablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*AdvancedOptionsType_DisablePathNormalize); ok {
		return x.DisablePathNormalize
	}
	return nil
}

func (m *AdvancedOptionsType) GetEnableStrictSniHostHeaderCheck() *schema.Empty {
	if x, ok := m.GetStrictSniHostHeaderCheckChoice().(*AdvancedOptionsType_EnableStrictSniHostHeaderCheck); ok {
		return x.EnableStrictSniHostHeaderCheck
	}
	return nil
}

func (m *AdvancedOptionsType) GetAdditionalDomains() *schema.DomainNameList {
	if x, ok := m.GetStrictSniHostHeaderCheckChoice().(*AdvancedOptionsType_AdditionalDomains); ok {
		return x.AdditionalDomains
	}
	return nil
}

func (m *AdvancedOptionsType) GetCookiesToModify() []*schema.CookieManipulationOptionType {
	if m != nil {
		return m.CookiesToModify
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AdvancedOptionsType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AdvancedOptionsType_EnablePathNormalize)(nil),
		(*AdvancedOptionsType_DisablePathNormalize)(nil),
		(*AdvancedOptionsType_EnableStrictSniHostHeaderCheck)(nil),
		(*AdvancedOptionsType_AdditionalDomains)(nil),
	}
}

// Single load balancer app setting
//
// x-displayName: "Single Load Balancer App Setting"
// Specific settings for Machine learning analysis on this HTTP LB, independently from other LBs.
type SingleLoadBalancerAppSetting struct {
	// API Discovery Choice
	//
	// x-required
	// x-displayName: "API Discovery"
	// When enabled, sampled traffic passing through this load balancer is analyzed and
	// APIs exposed by the application are identified.
	// An API is identified by its canonical (collapsed)  URL path and the method used to call it.
	// Once all APIs are identified, for each API, the system learns its possible schema.
	// The learnt schema for all APIs is used to automatically generate a swagger definition file for the entire API set exposed by this load balancer.
	//
	// Types that are valid to be assigned to ApiDiscoveryChoice:
	//	*SingleLoadBalancerAppSetting_EnableDiscovery
	//	*SingleLoadBalancerAppSetting_DisableDiscovery
	ApiDiscoveryChoice isSingleLoadBalancerAppSetting_ApiDiscoveryChoice `protobuf_oneof:"api_discovery_choice"`
	// Malicious User Detection Choice
	//
	// x-required
	// x-displayName: "Malicious User Detection"
	// Malicious User Detection performs user behavior analysis and assigns a risk score and threat level of low, medium
	// or high based on the suspicious activity of the user.
	// The risk score of the user is decayed over time, if no further suspicious activity is noticed.
	//
	// Types that are valid to be assigned to MaliciousUserDetectionChoice:
	//	*SingleLoadBalancerAppSetting_EnableMaliciousUserDetection
	//	*SingleLoadBalancerAppSetting_DisableMaliciousUserDetection
	MaliciousUserDetectionChoice isSingleLoadBalancerAppSetting_MaliciousUserDetectionChoice `protobuf_oneof:"malicious_user_detection_choice"`
}

func (m *SingleLoadBalancerAppSetting) Reset()      { *m = SingleLoadBalancerAppSetting{} }
func (*SingleLoadBalancerAppSetting) ProtoMessage() {}
func (*SingleLoadBalancerAppSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{13}
}
func (m *SingleLoadBalancerAppSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleLoadBalancerAppSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SingleLoadBalancerAppSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleLoadBalancerAppSetting.Merge(m, src)
}
func (m *SingleLoadBalancerAppSetting) XXX_Size() int {
	return m.Size()
}
func (m *SingleLoadBalancerAppSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleLoadBalancerAppSetting.DiscardUnknown(m)
}

var xxx_messageInfo_SingleLoadBalancerAppSetting proto.InternalMessageInfo

type isSingleLoadBalancerAppSetting_ApiDiscoveryChoice interface {
	isSingleLoadBalancerAppSetting_ApiDiscoveryChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSingleLoadBalancerAppSetting_MaliciousUserDetectionChoice interface {
	isSingleLoadBalancerAppSetting_MaliciousUserDetectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SingleLoadBalancerAppSetting_EnableDiscovery struct {
	EnableDiscovery *common_waf.ApiDiscoverySetting `protobuf:"bytes,2,opt,name=enable_discovery,json=enableDiscovery,proto3,oneof" json:"enable_discovery,omitempty"`
}
type SingleLoadBalancerAppSetting_DisableDiscovery struct {
	DisableDiscovery *schema.Empty `protobuf:"bytes,3,opt,name=disable_discovery,json=disableDiscovery,proto3,oneof" json:"disable_discovery,omitempty"`
}
type SingleLoadBalancerAppSetting_EnableMaliciousUserDetection struct {
	EnableMaliciousUserDetection *schema.Empty `protobuf:"bytes,8,opt,name=enable_malicious_user_detection,json=enableMaliciousUserDetection,proto3,oneof" json:"enable_malicious_user_detection,omitempty"`
}
type SingleLoadBalancerAppSetting_DisableMaliciousUserDetection struct {
	DisableMaliciousUserDetection *schema.Empty `protobuf:"bytes,9,opt,name=disable_malicious_user_detection,json=disableMaliciousUserDetection,proto3,oneof" json:"disable_malicious_user_detection,omitempty"`
}

func (*SingleLoadBalancerAppSetting_EnableDiscovery) isSingleLoadBalancerAppSetting_ApiDiscoveryChoice() {
}
func (*SingleLoadBalancerAppSetting_DisableDiscovery) isSingleLoadBalancerAppSetting_ApiDiscoveryChoice() {
}
func (*SingleLoadBalancerAppSetting_EnableMaliciousUserDetection) isSingleLoadBalancerAppSetting_MaliciousUserDetectionChoice() {
}
func (*SingleLoadBalancerAppSetting_DisableMaliciousUserDetection) isSingleLoadBalancerAppSetting_MaliciousUserDetectionChoice() {
}

func (m *SingleLoadBalancerAppSetting) GetApiDiscoveryChoice() isSingleLoadBalancerAppSetting_ApiDiscoveryChoice {
	if m != nil {
		return m.ApiDiscoveryChoice
	}
	return nil
}
func (m *SingleLoadBalancerAppSetting) GetMaliciousUserDetectionChoice() isSingleLoadBalancerAppSetting_MaliciousUserDetectionChoice {
	if m != nil {
		return m.MaliciousUserDetectionChoice
	}
	return nil
}

func (m *SingleLoadBalancerAppSetting) GetEnableDiscovery() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*SingleLoadBalancerAppSetting_EnableDiscovery); ok {
		return x.EnableDiscovery
	}
	return nil
}

func (m *SingleLoadBalancerAppSetting) GetDisableDiscovery() *schema.Empty {
	if x, ok := m.GetApiDiscoveryChoice().(*SingleLoadBalancerAppSetting_DisableDiscovery); ok {
		return x.DisableDiscovery
	}
	return nil
}

func (m *SingleLoadBalancerAppSetting) GetEnableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*SingleLoadBalancerAppSetting_EnableMaliciousUserDetection); ok {
		return x.EnableMaliciousUserDetection
	}
	return nil
}

func (m *SingleLoadBalancerAppSetting) GetDisableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*SingleLoadBalancerAppSetting_DisableMaliciousUserDetection); ok {
		return x.DisableMaliciousUserDetection
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SingleLoadBalancerAppSetting) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SingleLoadBalancerAppSetting_EnableDiscovery)(nil),
		(*SingleLoadBalancerAppSetting_DisableDiscovery)(nil),
		(*SingleLoadBalancerAppSetting_EnableMaliciousUserDetection)(nil),
		(*SingleLoadBalancerAppSetting_DisableMaliciousUserDetection)(nil),
	}
}

// OriginServerSubsetRuleListType
//
// x-displayName: "Origin Server Subset Rule List Type"
// List of Origin Pools
type OriginServerSubsetRuleListType struct {
	// Origin Server Subset
	//
	// x-displayName: "Origin Server Subset Rules"
	// Origin Server Subset Rules allow users to define match condition on Client (IP address, ASN, Country), IP Reputation, Regional Edge names,
	// Request for subset selection of origin servers. Origin Server Subset  is a sequential engine where rules are evaluated one after the other.
	// It's important to define the correct order for Origin Server Subset  to get the intended result, rules are evaluated from top to bottom in the list.
	// When an Origin server subset rule is matched, then this selection rule takes effect and no more rules are evaluated.
	OriginServerSubsetRules []*policy.OriginServerSubsetRule `protobuf:"bytes,1,rep,name=origin_server_subset_rules,json=originServerSubsetRules,proto3" json:"origin_server_subset_rules,omitempty"`
}

func (m *OriginServerSubsetRuleListType) Reset()      { *m = OriginServerSubsetRuleListType{} }
func (*OriginServerSubsetRuleListType) ProtoMessage() {}
func (*OriginServerSubsetRuleListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{14}
}
func (m *OriginServerSubsetRuleListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OriginServerSubsetRuleListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OriginServerSubsetRuleListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OriginServerSubsetRuleListType.Merge(m, src)
}
func (m *OriginServerSubsetRuleListType) XXX_Size() int {
	return m.Size()
}
func (m *OriginServerSubsetRuleListType) XXX_DiscardUnknown() {
	xxx_messageInfo_OriginServerSubsetRuleListType.DiscardUnknown(m)
}

var xxx_messageInfo_OriginServerSubsetRuleListType proto.InternalMessageInfo

func (m *OriginServerSubsetRuleListType) GetOriginServerSubsetRules() []*policy.OriginServerSubsetRule {
	if m != nil {
		return m.OriginServerSubsetRules
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the HTTP load balancer specification
type GlobalSpecType struct {
	// Domains
	//
	// x-displayName: "Domains"
	// x-example: "www.foo.com"
	// x-required
	// A list of domains (host/authority header) that will be matched to load balancer.
	//
	// Supported Domains and search order:
	//  1. Exact domain names: www.foo.com.
	//  2. Domains start with a wildcard: *.foo.com or *-bar.foo.com.
	//
	// Not supported domains
	// - Just a wildcard: *
	// - Wild card and TLD: *.com
	// - Wildcard in a middle of domian: test*.example.com
	//
	// Wildcard will not match empty string.
	// e.g. *-bar.foo.com will match baz-bar.foo.com but not -bar.foo.com.
	// The longest wildcards match first.
	// Only a single virtual host in the entire route configuration can match on *.
	// Also a domain must be unique across all virtual hosts within an advertise policy.
	//
	// Domains are also used for SNI matching if the load balancer type is HTTPS
	// Domains also indicate the list of names for which DNS resolution will be done by VER
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Proxy choice
	//
	// x-displayName: "Load Balancer Type"
	// x-required
	// The type of load balancer, can be "http" or "https"
	//
	// Types that are valid to be assigned to LoadbalancerType:
	//	*GlobalSpecType_Http
	//	*GlobalSpecType_HttpsAutoCert
	//	*GlobalSpecType_Https
	LoadbalancerType isGlobalSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// download_tls_certificates_expiration_timestamp
	//
	// x-displayName: "Certificate(s) Expiration Timestamp"
	// In case of load balancer type of 'https'(BYOC) this lists expiration timestamp for certificate(s)
	// in the same order as the list of tls_parameters.tls_certificates.
	// In case of load balancer type of 'https_auto_cert' this has one element with the expiration
	// timestamp of the autogenerated certificate.
	DownstreamTlsCertificateExpirationTimestamps []*types.Timestamp `protobuf:"bytes,62,rep,name=downstream_tls_certificate_expiration_timestamps,json=downstreamTlsCertificateExpirationTimestamps,proto3" json:"downstream_tls_certificate_expiration_timestamps,omitempty"`
	// Advertise choice
	//
	// x-displayName: "VIP Advertisement"
	// x-required
	// VIP Advertisement choice, Internet or Custom.
	//
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*GlobalSpecType_DoNotAdvertise
	//	*GlobalSpecType_AdvertiseOnPublicDefaultVip
	//	*GlobalSpecType_AdvertiseOnPublic
	//	*GlobalSpecType_AdvertiseCustom
	AdvertiseChoice isGlobalSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Default Route Origin Pools
	//
	// x-displayName: "Origin Pools"
	// Origin Pools used when no route is specified (default route)
	DefaultRoutePools []*views.OriginPoolWithWeight `protobuf:"bytes,6,rep,name=default_route_pools,json=defaultRoutePools,proto3" json:"default_route_pools,omitempty"`
	// Origin Pool Choice
	//
	// x-displayName: "Origins"
	// Origin Pool(s) used when no route is specified (default route)
	//
	// Types that are valid to be assigned to OriginPoolChoice:
	//	*GlobalSpecType_DefaultPool
	//	*GlobalSpecType_DefaultPoolList
	OriginPoolChoice isGlobalSpecType_OriginPoolChoice `protobuf_oneof:"origin_pool_choice"`
	// HostRewriteParams
	//
	// x-displayName: "Select Host Rewrite for Default Origin Servers"
	// Select how the host header can be modified during forwarding to the default origin servers(default route)
	//
	// Types that are valid to be assigned to HostRewriteParams:
	//	*GlobalSpecType_AutoHostRewrite
	//	*GlobalSpecType_HostRewrite
	//	*GlobalSpecType_DisableHostRewrite
	HostRewriteParams isGlobalSpecType_HostRewriteParams `protobuf_oneof:"host_rewrite_params"`
	// Routes
	//
	// x-displayName: "Routes"
	// Routes allow users to define match condition on a path and/or HTTP method to either forward matching traffic
	// to origin pool or redirect matching traffic to a different URL or respond directly to matching traffic
	Routes []*RouteType `protobuf:"bytes,7,rep,name=routes,proto3" json:"routes,omitempty"`
	// Origin Server Subset Rules
	//
	// x-displayName: "Origin Server Subset Rules"
	// Origin Server Subset Rules allow users to define match condition on Client (IP address, ASN, Country), IP Reputation, Regional Edge names,
	// Request for subset selection of origin servers. Origin Server Subset  is a sequential engine where rules are evaluated one after the other.
	// It's important to define the correct order for Origin Server Subset  to get the intended result, rules are evaluated from top to bottom in the list.
	// When an Origin server subset rule is matched, then this selection rule takes effect and no more rules are evaluated.
	OriginServerSubsetRuleList *OriginServerSubsetRuleListType `protobuf:"bytes,101,opt,name=origin_server_subset_rule_list,json=originServerSubsetRuleList,proto3" json:"origin_server_subset_rule_list,omitempty"`
	// Cross-Origin Resource Sharing (CORS) configuration for requests
	//
	// x-displayName: "CORS Policy"
	// CORS is a mechanism that uses additional HTTP headers to tell a browser to let
	// a web application running at one origin (domain) have permission to access selected
	// resources from a server at a different origin
	CorsPolicy *schema.CorsPolicy `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// Enable the WAF (Web Application Firewall) functionality for VirtualHost
	//
	// x-displayName: "Web Application Firewall (WAF)"
	// x-required
	//
	// F5 Distributed Cloud WAF is a next-gen web application firewall that provides signature-based
	// and behavior-based threat detection to protect applications wherever they are deployed.
	// WAF can be configured in Monitoring (log threats) or Blocking (log and block threats) mode.
	//
	// Types that are valid to be assigned to WafChoice:
	//	*GlobalSpecType_DisableWaf
	//	*GlobalSpecType_AppFirewall
	WafChoice isGlobalSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	// Add Site information
	//
	// x-displayName: "Add Location"
	// x-example: "true"
	// x-example: true
	// Appends header x-volterra-location = <re-site-name> in responses. This configuration
	// is ignored on CE sites.
	AddLocation bool `protobuf:"varint,17,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Challenge Type
	//
	// x-displayName: "Malicious User Mitigation And Challenges"
	// x-required
	// Malicious User Mitigation is an adaptive response and risk-based challenge capability.
	// Enabling this feature would automatically serve different challenges such as JavaScript challenge,
	// Captcha challenge or block temporarily based on the threat level of the malicious user.
	// Policy based challenge can be used to selectively enable or disable JavaScript or Captcha challenge
	// on a specific client and request match criteria
	//
	// Types that are valid to be assigned to ChallengeType:
	//	*GlobalSpecType_NoChallenge
	//	*GlobalSpecType_EnableChallenge
	//	*GlobalSpecType_JsChallenge
	//	*GlobalSpecType_CaptchaChallenge
	//	*GlobalSpecType_PolicyBasedChallenge
	ChallengeType isGlobalSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	// More Options
	//
	// x-displayName: "More Options"
	// More options like header manipulation, compression etc.
	MoreOption *AdvancedOptionsType `protobuf:"bytes,19,opt,name=more_option,json=moreOption,proto3" json:"more_option,omitempty"`
	// User Identifier
	//
	// x-displayName: "User Identifier"
	// x-required
	// Select user identifier for rate limiting and malicious user mitigation.
	//
	// Types that are valid to be assigned to UserIdChoice:
	//	*GlobalSpecType_UserIdClientIp
	//	*GlobalSpecType_UserIdentification
	UserIdChoice isGlobalSpecType_UserIdChoice `protobuf_oneof:"user_id_choice"`
	// Rate Limiting Parameters (Legacy)
	//
	// x-displayName: "API Rate Limit Legacy"
	// Legacy value only temporary pre-migration. This value will be copied over to api_rate_limit and removed later.
	ApiRateLimitLegacy *common_waf.APIRateLimitLegacy `protobuf:"bytes,68,opt,name=api_rate_limit_legacy,json=apiRateLimitLegacy,proto3" json:"api_rate_limit_legacy,omitempty"`
	// Enable Rate Limiting
	//
	// x-displayName: "Rate Limiting"
	// x-required
	// Rate Limiting allows you to control the rate of requests sent to your origin servers, protect against API traffic surge and denial of services attacks.
	//
	// Types that are valid to be assigned to RateLimitChoice:
	//	*GlobalSpecType_DisableRateLimit
	//	*GlobalSpecType_ApiRateLimit
	//	*GlobalSpecType_RateLimit
	RateLimitChoice isGlobalSpecType_RateLimitChoice `protobuf_oneof:"rate_limit_choice"`
	// Malicious User Mitigation
	//
	// x-displayName: "Malicious User Mitigation"
	// Settings that specify the actions to be taken when malicious users are determined to be at different threat levels.
	// User's activity is monitored and continuously analyzed for malicious behavior. From this analysis, a threat level is assigned to each user.
	// The settings defined in malicious user mitigation specify what mitigation actions to take for users determined to be at different threat levels.
	MaliciousUserMitigation *views.ObjectRefType `protobuf:"bytes,32,opt,name=malicious_user_mitigation,json=maliciousUserMitigation,proto3" json:"malicious_user_mitigation,omitempty"` // Deprecated: Do not use.
	// WAF Exclusion Rules
	//
	// x-displayName: "WAF Exclusion Rules"
	// Define the Signature IDs, Violations, Attack Types and Bot Names that should be excluded from WAF processing on specific match criteria.
	// The match criteria include domain, path and method.
	// WAF Exclusion rules is a sequential engine where rules are evaluated one after the other.
	// It's important to define the correct order for WAF exclusion rules to get the intended result, rules are evaluated from top to bottom in the list.
	// For each request, its characteristics are evaluated based on the match criteria in each WAF exclusion rule, starting from the top.
	// When an exclusion rule is matched, then this exclusion rule takes effect and no more rules are evaluated.
	WafExclusionRules []*policy.SimpleWafExclusionRule `protobuf:"bytes,33,rep,name=waf_exclusion_rules,json=wafExclusionRules,proto3" json:"waf_exclusion_rules,omitempty"`
	// Data Guard Rules
	//
	// x-displayName: "Data Guard Rules"
	// Data Guard prevents responses from exposing sensitive information by masking the data.
	// The system masks credit card numbers and social security numbers leaked from the application from within the http response with a string of asterisks (*).
	// Note: App Firewall should be enabled, to use Data Guard feature.
	DataGuardRules []*policy.SimpleDataGuardRule `protobuf:"bytes,63,rep,name=data_guard_rules,json=dataGuardRules,proto3" json:"data_guard_rules,omitempty"`
	// Client Blocking Rules
	//
	// x-displayName: "Client Blocking Rules"
	// Define rules to block IP Prefixes or AS numbers.
	BlockedClients []*common_waf.SimpleClientSrcRule `protobuf:"bytes,34,rep,name=blocked_clients,json=blockedClients,proto3" json:"blocked_clients,omitempty"`
	// Trusted Client Rules
	//
	// x-displayName: "Trusted Client Rules"
	// Define rules to skip processing of one or more features such as WAF, Bot Defense etc. for clients.
	TrustedClients []*common_waf.SimpleClientSrcRule `protobuf:"bytes,35,rep,name=trusted_clients,json=trustedClients,proto3" json:"trusted_clients,omitempty"`
	// API Protection rules
	//
	// x-displayName: "API Protection Rules"
	// API Protection Rules can be defined in two categories.
	// The first category includes fine-grained rules, per API path and methods.
	// The second category includes rules per API groups or Server URLs.
	// If request matches any rule in the first category, second category rules are not evaluated.
	// Rules can also include additional conditions, for example specific clients can access certain API endpoint or API group.
	ApiProtectionRules *common_waf.APIProtectionRules `protobuf:"bytes,72,opt,name=api_protection_rules,json=apiProtectionRules,proto3" json:"api_protection_rules,omitempty"`
	// DDoS Mitigation Rules
	//
	// x-displayName: "DDoS Mitigation Rules"
	// Define manual mitigation rules to block L7 DDoS attacks.
	DdosMitigationRules []*common_security.DDoSMitigationRule `protobuf:"bytes,37,rep,name=ddos_mitigation_rules,json=ddosMitigationRules,proto3" json:"ddos_mitigation_rules,omitempty"`
	// Service Policies
	//
	// x-displayName: "Service Policies"
	// x-required
	// Service policies provide the ability to configure security controls such as IP Allow/Deny lists, Geo IP filtering and Custom rules
	//
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*GlobalSpecType_ServicePoliciesFromNamespace
	//	*GlobalSpecType_NoServicePolicies
	//	*GlobalSpecType_ActiveServicePolicies
	ServicePolicyChoice isGlobalSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// Load Balancing Control
	//
	// x-displayName: "Load Balancing Algorithm"
	// x-required
	// The algorithm used to load balance requests between origin servers
	//
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*GlobalSpecType_RoundRobin
	//	*GlobalSpecType_LeastActive
	//	*GlobalSpecType_Random
	//	*GlobalSpecType_SourceIpStickiness
	//	*GlobalSpecType_CookieStickiness
	//	*GlobalSpecType_RingHash
	HashPolicyChoice isGlobalSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	// Trusted Client IP Headers
	//
	// x-displayName: "Trusted Client IP Headers"
	// x-required
	// The system uses the real client IP address that initiated the connection to the platform as source IP, instead of the proxy’s IP address, when this feature is enabled.
	//
	// Types that are valid to be assigned to TrustClientIpHeadersChoice:
	//	*GlobalSpecType_DisableTrustClientIpHeaders
	//	*GlobalSpecType_EnableTrustClientIpHeaders
	TrustClientIpHeadersChoice isGlobalSpecType_TrustClientIpHeadersChoice `protobuf_oneof:"trust_client_ip_headers_choice"`
	// ML config choice
	//
	// x-displayName: "API Discovery/DDoS Detection/Malicious User Detection"
	// Configuration of web app and API security features which are based on AI/ML
	//
	// Types that are valid to be assigned to MlConfigChoice:
	//	*GlobalSpecType_SingleLbApp
	//	*GlobalSpecType_MultiLbApp
	MlConfigChoice isGlobalSpecType_MlConfigChoice `protobuf_oneof:"ml_config_choice"`
	// Malicious User Detection Choice
	//
	// x-required
	// x-displayName: "Malicious User Detection"
	// Malicious User Detection performs user behavior analysis and assigns a risk score and threat level of low, medium
	// or high based on the suspicious activity of the user.
	// The risk score of the user is decayed over time, if no further suspicious activity is noticed.
	// The feature can be configured also via external app_type and labeling this HTTP Load Balancer.
	// In this case external app_type configuration overrides internally disabled feature.
	// Enabling the feature internally is allowed only when no labeling to external app_type.
	//
	// Types that are valid to be assigned to MaliciousUserDetectionChoice:
	//	*GlobalSpecType_EnableMaliciousUserDetection
	//	*GlobalSpecType_DisableMaliciousUserDetection
	MaliciousUserDetectionChoice isGlobalSpecType_MaliciousUserDetectionChoice `protobuf_oneof:"malicious_user_detection_choice"`
	// API Discovery Choice
	//
	// x-required
	// x-displayName: "API Discovery"
	// When enabled, sampled traffic passing through this load balancer is analyzed and
	// APIs exposed by the application are identified.
	// An API is identified by its canonical (collapsed) URL path and the method used to call it.
	// Once all APIs are identified, for each API, the system learns its possible schema.
	// The learnt schema for all APIs is used to automatically generate a swagger definition file for the entire API set exposed by this load balancer.
	// The feature can be configured also via external app_type and labeling this HTTP Load Balancer.
	// In this case external app_type configuration overrides internally disabled feature.
	// Enabling the feature internally is allowed only when no labeling to external app_type.
	//
	// Types that are valid to be assigned to ApiDiscoveryChoice:
	//	*GlobalSpecType_EnableApiDiscovery
	//	*GlobalSpecType_DisableApiDiscovery
	ApiDiscoveryChoice isGlobalSpecType_ApiDiscoveryChoice `protobuf_oneof:"api_discovery_choice"`
	// Enable Bot Defense functionality for VirtualHost
	//
	// x-displayName: "Bot Defense"
	// Bot Defense protects your applications from automated attacks by leveraging JavaScript and API calls to collect telemetry and mitigate sophisticated attacks within the context of F5's Distributed Cloud global network. When automation is detected, and mitigation action is set to Block or Redirect, the client will receive the configured mitigation response. If action is set to Flag, automated requests are monitored by Bot Defense, but are allowed to proceed to the customer's server.
	//
	// Types that are valid to be assigned to BotDefenseChoice:
	//	*GlobalSpecType_DisableBotDefense
	//	*GlobalSpecType_BotDefense
	//	*GlobalSpecType_BotDefenseAdvanced
	BotDefenseChoice isGlobalSpecType_BotDefenseChoice `protobuf_oneof:"bot_defense_choice"`
	// Enable Client-Side Defense functionality for VirtualHost
	//
	// x-displayName: "Client-Side Defense"
	// Client-Side Defense (CSD) provides a multi-phase protection system that protects web applications against Magecart, formjacking, digital
	// skimming, PII harvesting and other malicious JavaScript attacks.
	// Enabling CSD is a 2-part process
	// (1) Service Enablement
	// (2) JavaScript injection using a Load Balancer.
	// By clicking enable in this section and going through the configuration, you can complete part 2 of the process.
	// To enable the service itself, please visit the Service's Landing page using the search on the left navigation pane.
	//
	// Types that are valid to be assigned to ClientSideDefenseChoice:
	//	*GlobalSpecType_DisableClientSideDefense
	//	*GlobalSpecType_ClientSideDefense
	ClientSideDefenseChoice isGlobalSpecType_ClientSideDefenseChoice `protobuf_oneof:"client_side_defense_choice"`
	// API Definition choice
	//
	// x-required
	// x-displayName: "API Definition"
	// API Definition based on the imported swagger specs
	//
	// Types that are valid to be assigned to ApiDefinitionChoice:
	//	*GlobalSpecType_DisableApiDefinition
	//	*GlobalSpecType_ApiDefinition
	//	*GlobalSpecType_ApiSpecification
	//	*GlobalSpecType_ApiDefinitions
	ApiDefinitionChoice isGlobalSpecType_ApiDefinitionChoice `protobuf_oneof:"api_definition_choice"`
	// Sensitive Data Discovery
	//
	// x-displayName: "Sensitive Data Discovery"
	// x-required
	// Sensitive data discovery provide the ability to configure the policy for sensitive data detection
	//
	// Types that are valid to be assigned to SensitiveDataPolicyChoice:
	//	*GlobalSpecType_DefaultSensitiveDataPolicy
	//	*GlobalSpecType_SensitiveDataPolicy
	SensitiveDataPolicyChoice isGlobalSpecType_SensitiveDataPolicyChoice `protobuf_oneof:"sensitive_data_policy_choice"`
	// ip_reputation
	//
	// x-displayName: "IP Reputation"
	// IP reputation service analyzes IP threats and publishes a dynamic data set of millions of high-risk IP addresses, to protect users from inbound traffic from malicious IPs.
	// IP threat categories include Spam Sources, Windows Exploits, Web Attacks, BotNets, Scanners, Denial of Service, Reputation, Phishing, Proxy, Mobile Threats, and TOR Proxy.
	//
	// Types that are valid to be assigned to IpReputationChoice:
	//	*GlobalSpecType_DisableIpReputation
	//	*GlobalSpecType_EnableIpReputation
	IpReputationChoice isGlobalSpecType_IpReputationChoice `protobuf_oneof:"ip_reputation_choice"`
	// threat_mesh
	//
	// x-required
	// x-displayName: "Threat Mesh"
	// Threat Mesh provides F5 Distributed Cloud customers with an additional layer of protection against web application attacks.
	// Threat mesh leverages cross-customer correlation i.e correlation of client attacks across different customers
	// to identify malicious intent of the client. Whenever a client is flagged due to malicious intent by our WAAP decision engines,
	// that client will be added to the ThreatDB and all customers get this intelligence and are protected in real-time.
	//
	// Types that are valid to be assigned to ThreatMeshChoice:
	//	*GlobalSpecType_DisableThreatMesh
	//	*GlobalSpecType_EnableThreatMesh
	ThreatMeshChoice isGlobalSpecType_ThreatMeshChoice `protobuf_oneof:"threat_mesh_choice"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
	// host name
	//
	// x-displayName: "Host Name"
	// x-example: "ves-io-cf8684b9-a18f-4843-a24f-1f9ee8ea2776.ac.vh.ves.io"
	// Internally generated host name to be used for the virtual host
	HostName string `protobuf:"bytes,1001,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// DNS information
	//
	// x-displayName: "DNS Information"
	// DNS information for this virtual host
	DnsInfo []*virtual_host_dns_info.DnsInfo `protobuf:"bytes,1002,rep,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`
	// Virtual Host state
	//
	// x-displayName: "Virtual Host State"
	// State of the virtual host
	State virtual_host.VirtualHostState `protobuf:"varint,1003,opt,name=state,proto3,enum=ves.io.schema.virtual_host.VirtualHostState" json:"state,omitempty"`
	// Auto Cert State
	//
	// x-displayName: "Auto Cert State"
	// State of auto certificate generation.
	AutoCertState virtual_host.CertificationState `protobuf:"varint,1004,opt,name=auto_cert_state,json=autoCertState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"auto_cert_state,omitempty"` // Deprecated: Do not use.
	// Auto Cert Information
	//
	// x-displayName: "Auto Cert Information"
	// Auto certificate related information
	AutoCertInfo *virtual_host.AutoCertInfoType `protobuf:"bytes,1010,opt,name=auto_cert_info,json=autoCertInfo,proto3" json:"auto_cert_info,omitempty"`
	// Internet VIP Info
	//
	// x-displayName: "Internet VIP Info"
	// Internet VIP Info
	InternetVipInfo []*views.InternetVIPInfo `protobuf:"bytes,1100,rep,name=internet_vip_info,json=internetVipInfo,proto3" json:"internet_vip_info,omitempty"`
	// csrf_policy
	//
	// x-displayName: "Cross-Site Request Forgery Protection"
	// Cross-Site Request Forgery (CSRF) is an attack that occurs when a malicious third-party website exploits a vulnerability thats allows them to submit an undesired request on user's behalf.
	//
	// The policy checks where a request is coming from to determine if the request's origin is the same as its destination. The policy relies on two pieces of information used in determining if a request originated from the same host.
	//
	// 1. The origin that caused the user agent to issue the request (source origin).
	// 2. The origin that the request is going to (target origin).
	// When the policy evaluating a request, it ensures both pieces of information are present and compare their values. If the source origin is missing or origins do not match the request is rejected. The exception to this being the source-origin has been added to the policy as valid.
	// Because CSRF attacks specifically target state-changing requests, the policy only acts on the HTTP requests that have state-changing method (PUT,POST, etc.).
	CsrfPolicy *schema.CsrfPolicy `protobuf:"bytes,91,opt,name=csrf_policy,json=csrfPolicy,proto3" json:"csrf_policy,omitempty"`
	// GraphQL Inspection
	//
	// x-displayName: "GraphQL Inspection"
	// GraphQL is a query language and server-side runtime for APIs which provides a complete and understandable
	// description of the data in API. GraphQL gives clients the power to ask for exactly what they need, makes it
	// easier to evolve APIs over time, and enables powerful developer tools. Policy configuration to analyze GraphQL
	// queries and prevent GraphQL tailored attacks.
	GraphqlRules []*policy.GraphQLRule `protobuf:"bytes,92,rep,name=graphql_rules,json=graphqlRules,proto3" json:"graphql_rules,omitempty"`
	// Cookie protection
	//
	// x-displayName: "Cookie Protection"
	// Allows setting attributes (SameSite, Secure, and HttpOnly) on cookies in responses.
	// Cookie Tampering Protection prevents attackers from modifying the value of session cookies.
	// For Cookie Tampering Protection, enabling a web app firewall (WAF) is a prerequisite.
	// The configured mode of WAF (monitoring or blocking) will be enforced on the request when cookie tampering is identified.
	// Note: We recommend enabling Secure and HttpOnly attributes along with cookie tampering protection.
	ProtectedCookies []*schema.CookieManipulationOptionType `protobuf:"bytes,93,rep,name=protected_cookies,json=protectedCookies,proto3" json:"protected_cookies,omitempty"`
	// Slow DDoS Mitigation
	//
	// x-displayName: "Slow DDoS Mitigation"
	// "Slow and low" attacks tie up server resources, leaving none available for servicing
	// requests from actual users.Configuration that protects origins from slow and low attacks.
	// In the case HTTP loadbalancer, only default settings can be applied. For HTTPS load balancer,
	// the request timeout and request headers timeout value can be customized.
	//
	// Types that are valid to be assigned to SlowDdosMitigationChoice:
	//	*GlobalSpecType_SystemDefaultTimeouts
	//	*GlobalSpecType_SlowDdosMitigation
	SlowDdosMitigationChoice isGlobalSpecType_SlowDdosMitigationChoice `protobuf_oneof:"slow_ddos_mitigation_choice"`
	// JWT Validation
	//
	// x-displayName: "JWT Validation"
	// JWT Validation stops JWT replay attacks and JWT tampering by cryptographically verifying incoming
	// JWTs before they are passed to origin APIs. JWT Validation will also stop requests with expired
	// tokens or tokens that are not yet valid.
	JwtValidation *common_waf.JWTValidation `protobuf:"bytes,98,opt,name=jwt_validation,json=jwtValidation,proto3" json:"jwt_validation,omitempty"`
	// L7 DDoS Auto Mitigation Action
	//
	// x-displayName: "L7 DDoS Auto Mitigation"
	// x-required
	// Select an action for auto mitigation
	//
	// Types that are valid to be assigned to L7DdosAutoMitigationAction:
	//	*GlobalSpecType_L7DdosActionDefault
	//	*GlobalSpecType_L7DdosActionBlock
	//	*GlobalSpecType_L7DdosActionJsChallenge
	//	*GlobalSpecType_L7DdosActionNone
	L7DdosAutoMitigationAction isGlobalSpecType_L7DdosAutoMitigationAction `protobuf_oneof:"l7_ddos_auto_mitigation_action"`
	// Cert State
	//
	// x-displayName: "Cert State"
	// State of Custom certificate or Auto certificate generation.
	CertState virtual_host.CertificationState `protobuf:"varint,115,opt,name=cert_state,json=certState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"cert_state,omitempty"`
	// Sensitive Data Disclosure Rules
	//
	// x-displayName: "Sensitive Data Disclosure Rules"
	// Sensitive Data Disclosure Rules are setting to mask sensitive data in the request/response to prevent data exposure in XC portal
	SensitiveDataDisclosureRules *SensitiveDataDisclosureRules `protobuf:"bytes,116,opt,name=sensitive_data_disclosure_rules,json=sensitiveDataDisclosureRules,proto3" json:"sensitive_data_disclosure_rules,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{15}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_LoadbalancerType interface {
	isGlobalSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_AdvertiseChoice interface {
	isGlobalSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_OriginPoolChoice interface {
	isGlobalSpecType_OriginPoolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_HostRewriteParams interface {
	isGlobalSpecType_HostRewriteParams()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_WafChoice interface {
	isGlobalSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ChallengeType interface {
	isGlobalSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_UserIdChoice interface {
	isGlobalSpecType_UserIdChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_RateLimitChoice interface {
	isGlobalSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ServicePolicyChoice interface {
	isGlobalSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_HashPolicyChoice interface {
	isGlobalSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_TrustClientIpHeadersChoice interface {
	isGlobalSpecType_TrustClientIpHeadersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_MlConfigChoice interface {
	isGlobalSpecType_MlConfigChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_MaliciousUserDetectionChoice interface {
	isGlobalSpecType_MaliciousUserDetectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ApiDiscoveryChoice interface {
	isGlobalSpecType_ApiDiscoveryChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_BotDefenseChoice interface {
	isGlobalSpecType_BotDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ClientSideDefenseChoice interface {
	isGlobalSpecType_ClientSideDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ApiDefinitionChoice interface {
	isGlobalSpecType_ApiDefinitionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_SensitiveDataPolicyChoice interface {
	isGlobalSpecType_SensitiveDataPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_IpReputationChoice interface {
	isGlobalSpecType_IpReputationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ThreatMeshChoice interface {
	isGlobalSpecType_ThreatMeshChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_SlowDdosMitigationChoice interface {
	isGlobalSpecType_SlowDdosMitigationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_L7DdosAutoMitigationAction interface {
	isGlobalSpecType_L7DdosAutoMitigationAction()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Http struct {
	Http *ProxyTypeHttp `protobuf:"bytes,2,opt,name=http,proto3,oneof" json:"http,omitempty"`
}
type GlobalSpecType_HttpsAutoCert struct {
	HttpsAutoCert *ProxyTypeHttpsAutoCerts `protobuf:"bytes,27,opt,name=https_auto_cert,json=httpsAutoCert,proto3,oneof" json:"https_auto_cert,omitempty"`
}
type GlobalSpecType_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,3,opt,name=https,proto3,oneof" json:"https,omitempty"`
}
type GlobalSpecType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,12,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type GlobalSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,13,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type GlobalSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type GlobalSpecType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type GlobalSpecType_DefaultPool struct {
	DefaultPool *origin_pool.GlobalSpecType `protobuf:"bytes,89,opt,name=default_pool,json=defaultPool,proto3,oneof" json:"default_pool,omitempty"`
}
type GlobalSpecType_DefaultPoolList struct {
	DefaultPoolList *views.OriginPoolListType `protobuf:"bytes,90,opt,name=default_pool_list,json=defaultPoolList,proto3,oneof" json:"default_pool_list,omitempty"`
}
type GlobalSpecType_AutoHostRewrite struct {
	AutoHostRewrite *schema.Empty `protobuf:"bytes,28,opt,name=auto_host_rewrite,json=autoHostRewrite,proto3,oneof" json:"auto_host_rewrite,omitempty"`
}
type GlobalSpecType_HostRewrite struct {
	HostRewrite string `protobuf:"bytes,29,opt,name=host_rewrite,json=hostRewrite,proto3,oneof" json:"host_rewrite,omitempty"`
}
type GlobalSpecType_DisableHostRewrite struct {
	DisableHostRewrite *schema.Empty `protobuf:"bytes,30,opt,name=disable_host_rewrite,json=disableHostRewrite,proto3,oneof" json:"disable_host_rewrite,omitempty"`
}
type GlobalSpecType_DisableWaf struct {
	DisableWaf *schema.Empty `protobuf:"bytes,11,opt,name=disable_waf,json=disableWaf,proto3,oneof" json:"disable_waf,omitempty"`
}
type GlobalSpecType_AppFirewall struct {
	AppFirewall *views.ObjectRefType `protobuf:"bytes,52,opt,name=app_firewall,json=appFirewall,proto3,oneof" json:"app_firewall,omitempty"`
}
type GlobalSpecType_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,26,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type GlobalSpecType_EnableChallenge struct {
	EnableChallenge *common_waf.EnableChallenge `protobuf:"bytes,95,opt,name=enable_challenge,json=enableChallenge,proto3,oneof" json:"enable_challenge,omitempty"`
}
type GlobalSpecType_JsChallenge struct {
	JsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,18,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type GlobalSpecType_CaptchaChallenge struct {
	CaptchaChallenge *virtual_host.CaptchaChallengeType `protobuf:"bytes,24,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type GlobalSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *common_waf.PolicyBasedChallenge `protobuf:"bytes,51,opt,name=policy_based_challenge,json=policyBasedChallenge,proto3,oneof" json:"policy_based_challenge,omitempty"`
}
type GlobalSpecType_UserIdClientIp struct {
	UserIdClientIp *schema.Empty `protobuf:"bytes,60,opt,name=user_id_client_ip,json=userIdClientIp,proto3,oneof" json:"user_id_client_ip,omitempty"`
}
type GlobalSpecType_UserIdentification struct {
	UserIdentification *views.ObjectRefType `protobuf:"bytes,20,opt,name=user_identification,json=userIdentification,proto3,oneof" json:"user_identification,omitempty"`
}
type GlobalSpecType_DisableRateLimit struct {
	DisableRateLimit *schema.Empty `protobuf:"bytes,22,opt,name=disable_rate_limit,json=disableRateLimit,proto3,oneof" json:"disable_rate_limit,omitempty"`
}
type GlobalSpecType_ApiRateLimit struct {
	ApiRateLimit *common_waf.APIRateLimit `protobuf:"bytes,120,opt,name=api_rate_limit,json=apiRateLimit,proto3,oneof" json:"api_rate_limit,omitempty"`
}
type GlobalSpecType_RateLimit struct {
	RateLimit *common_waf.RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,proto3,oneof" json:"rate_limit,omitempty"`
}
type GlobalSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,41,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type GlobalSpecType_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,42,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type GlobalSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *common_waf.ServicePolicyList `protobuf:"bytes,43,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}
type GlobalSpecType_RoundRobin struct {
	RoundRobin *schema.Empty `protobuf:"bytes,45,opt,name=round_robin,json=roundRobin,proto3,oneof" json:"round_robin,omitempty"`
}
type GlobalSpecType_LeastActive struct {
	LeastActive *schema.Empty `protobuf:"bytes,46,opt,name=least_active,json=leastActive,proto3,oneof" json:"least_active,omitempty"`
}
type GlobalSpecType_Random struct {
	Random *schema.Empty `protobuf:"bytes,47,opt,name=random,proto3,oneof" json:"random,omitempty"`
}
type GlobalSpecType_SourceIpStickiness struct {
	SourceIpStickiness *schema.Empty `protobuf:"bytes,48,opt,name=source_ip_stickiness,json=sourceIpStickiness,proto3,oneof" json:"source_ip_stickiness,omitempty"`
}
type GlobalSpecType_CookieStickiness struct {
	CookieStickiness *route.CookieForHashing `protobuf:"bytes,49,opt,name=cookie_stickiness,json=cookieStickiness,proto3,oneof" json:"cookie_stickiness,omitempty"`
}
type GlobalSpecType_RingHash struct {
	RingHash *HashPolicyListType `protobuf:"bytes,50,opt,name=ring_hash,json=ringHash,proto3,oneof" json:"ring_hash,omitempty"`
}
type GlobalSpecType_DisableTrustClientIpHeaders struct {
	DisableTrustClientIpHeaders *schema.Empty `protobuf:"bytes,74,opt,name=disable_trust_client_ip_headers,json=disableTrustClientIpHeaders,proto3,oneof" json:"disable_trust_client_ip_headers,omitempty"`
}
type GlobalSpecType_EnableTrustClientIpHeaders struct {
	EnableTrustClientIpHeaders *virtual_host.ClientIPHeaders `protobuf:"bytes,75,opt,name=enable_trust_client_ip_headers,json=enableTrustClientIpHeaders,proto3,oneof" json:"enable_trust_client_ip_headers,omitempty"`
}
type GlobalSpecType_SingleLbApp struct {
	SingleLbApp *SingleLoadBalancerAppSetting `protobuf:"bytes,54,opt,name=single_lb_app,json=singleLbApp,proto3,oneof" json:"single_lb_app,omitempty"`
}
type GlobalSpecType_MultiLbApp struct {
	MultiLbApp *schema.Empty `protobuf:"bytes,55,opt,name=multi_lb_app,json=multiLbApp,proto3,oneof" json:"multi_lb_app,omitempty"`
}
type GlobalSpecType_EnableMaliciousUserDetection struct {
	EnableMaliciousUserDetection *schema.Empty `protobuf:"bytes,80,opt,name=enable_malicious_user_detection,json=enableMaliciousUserDetection,proto3,oneof" json:"enable_malicious_user_detection,omitempty"`
}
type GlobalSpecType_DisableMaliciousUserDetection struct {
	DisableMaliciousUserDetection *schema.Empty `protobuf:"bytes,81,opt,name=disable_malicious_user_detection,json=disableMaliciousUserDetection,proto3,oneof" json:"disable_malicious_user_detection,omitempty"`
}
type GlobalSpecType_EnableApiDiscovery struct {
	EnableApiDiscovery *common_waf.ApiDiscoverySetting `protobuf:"bytes,83,opt,name=enable_api_discovery,json=enableApiDiscovery,proto3,oneof" json:"enable_api_discovery,omitempty"`
}
type GlobalSpecType_DisableApiDiscovery struct {
	DisableApiDiscovery *schema.Empty `protobuf:"bytes,84,opt,name=disable_api_discovery,json=disableApiDiscovery,proto3,oneof" json:"disable_api_discovery,omitempty"`
}
type GlobalSpecType_DisableBotDefense struct {
	DisableBotDefense *schema.Empty `protobuf:"bytes,57,opt,name=disable_bot_defense,json=disableBotDefense,proto3,oneof" json:"disable_bot_defense,omitempty"`
}
type GlobalSpecType_BotDefense struct {
	BotDefense *common_security.ShapeBotDefenseType `protobuf:"bytes,58,opt,name=bot_defense,json=botDefense,proto3,oneof" json:"bot_defense,omitempty"`
}
type GlobalSpecType_BotDefenseAdvanced struct {
	BotDefenseAdvanced *common_security.BotDefenseAdvancedType `protobuf:"bytes,1011,opt,name=bot_defense_advanced,json=botDefenseAdvanced,proto3,oneof" json:"bot_defense_advanced,omitempty"`
}
type GlobalSpecType_DisableClientSideDefense struct {
	DisableClientSideDefense *schema.Empty `protobuf:"bytes,86,opt,name=disable_client_side_defense,json=disableClientSideDefense,proto3,oneof" json:"disable_client_side_defense,omitempty"`
}
type GlobalSpecType_ClientSideDefense struct {
	ClientSideDefense *common_security.ClientSideDefenseType `protobuf:"bytes,87,opt,name=client_side_defense,json=clientSideDefense,proto3,oneof" json:"client_side_defense,omitempty"`
}
type GlobalSpecType_DisableApiDefinition struct {
	DisableApiDefinition *schema.Empty `protobuf:"bytes,70,opt,name=disable_api_definition,json=disableApiDefinition,proto3,oneof" json:"disable_api_definition,omitempty"`
}
type GlobalSpecType_ApiDefinition struct {
	ApiDefinition *views.ObjectRefType `protobuf:"bytes,71,opt,name=api_definition,json=apiDefinition,proto3,oneof" json:"api_definition,omitempty"`
}
type GlobalSpecType_ApiSpecification struct {
	ApiSpecification *common_waf.APISpecificationSettings `protobuf:"bytes,67,opt,name=api_specification,json=apiSpecification,proto3,oneof" json:"api_specification,omitempty"`
}
type GlobalSpecType_ApiDefinitions struct {
	ApiDefinitions *common_waf.ApiDefinitionList `protobuf:"bytes,61,opt,name=api_definitions,json=apiDefinitions,proto3,oneof" json:"api_definitions,omitempty"`
}
type GlobalSpecType_DefaultSensitiveDataPolicy struct {
	DefaultSensitiveDataPolicy *schema.Empty `protobuf:"bytes,131,opt,name=default_sensitive_data_policy,json=defaultSensitiveDataPolicy,proto3,oneof" json:"default_sensitive_data_policy,omitempty"`
}
type GlobalSpecType_SensitiveDataPolicy struct {
	SensitiveDataPolicy *common_security.SensitiveDataPolicySettings `protobuf:"bytes,132,opt,name=sensitive_data_policy,json=sensitiveDataPolicy,proto3,oneof" json:"sensitive_data_policy,omitempty"`
}
type GlobalSpecType_DisableIpReputation struct {
	DisableIpReputation *schema.Empty `protobuf:"bytes,65,opt,name=disable_ip_reputation,json=disableIpReputation,proto3,oneof" json:"disable_ip_reputation,omitempty"`
}
type GlobalSpecType_EnableIpReputation struct {
	EnableIpReputation *common_waf.IPThreatCategoryListType `protobuf:"bytes,66,opt,name=enable_ip_reputation,json=enableIpReputation,proto3,oneof" json:"enable_ip_reputation,omitempty"`
}
type GlobalSpecType_DisableThreatMesh struct {
	DisableThreatMesh *schema.Empty `protobuf:"bytes,103,opt,name=disable_threat_mesh,json=disableThreatMesh,proto3,oneof" json:"disable_threat_mesh,omitempty"`
}
type GlobalSpecType_EnableThreatMesh struct {
	EnableThreatMesh *schema.Empty `protobuf:"bytes,105,opt,name=enable_threat_mesh,json=enableThreatMesh,proto3,oneof" json:"enable_threat_mesh,omitempty"`
}
type GlobalSpecType_SystemDefaultTimeouts struct {
	SystemDefaultTimeouts *schema.Empty `protobuf:"bytes,97,opt,name=system_default_timeouts,json=systemDefaultTimeouts,proto3,oneof" json:"system_default_timeouts,omitempty"`
}
type GlobalSpecType_SlowDdosMitigation struct {
	SlowDdosMitigation *virtual_host.SlowDDoSMitigation `protobuf:"bytes,94,opt,name=slow_ddos_mitigation,json=slowDdosMitigation,proto3,oneof" json:"slow_ddos_mitigation,omitempty"`
}
type GlobalSpecType_L7DdosActionDefault struct {
	L7DdosActionDefault *schema.Empty `protobuf:"bytes,111,opt,name=l7_ddos_action_default,json=l7DdosActionDefault,proto3,oneof" json:"l7_ddos_action_default,omitempty"`
}
type GlobalSpecType_L7DdosActionBlock struct {
	L7DdosActionBlock *schema.Empty `protobuf:"bytes,112,opt,name=l7_ddos_action_block,json=l7DdosActionBlock,proto3,oneof" json:"l7_ddos_action_block,omitempty"`
}
type GlobalSpecType_L7DdosActionJsChallenge struct {
	L7DdosActionJsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,113,opt,name=l7_ddos_action_js_challenge,json=l7DdosActionJsChallenge,proto3,oneof" json:"l7_ddos_action_js_challenge,omitempty"`
}
type GlobalSpecType_L7DdosActionNone struct {
	L7DdosActionNone *schema.Empty `protobuf:"bytes,114,opt,name=l7_ddos_action_none,json=l7DdosActionNone,proto3,oneof" json:"l7_ddos_action_none,omitempty"`
}

func (*GlobalSpecType_Http) isGlobalSpecType_LoadbalancerType()                                     {}
func (*GlobalSpecType_HttpsAutoCert) isGlobalSpecType_LoadbalancerType()                            {}
func (*GlobalSpecType_Https) isGlobalSpecType_LoadbalancerType()                                    {}
func (*GlobalSpecType_DoNotAdvertise) isGlobalSpecType_AdvertiseChoice()                            {}
func (*GlobalSpecType_AdvertiseOnPublicDefaultVip) isGlobalSpecType_AdvertiseChoice()               {}
func (*GlobalSpecType_AdvertiseOnPublic) isGlobalSpecType_AdvertiseChoice()                         {}
func (*GlobalSpecType_AdvertiseCustom) isGlobalSpecType_AdvertiseChoice()                           {}
func (*GlobalSpecType_DefaultPool) isGlobalSpecType_OriginPoolChoice()                              {}
func (*GlobalSpecType_DefaultPoolList) isGlobalSpecType_OriginPoolChoice()                          {}
func (*GlobalSpecType_AutoHostRewrite) isGlobalSpecType_HostRewriteParams()                         {}
func (*GlobalSpecType_HostRewrite) isGlobalSpecType_HostRewriteParams()                             {}
func (*GlobalSpecType_DisableHostRewrite) isGlobalSpecType_HostRewriteParams()                      {}
func (*GlobalSpecType_DisableWaf) isGlobalSpecType_WafChoice()                                      {}
func (*GlobalSpecType_AppFirewall) isGlobalSpecType_WafChoice()                                     {}
func (*GlobalSpecType_NoChallenge) isGlobalSpecType_ChallengeType()                                 {}
func (*GlobalSpecType_EnableChallenge) isGlobalSpecType_ChallengeType()                             {}
func (*GlobalSpecType_JsChallenge) isGlobalSpecType_ChallengeType()                                 {}
func (*GlobalSpecType_CaptchaChallenge) isGlobalSpecType_ChallengeType()                            {}
func (*GlobalSpecType_PolicyBasedChallenge) isGlobalSpecType_ChallengeType()                        {}
func (*GlobalSpecType_UserIdClientIp) isGlobalSpecType_UserIdChoice()                               {}
func (*GlobalSpecType_UserIdentification) isGlobalSpecType_UserIdChoice()                           {}
func (*GlobalSpecType_DisableRateLimit) isGlobalSpecType_RateLimitChoice()                          {}
func (*GlobalSpecType_ApiRateLimit) isGlobalSpecType_RateLimitChoice()                              {}
func (*GlobalSpecType_RateLimit) isGlobalSpecType_RateLimitChoice()                                 {}
func (*GlobalSpecType_ServicePoliciesFromNamespace) isGlobalSpecType_ServicePolicyChoice()          {}
func (*GlobalSpecType_NoServicePolicies) isGlobalSpecType_ServicePolicyChoice()                     {}
func (*GlobalSpecType_ActiveServicePolicies) isGlobalSpecType_ServicePolicyChoice()                 {}
func (*GlobalSpecType_RoundRobin) isGlobalSpecType_HashPolicyChoice()                               {}
func (*GlobalSpecType_LeastActive) isGlobalSpecType_HashPolicyChoice()                              {}
func (*GlobalSpecType_Random) isGlobalSpecType_HashPolicyChoice()                                   {}
func (*GlobalSpecType_SourceIpStickiness) isGlobalSpecType_HashPolicyChoice()                       {}
func (*GlobalSpecType_CookieStickiness) isGlobalSpecType_HashPolicyChoice()                         {}
func (*GlobalSpecType_RingHash) isGlobalSpecType_HashPolicyChoice()                                 {}
func (*GlobalSpecType_DisableTrustClientIpHeaders) isGlobalSpecType_TrustClientIpHeadersChoice()    {}
func (*GlobalSpecType_EnableTrustClientIpHeaders) isGlobalSpecType_TrustClientIpHeadersChoice()     {}
func (*GlobalSpecType_SingleLbApp) isGlobalSpecType_MlConfigChoice()                                {}
func (*GlobalSpecType_MultiLbApp) isGlobalSpecType_MlConfigChoice()                                 {}
func (*GlobalSpecType_EnableMaliciousUserDetection) isGlobalSpecType_MaliciousUserDetectionChoice() {}
func (*GlobalSpecType_DisableMaliciousUserDetection) isGlobalSpecType_MaliciousUserDetectionChoice() {
}
func (*GlobalSpecType_EnableApiDiscovery) isGlobalSpecType_ApiDiscoveryChoice()                {}
func (*GlobalSpecType_DisableApiDiscovery) isGlobalSpecType_ApiDiscoveryChoice()               {}
func (*GlobalSpecType_DisableBotDefense) isGlobalSpecType_BotDefenseChoice()                   {}
func (*GlobalSpecType_BotDefense) isGlobalSpecType_BotDefenseChoice()                          {}
func (*GlobalSpecType_BotDefenseAdvanced) isGlobalSpecType_BotDefenseChoice()                  {}
func (*GlobalSpecType_DisableClientSideDefense) isGlobalSpecType_ClientSideDefenseChoice()     {}
func (*GlobalSpecType_ClientSideDefense) isGlobalSpecType_ClientSideDefenseChoice()            {}
func (*GlobalSpecType_DisableApiDefinition) isGlobalSpecType_ApiDefinitionChoice()             {}
func (*GlobalSpecType_ApiDefinition) isGlobalSpecType_ApiDefinitionChoice()                    {}
func (*GlobalSpecType_ApiSpecification) isGlobalSpecType_ApiDefinitionChoice()                 {}
func (*GlobalSpecType_ApiDefinitions) isGlobalSpecType_ApiDefinitionChoice()                   {}
func (*GlobalSpecType_DefaultSensitiveDataPolicy) isGlobalSpecType_SensitiveDataPolicyChoice() {}
func (*GlobalSpecType_SensitiveDataPolicy) isGlobalSpecType_SensitiveDataPolicyChoice()        {}
func (*GlobalSpecType_DisableIpReputation) isGlobalSpecType_IpReputationChoice()               {}
func (*GlobalSpecType_EnableIpReputation) isGlobalSpecType_IpReputationChoice()                {}
func (*GlobalSpecType_DisableThreatMesh) isGlobalSpecType_ThreatMeshChoice()                   {}
func (*GlobalSpecType_EnableThreatMesh) isGlobalSpecType_ThreatMeshChoice()                    {}
func (*GlobalSpecType_SystemDefaultTimeouts) isGlobalSpecType_SlowDdosMitigationChoice()       {}
func (*GlobalSpecType_SlowDdosMitigation) isGlobalSpecType_SlowDdosMitigationChoice()          {}
func (*GlobalSpecType_L7DdosActionDefault) isGlobalSpecType_L7DdosAutoMitigationAction()       {}
func (*GlobalSpecType_L7DdosActionBlock) isGlobalSpecType_L7DdosAutoMitigationAction()         {}
func (*GlobalSpecType_L7DdosActionJsChallenge) isGlobalSpecType_L7DdosAutoMitigationAction()   {}
func (*GlobalSpecType_L7DdosActionNone) isGlobalSpecType_L7DdosAutoMitigationAction()          {}

func (m *GlobalSpecType) GetLoadbalancerType() isGlobalSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *GlobalSpecType) GetAdvertiseChoice() isGlobalSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *GlobalSpecType) GetOriginPoolChoice() isGlobalSpecType_OriginPoolChoice {
	if m != nil {
		return m.OriginPoolChoice
	}
	return nil
}
func (m *GlobalSpecType) GetHostRewriteParams() isGlobalSpecType_HostRewriteParams {
	if m != nil {
		return m.HostRewriteParams
	}
	return nil
}
func (m *GlobalSpecType) GetWafChoice() isGlobalSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *GlobalSpecType) GetChallengeType() isGlobalSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *GlobalSpecType) GetUserIdChoice() isGlobalSpecType_UserIdChoice {
	if m != nil {
		return m.UserIdChoice
	}
	return nil
}
func (m *GlobalSpecType) GetRateLimitChoice() isGlobalSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}
func (m *GlobalSpecType) GetServicePolicyChoice() isGlobalSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *GlobalSpecType) GetHashPolicyChoice() isGlobalSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *GlobalSpecType) GetTrustClientIpHeadersChoice() isGlobalSpecType_TrustClientIpHeadersChoice {
	if m != nil {
		return m.TrustClientIpHeadersChoice
	}
	return nil
}
func (m *GlobalSpecType) GetMlConfigChoice() isGlobalSpecType_MlConfigChoice {
	if m != nil {
		return m.MlConfigChoice
	}
	return nil
}
func (m *GlobalSpecType) GetMaliciousUserDetectionChoice() isGlobalSpecType_MaliciousUserDetectionChoice {
	if m != nil {
		return m.MaliciousUserDetectionChoice
	}
	return nil
}
func (m *GlobalSpecType) GetApiDiscoveryChoice() isGlobalSpecType_ApiDiscoveryChoice {
	if m != nil {
		return m.ApiDiscoveryChoice
	}
	return nil
}
func (m *GlobalSpecType) GetBotDefenseChoice() isGlobalSpecType_BotDefenseChoice {
	if m != nil {
		return m.BotDefenseChoice
	}
	return nil
}
func (m *GlobalSpecType) GetClientSideDefenseChoice() isGlobalSpecType_ClientSideDefenseChoice {
	if m != nil {
		return m.ClientSideDefenseChoice
	}
	return nil
}
func (m *GlobalSpecType) GetApiDefinitionChoice() isGlobalSpecType_ApiDefinitionChoice {
	if m != nil {
		return m.ApiDefinitionChoice
	}
	return nil
}
func (m *GlobalSpecType) GetSensitiveDataPolicyChoice() isGlobalSpecType_SensitiveDataPolicyChoice {
	if m != nil {
		return m.SensitiveDataPolicyChoice
	}
	return nil
}
func (m *GlobalSpecType) GetIpReputationChoice() isGlobalSpecType_IpReputationChoice {
	if m != nil {
		return m.IpReputationChoice
	}
	return nil
}
func (m *GlobalSpecType) GetThreatMeshChoice() isGlobalSpecType_ThreatMeshChoice {
	if m != nil {
		return m.ThreatMeshChoice
	}
	return nil
}
func (m *GlobalSpecType) GetSlowDdosMitigationChoice() isGlobalSpecType_SlowDdosMitigationChoice {
	if m != nil {
		return m.SlowDdosMitigationChoice
	}
	return nil
}
func (m *GlobalSpecType) GetL7DdosAutoMitigationAction() isGlobalSpecType_L7DdosAutoMitigationAction {
	if m != nil {
		return m.L7DdosAutoMitigationAction
	}
	return nil
}

func (m *GlobalSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GlobalSpecType) GetHttp() *ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *GlobalSpecType) GetHttpsAutoCert() *ProxyTypeHttpsAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *GlobalSpecType) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *GlobalSpecType) GetDownstreamTlsCertificateExpirationTimestamps() []*types.Timestamp {
	if m != nil {
		return m.DownstreamTlsCertificateExpirationTimestamps
	}
	return nil
}

func (m *GlobalSpecType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultRoutePools() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.DefaultRoutePools
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultPool() *origin_pool.GlobalSpecType {
	if x, ok := m.GetOriginPoolChoice().(*GlobalSpecType_DefaultPool); ok {
		return x.DefaultPool
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultPoolList() *views.OriginPoolListType {
	if x, ok := m.GetOriginPoolChoice().(*GlobalSpecType_DefaultPoolList); ok {
		return x.DefaultPoolList
	}
	return nil
}

func (m *GlobalSpecType) GetAutoHostRewrite() *schema.Empty {
	if x, ok := m.GetHostRewriteParams().(*GlobalSpecType_AutoHostRewrite); ok {
		return x.AutoHostRewrite
	}
	return nil
}

func (m *GlobalSpecType) GetHostRewrite() string {
	if x, ok := m.GetHostRewriteParams().(*GlobalSpecType_HostRewrite); ok {
		return x.HostRewrite
	}
	return ""
}

func (m *GlobalSpecType) GetDisableHostRewrite() *schema.Empty {
	if x, ok := m.GetHostRewriteParams().(*GlobalSpecType_DisableHostRewrite); ok {
		return x.DisableHostRewrite
	}
	return nil
}

func (m *GlobalSpecType) GetRoutes() []*RouteType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *GlobalSpecType) GetOriginServerSubsetRuleList() *OriginServerSubsetRuleListType {
	if m != nil {
		return m.OriginServerSubsetRuleList
	}
	return nil
}

func (m *GlobalSpecType) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetDisableWaf() *schema.Empty {
	if x, ok := m.GetWafChoice().(*GlobalSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *GlobalSpecType) GetAppFirewall() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GlobalSpecType_AppFirewall); ok {
		return x.AppFirewall
	}
	return nil
}

func (m *GlobalSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *GlobalSpecType) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetEnableChallenge() *common_waf.EnableChallenge {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_EnableChallenge); ok {
		return x.EnableChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetCaptchaChallenge() *virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetPolicyBasedChallenge() *common_waf.PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *GlobalSpecType) GetUserIdClientIp() *schema.Empty {
	if x, ok := m.GetUserIdChoice().(*GlobalSpecType_UserIdClientIp); ok {
		return x.UserIdClientIp
	}
	return nil
}

func (m *GlobalSpecType) GetUserIdentification() *views.ObjectRefType {
	if x, ok := m.GetUserIdChoice().(*GlobalSpecType_UserIdentification); ok {
		return x.UserIdentification
	}
	return nil
}

func (m *GlobalSpecType) GetApiRateLimitLegacy() *common_waf.APIRateLimitLegacy {
	if m != nil {
		return m.ApiRateLimitLegacy
	}
	return nil
}

func (m *GlobalSpecType) GetDisableRateLimit() *schema.Empty {
	if x, ok := m.GetRateLimitChoice().(*GlobalSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *GlobalSpecType) GetApiRateLimit() *common_waf.APIRateLimit {
	if x, ok := m.GetRateLimitChoice().(*GlobalSpecType_ApiRateLimit); ok {
		return x.ApiRateLimit
	}
	return nil
}

func (m *GlobalSpecType) GetRateLimit() *common_waf.RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*GlobalSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetMaliciousUserMitigation() *views.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *GlobalSpecType) GetWafExclusionRules() []*policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *GlobalSpecType) GetDataGuardRules() []*policy.SimpleDataGuardRule {
	if m != nil {
		return m.DataGuardRules
	}
	return nil
}

func (m *GlobalSpecType) GetBlockedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *GlobalSpecType) GetTrustedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *GlobalSpecType) GetApiProtectionRules() *common_waf.APIProtectionRules {
	if m != nil {
		return m.ApiProtectionRules
	}
	return nil
}

func (m *GlobalSpecType) GetDdosMitigationRules() []*common_security.DDoSMitigationRule {
	if m != nil {
		return m.DdosMitigationRules
	}
	return nil
}

func (m *GlobalSpecType) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GlobalSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *GlobalSpecType) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GlobalSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *GlobalSpecType) GetActiveServicePolicies() *common_waf.ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*GlobalSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *GlobalSpecType) GetRoundRobin() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_RoundRobin); ok {
		return x.RoundRobin
	}
	return nil
}

func (m *GlobalSpecType) GetLeastActive() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_LeastActive); ok {
		return x.LeastActive
	}
	return nil
}

func (m *GlobalSpecType) GetRandom() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_Random); ok {
		return x.Random
	}
	return nil
}

func (m *GlobalSpecType) GetSourceIpStickiness() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_SourceIpStickiness); ok {
		return x.SourceIpStickiness
	}
	return nil
}

func (m *GlobalSpecType) GetCookieStickiness() *route.CookieForHashing {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_CookieStickiness); ok {
		return x.CookieStickiness
	}
	return nil
}

func (m *GlobalSpecType) GetRingHash() *HashPolicyListType {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_RingHash); ok {
		return x.RingHash
	}
	return nil
}

func (m *GlobalSpecType) GetDisableTrustClientIpHeaders() *schema.Empty {
	if x, ok := m.GetTrustClientIpHeadersChoice().(*GlobalSpecType_DisableTrustClientIpHeaders); ok {
		return x.DisableTrustClientIpHeaders
	}
	return nil
}

func (m *GlobalSpecType) GetEnableTrustClientIpHeaders() *virtual_host.ClientIPHeaders {
	if x, ok := m.GetTrustClientIpHeadersChoice().(*GlobalSpecType_EnableTrustClientIpHeaders); ok {
		return x.EnableTrustClientIpHeaders
	}
	return nil
}

func (m *GlobalSpecType) GetSingleLbApp() *SingleLoadBalancerAppSetting {
	if x, ok := m.GetMlConfigChoice().(*GlobalSpecType_SingleLbApp); ok {
		return x.SingleLbApp
	}
	return nil
}

func (m *GlobalSpecType) GetMultiLbApp() *schema.Empty {
	if x, ok := m.GetMlConfigChoice().(*GlobalSpecType_MultiLbApp); ok {
		return x.MultiLbApp
	}
	return nil
}

func (m *GlobalSpecType) GetEnableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*GlobalSpecType_EnableMaliciousUserDetection); ok {
		return x.EnableMaliciousUserDetection
	}
	return nil
}

func (m *GlobalSpecType) GetDisableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*GlobalSpecType_DisableMaliciousUserDetection); ok {
		return x.DisableMaliciousUserDetection
	}
	return nil
}

func (m *GlobalSpecType) GetEnableApiDiscovery() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*GlobalSpecType_EnableApiDiscovery); ok {
		return x.EnableApiDiscovery
	}
	return nil
}

func (m *GlobalSpecType) GetDisableApiDiscovery() *schema.Empty {
	if x, ok := m.GetApiDiscoveryChoice().(*GlobalSpecType_DisableApiDiscovery); ok {
		return x.DisableApiDiscovery
	}
	return nil
}

func (m *GlobalSpecType) GetDisableBotDefense() *schema.Empty {
	if x, ok := m.GetBotDefenseChoice().(*GlobalSpecType_DisableBotDefense); ok {
		return x.DisableBotDefense
	}
	return nil
}

func (m *GlobalSpecType) GetBotDefense() *common_security.ShapeBotDefenseType {
	if x, ok := m.GetBotDefenseChoice().(*GlobalSpecType_BotDefense); ok {
		return x.BotDefense
	}
	return nil
}

func (m *GlobalSpecType) GetBotDefenseAdvanced() *common_security.BotDefenseAdvancedType {
	if x, ok := m.GetBotDefenseChoice().(*GlobalSpecType_BotDefenseAdvanced); ok {
		return x.BotDefenseAdvanced
	}
	return nil
}

func (m *GlobalSpecType) GetDisableClientSideDefense() *schema.Empty {
	if x, ok := m.GetClientSideDefenseChoice().(*GlobalSpecType_DisableClientSideDefense); ok {
		return x.DisableClientSideDefense
	}
	return nil
}

func (m *GlobalSpecType) GetClientSideDefense() *common_security.ClientSideDefenseType {
	if x, ok := m.GetClientSideDefenseChoice().(*GlobalSpecType_ClientSideDefense); ok {
		return x.ClientSideDefense
	}
	return nil
}

func (m *GlobalSpecType) GetDisableApiDefinition() *schema.Empty {
	if x, ok := m.GetApiDefinitionChoice().(*GlobalSpecType_DisableApiDefinition); ok {
		return x.DisableApiDefinition
	}
	return nil
}

func (m *GlobalSpecType) GetApiDefinition() *views.ObjectRefType {
	if x, ok := m.GetApiDefinitionChoice().(*GlobalSpecType_ApiDefinition); ok {
		return x.ApiDefinition
	}
	return nil
}

func (m *GlobalSpecType) GetApiSpecification() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*GlobalSpecType_ApiSpecification); ok {
		return x.ApiSpecification
	}
	return nil
}

func (m *GlobalSpecType) GetApiDefinitions() *common_waf.ApiDefinitionList {
	if x, ok := m.GetApiDefinitionChoice().(*GlobalSpecType_ApiDefinitions); ok {
		return x.ApiDefinitions
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultSensitiveDataPolicy() *schema.Empty {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*GlobalSpecType_DefaultSensitiveDataPolicy); ok {
		return x.DefaultSensitiveDataPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetSensitiveDataPolicy() *common_security.SensitiveDataPolicySettings {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*GlobalSpecType_SensitiveDataPolicy); ok {
		return x.SensitiveDataPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetDisableIpReputation() *schema.Empty {
	if x, ok := m.GetIpReputationChoice().(*GlobalSpecType_DisableIpReputation); ok {
		return x.DisableIpReputation
	}
	return nil
}

func (m *GlobalSpecType) GetEnableIpReputation() *common_waf.IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*GlobalSpecType_EnableIpReputation); ok {
		return x.EnableIpReputation
	}
	return nil
}

func (m *GlobalSpecType) GetDisableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*GlobalSpecType_DisableThreatMesh); ok {
		return x.DisableThreatMesh
	}
	return nil
}

func (m *GlobalSpecType) GetEnableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*GlobalSpecType_EnableThreatMesh); ok {
		return x.EnableThreatMesh
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GlobalSpecType) GetDnsInfo() []*virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GlobalSpecType) GetState() virtual_host.VirtualHostState {
	if m != nil {
		return m.State
	}
	return virtual_host.VIRTUAL_HOST_READY
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetAutoCertState() virtual_host.CertificationState {
	if m != nil {
		return m.AutoCertState
	}
	return virtual_host.AutoCertDisabled
}

func (m *GlobalSpecType) GetAutoCertInfo() *virtual_host.AutoCertInfoType {
	if m != nil {
		return m.AutoCertInfo
	}
	return nil
}

func (m *GlobalSpecType) GetInternetVipInfo() []*views.InternetVIPInfo {
	if m != nil {
		return m.InternetVipInfo
	}
	return nil
}

func (m *GlobalSpecType) GetCsrfPolicy() *schema.CsrfPolicy {
	if m != nil {
		return m.CsrfPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetGraphqlRules() []*policy.GraphQLRule {
	if m != nil {
		return m.GraphqlRules
	}
	return nil
}

func (m *GlobalSpecType) GetProtectedCookies() []*schema.CookieManipulationOptionType {
	if m != nil {
		return m.ProtectedCookies
	}
	return nil
}

func (m *GlobalSpecType) GetSystemDefaultTimeouts() *schema.Empty {
	if x, ok := m.GetSlowDdosMitigationChoice().(*GlobalSpecType_SystemDefaultTimeouts); ok {
		return x.SystemDefaultTimeouts
	}
	return nil
}

func (m *GlobalSpecType) GetSlowDdosMitigation() *virtual_host.SlowDDoSMitigation {
	if x, ok := m.GetSlowDdosMitigationChoice().(*GlobalSpecType_SlowDdosMitigation); ok {
		return x.SlowDdosMitigation
	}
	return nil
}

func (m *GlobalSpecType) GetJwtValidation() *common_waf.JWTValidation {
	if m != nil {
		return m.JwtValidation
	}
	return nil
}

func (m *GlobalSpecType) GetL7DdosActionDefault() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionDefault); ok {
		return x.L7DdosActionDefault
	}
	return nil
}

func (m *GlobalSpecType) GetL7DdosActionBlock() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionBlock); ok {
		return x.L7DdosActionBlock
	}
	return nil
}

func (m *GlobalSpecType) GetL7DdosActionJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionJsChallenge); ok {
		return x.L7DdosActionJsChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetL7DdosActionNone() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionNone); ok {
		return x.L7DdosActionNone
	}
	return nil
}

func (m *GlobalSpecType) GetCertState() virtual_host.CertificationState {
	if m != nil {
		return m.CertState
	}
	return virtual_host.AutoCertDisabled
}

func (m *GlobalSpecType) GetSensitiveDataDisclosureRules() *SensitiveDataDisclosureRules {
	if m != nil {
		return m.SensitiveDataDisclosureRules
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_Http)(nil),
		(*GlobalSpecType_HttpsAutoCert)(nil),
		(*GlobalSpecType_Https)(nil),
		(*GlobalSpecType_DoNotAdvertise)(nil),
		(*GlobalSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*GlobalSpecType_AdvertiseOnPublic)(nil),
		(*GlobalSpecType_AdvertiseCustom)(nil),
		(*GlobalSpecType_DefaultPool)(nil),
		(*GlobalSpecType_DefaultPoolList)(nil),
		(*GlobalSpecType_AutoHostRewrite)(nil),
		(*GlobalSpecType_HostRewrite)(nil),
		(*GlobalSpecType_DisableHostRewrite)(nil),
		(*GlobalSpecType_DisableWaf)(nil),
		(*GlobalSpecType_AppFirewall)(nil),
		(*GlobalSpecType_NoChallenge)(nil),
		(*GlobalSpecType_EnableChallenge)(nil),
		(*GlobalSpecType_JsChallenge)(nil),
		(*GlobalSpecType_CaptchaChallenge)(nil),
		(*GlobalSpecType_PolicyBasedChallenge)(nil),
		(*GlobalSpecType_UserIdClientIp)(nil),
		(*GlobalSpecType_UserIdentification)(nil),
		(*GlobalSpecType_DisableRateLimit)(nil),
		(*GlobalSpecType_ApiRateLimit)(nil),
		(*GlobalSpecType_RateLimit)(nil),
		(*GlobalSpecType_ServicePoliciesFromNamespace)(nil),
		(*GlobalSpecType_NoServicePolicies)(nil),
		(*GlobalSpecType_ActiveServicePolicies)(nil),
		(*GlobalSpecType_RoundRobin)(nil),
		(*GlobalSpecType_LeastActive)(nil),
		(*GlobalSpecType_Random)(nil),
		(*GlobalSpecType_SourceIpStickiness)(nil),
		(*GlobalSpecType_CookieStickiness)(nil),
		(*GlobalSpecType_RingHash)(nil),
		(*GlobalSpecType_DisableTrustClientIpHeaders)(nil),
		(*GlobalSpecType_EnableTrustClientIpHeaders)(nil),
		(*GlobalSpecType_SingleLbApp)(nil),
		(*GlobalSpecType_MultiLbApp)(nil),
		(*GlobalSpecType_EnableMaliciousUserDetection)(nil),
		(*GlobalSpecType_DisableMaliciousUserDetection)(nil),
		(*GlobalSpecType_EnableApiDiscovery)(nil),
		(*GlobalSpecType_DisableApiDiscovery)(nil),
		(*GlobalSpecType_DisableBotDefense)(nil),
		(*GlobalSpecType_BotDefense)(nil),
		(*GlobalSpecType_BotDefenseAdvanced)(nil),
		(*GlobalSpecType_DisableClientSideDefense)(nil),
		(*GlobalSpecType_ClientSideDefense)(nil),
		(*GlobalSpecType_DisableApiDefinition)(nil),
		(*GlobalSpecType_ApiDefinition)(nil),
		(*GlobalSpecType_ApiSpecification)(nil),
		(*GlobalSpecType_ApiDefinitions)(nil),
		(*GlobalSpecType_DefaultSensitiveDataPolicy)(nil),
		(*GlobalSpecType_SensitiveDataPolicy)(nil),
		(*GlobalSpecType_DisableIpReputation)(nil),
		(*GlobalSpecType_EnableIpReputation)(nil),
		(*GlobalSpecType_DisableThreatMesh)(nil),
		(*GlobalSpecType_EnableThreatMesh)(nil),
		(*GlobalSpecType_SystemDefaultTimeouts)(nil),
		(*GlobalSpecType_SlowDdosMitigation)(nil),
		(*GlobalSpecType_L7DdosActionDefault)(nil),
		(*GlobalSpecType_L7DdosActionBlock)(nil),
		(*GlobalSpecType_L7DdosActionJsChallenge)(nil),
		(*GlobalSpecType_L7DdosActionNone)(nil),
	}
}

// Sensitive Data Disclosure Rules
//
// x-displayName: "Sensitive Data Disclosure Rules"
// Sensitive Data Disclosure Rules are setting to mask sensitive data in the request/response to prevent data exposure in XC portal
type SensitiveDataDisclosureRules struct {
	// Sensitive Data Types in Responses
	//
	// x-displayName: "Sensitive Data Types in Responses"
	// Settings to mask sensitive data in response body
	SensitiveDataTypesInResponse []*SensitiveDataTypes `protobuf:"bytes,1,rep,name=sensitive_data_types_in_response,json=sensitiveDataTypesInResponse,proto3" json:"sensitive_data_types_in_response,omitempty"`
}

func (m *SensitiveDataDisclosureRules) Reset()      { *m = SensitiveDataDisclosureRules{} }
func (*SensitiveDataDisclosureRules) ProtoMessage() {}
func (*SensitiveDataDisclosureRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{16}
}
func (m *SensitiveDataDisclosureRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SensitiveDataDisclosureRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SensitiveDataDisclosureRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensitiveDataDisclosureRules.Merge(m, src)
}
func (m *SensitiveDataDisclosureRules) XXX_Size() int {
	return m.Size()
}
func (m *SensitiveDataDisclosureRules) XXX_DiscardUnknown() {
	xxx_messageInfo_SensitiveDataDisclosureRules.DiscardUnknown(m)
}

var xxx_messageInfo_SensitiveDataDisclosureRules proto.InternalMessageInfo

func (m *SensitiveDataDisclosureRules) GetSensitiveDataTypesInResponse() []*SensitiveDataTypes {
	if m != nil {
		return m.SensitiveDataTypesInResponse
	}
	return nil
}

// Sensitive Data Types
//
// x-displayName: "Sensitive Data Types"
// Settings to mask sensitive data in request/response payload
type SensitiveDataTypes struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Masking Mode Action
	//
	// x-displayName: "Action"
	// x-required
	// Choose the masking mode or report mode
	//
	// Types that are valid to be assigned to MaskingModeChoice:
	//	*SensitiveDataTypes_Mask
	//	*SensitiveDataTypes_Report
	MaskingModeChoice isSensitiveDataTypes_MaskingModeChoice `protobuf_oneof:"masking_mode_choice"`
	// condition type choices
	//
	// x-displayName: "Type"
	// x-required
	// Choose type of granularity this rule applies to
	//
	// Types that are valid to be assigned to TypeConditionTypeChoice:
	//	*SensitiveDataTypes_ApiEndpoint
	//	*SensitiveDataTypes_BasePath
	//	*SensitiveDataTypes_ApiGroup
	TypeConditionTypeChoice isSensitiveDataTypes_TypeConditionTypeChoice `protobuf_oneof:"type_condition_type_choice"`
	// Body Section Masking Options
	//
	// x-displayName: "Json fields"
	Body *BodySectionMaskingOptions `protobuf:"bytes,9,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *SensitiveDataTypes) Reset()      { *m = SensitiveDataTypes{} }
func (*SensitiveDataTypes) ProtoMessage() {}
func (*SensitiveDataTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{17}
}
func (m *SensitiveDataTypes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SensitiveDataTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SensitiveDataTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensitiveDataTypes.Merge(m, src)
}
func (m *SensitiveDataTypes) XXX_Size() int {
	return m.Size()
}
func (m *SensitiveDataTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_SensitiveDataTypes.DiscardUnknown(m)
}

var xxx_messageInfo_SensitiveDataTypes proto.InternalMessageInfo

type isSensitiveDataTypes_MaskingModeChoice interface {
	isSensitiveDataTypes_MaskingModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSensitiveDataTypes_TypeConditionTypeChoice interface {
	isSensitiveDataTypes_TypeConditionTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SensitiveDataTypes_Mask struct {
	Mask *schema.Empty `protobuf:"bytes,3,opt,name=mask,proto3,oneof" json:"mask,omitempty"`
}
type SensitiveDataTypes_Report struct {
	Report *schema.Empty `protobuf:"bytes,4,opt,name=report,proto3,oneof" json:"report,omitempty"`
}
type SensitiveDataTypes_ApiEndpoint struct {
	ApiEndpoint *common_waf.ApiEndpointDetails `protobuf:"bytes,6,opt,name=api_endpoint,json=apiEndpoint,proto3,oneof" json:"api_endpoint,omitempty"`
}
type SensitiveDataTypes_BasePath struct {
	BasePath string `protobuf:"bytes,7,opt,name=base_path,json=basePath,proto3,oneof" json:"base_path,omitempty"`
}
type SensitiveDataTypes_ApiGroup struct {
	ApiGroup string `protobuf:"bytes,8,opt,name=api_group,json=apiGroup,proto3,oneof" json:"api_group,omitempty"`
}

func (*SensitiveDataTypes_Mask) isSensitiveDataTypes_MaskingModeChoice()              {}
func (*SensitiveDataTypes_Report) isSensitiveDataTypes_MaskingModeChoice()            {}
func (*SensitiveDataTypes_ApiEndpoint) isSensitiveDataTypes_TypeConditionTypeChoice() {}
func (*SensitiveDataTypes_BasePath) isSensitiveDataTypes_TypeConditionTypeChoice()    {}
func (*SensitiveDataTypes_ApiGroup) isSensitiveDataTypes_TypeConditionTypeChoice()    {}

func (m *SensitiveDataTypes) GetMaskingModeChoice() isSensitiveDataTypes_MaskingModeChoice {
	if m != nil {
		return m.MaskingModeChoice
	}
	return nil
}
func (m *SensitiveDataTypes) GetTypeConditionTypeChoice() isSensitiveDataTypes_TypeConditionTypeChoice {
	if m != nil {
		return m.TypeConditionTypeChoice
	}
	return nil
}

func (m *SensitiveDataTypes) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SensitiveDataTypes) GetMask() *schema.Empty {
	if x, ok := m.GetMaskingModeChoice().(*SensitiveDataTypes_Mask); ok {
		return x.Mask
	}
	return nil
}

func (m *SensitiveDataTypes) GetReport() *schema.Empty {
	if x, ok := m.GetMaskingModeChoice().(*SensitiveDataTypes_Report); ok {
		return x.Report
	}
	return nil
}

func (m *SensitiveDataTypes) GetApiEndpoint() *common_waf.ApiEndpointDetails {
	if x, ok := m.GetTypeConditionTypeChoice().(*SensitiveDataTypes_ApiEndpoint); ok {
		return x.ApiEndpoint
	}
	return nil
}

func (m *SensitiveDataTypes) GetBasePath() string {
	if x, ok := m.GetTypeConditionTypeChoice().(*SensitiveDataTypes_BasePath); ok {
		return x.BasePath
	}
	return ""
}

func (m *SensitiveDataTypes) GetApiGroup() string {
	if x, ok := m.GetTypeConditionTypeChoice().(*SensitiveDataTypes_ApiGroup); ok {
		return x.ApiGroup
	}
	return ""
}

func (m *SensitiveDataTypes) GetBody() *BodySectionMaskingOptions {
	if m != nil {
		return m.Body
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SensitiveDataTypes) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SensitiveDataTypes_Mask)(nil),
		(*SensitiveDataTypes_Report)(nil),
		(*SensitiveDataTypes_ApiEndpoint)(nil),
		(*SensitiveDataTypes_BasePath)(nil),
		(*SensitiveDataTypes_ApiGroup)(nil),
	}
}

// Body Section Masking Options
//
// x-displayName: "Body Section Masking Options"
// Options for HTTP Body Masking
type BodySectionMaskingOptions struct {
	// Field Values
	//
	// x-displayName: "Values"
	// x-required
	// x-example: "['user.email', 'credit_card']"
	// List of JSONPath field values
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (m *BodySectionMaskingOptions) Reset()      { *m = BodySectionMaskingOptions{} }
func (*BodySectionMaskingOptions) ProtoMessage() {}
func (*BodySectionMaskingOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{18}
}
func (m *BodySectionMaskingOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BodySectionMaskingOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BodySectionMaskingOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BodySectionMaskingOptions.Merge(m, src)
}
func (m *BodySectionMaskingOptions) XXX_Size() int {
	return m.Size()
}
func (m *BodySectionMaskingOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BodySectionMaskingOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BodySectionMaskingOptions proto.InternalMessageInfo

func (m *BodySectionMaskingOptions) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

// CreateSpecType
//
// x-displayName: "Create HTTP Load Balancer"
// Shape of the HTTP load balancer specification
type CreateSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*CreateSpecType_Http
	//	*CreateSpecType_HttpsAutoCert
	//	*CreateSpecType_Https
	LoadbalancerType isCreateSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*CreateSpecType_DoNotAdvertise
	//	*CreateSpecType_AdvertiseOnPublicDefaultVip
	//	*CreateSpecType_AdvertiseOnPublic
	//	*CreateSpecType_AdvertiseCustom
	AdvertiseChoice   isCreateSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	DefaultRoutePools []*views.OriginPoolWithWeight    `protobuf:"bytes,6,rep,name=default_route_pools,json=defaultRoutePools,proto3" json:"default_route_pools,omitempty"`
	// Types that are valid to be assigned to OriginPoolChoice:
	//	*CreateSpecType_DefaultPool
	//	*CreateSpecType_DefaultPoolList
	OriginPoolChoice           isCreateSpecType_OriginPoolChoice `protobuf_oneof:"origin_pool_choice"`
	OriginServerSubsetRuleList *OriginServerSubsetRuleListType   `protobuf:"bytes,101,opt,name=origin_server_subset_rule_list,json=originServerSubsetRuleList,proto3" json:"origin_server_subset_rule_list,omitempty"`
	Routes                     []*RouteType                      `protobuf:"bytes,7,rep,name=routes,proto3" json:"routes,omitempty"`
	CorsPolicy                 *schema.CorsPolicy                `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// Types that are valid to be assigned to WafChoice:
	//	*CreateSpecType_DisableWaf
	//	*CreateSpecType_AppFirewall
	WafChoice   isCreateSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	AddLocation bool                       `protobuf:"varint,17,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//	*CreateSpecType_NoChallenge
	//	*CreateSpecType_EnableChallenge
	//	*CreateSpecType_JsChallenge
	//	*CreateSpecType_CaptchaChallenge
	//	*CreateSpecType_PolicyBasedChallenge
	ChallengeType isCreateSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	MoreOption    *AdvancedOptionsType           `protobuf:"bytes,19,opt,name=more_option,json=moreOption,proto3" json:"more_option,omitempty"`
	// Types that are valid to be assigned to UserIdChoice:
	//	*CreateSpecType_UserIdClientIp
	//	*CreateSpecType_UserIdentification
	UserIdChoice       isCreateSpecType_UserIdChoice  `protobuf_oneof:"user_id_choice"`
	ApiRateLimitLegacy *common_waf.APIRateLimitLegacy `protobuf:"bytes,68,opt,name=api_rate_limit_legacy,json=apiRateLimitLegacy,proto3" json:"api_rate_limit_legacy,omitempty"`
	// Types that are valid to be assigned to RateLimitChoice:
	//	*CreateSpecType_DisableRateLimit
	//	*CreateSpecType_ApiRateLimit
	//	*CreateSpecType_RateLimit
	RateLimitChoice         isCreateSpecType_RateLimitChoice      `protobuf_oneof:"rate_limit_choice"`
	MaliciousUserMitigation *views.ObjectRefType                  `protobuf:"bytes,32,opt,name=malicious_user_mitigation,json=maliciousUserMitigation,proto3" json:"malicious_user_mitigation,omitempty"`
	WafExclusionRules       []*policy.SimpleWafExclusionRule      `protobuf:"bytes,33,rep,name=waf_exclusion_rules,json=wafExclusionRules,proto3" json:"waf_exclusion_rules,omitempty"`
	DataGuardRules          []*policy.SimpleDataGuardRule         `protobuf:"bytes,63,rep,name=data_guard_rules,json=dataGuardRules,proto3" json:"data_guard_rules,omitempty"`
	BlockedClients          []*common_waf.SimpleClientSrcRule     `protobuf:"bytes,34,rep,name=blocked_clients,json=blockedClients,proto3" json:"blocked_clients,omitempty"`
	TrustedClients          []*common_waf.SimpleClientSrcRule     `protobuf:"bytes,35,rep,name=trusted_clients,json=trustedClients,proto3" json:"trusted_clients,omitempty"`
	ApiProtectionRules      *common_waf.APIProtectionRules        `protobuf:"bytes,72,opt,name=api_protection_rules,json=apiProtectionRules,proto3" json:"api_protection_rules,omitempty"`
	DdosMitigationRules     []*common_security.DDoSMitigationRule `protobuf:"bytes,37,rep,name=ddos_mitigation_rules,json=ddosMitigationRules,proto3" json:"ddos_mitigation_rules,omitempty"`
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*CreateSpecType_ServicePoliciesFromNamespace
	//	*CreateSpecType_NoServicePolicies
	//	*CreateSpecType_ActiveServicePolicies
	ServicePolicyChoice isCreateSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*CreateSpecType_RoundRobin
	//	*CreateSpecType_LeastActive
	//	*CreateSpecType_Random
	//	*CreateSpecType_SourceIpStickiness
	//	*CreateSpecType_CookieStickiness
	//	*CreateSpecType_RingHash
	HashPolicyChoice isCreateSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	// Types that are valid to be assigned to TrustClientIpHeadersChoice:
	//	*CreateSpecType_DisableTrustClientIpHeaders
	//	*CreateSpecType_EnableTrustClientIpHeaders
	TrustClientIpHeadersChoice isCreateSpecType_TrustClientIpHeadersChoice `protobuf_oneof:"trust_client_ip_headers_choice"`
	// Types that are valid to be assigned to MlConfigChoice:
	//	*CreateSpecType_SingleLbApp
	//	*CreateSpecType_MultiLbApp
	MlConfigChoice isCreateSpecType_MlConfigChoice `protobuf_oneof:"ml_config_choice"`
	// Types that are valid to be assigned to MaliciousUserDetectionChoice:
	//	*CreateSpecType_EnableMaliciousUserDetection
	//	*CreateSpecType_DisableMaliciousUserDetection
	MaliciousUserDetectionChoice isCreateSpecType_MaliciousUserDetectionChoice `protobuf_oneof:"malicious_user_detection_choice"`
	// Types that are valid to be assigned to ApiDiscoveryChoice:
	//	*CreateSpecType_EnableApiDiscovery
	//	*CreateSpecType_DisableApiDiscovery
	ApiDiscoveryChoice isCreateSpecType_ApiDiscoveryChoice `protobuf_oneof:"api_discovery_choice"`
	// Types that are valid to be assigned to BotDefenseChoice:
	//	*CreateSpecType_DisableBotDefense
	//	*CreateSpecType_BotDefense
	//	*CreateSpecType_BotDefenseAdvanced
	BotDefenseChoice isCreateSpecType_BotDefenseChoice `protobuf_oneof:"bot_defense_choice"`
	// Types that are valid to be assigned to SensitiveDataPolicyChoice:
	//	*CreateSpecType_DefaultSensitiveDataPolicy
	//	*CreateSpecType_SensitiveDataPolicy
	SensitiveDataPolicyChoice isCreateSpecType_SensitiveDataPolicyChoice `protobuf_oneof:"sensitive_data_policy_choice"`
	// Types that are valid to be assigned to ApiDefinitionChoice:
	//	*CreateSpecType_DisableApiDefinition
	//	*CreateSpecType_ApiDefinition
	//	*CreateSpecType_ApiSpecification
	//	*CreateSpecType_ApiDefinitions
	ApiDefinitionChoice isCreateSpecType_ApiDefinitionChoice `protobuf_oneof:"api_definition_choice"`
	// Types that are valid to be assigned to IpReputationChoice:
	//	*CreateSpecType_DisableIpReputation
	//	*CreateSpecType_EnableIpReputation
	IpReputationChoice isCreateSpecType_IpReputationChoice `protobuf_oneof:"ip_reputation_choice"`
	// Types that are valid to be assigned to ClientSideDefenseChoice:
	//	*CreateSpecType_DisableClientSideDefense
	//	*CreateSpecType_ClientSideDefense
	ClientSideDefenseChoice isCreateSpecType_ClientSideDefenseChoice `protobuf_oneof:"client_side_defense_choice"`
	CsrfPolicy              *schema.CsrfPolicy                       `protobuf:"bytes,91,opt,name=csrf_policy,json=csrfPolicy,proto3" json:"csrf_policy,omitempty"`
	GraphqlRules            []*policy.GraphQLRule                    `protobuf:"bytes,92,rep,name=graphql_rules,json=graphqlRules,proto3" json:"graphql_rules,omitempty"`
	ProtectedCookies        []*schema.CookieManipulationOptionType   `protobuf:"bytes,93,rep,name=protected_cookies,json=protectedCookies,proto3" json:"protected_cookies,omitempty"`
	// Types that are valid to be assigned to SlowDdosMitigationChoice:
	//	*CreateSpecType_SystemDefaultTimeouts
	//	*CreateSpecType_SlowDdosMitigation
	SlowDdosMitigationChoice isCreateSpecType_SlowDdosMitigationChoice `protobuf_oneof:"slow_ddos_mitigation_choice"`
	JwtValidation            *common_waf.JWTValidation                 `protobuf:"bytes,98,opt,name=jwt_validation,json=jwtValidation,proto3" json:"jwt_validation,omitempty"`
	// Types that are valid to be assigned to ThreatMeshChoice:
	//	*CreateSpecType_DisableThreatMesh
	//	*CreateSpecType_EnableThreatMesh
	ThreatMeshChoice isCreateSpecType_ThreatMeshChoice `protobuf_oneof:"threat_mesh_choice"`
	// Types that are valid to be assigned to L7DdosAutoMitigationAction:
	//	*CreateSpecType_L7DdosActionDefault
	//	*CreateSpecType_L7DdosActionBlock
	//	*CreateSpecType_L7DdosActionJsChallenge
	//	*CreateSpecType_L7DdosActionNone
	L7DdosAutoMitigationAction   isCreateSpecType_L7DdosAutoMitigationAction `protobuf_oneof:"l7_ddos_auto_mitigation_action"`
	SensitiveDataDisclosureRules *SensitiveDataDisclosureRules               `protobuf:"bytes,116,opt,name=sensitive_data_disclosure_rules,json=sensitiveDataDisclosureRules,proto3" json:"sensitive_data_disclosure_rules,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{19}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_LoadbalancerType interface {
	isCreateSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_AdvertiseChoice interface {
	isCreateSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_OriginPoolChoice interface {
	isCreateSpecType_OriginPoolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_WafChoice interface {
	isCreateSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ChallengeType interface {
	isCreateSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_UserIdChoice interface {
	isCreateSpecType_UserIdChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_RateLimitChoice interface {
	isCreateSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ServicePolicyChoice interface {
	isCreateSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_HashPolicyChoice interface {
	isCreateSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_TrustClientIpHeadersChoice interface {
	isCreateSpecType_TrustClientIpHeadersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_MlConfigChoice interface {
	isCreateSpecType_MlConfigChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_MaliciousUserDetectionChoice interface {
	isCreateSpecType_MaliciousUserDetectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ApiDiscoveryChoice interface {
	isCreateSpecType_ApiDiscoveryChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_BotDefenseChoice interface {
	isCreateSpecType_BotDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_SensitiveDataPolicyChoice interface {
	isCreateSpecType_SensitiveDataPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ApiDefinitionChoice interface {
	isCreateSpecType_ApiDefinitionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_IpReputationChoice interface {
	isCreateSpecType_IpReputationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ClientSideDefenseChoice interface {
	isCreateSpecType_ClientSideDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_SlowDdosMitigationChoice interface {
	isCreateSpecType_SlowDdosMitigationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ThreatMeshChoice interface {
	isCreateSpecType_ThreatMeshChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_L7DdosAutoMitigationAction interface {
	isCreateSpecType_L7DdosAutoMitigationAction()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Http struct {
	Http *ProxyTypeHttp `protobuf:"bytes,2,opt,name=http,proto3,oneof" json:"http,omitempty"`
}
type CreateSpecType_HttpsAutoCert struct {
	HttpsAutoCert *ProxyTypeHttpsAutoCerts `protobuf:"bytes,27,opt,name=https_auto_cert,json=httpsAutoCert,proto3,oneof" json:"https_auto_cert,omitempty"`
}
type CreateSpecType_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,3,opt,name=https,proto3,oneof" json:"https,omitempty"`
}
type CreateSpecType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,12,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type CreateSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,13,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type CreateSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type CreateSpecType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type CreateSpecType_DefaultPool struct {
	DefaultPool *origin_pool.GlobalSpecType `protobuf:"bytes,89,opt,name=default_pool,json=defaultPool,proto3,oneof" json:"default_pool,omitempty"`
}
type CreateSpecType_DefaultPoolList struct {
	DefaultPoolList *views.OriginPoolListType `protobuf:"bytes,90,opt,name=default_pool_list,json=defaultPoolList,proto3,oneof" json:"default_pool_list,omitempty"`
}
type CreateSpecType_DisableWaf struct {
	DisableWaf *schema.Empty `protobuf:"bytes,11,opt,name=disable_waf,json=disableWaf,proto3,oneof" json:"disable_waf,omitempty"`
}
type CreateSpecType_AppFirewall struct {
	AppFirewall *views.ObjectRefType `protobuf:"bytes,52,opt,name=app_firewall,json=appFirewall,proto3,oneof" json:"app_firewall,omitempty"`
}
type CreateSpecType_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,26,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type CreateSpecType_EnableChallenge struct {
	EnableChallenge *common_waf.EnableChallenge `protobuf:"bytes,95,opt,name=enable_challenge,json=enableChallenge,proto3,oneof" json:"enable_challenge,omitempty"`
}
type CreateSpecType_JsChallenge struct {
	JsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,18,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type CreateSpecType_CaptchaChallenge struct {
	CaptchaChallenge *virtual_host.CaptchaChallengeType `protobuf:"bytes,24,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type CreateSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *common_waf.PolicyBasedChallenge `protobuf:"bytes,51,opt,name=policy_based_challenge,json=policyBasedChallenge,proto3,oneof" json:"policy_based_challenge,omitempty"`
}
type CreateSpecType_UserIdClientIp struct {
	UserIdClientIp *schema.Empty `protobuf:"bytes,60,opt,name=user_id_client_ip,json=userIdClientIp,proto3,oneof" json:"user_id_client_ip,omitempty"`
}
type CreateSpecType_UserIdentification struct {
	UserIdentification *views.ObjectRefType `protobuf:"bytes,20,opt,name=user_identification,json=userIdentification,proto3,oneof" json:"user_identification,omitempty"`
}
type CreateSpecType_DisableRateLimit struct {
	DisableRateLimit *schema.Empty `protobuf:"bytes,22,opt,name=disable_rate_limit,json=disableRateLimit,proto3,oneof" json:"disable_rate_limit,omitempty"`
}
type CreateSpecType_ApiRateLimit struct {
	ApiRateLimit *common_waf.APIRateLimit `protobuf:"bytes,120,opt,name=api_rate_limit,json=apiRateLimit,proto3,oneof" json:"api_rate_limit,omitempty"`
}
type CreateSpecType_RateLimit struct {
	RateLimit *common_waf.RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,proto3,oneof" json:"rate_limit,omitempty"`
}
type CreateSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,41,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type CreateSpecType_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,42,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type CreateSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *common_waf.ServicePolicyList `protobuf:"bytes,43,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}
type CreateSpecType_RoundRobin struct {
	RoundRobin *schema.Empty `protobuf:"bytes,45,opt,name=round_robin,json=roundRobin,proto3,oneof" json:"round_robin,omitempty"`
}
type CreateSpecType_LeastActive struct {
	LeastActive *schema.Empty `protobuf:"bytes,46,opt,name=least_active,json=leastActive,proto3,oneof" json:"least_active,omitempty"`
}
type CreateSpecType_Random struct {
	Random *schema.Empty `protobuf:"bytes,47,opt,name=random,proto3,oneof" json:"random,omitempty"`
}
type CreateSpecType_SourceIpStickiness struct {
	SourceIpStickiness *schema.Empty `protobuf:"bytes,48,opt,name=source_ip_stickiness,json=sourceIpStickiness,proto3,oneof" json:"source_ip_stickiness,omitempty"`
}
type CreateSpecType_CookieStickiness struct {
	CookieStickiness *route.CookieForHashing `protobuf:"bytes,49,opt,name=cookie_stickiness,json=cookieStickiness,proto3,oneof" json:"cookie_stickiness,omitempty"`
}
type CreateSpecType_RingHash struct {
	RingHash *HashPolicyListType `protobuf:"bytes,50,opt,name=ring_hash,json=ringHash,proto3,oneof" json:"ring_hash,omitempty"`
}
type CreateSpecType_DisableTrustClientIpHeaders struct {
	DisableTrustClientIpHeaders *schema.Empty `protobuf:"bytes,74,opt,name=disable_trust_client_ip_headers,json=disableTrustClientIpHeaders,proto3,oneof" json:"disable_trust_client_ip_headers,omitempty"`
}
type CreateSpecType_EnableTrustClientIpHeaders struct {
	EnableTrustClientIpHeaders *virtual_host.ClientIPHeaders `protobuf:"bytes,75,opt,name=enable_trust_client_ip_headers,json=enableTrustClientIpHeaders,proto3,oneof" json:"enable_trust_client_ip_headers,omitempty"`
}
type CreateSpecType_SingleLbApp struct {
	SingleLbApp *SingleLoadBalancerAppSetting `protobuf:"bytes,54,opt,name=single_lb_app,json=singleLbApp,proto3,oneof" json:"single_lb_app,omitempty"`
}
type CreateSpecType_MultiLbApp struct {
	MultiLbApp *schema.Empty `protobuf:"bytes,55,opt,name=multi_lb_app,json=multiLbApp,proto3,oneof" json:"multi_lb_app,omitempty"`
}
type CreateSpecType_EnableMaliciousUserDetection struct {
	EnableMaliciousUserDetection *schema.Empty `protobuf:"bytes,80,opt,name=enable_malicious_user_detection,json=enableMaliciousUserDetection,proto3,oneof" json:"enable_malicious_user_detection,omitempty"`
}
type CreateSpecType_DisableMaliciousUserDetection struct {
	DisableMaliciousUserDetection *schema.Empty `protobuf:"bytes,81,opt,name=disable_malicious_user_detection,json=disableMaliciousUserDetection,proto3,oneof" json:"disable_malicious_user_detection,omitempty"`
}
type CreateSpecType_EnableApiDiscovery struct {
	EnableApiDiscovery *common_waf.ApiDiscoverySetting `protobuf:"bytes,83,opt,name=enable_api_discovery,json=enableApiDiscovery,proto3,oneof" json:"enable_api_discovery,omitempty"`
}
type CreateSpecType_DisableApiDiscovery struct {
	DisableApiDiscovery *schema.Empty `protobuf:"bytes,84,opt,name=disable_api_discovery,json=disableApiDiscovery,proto3,oneof" json:"disable_api_discovery,omitempty"`
}
type CreateSpecType_DisableBotDefense struct {
	DisableBotDefense *schema.Empty `protobuf:"bytes,57,opt,name=disable_bot_defense,json=disableBotDefense,proto3,oneof" json:"disable_bot_defense,omitempty"`
}
type CreateSpecType_BotDefense struct {
	BotDefense *common_security.ShapeBotDefenseType `protobuf:"bytes,58,opt,name=bot_defense,json=botDefense,proto3,oneof" json:"bot_defense,omitempty"`
}
type CreateSpecType_BotDefenseAdvanced struct {
	BotDefenseAdvanced *common_security.BotDefenseAdvancedType `protobuf:"bytes,1011,opt,name=bot_defense_advanced,json=botDefenseAdvanced,proto3,oneof" json:"bot_defense_advanced,omitempty"`
}
type CreateSpecType_DefaultSensitiveDataPolicy struct {
	DefaultSensitiveDataPolicy *schema.Empty `protobuf:"bytes,131,opt,name=default_sensitive_data_policy,json=defaultSensitiveDataPolicy,proto3,oneof" json:"default_sensitive_data_policy,omitempty"`
}
type CreateSpecType_SensitiveDataPolicy struct {
	SensitiveDataPolicy *common_security.SensitiveDataPolicySettings `protobuf:"bytes,132,opt,name=sensitive_data_policy,json=sensitiveDataPolicy,proto3,oneof" json:"sensitive_data_policy,omitempty"`
}
type CreateSpecType_DisableApiDefinition struct {
	DisableApiDefinition *schema.Empty `protobuf:"bytes,70,opt,name=disable_api_definition,json=disableApiDefinition,proto3,oneof" json:"disable_api_definition,omitempty"`
}
type CreateSpecType_ApiDefinition struct {
	ApiDefinition *views.ObjectRefType `protobuf:"bytes,71,opt,name=api_definition,json=apiDefinition,proto3,oneof" json:"api_definition,omitempty"`
}
type CreateSpecType_ApiSpecification struct {
	ApiSpecification *common_waf.APISpecificationSettings `protobuf:"bytes,67,opt,name=api_specification,json=apiSpecification,proto3,oneof" json:"api_specification,omitempty"`
}
type CreateSpecType_ApiDefinitions struct {
	ApiDefinitions *common_waf.ApiDefinitionList `protobuf:"bytes,61,opt,name=api_definitions,json=apiDefinitions,proto3,oneof" json:"api_definitions,omitempty"`
}
type CreateSpecType_DisableIpReputation struct {
	DisableIpReputation *schema.Empty `protobuf:"bytes,65,opt,name=disable_ip_reputation,json=disableIpReputation,proto3,oneof" json:"disable_ip_reputation,omitempty"`
}
type CreateSpecType_EnableIpReputation struct {
	EnableIpReputation *common_waf.IPThreatCategoryListType `protobuf:"bytes,66,opt,name=enable_ip_reputation,json=enableIpReputation,proto3,oneof" json:"enable_ip_reputation,omitempty"`
}
type CreateSpecType_DisableClientSideDefense struct {
	DisableClientSideDefense *schema.Empty `protobuf:"bytes,86,opt,name=disable_client_side_defense,json=disableClientSideDefense,proto3,oneof" json:"disable_client_side_defense,omitempty"`
}
type CreateSpecType_ClientSideDefense struct {
	ClientSideDefense *common_security.ClientSideDefenseType `protobuf:"bytes,87,opt,name=client_side_defense,json=clientSideDefense,proto3,oneof" json:"client_side_defense,omitempty"`
}
type CreateSpecType_SystemDefaultTimeouts struct {
	SystemDefaultTimeouts *schema.Empty `protobuf:"bytes,97,opt,name=system_default_timeouts,json=systemDefaultTimeouts,proto3,oneof" json:"system_default_timeouts,omitempty"`
}
type CreateSpecType_SlowDdosMitigation struct {
	SlowDdosMitigation *virtual_host.SlowDDoSMitigation `protobuf:"bytes,94,opt,name=slow_ddos_mitigation,json=slowDdosMitigation,proto3,oneof" json:"slow_ddos_mitigation,omitempty"`
}
type CreateSpecType_DisableThreatMesh struct {
	DisableThreatMesh *schema.Empty `protobuf:"bytes,103,opt,name=disable_threat_mesh,json=disableThreatMesh,proto3,oneof" json:"disable_threat_mesh,omitempty"`
}
type CreateSpecType_EnableThreatMesh struct {
	EnableThreatMesh *schema.Empty `protobuf:"bytes,105,opt,name=enable_threat_mesh,json=enableThreatMesh,proto3,oneof" json:"enable_threat_mesh,omitempty"`
}
type CreateSpecType_L7DdosActionDefault struct {
	L7DdosActionDefault *schema.Empty `protobuf:"bytes,111,opt,name=l7_ddos_action_default,json=l7DdosActionDefault,proto3,oneof" json:"l7_ddos_action_default,omitempty"`
}
type CreateSpecType_L7DdosActionBlock struct {
	L7DdosActionBlock *schema.Empty `protobuf:"bytes,112,opt,name=l7_ddos_action_block,json=l7DdosActionBlock,proto3,oneof" json:"l7_ddos_action_block,omitempty"`
}
type CreateSpecType_L7DdosActionJsChallenge struct {
	L7DdosActionJsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,113,opt,name=l7_ddos_action_js_challenge,json=l7DdosActionJsChallenge,proto3,oneof" json:"l7_ddos_action_js_challenge,omitempty"`
}
type CreateSpecType_L7DdosActionNone struct {
	L7DdosActionNone *schema.Empty `protobuf:"bytes,114,opt,name=l7_ddos_action_none,json=l7DdosActionNone,proto3,oneof" json:"l7_ddos_action_none,omitempty"`
}

func (*CreateSpecType_Http) isCreateSpecType_LoadbalancerType()                                     {}
func (*CreateSpecType_HttpsAutoCert) isCreateSpecType_LoadbalancerType()                            {}
func (*CreateSpecType_Https) isCreateSpecType_LoadbalancerType()                                    {}
func (*CreateSpecType_DoNotAdvertise) isCreateSpecType_AdvertiseChoice()                            {}
func (*CreateSpecType_AdvertiseOnPublicDefaultVip) isCreateSpecType_AdvertiseChoice()               {}
func (*CreateSpecType_AdvertiseOnPublic) isCreateSpecType_AdvertiseChoice()                         {}
func (*CreateSpecType_AdvertiseCustom) isCreateSpecType_AdvertiseChoice()                           {}
func (*CreateSpecType_DefaultPool) isCreateSpecType_OriginPoolChoice()                              {}
func (*CreateSpecType_DefaultPoolList) isCreateSpecType_OriginPoolChoice()                          {}
func (*CreateSpecType_DisableWaf) isCreateSpecType_WafChoice()                                      {}
func (*CreateSpecType_AppFirewall) isCreateSpecType_WafChoice()                                     {}
func (*CreateSpecType_NoChallenge) isCreateSpecType_ChallengeType()                                 {}
func (*CreateSpecType_EnableChallenge) isCreateSpecType_ChallengeType()                             {}
func (*CreateSpecType_JsChallenge) isCreateSpecType_ChallengeType()                                 {}
func (*CreateSpecType_CaptchaChallenge) isCreateSpecType_ChallengeType()                            {}
func (*CreateSpecType_PolicyBasedChallenge) isCreateSpecType_ChallengeType()                        {}
func (*CreateSpecType_UserIdClientIp) isCreateSpecType_UserIdChoice()                               {}
func (*CreateSpecType_UserIdentification) isCreateSpecType_UserIdChoice()                           {}
func (*CreateSpecType_DisableRateLimit) isCreateSpecType_RateLimitChoice()                          {}
func (*CreateSpecType_ApiRateLimit) isCreateSpecType_RateLimitChoice()                              {}
func (*CreateSpecType_RateLimit) isCreateSpecType_RateLimitChoice()                                 {}
func (*CreateSpecType_ServicePoliciesFromNamespace) isCreateSpecType_ServicePolicyChoice()          {}
func (*CreateSpecType_NoServicePolicies) isCreateSpecType_ServicePolicyChoice()                     {}
func (*CreateSpecType_ActiveServicePolicies) isCreateSpecType_ServicePolicyChoice()                 {}
func (*CreateSpecType_RoundRobin) isCreateSpecType_HashPolicyChoice()                               {}
func (*CreateSpecType_LeastActive) isCreateSpecType_HashPolicyChoice()                              {}
func (*CreateSpecType_Random) isCreateSpecType_HashPolicyChoice()                                   {}
func (*CreateSpecType_SourceIpStickiness) isCreateSpecType_HashPolicyChoice()                       {}
func (*CreateSpecType_CookieStickiness) isCreateSpecType_HashPolicyChoice()                         {}
func (*CreateSpecType_RingHash) isCreateSpecType_HashPolicyChoice()                                 {}
func (*CreateSpecType_DisableTrustClientIpHeaders) isCreateSpecType_TrustClientIpHeadersChoice()    {}
func (*CreateSpecType_EnableTrustClientIpHeaders) isCreateSpecType_TrustClientIpHeadersChoice()     {}
func (*CreateSpecType_SingleLbApp) isCreateSpecType_MlConfigChoice()                                {}
func (*CreateSpecType_MultiLbApp) isCreateSpecType_MlConfigChoice()                                 {}
func (*CreateSpecType_EnableMaliciousUserDetection) isCreateSpecType_MaliciousUserDetectionChoice() {}
func (*CreateSpecType_DisableMaliciousUserDetection) isCreateSpecType_MaliciousUserDetectionChoice() {
}
func (*CreateSpecType_EnableApiDiscovery) isCreateSpecType_ApiDiscoveryChoice()                {}
func (*CreateSpecType_DisableApiDiscovery) isCreateSpecType_ApiDiscoveryChoice()               {}
func (*CreateSpecType_DisableBotDefense) isCreateSpecType_BotDefenseChoice()                   {}
func (*CreateSpecType_BotDefense) isCreateSpecType_BotDefenseChoice()                          {}
func (*CreateSpecType_BotDefenseAdvanced) isCreateSpecType_BotDefenseChoice()                  {}
func (*CreateSpecType_DefaultSensitiveDataPolicy) isCreateSpecType_SensitiveDataPolicyChoice() {}
func (*CreateSpecType_SensitiveDataPolicy) isCreateSpecType_SensitiveDataPolicyChoice()        {}
func (*CreateSpecType_DisableApiDefinition) isCreateSpecType_ApiDefinitionChoice()             {}
func (*CreateSpecType_ApiDefinition) isCreateSpecType_ApiDefinitionChoice()                    {}
func (*CreateSpecType_ApiSpecification) isCreateSpecType_ApiDefinitionChoice()                 {}
func (*CreateSpecType_ApiDefinitions) isCreateSpecType_ApiDefinitionChoice()                   {}
func (*CreateSpecType_DisableIpReputation) isCreateSpecType_IpReputationChoice()               {}
func (*CreateSpecType_EnableIpReputation) isCreateSpecType_IpReputationChoice()                {}
func (*CreateSpecType_DisableClientSideDefense) isCreateSpecType_ClientSideDefenseChoice()     {}
func (*CreateSpecType_ClientSideDefense) isCreateSpecType_ClientSideDefenseChoice()            {}
func (*CreateSpecType_SystemDefaultTimeouts) isCreateSpecType_SlowDdosMitigationChoice()       {}
func (*CreateSpecType_SlowDdosMitigation) isCreateSpecType_SlowDdosMitigationChoice()          {}
func (*CreateSpecType_DisableThreatMesh) isCreateSpecType_ThreatMeshChoice()                   {}
func (*CreateSpecType_EnableThreatMesh) isCreateSpecType_ThreatMeshChoice()                    {}
func (*CreateSpecType_L7DdosActionDefault) isCreateSpecType_L7DdosAutoMitigationAction()       {}
func (*CreateSpecType_L7DdosActionBlock) isCreateSpecType_L7DdosAutoMitigationAction()         {}
func (*CreateSpecType_L7DdosActionJsChallenge) isCreateSpecType_L7DdosAutoMitigationAction()   {}
func (*CreateSpecType_L7DdosActionNone) isCreateSpecType_L7DdosAutoMitigationAction()          {}

func (m *CreateSpecType) GetLoadbalancerType() isCreateSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *CreateSpecType) GetAdvertiseChoice() isCreateSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *CreateSpecType) GetOriginPoolChoice() isCreateSpecType_OriginPoolChoice {
	if m != nil {
		return m.OriginPoolChoice
	}
	return nil
}
func (m *CreateSpecType) GetWafChoice() isCreateSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *CreateSpecType) GetChallengeType() isCreateSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *CreateSpecType) GetUserIdChoice() isCreateSpecType_UserIdChoice {
	if m != nil {
		return m.UserIdChoice
	}
	return nil
}
func (m *CreateSpecType) GetRateLimitChoice() isCreateSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}
func (m *CreateSpecType) GetServicePolicyChoice() isCreateSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *CreateSpecType) GetHashPolicyChoice() isCreateSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *CreateSpecType) GetTrustClientIpHeadersChoice() isCreateSpecType_TrustClientIpHeadersChoice {
	if m != nil {
		return m.TrustClientIpHeadersChoice
	}
	return nil
}
func (m *CreateSpecType) GetMlConfigChoice() isCreateSpecType_MlConfigChoice {
	if m != nil {
		return m.MlConfigChoice
	}
	return nil
}
func (m *CreateSpecType) GetMaliciousUserDetectionChoice() isCreateSpecType_MaliciousUserDetectionChoice {
	if m != nil {
		return m.MaliciousUserDetectionChoice
	}
	return nil
}
func (m *CreateSpecType) GetApiDiscoveryChoice() isCreateSpecType_ApiDiscoveryChoice {
	if m != nil {
		return m.ApiDiscoveryChoice
	}
	return nil
}
func (m *CreateSpecType) GetBotDefenseChoice() isCreateSpecType_BotDefenseChoice {
	if m != nil {
		return m.BotDefenseChoice
	}
	return nil
}
func (m *CreateSpecType) GetSensitiveDataPolicyChoice() isCreateSpecType_SensitiveDataPolicyChoice {
	if m != nil {
		return m.SensitiveDataPolicyChoice
	}
	return nil
}
func (m *CreateSpecType) GetApiDefinitionChoice() isCreateSpecType_ApiDefinitionChoice {
	if m != nil {
		return m.ApiDefinitionChoice
	}
	return nil
}
func (m *CreateSpecType) GetIpReputationChoice() isCreateSpecType_IpReputationChoice {
	if m != nil {
		return m.IpReputationChoice
	}
	return nil
}
func (m *CreateSpecType) GetClientSideDefenseChoice() isCreateSpecType_ClientSideDefenseChoice {
	if m != nil {
		return m.ClientSideDefenseChoice
	}
	return nil
}
func (m *CreateSpecType) GetSlowDdosMitigationChoice() isCreateSpecType_SlowDdosMitigationChoice {
	if m != nil {
		return m.SlowDdosMitigationChoice
	}
	return nil
}
func (m *CreateSpecType) GetThreatMeshChoice() isCreateSpecType_ThreatMeshChoice {
	if m != nil {
		return m.ThreatMeshChoice
	}
	return nil
}
func (m *CreateSpecType) GetL7DdosAutoMitigationAction() isCreateSpecType_L7DdosAutoMitigationAction {
	if m != nil {
		return m.L7DdosAutoMitigationAction
	}
	return nil
}

func (m *CreateSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *CreateSpecType) GetHttp() *ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *CreateSpecType) GetHttpsAutoCert() *ProxyTypeHttpsAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *CreateSpecType) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *CreateSpecType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *CreateSpecType) GetDefaultRoutePools() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.DefaultRoutePools
	}
	return nil
}

func (m *CreateSpecType) GetDefaultPool() *origin_pool.GlobalSpecType {
	if x, ok := m.GetOriginPoolChoice().(*CreateSpecType_DefaultPool); ok {
		return x.DefaultPool
	}
	return nil
}

func (m *CreateSpecType) GetDefaultPoolList() *views.OriginPoolListType {
	if x, ok := m.GetOriginPoolChoice().(*CreateSpecType_DefaultPoolList); ok {
		return x.DefaultPoolList
	}
	return nil
}

func (m *CreateSpecType) GetOriginServerSubsetRuleList() *OriginServerSubsetRuleListType {
	if m != nil {
		return m.OriginServerSubsetRuleList
	}
	return nil
}

func (m *CreateSpecType) GetRoutes() []*RouteType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *CreateSpecType) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *CreateSpecType) GetDisableWaf() *schema.Empty {
	if x, ok := m.GetWafChoice().(*CreateSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *CreateSpecType) GetAppFirewall() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*CreateSpecType_AppFirewall); ok {
		return x.AppFirewall
	}
	return nil
}

func (m *CreateSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *CreateSpecType) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*CreateSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *CreateSpecType) GetEnableChallenge() *common_waf.EnableChallenge {
	if x, ok := m.GetChallengeType().(*CreateSpecType_EnableChallenge); ok {
		return x.EnableChallenge
	}
	return nil
}

func (m *CreateSpecType) GetJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*CreateSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *CreateSpecType) GetCaptchaChallenge() *virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*CreateSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *CreateSpecType) GetPolicyBasedChallenge() *common_waf.PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*CreateSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *CreateSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *CreateSpecType) GetUserIdClientIp() *schema.Empty {
	if x, ok := m.GetUserIdChoice().(*CreateSpecType_UserIdClientIp); ok {
		return x.UserIdClientIp
	}
	return nil
}

func (m *CreateSpecType) GetUserIdentification() *views.ObjectRefType {
	if x, ok := m.GetUserIdChoice().(*CreateSpecType_UserIdentification); ok {
		return x.UserIdentification
	}
	return nil
}

func (m *CreateSpecType) GetApiRateLimitLegacy() *common_waf.APIRateLimitLegacy {
	if m != nil {
		return m.ApiRateLimitLegacy
	}
	return nil
}

func (m *CreateSpecType) GetDisableRateLimit() *schema.Empty {
	if x, ok := m.GetRateLimitChoice().(*CreateSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *CreateSpecType) GetApiRateLimit() *common_waf.APIRateLimit {
	if x, ok := m.GetRateLimitChoice().(*CreateSpecType_ApiRateLimit); ok {
		return x.ApiRateLimit
	}
	return nil
}

func (m *CreateSpecType) GetRateLimit() *common_waf.RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*CreateSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *CreateSpecType) GetMaliciousUserMitigation() *views.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *CreateSpecType) GetWafExclusionRules() []*policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *CreateSpecType) GetDataGuardRules() []*policy.SimpleDataGuardRule {
	if m != nil {
		return m.DataGuardRules
	}
	return nil
}

func (m *CreateSpecType) GetBlockedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *CreateSpecType) GetTrustedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *CreateSpecType) GetApiProtectionRules() *common_waf.APIProtectionRules {
	if m != nil {
		return m.ApiProtectionRules
	}
	return nil
}

func (m *CreateSpecType) GetDdosMitigationRules() []*common_security.DDoSMitigationRule {
	if m != nil {
		return m.DdosMitigationRules
	}
	return nil
}

func (m *CreateSpecType) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*CreateSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *CreateSpecType) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*CreateSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *CreateSpecType) GetActiveServicePolicies() *common_waf.ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*CreateSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *CreateSpecType) GetRoundRobin() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_RoundRobin); ok {
		return x.RoundRobin
	}
	return nil
}

func (m *CreateSpecType) GetLeastActive() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_LeastActive); ok {
		return x.LeastActive
	}
	return nil
}

func (m *CreateSpecType) GetRandom() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_Random); ok {
		return x.Random
	}
	return nil
}

func (m *CreateSpecType) GetSourceIpStickiness() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_SourceIpStickiness); ok {
		return x.SourceIpStickiness
	}
	return nil
}

func (m *CreateSpecType) GetCookieStickiness() *route.CookieForHashing {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_CookieStickiness); ok {
		return x.CookieStickiness
	}
	return nil
}

func (m *CreateSpecType) GetRingHash() *HashPolicyListType {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_RingHash); ok {
		return x.RingHash
	}
	return nil
}

func (m *CreateSpecType) GetDisableTrustClientIpHeaders() *schema.Empty {
	if x, ok := m.GetTrustClientIpHeadersChoice().(*CreateSpecType_DisableTrustClientIpHeaders); ok {
		return x.DisableTrustClientIpHeaders
	}
	return nil
}

func (m *CreateSpecType) GetEnableTrustClientIpHeaders() *virtual_host.ClientIPHeaders {
	if x, ok := m.GetTrustClientIpHeadersChoice().(*CreateSpecType_EnableTrustClientIpHeaders); ok {
		return x.EnableTrustClientIpHeaders
	}
	return nil
}

func (m *CreateSpecType) GetSingleLbApp() *SingleLoadBalancerAppSetting {
	if x, ok := m.GetMlConfigChoice().(*CreateSpecType_SingleLbApp); ok {
		return x.SingleLbApp
	}
	return nil
}

func (m *CreateSpecType) GetMultiLbApp() *schema.Empty {
	if x, ok := m.GetMlConfigChoice().(*CreateSpecType_MultiLbApp); ok {
		return x.MultiLbApp
	}
	return nil
}

func (m *CreateSpecType) GetEnableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*CreateSpecType_EnableMaliciousUserDetection); ok {
		return x.EnableMaliciousUserDetection
	}
	return nil
}

func (m *CreateSpecType) GetDisableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*CreateSpecType_DisableMaliciousUserDetection); ok {
		return x.DisableMaliciousUserDetection
	}
	return nil
}

func (m *CreateSpecType) GetEnableApiDiscovery() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*CreateSpecType_EnableApiDiscovery); ok {
		return x.EnableApiDiscovery
	}
	return nil
}

func (m *CreateSpecType) GetDisableApiDiscovery() *schema.Empty {
	if x, ok := m.GetApiDiscoveryChoice().(*CreateSpecType_DisableApiDiscovery); ok {
		return x.DisableApiDiscovery
	}
	return nil
}

func (m *CreateSpecType) GetDisableBotDefense() *schema.Empty {
	if x, ok := m.GetBotDefenseChoice().(*CreateSpecType_DisableBotDefense); ok {
		return x.DisableBotDefense
	}
	return nil
}

func (m *CreateSpecType) GetBotDefense() *common_security.ShapeBotDefenseType {
	if x, ok := m.GetBotDefenseChoice().(*CreateSpecType_BotDefense); ok {
		return x.BotDefense
	}
	return nil
}

func (m *CreateSpecType) GetBotDefenseAdvanced() *common_security.BotDefenseAdvancedType {
	if x, ok := m.GetBotDefenseChoice().(*CreateSpecType_BotDefenseAdvanced); ok {
		return x.BotDefenseAdvanced
	}
	return nil
}

func (m *CreateSpecType) GetDefaultSensitiveDataPolicy() *schema.Empty {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*CreateSpecType_DefaultSensitiveDataPolicy); ok {
		return x.DefaultSensitiveDataPolicy
	}
	return nil
}

func (m *CreateSpecType) GetSensitiveDataPolicy() *common_security.SensitiveDataPolicySettings {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*CreateSpecType_SensitiveDataPolicy); ok {
		return x.SensitiveDataPolicy
	}
	return nil
}

func (m *CreateSpecType) GetDisableApiDefinition() *schema.Empty {
	if x, ok := m.GetApiDefinitionChoice().(*CreateSpecType_DisableApiDefinition); ok {
		return x.DisableApiDefinition
	}
	return nil
}

func (m *CreateSpecType) GetApiDefinition() *views.ObjectRefType {
	if x, ok := m.GetApiDefinitionChoice().(*CreateSpecType_ApiDefinition); ok {
		return x.ApiDefinition
	}
	return nil
}

func (m *CreateSpecType) GetApiSpecification() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*CreateSpecType_ApiSpecification); ok {
		return x.ApiSpecification
	}
	return nil
}

func (m *CreateSpecType) GetApiDefinitions() *common_waf.ApiDefinitionList {
	if x, ok := m.GetApiDefinitionChoice().(*CreateSpecType_ApiDefinitions); ok {
		return x.ApiDefinitions
	}
	return nil
}

func (m *CreateSpecType) GetDisableIpReputation() *schema.Empty {
	if x, ok := m.GetIpReputationChoice().(*CreateSpecType_DisableIpReputation); ok {
		return x.DisableIpReputation
	}
	return nil
}

func (m *CreateSpecType) GetEnableIpReputation() *common_waf.IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*CreateSpecType_EnableIpReputation); ok {
		return x.EnableIpReputation
	}
	return nil
}

func (m *CreateSpecType) GetDisableClientSideDefense() *schema.Empty {
	if x, ok := m.GetClientSideDefenseChoice().(*CreateSpecType_DisableClientSideDefense); ok {
		return x.DisableClientSideDefense
	}
	return nil
}

func (m *CreateSpecType) GetClientSideDefense() *common_security.ClientSideDefenseType {
	if x, ok := m.GetClientSideDefenseChoice().(*CreateSpecType_ClientSideDefense); ok {
		return x.ClientSideDefense
	}
	return nil
}

func (m *CreateSpecType) GetCsrfPolicy() *schema.CsrfPolicy {
	if m != nil {
		return m.CsrfPolicy
	}
	return nil
}

func (m *CreateSpecType) GetGraphqlRules() []*policy.GraphQLRule {
	if m != nil {
		return m.GraphqlRules
	}
	return nil
}

func (m *CreateSpecType) GetProtectedCookies() []*schema.CookieManipulationOptionType {
	if m != nil {
		return m.ProtectedCookies
	}
	return nil
}

func (m *CreateSpecType) GetSystemDefaultTimeouts() *schema.Empty {
	if x, ok := m.GetSlowDdosMitigationChoice().(*CreateSpecType_SystemDefaultTimeouts); ok {
		return x.SystemDefaultTimeouts
	}
	return nil
}

func (m *CreateSpecType) GetSlowDdosMitigation() *virtual_host.SlowDDoSMitigation {
	if x, ok := m.GetSlowDdosMitigationChoice().(*CreateSpecType_SlowDdosMitigation); ok {
		return x.SlowDdosMitigation
	}
	return nil
}

func (m *CreateSpecType) GetJwtValidation() *common_waf.JWTValidation {
	if m != nil {
		return m.JwtValidation
	}
	return nil
}

func (m *CreateSpecType) GetDisableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*CreateSpecType_DisableThreatMesh); ok {
		return x.DisableThreatMesh
	}
	return nil
}

func (m *CreateSpecType) GetEnableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*CreateSpecType_EnableThreatMesh); ok {
		return x.EnableThreatMesh
	}
	return nil
}

func (m *CreateSpecType) GetL7DdosActionDefault() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*CreateSpecType_L7DdosActionDefault); ok {
		return x.L7DdosActionDefault
	}
	return nil
}

func (m *CreateSpecType) GetL7DdosActionBlock() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*CreateSpecType_L7DdosActionBlock); ok {
		return x.L7DdosActionBlock
	}
	return nil
}

func (m *CreateSpecType) GetL7DdosActionJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*CreateSpecType_L7DdosActionJsChallenge); ok {
		return x.L7DdosActionJsChallenge
	}
	return nil
}

func (m *CreateSpecType) GetL7DdosActionNone() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*CreateSpecType_L7DdosActionNone); ok {
		return x.L7DdosActionNone
	}
	return nil
}

func (m *CreateSpecType) GetSensitiveDataDisclosureRules() *SensitiveDataDisclosureRules {
	if m != nil {
		return m.SensitiveDataDisclosureRules
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_Http)(nil),
		(*CreateSpecType_HttpsAutoCert)(nil),
		(*CreateSpecType_Https)(nil),
		(*CreateSpecType_DoNotAdvertise)(nil),
		(*CreateSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*CreateSpecType_AdvertiseOnPublic)(nil),
		(*CreateSpecType_AdvertiseCustom)(nil),
		(*CreateSpecType_DefaultPool)(nil),
		(*CreateSpecType_DefaultPoolList)(nil),
		(*CreateSpecType_DisableWaf)(nil),
		(*CreateSpecType_AppFirewall)(nil),
		(*CreateSpecType_NoChallenge)(nil),
		(*CreateSpecType_EnableChallenge)(nil),
		(*CreateSpecType_JsChallenge)(nil),
		(*CreateSpecType_CaptchaChallenge)(nil),
		(*CreateSpecType_PolicyBasedChallenge)(nil),
		(*CreateSpecType_UserIdClientIp)(nil),
		(*CreateSpecType_UserIdentification)(nil),
		(*CreateSpecType_DisableRateLimit)(nil),
		(*CreateSpecType_ApiRateLimit)(nil),
		(*CreateSpecType_RateLimit)(nil),
		(*CreateSpecType_ServicePoliciesFromNamespace)(nil),
		(*CreateSpecType_NoServicePolicies)(nil),
		(*CreateSpecType_ActiveServicePolicies)(nil),
		(*CreateSpecType_RoundRobin)(nil),
		(*CreateSpecType_LeastActive)(nil),
		(*CreateSpecType_Random)(nil),
		(*CreateSpecType_SourceIpStickiness)(nil),
		(*CreateSpecType_CookieStickiness)(nil),
		(*CreateSpecType_RingHash)(nil),
		(*CreateSpecType_DisableTrustClientIpHeaders)(nil),
		(*CreateSpecType_EnableTrustClientIpHeaders)(nil),
		(*CreateSpecType_SingleLbApp)(nil),
		(*CreateSpecType_MultiLbApp)(nil),
		(*CreateSpecType_EnableMaliciousUserDetection)(nil),
		(*CreateSpecType_DisableMaliciousUserDetection)(nil),
		(*CreateSpecType_EnableApiDiscovery)(nil),
		(*CreateSpecType_DisableApiDiscovery)(nil),
		(*CreateSpecType_DisableBotDefense)(nil),
		(*CreateSpecType_BotDefense)(nil),
		(*CreateSpecType_BotDefenseAdvanced)(nil),
		(*CreateSpecType_DefaultSensitiveDataPolicy)(nil),
		(*CreateSpecType_SensitiveDataPolicy)(nil),
		(*CreateSpecType_DisableApiDefinition)(nil),
		(*CreateSpecType_ApiDefinition)(nil),
		(*CreateSpecType_ApiSpecification)(nil),
		(*CreateSpecType_ApiDefinitions)(nil),
		(*CreateSpecType_DisableIpReputation)(nil),
		(*CreateSpecType_EnableIpReputation)(nil),
		(*CreateSpecType_DisableClientSideDefense)(nil),
		(*CreateSpecType_ClientSideDefense)(nil),
		(*CreateSpecType_SystemDefaultTimeouts)(nil),
		(*CreateSpecType_SlowDdosMitigation)(nil),
		(*CreateSpecType_DisableThreatMesh)(nil),
		(*CreateSpecType_EnableThreatMesh)(nil),
		(*CreateSpecType_L7DdosActionDefault)(nil),
		(*CreateSpecType_L7DdosActionBlock)(nil),
		(*CreateSpecType_L7DdosActionJsChallenge)(nil),
		(*CreateSpecType_L7DdosActionNone)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace HTTP Load Balancer"
// Shape of the HTTP load balancer specification
type ReplaceSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Types that are valid to be assigned to LoadbalancerType:
	//
	//	*ReplaceSpecType_Http
	//	*ReplaceSpecType_HttpsAutoCert
	//	*ReplaceSpecType_Https
	LoadbalancerType isReplaceSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//
	//	*ReplaceSpecType_DoNotAdvertise
	//	*ReplaceSpecType_AdvertiseOnPublicDefaultVip
	//	*ReplaceSpecType_AdvertiseOnPublic
	//	*ReplaceSpecType_AdvertiseCustom
	AdvertiseChoice   isReplaceSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	DefaultRoutePools []*views.OriginPoolWithWeight     `protobuf:"bytes,6,rep,name=default_route_pools,json=defaultRoutePools,proto3" json:"default_route_pools,omitempty"`
	// Types that are valid to be assigned to OriginPoolChoice:
	//
	//	*ReplaceSpecType_DefaultPool
	//	*ReplaceSpecType_DefaultPoolList
	OriginPoolChoice           isReplaceSpecType_OriginPoolChoice `protobuf_oneof:"origin_pool_choice"`
	OriginServerSubsetRuleList *OriginServerSubsetRuleListType    `protobuf:"bytes,101,opt,name=origin_server_subset_rule_list,json=originServerSubsetRuleList,proto3" json:"origin_server_subset_rule_list,omitempty"`
	Routes                     []*RouteType                       `protobuf:"bytes,7,rep,name=routes,proto3" json:"routes,omitempty"`
	CorsPolicy                 *schema.CorsPolicy                 `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// Types that are valid to be assigned to WafChoice:
	//
	//	*ReplaceSpecType_DisableWaf
	//	*ReplaceSpecType_AppFirewall
	WafChoice   isReplaceSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	AddLocation bool                        `protobuf:"varint,17,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//
	//	*ReplaceSpecType_NoChallenge
	//	*ReplaceSpecType_EnableChallenge
	//	*ReplaceSpecType_JsChallenge
	//	*ReplaceSpecType_CaptchaChallenge
	//	*ReplaceSpecType_PolicyBasedChallenge
	ChallengeType isReplaceSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	MoreOption    *AdvancedOptionsType            `protobuf:"bytes,19,opt,name=more_option,json=moreOption,proto3" json:"more_option,omitempty"`
	// Types that are valid to be assigned to UserIdChoice:
	//
	//	*ReplaceSpecType_UserIdClientIp
	//	*ReplaceSpecType_UserIdentification
	UserIdChoice       isReplaceSpecType_UserIdChoice `protobuf_oneof:"user_id_choice"`
	ApiRateLimitLegacy *common_waf.APIRateLimitLegacy `protobuf:"bytes,68,opt,name=api_rate_limit_legacy,json=apiRateLimitLegacy,proto3" json:"api_rate_limit_legacy,omitempty"`
	// Types that are valid to be assigned to RateLimitChoice:
	//
	//	*ReplaceSpecType_DisableRateLimit
	//	*ReplaceSpecType_ApiRateLimit
	//	*ReplaceSpecType_RateLimit
	RateLimitChoice         isReplaceSpecType_RateLimitChoice     `protobuf_oneof:"rate_limit_choice"`
	MaliciousUserMitigation *views.ObjectRefType                  `protobuf:"bytes,32,opt,name=malicious_user_mitigation,json=maliciousUserMitigation,proto3" json:"malicious_user_mitigation,omitempty"`
	WafExclusionRules       []*policy.SimpleWafExclusionRule      `protobuf:"bytes,33,rep,name=waf_exclusion_rules,json=wafExclusionRules,proto3" json:"waf_exclusion_rules,omitempty"`
	DataGuardRules          []*policy.SimpleDataGuardRule         `protobuf:"bytes,63,rep,name=data_guard_rules,json=dataGuardRules,proto3" json:"data_guard_rules,omitempty"`
	BlockedClients          []*common_waf.SimpleClientSrcRule     `protobuf:"bytes,34,rep,name=blocked_clients,json=blockedClients,proto3" json:"blocked_clients,omitempty"`
	TrustedClients          []*common_waf.SimpleClientSrcRule     `protobuf:"bytes,35,rep,name=trusted_clients,json=trustedClients,proto3" json:"trusted_clients,omitempty"`
	ApiProtectionRules      *common_waf.APIProtectionRules        `protobuf:"bytes,72,opt,name=api_protection_rules,json=apiProtectionRules,proto3" json:"api_protection_rules,omitempty"`
	DdosMitigationRules     []*common_security.DDoSMitigationRule `protobuf:"bytes,37,rep,name=ddos_mitigation_rules,json=ddosMitigationRules,proto3" json:"ddos_mitigation_rules,omitempty"`
	// Types that are valid to be assigned to ServicePolicyChoice:
	//
	//	*ReplaceSpecType_ServicePoliciesFromNamespace
	//	*ReplaceSpecType_NoServicePolicies
	//	*ReplaceSpecType_ActiveServicePolicies
	ServicePolicyChoice isReplaceSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//
	//	*ReplaceSpecType_RoundRobin
	//	*ReplaceSpecType_LeastActive
	//	*ReplaceSpecType_Random
	//	*ReplaceSpecType_SourceIpStickiness
	//	*ReplaceSpecType_CookieStickiness
	//	*ReplaceSpecType_RingHash
	HashPolicyChoice isReplaceSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	// Types that are valid to be assigned to TrustClientIpHeadersChoice:
	//
	//	*ReplaceSpecType_DisableTrustClientIpHeaders
	//	*ReplaceSpecType_EnableTrustClientIpHeaders
	TrustClientIpHeadersChoice isReplaceSpecType_TrustClientIpHeadersChoice `protobuf_oneof:"trust_client_ip_headers_choice"`
	// Types that are valid to be assigned to MlConfigChoice:
	//
	//	*ReplaceSpecType_SingleLbApp
	//	*ReplaceSpecType_MultiLbApp
	MlConfigChoice isReplaceSpecType_MlConfigChoice `protobuf_oneof:"ml_config_choice"`
	// Types that are valid to be assigned to MaliciousUserDetectionChoice:
	//
	//	*ReplaceSpecType_EnableMaliciousUserDetection
	//	*ReplaceSpecType_DisableMaliciousUserDetection
	MaliciousUserDetectionChoice isReplaceSpecType_MaliciousUserDetectionChoice `protobuf_oneof:"malicious_user_detection_choice"`
	// Types that are valid to be assigned to ApiDiscoveryChoice:
	//
	//	*ReplaceSpecType_EnableApiDiscovery
	//	*ReplaceSpecType_DisableApiDiscovery
	ApiDiscoveryChoice isReplaceSpecType_ApiDiscoveryChoice `protobuf_oneof:"api_discovery_choice"`
	// Types that are valid to be assigned to BotDefenseChoice:
	//
	//	*ReplaceSpecType_DisableBotDefense
	//	*ReplaceSpecType_BotDefense
	//	*ReplaceSpecType_BotDefenseAdvanced
	BotDefenseChoice isReplaceSpecType_BotDefenseChoice `protobuf_oneof:"bot_defense_choice"`
	// Types that are valid to be assigned to SensitiveDataPolicyChoice:
	//
	//	*ReplaceSpecType_DefaultSensitiveDataPolicy
	//	*ReplaceSpecType_SensitiveDataPolicy
	SensitiveDataPolicyChoice isReplaceSpecType_SensitiveDataPolicyChoice `protobuf_oneof:"sensitive_data_policy_choice"`
	// Types that are valid to be assigned to ApiDefinitionChoice:
	//
	//	*ReplaceSpecType_DisableApiDefinition
	//	*ReplaceSpecType_ApiDefinition
	//	*ReplaceSpecType_ApiSpecification
	//	*ReplaceSpecType_ApiDefinitions
	ApiDefinitionChoice isReplaceSpecType_ApiDefinitionChoice `protobuf_oneof:"api_definition_choice"`
	// Types that are valid to be assigned to IpReputationChoice:
	//
	//	*ReplaceSpecType_DisableIpReputation
	//	*ReplaceSpecType_EnableIpReputation
	IpReputationChoice isReplaceSpecType_IpReputationChoice `protobuf_oneof:"ip_reputation_choice"`
	// Types that are valid to be assigned to ClientSideDefenseChoice:
	//
	//	*ReplaceSpecType_DisableClientSideDefense
	//	*ReplaceSpecType_ClientSideDefense
	ClientSideDefenseChoice isReplaceSpecType_ClientSideDefenseChoice `protobuf_oneof:"client_side_defense_choice"`
	CsrfPolicy              *schema.CsrfPolicy                        `protobuf:"bytes,91,opt,name=csrf_policy,json=csrfPolicy,proto3" json:"csrf_policy,omitempty"`
	GraphqlRules            []*policy.GraphQLRule                     `protobuf:"bytes,92,rep,name=graphql_rules,json=graphqlRules,proto3" json:"graphql_rules,omitempty"`
	ProtectedCookies        []*schema.CookieManipulationOptionType    `protobuf:"bytes,93,rep,name=protected_cookies,json=protectedCookies,proto3" json:"protected_cookies,omitempty"`
	// Types that are valid to be assigned to SlowDdosMitigationChoice:
	//
	//	*ReplaceSpecType_SystemDefaultTimeouts
	//	*ReplaceSpecType_SlowDdosMitigation
	SlowDdosMitigationChoice isReplaceSpecType_SlowDdosMitigationChoice `protobuf_oneof:"slow_ddos_mitigation_choice"`
	JwtValidation            *common_waf.JWTValidation                  `protobuf:"bytes,98,opt,name=jwt_validation,json=jwtValidation,proto3" json:"jwt_validation,omitempty"`
	// Types that are valid to be assigned to ThreatMeshChoice:
	//
	//	*ReplaceSpecType_DisableThreatMesh
	//	*ReplaceSpecType_EnableThreatMesh
	ThreatMeshChoice isReplaceSpecType_ThreatMeshChoice `protobuf_oneof:"threat_mesh_choice"`
	// Types that are valid to be assigned to L7DdosAutoMitigationAction:
	//
	//	*ReplaceSpecType_L7DdosActionDefault
	//	*ReplaceSpecType_L7DdosActionBlock
	//	*ReplaceSpecType_L7DdosActionJsChallenge
	//	*ReplaceSpecType_L7DdosActionNone
	L7DdosAutoMitigationAction   isReplaceSpecType_L7DdosAutoMitigationAction `protobuf_oneof:"l7_ddos_auto_mitigation_action"`
	SensitiveDataDisclosureRules *SensitiveDataDisclosureRules                `protobuf:"bytes,116,opt,name=sensitive_data_disclosure_rules,json=sensitiveDataDisclosureRules,proto3" json:"sensitive_data_disclosure_rules,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{20}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_LoadbalancerType interface {
	isReplaceSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_AdvertiseChoice interface {
	isReplaceSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_OriginPoolChoice interface {
	isReplaceSpecType_OriginPoolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_WafChoice interface {
	isReplaceSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ChallengeType interface {
	isReplaceSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_UserIdChoice interface {
	isReplaceSpecType_UserIdChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_RateLimitChoice interface {
	isReplaceSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ServicePolicyChoice interface {
	isReplaceSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_HashPolicyChoice interface {
	isReplaceSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_TrustClientIpHeadersChoice interface {
	isReplaceSpecType_TrustClientIpHeadersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_MlConfigChoice interface {
	isReplaceSpecType_MlConfigChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_MaliciousUserDetectionChoice interface {
	isReplaceSpecType_MaliciousUserDetectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ApiDiscoveryChoice interface {
	isReplaceSpecType_ApiDiscoveryChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_BotDefenseChoice interface {
	isReplaceSpecType_BotDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_SensitiveDataPolicyChoice interface {
	isReplaceSpecType_SensitiveDataPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ApiDefinitionChoice interface {
	isReplaceSpecType_ApiDefinitionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_IpReputationChoice interface {
	isReplaceSpecType_IpReputationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ClientSideDefenseChoice interface {
	isReplaceSpecType_ClientSideDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_SlowDdosMitigationChoice interface {
	isReplaceSpecType_SlowDdosMitigationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ThreatMeshChoice interface {
	isReplaceSpecType_ThreatMeshChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_L7DdosAutoMitigationAction interface {
	isReplaceSpecType_L7DdosAutoMitigationAction()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Http struct {
	Http *ProxyTypeHttp `protobuf:"bytes,2,opt,name=http,proto3,oneof" json:"http,omitempty"`
}
type ReplaceSpecType_HttpsAutoCert struct {
	HttpsAutoCert *ProxyTypeHttpsAutoCerts `protobuf:"bytes,27,opt,name=https_auto_cert,json=httpsAutoCert,proto3,oneof" json:"https_auto_cert,omitempty"`
}
type ReplaceSpecType_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,3,opt,name=https,proto3,oneof" json:"https,omitempty"`
}
type ReplaceSpecType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,12,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type ReplaceSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,13,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type ReplaceSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type ReplaceSpecType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type ReplaceSpecType_DefaultPool struct {
	DefaultPool *origin_pool.GlobalSpecType `protobuf:"bytes,89,opt,name=default_pool,json=defaultPool,proto3,oneof" json:"default_pool,omitempty"`
}
type ReplaceSpecType_DefaultPoolList struct {
	DefaultPoolList *views.OriginPoolListType `protobuf:"bytes,90,opt,name=default_pool_list,json=defaultPoolList,proto3,oneof" json:"default_pool_list,omitempty"`
}
type ReplaceSpecType_DisableWaf struct {
	DisableWaf *schema.Empty `protobuf:"bytes,11,opt,name=disable_waf,json=disableWaf,proto3,oneof" json:"disable_waf,omitempty"`
}
type ReplaceSpecType_AppFirewall struct {
	AppFirewall *views.ObjectRefType `protobuf:"bytes,52,opt,name=app_firewall,json=appFirewall,proto3,oneof" json:"app_firewall,omitempty"`
}
type ReplaceSpecType_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,26,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type ReplaceSpecType_EnableChallenge struct {
	EnableChallenge *common_waf.EnableChallenge `protobuf:"bytes,95,opt,name=enable_challenge,json=enableChallenge,proto3,oneof" json:"enable_challenge,omitempty"`
}
type ReplaceSpecType_JsChallenge struct {
	JsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,18,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type ReplaceSpecType_CaptchaChallenge struct {
	CaptchaChallenge *virtual_host.CaptchaChallengeType `protobuf:"bytes,24,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type ReplaceSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *common_waf.PolicyBasedChallenge `protobuf:"bytes,51,opt,name=policy_based_challenge,json=policyBasedChallenge,proto3,oneof" json:"policy_based_challenge,omitempty"`
}
type ReplaceSpecType_UserIdClientIp struct {
	UserIdClientIp *schema.Empty `protobuf:"bytes,60,opt,name=user_id_client_ip,json=userIdClientIp,proto3,oneof" json:"user_id_client_ip,omitempty"`
}
type ReplaceSpecType_UserIdentification struct {
	UserIdentification *views.ObjectRefType `protobuf:"bytes,20,opt,name=user_identification,json=userIdentification,proto3,oneof" json:"user_identification,omitempty"`
}
type ReplaceSpecType_DisableRateLimit struct {
	DisableRateLimit *schema.Empty `protobuf:"bytes,22,opt,name=disable_rate_limit,json=disableRateLimit,proto3,oneof" json:"disable_rate_limit,omitempty"`
}
type ReplaceSpecType_ApiRateLimit struct {
	ApiRateLimit *common_waf.APIRateLimit `protobuf:"bytes,120,opt,name=api_rate_limit,json=apiRateLimit,proto3,oneof" json:"api_rate_limit,omitempty"`
}
type ReplaceSpecType_RateLimit struct {
	RateLimit *common_waf.RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,proto3,oneof" json:"rate_limit,omitempty"`
}
type ReplaceSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,41,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type ReplaceSpecType_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,42,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type ReplaceSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *common_waf.ServicePolicyList `protobuf:"bytes,43,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}
type ReplaceSpecType_RoundRobin struct {
	RoundRobin *schema.Empty `protobuf:"bytes,45,opt,name=round_robin,json=roundRobin,proto3,oneof" json:"round_robin,omitempty"`
}
type ReplaceSpecType_LeastActive struct {
	LeastActive *schema.Empty `protobuf:"bytes,46,opt,name=least_active,json=leastActive,proto3,oneof" json:"least_active,omitempty"`
}
type ReplaceSpecType_Random struct {
	Random *schema.Empty `protobuf:"bytes,47,opt,name=random,proto3,oneof" json:"random,omitempty"`
}
type ReplaceSpecType_SourceIpStickiness struct {
	SourceIpStickiness *schema.Empty `protobuf:"bytes,48,opt,name=source_ip_stickiness,json=sourceIpStickiness,proto3,oneof" json:"source_ip_stickiness,omitempty"`
}
type ReplaceSpecType_CookieStickiness struct {
	CookieStickiness *route.CookieForHashing `protobuf:"bytes,49,opt,name=cookie_stickiness,json=cookieStickiness,proto3,oneof" json:"cookie_stickiness,omitempty"`
}
type ReplaceSpecType_RingHash struct {
	RingHash *HashPolicyListType `protobuf:"bytes,50,opt,name=ring_hash,json=ringHash,proto3,oneof" json:"ring_hash,omitempty"`
}
type ReplaceSpecType_DisableTrustClientIpHeaders struct {
	DisableTrustClientIpHeaders *schema.Empty `protobuf:"bytes,74,opt,name=disable_trust_client_ip_headers,json=disableTrustClientIpHeaders,proto3,oneof" json:"disable_trust_client_ip_headers,omitempty"`
}
type ReplaceSpecType_EnableTrustClientIpHeaders struct {
	EnableTrustClientIpHeaders *virtual_host.ClientIPHeaders `protobuf:"bytes,75,opt,name=enable_trust_client_ip_headers,json=enableTrustClientIpHeaders,proto3,oneof" json:"enable_trust_client_ip_headers,omitempty"`
}
type ReplaceSpecType_SingleLbApp struct {
	SingleLbApp *SingleLoadBalancerAppSetting `protobuf:"bytes,54,opt,name=single_lb_app,json=singleLbApp,proto3,oneof" json:"single_lb_app,omitempty"`
}
type ReplaceSpecType_MultiLbApp struct {
	MultiLbApp *schema.Empty `protobuf:"bytes,55,opt,name=multi_lb_app,json=multiLbApp,proto3,oneof" json:"multi_lb_app,omitempty"`
}
type ReplaceSpecType_EnableMaliciousUserDetection struct {
	EnableMaliciousUserDetection *schema.Empty `protobuf:"bytes,80,opt,name=enable_malicious_user_detection,json=enableMaliciousUserDetection,proto3,oneof" json:"enable_malicious_user_detection,omitempty"`
}
type ReplaceSpecType_DisableMaliciousUserDetection struct {
	DisableMaliciousUserDetection *schema.Empty `protobuf:"bytes,81,opt,name=disable_malicious_user_detection,json=disableMaliciousUserDetection,proto3,oneof" json:"disable_malicious_user_detection,omitempty"`
}
type ReplaceSpecType_EnableApiDiscovery struct {
	EnableApiDiscovery *common_waf.ApiDiscoverySetting `protobuf:"bytes,83,opt,name=enable_api_discovery,json=enableApiDiscovery,proto3,oneof" json:"enable_api_discovery,omitempty"`
}
type ReplaceSpecType_DisableApiDiscovery struct {
	DisableApiDiscovery *schema.Empty `protobuf:"bytes,84,opt,name=disable_api_discovery,json=disableApiDiscovery,proto3,oneof" json:"disable_api_discovery,omitempty"`
}
type ReplaceSpecType_DisableBotDefense struct {
	DisableBotDefense *schema.Empty `protobuf:"bytes,57,opt,name=disable_bot_defense,json=disableBotDefense,proto3,oneof" json:"disable_bot_defense,omitempty"`
}
type ReplaceSpecType_BotDefense struct {
	BotDefense *common_security.ShapeBotDefenseType `protobuf:"bytes,58,opt,name=bot_defense,json=botDefense,proto3,oneof" json:"bot_defense,omitempty"`
}
type ReplaceSpecType_BotDefenseAdvanced struct {
	BotDefenseAdvanced *common_security.BotDefenseAdvancedType `protobuf:"bytes,1011,opt,name=bot_defense_advanced,json=botDefenseAdvanced,proto3,oneof" json:"bot_defense_advanced,omitempty"`
}
type ReplaceSpecType_DefaultSensitiveDataPolicy struct {
	DefaultSensitiveDataPolicy *schema.Empty `protobuf:"bytes,131,opt,name=default_sensitive_data_policy,json=defaultSensitiveDataPolicy,proto3,oneof" json:"default_sensitive_data_policy,omitempty"`
}
type ReplaceSpecType_SensitiveDataPolicy struct {
	SensitiveDataPolicy *common_security.SensitiveDataPolicySettings `protobuf:"bytes,132,opt,name=sensitive_data_policy,json=sensitiveDataPolicy,proto3,oneof" json:"sensitive_data_policy,omitempty"`
}
type ReplaceSpecType_DisableApiDefinition struct {
	DisableApiDefinition *schema.Empty `protobuf:"bytes,70,opt,name=disable_api_definition,json=disableApiDefinition,proto3,oneof" json:"disable_api_definition,omitempty"`
}
type ReplaceSpecType_ApiDefinition struct {
	ApiDefinition *views.ObjectRefType `protobuf:"bytes,71,opt,name=api_definition,json=apiDefinition,proto3,oneof" json:"api_definition,omitempty"`
}
type ReplaceSpecType_ApiSpecification struct {
	ApiSpecification *common_waf.APISpecificationSettings `protobuf:"bytes,67,opt,name=api_specification,json=apiSpecification,proto3,oneof" json:"api_specification,omitempty"`
}
type ReplaceSpecType_ApiDefinitions struct {
	ApiDefinitions *common_waf.ApiDefinitionList `protobuf:"bytes,61,opt,name=api_definitions,json=apiDefinitions,proto3,oneof" json:"api_definitions,omitempty"`
}
type ReplaceSpecType_DisableIpReputation struct {
	DisableIpReputation *schema.Empty `protobuf:"bytes,65,opt,name=disable_ip_reputation,json=disableIpReputation,proto3,oneof" json:"disable_ip_reputation,omitempty"`
}
type ReplaceSpecType_EnableIpReputation struct {
	EnableIpReputation *common_waf.IPThreatCategoryListType `protobuf:"bytes,66,opt,name=enable_ip_reputation,json=enableIpReputation,proto3,oneof" json:"enable_ip_reputation,omitempty"`
}
type ReplaceSpecType_DisableClientSideDefense struct {
	DisableClientSideDefense *schema.Empty `protobuf:"bytes,86,opt,name=disable_client_side_defense,json=disableClientSideDefense,proto3,oneof" json:"disable_client_side_defense,omitempty"`
}
type ReplaceSpecType_ClientSideDefense struct {
	ClientSideDefense *common_security.ClientSideDefenseType `protobuf:"bytes,87,opt,name=client_side_defense,json=clientSideDefense,proto3,oneof" json:"client_side_defense,omitempty"`
}
type ReplaceSpecType_SystemDefaultTimeouts struct {
	SystemDefaultTimeouts *schema.Empty `protobuf:"bytes,97,opt,name=system_default_timeouts,json=systemDefaultTimeouts,proto3,oneof" json:"system_default_timeouts,omitempty"`
}
type ReplaceSpecType_SlowDdosMitigation struct {
	SlowDdosMitigation *virtual_host.SlowDDoSMitigation `protobuf:"bytes,94,opt,name=slow_ddos_mitigation,json=slowDdosMitigation,proto3,oneof" json:"slow_ddos_mitigation,omitempty"`
}
type ReplaceSpecType_DisableThreatMesh struct {
	DisableThreatMesh *schema.Empty `protobuf:"bytes,103,opt,name=disable_threat_mesh,json=disableThreatMesh,proto3,oneof" json:"disable_threat_mesh,omitempty"`
}
type ReplaceSpecType_EnableThreatMesh struct {
	EnableThreatMesh *schema.Empty `protobuf:"bytes,105,opt,name=enable_threat_mesh,json=enableThreatMesh,proto3,oneof" json:"enable_threat_mesh,omitempty"`
}
type ReplaceSpecType_L7DdosActionDefault struct {
	L7DdosActionDefault *schema.Empty `protobuf:"bytes,111,opt,name=l7_ddos_action_default,json=l7DdosActionDefault,proto3,oneof" json:"l7_ddos_action_default,omitempty"`
}
type ReplaceSpecType_L7DdosActionBlock struct {
	L7DdosActionBlock *schema.Empty `protobuf:"bytes,112,opt,name=l7_ddos_action_block,json=l7DdosActionBlock,proto3,oneof" json:"l7_ddos_action_block,omitempty"`
}
type ReplaceSpecType_L7DdosActionJsChallenge struct {
	L7DdosActionJsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,113,opt,name=l7_ddos_action_js_challenge,json=l7DdosActionJsChallenge,proto3,oneof" json:"l7_ddos_action_js_challenge,omitempty"`
}
type ReplaceSpecType_L7DdosActionNone struct {
	L7DdosActionNone *schema.Empty `protobuf:"bytes,114,opt,name=l7_ddos_action_none,json=l7DdosActionNone,proto3,oneof" json:"l7_ddos_action_none,omitempty"`
}

func (*ReplaceSpecType_Http) isReplaceSpecType_LoadbalancerType()                                  {}
func (*ReplaceSpecType_HttpsAutoCert) isReplaceSpecType_LoadbalancerType()                         {}
func (*ReplaceSpecType_Https) isReplaceSpecType_LoadbalancerType()                                 {}
func (*ReplaceSpecType_DoNotAdvertise) isReplaceSpecType_AdvertiseChoice()                         {}
func (*ReplaceSpecType_AdvertiseOnPublicDefaultVip) isReplaceSpecType_AdvertiseChoice()            {}
func (*ReplaceSpecType_AdvertiseOnPublic) isReplaceSpecType_AdvertiseChoice()                      {}
func (*ReplaceSpecType_AdvertiseCustom) isReplaceSpecType_AdvertiseChoice()                        {}
func (*ReplaceSpecType_DefaultPool) isReplaceSpecType_OriginPoolChoice()                           {}
func (*ReplaceSpecType_DefaultPoolList) isReplaceSpecType_OriginPoolChoice()                       {}
func (*ReplaceSpecType_DisableWaf) isReplaceSpecType_WafChoice()                                   {}
func (*ReplaceSpecType_AppFirewall) isReplaceSpecType_WafChoice()                                  {}
func (*ReplaceSpecType_NoChallenge) isReplaceSpecType_ChallengeType()                              {}
func (*ReplaceSpecType_EnableChallenge) isReplaceSpecType_ChallengeType()                          {}
func (*ReplaceSpecType_JsChallenge) isReplaceSpecType_ChallengeType()                              {}
func (*ReplaceSpecType_CaptchaChallenge) isReplaceSpecType_ChallengeType()                         {}
func (*ReplaceSpecType_PolicyBasedChallenge) isReplaceSpecType_ChallengeType()                     {}
func (*ReplaceSpecType_UserIdClientIp) isReplaceSpecType_UserIdChoice()                            {}
func (*ReplaceSpecType_UserIdentification) isReplaceSpecType_UserIdChoice()                        {}
func (*ReplaceSpecType_DisableRateLimit) isReplaceSpecType_RateLimitChoice()                       {}
func (*ReplaceSpecType_ApiRateLimit) isReplaceSpecType_RateLimitChoice()                           {}
func (*ReplaceSpecType_RateLimit) isReplaceSpecType_RateLimitChoice()                              {}
func (*ReplaceSpecType_ServicePoliciesFromNamespace) isReplaceSpecType_ServicePolicyChoice()       {}
func (*ReplaceSpecType_NoServicePolicies) isReplaceSpecType_ServicePolicyChoice()                  {}
func (*ReplaceSpecType_ActiveServicePolicies) isReplaceSpecType_ServicePolicyChoice()              {}
func (*ReplaceSpecType_RoundRobin) isReplaceSpecType_HashPolicyChoice()                            {}
func (*ReplaceSpecType_LeastActive) isReplaceSpecType_HashPolicyChoice()                           {}
func (*ReplaceSpecType_Random) isReplaceSpecType_HashPolicyChoice()                                {}
func (*ReplaceSpecType_SourceIpStickiness) isReplaceSpecType_HashPolicyChoice()                    {}
func (*ReplaceSpecType_CookieStickiness) isReplaceSpecType_HashPolicyChoice()                      {}
func (*ReplaceSpecType_RingHash) isReplaceSpecType_HashPolicyChoice()                              {}
func (*ReplaceSpecType_DisableTrustClientIpHeaders) isReplaceSpecType_TrustClientIpHeadersChoice() {}
func (*ReplaceSpecType_EnableTrustClientIpHeaders) isReplaceSpecType_TrustClientIpHeadersChoice()  {}
func (*ReplaceSpecType_SingleLbApp) isReplaceSpecType_MlConfigChoice()                             {}
func (*ReplaceSpecType_MultiLbApp) isReplaceSpecType_MlConfigChoice()                              {}
func (*ReplaceSpecType_EnableMaliciousUserDetection) isReplaceSpecType_MaliciousUserDetectionChoice() {
}
func (*ReplaceSpecType_DisableMaliciousUserDetection) isReplaceSpecType_MaliciousUserDetectionChoice() {
}
func (*ReplaceSpecType_EnableApiDiscovery) isReplaceSpecType_ApiDiscoveryChoice()                {}
func (*ReplaceSpecType_DisableApiDiscovery) isReplaceSpecType_ApiDiscoveryChoice()               {}
func (*ReplaceSpecType_DisableBotDefense) isReplaceSpecType_BotDefenseChoice()                   {}
func (*ReplaceSpecType_BotDefense) isReplaceSpecType_BotDefenseChoice()                          {}
func (*ReplaceSpecType_BotDefenseAdvanced) isReplaceSpecType_BotDefenseChoice()                  {}
func (*ReplaceSpecType_DefaultSensitiveDataPolicy) isReplaceSpecType_SensitiveDataPolicyChoice() {}
func (*ReplaceSpecType_SensitiveDataPolicy) isReplaceSpecType_SensitiveDataPolicyChoice()        {}
func (*ReplaceSpecType_DisableApiDefinition) isReplaceSpecType_ApiDefinitionChoice()             {}
func (*ReplaceSpecType_ApiDefinition) isReplaceSpecType_ApiDefinitionChoice()                    {}
func (*ReplaceSpecType_ApiSpecification) isReplaceSpecType_ApiDefinitionChoice()                 {}
func (*ReplaceSpecType_ApiDefinitions) isReplaceSpecType_ApiDefinitionChoice()                   {}
func (*ReplaceSpecType_DisableIpReputation) isReplaceSpecType_IpReputationChoice()               {}
func (*ReplaceSpecType_EnableIpReputation) isReplaceSpecType_IpReputationChoice()                {}
func (*ReplaceSpecType_DisableClientSideDefense) isReplaceSpecType_ClientSideDefenseChoice()     {}
func (*ReplaceSpecType_ClientSideDefense) isReplaceSpecType_ClientSideDefenseChoice()            {}
func (*ReplaceSpecType_SystemDefaultTimeouts) isReplaceSpecType_SlowDdosMitigationChoice()       {}
func (*ReplaceSpecType_SlowDdosMitigation) isReplaceSpecType_SlowDdosMitigationChoice()          {}
func (*ReplaceSpecType_DisableThreatMesh) isReplaceSpecType_ThreatMeshChoice()                   {}
func (*ReplaceSpecType_EnableThreatMesh) isReplaceSpecType_ThreatMeshChoice()                    {}
func (*ReplaceSpecType_L7DdosActionDefault) isReplaceSpecType_L7DdosAutoMitigationAction()       {}
func (*ReplaceSpecType_L7DdosActionBlock) isReplaceSpecType_L7DdosAutoMitigationAction()         {}
func (*ReplaceSpecType_L7DdosActionJsChallenge) isReplaceSpecType_L7DdosAutoMitigationAction()   {}
func (*ReplaceSpecType_L7DdosActionNone) isReplaceSpecType_L7DdosAutoMitigationAction()          {}

func (m *ReplaceSpecType) GetLoadbalancerType() isReplaceSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *ReplaceSpecType) GetAdvertiseChoice() isReplaceSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetOriginPoolChoice() isReplaceSpecType_OriginPoolChoice {
	if m != nil {
		return m.OriginPoolChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetWafChoice() isReplaceSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetChallengeType() isReplaceSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *ReplaceSpecType) GetUserIdChoice() isReplaceSpecType_UserIdChoice {
	if m != nil {
		return m.UserIdChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetRateLimitChoice() isReplaceSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetServicePolicyChoice() isReplaceSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetHashPolicyChoice() isReplaceSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetTrustClientIpHeadersChoice() isReplaceSpecType_TrustClientIpHeadersChoice {
	if m != nil {
		return m.TrustClientIpHeadersChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetMlConfigChoice() isReplaceSpecType_MlConfigChoice {
	if m != nil {
		return m.MlConfigChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetMaliciousUserDetectionChoice() isReplaceSpecType_MaliciousUserDetectionChoice {
	if m != nil {
		return m.MaliciousUserDetectionChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetApiDiscoveryChoice() isReplaceSpecType_ApiDiscoveryChoice {
	if m != nil {
		return m.ApiDiscoveryChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetBotDefenseChoice() isReplaceSpecType_BotDefenseChoice {
	if m != nil {
		return m.BotDefenseChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetSensitiveDataPolicyChoice() isReplaceSpecType_SensitiveDataPolicyChoice {
	if m != nil {
		return m.SensitiveDataPolicyChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetApiDefinitionChoice() isReplaceSpecType_ApiDefinitionChoice {
	if m != nil {
		return m.ApiDefinitionChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetIpReputationChoice() isReplaceSpecType_IpReputationChoice {
	if m != nil {
		return m.IpReputationChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetClientSideDefenseChoice() isReplaceSpecType_ClientSideDefenseChoice {
	if m != nil {
		return m.ClientSideDefenseChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetSlowDdosMitigationChoice() isReplaceSpecType_SlowDdosMitigationChoice {
	if m != nil {
		return m.SlowDdosMitigationChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetThreatMeshChoice() isReplaceSpecType_ThreatMeshChoice {
	if m != nil {
		return m.ThreatMeshChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetL7DdosAutoMitigationAction() isReplaceSpecType_L7DdosAutoMitigationAction {
	if m != nil {
		return m.L7DdosAutoMitigationAction
	}
	return nil
}

func (m *ReplaceSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *ReplaceSpecType) GetHttp() *ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpsAutoCert() *ProxyTypeHttpsAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *ReplaceSpecType) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *ReplaceSpecType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultRoutePools() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.DefaultRoutePools
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultPool() *origin_pool.GlobalSpecType {
	if x, ok := m.GetOriginPoolChoice().(*ReplaceSpecType_DefaultPool); ok {
		return x.DefaultPool
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultPoolList() *views.OriginPoolListType {
	if x, ok := m.GetOriginPoolChoice().(*ReplaceSpecType_DefaultPoolList); ok {
		return x.DefaultPoolList
	}
	return nil
}

func (m *ReplaceSpecType) GetOriginServerSubsetRuleList() *OriginServerSubsetRuleListType {
	if m != nil {
		return m.OriginServerSubsetRuleList
	}
	return nil
}

func (m *ReplaceSpecType) GetRoutes() []*RouteType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *ReplaceSpecType) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableWaf() *schema.Empty {
	if x, ok := m.GetWafChoice().(*ReplaceSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *ReplaceSpecType) GetAppFirewall() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*ReplaceSpecType_AppFirewall); ok {
		return x.AppFirewall
	}
	return nil
}

func (m *ReplaceSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *ReplaceSpecType) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableChallenge() *common_waf.EnableChallenge {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_EnableChallenge); ok {
		return x.EnableChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetCaptchaChallenge() *virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetPolicyBasedChallenge() *common_waf.PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *ReplaceSpecType) GetUserIdClientIp() *schema.Empty {
	if x, ok := m.GetUserIdChoice().(*ReplaceSpecType_UserIdClientIp); ok {
		return x.UserIdClientIp
	}
	return nil
}

func (m *ReplaceSpecType) GetUserIdentification() *views.ObjectRefType {
	if x, ok := m.GetUserIdChoice().(*ReplaceSpecType_UserIdentification); ok {
		return x.UserIdentification
	}
	return nil
}

func (m *ReplaceSpecType) GetApiRateLimitLegacy() *common_waf.APIRateLimitLegacy {
	if m != nil {
		return m.ApiRateLimitLegacy
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableRateLimit() *schema.Empty {
	if x, ok := m.GetRateLimitChoice().(*ReplaceSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *ReplaceSpecType) GetApiRateLimit() *common_waf.APIRateLimit {
	if x, ok := m.GetRateLimitChoice().(*ReplaceSpecType_ApiRateLimit); ok {
		return x.ApiRateLimit
	}
	return nil
}

func (m *ReplaceSpecType) GetRateLimit() *common_waf.RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*ReplaceSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *ReplaceSpecType) GetMaliciousUserMitigation() *views.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *ReplaceSpecType) GetWafExclusionRules() []*policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *ReplaceSpecType) GetDataGuardRules() []*policy.SimpleDataGuardRule {
	if m != nil {
		return m.DataGuardRules
	}
	return nil
}

func (m *ReplaceSpecType) GetBlockedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *ReplaceSpecType) GetTrustedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *ReplaceSpecType) GetApiProtectionRules() *common_waf.APIProtectionRules {
	if m != nil {
		return m.ApiProtectionRules
	}
	return nil
}

func (m *ReplaceSpecType) GetDdosMitigationRules() []*common_security.DDoSMitigationRule {
	if m != nil {
		return m.DdosMitigationRules
	}
	return nil
}

func (m *ReplaceSpecType) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*ReplaceSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *ReplaceSpecType) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*ReplaceSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *ReplaceSpecType) GetActiveServicePolicies() *common_waf.ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*ReplaceSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *ReplaceSpecType) GetRoundRobin() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_RoundRobin); ok {
		return x.RoundRobin
	}
	return nil
}

func (m *ReplaceSpecType) GetLeastActive() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_LeastActive); ok {
		return x.LeastActive
	}
	return nil
}

func (m *ReplaceSpecType) GetRandom() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_Random); ok {
		return x.Random
	}
	return nil
}

func (m *ReplaceSpecType) GetSourceIpStickiness() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_SourceIpStickiness); ok {
		return x.SourceIpStickiness
	}
	return nil
}

func (m *ReplaceSpecType) GetCookieStickiness() *route.CookieForHashing {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_CookieStickiness); ok {
		return x.CookieStickiness
	}
	return nil
}

func (m *ReplaceSpecType) GetRingHash() *HashPolicyListType {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_RingHash); ok {
		return x.RingHash
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableTrustClientIpHeaders() *schema.Empty {
	if x, ok := m.GetTrustClientIpHeadersChoice().(*ReplaceSpecType_DisableTrustClientIpHeaders); ok {
		return x.DisableTrustClientIpHeaders
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableTrustClientIpHeaders() *virtual_host.ClientIPHeaders {
	if x, ok := m.GetTrustClientIpHeadersChoice().(*ReplaceSpecType_EnableTrustClientIpHeaders); ok {
		return x.EnableTrustClientIpHeaders
	}
	return nil
}

func (m *ReplaceSpecType) GetSingleLbApp() *SingleLoadBalancerAppSetting {
	if x, ok := m.GetMlConfigChoice().(*ReplaceSpecType_SingleLbApp); ok {
		return x.SingleLbApp
	}
	return nil
}

func (m *ReplaceSpecType) GetMultiLbApp() *schema.Empty {
	if x, ok := m.GetMlConfigChoice().(*ReplaceSpecType_MultiLbApp); ok {
		return x.MultiLbApp
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*ReplaceSpecType_EnableMaliciousUserDetection); ok {
		return x.EnableMaliciousUserDetection
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*ReplaceSpecType_DisableMaliciousUserDetection); ok {
		return x.DisableMaliciousUserDetection
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableApiDiscovery() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*ReplaceSpecType_EnableApiDiscovery); ok {
		return x.EnableApiDiscovery
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableApiDiscovery() *schema.Empty {
	if x, ok := m.GetApiDiscoveryChoice().(*ReplaceSpecType_DisableApiDiscovery); ok {
		return x.DisableApiDiscovery
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableBotDefense() *schema.Empty {
	if x, ok := m.GetBotDefenseChoice().(*ReplaceSpecType_DisableBotDefense); ok {
		return x.DisableBotDefense
	}
	return nil
}

func (m *ReplaceSpecType) GetBotDefense() *common_security.ShapeBotDefenseType {
	if x, ok := m.GetBotDefenseChoice().(*ReplaceSpecType_BotDefense); ok {
		return x.BotDefense
	}
	return nil
}

func (m *ReplaceSpecType) GetBotDefenseAdvanced() *common_security.BotDefenseAdvancedType {
	if x, ok := m.GetBotDefenseChoice().(*ReplaceSpecType_BotDefenseAdvanced); ok {
		return x.BotDefenseAdvanced
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultSensitiveDataPolicy() *schema.Empty {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*ReplaceSpecType_DefaultSensitiveDataPolicy); ok {
		return x.DefaultSensitiveDataPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetSensitiveDataPolicy() *common_security.SensitiveDataPolicySettings {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*ReplaceSpecType_SensitiveDataPolicy); ok {
		return x.SensitiveDataPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableApiDefinition() *schema.Empty {
	if x, ok := m.GetApiDefinitionChoice().(*ReplaceSpecType_DisableApiDefinition); ok {
		return x.DisableApiDefinition
	}
	return nil
}

func (m *ReplaceSpecType) GetApiDefinition() *views.ObjectRefType {
	if x, ok := m.GetApiDefinitionChoice().(*ReplaceSpecType_ApiDefinition); ok {
		return x.ApiDefinition
	}
	return nil
}

func (m *ReplaceSpecType) GetApiSpecification() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*ReplaceSpecType_ApiSpecification); ok {
		return x.ApiSpecification
	}
	return nil
}

func (m *ReplaceSpecType) GetApiDefinitions() *common_waf.ApiDefinitionList {
	if x, ok := m.GetApiDefinitionChoice().(*ReplaceSpecType_ApiDefinitions); ok {
		return x.ApiDefinitions
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableIpReputation() *schema.Empty {
	if x, ok := m.GetIpReputationChoice().(*ReplaceSpecType_DisableIpReputation); ok {
		return x.DisableIpReputation
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableIpReputation() *common_waf.IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*ReplaceSpecType_EnableIpReputation); ok {
		return x.EnableIpReputation
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableClientSideDefense() *schema.Empty {
	if x, ok := m.GetClientSideDefenseChoice().(*ReplaceSpecType_DisableClientSideDefense); ok {
		return x.DisableClientSideDefense
	}
	return nil
}

func (m *ReplaceSpecType) GetClientSideDefense() *common_security.ClientSideDefenseType {
	if x, ok := m.GetClientSideDefenseChoice().(*ReplaceSpecType_ClientSideDefense); ok {
		return x.ClientSideDefense
	}
	return nil
}

func (m *ReplaceSpecType) GetCsrfPolicy() *schema.CsrfPolicy {
	if m != nil {
		return m.CsrfPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetGraphqlRules() []*policy.GraphQLRule {
	if m != nil {
		return m.GraphqlRules
	}
	return nil
}

func (m *ReplaceSpecType) GetProtectedCookies() []*schema.CookieManipulationOptionType {
	if m != nil {
		return m.ProtectedCookies
	}
	return nil
}

func (m *ReplaceSpecType) GetSystemDefaultTimeouts() *schema.Empty {
	if x, ok := m.GetSlowDdosMitigationChoice().(*ReplaceSpecType_SystemDefaultTimeouts); ok {
		return x.SystemDefaultTimeouts
	}
	return nil
}

func (m *ReplaceSpecType) GetSlowDdosMitigation() *virtual_host.SlowDDoSMitigation {
	if x, ok := m.GetSlowDdosMitigationChoice().(*ReplaceSpecType_SlowDdosMitigation); ok {
		return x.SlowDdosMitigation
	}
	return nil
}

func (m *ReplaceSpecType) GetJwtValidation() *common_waf.JWTValidation {
	if m != nil {
		return m.JwtValidation
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*ReplaceSpecType_DisableThreatMesh); ok {
		return x.DisableThreatMesh
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*ReplaceSpecType_EnableThreatMesh); ok {
		return x.EnableThreatMesh
	}
	return nil
}

func (m *ReplaceSpecType) GetL7DdosActionDefault() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*ReplaceSpecType_L7DdosActionDefault); ok {
		return x.L7DdosActionDefault
	}
	return nil
}

func (m *ReplaceSpecType) GetL7DdosActionBlock() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*ReplaceSpecType_L7DdosActionBlock); ok {
		return x.L7DdosActionBlock
	}
	return nil
}

func (m *ReplaceSpecType) GetL7DdosActionJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*ReplaceSpecType_L7DdosActionJsChallenge); ok {
		return x.L7DdosActionJsChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetL7DdosActionNone() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*ReplaceSpecType_L7DdosActionNone); ok {
		return x.L7DdosActionNone
	}
	return nil
}

func (m *ReplaceSpecType) GetSensitiveDataDisclosureRules() *SensitiveDataDisclosureRules {
	if m != nil {
		return m.SensitiveDataDisclosureRules
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_Http)(nil),
		(*ReplaceSpecType_HttpsAutoCert)(nil),
		(*ReplaceSpecType_Https)(nil),
		(*ReplaceSpecType_DoNotAdvertise)(nil),
		(*ReplaceSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*ReplaceSpecType_AdvertiseOnPublic)(nil),
		(*ReplaceSpecType_AdvertiseCustom)(nil),
		(*ReplaceSpecType_DefaultPool)(nil),
		(*ReplaceSpecType_DefaultPoolList)(nil),
		(*ReplaceSpecType_DisableWaf)(nil),
		(*ReplaceSpecType_AppFirewall)(nil),
		(*ReplaceSpecType_NoChallenge)(nil),
		(*ReplaceSpecType_EnableChallenge)(nil),
		(*ReplaceSpecType_JsChallenge)(nil),
		(*ReplaceSpecType_CaptchaChallenge)(nil),
		(*ReplaceSpecType_PolicyBasedChallenge)(nil),
		(*ReplaceSpecType_UserIdClientIp)(nil),
		(*ReplaceSpecType_UserIdentification)(nil),
		(*ReplaceSpecType_DisableRateLimit)(nil),
		(*ReplaceSpecType_ApiRateLimit)(nil),
		(*ReplaceSpecType_RateLimit)(nil),
		(*ReplaceSpecType_ServicePoliciesFromNamespace)(nil),
		(*ReplaceSpecType_NoServicePolicies)(nil),
		(*ReplaceSpecType_ActiveServicePolicies)(nil),
		(*ReplaceSpecType_RoundRobin)(nil),
		(*ReplaceSpecType_LeastActive)(nil),
		(*ReplaceSpecType_Random)(nil),
		(*ReplaceSpecType_SourceIpStickiness)(nil),
		(*ReplaceSpecType_CookieStickiness)(nil),
		(*ReplaceSpecType_RingHash)(nil),
		(*ReplaceSpecType_DisableTrustClientIpHeaders)(nil),
		(*ReplaceSpecType_EnableTrustClientIpHeaders)(nil),
		(*ReplaceSpecType_SingleLbApp)(nil),
		(*ReplaceSpecType_MultiLbApp)(nil),
		(*ReplaceSpecType_EnableMaliciousUserDetection)(nil),
		(*ReplaceSpecType_DisableMaliciousUserDetection)(nil),
		(*ReplaceSpecType_EnableApiDiscovery)(nil),
		(*ReplaceSpecType_DisableApiDiscovery)(nil),
		(*ReplaceSpecType_DisableBotDefense)(nil),
		(*ReplaceSpecType_BotDefense)(nil),
		(*ReplaceSpecType_BotDefenseAdvanced)(nil),
		(*ReplaceSpecType_DefaultSensitiveDataPolicy)(nil),
		(*ReplaceSpecType_SensitiveDataPolicy)(nil),
		(*ReplaceSpecType_DisableApiDefinition)(nil),
		(*ReplaceSpecType_ApiDefinition)(nil),
		(*ReplaceSpecType_ApiSpecification)(nil),
		(*ReplaceSpecType_ApiDefinitions)(nil),
		(*ReplaceSpecType_DisableIpReputation)(nil),
		(*ReplaceSpecType_EnableIpReputation)(nil),
		(*ReplaceSpecType_DisableClientSideDefense)(nil),
		(*ReplaceSpecType_ClientSideDefense)(nil),
		(*ReplaceSpecType_SystemDefaultTimeouts)(nil),
		(*ReplaceSpecType_SlowDdosMitigation)(nil),
		(*ReplaceSpecType_DisableThreatMesh)(nil),
		(*ReplaceSpecType_EnableThreatMesh)(nil),
		(*ReplaceSpecType_L7DdosActionDefault)(nil),
		(*ReplaceSpecType_L7DdosActionBlock)(nil),
		(*ReplaceSpecType_L7DdosActionJsChallenge)(nil),
		(*ReplaceSpecType_L7DdosActionNone)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get HTTP Load Balancer"
// Shape of the HTTP load balancer specification
type GetSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Types that are valid to be assigned to LoadbalancerType:
	//
	//	*GetSpecType_Http
	//	*GetSpecType_HttpsAutoCert
	//	*GetSpecType_Https
	LoadbalancerType                             isGetSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	DownstreamTlsCertificateExpirationTimestamps []*types.Timestamp             `protobuf:"bytes,62,rep,name=downstream_tls_certificate_expiration_timestamps,json=downstreamTlsCertificateExpirationTimestamps,proto3" json:"downstream_tls_certificate_expiration_timestamps,omitempty"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//
	//	*GetSpecType_DoNotAdvertise
	//	*GetSpecType_AdvertiseOnPublicDefaultVip
	//	*GetSpecType_AdvertiseOnPublic
	//	*GetSpecType_AdvertiseCustom
	AdvertiseChoice   isGetSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	DefaultRoutePools []*views.OriginPoolWithWeight `protobuf:"bytes,6,rep,name=default_route_pools,json=defaultRoutePools,proto3" json:"default_route_pools,omitempty"`
	// Types that are valid to be assigned to OriginPoolChoice:
	//
	//	*GetSpecType_DefaultPool
	//	*GetSpecType_DefaultPoolList
	OriginPoolChoice           isGetSpecType_OriginPoolChoice  `protobuf_oneof:"origin_pool_choice"`
	OriginServerSubsetRuleList *OriginServerSubsetRuleListType `protobuf:"bytes,101,opt,name=origin_server_subset_rule_list,json=originServerSubsetRuleList,proto3" json:"origin_server_subset_rule_list,omitempty"`
	Routes                     []*RouteType                    `protobuf:"bytes,7,rep,name=routes,proto3" json:"routes,omitempty"`
	CorsPolicy                 *schema.CorsPolicy              `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// Types that are valid to be assigned to WafChoice:
	//
	//	*GetSpecType_DisableWaf
	//	*GetSpecType_AppFirewall
	WafChoice   isGetSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	AddLocation bool                    `protobuf:"varint,17,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//
	//	*GetSpecType_NoChallenge
	//	*GetSpecType_EnableChallenge
	//	*GetSpecType_JsChallenge
	//	*GetSpecType_CaptchaChallenge
	//	*GetSpecType_PolicyBasedChallenge
	ChallengeType isGetSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	MoreOption    *AdvancedOptionsType        `protobuf:"bytes,19,opt,name=more_option,json=moreOption,proto3" json:"more_option,omitempty"`
	// Types that are valid to be assigned to UserIdChoice:
	//
	//	*GetSpecType_UserIdClientIp
	//	*GetSpecType_UserIdentification
	UserIdChoice       isGetSpecType_UserIdChoice     `protobuf_oneof:"user_id_choice"`
	ApiRateLimitLegacy *common_waf.APIRateLimitLegacy `protobuf:"bytes,68,opt,name=api_rate_limit_legacy,json=apiRateLimitLegacy,proto3" json:"api_rate_limit_legacy,omitempty"`
	// Types that are valid to be assigned to RateLimitChoice:
	//
	//	*GetSpecType_DisableRateLimit
	//	*GetSpecType_ApiRateLimit
	//	*GetSpecType_RateLimit
	RateLimitChoice         isGetSpecType_RateLimitChoice         `protobuf_oneof:"rate_limit_choice"`
	MaliciousUserMitigation *views.ObjectRefType                  `protobuf:"bytes,32,opt,name=malicious_user_mitigation,json=maliciousUserMitigation,proto3" json:"malicious_user_mitigation,omitempty"`
	WafExclusionRules       []*policy.SimpleWafExclusionRule      `protobuf:"bytes,33,rep,name=waf_exclusion_rules,json=wafExclusionRules,proto3" json:"waf_exclusion_rules,omitempty"`
	DataGuardRules          []*policy.SimpleDataGuardRule         `protobuf:"bytes,63,rep,name=data_guard_rules,json=dataGuardRules,proto3" json:"data_guard_rules,omitempty"`
	BlockedClients          []*common_waf.SimpleClientSrcRule     `protobuf:"bytes,34,rep,name=blocked_clients,json=blockedClients,proto3" json:"blocked_clients,omitempty"`
	TrustedClients          []*common_waf.SimpleClientSrcRule     `protobuf:"bytes,35,rep,name=trusted_clients,json=trustedClients,proto3" json:"trusted_clients,omitempty"`
	ApiProtectionRules      *common_waf.APIProtectionRules        `protobuf:"bytes,72,opt,name=api_protection_rules,json=apiProtectionRules,proto3" json:"api_protection_rules,omitempty"`
	DdosMitigationRules     []*common_security.DDoSMitigationRule `protobuf:"bytes,37,rep,name=ddos_mitigation_rules,json=ddosMitigationRules,proto3" json:"ddos_mitigation_rules,omitempty"`
	// Types that are valid to be assigned to ServicePolicyChoice:
	//
	//	*GetSpecType_ServicePoliciesFromNamespace
	//	*GetSpecType_NoServicePolicies
	//	*GetSpecType_ActiveServicePolicies
	ServicePolicyChoice isGetSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//
	//	*GetSpecType_RoundRobin
	//	*GetSpecType_LeastActive
	//	*GetSpecType_Random
	//	*GetSpecType_SourceIpStickiness
	//	*GetSpecType_CookieStickiness
	//	*GetSpecType_RingHash
	HashPolicyChoice isGetSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	// Types that are valid to be assigned to TrustClientIpHeadersChoice:
	//
	//	*GetSpecType_DisableTrustClientIpHeaders
	//	*GetSpecType_EnableTrustClientIpHeaders
	TrustClientIpHeadersChoice isGetSpecType_TrustClientIpHeadersChoice `protobuf_oneof:"trust_client_ip_headers_choice"`
	// Types that are valid to be assigned to MlConfigChoice:
	//
	//	*GetSpecType_SingleLbApp
	//	*GetSpecType_MultiLbApp
	MlConfigChoice isGetSpecType_MlConfigChoice `protobuf_oneof:"ml_config_choice"`
	// Types that are valid to be assigned to MaliciousUserDetectionChoice:
	//
	//	*GetSpecType_EnableMaliciousUserDetection
	//	*GetSpecType_DisableMaliciousUserDetection
	MaliciousUserDetectionChoice isGetSpecType_MaliciousUserDetectionChoice `protobuf_oneof:"malicious_user_detection_choice"`
	// Types that are valid to be assigned to ApiDiscoveryChoice:
	//
	//	*GetSpecType_EnableApiDiscovery
	//	*GetSpecType_DisableApiDiscovery
	ApiDiscoveryChoice isGetSpecType_ApiDiscoveryChoice `protobuf_oneof:"api_discovery_choice"`
	// Types that are valid to be assigned to BotDefenseChoice:
	//
	//	*GetSpecType_DisableBotDefense
	//	*GetSpecType_BotDefense
	//	*GetSpecType_BotDefenseAdvanced
	BotDefenseChoice isGetSpecType_BotDefenseChoice `protobuf_oneof:"bot_defense_choice"`
	// Types that are valid to be assigned to SensitiveDataPolicyChoice:
	//
	//	*GetSpecType_DefaultSensitiveDataPolicy
	//	*GetSpecType_SensitiveDataPolicy
	SensitiveDataPolicyChoice isGetSpecType_SensitiveDataPolicyChoice `protobuf_oneof:"sensitive_data_policy_choice"`
	// Types that are valid to be assigned to ApiDefinitionChoice:
	//
	//	*GetSpecType_DisableApiDefinition
	//	*GetSpecType_ApiDefinition
	//	*GetSpecType_ApiSpecification
	//	*GetSpecType_ApiDefinitions
	ApiDefinitionChoice isGetSpecType_ApiDefinitionChoice `protobuf_oneof:"api_definition_choice"`
	// Types that are valid to be assigned to IpReputationChoice:
	//
	//	*GetSpecType_DisableIpReputation
	//	*GetSpecType_EnableIpReputation
	IpReputationChoice isGetSpecType_IpReputationChoice `protobuf_oneof:"ip_reputation_choice"`
	// Types that are valid to be assigned to ClientSideDefenseChoice:
	//
	//	*GetSpecType_DisableClientSideDefense
	//	*GetSpecType_ClientSideDefense
	ClientSideDefenseChoice isGetSpecType_ClientSideDefenseChoice  `protobuf_oneof:"client_side_defense_choice"`
	CsrfPolicy              *schema.CsrfPolicy                     `protobuf:"bytes,91,opt,name=csrf_policy,json=csrfPolicy,proto3" json:"csrf_policy,omitempty"`
	GraphqlRules            []*policy.GraphQLRule                  `protobuf:"bytes,92,rep,name=graphql_rules,json=graphqlRules,proto3" json:"graphql_rules,omitempty"`
	ProtectedCookies        []*schema.CookieManipulationOptionType `protobuf:"bytes,93,rep,name=protected_cookies,json=protectedCookies,proto3" json:"protected_cookies,omitempty"`
	HostName                string                                 `protobuf:"bytes,1001,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	DnsInfo                 []*virtual_host_dns_info.DnsInfo       `protobuf:"bytes,1002,rep,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`
	State                   virtual_host.VirtualHostState          `protobuf:"varint,1003,opt,name=state,proto3,enum=ves.io.schema.virtual_host.VirtualHostState" json:"state,omitempty"`
	AutoCertInfo            *virtual_host.AutoCertInfoType         `protobuf:"bytes,1010,opt,name=auto_cert_info,json=autoCertInfo,proto3" json:"auto_cert_info,omitempty"`
	InternetVipInfo         []*views.InternetVIPInfo               `protobuf:"bytes,1100,rep,name=internet_vip_info,json=internetVipInfo,proto3" json:"internet_vip_info,omitempty"`
	// Types that are valid to be assigned to SlowDdosMitigationChoice:
	//
	//	*GetSpecType_SystemDefaultTimeouts
	//	*GetSpecType_SlowDdosMitigation
	SlowDdosMitigationChoice isGetSpecType_SlowDdosMitigationChoice `protobuf_oneof:"slow_ddos_mitigation_choice"`
	JwtValidation            *common_waf.JWTValidation              `protobuf:"bytes,98,opt,name=jwt_validation,json=jwtValidation,proto3" json:"jwt_validation,omitempty"`
	// Types that are valid to be assigned to ThreatMeshChoice:
	//
	//	*GetSpecType_DisableThreatMesh
	//	*GetSpecType_EnableThreatMesh
	ThreatMeshChoice isGetSpecType_ThreatMeshChoice `protobuf_oneof:"threat_mesh_choice"`
	// Types that are valid to be assigned to L7DdosAutoMitigationAction:
	//
	//	*GetSpecType_L7DdosActionDefault
	//	*GetSpecType_L7DdosActionBlock
	//	*GetSpecType_L7DdosActionJsChallenge
	//	*GetSpecType_L7DdosActionNone
	L7DdosAutoMitigationAction   isGetSpecType_L7DdosAutoMitigationAction `protobuf_oneof:"l7_ddos_auto_mitigation_action"`
	CertState                    virtual_host.CertificationState          `protobuf:"varint,115,opt,name=cert_state,json=certState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"cert_state,omitempty"`
	SensitiveDataDisclosureRules *SensitiveDataDisclosureRules            `protobuf:"bytes,116,opt,name=sensitive_data_disclosure_rules,json=sensitiveDataDisclosureRules,proto3" json:"sensitive_data_disclosure_rules,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{21}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_LoadbalancerType interface {
	isGetSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_AdvertiseChoice interface {
	isGetSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_OriginPoolChoice interface {
	isGetSpecType_OriginPoolChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_WafChoice interface {
	isGetSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ChallengeType interface {
	isGetSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_UserIdChoice interface {
	isGetSpecType_UserIdChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_RateLimitChoice interface {
	isGetSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ServicePolicyChoice interface {
	isGetSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_HashPolicyChoice interface {
	isGetSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_TrustClientIpHeadersChoice interface {
	isGetSpecType_TrustClientIpHeadersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_MlConfigChoice interface {
	isGetSpecType_MlConfigChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_MaliciousUserDetectionChoice interface {
	isGetSpecType_MaliciousUserDetectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ApiDiscoveryChoice interface {
	isGetSpecType_ApiDiscoveryChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_BotDefenseChoice interface {
	isGetSpecType_BotDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_SensitiveDataPolicyChoice interface {
	isGetSpecType_SensitiveDataPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ApiDefinitionChoice interface {
	isGetSpecType_ApiDefinitionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_IpReputationChoice interface {
	isGetSpecType_IpReputationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ClientSideDefenseChoice interface {
	isGetSpecType_ClientSideDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_SlowDdosMitigationChoice interface {
	isGetSpecType_SlowDdosMitigationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ThreatMeshChoice interface {
	isGetSpecType_ThreatMeshChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_L7DdosAutoMitigationAction interface {
	isGetSpecType_L7DdosAutoMitigationAction()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Http struct {
	Http *ProxyTypeHttp `protobuf:"bytes,2,opt,name=http,proto3,oneof" json:"http,omitempty"`
}
type GetSpecType_HttpsAutoCert struct {
	HttpsAutoCert *ProxyTypeHttpsAutoCerts `protobuf:"bytes,27,opt,name=https_auto_cert,json=httpsAutoCert,proto3,oneof" json:"https_auto_cert,omitempty"`
}
type GetSpecType_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,3,opt,name=https,proto3,oneof" json:"https,omitempty"`
}
type GetSpecType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,12,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type GetSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,13,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type GetSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type GetSpecType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type GetSpecType_DefaultPool struct {
	DefaultPool *origin_pool.GlobalSpecType `protobuf:"bytes,89,opt,name=default_pool,json=defaultPool,proto3,oneof" json:"default_pool,omitempty"`
}
type GetSpecType_DefaultPoolList struct {
	DefaultPoolList *views.OriginPoolListType `protobuf:"bytes,90,opt,name=default_pool_list,json=defaultPoolList,proto3,oneof" json:"default_pool_list,omitempty"`
}
type GetSpecType_DisableWaf struct {
	DisableWaf *schema.Empty `protobuf:"bytes,11,opt,name=disable_waf,json=disableWaf,proto3,oneof" json:"disable_waf,omitempty"`
}
type GetSpecType_AppFirewall struct {
	AppFirewall *views.ObjectRefType `protobuf:"bytes,52,opt,name=app_firewall,json=appFirewall,proto3,oneof" json:"app_firewall,omitempty"`
}
type GetSpecType_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,26,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type GetSpecType_EnableChallenge struct {
	EnableChallenge *common_waf.EnableChallenge `protobuf:"bytes,95,opt,name=enable_challenge,json=enableChallenge,proto3,oneof" json:"enable_challenge,omitempty"`
}
type GetSpecType_JsChallenge struct {
	JsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,18,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type GetSpecType_CaptchaChallenge struct {
	CaptchaChallenge *virtual_host.CaptchaChallengeType `protobuf:"bytes,24,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type GetSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *common_waf.PolicyBasedChallenge `protobuf:"bytes,51,opt,name=policy_based_challenge,json=policyBasedChallenge,proto3,oneof" json:"policy_based_challenge,omitempty"`
}
type GetSpecType_UserIdClientIp struct {
	UserIdClientIp *schema.Empty `protobuf:"bytes,60,opt,name=user_id_client_ip,json=userIdClientIp,proto3,oneof" json:"user_id_client_ip,omitempty"`
}
type GetSpecType_UserIdentification struct {
	UserIdentification *views.ObjectRefType `protobuf:"bytes,20,opt,name=user_identification,json=userIdentification,proto3,oneof" json:"user_identification,omitempty"`
}
type GetSpecType_DisableRateLimit struct {
	DisableRateLimit *schema.Empty `protobuf:"bytes,22,opt,name=disable_rate_limit,json=disableRateLimit,proto3,oneof" json:"disable_rate_limit,omitempty"`
}
type GetSpecType_ApiRateLimit struct {
	ApiRateLimit *common_waf.APIRateLimit `protobuf:"bytes,120,opt,name=api_rate_limit,json=apiRateLimit,proto3,oneof" json:"api_rate_limit,omitempty"`
}
type GetSpecType_RateLimit struct {
	RateLimit *common_waf.RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,proto3,oneof" json:"rate_limit,omitempty"`
}
type GetSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,41,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type GetSpecType_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,42,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type GetSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *common_waf.ServicePolicyList `protobuf:"bytes,43,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}
type GetSpecType_RoundRobin struct {
	RoundRobin *schema.Empty `protobuf:"bytes,45,opt,name=round_robin,json=roundRobin,proto3,oneof" json:"round_robin,omitempty"`
}
type GetSpecType_LeastActive struct {
	LeastActive *schema.Empty `protobuf:"bytes,46,opt,name=least_active,json=leastActive,proto3,oneof" json:"least_active,omitempty"`
}
type GetSpecType_Random struct {
	Random *schema.Empty `protobuf:"bytes,47,opt,name=random,proto3,oneof" json:"random,omitempty"`
}
type GetSpecType_SourceIpStickiness struct {
	SourceIpStickiness *schema.Empty `protobuf:"bytes,48,opt,name=source_ip_stickiness,json=sourceIpStickiness,proto3,oneof" json:"source_ip_stickiness,omitempty"`
}
type GetSpecType_CookieStickiness struct {
	CookieStickiness *route.CookieForHashing `protobuf:"bytes,49,opt,name=cookie_stickiness,json=cookieStickiness,proto3,oneof" json:"cookie_stickiness,omitempty"`
}
type GetSpecType_RingHash struct {
	RingHash *HashPolicyListType `protobuf:"bytes,50,opt,name=ring_hash,json=ringHash,proto3,oneof" json:"ring_hash,omitempty"`
}
type GetSpecType_DisableTrustClientIpHeaders struct {
	DisableTrustClientIpHeaders *schema.Empty `protobuf:"bytes,74,opt,name=disable_trust_client_ip_headers,json=disableTrustClientIpHeaders,proto3,oneof" json:"disable_trust_client_ip_headers,omitempty"`
}
type GetSpecType_EnableTrustClientIpHeaders struct {
	EnableTrustClientIpHeaders *virtual_host.ClientIPHeaders `protobuf:"bytes,75,opt,name=enable_trust_client_ip_headers,json=enableTrustClientIpHeaders,proto3,oneof" json:"enable_trust_client_ip_headers,omitempty"`
}
type GetSpecType_SingleLbApp struct {
	SingleLbApp *SingleLoadBalancerAppSetting `protobuf:"bytes,54,opt,name=single_lb_app,json=singleLbApp,proto3,oneof" json:"single_lb_app,omitempty"`
}
type GetSpecType_MultiLbApp struct {
	MultiLbApp *schema.Empty `protobuf:"bytes,55,opt,name=multi_lb_app,json=multiLbApp,proto3,oneof" json:"multi_lb_app,omitempty"`
}
type GetSpecType_EnableMaliciousUserDetection struct {
	EnableMaliciousUserDetection *schema.Empty `protobuf:"bytes,80,opt,name=enable_malicious_user_detection,json=enableMaliciousUserDetection,proto3,oneof" json:"enable_malicious_user_detection,omitempty"`
}
type GetSpecType_DisableMaliciousUserDetection struct {
	DisableMaliciousUserDetection *schema.Empty `protobuf:"bytes,81,opt,name=disable_malicious_user_detection,json=disableMaliciousUserDetection,proto3,oneof" json:"disable_malicious_user_detection,omitempty"`
}
type GetSpecType_EnableApiDiscovery struct {
	EnableApiDiscovery *common_waf.ApiDiscoverySetting `protobuf:"bytes,83,opt,name=enable_api_discovery,json=enableApiDiscovery,proto3,oneof" json:"enable_api_discovery,omitempty"`
}
type GetSpecType_DisableApiDiscovery struct {
	DisableApiDiscovery *schema.Empty `protobuf:"bytes,84,opt,name=disable_api_discovery,json=disableApiDiscovery,proto3,oneof" json:"disable_api_discovery,omitempty"`
}
type GetSpecType_DisableBotDefense struct {
	DisableBotDefense *schema.Empty `protobuf:"bytes,57,opt,name=disable_bot_defense,json=disableBotDefense,proto3,oneof" json:"disable_bot_defense,omitempty"`
}
type GetSpecType_BotDefense struct {
	BotDefense *common_security.ShapeBotDefenseType `protobuf:"bytes,58,opt,name=bot_defense,json=botDefense,proto3,oneof" json:"bot_defense,omitempty"`
}
type GetSpecType_BotDefenseAdvanced struct {
	BotDefenseAdvanced *common_security.BotDefenseAdvancedType `protobuf:"bytes,1011,opt,name=bot_defense_advanced,json=botDefenseAdvanced,proto3,oneof" json:"bot_defense_advanced,omitempty"`
}
type GetSpecType_DefaultSensitiveDataPolicy struct {
	DefaultSensitiveDataPolicy *schema.Empty `protobuf:"bytes,131,opt,name=default_sensitive_data_policy,json=defaultSensitiveDataPolicy,proto3,oneof" json:"default_sensitive_data_policy,omitempty"`
}
type GetSpecType_SensitiveDataPolicy struct {
	SensitiveDataPolicy *common_security.SensitiveDataPolicySettings `protobuf:"bytes,132,opt,name=sensitive_data_policy,json=sensitiveDataPolicy,proto3,oneof" json:"sensitive_data_policy,omitempty"`
}
type GetSpecType_DisableApiDefinition struct {
	DisableApiDefinition *schema.Empty `protobuf:"bytes,70,opt,name=disable_api_definition,json=disableApiDefinition,proto3,oneof" json:"disable_api_definition,omitempty"`
}
type GetSpecType_ApiDefinition struct {
	ApiDefinition *views.ObjectRefType `protobuf:"bytes,71,opt,name=api_definition,json=apiDefinition,proto3,oneof" json:"api_definition,omitempty"`
}
type GetSpecType_ApiSpecification struct {
	ApiSpecification *common_waf.APISpecificationSettings `protobuf:"bytes,67,opt,name=api_specification,json=apiSpecification,proto3,oneof" json:"api_specification,omitempty"`
}
type GetSpecType_ApiDefinitions struct {
	ApiDefinitions *common_waf.ApiDefinitionList `protobuf:"bytes,61,opt,name=api_definitions,json=apiDefinitions,proto3,oneof" json:"api_definitions,omitempty"`
}
type GetSpecType_DisableIpReputation struct {
	DisableIpReputation *schema.Empty `protobuf:"bytes,65,opt,name=disable_ip_reputation,json=disableIpReputation,proto3,oneof" json:"disable_ip_reputation,omitempty"`
}
type GetSpecType_EnableIpReputation struct {
	EnableIpReputation *common_waf.IPThreatCategoryListType `protobuf:"bytes,66,opt,name=enable_ip_reputation,json=enableIpReputation,proto3,oneof" json:"enable_ip_reputation,omitempty"`
}
type GetSpecType_DisableClientSideDefense struct {
	DisableClientSideDefense *schema.Empty `protobuf:"bytes,86,opt,name=disable_client_side_defense,json=disableClientSideDefense,proto3,oneof" json:"disable_client_side_defense,omitempty"`
}
type GetSpecType_ClientSideDefense struct {
	ClientSideDefense *common_security.ClientSideDefenseType `protobuf:"bytes,87,opt,name=client_side_defense,json=clientSideDefense,proto3,oneof" json:"client_side_defense,omitempty"`
}
type GetSpecType_SystemDefaultTimeouts struct {
	SystemDefaultTimeouts *schema.Empty `protobuf:"bytes,97,opt,name=system_default_timeouts,json=systemDefaultTimeouts,proto3,oneof" json:"system_default_timeouts,omitempty"`
}
type GetSpecType_SlowDdosMitigation struct {
	SlowDdosMitigation *virtual_host.SlowDDoSMitigation `protobuf:"bytes,94,opt,name=slow_ddos_mitigation,json=slowDdosMitigation,proto3,oneof" json:"slow_ddos_mitigation,omitempty"`
}
type GetSpecType_DisableThreatMesh struct {
	DisableThreatMesh *schema.Empty `protobuf:"bytes,103,opt,name=disable_threat_mesh,json=disableThreatMesh,proto3,oneof" json:"disable_threat_mesh,omitempty"`
}
type GetSpecType_EnableThreatMesh struct {
	EnableThreatMesh *schema.Empty `protobuf:"bytes,105,opt,name=enable_threat_mesh,json=enableThreatMesh,proto3,oneof" json:"enable_threat_mesh,omitempty"`
}
type GetSpecType_L7DdosActionDefault struct {
	L7DdosActionDefault *schema.Empty `protobuf:"bytes,111,opt,name=l7_ddos_action_default,json=l7DdosActionDefault,proto3,oneof" json:"l7_ddos_action_default,omitempty"`
}
type GetSpecType_L7DdosActionBlock struct {
	L7DdosActionBlock *schema.Empty `protobuf:"bytes,112,opt,name=l7_ddos_action_block,json=l7DdosActionBlock,proto3,oneof" json:"l7_ddos_action_block,omitempty"`
}
type GetSpecType_L7DdosActionJsChallenge struct {
	L7DdosActionJsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,113,opt,name=l7_ddos_action_js_challenge,json=l7DdosActionJsChallenge,proto3,oneof" json:"l7_ddos_action_js_challenge,omitempty"`
}
type GetSpecType_L7DdosActionNone struct {
	L7DdosActionNone *schema.Empty `protobuf:"bytes,114,opt,name=l7_ddos_action_none,json=l7DdosActionNone,proto3,oneof" json:"l7_ddos_action_none,omitempty"`
}

func (*GetSpecType_Http) isGetSpecType_LoadbalancerType()                                      {}
func (*GetSpecType_HttpsAutoCert) isGetSpecType_LoadbalancerType()                             {}
func (*GetSpecType_Https) isGetSpecType_LoadbalancerType()                                     {}
func (*GetSpecType_DoNotAdvertise) isGetSpecType_AdvertiseChoice()                             {}
func (*GetSpecType_AdvertiseOnPublicDefaultVip) isGetSpecType_AdvertiseChoice()                {}
func (*GetSpecType_AdvertiseOnPublic) isGetSpecType_AdvertiseChoice()                          {}
func (*GetSpecType_AdvertiseCustom) isGetSpecType_AdvertiseChoice()                            {}
func (*GetSpecType_DefaultPool) isGetSpecType_OriginPoolChoice()                               {}
func (*GetSpecType_DefaultPoolList) isGetSpecType_OriginPoolChoice()                           {}
func (*GetSpecType_DisableWaf) isGetSpecType_WafChoice()                                       {}
func (*GetSpecType_AppFirewall) isGetSpecType_WafChoice()                                      {}
func (*GetSpecType_NoChallenge) isGetSpecType_ChallengeType()                                  {}
func (*GetSpecType_EnableChallenge) isGetSpecType_ChallengeType()                              {}
func (*GetSpecType_JsChallenge) isGetSpecType_ChallengeType()                                  {}
func (*GetSpecType_CaptchaChallenge) isGetSpecType_ChallengeType()                             {}
func (*GetSpecType_PolicyBasedChallenge) isGetSpecType_ChallengeType()                         {}
func (*GetSpecType_UserIdClientIp) isGetSpecType_UserIdChoice()                                {}
func (*GetSpecType_UserIdentification) isGetSpecType_UserIdChoice()                            {}
func (*GetSpecType_DisableRateLimit) isGetSpecType_RateLimitChoice()                           {}
func (*GetSpecType_ApiRateLimit) isGetSpecType_RateLimitChoice()                               {}
func (*GetSpecType_RateLimit) isGetSpecType_RateLimitChoice()                                  {}
func (*GetSpecType_ServicePoliciesFromNamespace) isGetSpecType_ServicePolicyChoice()           {}
func (*GetSpecType_NoServicePolicies) isGetSpecType_ServicePolicyChoice()                      {}
func (*GetSpecType_ActiveServicePolicies) isGetSpecType_ServicePolicyChoice()                  {}
func (*GetSpecType_RoundRobin) isGetSpecType_HashPolicyChoice()                                {}
func (*GetSpecType_LeastActive) isGetSpecType_HashPolicyChoice()                               {}
func (*GetSpecType_Random) isGetSpecType_HashPolicyChoice()                                    {}
func (*GetSpecType_SourceIpStickiness) isGetSpecType_HashPolicyChoice()                        {}
func (*GetSpecType_CookieStickiness) isGetSpecType_HashPolicyChoice()                          {}
func (*GetSpecType_RingHash) isGetSpecType_HashPolicyChoice()                                  {}
func (*GetSpecType_DisableTrustClientIpHeaders) isGetSpecType_TrustClientIpHeadersChoice()     {}
func (*GetSpecType_EnableTrustClientIpHeaders) isGetSpecType_TrustClientIpHeadersChoice()      {}
func (*GetSpecType_SingleLbApp) isGetSpecType_MlConfigChoice()                                 {}
func (*GetSpecType_MultiLbApp) isGetSpecType_MlConfigChoice()                                  {}
func (*GetSpecType_EnableMaliciousUserDetection) isGetSpecType_MaliciousUserDetectionChoice()  {}
func (*GetSpecType_DisableMaliciousUserDetection) isGetSpecType_MaliciousUserDetectionChoice() {}
func (*GetSpecType_EnableApiDiscovery) isGetSpecType_ApiDiscoveryChoice()                      {}
func (*GetSpecType_DisableApiDiscovery) isGetSpecType_ApiDiscoveryChoice()                     {}
func (*GetSpecType_DisableBotDefense) isGetSpecType_BotDefenseChoice()                         {}
func (*GetSpecType_BotDefense) isGetSpecType_BotDefenseChoice()                                {}
func (*GetSpecType_BotDefenseAdvanced) isGetSpecType_BotDefenseChoice()                        {}
func (*GetSpecType_DefaultSensitiveDataPolicy) isGetSpecType_SensitiveDataPolicyChoice()       {}
func (*GetSpecType_SensitiveDataPolicy) isGetSpecType_SensitiveDataPolicyChoice()              {}
func (*GetSpecType_DisableApiDefinition) isGetSpecType_ApiDefinitionChoice()                   {}
func (*GetSpecType_ApiDefinition) isGetSpecType_ApiDefinitionChoice()                          {}
func (*GetSpecType_ApiSpecification) isGetSpecType_ApiDefinitionChoice()                       {}
func (*GetSpecType_ApiDefinitions) isGetSpecType_ApiDefinitionChoice()                         {}
func (*GetSpecType_DisableIpReputation) isGetSpecType_IpReputationChoice()                     {}
func (*GetSpecType_EnableIpReputation) isGetSpecType_IpReputationChoice()                      {}
func (*GetSpecType_DisableClientSideDefense) isGetSpecType_ClientSideDefenseChoice()           {}
func (*GetSpecType_ClientSideDefense) isGetSpecType_ClientSideDefenseChoice()                  {}
func (*GetSpecType_SystemDefaultTimeouts) isGetSpecType_SlowDdosMitigationChoice()             {}
func (*GetSpecType_SlowDdosMitigation) isGetSpecType_SlowDdosMitigationChoice()                {}
func (*GetSpecType_DisableThreatMesh) isGetSpecType_ThreatMeshChoice()                         {}
func (*GetSpecType_EnableThreatMesh) isGetSpecType_ThreatMeshChoice()                          {}
func (*GetSpecType_L7DdosActionDefault) isGetSpecType_L7DdosAutoMitigationAction()             {}
func (*GetSpecType_L7DdosActionBlock) isGetSpecType_L7DdosAutoMitigationAction()               {}
func (*GetSpecType_L7DdosActionJsChallenge) isGetSpecType_L7DdosAutoMitigationAction()         {}
func (*GetSpecType_L7DdosActionNone) isGetSpecType_L7DdosAutoMitigationAction()                {}

func (m *GetSpecType) GetLoadbalancerType() isGetSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *GetSpecType) GetAdvertiseChoice() isGetSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *GetSpecType) GetOriginPoolChoice() isGetSpecType_OriginPoolChoice {
	if m != nil {
		return m.OriginPoolChoice
	}
	return nil
}
func (m *GetSpecType) GetWafChoice() isGetSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *GetSpecType) GetChallengeType() isGetSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *GetSpecType) GetUserIdChoice() isGetSpecType_UserIdChoice {
	if m != nil {
		return m.UserIdChoice
	}
	return nil
}
func (m *GetSpecType) GetRateLimitChoice() isGetSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}
func (m *GetSpecType) GetServicePolicyChoice() isGetSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *GetSpecType) GetHashPolicyChoice() isGetSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *GetSpecType) GetTrustClientIpHeadersChoice() isGetSpecType_TrustClientIpHeadersChoice {
	if m != nil {
		return m.TrustClientIpHeadersChoice
	}
	return nil
}
func (m *GetSpecType) GetMlConfigChoice() isGetSpecType_MlConfigChoice {
	if m != nil {
		return m.MlConfigChoice
	}
	return nil
}
func (m *GetSpecType) GetMaliciousUserDetectionChoice() isGetSpecType_MaliciousUserDetectionChoice {
	if m != nil {
		return m.MaliciousUserDetectionChoice
	}
	return nil
}
func (m *GetSpecType) GetApiDiscoveryChoice() isGetSpecType_ApiDiscoveryChoice {
	if m != nil {
		return m.ApiDiscoveryChoice
	}
	return nil
}
func (m *GetSpecType) GetBotDefenseChoice() isGetSpecType_BotDefenseChoice {
	if m != nil {
		return m.BotDefenseChoice
	}
	return nil
}
func (m *GetSpecType) GetSensitiveDataPolicyChoice() isGetSpecType_SensitiveDataPolicyChoice {
	if m != nil {
		return m.SensitiveDataPolicyChoice
	}
	return nil
}
func (m *GetSpecType) GetApiDefinitionChoice() isGetSpecType_ApiDefinitionChoice {
	if m != nil {
		return m.ApiDefinitionChoice
	}
	return nil
}
func (m *GetSpecType) GetIpReputationChoice() isGetSpecType_IpReputationChoice {
	if m != nil {
		return m.IpReputationChoice
	}
	return nil
}
func (m *GetSpecType) GetClientSideDefenseChoice() isGetSpecType_ClientSideDefenseChoice {
	if m != nil {
		return m.ClientSideDefenseChoice
	}
	return nil
}
func (m *GetSpecType) GetSlowDdosMitigationChoice() isGetSpecType_SlowDdosMitigationChoice {
	if m != nil {
		return m.SlowDdosMitigationChoice
	}
	return nil
}
func (m *GetSpecType) GetThreatMeshChoice() isGetSpecType_ThreatMeshChoice {
	if m != nil {
		return m.ThreatMeshChoice
	}
	return nil
}
func (m *GetSpecType) GetL7DdosAutoMitigationAction() isGetSpecType_L7DdosAutoMitigationAction {
	if m != nil {
		return m.L7DdosAutoMitigationAction
	}
	return nil
}

func (m *GetSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetSpecType) GetHttp() *ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *GetSpecType) GetHttpsAutoCert() *ProxyTypeHttpsAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *GetSpecType) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *GetSpecType) GetDownstreamTlsCertificateExpirationTimestamps() []*types.Timestamp {
	if m != nil {
		return m.DownstreamTlsCertificateExpirationTimestamps
	}
	return nil
}

func (m *GetSpecType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *GetSpecType) GetDefaultRoutePools() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.DefaultRoutePools
	}
	return nil
}

func (m *GetSpecType) GetDefaultPool() *origin_pool.GlobalSpecType {
	if x, ok := m.GetOriginPoolChoice().(*GetSpecType_DefaultPool); ok {
		return x.DefaultPool
	}
	return nil
}

func (m *GetSpecType) GetDefaultPoolList() *views.OriginPoolListType {
	if x, ok := m.GetOriginPoolChoice().(*GetSpecType_DefaultPoolList); ok {
		return x.DefaultPoolList
	}
	return nil
}

func (m *GetSpecType) GetOriginServerSubsetRuleList() *OriginServerSubsetRuleListType {
	if m != nil {
		return m.OriginServerSubsetRuleList
	}
	return nil
}

func (m *GetSpecType) GetRoutes() []*RouteType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *GetSpecType) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *GetSpecType) GetDisableWaf() *schema.Empty {
	if x, ok := m.GetWafChoice().(*GetSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *GetSpecType) GetAppFirewall() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GetSpecType_AppFirewall); ok {
		return x.AppFirewall
	}
	return nil
}

func (m *GetSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *GetSpecType) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*GetSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *GetSpecType) GetEnableChallenge() *common_waf.EnableChallenge {
	if x, ok := m.GetChallengeType().(*GetSpecType_EnableChallenge); ok {
		return x.EnableChallenge
	}
	return nil
}

func (m *GetSpecType) GetJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*GetSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *GetSpecType) GetCaptchaChallenge() *virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*GetSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *GetSpecType) GetPolicyBasedChallenge() *common_waf.PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*GetSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *GetSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *GetSpecType) GetUserIdClientIp() *schema.Empty {
	if x, ok := m.GetUserIdChoice().(*GetSpecType_UserIdClientIp); ok {
		return x.UserIdClientIp
	}
	return nil
}

func (m *GetSpecType) GetUserIdentification() *views.ObjectRefType {
	if x, ok := m.GetUserIdChoice().(*GetSpecType_UserIdentification); ok {
		return x.UserIdentification
	}
	return nil
}

func (m *GetSpecType) GetApiRateLimitLegacy() *common_waf.APIRateLimitLegacy {
	if m != nil {
		return m.ApiRateLimitLegacy
	}
	return nil
}

func (m *GetSpecType) GetDisableRateLimit() *schema.Empty {
	if x, ok := m.GetRateLimitChoice().(*GetSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *GetSpecType) GetApiRateLimit() *common_waf.APIRateLimit {
	if x, ok := m.GetRateLimitChoice().(*GetSpecType_ApiRateLimit); ok {
		return x.ApiRateLimit
	}
	return nil
}

func (m *GetSpecType) GetRateLimit() *common_waf.RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*GetSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *GetSpecType) GetMaliciousUserMitigation() *views.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *GetSpecType) GetWafExclusionRules() []*policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *GetSpecType) GetDataGuardRules() []*policy.SimpleDataGuardRule {
	if m != nil {
		return m.DataGuardRules
	}
	return nil
}

func (m *GetSpecType) GetBlockedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *GetSpecType) GetTrustedClients() []*common_waf.SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *GetSpecType) GetApiProtectionRules() *common_waf.APIProtectionRules {
	if m != nil {
		return m.ApiProtectionRules
	}
	return nil
}

func (m *GetSpecType) GetDdosMitigationRules() []*common_security.DDoSMitigationRule {
	if m != nil {
		return m.DdosMitigationRules
	}
	return nil
}

func (m *GetSpecType) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GetSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *GetSpecType) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GetSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *GetSpecType) GetActiveServicePolicies() *common_waf.ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*GetSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *GetSpecType) GetRoundRobin() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_RoundRobin); ok {
		return x.RoundRobin
	}
	return nil
}

func (m *GetSpecType) GetLeastActive() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_LeastActive); ok {
		return x.LeastActive
	}
	return nil
}

func (m *GetSpecType) GetRandom() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_Random); ok {
		return x.Random
	}
	return nil
}

func (m *GetSpecType) GetSourceIpStickiness() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_SourceIpStickiness); ok {
		return x.SourceIpStickiness
	}
	return nil
}

func (m *GetSpecType) GetCookieStickiness() *route.CookieForHashing {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_CookieStickiness); ok {
		return x.CookieStickiness
	}
	return nil
}

func (m *GetSpecType) GetRingHash() *HashPolicyListType {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_RingHash); ok {
		return x.RingHash
	}
	return nil
}

func (m *GetSpecType) GetDisableTrustClientIpHeaders() *schema.Empty {
	if x, ok := m.GetTrustClientIpHeadersChoice().(*GetSpecType_DisableTrustClientIpHeaders); ok {
		return x.DisableTrustClientIpHeaders
	}
	return nil
}

func (m *GetSpecType) GetEnableTrustClientIpHeaders() *virtual_host.ClientIPHeaders {
	if x, ok := m.GetTrustClientIpHeadersChoice().(*GetSpecType_EnableTrustClientIpHeaders); ok {
		return x.EnableTrustClientIpHeaders
	}
	return nil
}

func (m *GetSpecType) GetSingleLbApp() *SingleLoadBalancerAppSetting {
	if x, ok := m.GetMlConfigChoice().(*GetSpecType_SingleLbApp); ok {
		return x.SingleLbApp
	}
	return nil
}

func (m *GetSpecType) GetMultiLbApp() *schema.Empty {
	if x, ok := m.GetMlConfigChoice().(*GetSpecType_MultiLbApp); ok {
		return x.MultiLbApp
	}
	return nil
}

func (m *GetSpecType) GetEnableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*GetSpecType_EnableMaliciousUserDetection); ok {
		return x.EnableMaliciousUserDetection
	}
	return nil
}

func (m *GetSpecType) GetDisableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*GetSpecType_DisableMaliciousUserDetection); ok {
		return x.DisableMaliciousUserDetection
	}
	return nil
}

func (m *GetSpecType) GetEnableApiDiscovery() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*GetSpecType_EnableApiDiscovery); ok {
		return x.EnableApiDiscovery
	}
	return nil
}

func (m *GetSpecType) GetDisableApiDiscovery() *schema.Empty {
	if x, ok := m.GetApiDiscoveryChoice().(*GetSpecType_DisableApiDiscovery); ok {
		return x.DisableApiDiscovery
	}
	return nil
}

func (m *GetSpecType) GetDisableBotDefense() *schema.Empty {
	if x, ok := m.GetBotDefenseChoice().(*GetSpecType_DisableBotDefense); ok {
		return x.DisableBotDefense
	}
	return nil
}

func (m *GetSpecType) GetBotDefense() *common_security.ShapeBotDefenseType {
	if x, ok := m.GetBotDefenseChoice().(*GetSpecType_BotDefense); ok {
		return x.BotDefense
	}
	return nil
}

func (m *GetSpecType) GetBotDefenseAdvanced() *common_security.BotDefenseAdvancedType {
	if x, ok := m.GetBotDefenseChoice().(*GetSpecType_BotDefenseAdvanced); ok {
		return x.BotDefenseAdvanced
	}
	return nil
}

func (m *GetSpecType) GetDefaultSensitiveDataPolicy() *schema.Empty {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*GetSpecType_DefaultSensitiveDataPolicy); ok {
		return x.DefaultSensitiveDataPolicy
	}
	return nil
}

func (m *GetSpecType) GetSensitiveDataPolicy() *common_security.SensitiveDataPolicySettings {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*GetSpecType_SensitiveDataPolicy); ok {
		return x.SensitiveDataPolicy
	}
	return nil
}

func (m *GetSpecType) GetDisableApiDefinition() *schema.Empty {
	if x, ok := m.GetApiDefinitionChoice().(*GetSpecType_DisableApiDefinition); ok {
		return x.DisableApiDefinition
	}
	return nil
}

func (m *GetSpecType) GetApiDefinition() *views.ObjectRefType {
	if x, ok := m.GetApiDefinitionChoice().(*GetSpecType_ApiDefinition); ok {
		return x.ApiDefinition
	}
	return nil
}

func (m *GetSpecType) GetApiSpecification() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*GetSpecType_ApiSpecification); ok {
		return x.ApiSpecification
	}
	return nil
}

func (m *GetSpecType) GetApiDefinitions() *common_waf.ApiDefinitionList {
	if x, ok := m.GetApiDefinitionChoice().(*GetSpecType_ApiDefinitions); ok {
		return x.ApiDefinitions
	}
	return nil
}

func (m *GetSpecType) GetDisableIpReputation() *schema.Empty {
	if x, ok := m.GetIpReputationChoice().(*GetSpecType_DisableIpReputation); ok {
		return x.DisableIpReputation
	}
	return nil
}

func (m *GetSpecType) GetEnableIpReputation() *common_waf.IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*GetSpecType_EnableIpReputation); ok {
		return x.EnableIpReputation
	}
	return nil
}

func (m *GetSpecType) GetDisableClientSideDefense() *schema.Empty {
	if x, ok := m.GetClientSideDefenseChoice().(*GetSpecType_DisableClientSideDefense); ok {
		return x.DisableClientSideDefense
	}
	return nil
}

func (m *GetSpecType) GetClientSideDefense() *common_security.ClientSideDefenseType {
	if x, ok := m.GetClientSideDefenseChoice().(*GetSpecType_ClientSideDefense); ok {
		return x.ClientSideDefense
	}
	return nil
}

func (m *GetSpecType) GetCsrfPolicy() *schema.CsrfPolicy {
	if m != nil {
		return m.CsrfPolicy
	}
	return nil
}

func (m *GetSpecType) GetGraphqlRules() []*policy.GraphQLRule {
	if m != nil {
		return m.GraphqlRules
	}
	return nil
}

func (m *GetSpecType) GetProtectedCookies() []*schema.CookieManipulationOptionType {
	if m != nil {
		return m.ProtectedCookies
	}
	return nil
}

func (m *GetSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GetSpecType) GetDnsInfo() []*virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GetSpecType) GetState() virtual_host.VirtualHostState {
	if m != nil {
		return m.State
	}
	return virtual_host.VIRTUAL_HOST_READY
}

func (m *GetSpecType) GetAutoCertInfo() *virtual_host.AutoCertInfoType {
	if m != nil {
		return m.AutoCertInfo
	}
	return nil
}

func (m *GetSpecType) GetInternetVipInfo() []*views.InternetVIPInfo {
	if m != nil {
		return m.InternetVipInfo
	}
	return nil
}

func (m *GetSpecType) GetSystemDefaultTimeouts() *schema.Empty {
	if x, ok := m.GetSlowDdosMitigationChoice().(*GetSpecType_SystemDefaultTimeouts); ok {
		return x.SystemDefaultTimeouts
	}
	return nil
}

func (m *GetSpecType) GetSlowDdosMitigation() *virtual_host.SlowDDoSMitigation {
	if x, ok := m.GetSlowDdosMitigationChoice().(*GetSpecType_SlowDdosMitigation); ok {
		return x.SlowDdosMitigation
	}
	return nil
}

func (m *GetSpecType) GetJwtValidation() *common_waf.JWTValidation {
	if m != nil {
		return m.JwtValidation
	}
	return nil
}

func (m *GetSpecType) GetDisableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*GetSpecType_DisableThreatMesh); ok {
		return x.DisableThreatMesh
	}
	return nil
}

func (m *GetSpecType) GetEnableThreatMesh() *schema.Empty {
	if x, ok := m.GetThreatMeshChoice().(*GetSpecType_EnableThreatMesh); ok {
		return x.EnableThreatMesh
	}
	return nil
}

func (m *GetSpecType) GetL7DdosActionDefault() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*GetSpecType_L7DdosActionDefault); ok {
		return x.L7DdosActionDefault
	}
	return nil
}

func (m *GetSpecType) GetL7DdosActionBlock() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*GetSpecType_L7DdosActionBlock); ok {
		return x.L7DdosActionBlock
	}
	return nil
}

func (m *GetSpecType) GetL7DdosActionJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*GetSpecType_L7DdosActionJsChallenge); ok {
		return x.L7DdosActionJsChallenge
	}
	return nil
}

func (m *GetSpecType) GetL7DdosActionNone() *schema.Empty {
	if x, ok := m.GetL7DdosAutoMitigationAction().(*GetSpecType_L7DdosActionNone); ok {
		return x.L7DdosActionNone
	}
	return nil
}

func (m *GetSpecType) GetCertState() virtual_host.CertificationState {
	if m != nil {
		return m.CertState
	}
	return virtual_host.AutoCertDisabled
}

func (m *GetSpecType) GetSensitiveDataDisclosureRules() *SensitiveDataDisclosureRules {
	if m != nil {
		return m.SensitiveDataDisclosureRules
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_Http)(nil),
		(*GetSpecType_HttpsAutoCert)(nil),
		(*GetSpecType_Https)(nil),
		(*GetSpecType_DoNotAdvertise)(nil),
		(*GetSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*GetSpecType_AdvertiseOnPublic)(nil),
		(*GetSpecType_AdvertiseCustom)(nil),
		(*GetSpecType_DefaultPool)(nil),
		(*GetSpecType_DefaultPoolList)(nil),
		(*GetSpecType_DisableWaf)(nil),
		(*GetSpecType_AppFirewall)(nil),
		(*GetSpecType_NoChallenge)(nil),
		(*GetSpecType_EnableChallenge)(nil),
		(*GetSpecType_JsChallenge)(nil),
		(*GetSpecType_CaptchaChallenge)(nil),
		(*GetSpecType_PolicyBasedChallenge)(nil),
		(*GetSpecType_UserIdClientIp)(nil),
		(*GetSpecType_UserIdentification)(nil),
		(*GetSpecType_DisableRateLimit)(nil),
		(*GetSpecType_ApiRateLimit)(nil),
		(*GetSpecType_RateLimit)(nil),
		(*GetSpecType_ServicePoliciesFromNamespace)(nil),
		(*GetSpecType_NoServicePolicies)(nil),
		(*GetSpecType_ActiveServicePolicies)(nil),
		(*GetSpecType_RoundRobin)(nil),
		(*GetSpecType_LeastActive)(nil),
		(*GetSpecType_Random)(nil),
		(*GetSpecType_SourceIpStickiness)(nil),
		(*GetSpecType_CookieStickiness)(nil),
		(*GetSpecType_RingHash)(nil),
		(*GetSpecType_DisableTrustClientIpHeaders)(nil),
		(*GetSpecType_EnableTrustClientIpHeaders)(nil),
		(*GetSpecType_SingleLbApp)(nil),
		(*GetSpecType_MultiLbApp)(nil),
		(*GetSpecType_EnableMaliciousUserDetection)(nil),
		(*GetSpecType_DisableMaliciousUserDetection)(nil),
		(*GetSpecType_EnableApiDiscovery)(nil),
		(*GetSpecType_DisableApiDiscovery)(nil),
		(*GetSpecType_DisableBotDefense)(nil),
		(*GetSpecType_BotDefense)(nil),
		(*GetSpecType_BotDefenseAdvanced)(nil),
		(*GetSpecType_DefaultSensitiveDataPolicy)(nil),
		(*GetSpecType_SensitiveDataPolicy)(nil),
		(*GetSpecType_DisableApiDefinition)(nil),
		(*GetSpecType_ApiDefinition)(nil),
		(*GetSpecType_ApiSpecification)(nil),
		(*GetSpecType_ApiDefinitions)(nil),
		(*GetSpecType_DisableIpReputation)(nil),
		(*GetSpecType_EnableIpReputation)(nil),
		(*GetSpecType_DisableClientSideDefense)(nil),
		(*GetSpecType_ClientSideDefense)(nil),
		(*GetSpecType_SystemDefaultTimeouts)(nil),
		(*GetSpecType_SlowDdosMitigation)(nil),
		(*GetSpecType_DisableThreatMesh)(nil),
		(*GetSpecType_EnableThreatMesh)(nil),
		(*GetSpecType_L7DdosActionDefault)(nil),
		(*GetSpecType_L7DdosActionBlock)(nil),
		(*GetSpecType_L7DdosActionJsChallenge)(nil),
		(*GetSpecType_L7DdosActionNone)(nil),
	}
}

func init() {
	proto.RegisterType((*ProxyTypeHttps)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttps")
	golang_proto.RegisterType((*ProxyTypeHttps)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttps")
	proto.RegisterType((*ProxyTypeHttp)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttp")
	golang_proto.RegisterType((*ProxyTypeHttp)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttp")
	proto.RegisterType((*ProxyTypeHttpsAutoCerts)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttpsAutoCerts")
	golang_proto.RegisterType((*ProxyTypeHttpsAutoCerts)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttpsAutoCerts")
	proto.RegisterType((*HashPolicyListType)(nil), "ves.io.schema.views.http_loadbalancer.HashPolicyListType")
	golang_proto.RegisterType((*HashPolicyListType)(nil), "ves.io.schema.views.http_loadbalancer.HashPolicyListType")
	proto.RegisterType((*MirrorPolicyType)(nil), "ves.io.schema.views.http_loadbalancer.MirrorPolicyType")
	golang_proto.RegisterType((*MirrorPolicyType)(nil), "ves.io.schema.views.http_loadbalancer.MirrorPolicyType")
	proto.RegisterType((*RouteSimpleAdvancedOptions)(nil), "ves.io.schema.views.http_loadbalancer.RouteSimpleAdvancedOptions")
	golang_proto.RegisterType((*RouteSimpleAdvancedOptions)(nil), "ves.io.schema.views.http_loadbalancer.RouteSimpleAdvancedOptions")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.http_loadbalancer.RouteSimpleAdvancedOptions.EndpointSubsetsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.http_loadbalancer.RouteSimpleAdvancedOptions.EndpointSubsetsEntry")
	proto.RegisterType((*RouteTypeSimpleWithDefaultOriginPool)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool")
	golang_proto.RegisterType((*RouteTypeSimpleWithDefaultOriginPool)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool")
	proto.RegisterType((*RouteTypeSimple)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeSimple")
	golang_proto.RegisterType((*RouteTypeSimple)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeSimple")
	proto.RegisterType((*RouteTypeRedirect)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeRedirect")
	golang_proto.RegisterType((*RouteTypeRedirect)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeRedirect")
	proto.RegisterType((*RouteTypeDirectResponse)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeDirectResponse")
	golang_proto.RegisterType((*RouteTypeDirectResponse)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeDirectResponse")
	proto.RegisterType((*RouteTypeCustomRoute)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeCustomRoute")
	golang_proto.RegisterType((*RouteTypeCustomRoute)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeCustomRoute")
	proto.RegisterType((*RouteType)(nil), "ves.io.schema.views.http_loadbalancer.RouteType")
	golang_proto.RegisterType((*RouteType)(nil), "ves.io.schema.views.http_loadbalancer.RouteType")
	proto.RegisterType((*AdvancedOptionsType)(nil), "ves.io.schema.views.http_loadbalancer.AdvancedOptionsType")
	golang_proto.RegisterType((*AdvancedOptionsType)(nil), "ves.io.schema.views.http_loadbalancer.AdvancedOptionsType")
	proto.RegisterMapType((map[uint32]string)(nil), "ves.io.schema.views.http_loadbalancer.AdvancedOptionsType.CustomErrorsEntry")
	golang_proto.RegisterMapType((map[uint32]string)(nil), "ves.io.schema.views.http_loadbalancer.AdvancedOptionsType.CustomErrorsEntry")
	proto.RegisterType((*SingleLoadBalancerAppSetting)(nil), "ves.io.schema.views.http_loadbalancer.SingleLoadBalancerAppSetting")
	golang_proto.RegisterType((*SingleLoadBalancerAppSetting)(nil), "ves.io.schema.views.http_loadbalancer.SingleLoadBalancerAppSetting")
	proto.RegisterType((*OriginServerSubsetRuleListType)(nil), "ves.io.schema.views.http_loadbalancer.OriginServerSubsetRuleListType")
	golang_proto.RegisterType((*OriginServerSubsetRuleListType)(nil), "ves.io.schema.views.http_loadbalancer.OriginServerSubsetRuleListType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.http_loadbalancer.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.http_loadbalancer.GlobalSpecType")
	proto.RegisterType((*SensitiveDataDisclosureRules)(nil), "ves.io.schema.views.http_loadbalancer.SensitiveDataDisclosureRules")
	golang_proto.RegisterType((*SensitiveDataDisclosureRules)(nil), "ves.io.schema.views.http_loadbalancer.SensitiveDataDisclosureRules")
	proto.RegisterType((*SensitiveDataTypes)(nil), "ves.io.schema.views.http_loadbalancer.SensitiveDataTypes")
	golang_proto.RegisterType((*SensitiveDataTypes)(nil), "ves.io.schema.views.http_loadbalancer.SensitiveDataTypes")
	proto.RegisterType((*BodySectionMaskingOptions)(nil), "ves.io.schema.views.http_loadbalancer.BodySectionMaskingOptions")
	golang_proto.RegisterType((*BodySectionMaskingOptions)(nil), "ves.io.schema.views.http_loadbalancer.BodySectionMaskingOptions")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.http_loadbalancer.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.http_loadbalancer.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.http_loadbalancer.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.http_loadbalancer.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.http_loadbalancer.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.http_loadbalancer.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/http_loadbalancer/types.proto", fileDescriptor_6478b2bb990a4a3e)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/http_loadbalancer/types.proto", fileDescriptor_6478b2bb990a4a3e)
}

var fileDescriptor_6478b2bb990a4a3e = []byte{
	// 9941 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x6b, 0x68, 0x1c, 0x59,
	0xbe, 0x9f, 0x8e, 0xd4, 0x92, 0x4a, 0xa7, 0xa5, 0x56, 0xf5, 0xd1, 0xab, 0x2d, 0xdb, 0x72, 0x5b,
	0xb6, 0xc7, 0x1a, 0xbb, 0x24, 0xab, 0x5f, 0x7a, 0x78, 0x67, 0x3c, 0x76, 0xc9, 0xf6, 0xb4, 0x7b,
	0x2d, 0x5b, 0x53, 0xd2, 0xd8, 0xf3, 0xee, 0x29, 0x75, 0x97, 0xa4, 0x1a, 0x77, 0x57, 0xf5, 0x54,
	0x95, 0x6c, 0xeb, 0x26, 0xe6, 0x3a, 0xde, 0x1b, 0xd8, 0x78, 0xb9, 0x61, 0xef, 0x04, 0x92, 0xdc,
	0x85, 0x2c, 0x21, 0xb9, 0x1f, 0xc2, 0x40, 0x20, 0xf9, 0xb0, 0x10, 0xd2, 0x5e, 0x10, 0x4b, 0x16,
	0x36, 0x9b, 0x40, 0x04, 0x81, 0x30, 0x4c, 0x12, 0xb8, 0xab, 0x25, 0x30, 0x77, 0x73, 0x03, 0xc3,
	0xdc, 0x2f, 0xc1, 0x5f, 0x36, 0x9c, 0x47, 0x55, 0x57, 0xb5, 0xaa, 0x4b, 0x0f, 0xcb, 0x33, 0x59,
	0x6e, 0x7f, 0x52, 0x57, 0xd5, 0xff, 0xff, 0x3f, 0xef, 0xf3, 0x7f, 0xfd, 0xce, 0x11, 0x4c, 0xdc,
	0x57, 0xcc, 0x09, 0x55, 0xbf, 0x60, 0x16, 0xd6, 0x94, 0xb2, 0x7c, 0xe1, 0xbe, 0xaa, 0x3c, 0x30,
	0x2f, 0xac, 0x59, 0x56, 0x25, 0x5f, 0xd2, 0xe5, 0xe2, 0xb2, 0x5c, 0x92, 0xb5, 0x82, 0x62, 0x5c,
	0xb0, 0x36, 0x2a, 0x8a, 0x39, 0x51, 0x31, 0x74, 0x4b, 0x47, 0x67, 0x28, 0xcb, 0x04, 0x65, 0x99,
	0x20, 0x2c, 0x13, 0x3b, 0x58, 0x86, 0xc7, 0x57, 0x55, 0x6b, 0x6d, 0x7d, 0x79, 0xa2, 0xa0, 0x97,
	0x2f, 0xac, 0xea, 0xab, 0xfa, 0x05, 0xc2, 0xbd, 0xbc, 0xbe, 0x42, 0x9e, 0xc8, 0x03, 0xf9, 0x45,
	0xa5, 0x0e, 0x9f, 0x58, 0xd5, 0xf5, 0xd5, 0x92, 0x52, 0xa3, 0xb2, 0xd4, 0xb2, 0x62, 0x5a, 0x72,
	0xb9, 0xc2, 0x08, 0x46, 0xbd, 0x35, 0x95, 0x2b, 0x95, 0x3c, 0xae, 0x95, 0xbb, 0x6a, 0xc3, 0x47,
	0xbd, 0x34, 0x7a, 0xc5, 0x52, 0x75, 0xcd, 0xfe, 0x18, 0xf7, 0x7e, 0xac, 0xe8, 0x25, 0xb5, 0xb0,
	0xe1, 0x61, 0x7f, 0xc5, 0x4b, 0x61, 0xc8, 0x96, 0x92, 0x2f, 0xa9, 0x65, 0xd5, 0xf2, 0xf6, 0xc0,
	0xf0, 0x89, 0x3a, 0x3a, 0x7d, 0xdd, 0xf2, 0xd6, 0x63, 0xdc, 0x4b, 0x60, 0x2a, 0xc6, 0x7d, 0xb5,
	0xa0, 0xe4, 0x69, 0x91, 0x79, 0x63, 0xbd, 0xe4, 0x25, 0x3f, 0xe2, 0x25, 0x77, 0x7f, 0x3a, 0x56,
	0x37, 0x3e, 0x72, 0x49, 0x2d, 0xca, 0x96, 0xe2, 0xdf, 0x24, 0x3c, 0x14, 0x79, 0x6f, 0xa3, 0x67,
	0xfc, 0xc6, 0xb7, 0xa0, 0x97, 0xcb, 0xba, 0x96, 0x37, 0x95, 0xc2, 0xba, 0xa1, 0x5a, 0x1b, 0x17,
	0xec, 0x1f, 0x79, 0x77, 0xc9, 0x99, 0x00, 0xce, 0x07, 0xf2, 0x8a, 0xeb, 0xa7, 0x87, 0xed, 0xbc,
	0x1f, 0x9b, 0x6e, 0xa8, 0xab, 0xaa, 0x96, 0xaf, 0xe8, 0x7a, 0xc9, 0xd3, 0xba, 0x94, 0x1f, 0xb1,
	0xbb, 0xdb, 0xf3, 0x3e, 0xa3, 0x74, 0xc2, 0x8f, 0x29, 0x60, 0x18, 0xef, 0xab, 0x86, 0xb5, 0x2e,
	0x97, 0xf2, 0x6b, 0xba, 0x69, 0x79, 0xe8, 0x26, 0x1b, 0xd3, 0xe5, 0x8b, 0x9a, 0x99, 0x57, 0xb5,
	0x15, 0xfd, 0x82, 0xbe, 0xfc, 0x89, 0x52, 0xb0, 0x28, 0xc7, 0xe8, 0xcf, 0xba, 0x61, 0x64, 0xc1,
	0xd0, 0x1f, 0x6e, 0x2c, 0x6d, 0x54, 0x94, 0xac, 0x65, 0x55, 0x4c, 0xf4, 0x2a, 0xec, 0x21, 0x73,
	0xdf, 0x50, 0x8a, 0xaa, 0xa1, 0x14, 0xac, 0x18, 0x88, 0x83, 0x31, 0x4e, 0x0c, 0xfd, 0xdf, 0x2a,
	0x68, 0x91, 0xba, 0xf1, 0x27, 0x89, 0x7d, 0x41, 0x27, 0x20, 0x27, 0x17, 0x8b, 0xf9, 0x35, 0xd3,
	0x32, 0x63, 0xad, 0x2e, 0xaa, 0x4e, 0xb9, 0x58, 0xcc, 0x9a, 0x96, 0x89, 0xde, 0x87, 0x11, 0xab,
	0x64, 0xe6, 0x2b, 0xb2, 0x21, 0x97, 0x15, 0x4b, 0x31, 0xcc, 0x58, 0x5b, 0x1c, 0x8c, 0x85, 0x93,
	0xc2, 0x84, 0xdf, 0x92, 0xbb, 0xaa, 0x3f, 0xd0, 0x4c, 0xcb, 0x50, 0xe4, 0xf2, 0x52, 0xc9, 0x5c,
	0xc0, 0x3c, 0x26, 0xae, 0x96, 0x18, 0xda, 0xaa, 0x02, 0x90, 0x6d, 0x91, 0x7a, 0x2c, 0xf6, 0x9a,
	0x88, 0x42, 0x1f, 0xc2, 0x5e, 0x2c, 0xbc, 0xa0, 0x18, 0x16, 0x2d, 0xc1, 0x8c, 0x0d, 0x12, 0xe9,
	0xe3, 0xbb, 0x49, 0xbf, 0xb9, 0x38, 0xa7, 0x18, 0x16, 0x2b, 0xc2, 0x23, 0x1e, 0xbf, 0xa7, 0xaf,
	0xd1, 0x1c, 0x8c, 0x14, 0x95, 0x15, 0x79, 0xbd, 0x64, 0xe5, 0xd7, 0x14, 0xb9, 0xa8, 0x18, 0xb1,
	0x76, 0x22, 0xbd, 0xbf, 0x4e, 0xfa, 0xb5, 0x72, 0xc5, 0xda, 0x10, 0x43, 0x9b, 0x58, 0x08, 0x90,
	0x7a, 0x18, 0x4f, 0x96, 0xb0, 0xa0, 0x04, 0x0c, 0xe3, 0xb5, 0xa2, 0x18, 0x79, 0x4d, 0x2e, 0x2b,
	0xb1, 0x8e, 0x38, 0x18, 0xeb, 0x12, 0x23, 0x98, 0xf6, 0xdf, 0xff, 0xd5, 0x66, 0x5b, 0xbb, 0xd1,
	0x16, 0xfb, 0xe7, 0x6f, 0x64, 0x81, 0x04, 0x29, 0xd1, 0x2d, 0xb9, 0xac, 0xa0, 0x4b, 0x10, 0xc9,
	0x95, 0x8a, 0xa2, 0x15, 0xf3, 0x6e, 0xce, 0xce, 0x06, 0x9c, 0x3c, 0xa5, 0x5d, 0xac, 0xf1, 0xbf,
	0x01, 0xbb, 0x2b, 0xb2, 0x69, 0xe6, 0xad, 0x35, 0x43, 0x5f, 0x5f, 0x5d, 0x8b, 0x71, 0x7b, 0xa8,
	0x75, 0x18, 0x73, 0x2c, 0x51, 0x06, 0xb4, 0x00, 0x07, 0x14, 0x4d, 0x5e, 0x2e, 0x29, 0xf9, 0x8a,
	0x6c, 0xad, 0xe5, 0x35, 0xdd, 0x28, 0xcb, 0x25, 0xf5, 0x8f, 0x94, 0x18, 0xdc, 0x55, 0x52, 0xab,
	0xd4, 0x47, 0x59, 0x17, 0x64, 0x6b, 0xed, 0x96, 0xcd, 0x88, 0x24, 0x38, 0x58, 0x54, 0x4d, 0x3f,
	0x91, 0xe1, 0x3d, 0x88, 0xec, 0x67, 0xbc, 0x5e, 0x99, 0x63, 0x30, 0x54, 0xd1, 0x0d, 0x2b, 0xd6,
	0x1b, 0x07, 0x63, 0x3d, 0x22, 0xfa, 0xb2, 0x0a, 0xda, 0xd2, 0xe9, 0x14, 0xee, 0x9b, 0x8e, 0x73,
	0xa1, 0xd8, 0xef, 0x7f, 0xdf, 0x96, 0x6d, 0x93, 0x08, 0x05, 0xca, 0xc1, 0x30, 0xfe, 0x9b, 0x37,
	0x64, 0x6d, 0x55, 0x31, 0x63, 0x47, 0x48, 0x4f, 0x9e, 0xb5, 0x7b, 0xf1, 0x71, 0x88, 0xfd, 0xda,
	0x0a, 0x5d, 0xc6, 0xbf, 0x42, 0x46, 0x2b, 0x6f, 0x77, 0xf1, 0x17, 0x21, 0x90, 0x6d, 0x93, 0x20,
	0xe6, 0x96, 0x08, 0x33, 0xba, 0x03, 0x63, 0x9a, 0xae, 0xe5, 0xed, 0x89, 0xe1, 0xd6, 0x0f, 0xb1,
	0xe8, 0xae, 0x6d, 0x09, 0x49, 0x83, 0x9a, 0xae, 0x5d, 0xa5, 0xcc, 0x37, 0x5d, 0xbc, 0xe8, 0x36,
	0xec, 0xf7, 0x95, 0x89, 0xf6, 0x20, 0xb3, 0xaf, 0xe8, 0x23, 0xf0, 0x53, 0x38, 0x4c, 0x67, 0x6d,
	0xde, 0x32, 0x64, 0xcd, 0x5c, 0xc1, 0xfd, 0x86, 0xb7, 0x51, 0xb2, 0xb5, 0xc5, 0xfa, 0x88, 0xd8,
	0xb3, 0x75, 0x62, 0xe9, 0x9c, 0x5d, 0xf2, 0xd0, 0x93, 0x05, 0x08, 0x71, 0x49, 0x5f, 0x55, 0x01,
	0x88, 0x01, 0x29, 0xb6, 0xd6, 0x80, 0x0a, 0xbd, 0x0b, 0x87, 0x0a, 0xba, 0xa6, 0x29, 0x05, 0x52,
	0x8e, 0x5a, 0x2c, 0x29, 0x79, 0xac, 0xf2, 0xf4, 0x75, 0x2b, 0xd6, 0x4f, 0x06, 0xe9, 0x24, 0x16,
	0xf3, 0x65, 0x15, 0x74, 0x24, 0x92, 0x93, 0x93, 0x93, 0x93, 0x78, 0xab, 0xf8, 0xe1, 0x33, 0xd0,
	0x62, 0x8f, 0xd9, 0xe6, 0x7f, 0x39, 0x2d, 0x0d, 0xd4, 0x24, 0xdc, 0x28, 0x96, 0x94, 0x25, 0xca,
	0x8f, 0x54, 0x38, 0x40, 0xf6, 0x24, 0xb2, 0x69, 0x15, 0xf4, 0x92, 0xad, 0x13, 0x62, 0x43, 0xa4,
	0x21, 0x17, 0x76, 0x2c, 0xf8, 0xda, 0xc6, 0x37, 0x81, 0x77, 0xb5, 0x05, 0xc6, 0x77, 0x9b, 0xb2,
	0x89, 0xa1, 0x7f, 0xf3, 0x0c, 0x00, 0xa9, 0x6f, 0x6d, 0xe7, 0xa7, 0x8b, 0xb1, 0x6f, 0x2e, 0x0d,
	0x24, 0x84, 0xa4, 0x90, 0x4c, 0x0b, 0x29, 0x21, 0x2d, 0xcc, 0x0a, 0x89, 0x29, 0x21, 0x31, 0x2b,
	0x24, 0x27, 0xc5, 0xf3, 0x70, 0xc8, 0xde, 0x6f, 0xd4, 0x15, 0xb5, 0x20, 0x5b, 0x8a, 0x99, 0x2f,
	0xac, 0xe9, 0x6a, 0x41, 0x41, 0xfc, 0x66, 0x15, 0x0c, 0x6e, 0x55, 0xc1, 0xc0, 0x76, 0x15, 0x84,
	0x92, 0x49, 0x21, 0x25, 0x5e, 0x80, 0xfd, 0x6c, 0xf9, 0xb2, 0x61, 0x60, 0x94, 0x43, 0x9b, 0x55,
	0xd0, 0xfe, 0xab, 0x2a, 0x00, 0x5b, 0x55, 0x10, 0xda, 0xae, 0x82, 0xce, 0x8c, 0x30, 0x25, 0x4c,
	0x0b, 0x33, 0xe2, 0x04, 0x1c, 0xf0, 0xae, 0x0d, 0x9b, 0x63, 0x60, 0xb3, 0x0a, 0x20, 0xe3, 0xe8,
	0xda, 0xae, 0x82, 0xf6, 0xc4, 0xa4, 0x90, 0x48, 0x88, 0x71, 0x36, 0xab, 0x19, 0x55, 0x74, 0xb3,
	0x0a, 0x7a, 0xb7, 0xaa, 0x20, 0x46, 0x28, 0x32, 0x42, 0x32, 0x23, 0x9e, 0x83, 0x51, 0x67, 0x4e,
	0x2d, 0xbb, 0xa5, 0x45, 0x99, 0x34, 0x9e, 0xd0, 0x4e, 0x0b, 0x89, 0x99, 0x5c, 0x88, 0x1b, 0xe0,
	0x07, 0x73, 0x21, 0x2e, 0xc4, 0xb7, 0xe7, 0x42, 0x5c, 0x17, 0x0f, 0x73, 0x21, 0xae, 0x9b, 0xef,
	0xc9, 0x85, 0xb8, 0x1e, 0x3e, 0x92, 0x0b, 0x71, 0x11, 0xbe, 0x37, 0x17, 0xe2, 0x62, 0xfc, 0x91,
	0x5c, 0x88, 0xe3, 0xf9, 0xe8, 0xe8, 0xe3, 0x56, 0xd8, 0xe3, 0xd1, 0x1b, 0x68, 0x0a, 0xf6, 0x63,
	0x15, 0x73, 0x5f, 0x2f, 0x59, 0x8a, 0x61, 0xc8, 0xf9, 0xb2, 0xac, 0xc9, 0xab, 0x4a, 0xd1, 0xa3,
	0x3d, 0x50, 0x51, 0x33, 0xef, 0x30, 0x82, 0x79, 0xfa, 0x1d, 0x9d, 0x65, 0xeb, 0xb8, 0x95, 0x4c,
	0x91, 0xe8, 0x97, 0x55, 0xd0, 0x3a, 0x33, 0xe9, 0x5e, 0xc6, 0x2d, 0xfe, 0xcb, 0x38, 0xb4, 0xbf,
	0x65, 0xdc, 0xe2, 0x5e, 0xc6, 0x17, 0x3b, 0xbe, 0xb9, 0xd4, 0x96, 0x10, 0x52, 0x62, 0xda, 0xdb,
	0x89, 0x67, 0x36, 0xab, 0xa0, 0x75, 0xab, 0x0a, 0xda, 0xb6, 0xab, 0xa0, 0x2d, 0x29, 0xa4, 0x9f,
	0x3e, 0x03, 0x08, 0xf2, 0x85, 0xa2, 0xe6, 0x59, 0x94, 0xb9, 0x10, 0xd7, 0xc6, 0x87, 0x46, 0xbf,
	0xec, 0x86, 0x43, 0x5e, 0xd5, 0x79, 0x65, 0xdd, 0xd2, 0x89, 0x62, 0x39, 0x54, 0x1d, 0x3a, 0x07,
	0x21, 0x99, 0x76, 0xba, 0xb6, 0xa2, 0xae, 0x32, 0xfd, 0x39, 0xe2, 0xab, 0xe1, 0x96, 0x4a, 0xe6,
	0x1c, 0xa1, 0x12, 0x43, 0x5f, 0x57, 0x01, 0x90, 0xba, 0x2c, 0xfb, 0x05, 0xca, 0xc0, 0x4e, 0x4d,
	0xcf, 0x97, 0xad, 0x92, 0xb9, 0x07, 0x2d, 0xd6, 0x22, 0x75, 0x68, 0xfa, 0xbc, 0x55, 0xc2, 0xdb,
	0x1d, 0xb7, 0x6e, 0x2a, 0x94, 0xaf, 0x83, 0xf0, 0xa5, 0x76, 0xd7, 0xdc, 0x77, 0xa8, 0x49, 0xa7,
	0xea, 0xda, 0x9c, 0xae, 0x59, 0xca, 0x43, 0xcb, 0x11, 0xdb, 0xb9, 0x6e, 0x2a, 0x44, 0xee, 0x4e,
	0xdd, 0xca, 0xbd, 0xb0, 0x6e, 0xed, 0x3a, 0xb0, 0x6e, 0x85, 0x07, 0xd6, 0xad, 0xe1, 0x43, 0xd3,
	0xad, 0x3d, 0x87, 0xaf, 0x5b, 0x23, 0x07, 0xd6, 0xad, 0x02, 0x5b, 0x93, 0x88, 0xac, 0xc9, 0x41,
	0xa6, 0x5b, 0xf1, 0xb4, 0xdc, 0x83, 0x7e, 0x1d, 0x7e, 0x59, 0xfa, 0xb5, 0xff, 0x25, 0xe8, 0xd7,
	0x81, 0x83, 0xea, 0xd7, 0xf5, 0x40, 0xfd, 0x3a, 0xb8, 0x3f, 0xfd, 0x1a, 0xb1, 0xf5, 0x2b, 0x56,
	0x4b, 0x07, 0xd5, 0xb1, 0x43, 0x2f, 0x4b, 0xc7, 0xc6, 0x0e, 0x5d, 0xc7, 0x1e, 0xfd, 0xe6, 0x52,
	0x8c, 0xe8, 0xd8, 0x0c, 0xd1, 0xb1, 0xd3, 0x42, 0x22, 0x49, 0x74, 0x6c, 0x52, 0x48, 0xa6, 0xc4,
	0x51, 0x18, 0x2e, 0x93, 0x0d, 0x8f, 0xee, 0xc9, 0x7d, 0x75, 0x0a, 0xb3, 0x2d, 0x23, 0x4c, 0x89,
	0x89, 0x06, 0xda, 0xf5, 0xc8, 0x66, 0x15, 0x70, 0x8c, 0xb8, 0x73, 0xbb, 0x0a, 0xba, 0x66, 0xb0,
	0x02, 0x27, 0xfa, 0x32, 0x50, 0xbf, 0xf6, 0x30, 0x9e, 0x6e, 0xa2, 0x11, 0x53, 0x42, 0x22, 0xed,
	0xa7, 0x5f, 0xd1, 0x56, 0x15, 0x1c, 0x21, 0x14, 0x33, 0x42, 0x72, 0xaa, 0xb1, 0x7e, 0xed, 0x67,
	0xd2, 0xfa, 0x30, 0x6d, 0x72, 0x52, 0x48, 0x26, 0x1c, 0xcd, 0xda, 0xc9, 0x73, 0x8e, 0x66, 0xed,
	0xe5, 0x79, 0xaa, 0x4d, 0x73, 0x21, 0x2e, 0xca, 0xa3, 0x5c, 0x88, 0x3b, 0xc2, 0x0f, 0xe7, 0x42,
	0x5c, 0x1f, 0xdf, 0x3f, 0xfa, 0xc7, 0x10, 0x65, 0x65, 0x73, 0x6d, 0x81, 0x38, 0x8b, 0x37, 0x55,
	0xd3, 0x22, 0xa3, 0xaf, 0xc2, 0xf0, 0x9a, 0x6c, 0xae, 0x31, 0x1f, 0x32, 0xc6, 0xc7, 0xdb, 0xc6,
	0xc2, 0xc9, 0x53, 0x75, 0x03, 0x43, 0x9c, 0xf7, 0x89, 0x1a, 0x37, 0x99, 0x61, 0xa7, 0xb6, 0xec,
	0xcd, 0xed, 0x33, 0xd0, 0xca, 0x73, 0xf6, 0xaf, 0x18, 0xd8, 0xfe, 0xcb, 0x5f, 0xb6, 0x75, 0x7c,
	0xf6, 0x0c, 0xb4, 0xf2, 0x40, 0x82, 0x6b, 0x0e, 0xd3, 0xe8, 0xbf, 0x04, 0x90, 0x9f, 0x57, 0x0d,
	0x43, 0x37, 0x6a, 0x52, 0xd0, 0x22, 0x0c, 0xbb, 0x1c, 0x5f, 0xa2, 0xd4, 0xc2, 0xc9, 0x51, 0x5f,
	0x8d, 0x70, 0x9b, 0x78, 0x99, 0x92, 0xb2, 0x42, 0x27, 0xf8, 0xe7, 0x8f, 0xdc, 0x9c, 0x12, 0xa4,
	0x0f, 0x0b, 0xba, 0x5e, 0x42, 0x17, 0x61, 0x67, 0x45, 0x31, 0x0a, 0x8a, 0x46, 0x6d, 0x80, 0x70,
	0x32, 0x5e, 0x27, 0xf0, 0xba, 0x21, 0x93, 0xc9, 0x2a, 0x97, 0x16, 0x28, 0x9d, 0x64, 0x33, 0x8c,
	0xfe, 0xf2, 0x28, 0x1c, 0x96, 0x70, 0x7b, 0x17, 0xd5, 0x72, 0xa5, 0xa4, 0x5c, 0x29, 0xde, 0xc7,
	0xab, 0xb3, 0xc8, 0xe6, 0x19, 0xba, 0x0a, 0x11, 0x73, 0xea, 0xdd, 0xdd, 0xd6, 0xda, 0x78, 0xcd,
	0x67, 0x5b, 0x24, 0x9e, 0x72, 0xd4, 0xfa, 0x0f, 0x95, 0x61, 0xbf, 0x59, 0x51, 0x0a, 0xd8, 0xe6,
	0xf3, 0xc8, 0xa1, 0xaa, 0x78, 0x76, 0x62, 0x4f, 0xd1, 0xa3, 0x89, 0x9d, 0xc3, 0x99, 0x6d, 0x91,
	0x90, 0x2d, 0xd8, 0x55, 0xdc, 0x45, 0xc8, 0x55, 0x0c, 0x55, 0x37, 0x54, 0x6b, 0x83, 0x18, 0x39,
	0x91, 0x1d, 0xda, 0x1e, 0xb7, 0x58, 0xd5, 0x56, 0x17, 0x18, 0x95, 0xe4, 0xd0, 0xa3, 0xbf, 0x00,
	0x90, 0x57, 0xb4, 0x62, 0x45, 0x57, 0x35, 0x2b, 0x6f, 0xae, 0x2f, 0x9b, 0x8a, 0x85, 0x15, 0x3e,
	0x9e, 0x26, 0x77, 0xf6, 0x58, 0xcf, 0xc6, 0xdd, 0x39, 0x71, 0x8d, 0x49, 0x5e, 0xa4, 0x82, 0xaf,
	0x69, 0x96, 0xb1, 0x21, 0x9e, 0xc4, 0x33, 0xeb, 0x27, 0xcf, 0x40, 0x08, 0xb6, 0xb6, 0xd0, 0x19,
	0xf6, 0x13, 0xd0, 0xca, 0xf3, 0x64, 0x5e, 0x3d, 0x7d, 0x06, 0x5a, 0xb9, 0x16, 0xa9, 0x57, 0xf1,
	0x32, 0xa2, 0x9b, 0x2e, 0x9d, 0x65, 0x28, 0x2b, 0xea, 0xc3, 0xbc, 0xa1, 0x3c, 0x30, 0x54, 0x8b,
	0xba, 0xb9, 0x8d, 0xc6, 0x06, 0xd4, 0xb4, 0x15, 0x61, 0x92, 0x28, 0x0f, 0x9a, 0x86, 0x91, 0x3a,
	0x29, 0x1c, 0x55, 0xe8, 0xb6, 0xc2, 0x22, 0x6a, 0xa8, 0x15, 0x1b, 0x10, 0x15, 0x0f, 0xe3, 0x9b,
	0xb0, 0xc7, 0x50, 0x56, 0x95, 0x1a, 0x9f, 0xe0, 0x3b, 0xff, 0x24, 0x4c, 0x33, 0x2f, 0x5b, 0x85,
	0x35, 0xc6, 0x98, 0x05, 0x52, 0x37, 0x61, 0xb4, 0x05, 0xdd, 0x87, 0x83, 0x86, 0xf2, 0xe9, 0xba,
	0x62, 0xda, 0xe6, 0x8c, 0x99, 0xb7, 0xf4, 0xbc, 0x5c, 0x2c, 0xc6, 0xba, 0x48, 0xdf, 0x9f, 0xf7,
	0x55, 0x04, 0xf3, 0xb2, 0xa6, 0x56, 0xd6, 0x4b, 0x64, 0x73, 0xa7, 0x5d, 0x4c, 0xd6, 0x4a, 0xbf,
	0xb3, 0x4c, 0xe3, 0xb5, 0x65, 0x2a, 0xf5, 0xb1, 0x02, 0x28, 0xab, 0xb9, 0xa4, 0x5f, 0x29, 0x16,
	0xd1, 0xc7, 0xf0, 0x88, 0x4f, 0xb9, 0x86, 0x52, 0xd6, 0xef, 0x63, 0xab, 0xa6, 0x6d, 0xac, 0x4b,
	0x3c, 0x83, 0x65, 0x74, 0x7f, 0x06, 0xba, 0x46, 0x3b, 0x0d, 0x6c, 0xf9, 0x3d, 0x6e, 0xf5, 0x15,
	0x3f, 0x58, 0x2f, 0x5e, 0x22, 0x42, 0xd0, 0x43, 0x38, 0x64, 0x28, 0x66, 0x45, 0xd7, 0x4c, 0xa5,
	0xbe, 0x69, 0xe1, 0xc3, 0x6a, 0x5a, 0xbf, 0x5d, 0x82, 0xa7, 0x6d, 0xcb, 0x70, 0xd8, 0xaf, 0x64,
	0xd6, 0xb8, 0xee, 0xfd, 0x34, 0x6e, 0x68, 0x47, 0x01, 0xac, 0x75, 0xd8, 0x67, 0x61, 0xf3, 0xb0,
	0xa4, 0x17, 0xa8, 0xfe, 0xc6, 0x4d, 0xeb, 0xf1, 0xf8, 0x2c, 0x94, 0xe2, 0x26, 0x23, 0xc0, 0x75,
	0xfb, 0x1e, 0xec, 0x51, 0xb5, 0x35, 0x05, 0x8f, 0x7d, 0x31, 0xff, 0x40, 0x5e, 0x21, 0x41, 0x88,
	0x46, 0xd3, 0xb6, 0x55, 0xea, 0x76, 0x88, 0xef, 0xca, 0x2b, 0xe8, 0x1d, 0xd8, 0x2d, 0x57, 0x2a,
	0xf9, 0x15, 0xd5, 0x50, 0x1e, 0xc8, 0xa5, 0x52, 0x2c, 0xbd, 0xe7, 0x5d, 0xb4, 0xf7, 0xf3, 0x47,
	0x1e, 0xd6, 0x6c, 0xab, 0x14, 0x96, 0x2b, 0x95, 0xeb, 0xec, 0x11, 0x4d, 0xc3, 0xb0, 0xdd, 0x1c,
	0x5c, 0xa9, 0x57, 0x03, 0x2b, 0x05, 0x19, 0x29, 0xae, 0xd2, 0x65, 0x18, 0x2e, 0xe8, 0x86, 0x69,
	0x6f, 0x6c, 0x34, 0xe8, 0x70, 0xa4, 0x8e, 0x71, 0x4e, 0x37, 0x4c, 0xba, 0x45, 0xd1, 0x88, 0x99,
	0x04, 0x0b, 0xce, 0x1b, 0x22, 0xc1, 0x34, 0x56, 0x6c, 0x09, 0xe7, 0xfd, 0x25, 0x98, 0xc6, 0x4a,
	0x9d, 0x04, 0xe7, 0x0d, 0x9a, 0x85, 0xdd, 0x76, 0xe5, 0xcd, 0x4a, 0x71, 0x23, 0xc8, 0xda, 0xcb,
	0xb6, 0x49, 0x76, 0x43, 0x17, 0x2b, 0xc5, 0x0d, 0xdc, 0x6e, 0x66, 0x54, 0x13, 0xce, 0x81, 0x40,
	0x4e, 0x48, 0x49, 0x09, 0xe3, 0x5b, 0xf0, 0x88, 0xd3, 0x61, 0xca, 0x72, 0xde, 0xd4, 0x0b, 0xf7,
	0x14, 0xcb, 0xf6, 0xb4, 0x86, 0x02, 0xc4, 0x84, 0x24, 0x7b, 0x03, 0xbb, 0xab, 0x2c, 0x2f, 0x12,
	0x36, 0xe6, 0x68, 0xdd, 0x81, 0xd1, 0x9d, 0xa2, 0xa8, 0x05, 0x35, 0xe6, 0xab, 0xa8, 0xef, 0x2a,
	0xcb, 0xa6, 0x4b, 0x00, 0x51, 0x0c, 0x21, 0xa9, 0xf7, 0x41, 0x9d, 0xdc, 0x6c, 0xcd, 0x80, 0x35,
	0x14, 0xcb, 0xd8, 0xb0, 0x7b, 0x7a, 0x38, 0xa0, 0x96, 0xed, 0x12, 0x62, 0x3c, 0x12, 0x66, 0x61,
	0x1d, 0x7d, 0x09, 0xf6, 0x6a, 0xba, 0x57, 0xc8, 0xb9, 0x40, 0x21, 0x3d, 0x9a, 0xee, 0xe6, 0xbf,
	0x01, 0xbb, 0x3d, 0xcc, 0x47, 0x7d, 0x3d, 0x52, 0x17, 0x87, 0x2b, 0x86, 0xdb, 0x2e, 0x85, 0x0d,
	0x97, 0xa8, 0x29, 0xd8, 0x69, 0x5b, 0xaf, 0xc7, 0x88, 0xf5, 0x7a, 0xec, 0xcb, 0x2a, 0x68, 0x4f,
	0x35, 0x32, 0x5c, 0x6d, 0x62, 0x74, 0x05, 0x32, 0x2d, 0x9d, 0x5f, 0x5e, 0x5f, 0x59, 0x51, 0x0c,
	0x55, 0x5b, 0x8d, 0x8d, 0x04, 0xb4, 0xa1, 0x43, 0xea, 0xa5, 0xf4, 0xa2, 0x4d, 0x8e, 0xae, 0xc3,
	0x1e, 0xca, 0x6b, 0x37, 0xe3, 0x04, 0xe1, 0x3f, 0x51, 0xc7, 0x4f, 0x19, 0x5c, 0x43, 0xd3, 0x21,
	0x75, 0x53, 0x3e, 0xd6, 0x84, 0x39, 0x18, 0xb5, 0xa7, 0x50, 0x99, 0x98, 0x4b, 0xb8, 0x2e, 0x27,
	0x03, 0xea, 0xd2, 0x29, 0xf1, 0x8c, 0x61, 0xde, 0xa6, 0x47, 0x1f, 0xc1, 0x1e, 0xca, 0x6c, 0x57,
	0x66, 0x94, 0x08, 0x98, 0xde, 0xa3, 0xca, 0xae, 0xb7, 0xd3, 0xb2, 0x9d, 0x52, 0x77, 0xd9, 0xf5,
	0x0e, 0xbd, 0x01, 0x7b, 0x71, 0xb7, 0xcb, 0x05, 0x2b, 0x5f, 0x28, 0xad, 0x9b, 0x96, 0x62, 0xc4,
	0x4e, 0x07, 0x54, 0x91, 0x93, 0x22, 0x8c, 0x7c, 0x8e, 0x52, 0xa3, 0xef, 0xc3, 0xc1, 0xa2, 0x9e,
	0xd7, 0x74, 0x3a, 0xf9, 0xdc, 0x72, 0xce, 0x04, 0xca, 0xe9, 0x2b, 0xea, 0xb7, 0x74, 0x32, 0xfb,
	0x5c, 0xc2, 0x0c, 0x78, 0xae, 0xb6, 0x7b, 0x2e, 0xeb, 0x16, 0xf6, 0xf6, 0x14, 0xbc, 0xcd, 0x7f,
	0x22, 0xdf, 0x97, 0xcd, 0x82, 0xa1, 0x56, 0xac, 0xbc, 0xaa, 0x7d, 0x42, 0x3d, 0x94, 0xd8, 0xd9,
	0x80, 0x02, 0xba, 0xa4, 0x57, 0x1c, 0x49, 0xa2, 0x6e, 0x5d, 0xa5, 0x72, 0x72, 0x8e, 0x98, 0x1b,
	0xb6, 0x14, 0xf4, 0xf7, 0x00, 0x8c, 0xef, 0x5a, 0xd4, 0x18, 0x29, 0x6a, 0xca, 0x77, 0x99, 0x06,
	0x8a, 0x27, 0x9d, 0xde, 0x25, 0x1d, 0x5f, 0x0e, 0x22, 0x1a, 0x16, 0x61, 0xbf, 0x9f, 0x05, 0x85,
	0x78, 0xd8, 0x76, 0x4f, 0xd9, 0x20, 0xd6, 0x74, 0x97, 0x84, 0x7f, 0xa2, 0x7e, 0xd8, 0x7e, 0x5f,
	0x2e, 0xad, 0x2b, 0xc4, 0x54, 0xed, 0x92, 0xe8, 0xc3, 0xc5, 0xd6, 0x19, 0x70, 0xf1, 0x77, 0xe0,
	0x17, 0x55, 0xf0, 0xbf, 0x00, 0x3c, 0x01, 0x07, 0xb1, 0x3b, 0x1a, 0x17, 0xc9, 0x1c, 0x50, 0xb5,
	0xd5, 0xf8, 0x9c, 0xae, 0x59, 0x86, 0x5e, 0x42, 0xed, 0x09, 0x21, 0x2d, 0x64, 0xe0, 0x24, 0x3c,
	0x2e, 0x51, 0x95, 0x7e, 0x41, 0x62, 0xda, 0x2f, 0xee, 0xd6, 0xca, 0xa8, 0x77, 0xca, 0x76, 0x8d,
	0x88, 0xf7, 0x95, 0x82, 0xfd, 0x90, 0x5b, 0x64, 0x69, 0x33, 0xc4, 0x25, 0xd2, 0x42, 0x62, 0x46,
	0x48, 0xa7, 0xe0, 0x30, 0x8c, 0xda, 0xde, 0x5b, 0xfc, 0xed, 0xca, 0xaa, 0x21, 0x17, 0x15, 0x13,
	0xb5, 0x13, 0x67, 0x0d, 0x9e, 0x86, 0x03, 0xf3, 0xaa, 0x59, 0x50, 0x4a, 0x25, 0x59, 0x53, 0xf4,
	0x75, 0x33, 0x6e, 0xdb, 0xdd, 0xe1, 0x64, 0x46, 0x48, 0xce, 0x08, 0xc9, 0x59, 0x21, 0x95, 0x84,
	0x33, 0x30, 0x29, 0xea, 0x56, 0x9c, 0x75, 0x4c, 0xfc, 0x95, 0xb8, 0xa4, 0x9a, 0xf7, 0xe2, 0x34,
	0xfc, 0x57, 0x56, 0x34, 0x2b, 0x5e, 0xeb, 0xab, 0x78, 0x6d, 0xc0, 0x5a, 0x53, 0x33, 0xe2, 0x19,
	0x88, 0x5c, 0xf6, 0xb6, 0xed, 0x61, 0xf5, 0xb2, 0x20, 0x1d, 0xa0, 0x41, 0xba, 0x94, 0x78, 0x1a,
	0x46, 0x98, 0x01, 0x67, 0x93, 0xa0, 0xcd, 0x2a, 0xe8, 0xdc, 0xaa, 0x82, 0x8e, 0xed, 0x2a, 0xe8,
	0x98, 0x16, 0x66, 0x84, 0x74, 0x5a, 0x7c, 0x05, 0xc2, 0x07, 0xf2, 0x8a, 0x4d, 0x11, 0x63, 0xe1,
	0xd2, 0xc8, 0x76, 0x15, 0x70, 0x89, 0x8c, 0x90, 0x49, 0x0a, 0xe9, 0xc4, 0xd7, 0x55, 0xd0, 0x82,
	0xfd, 0x3e, 0xac, 0x45, 0xdc, 0x7e, 0x5f, 0xbf, 0xc7, 0x97, 0x13, 0xcf, 0x40, 0xfe, 0x81, 0xbd,
	0x69, 0xbb, 0xc9, 0x86, 0xb6, 0xaa, 0x60, 0x90, 0x90, 0xa5, 0x84, 0x64, 0x5a, 0x3c, 0x0f, 0xfb,
	0xdc, 0xfb, 0xa4, 0x4d, 0xd9, 0xbf, 0x59, 0x05, 0xc3, 0xcc, 0x91, 0xe4, 0x92, 0x53, 0x42, 0x3a,
	0x29, 0x24, 0xa7, 0xc5, 0x51, 0x67, 0x3b, 0x72, 0x09, 0x1c, 0xd9, 0xaa, 0x82, 0xe3, 0xdb, 0x64,
	0x47, 0x14, 0x52, 0xa4, 0x5c, 0x67, 0x8b, 0x71, 0x93, 0x61, 0x0b, 0x3c, 0x4e, 0xc8, 0x52, 0x42,
	0x2a, 0x2d, 0x0a, 0x70, 0x90, 0x2d, 0xce, 0xda, 0x62, 0xad, 0x75, 0xcb, 0xe9, 0xad, 0x2a, 0x38,
	0x85, 0xbb, 0x25, 0x35, 0x25, 0xc4, 0x53, 0xd3, 0xe2, 0x6b, 0xf0, 0xec, 0x6e, 0xeb, 0xc2, 0x5d,
	0xd6, 0xd9, 0xad, 0x2a, 0x78, 0x85, 0x94, 0x35, 0x2b, 0xa4, 0x27, 0x73, 0x21, 0x0e, 0xf0, 0xad,
	0xb9, 0x10, 0xd7, 0xc1, 0x77, 0x3a, 0x41, 0x62, 0xb7, 0x43, 0xdb, 0xc7, 0xf7, 0xe7, 0x42, 0xdc,
	0x20, 0x3f, 0xe4, 0x38, 0xb7, 0xc7, 0xf9, 0x91, 0x5c, 0x88, 0x8b, 0xf3, 0x27, 0x73, 0x21, 0xee,
	0x14, 0x7f, 0x3a, 0x17, 0xe2, 0x5e, 0xe1, 0xcf, 0x8e, 0xfe, 0xd3, 0x36, 0x78, 0x9a, 0x38, 0x1e,
	0x78, 0x25, 0x51, 0xe7, 0xe3, 0xae, 0x6a, 0xad, 0xb1, 0x48, 0xce, 0x6d, 0xb7, 0xb3, 0x18, 0x26,
	0xfb, 0x5f, 0x59, 0xb1, 0xd6, 0x74, 0x1a, 0x5c, 0x8e, 0xec, 0xb0, 0x33, 0xb2, 0x96, 0x55, 0x99,
	0x27, 0x04, 0x12, 0x5c, 0x73, 0x7e, 0xa3, 0x19, 0x18, 0xaa, 0xc8, 0xd6, 0x1a, 0xf3, 0xff, 0xea,
	0x15, 0xd6, 0x82, 0x6c, 0xad, 0x11, 0x23, 0x5f, 0x31, 0xa8, 0xc2, 0x22, 0x21, 0x54, 0xc2, 0x81,
	0x44, 0x18, 0x95, 0xd7, 0x2d, 0x9d, 0x26, 0x52, 0x6d, 0x67, 0x21, 0x14, 0xe8, 0x46, 0xf6, 0x62,
	0x86, 0xac, 0x6e, 0x5a, 0xb6, 0x8f, 0x90, 0x84, 0xdd, 0x1e, 0xf6, 0x76, 0xe2, 0xa3, 0xf4, 0xd8,
	0x3e, 0x4a, 0xc8, 0x68, 0x5d, 0x03, 0xd9, 0x16, 0x29, 0xbc, 0xe6, 0xe2, 0xc9, 0xd6, 0xec, 0x53,
	0x0f, 0x6f, 0x47, 0x60, 0xd1, 0xb6, 0xc5, 0xea, 0x2a, 0xfd, 0x22, 0xf7, 0xcd, 0xa5, 0xf6, 0x84,
	0x80, 0x57, 0xcb, 0x18, 0xec, 0x73, 0xcb, 0x62, 0x99, 0x53, 0x32, 0xb8, 0x21, 0x16, 0xfa, 0x6e,
	0x4f, 0x0b, 0x19, 0x61, 0x8a, 0x85, 0xb9, 0x7f, 0xd4, 0x01, 0x7b, 0xeb, 0x86, 0xc6, 0xe9, 0x49,
	0xb0, 0xef, 0x9e, 0xac, 0x1b, 0xbf, 0xd6, 0xfd, 0x8c, 0x5f, 0x09, 0x76, 0xbb, 0x62, 0x08, 0x66,
	0xac, 0x8d, 0x38, 0x20, 0xaf, 0xfa, 0x1b, 0xce, 0xce, 0x94, 0xc1, 0xf3, 0xe8, 0xae, 0xa2, 0xae,
	0xae, 0x59, 0xe2, 0x88, 0xe3, 0x1d, 0xf0, 0xf6, 0x2f, 0x0e, 0xb8, 0xfc, 0x84, 0x70, 0x2d, 0x2a,
	0x61, 0xfa, 0x8f, 0x79, 0xfb, 0x8b, 0x8d, 0x79, 0xc7, 0x0b, 0x8c, 0x79, 0xe7, 0x7e, 0xc7, 0x1c,
	0x2d, 0xc0, 0x4e, 0xe6, 0x38, 0x31, 0x37, 0x34, 0xde, 0xc0, 0x57, 0xab, 0x0d, 0x55, 0xff, 0xce,
	0x1e, 0x8a, 0x01, 0xc9, 0x16, 0x83, 0x6e, 0x60, 0xbf, 0xa7, 0xa0, 0x97, 0xf1, 0x06, 0x44, 0x02,
	0xc4, 0xd0, 0x7f, 0x02, 0xe8, 0x86, 0xb5, 0x73, 0x02, 0x74, 0xdb, 0xac, 0xf8, 0x33, 0x32, 0x20,
	0x2f, 0xb3, 0xf0, 0x82, 0x13, 0x68, 0xa4, 0x39, 0x80, 0x2b, 0x2f, 0x1c, 0xa8, 0x60, 0xde, 0x45,
	0xaf, 0xec, 0x7d, 0x7d, 0x31, 0xfa, 0xcd, 0xa5, 0x48, 0x52, 0x48, 0x50, 0xbd, 0x97, 0x12, 0xd2,
	0xc2, 0x4c, 0xd0, 0x6a, 0x68, 0x67, 0x01, 0xc7, 0x76, 0x92, 0xa1, 0xa3, 0x11, 0xbc, 0xd1, 0xdf,
	0xb7, 0xc2, 0xa8, 0xb3, 0x1a, 0x9c, 0x1c, 0xce, 0x77, 0xb3, 0x1e, 0x6e, 0xc0, 0x08, 0xb1, 0x4d,
	0x6a, 0x59, 0xa6, 0x36, 0x5f, 0x57, 0x92, 0x1a, 0x30, 0xa4, 0xd6, 0x76, 0x8d, 0xa5, 0x1e, 0xc3,
	0xfd, 0xe8, 0x9e, 0x2a, 0xa1, 0x97, 0x34, 0x55, 0xda, 0x0f, 0x3a, 0x55, 0x2e, 0x76, 0x7f, 0x73,
	0xa9, 0x0b, 0x0f, 0x1b, 0xde, 0x95, 0x52, 0xa3, 0x3f, 0x6d, 0x83, 0x43, 0xce, 0x08, 0x5c, 0xa5,
	0xad, 0x61, 0x06, 0xce, 0x77, 0x34, 0x0e, 0xcb, 0x70, 0x80, 0x8e, 0x03, 0xed, 0xcc, 0xbc, 0x1d,
	0x6d, 0x60, 0xc3, 0x31, 0xd6, 0x78, 0x38, 0xbc, 0xd5, 0x67, 0xd3, 0xb6, 0xcf, 0xd8, 0xf9, 0xe9,
	0x0f, 0x69, 0x80, 0x14, 0xd8, 0xef, 0x8c, 0xcf, 0xdc, 0xba, 0x69, 0xe9, 0x65, 0xf2, 0x88, 0xe6,
	0x61, 0x97, 0x3d, 0x5d, 0x57, 0xf6, 0x11, 0x3a, 0xee, 0xfe, 0xfc, 0x51, 0x3b, 0xe1, 0x7b, 0xfc,
	0x0c, 0x00, 0x89, 0x63, 0xf3, 0x76, 0x65, 0xf4, 0x4f, 0x23, 0xb0, 0xcb, 0x29, 0x07, 0xbd, 0x0f,
	0xbb, 0x4d, 0xb2, 0x15, 0xe4, 0x09, 0x01, 0x93, 0x3f, 0xb5, 0x9f, 0xad, 0xa4, 0xa6, 0xdf, 0xf0,
	0x96, 0x4c, 0xa5, 0xd1, 0x9a, 0xcb, 0xd8, 0xc0, 0xb4, 0x07, 0x97, 0x88, 0xa7, 0x26, 0xc4, 0xcc,
	0x7e, 0xc5, 0xdb, 0xeb, 0x2d, 0xdb, 0x22, 0xf5, 0xd8, 0x12, 0x69, 0x11, 0x16, 0x1c, 0xa8, 0x9b,
	0x3d, 0xac, 0x24, 0x3a, 0x87, 0x2e, 0xed, 0xb7, 0x24, 0xef, 0xf4, 0xc9, 0xb6, 0x48, 0x7d, 0x45,
	0xcf, 0x1b, 0x5a, 0x6a, 0x19, 0xf6, 0x15, 0xc8, 0x08, 0xd1, 0xc2, 0xf2, 0x14, 0x1a, 0xc6, 0x2c,
	0x9b, 0xef, 0xed, 0xb7, 0x4c, 0xd7, 0x60, 0x67, 0x5b, 0xa4, 0x68, 0xa1, 0xf6, 0x48, 0x47, 0xf4,
	0xe2, 0xcf, 0xe0, 0x2f, 0xaa, 0xa0, 0x0f, 0x46, 0x21, 0x24, 0x6f, 0xe3, 0x64, 0xe4, 0x40, 0x66,
	0x0c, 0xfc, 0xba, 0x0a, 0xfe, 0x1c, 0xc2, 0x3f, 0x03, 0x30, 0x84, 0x5f, 0x9d, 0xfb, 0x21, 0x80,
	0x8f, 0xe0, 0xa0, 0x77, 0x44, 0x93, 0x1d, 0x74, 0x6c, 0xe0, 0x70, 0xfd, 0x60, 0x24, 0x39, 0xbb,
	0x5b, 0xe1, 0x58, 0x83, 0x5e, 0x4c, 0xf6, 0xd2, 0xfe, 0x88, 0xdb, 0xcd, 0x87, 0xc7, 0x7d, 0x5b,
	0x9e, 0xec, 0xa0, 0x6d, 0x40, 0x9d, 0x6f, 0x6b, 0xf7, 0x34, 0xfd, 0x81, 0x06, 0x9f, 0x74, 0x41,
	0x58, 0x83, 0x9c, 0x49, 0x7f, 0xc3, 0xc1, 0xf3, 0x28, 0xe6, 0xae, 0xd7, 0x84, 0x6b, 0xdb, 0x18,
	0x0e, 0x67, 0x97, 0x96, 0x16, 0xe2, 0x74, 0x5b, 0x48, 0xb6, 0xc6, 0x01, 0x3c, 0x5b, 0x47, 0x8c,
	0xf7, 0x9a, 0x09, 0x1a, 0x84, 0x1e, 0x0e, 0xe3, 0xfd, 0x28, 0x4e, 0x43, 0xd9, 0x70, 0x04, 0x0d,
	0xfa, 0x10, 0xca, 0xd6, 0xda, 0x70, 0x08, 0x93, 0xc1, 0x33, 0x68, 0x68, 0xe7, 0x77, 0x12, 0x83,
	0x1e, 0x86, 0x44, 0x0e, 0x09, 0x52, 0xc3, 0xdb, 0xf0, 0x38, 0x3c, 0xe2, 0x21, 0x74, 0x5b, 0x4c,
	0x3c, 0x40, 0x27, 0x1b, 0x7e, 0x7c, 0x7f, 0xf2, 0xc3, 0x09, 0xfc, 0x63, 0x38, 0x4c, 0x6d, 0xa7,
	0x38, 0x36, 0x83, 0xe0, 0xad, 0xdd, 0x04, 0x9e, 0x0e, 0x14, 0xc8, 0x1c, 0x91, 0xe1, 0x4e, 0xe6,
	0xfb, 0xc3, 0x9b, 0x81, 0xf2, 0x62, 0x00, 0x35, 0xfe, 0x38, 0xdc, 0xed, 0xaa, 0x98, 0x39, 0xda,
	0x1a, 0x03, 0x70, 0x1c, 0x0d, 0x7b, 0xe7, 0x42, 0xf0, 0x68, 0xbc, 0xba, 0x83, 0xbc, 0xe1, 0x78,
	0xc4, 0x51, 0xcc, 0x97, 0xb4, 0x36, 0x22, 0x67, 0xd1, 0x11, 0x3f, 0x8a, 0x9d, 0x63, 0xf2, 0x1a,
	0x3a, 0x5f, 0x47, 0xe8, 0xd5, 0xda, 0x13, 0xcc, 0x00, 0xa1, 0x4f, 0xc3, 0x3d, 0xf6, 0x6c, 0x8e,
	0x63, 0x5b, 0x6e, 0x77, 0x6e, 0x92, 0xd4, 0xf4, 0xe1, 0x26, 0x95, 0xbc, 0x86, 0x84, 0x5d, 0xb8,
	0x3d, 0x89, 0x93, 0xe1, 0x01, 0x0f, 0x7b, 0x9c, 0xbd, 0x86, 0x57, 0x76, 0x17, 0xa3, 0x93, 0xd8,
	0x3c, 0xab, 0x45, 0xb4, 0x26, 0x86, 0xc5, 0x0e, 0x60, 0x1a, 0x9d, 0xf4, 0x5d, 0x9a, 0xc1, 0x23,
	0x36, 0xd9, 0x88, 0xab, 0xe1, 0xc0, 0x9d, 0x45, 0x27, 0x82, 0x38, 0x6a, 0xe3, 0x37, 0x81, 0xe2,
	0x01, 0x84, 0x3b, 0x87, 0x31, 0x87, 0x66, 0xfd, 0xe9, 0x7d, 0x75, 0xff, 0x84, 0x43, 0x54, 0xd0,
	0x8b, 0x0a, 0x1e, 0x16, 0x16, 0x83, 0x99, 0xd3, 0x8b, 0x0a, 0x1c, 0x47, 0xc7, 0x7d, 0x76, 0x1f,
	0xa7, 0x53, 0x57, 0x86, 0xbb, 0xe9, 0x06, 0x49, 0xf7, 0x4d, 0xf1, 0x38, 0xec, 0x70, 0x25, 0xc3,
	0xc1, 0x56, 0x15, 0xb4, 0x6f, 0x57, 0x41, 0x27, 0xf1, 0xe7, 0x84, 0x74, 0x2e, 0xc4, 0xb5, 0xf3,
	0x1d, 0xa3, 0x4f, 0xfb, 0x60, 0x5f, 0x9d, 0x1d, 0x4c, 0xf6, 0xd7, 0xc6, 0xb9, 0x29, 0xf0, 0xdd,
	0xe5, 0xa6, 0x5a, 0x5f, 0x72, 0x6e, 0xaa, 0xed, 0xbb, 0xcc, 0x4d, 0x85, 0x0e, 0x25, 0x37, 0x75,
	0x0b, 0x0e, 0x95, 0x65, 0xbc, 0x32, 0xdd, 0x7d, 0x98, 0x37, 0xd5, 0x3f, 0xa2, 0x5e, 0x68, 0x8f,
	0x38, 0xf4, 0x65, 0x15, 0xb4, 0x4e, 0xd9, 0x81, 0xf2, 0x30, 0x71, 0x28, 0xcf, 0xb5, 0xc6, 0x3e,
	0x96, 0xfa, 0xcb, 0xf2, 0x43, 0xc9, 0xdd, 0x65, 0x8b, 0xea, 0x1f, 0x29, 0x28, 0x57, 0x1f, 0xf0,
	0xee, 0xd8, 0x53, 0xc0, 0x9b, 0x19, 0xa5, 0xde, 0xa0, 0xf7, 0xc7, 0x24, 0xaf, 0x5e, 0x31, 0x14,
	0xd3, 0x54, 0x75, 0xcd, 0x06, 0x5f, 0x53, 0x0f, 0xf5, 0x7c, 0x10, 0x4e, 0x64, 0xae, 0xc6, 0xe5,
	0x12, 0x1e, 0x75, 0x09, 0x63, 0xe0, 0xeb, 0xad, 0x10, 0xec, 0x61, 0x4b, 0x44, 0x31, 0x0c, 0xdd,
	0xc0, 0xce, 0x21, 0x1e, 0xd2, 0x9b, 0x7b, 0x34, 0x4a, 0x7c, 0x56, 0xc2, 0x04, 0xd5, 0xed, 0xd7,
	0x88, 0x38, 0x9a, 0xbb, 0xfe, 0x1f, 0x6d, 0x36, 0x2c, 0x62, 0xf0, 0x27, 0xa0, 0x6f, 0x34, 0x7a,
	0xae, 0x57, 0xec, 0x49, 0x51, 0x33, 0x76, 0x72, 0x72, 0x3c, 0x33, 0x3b, 0x5b, 0xcb, 0x67, 0xe3,
	0x5f, 0x91, 0x9f, 0x80, 0xf0, 0xb9, 0x2e, 0xa3, 0x33, 0xf6, 0xf8, 0x71, 0xe8, 0xc7, 0x80, 0x40,
	0x27, 0x7e, 0x09, 0x9e, 0x3e, 0x03, 0x9b, 0x00, 0xfd, 0x1c, 0xfc, 0xae, 0x0a, 0xfe, 0x1d, 0x20,
	0xfb, 0x17, 0x29, 0x21, 0x8e, 0xd7, 0x7d, 0x9c, 0x04, 0x6e, 0xe3, 0x44, 0x64, 0x5c, 0x37, 0xe2,
	0xcb, 0x8a, 0xf5, 0x40, 0x51, 0xb4, 0x78, 0x6a, 0x72, 0x32, 0x2e, 0x6b, 0xc5, 0x78, 0x66, 0x76,
	0x76, 0x22, 0x7e, 0x6d, 0x75, 0x22, 0x7e, 0x87, 0xd0, 0xa5, 0xe3, 0xaf, 0xc7, 0xd3, 0x0f, 0x1f,
	0x62, 0x4a, 0xb9, 0x54, 0x8a, 0xa7, 0x27, 0x27, 0xc7, 0xd3, 0xb3, 0xb3, 0x71, 0xc5, 0x91, 0x67,
	0x0a, 0xf1, 0x4c, 0xfc, 0xf5, 0x78, 0xa6, 0x46, 0x93, 0xa1, 0xf5, 0x74, 0xd3, 0x4c, 0xc4, 0xdf,
	0xd5, 0xd7, 0xe3, 0x05, 0x59, 0x8b, 0xcb, 0x25, 0x53, 0x8f, 0x53, 0x84, 0xc1, 0x46, 0x5c, 0xd6,
	0xe2, 0xca, 0x43, 0xb9, 0x60, 0xb9, 0x48, 0xe3, 0x25, 0xf5, 0x9e, 0x12, 0x4f, 0x4f, 0xa6, 0x27,
	0x70, 0x53, 0xfa, 0x9f, 0x3e, 0x03, 0x3c, 0x8a, 0x6c, 0x57, 0x01, 0xa4, 0x2d, 0xc0, 0x5b, 0x15,
	0xfe, 0x00, 0x9f, 0x3e, 0x03, 0x1d, 0x28, 0xf4, 0xab, 0x2a, 0x68, 0xa9, 0x65, 0xf5, 0x49, 0xeb,
	0xaf, 0x3c, 0x7d, 0x06, 0x5e, 0x1f, 0xfe, 0xde, 0xef, 0xaa, 0x60, 0x7a, 0xd1, 0x32, 0x54, 0x6d,
	0x35, 0x6e, 0x28, 0x78, 0x20, 0x15, 0xcd, 0xc2, 0x0f, 0xb4, 0x24, 0x7b, 0x82, 0x0b, 0xf1, 0x75,
	0x73, 0x5d, 0x2e, 0x95, 0x36, 0xe2, 0x72, 0x7c, 0xcd, 0x2a, 0x97, 0x48, 0x15, 0xb0, 0x94, 0xe3,
	0x4f, 0x9f, 0x81, 0x23, 0xc3, 0x43, 0xdb, 0x55, 0xd0, 0x47, 0x0b, 0x76, 0x36, 0x4b, 0x51, 0x2f,
	0x6e, 0x60, 0x8a, 0xa1, 0xa7, 0xcf, 0x40, 0xdf, 0x70, 0xf4, 0x5f, 0x3c, 0x03, 0x3d, 0xb2, 0x59,
	0x50, 0x55, 0x21, 0xbe, 0x2c, 0x9b, 0xca, 0x54, 0xda, 0xa9, 0xdd, 0x30, 0xae, 0x5d, 0xc8, 0xf5,
	0xb8, 0x49, 0x26, 0x6d, 0xc1, 0x35, 0xe2, 0x68, 0x05, 0xf6, 0x7a, 0xa2, 0x9b, 0x2b, 0x3a, 0x81,
	0x0c, 0x86, 0x93, 0x93, 0x41, 0x33, 0x36, 0x27, 0xdf, 0x97, 0x17, 0x09, 0x8b, 0x6b, 0x4d, 0x84,
	0xbf, 0x78, 0x84, 0x77, 0x61, 0x02, 0xd9, 0x92, 0x22, 0x9f, 0xb8, 0x62, 0xfd, 0x2b, 0x3a, 0xba,
	0x0b, 0xdb, 0x3e, 0x79, 0x60, 0x91, 0xf4, 0xfb, 0xde, 0x3c, 0x9c, 0x93, 0x9f, 0x3f, 0xc2, 0x1c,
	0x5f, 0x3c, 0x22, 0xf2, 0x9c, 0x5d, 0xc2, 0x1d, 0x99, 0xc2, 0xdf, 0xd1, 0x65, 0xd8, 0xed, 0x01,
	0x7c, 0x85, 0xc9, 0x36, 0x70, 0xdc, 0x37, 0x65, 0xd6, 0x79, 0xae, 0x3d, 0xf6, 0xf8, 0x7f, 0xfe,
	0x77, 0x20, 0x85, 0x55, 0x17, 0xc4, 0xeb, 0x75, 0x78, 0xd4, 0x8e, 0x2d, 0xd9, 0xc9, 0x44, 0x85,
	0xa6, 0x9d, 0xe4, 0x55, 0xc5, 0xa4, 0x69, 0x6f, 0x29, 0xc6, 0x48, 0x58, 0xf0, 0x95, 0xf4, 0xde,
	0x02, 0xfe, 0x8e, 0x6e, 0x35, 0x02, 0x2f, 0x06, 0xa4, 0xbf, 0xc5, 0xd6, 0x18, 0xc0, 0xee, 0x87,
	0x1f, 0x74, 0x71, 0xa1, 0x21, 0x74, 0x91, 0xdf, 0x55, 0xa0, 0x3f, 0x70, 0xb1, 0x0c, 0x4f, 0xd9,
	0x99, 0x60, 0xcb, 0x50, 0x0b, 0x56, 0xde, 0xd4, 0x54, 0x1a, 0x46, 0x73, 0x70, 0x62, 0x4a, 0xe1,
	0x5e, 0x20, 0xaa, 0x9e, 0xb3, 0xb1, 0x78, 0x59, 0x20, 0x8d, 0xb0, 0x5c, 0x31, 0x91, 0xb5, 0xa8,
	0xa9, 0xd8, 0x22, 0xa3, 0x5b, 0xea, 0x1c, 0x96, 0x83, 0xde, 0x81, 0x48, 0x2e, 0x16, 0x55, 0x0a,
	0x4e, 0xca, 0x17, 0xf5, 0xb2, 0xac, 0x6a, 0x26, 0x03, 0xd7, 0x1f, 0xaf, 0x93, 0x7e, 0x95, 0x7c,
	0xbd, 0x25, 0x97, 0x95, 0x9b, 0xaa, 0x69, 0x79, 0x8a, 0x89, 0xd6, 0x84, 0x50, 0x2a, 0x13, 0xfd,
	0x18, 0xc0, 0x68, 0x41, 0xd7, 0xef, 0xa9, 0x0a, 0xd1, 0x2c, 0x65, 0xbd, 0xa8, 0xae, 0x6c, 0xc4,
	0xfa, 0x7d, 0xd5, 0xda, 0x1c, 0xa1, 0x6b, 0xa0, 0xd6, 0xa6, 0xd9, 0xb4, 0xfa, 0xfc, 0x19, 0xe8,
	0x84, 0xed, 0x15, 0x43, 0x7f, 0xb8, 0xb1, 0x37, 0xc5, 0xd4, 0xcb, 0x8a, 0x5f, 0xd2, 0xe7, 0x49,
	0xe1, 0xc3, 0x6f, 0xc0, 0xe8, 0x8e, 0x1d, 0xd4, 0x9d, 0xbb, 0xea, 0xd9, 0x2d, 0x77, 0xa5, 0xff,
	0xa2, 0x0a, 0xee, 0xc1, 0x11, 0x18, 0xa1, 0x5d, 0xe8, 0x64, 0x8b, 0xba, 0x99, 0x21, 0x23, 0x24,
	0x27, 0x85, 0x0c, 0x1c, 0x83, 0x71, 0xba, 0xd2, 0xd6, 0x0d, 0x25, 0x5e, 0xb7, 0x1f, 0xd8, 0x1c,
	0xa1, 0x19, 0x21, 0x91, 0x82, 0x27, 0x1a, 0xa5, 0x9f, 0x3a, 0xa6, 0x84, 0x69, 0x21, 0x91, 0x10,
	0xcf, 0x35, 0x82, 0xfc, 0x45, 0x59, 0xe6, 0xa7, 0x3d, 0x91, 0x11, 0x12, 0x53, 0x5f, 0x57, 0x01,
	0x10, 0x2f, 0xc3, 0x53, 0x41, 0x53, 0xc6, 0x0d, 0x30, 0x44, 0x0c, 0xde, 0x17, 0x65, 0x50, 0xc0,
	0xc4, 0x2c, 0x96, 0xe0, 0xe4, 0x3f, 0xa2, 0x3c, 0x1a, 0x7d, 0x1c, 0x82, 0xc7, 0x16, 0x55, 0x6d,
	0xb5, 0xa4, 0xdc, 0xd4, 0xe5, 0xa2, 0xc8, 0xb4, 0xd2, 0x95, 0x4a, 0x65, 0x51, 0xb1, 0xf0, 0xd6,
	0x88, 0x3e, 0x86, 0x3c, 0x9b, 0xa8, 0x45, 0xd5, 0x2c, 0xe8, 0xf7, 0x15, 0xc3, 0xc6, 0xa5, 0xf9,
	0x03, 0xac, 0x6b, 0x67, 0xd3, 0x26, 0xae, 0x54, 0xd4, 0xab, 0x36, 0x0f, 0x13, 0x97, 0x25, 0x18,
	0x2b, 0xb2, 0x68, 0xed, 0x2f, 0xee, 0xc4, 0x74, 0xad, 0x88, 0xb6, 0x60, 0xe8, 0x9b, 0xbd, 0xf2,
	0x1d, 0x21, 0x1f, 0xc2, 0x13, 0xac, 0x9a, 0xb8, 0x03, 0x0b, 0xaa, 0xbe, 0x6e, 0xe6, 0xd7, 0x4d,
	0xc5, 0xc8, 0x17, 0x15, 0x8b, 0x25, 0x4d, 0xb9, 0x40, 0xc4, 0xd6, 0x31, 0xca, 0x3e, 0x6f, 0x73,
	0xbf, 0x6d, 0x2a, 0xc6, 0x55, 0x9b, 0x17, 0xe5, 0x61, 0xdc, 0x49, 0x9e, 0x37, 0x92, 0xdf, 0x15,
	0x28, 0xff, 0xb8, 0x9d, 0x4b, 0xf7, 0x2d, 0x40, 0x3c, 0x0b, 0xfb, 0xe5, 0x8a, 0x5a, 0xeb, 0x80,
	0x86, 0x39, 0xc4, 0x24, 0x3c, 0xd1, 0xa8, 0x06, 0x6e, 0x1e, 0x8e, 0xe1, 0x4a, 0xdb, 0x66, 0x84,
	0x59, 0x27, 0xf9, 0x45, 0x91, 0x9d, 0xed, 0x7c, 0x87, 0x93, 0x08, 0xeb, 0xe4, 0xb9, 0xd1, 0x7f,
	0x0b, 0xe0, 0x08, 0x75, 0x58, 0x29, 0x7e, 0x9c, 0xa6, 0x7c, 0xa5, 0xf5, 0x92, 0xe2, 0xc0, 0x39,
	0xff, 0x21, 0x80, 0xc3, 0xcc, 0xc3, 0x65, 0x68, 0x56, 0x0a, 0xd9, 0x23, 0xe7, 0x29, 0x4d, 0x66,
	0x9f, 0xd7, 0x1f, 0x95, 0xa3, 0xd6, 0xdb, 0x84, 0xbf, 0xe8, 0x3a, 0x9c, 0xe7, 0x65, 0xfb, 0xd7,
	0xa4, 0x07, 0xe7, 0x39, 0xa4, 0xfb, 0x32, 0x9b, 0xa3, 0xff, 0xfa, 0x2d, 0x18, 0x79, 0xb3, 0xa4,
	0x2f, 0xcb, 0xa5, 0xc5, 0x8a, 0x52, 0x20, 0x75, 0x2c, 0xc2, 0x4e, 0x7b, 0x5f, 0x03, 0xc4, 0xae,
	0xcd, 0x61, 0x99, 0xf0, 0x33, 0xd0, 0x39, 0x4a, 0x61, 0x75, 0xf8, 0xb1, 0xeb, 0x33, 0xd0, 0x31,
	0xea, 0x00, 0xbb, 0xed, 0x8f, 0x3f, 0x6c, 0x05, 0x3b, 0x77, 0x16, 0x4f, 0xc2, 0xc5, 0x16, 0x8d,
	0x72, 0x30, 0x84, 0x6d, 0x38, 0xb6, 0x04, 0xd2, 0x7b, 0x34, 0xf2, 0x3c, 0xa7, 0x2f, 0xb2, 0x2d,
	0x12, 0x91, 0x81, 0xd6, 0x60, 0x2f, 0xfe, 0x6b, 0xe6, 0x49, 0xfa, 0xa6, 0xa0, 0x18, 0x16, 0x83,
	0xa8, 0x5c, 0x3a, 0x88, 0xd8, 0xda, 0xa1, 0x8e, 0x6c, 0x8b, 0x44, 0x0e, 0x75, 0x38, 0x6f, 0xd0,
	0x3c, 0x6c, 0x27, 0x2f, 0xd8, 0xb2, 0xca, 0x1c, 0x48, 0x7e, 0xb6, 0x45, 0xa2, 0x52, 0xd0, 0x8f,
	0x00, 0x9c, 0x2c, 0x3a, 0x07, 0x29, 0xf2, 0x75, 0x67, 0x8d, 0xf2, 0xca, 0xc3, 0x8a, 0x6a, 0x30,
	0x8c, 0xb9, 0x7d, 0x92, 0xd8, 0x8c, 0x5d, 0x22, 0x93, 0x64, 0x78, 0x82, 0x1e, 0x36, 0x9e, 0xb0,
	0x0f, 0x1b, 0x4f, 0x2c, 0xd9, 0x24, 0x62, 0x27, 0xd3, 0x00, 0x92, 0x50, 0x74, 0x9f, 0xd2, 0x98,
	0xab, 0x89, 0xbe, 0xe6, 0x48, 0x76, 0xb8, 0x4c, 0x74, 0x19, 0xf2, 0x0c, 0xf2, 0x21, 0x17, 0xef,
	0x63, 0x5a, 0x53, 0x89, 0x75, 0x07, 0xae, 0xc5, 0x08, 0x01, 0x7b, 0x5c, 0xb1, 0xa9, 0xd1, 0x07,
	0xf0, 0x84, 0xc3, 0x9a, 0xc7, 0x6e, 0xc2, 0xfa, 0x72, 0x49, 0x2d, 0x38, 0x96, 0xc7, 0x7d, 0xb5,
	0x12, 0x74, 0xea, 0x21, 0x0b, 0xa4, 0xa3, 0x0e, 0xfb, 0x6d, 0x6d, 0x81, 0x30, 0x33, 0x9b, 0xe4,
	0x8e, 0x5a, 0x41, 0x77, 0x60, 0x9f, 0x8f, 0x74, 0x16, 0xbb, 0x3c, 0xed, 0x3b, 0x14, 0x4e, 0xd5,
	0xa8, 0x30, 0xaa, 0x79, 0xeb, 0x4a, 0x40, 0x77, 0x49, 0x62, 0x8a, 0xc9, 0xa5, 0x06, 0x24, 0x0b,
	0x8d, 0xef, 0x22, 0x94, 0x2a, 0x47, 0x06, 0x74, 0xa2, 0xd9, 0x27, 0xf7, 0x07, 0xa4, 0xc3, 0x3e,
	0x07, 0xc1, 0x45, 0x1c, 0x7d, 0x1a, 0xf2, 0xea, 0xd8, 0x6f, 0x16, 0xb3, 0xdf, 0x0f, 0xc6, 0x2d,
	0xd9, 0x50, 0x74, 0x12, 0x38, 0xa0, 0x19, 0xcc, 0xf7, 0x60, 0xb7, 0x5d, 0x20, 0x81, 0x6b, 0xbf,
	0xdb, 0x00, 0xc7, 0x8f, 0x4b, 0x72, 0x05, 0xda, 0x26, 0xbc, 0x3b, 0x00, 0x6b, 0x50, 0xab, 0x14,
	0x66, 0xc2, 0x48, 0x1e, 0xfe, 0xed, 0x1a, 0xf6, 0x1d, 0xf3, 0xe4, 0x4b, 0xaa, 0x69, 0xc5, 0xde,
	0xf3, 0x3d, 0xf5, 0x50, 0xdf, 0x14, 0x07, 0xfe, 0xdc, 0x2a, 0xf5, 0xba, 0x44, 0xe2, 0xd7, 0xfe,
	0x49, 0xd7, 0x63, 0x81, 0x78, 0xbe, 0x5d, 0x93, 0xae, 0xc7, 0xfd, 0x92, 0xae, 0x6d, 0x7b, 0x4b,
	0xba, 0x8e, 0x04, 0x16, 0xed, 0x97, 0x74, 0xd5, 0x60, 0x07, 0x19, 0x5d, 0xec, 0x0e, 0xb7, 0xf9,
	0x3a, 0x17, 0xbb, 0x44, 0xd1, 0xc5, 0xd3, 0xf6, 0x16, 0xde, 0xf1, 0x19, 0x68, 0xe3, 0x6b, 0xd6,
	0x99, 0x17, 0xab, 0xcf, 0x4a, 0x41, 0xff, 0x08, 0xc0, 0x91, 0x86, 0x3a, 0x84, 0x0e, 0x8b, 0x42,
	0x1a, 0x71, 0x6d, 0x8f, 0x15, 0x09, 0xd6, 0x59, 0xd4, 0x6e, 0x25, 0x39, 0xa0, 0x61, 0xbd, 0x21,
	0x65, 0x3d, 0xa0, 0x94, 0xdb, 0x3f, 0xa0, 0xb4, 0x0e, 0xcb, 0x1a, 0x0e, 0x04, 0x63, 0xba, 0xb1,
	0xac, 0xda, 0x81, 0xe1, 0xb5, 0x67, 0xea, 0xe0, 0xb5, 0x4f, 0x7f, 0x0e, 0xd0, 0x4a, 0xe6, 0x61,
	0x61, 0xfc, 0x81, 0x2c, 0x57, 0xc6, 0x4d, 0x4b, 0xd6, 0x8a, 0xb2, 0x51, 0xcc, 0x86, 0xbc, 0xa0,
	0xdb, 0xf3, 0xb0, 0x5b, 0x2e, 0x16, 0x1d, 0xfc, 0x30, 0x39, 0x05, 0xcc, 0x89, 0xdc, 0x97, 0x55,
	0x10, 0xb2, 0x8c, 0x75, 0x45, 0x0a, 0xcb, 0xc5, 0xa2, 0x8d, 0x1d, 0x46, 0xb3, 0xb0, 0x5b, 0xd3,
	0xf3, 0x85, 0x35, 0xb9, 0x54, 0x52, 0xb4, 0x55, 0x65, 0x17, 0xf4, 0x66, 0x58, 0xd3, 0xe7, 0x6c,
	0x52, 0xf4, 0x81, 0x63, 0x31, 0xd6, 0xd8, 0xf3, 0x01, 0x2b, 0xda, 0x65, 0x31, 0x5e, 0x23, 0x7c,
	0x8e, 0xa8, 0x6c, 0xbb, 0x6d, 0x2d, 0xd6, 0xa4, 0x7f, 0x04, 0xbb, 0x3f, 0x31, 0x5d, 0x92, 0x51,
	0x03, 0x5b, 0xb4, 0xce, 0x33, 0xa6, 0x6e, 0xaf, 0x23, 0xc6, 0x8b, 0xf4, 0xfc, 0xc4, 0xac, 0xc9,
	0x57, 0x61, 0xb4, 0x20, 0x57, 0xac, 0xc2, 0x9a, 0xec, 0x2a, 0x24, 0xb6, 0xbb, 0xfb, 0x3d, 0x47,
	0x99, 0xbc, 0x25, 0x70, 0x2c, 0x0a, 0x8a, 0x4b, 0xe1, 0x0b, 0x75, 0x14, 0xe8, 0x3e, 0x1c, 0x64,
	0x88, 0xab, 0x65, 0xd9, 0x54, 0x8a, 0xae, 0xf2, 0x52, 0x01, 0xd6, 0x85, 0xab, 0xbb, 0xd8, 0x9c,
	0xc4, 0xcc, 0x8e, 0x54, 0x4f, 0x99, 0xfd, 0x15, 0x1f, 0x0a, 0x24, 0xc3, 0x70, 0x59, 0x37, 0x14,
	0x86, 0x66, 0x60, 0x5e, 0xe0, 0xc5, 0x83, 0xc7, 0xab, 0xec, 0x45, 0x81, 0x85, 0xd2, 0xd7, 0xe8,
	0x0a, 0x8c, 0x12, 0xdb, 0x54, 0x2d, 0xe6, 0x0b, 0x25, 0x55, 0xd1, 0xac, 0xbc, 0x5a, 0x89, 0xbd,
	0x16, 0x08, 0x7c, 0x8d, 0x60, 0x86, 0x1b, 0xc5, 0x39, 0x42, 0x7e, 0xa3, 0x82, 0xca, 0xb0, 0x8f,
	0x89, 0x50, 0x34, 0xa6, 0xff, 0x71, 0x6d, 0xfb, 0xf7, 0xbc, 0x4a, 0x06, 0x3f, 0x7f, 0xe4, 0x27,
	0x21, 0xdb, 0x21, 0x21, 0x5a, 0x94, 0xfb, 0x2d, 0xfa, 0x21, 0x80, 0x03, 0xd8, 0x02, 0xaf, 0x5d,
	0x81, 0x91, 0x2f, 0x29, 0xab, 0x72, 0x61, 0x23, 0x76, 0x95, 0x94, 0x98, 0xdc, 0xd5, 0xdb, 0x59,
	0xb8, 0x21, 0xc9, 0x96, 0x72, 0x13, 0xb3, 0xde, 0x24, 0x9c, 0xe2, 0xc9, 0x2f, 0x1e, 0x81, 0xed,
	0x47, 0x43, 0xf3, 0xfa, 0x7d, 0xa5, 0x18, 0xb7, 0xf4, 0xb8, 0x57, 0x3e, 0x31, 0x75, 0x90, 0x5c,
	0x51, 0xeb, 0xd8, 0xd0, 0x55, 0x68, 0xef, 0xd7, 0x2e, 0x6a, 0x76, 0x52, 0x6f, 0x37, 0xa8, 0xae,
	0x23, 0x0b, 0x7d, 0x04, 0x23, 0xde, 0xf2, 0x62, 0x0f, 0x03, 0x6e, 0xb4, 0x68, 0xd0, 0x10, 0x11,
	0xfb, 0x11, 0x64, 0x17, 0xcd, 0x76, 0x4a, 0xdd, 0xee, 0xba, 0xa2, 0xf7, 0x20, 0x74, 0xc9, 0x1e,
	0xda, 0x9b, 0x4b, 0xe8, 0xb0, 0xd7, 0xc7, 0x6d, 0xb3, 0x9d, 0x52, 0x97, 0xe1, 0xc8, 0xfe, 0xfb,
	0x00, 0x1e, 0xa9, 0xf3, 0x72, 0xca, 0xaa, 0xa5, 0xae, 0xd2, 0x29, 0x10, 0xdf, 0xcf, 0x46, 0xd9,
	0x58, 0x0e, 0xb3, 0x36, 0x63, 0x40, 0x1a, 0x2a, 0xbb, 0x9d, 0xb2, 0x79, 0x87, 0x02, 0x3d, 0x01,
	0xb0, 0xef, 0x81, 0xbc, 0x92, 0x57, 0x1e, 0x16, 0x4a, 0xeb, 0x24, 0x82, 0x4c, 0x1d, 0x9e, 0x93,
	0x41, 0x0e, 0x0f, 0x43, 0x05, 0xca, 0x2b, 0xd7, 0x6c, 0x2e, 0xe2, 0xf0, 0x34, 0xd2, 0x96, 0x5e,
	0x8f, 0x27, 0xfa, 0xa0, 0x8e, 0xcf, 0x44, 0x0f, 0x21, 0x5f, 0x94, 0x2d, 0x39, 0xbf, 0xba, 0x2e,
	0x1b, 0x45, 0x56, 0x81, 0x37, 0x7c, 0x6d, 0x31, 0x4f, 0x05, 0xae, 0xca, 0x96, 0xfc, 0x26, 0x66,
	0xd9, 0xbb, 0xbb, 0x15, 0x29, 0xba, 0x79, 0x4c, 0xdc, 0xfc, 0xde, 0xe5, 0x92, 0x5e, 0xb8, 0xa7,
	0xd8, 0xcb, 0xd8, 0x8c, 0x8d, 0x92, 0x92, 0x77, 0x1d, 0x68, 0x5a, 0x07, 0xba, 0x98, 0x17, 0x8d,
	0xc2, 0x3e, 0x7a, 0x20, 0xc2, 0x4a, 0xa4, 0xbc, 0xb4, 0x12, 0x96, 0xb1, 0x6e, 0x5a, 0xae, 0x4a,
	0x9c, 0x7a, 0xe9, 0x95, 0x60, 0x25, 0xda, 0x95, 0xf8, 0x84, 0xba, 0xe7, 0xd8, 0x69, 0x61, 0xbe,
	0x36, 0x1d, 0x87, 0xec, 0x9e, 0xf7, 0x86, 0x05, 0x87, 0x95, 0xf4, 0x2d, 0xdb, 0x33, 0xf1, 0xf2,
	0xaf, 0xfb, 0x82, 0xfe, 0x0c, 0xc0, 0x81, 0x62, 0x51, 0x37, 0x5d, 0x53, 0x95, 0x95, 0x76, 0x86,
	0x34, 0x7b, 0x3a, 0xa8, 0x34, 0xfb, 0x3e, 0xa1, 0x89, 0xab, 0x57, 0xf5, 0xc5, 0xda, 0x4c, 0xde,
	0x47, 0xd3, 0xfb, 0x70, 0xd9, 0x5e, 0x4e, 0x13, 0x7d, 0x08, 0x4f, 0x78, 0x6e, 0x52, 0x52, 0x15,
	0x33, 0xbf, 0x62, 0xe8, 0x65, 0x72, 0x2c, 0xdd, 0xac, 0xc8, 0x05, 0x25, 0xf0, 0x10, 0x0f, 0x27,
	0x1d, 0x63, 0xec, 0x0b, 0x8c, 0xfb, 0xba, 0xa1, 0x97, 0x6f, 0xd9, 0xbc, 0xe8, 0x3a, 0xec, 0xd3,
	0xf4, 0x7c, 0x7d, 0x09, 0x81, 0xa7, 0x3d, 0x38, 0x29, 0xaa, 0xe9, 0x8b, 0x5e, 0xa1, 0xe8, 0x1e,
	0x1c, 0x92, 0x0b, 0x96, 0x7a, 0x5f, 0xd9, 0x29, 0x8b, 0x1e, 0xf4, 0x49, 0xec, 0x3a, 0x65, 0x5c,
	0x12, 0xc9, 0xf9, 0xc7, 0x2c, 0x27, 0x0d, 0x50, 0x99, 0xf5, 0x85, 0x4d, 0xc3, 0xb0, 0xa1, 0xaf,
	0x6b, 0xc5, 0xbc, 0xa1, 0x2f, 0xab, 0x5a, 0x6c, 0x3c, 0x10, 0xfe, 0x0f, 0x09, 0xa9, 0x84, 0x29,
	0xb1, 0x6d, 0x55, 0x52, 0x64, 0xd3, 0xca, 0x53, 0xb9, 0xb1, 0x89, 0x40, 0xce, 0x30, 0xa1, 0xbd,
	0x42, 0x48, 0xd1, 0x04, 0xec, 0x30, 0x64, 0xad, 0xa8, 0x97, 0x63, 0x17, 0x02, 0x99, 0x18, 0x15,
	0x76, 0x17, 0x4c, 0x7d, 0xdd, 0x28, 0x28, 0x79, 0xb5, 0x92, 0x37, 0x2d, 0xb5, 0x70, 0x4f, 0xd5,
	0x14, 0xd3, 0x8c, 0x4d, 0x06, 0x72, 0x23, 0xca, 0x73, 0xa3, 0xb2, 0xe8, 0x70, 0xa0, 0x25, 0x3b,
	0xcc, 0xeb, 0x16, 0x93, 0x20, 0x62, 0xce, 0xf8, 0xe2, 0xc6, 0x68, 0xb0, 0xf7, 0xba, 0x6e, 0x64,
	0x65, 0x73, 0x4d, 0xd5, 0x56, 0xb3, 0x5d, 0x12, 0x4f, 0x25, 0xb8, 0xa4, 0xbe, 0x03, 0xbb, 0x08,
	0x48, 0x7c, 0x4d, 0x36, 0xd7, 0x62, 0xc9, 0x17, 0x3d, 0xa6, 0xda, 0x25, 0x71, 0x58, 0x1a, 0xfe,
	0x82, 0x7d, 0x7a, 0x5b, 0x89, 0x92, 0xb5, 0x5c, 0xb3, 0x43, 0xec, 0x44, 0x68, 0x2c, 0x17, 0xd0,
	0x09, 0x50, 0xb2, 0x13, 0x10, 0x4b, 0x98, 0xdb, 0xb6, 0x4a, 0x58, 0xee, 0x13, 0x7d, 0x0a, 0x59,
	0xc4, 0xbd, 0xa1, 0xf0, 0xef, 0xef, 0x21, 0xc7, 0x48, 0x85, 0x2e, 0x30, 0xa1, 0x59, 0x28, 0x0d,
	0x53, 0xa1, 0xbe, 0x45, 0xea, 0xb0, 0xc7, 0x24, 0x81, 0xda, 0x7c, 0x69, 0x39, 0x2f, 0x57, 0x2a,
	0xb1, 0x29, 0x52, 0xc2, 0xdc, 0x1e, 0xbb, 0x2b, 0x28, 0xc8, 0xcb, 0x2e, 0x10, 0x08, 0x4b, 0x61,
	0x5a, 0xc2, 0xcd, 0xe5, 0x2b, 0x95, 0x0a, 0xba, 0x04, 0xbb, 0xcb, 0xeb, 0x25, 0x4b, 0xb5, 0xcb,
	0x9b, 0xde, 0xf5, 0x06, 0x82, 0xb0, 0x04, 0x09, 0x07, 0xe5, 0x5f, 0xdf, 0x3d, 0x24, 0xbb, 0x10,
	0x20, 0x72, 0xd0, 0xeb, 0xd5, 0xd8, 0x10, 0xd9, 0x6c, 0xf7, 0x21, 0x84, 0x6a, 0xdf, 0x0a, 0x18,
	0xf9, 0xee, 0x5d, 0x42, 0xb5, 0xe8, 0x8f, 0x61, 0x3f, 0x6b, 0x97, 0x27, 0x62, 0x1b, 0x5b, 0x3c,
	0x70, 0x54, 0xbc, 0x61, 0x5b, 0x7b, 0x24, 0x44, 0x8b, 0x72, 0x33, 0xa1, 0x1c, 0x1c, 0xb0, 0x5b,
	0xe8, 0xad, 0xc1, 0x52, 0x40, 0xb3, 0x7a, 0xa4, 0x3e, 0xc6, 0xe4, 0x91, 0x75, 0x1b, 0xda, 0xaf,
	0xdd, 0x07, 0x9c, 0x62, 0xb3, 0x01, 0x03, 0xc3, 0xc2, 0x74, 0x2d, 0xd9, 0x88, 0x64, 0x07, 0xee,
	0x6b, 0x67, 0x8e, 0xd0, 0x8f, 0x00, 0x0c, 0xbb, 0x25, 0x5d, 0x0c, 0x00, 0x20, 0xd6, 0xeb, 0xac,
	0xc5, 0x35, 0xb9, 0xe2, 0x92, 0x45, 0x4c, 0xb8, 0x09, 0x56, 0xda, 0xd3, 0x9f, 0x83, 0x53, 0x26,
	0xfe, 0x3e, 0xbe, 0xac, 0x5b, 0x02, 0xe9, 0xab, 0x65, 0xdd, 0x1a, 0x67, 0xc5, 0xd4, 0x9c, 0xde,
	0x88, 0x04, 0x6b, 0x87, 0x9b, 0xd0, 0x3f, 0x06, 0xb0, 0xdf, 0x7d, 0x6a, 0xc4, 0xee, 0xd9, 0xd8,
	0xdf, 0x74, 0x06, 0x40, 0x07, 0xeb, 0xeb, 0x55, 0xab, 0x92, 0xed, 0xfd, 0xd0, 0xf8, 0x07, 0xb3,
	0x20, 0x9f, 0xfe, 0x1c, 0x1c, 0xd9, 0x51, 0x21, 0x67, 0x0c, 0x23, 0x12, 0x5a, 0xde, 0xc1, 0x8f,
	0xde, 0xae, 0x25, 0x38, 0xd9, 0xde, 0x61, 0xaa, 0x45, 0xc5, 0xe9, 0xb5, 0x3b, 0x01, 0x23, 0xd9,
	0xeb, 0x24, 0x3e, 0x99, 0x65, 0xa3, 0x16, 0x15, 0xbb, 0xbd, 0x25, 0xd8, 0xe7, 0x27, 0xee, 0x6e,
	0x80, 0x8b, 0x57, 0xdf, 0xd8, 0x1d, 0x42, 0xc9, 0xd6, 0xda, 0x2b, 0x45, 0x0b, 0x3b, 0x4a, 0x73,
	0x9d, 0x8e, 0x27, 0x13, 0x51, 0x59, 0x51, 0x35, 0x92, 0x1e, 0x8c, 0x5d, 0x0f, 0xa8, 0x3f, 0xef,
	0xa4, 0x44, 0xf1, 0x4c, 0x74, 0x78, 0xd0, 0xdf, 0xa1, 0x0e, 0x8b, 0x4b, 0xca, 0x9b, 0x7b, 0x36,
	0xf4, 0x27, 0x3e, 0x7f, 0x54, 0xc7, 0x5c, 0x1b, 0x1b, 0xbf, 0x85, 0xc5, 0x4b, 0x3d, 0xb2, 0xa7,
	0xf0, 0x55, 0x18, 0xc5, 0xfc, 0xf6, 0x2d, 0x07, 0xd4, 0xd1, 0x98, 0xdb, 0x7d, 0xee, 0x32, 0xeb,
	0x6e, 0xd1, 0xcd, 0xc7, 0x56, 0xb5, 0x99, 0xe5, 0x25, 0x5e, 0xae, 0xa8, 0x9e, 0x6f, 0x48, 0x81,
	0xbd, 0xde, 0x8a, 0x9a, 0xb1, 0xd7, 0xf7, 0x66, 0x9a, 0x78, 0x7a, 0x8b, 0xa4, 0x66, 0xed, 0x80,
	0x79, 0x96, 0x97, 0x22, 0x9e, 0xe6, 0x98, 0xe8, 0x3d, 0x78, 0xdc, 0x0e, 0x7b, 0x9a, 0x8a, 0x66,
	0xaa, 0xc4, 0x28, 0x22, 0x6e, 0x04, 0x8b, 0x74, 0xfd, 0x00, 0x04, 0x0c, 0x51, 0x54, 0x1a, 0x66,
	0xdc, 0x8b, 0x36, 0x33, 0x76, 0x27, 0x58, 0xc4, 0xeb, 0x01, 0x1c, 0xf0, 0x97, 0xf9, 0x27, 0x54,
	0xe6, 0xe5, 0xbd, 0x2d, 0xf6, 0x9d, 0x92, 0x9d, 0x8e, 0x8b, 0x4a, 0x7d, 0xa6, 0x4f, 0xc1, 0xae,
	0x8d, 0x4f, 0xad, 0xe4, 0x0d, 0xa5, 0xb2, 0x6e, 0xd1, 0x81, 0xba, 0x12, 0xd0, 0x16, 0xe4, 0x6c,
	0x7c, 0x37, 0x2a, 0x92, 0xc3, 0x82, 0xfe, 0x04, 0x38, 0xdb, 0xb8, 0x57, 0x96, 0xb8, 0xb7, 0x41,
	0xbf, 0xb1, 0xb0, 0xb4, 0x66, 0x28, 0xb2, 0x35, 0x27, 0x5b, 0xca, 0xaa, 0x6e, 0x38, 0x46, 0x48,
	0xfd, 0x5e, 0xee, 0x6c, 0x4c, 0xc8, 0xde, 0xcb, 0x3d, 0xd5, 0xb8, 0x5e, 0xdb, 0x7f, 0x2d, 0x22,
	0x2f, 0x5f, 0x56, 0xcc, 0xb5, 0xd8, 0x6a, 0x40, 0x83, 0xfa, 0x9c, 0x6d, 0x97, 0xd6, 0x60, 0x5e,
	0x31, 0xd7, 0xd0, 0x55, 0x88, 0x6c, 0x83, 0xc4, 0x25, 0x46, 0x0d, 0x14, 0xc3, 0xc2, 0x74, 0x2e,
	0x29, 0x1f, 0xc1, 0x1e, 0x72, 0x91, 0xa9, 0xaa, 0x59, 0x8a, 0xa1, 0xc9, 0xa5, 0xd8, 0x57, 0x9d,
	0x7b, 0x5e, 0x82, 0xfd, 0x9f, 0x3f, 0xf2, 0x32, 0x93, 0xf8, 0x46, 0x37, 0x7e, 0x75, 0x83, 0xbd,
	0x41, 0xc7, 0x60, 0x17, 0x89, 0x5a, 0x93, 0xcb, 0xac, 0xfe, 0x8a, 0xdc, 0x14, 0x29, 0x71, 0xf8,
	0x0d, 0xb9, 0xb3, 0x2a, 0x0b, 0x39, 0xfb, 0xee, 0xcf, 0xd8, 0xef, 0x3a, 0x7d, 0x5d, 0x6c, 0xdf,
	0x8b, 0x42, 0x27, 0xae, 0x6a, 0xe6, 0x0d, 0x6d, 0x45, 0x97, 0x3a, 0x8b, 0xf4, 0x07, 0x9a, 0x83,
	0xed, 0xa6, 0x25, 0x5b, 0x4a, 0xec, 0x7f, 0x77, 0x92, 0xf3, 0x11, 0x41, 0x62, 0x26, 0xee, 0xd0,
	0x87, 0xac, 0x6e, 0x5a, 0x8b, 0x98, 0x49, 0xa2, 0xbc, 0x68, 0x19, 0xf6, 0x3a, 0x89, 0xb9, 0x3c,
	0x15, 0xf7, 0xd7, 0x54, 0xdc, 0x44, 0xa0, 0x55, 0xe7, 0xa4, 0xab, 0xf0, 0x56, 0x80, 0xd9, 0xc4,
	0xae, 0x5a, 0xa8, 0xa1, 0x47, 0x66, 0x39, 0x39, 0xf2, 0x05, 0x2d, 0xc2, 0x48, 0xad, 0x0c, 0xd2,
	0xf0, 0x6f, 0x3a, 0x1b, 0x44, 0x69, 0x5c, 0x45, 0xd8, 0x79, 0x3d, 0xdc, 0x56, 0x82, 0xd6, 0xef,
	0x96, 0x5d, 0x6f, 0xd0, 0x5b, 0x30, 0x4a, 0xc7, 0x40, 0x21, 0xb9, 0x2b, 0x2a, 0xf7, 0x3f, 0x53,
	0x58, 0x9a, 0x7f, 0x6a, 0xe8, 0x06, 0x23, 0xbf, 0x73, 0x63, 0x81, 0x74, 0x64, 0xaf, 0xcd, 0x7f,
	0x47, 0xad, 0x10, 0x91, 0x75, 0xb7, 0x26, 0xbc, 0xbf, 0xff, 0x5b, 0x13, 0xee, 0xc1, 0x9e, 0x55,
	0x43, 0xae, 0xac, 0x7d, 0x5a, 0x62, 0xce, 0xec, 0x07, 0xa4, 0x3e, 0x27, 0xfd, 0x43, 0x18, 0x6f,
	0x62, 0xd2, 0xb7, 0x6e, 0xee, 0x3d, 0x74, 0xd1, 0xcd, 0x84, 0x53, 0x77, 0xf5, 0x11, 0x8c, 0x32,
	0x57, 0x5d, 0x29, 0xe6, 0x19, 0x3c, 0x24, 0xf6, 0xe1, 0xfe, 0x31, 0x29, 0xde, 0xa2, 0x79, 0xff,
	0x04, 0x07, 0xef, 0x14, 0x45, 0x65, 0x99, 0xe8, 0x16, 0x1c, 0x32, 0x37, 0x4c, 0x4b, 0x29, 0x3b,
	0x29, 0x44, 0x86, 0x84, 0x32, 0x63, 0x72, 0xc0, 0x8a, 0xec, 0x97, 0x06, 0x28, 0x1b, 0x4b, 0x1e,
	0x32, 0x30, 0x94, 0x89, 0x96, 0x61, 0xbf, 0x59, 0xd2, 0x1f, 0xe4, 0xeb, 0xa2, 0x02, 0xb1, 0x8f,
	0x88, 0xb0, 0xc0, 0xd9, 0xb8, 0x58, 0xd2, 0x1f, 0x78, 0x43, 0x01, 0xd9, 0x7e, 0x09, 0x61, 0x69,
	0x57, 0x3d, 0x6e, 0x3e, 0x7a, 0x0f, 0x46, 0x3e, 0x79, 0x60, 0xe5, 0xef, 0x3b, 0x57, 0xe2, 0xc5,
	0x96, 0x03, 0xae, 0xa8, 0x75, 0x6d, 0x84, 0xb9, 0xbb, 0x4b, 0xb5, 0x7b, 0xf4, 0xd8, 0xc0, 0xf7,
	0x7c, 0xf2, 0xc0, 0xaa, 0xbd, 0x44, 0xdf, 0x87, 0x83, 0xa5, 0x69, 0x5a, 0x7b, 0x7a, 0x41, 0x92,
	0xdd, 0x2f, 0x31, 0x3d, 0xa0, 0x3b, 0x06, 0xa4, 0xbe, 0xd2, 0x34, 0xae, 0xe5, 0x15, 0xc2, 0xc3,
	0x3a, 0x05, 0xbd, 0x09, 0xfb, 0xeb, 0x84, 0x91, 0x80, 0x51, 0xac, 0x12, 0x28, 0x2a, 0xea, 0x16,
	0x25, 0x62, 0x06, 0xb4, 0x01, 0x8f, 0xd6, 0x09, 0xf2, 0x24, 0x16, 0x3e, 0x7d, 0xd1, 0xc4, 0xc2,
	0x80, 0x34, 0xe4, 0x2e, 0x34, 0xe7, 0x4a, 0x32, 0xdc, 0x82, 0x7d, 0x75, 0x45, 0x6b, 0xba, 0xa6,
	0xc4, 0x8c, 0xdd, 0xad, 0x6e, 0x2c, 0x96, 0x77, 0x8b, 0xbd, 0xa5, 0x6b, 0x0a, 0x9a, 0x87, 0xd0,
	0xb5, 0x4b, 0x99, 0x07, 0xd9, 0xa4, 0xa4, 0xae, 0x82, 0xb3, 0x2b, 0xfd, 0x13, 0x00, 0x4f, 0xd4,
	0x69, 0x78, 0xec, 0x64, 0x94, 0x74, 0x73, 0xdd, 0x50, 0xd8, 0xf2, 0xb5, 0xf6, 0xe7, 0x7d, 0xba,
	0xb5, 0xf9, 0x55, 0x47, 0x16, 0x0d, 0x85, 0x79, 0x40, 0x8a, 0xc7, 0xcc, 0x00, 0xd2, 0x8b, 0xff,
	0xb1, 0xf5, 0x17, 0x55, 0xf0, 0x1f, 0x5a, 0xe1, 0x51, 0xd8, 0xc7, 0x00, 0x68, 0x04, 0x9e, 0x7a,
	0x53, 0xa4, 0x47, 0x74, 0x42, 0x09, 0x21, 0x91, 0x86, 0x7d, 0xb0, 0x93, 0xe6, 0x06, 0x4d, 0xc4,
	0x4d, 0x09, 0xa9, 0x84, 0x90, 0x98, 0x4c, 0xc0, 0x1e, 0xd8, 0x21, 0xd1, 0x44, 0x24, 0x98, 0x1e,
	0x03, 0x70, 0x1c, 0xc6, 0xee, 0x2a, 0xcb, 0xf1, 0x2b, 0x95, 0x4a, 0x89, 0xf5, 0x42, 0xdc, 0x49,
	0x94, 0x45, 0x13, 0x53, 0x42, 0x2a, 0x25, 0x4c, 0xa5, 0x84, 0xd9, 0x84, 0x30, 0x9b, 0x14, 0x66,
	0x53, 0xb0, 0x1f, 0x46, 0x44, 0x9d, 0x1e, 0x12, 0xb0, 0x8f, 0xfd, 0x67, 0xa6, 0xe0, 0x19, 0x18,
	0xb9, 0xb2, 0x70, 0xc3, 0xfd, 0xb6, 0x6f, 0x6a, 0x56, 0x98, 0x4e, 0x0a, 0xb3, 0x33, 0xc2, 0x4c,
	0x52, 0x48, 0xa4, 0x26, 0x85, 0x44, 0x62, 0x0a, 0x1e, 0x85, 0x91, 0xab, 0xfa, 0xa2, 0x9b, 0xac,
	0x2b, 0x91, 0x98, 0x14, 0x52, 0xd3, 0xc2, 0x2c, 0xfe, 0xd8, 0x47, 0x2d, 0xee, 0x71, 0x6c, 0x59,
	0xdb, 0x97, 0x0f, 0xa0, 0xd6, 0x99, 0xcc, 0x18, 0x80, 0xb3, 0x30, 0x36, 0x47, 0x56, 0x5a, 0xdc,
	0xbe, 0xf0, 0xc0, 0xbe, 0x3d, 0xc1, 0x44, 0xc7, 0xd3, 0x93, 0xc2, 0x54, 0x5a, 0x48, 0x4c, 0x26,
	0x85, 0xcc, 0xac, 0x30, 0x3d, 0x2b, 0x24, 0x33, 0x42, 0x32, 0x21, 0xa4, 0x32, 0x42, 0x2a, 0x2d,
	0xcc, 0xc0, 0x38, 0x8c, 0xdc, 0xb6, 0xd6, 0x14, 0x23, 0x6e, 0x1b, 0x55, 0x28, 0x92, 0xc8, 0x08,
	0xe9, 0xb4, 0x30, 0x9d, 0x12, 0x12, 0xd3, 0x42, 0x62, 0x56, 0x3c, 0x0b, 0xa3, 0xee, 0x31, 0x22,
	0xf7, 0x01, 0x92, 0x93, 0xf7, 0x47, 0x19, 0xe8, 0xac, 0x23, 0x39, 0x2d, 0xa4, 0x84, 0xa4, 0xf8,
	0xaa, 0x07, 0x68, 0xe0, 0xba, 0x8b, 0x6e, 0xab, 0x0a, 0x7a, 0xb7, 0xab, 0xa0, 0x2b, 0x41, 0xa1,
	0xc8, 0x89, 0xa4, 0x78, 0x1e, 0x22, 0x57, 0x82, 0xde, 0x4d, 0xfc, 0xee, 0x56, 0x15, 0xbc, 0xb3,
	0x5d, 0x05, 0xed, 0x33, 0xb3, 0xc2, 0xec, 0x24, 0x41, 0xb2, 0x5d, 0xf0, 0x3f, 0xd2, 0x1a, 0xdb,
	0xac, 0x82, 0x63, 0x0c, 0xb9, 0x76, 0x82, 0xdc, 0x3d, 0x40, 0x2f, 0x68, 0x98, 0x14, 0x33, 0x9e,
	0x9b, 0x11, 0xce, 0x6e, 0x56, 0x41, 0xd8, 0xb9, 0x1c, 0x36, 0x21, 0x64, 0x92, 0x9f, 0x3d, 0xf3,
	0xb3, 0xbc, 0x44, 0x01, 0x46, 0x9c, 0x65, 0x4d, 0x5b, 0x39, 0xec, 0xba, 0xda, 0x20, 0x92, 0x9c,
	0x12, 0x66, 0x33, 0x42, 0x62, 0x46, 0x48, 0xa6, 0x85, 0x4c, 0x42, 0x3c, 0x05, 0x23, 0x4e, 0xea,
	0xaa, 0x76, 0x9d, 0xc0, 0x6b, 0x5b, 0x55, 0xf0, 0x3d, 0x5c, 0xd0, 0xd4, 0xa4, 0x90, 0x9c, 0x14,
	0xcf, 0xc1, 0xa8, 0x2b, 0x51, 0xe4, 0x6a, 0xa6, 0x7d, 0xb7, 0x6e, 0x57, 0x32, 0x29, 0x24, 0x92,
	0x93, 0x42, 0x32, 0x25, 0x8e, 0x63, 0x73, 0xd9, 0x73, 0x0b, 0xbd, 0xeb, 0x82, 0x85, 0x57, 0xb7,
	0xaa, 0x60, 0x0c, 0x37, 0x32, 0x9d, 0x10, 0xd2, 0x49, 0x21, 0x9d, 0x12, 0x53, 0xbe, 0x77, 0x49,
	0x1c, 0xdf, 0xac, 0x82, 0xf1, 0xad, 0x2a, 0x10, 0xb6, 0xab, 0x20, 0x9a, 0xce, 0x08, 0xe9, 0x29,
	0x21, 0x3d, 0x2d, 0xa4, 0x67, 0x84, 0xf4, 0xac, 0x90, 0x99, 0x14, 0x53, 0x70, 0xa4, 0x41, 0x20,
	0xca, 0xdd, 0x88, 0xdc, 0x56, 0x15, 0xdc, 0xc0, 0x8d, 0x98, 0x4e, 0x0b, 0xd3, 0x19, 0x3c, 0xae,
	0xe5, 0x12, 0xbb, 0xf9, 0xc7, 0x69, 0x03, 0xeb, 0xf8, 0x0c, 0x39, 0x4f, 0x9c, 0x16, 0x32, 0x19,
	0x32, 0x54, 0x57, 0x76, 0x47, 0x9d, 0x8d, 0x6c, 0x56, 0xc1, 0x5b, 0x5b, 0x55, 0x70, 0xdb, 0x3b,
	0x0a, 0xb6, 0xcb, 0x25, 0x4e, 0x35, 0x40, 0xb8, 0x61, 0xbe, 0xa5, 0xad, 0x2a, 0x90, 0x1a, 0xf0,
	0x7d, 0x0a, 0x91, 0xdb, 0x83, 0x67, 0x5c, 0xef, 0x6f, 0x56, 0xc1, 0xec, 0x56, 0x15, 0xcc, 0x6c,
	0x57, 0x01, 0xcc, 0x4c, 0x0b, 0x99, 0x19, 0xbc, 0xca, 0xc9, 0xc5, 0x18, 0x9f, 0x3d, 0x03, 0xaf,
	0xef, 0x21, 0x52, 0x20, 0x34, 0x74, 0xd9, 0xc5, 0x1c, 0x1c, 0xf6, 0xf1, 0xa2, 0xed, 0xa2, 0x85,
	0xcd, 0x2a, 0xb8, 0xb3, 0x55, 0x05, 0x6f, 0x93, 0xd9, 0x3c, 0x25, 0xcc, 0x4c, 0xb3, 0x52, 0x99,
	0xeb, 0x3d, 0x8e, 0x99, 0x6c, 0xa1, 0xe2, 0x75, 0x9a, 0x56, 0xac, 0xf9, 0x7b, 0xb6, 0x98, 0xf1,
	0xcd, 0x2a, 0xb8, 0xbe, 0x55, 0x05, 0xd7, 0xb6, 0xab, 0x20, 0x3c, 0x3d, 0x29, 0x4c, 0x27, 0x84,
	0xa9, 0x69, 0x61, 0x2a, 0xd1, 0xa0, 0x1b, 0x32, 0xf0, 0x98, 0xaf, 0xd3, 0xe5, 0x9e, 0x7c, 0x3f,
	0xc0, 0x23, 0xf7, 0x04, 0x90, 0x23, 0x37, 0x78, 0xdb, 0x4b, 0x25, 0xc5, 0x37, 0x60, 0xbf, 0xc7,
	0xbd, 0x71, 0x2f, 0x9e, 0x2b, 0x5b, 0x55, 0x70, 0x99, 0xcc, 0xe9, 0x8c, 0x30, 0x35, 0xd5, 0x60,
	0xf1, 0xbc, 0x0a, 0x91, 0xcb, 0xa3, 0x70, 0xdf, 0x75, 0xb9, 0xba, 0x55, 0x05, 0x2b, 0xa4, 0xac,
	0xc9, 0x94, 0x90, 0x98, 0xcc, 0x88, 0x93, 0xf0, 0xa8, 0x9f, 0x99, 0xe2, 0x9e, 0x81, 0xf2, 0x56,
	0x15, 0x7c, 0x8c, 0x8b, 0x9c, 0x9d, 0x16, 0x66, 0xd3, 0xe2, 0xeb, 0x70, 0xc4, 0xd1, 0x83, 0xd8,
	0x0c, 0x76, 0x31, 0x51, 0xbd, 0x88, 0x8e, 0x6e, 0x56, 0x81, 0xbe, 0x55, 0x05, 0xda, 0x76, 0x15,
	0xf4, 0x26, 0x12, 0x09, 0x21, 0x91, 0x48, 0x0a, 0x89, 0x44, 0x4a, 0x48, 0x24, 0xd2, 0x0e, 0x90,
	0x95, 0xde, 0x4f, 0xf9, 0x0e, 0xff, 0x6e, 0x2e, 0xc4, 0x9d, 0xe0, 0xe3, 0xce, 0xd5, 0x1e, 0xf4,
	0x76, 0x68, 0xc8, 0x87, 0x9d, 0x4b, 0x3d, 0xbe, 0xc7, 0xbf, 0xe6, 0xdc, 0x20, 0x3d, 0xc6, 0xbf,
	0x9a, 0x0b, 0x71, 0x02, 0x3f, 0x9e, 0x0b, 0x71, 0x37, 0xf8, 0x5c, 0x2e, 0xc4, 0x65, 0xf8, 0xa9,
	0x5c, 0x88, 0xbb, 0xc9, 0xcf, 0xe7, 0x42, 0xdc, 0x3c, 0x7f, 0x2b, 0x17, 0xe2, 0x6e, 0xf1, 0xb7,
	0x73, 0x21, 0xee, 0x36, 0xbf, 0x90, 0x0b, 0x71, 0x12, 0xbf, 0x98, 0x0b, 0x71, 0x33, 0xfc, 0x6c,
	0x2e, 0xc4, 0xbd, 0xcd, 0xdf, 0xc9, 0x85, 0xb8, 0x6b, 0xfc, 0xf5, 0x5c, 0x07, 0xf7, 0x04, 0xf0,
	0x3f, 0x00, 0xb9, 0x10, 0x77, 0x99, 0xbf, 0x92, 0x0b, 0x71, 0x2b, 0xfc, 0x6a, 0x2e, 0xc4, 0xad,
	0xf1, 0x6a, 0x2e, 0xc4, 0x7d, 0xcc, 0xcb, 0xb9, 0x10, 0xa7, 0xf1, 0xfa, 0xe8, 0x7f, 0x03, 0xf0,
	0x58, 0x90, 0x0e, 0x44, 0x3f, 0x03, 0x30, 0x5e, 0x37, 0xbe, 0xe4, 0xff, 0x25, 0xe4, 0x55, 0xad,
	0x76, 0x4c, 0x9b, 0xe2, 0x2c, 0x67, 0x0f, 0xa2, 0x73, 0xb1, 0x7a, 0x34, 0xc5, 0xa4, 0x63, 0xcb,
	0x16, 0x6b, 0xb6, 0xac, 0xd7, 0xa0, 0x0e, 0x6d, 0xda, 0xa7, 0x27, 0x98, 0x79, 0xeb, 0x55, 0xc8,
	0x44, 0xce, 0x0d, 0xcd, 0x06, 0x3a, 0x8f, 0xfe, 0x05, 0x07, 0xd1, 0xce, 0x82, 0xd0, 0x45, 0xc8,
	0x95, 0x15, 0x4b, 0xc6, 0xed, 0x68, 0x70, 0xc6, 0x7d, 0x5e, 0x31, 0x4d, 0x79, 0x55, 0x99, 0x57,
	0x28, 0x8b, 0xe4, 0xd0, 0xa3, 0x73, 0x30, 0x54, 0x96, 0xcd, 0x7b, 0xbb, 0x40, 0x80, 0x09, 0x0d,
	0xc9, 0x87, 0x28, 0xe4, 0x50, 0x78, 0xf0, 0x25, 0x27, 0x8c, 0x0a, 0xdd, 0x85, 0xdd, 0x78, 0x35,
	0xda, 0xd7, 0x3c, 0xb2, 0xa3, 0x45, 0xc9, 0x3d, 0x84, 0x5e, 0xec, 0x0b, 0x91, 0xae, 0x2a, 0x96,
	0xac, 0x96, 0xcc, 0x2c, 0x90, 0xc2, 0x72, 0xed, 0x2d, 0xba, 0x09, 0xbb, 0x96, 0x65, 0x93, 0x1e,
	0x0f, 0x60, 0xff, 0x02, 0x61, 0xdc, 0x3e, 0x27, 0xf1, 0x0c, 0x44, 0x38, 0x30, 0x06, 0x26, 0xc1,
	0xc5, 0x0e, 0xba, 0xd9, 0xb2, 0xab, 0x1e, 0xbf, 0x6a, 0x75, 0x6e, 0x71, 0x7e, 0x0c, 0xb2, 0x40,
	0xe2, 0xb0, 0x84, 0x05, 0x7a, 0x8d, 0x4b, 0x17, 0xae, 0xe6, 0xaa, 0xa1, 0xaf, 0x57, 0xd8, 0x1d,
	0x91, 0xa7, 0xdc, 0xd2, 0x5a, 0x7d, 0xa4, 0x31, 0x19, 0x72, 0x45, 0x7d, 0x13, 0xb3, 0xa1, 0x25,
	0x18, 0x5a, 0xd6, 0x8b, 0x1b, 0x0c, 0x96, 0x7c, 0x79, 0x8f, 0x93, 0x46, 0xd4, 0x8b, 0x1b, 0x8b,
	0x74, 0x63, 0x9f, 0x97, 0xcd, 0x7b, 0xaa, 0xb6, 0xca, 0x80, 0x1e, 0x12, 0x91, 0x76, 0xf1, 0xbf,
	0xb6, 0xfd, 0xa2, 0x0a, 0x5e, 0x87, 0x3d, 0x90, 0x9b, 0xb7, 0xc7, 0x0b, 0x24, 0x60, 0x14, 0x76,
	0x33, 0xea, 0xf8, 0xbc, 0x5e, 0x54, 0x10, 0x48, 0xc2, 0x30, 0xec, 0x58, 0x92, 0x8d, 0x55, 0xc5,
	0x42, 0x20, 0x03, 0xbb, 0x61, 0xe7, 0x82, 0x6c, 0x61, 0x97, 0x12, 0x81, 0xd9, 0x5f, 0x57, 0xc1,
	0x9f, 0xb6, 0xc1, 0x21, 0x18, 0xc2, 0x4e, 0xff, 0x70, 0x2f, 0xec, 0xb1, 0x47, 0x7e, 0x42, 0x93,
	0xcb, 0x0a, 0x5c, 0x86, 0x91, 0x39, 0x5d, 0xa3, 0xc7, 0x0c, 0x88, 0x55, 0x77, 0x6e, 0x01, 0xde,
	0x82, 0xc7, 0xbc, 0x03, 0x97, 0xec, 0xc6, 0x86, 0x97, 0xdd, 0xfb, 0x70, 0xd0, 0xd5, 0xfb, 0xc9,
	0x2e, 0x51, 0x36, 0x15, 0x7a, 0xaa, 0x74, 0xd0, 0xd5, 0x8f, 0xc9, 0x2e, 0xcc, 0x42, 0xfa, 0x06,
	0x9a, 0xb0, 0xb7, 0x56, 0x06, 0x39, 0xd2, 0x74, 0xee, 0x63, 0xf8, 0x11, 0x1c, 0xa3, 0x41, 0x40,
	0xbb, 0x10, 0x72, 0xc0, 0x12, 0xf5, 0xf9, 0xbc, 0x84, 0x31, 0x57, 0x81, 0x28, 0xec, 0x7a, 0xc0,
	0x5f, 0x9c, 0x22, 0xf1, 0x17, 0xe7, 0x01, 0x9e, 0x81, 0x9d, 0xf4, 0xc0, 0xa8, 0x29, 0x0e, 0x53,
	0x5d, 0xe8, 0xc8, 0xa4, 0xa7, 0x4a, 0x4d, 0x1e, 0x4e, 0x02, 0x18, 0x87, 0x1c, 0xeb, 0x2b, 0x53,
	0xea, 0x87, 0x08, 0x85, 0x71, 0xbf, 0x4f, 0xac, 0xa8, 0x4a, 0xa9, 0x68, 0x0e, 0xb7, 0x7d, 0x5f,
	0xd9, 0x80, 0x0b, 0xde, 0xde, 0x3e, 0x77, 0x19, 0x5e, 0x82, 0x47, 0xe9, 0xa2, 0x49, 0xf6, 0xe1,
	0x2f, 0x71, 0x67, 0x45, 0xc6, 0xf1, 0x92, 0x84, 0x27, 0xec, 0x55, 0x92, 0x1c, 0x90, 0xc8, 0xdf,
	0x3a, 0x02, 0xf1, 0x15, 0xd8, 0x57, 0xa6, 0x12, 0xf3, 0x65, 0xbd, 0xa8, 0xb8, 0x81, 0xe4, 0x6d,
	0x5b, 0x55, 0xd0, 0xba, 0x5d, 0x05, 0x6d, 0x29, 0x21, 0x2d, 0x9e, 0x87, 0xc3, 0x78, 0x57, 0xc2,
	0x36, 0x03, 0xed, 0xbc, 0x3c, 0x7d, 0xa4, 0xe4, 0x3d, 0x9b, 0x55, 0xd0, 0xc1, 0xce, 0x7c, 0x02,
	0xbc, 0x93, 0xb6, 0xf2, 0x6d, 0xec, 0xcc, 0xe7, 0x4f, 0x01, 0x3c, 0xd2, 0x70, 0x6a, 0xa1, 0xc7,
	0x00, 0x76, 0xd0, 0x06, 0x32, 0xe8, 0xf6, 0xda, 0xd7, 0xcc, 0xef, 0xb6, 0x11, 0xda, 0x5f, 0x79,
	0x1f, 0xc7, 0xbc, 0x68, 0xee, 0xb8, 0xe7, 0xe3, 0x17, 0x7e, 0x2e, 0xbb, 0x1b, 0xcd, 0x5d, 0xdb,
	0xdd, 0x5a, 0x24, 0x56, 0xee, 0xe8, 0x3f, 0x7b, 0x03, 0x46, 0xe6, 0xb0, 0x9a, 0x53, 0x1c, 0x40,
	0x79, 0xac, 0x0e, 0x50, 0xde, 0x04, 0x81, 0x7b, 0x40, 0xe0, 0x7f, 0x5b, 0x61, 0xd7, 0x6f, 0xbd,
	0x18, 0xec, 0xda, 0x0f, 0x70, 0xfd, 0xee, 0xe1, 0x00, 0xae, 0xfd, 0xa0, 0xd5, 0x4b, 0x87, 0x02,
	0xad, 0xfe, 0x96, 0x40, 0xd5, 0xff, 0xe0, 0xdb, 0x85, 0x08, 0x07, 0x02, 0x83, 0xb3, 0x2f, 0x0a,
	0x8f, 0x76, 0x80, 0xcf, 0x17, 0xf7, 0x07, 0x31, 0x3e, 0x28, 0xb8, 0xb8, 0xcd, 0x03, 0x2e, 0x7e,
	0xf3, 0xa0, 0xe0, 0xe2, 0x6c, 0x9b, 0x17, 0x35, 0x7c, 0xd2, 0x0f, 0x35, 0x7c, 0x70, 0xac, 0x70,
	0xe8, 0xa5, 0x61, 0x85, 0x43, 0x3b, 0xb1, 0xc2, 0xef, 0x1c, 0x1a, 0x56, 0x18, 0xd7, 0xdb, 0x8d,
	0x12, 0xce, 0x1f, 0x22, 0x4a, 0x38, 0x1b, 0xf2, 0xc1, 0x06, 0x97, 0x5e, 0x06, 0x36, 0x38, 0x1b,
	0x6a, 0x80, 0x08, 0x7e, 0xff, 0x90, 0x11, 0xc1, 0x2f, 0x86, 0x05, 0x6e, 0xdf, 0x81, 0x05, 0x7e,
	0xfb, 0x05, 0xb1, 0xc0, 0xd9, 0x76, 0x5f, 0xcc, 0xaf, 0x72, 0xe8, 0x90, 0xdf, 0x43, 0xc2, 0xf3,
	0x76, 0xf8, 0xe0, 0x79, 0x97, 0x0e, 0x03, 0xcf, 0x9b, 0xed, 0xa8, 0x43, 0xf1, 0x2e, 0x1d, 0x12,
	0x8a, 0x37, 0xdb, 0xe1, 0xc6, 0xef, 0xfe, 0xdd, 0xc3, 0x81, 0xef, 0x1e, 0x0b, 0x82, 0xef, 0x36,
	0x46, 0xed, 0x7e, 0x70, 0x68, 0xa0, 0x5d, 0x3f, 0x38, 0xee, 0xe2, 0x21, 0xc0, 0x71, 0x77, 0x20,
	0x6d, 0x3f, 0x38, 0x4c, 0xa0, 0xed, 0x0e, 0x08, 0xed, 0x07, 0x87, 0x89, 0xa0, 0xdd, 0x81, 0x8d,
	0x2d, 0x1e, 0x36, 0x36, 0xd6, 0x17, 0x15, 0x7b, 0xef, 0xe5, 0x80, 0x62, 0x5f, 0x0a, 0xdc, 0xb5,
	0xf3, 0xf0, 0xe1, 0xae, 0x9d, 0xdf, 0x16, 0xdc, 0xb5, 0xf3, 0x10, 0xe0, 0xae, 0xdc, 0x81, 0xe1,
	0xae, 0xdc, 0x41, 0xe0, 0xae, 0xdc, 0x0b, 0xc1, 0x5d, 0xb9, 0x97, 0x04, 0x77, 0xe5, 0x5e, 0x3a,
	0xdc, 0x95, 0x3b, 0x3c, 0xb8, 0x6b, 0xd7, 0x77, 0x00, 0x77, 0xed, 0x0a, 0x84, 0xbb, 0xaa, 0x2f,
	0x0f, 0xee, 0x9a, 0x85, 0x5e, 0xa0, 0xeb, 0xcc, 0xde, 0x81, 0xae, 0x59, 0xe8, 0x81, 0xb8, 0x7e,
	0xf8, 0x42, 0x10, 0xd7, 0x6c, 0xf8, 0x25, 0x43, 0x59, 0xc3, 0xbb, 0x41, 0x59, 0x57, 0x0f, 0x1d,
	0xca, 0x9a, 0xed, 0x3e, 0x3c, 0xc8, 0x6a, 0xb7, 0x3f, 0x64, 0xf5, 0xfa, 0xbe, 0x21, 0xab, 0xd9,
	0x1e, 0x3f, 0xa4, 0xea, 0xfb, 0x87, 0x0a, 0x54, 0xcd, 0xf6, 0x78, 0x80, 0xa7, 0x95, 0x97, 0x87,
	0x3b, 0xcd, 0xf6, 0xf8, 0x22, 0x4a, 0x5f, 0x0c, 0xf1, 0x17, 0xf9, 0x8e, 0x11, 0x7f, 0x11, 0x7f,
	0xc4, 0xdf, 0xc1, 0x10, 0xa6, 0xbd, 0x0d, 0x10, 0xa6, 0xdf, 0x3f, 0x38, 0xc2, 0x34, 0xdb, 0xfb,
	0xad, 0x20, 0x46, 0x7b, 0x7d, 0x10, 0xa3, 0x1f, 0x1c, 0x1e, 0x62, 0x34, 0xdb, 0xbb, 0x03, 0x28,
	0x7a, 0x20, 0x4c, 0x25, 0xef, 0x8f, 0xa9, 0x2c, 0xbd, 0x1c, 0x48, 0x65, 0x96, 0xf7, 0x85, 0x4e,
	0xbe, 0x00, 0x84, 0x3a, 0xfa, 0x5d, 0x40, 0xa8, 0xa3, 0x7e, 0x10, 0xea, 0x8b, 0xfb, 0x03, 0xd6,
	0x79, 0x20, 0x75, 0xd7, 0x0f, 0x0a, 0xa9, 0xab, 0x43, 0xcb, 0xbd, 0x73, 0x38, 0x68, 0xb9, 0xc3,
	0x03, 0xc2, 0xa1, 0x6f, 0x07, 0x08, 0x87, 0x7c, 0x81, 0x70, 0x4b, 0x87, 0x02, 0x84, 0xab, 0x87,
	0xc0, 0xfd, 0xff, 0x85, 0xf3, 0x3d, 0x18, 0x20, 0xaf, 0xff, 0xf0, 0x00, 0x79, 0xfd, 0x7e, 0x80,
	0x3c, 0xf3, 0x65, 0x01, 0xf2, 0xb2, 0xfd, 0x8d, 0xa1, 0x78, 0xd7, 0xf6, 0x0d, 0xc5, 0xcb, 0xf6,
	0xfb, 0x20, 0xf0, 0x9e, 0x7e, 0xab, 0x90, 0xb9, 0x5d, 0x50, 0x72, 0xd1, 0x5f, 0x5f, 0xaa, 0xbb,
	0x1d, 0x49, 0x3c, 0xe7, 0x07, 0xf6, 0x1a, 0x78, 0xf2, 0x1c, 0xec, 0x7c, 0x2d, 0x8e, 0xf9, 0xe0,
	0xbd, 0xfa, 0x9f, 0x3c, 0x07, 0x3b, 0xde, 0x8a, 0x82, 0x2f, 0xdc, 0x6b, 0xf0, 0xc9, 0x73, 0xe0,
	0xf3, 0x5e, 0x3c, 0xe6, 0x81, 0x6f, 0x45, 0x9e, 0x3c, 0x07, 0xae, 0x67, 0xf1, 0xf4, 0x0e, 0x94,
	0x16, 0x7a, 0xf2, 0x1c, 0xd4, 0xbd, 0xc3, 0x54, 0x75, 0xe8, 0x2c, 0x42, 0xe5, 0x7d, 0xd7, 0x00,
	0x9e, 0x85, 0x5b, 0xbb, 0xe3, 0xb5, 0x98, 0x6c, 0x04, 0xcf, 0x3a, 0xf2, 0xe4, 0x39, 0xf0, 0xff,
	0x84, 0xdb, 0xed, 0x83, 0xd1, 0x22, 0xed, 0xde, 0xf9, 0x5e, 0xbc, 0xba, 0x2b, 0x38, 0x6b, 0xf4,
	0xc9, 0x73, 0xb0, 0x0b, 0x0d, 0x1e, 0x95, 0x1d, 0x68, 0x2d, 0x32, 0x2a, 0xf5, 0x6f, 0xc5, 0xeb,
	0xbb, 0x83, 0xb5, 0x4e, 0x3d, 0x79, 0x0e, 0x76, 0x23, 0x12, 0x27, 0x1b, 0x20, 0xb6, 0x62, 0x4f,
	0x9e, 0x03, 0xdf, 0x2f, 0xb8, 0x5f, 0x7c, 0xb0, 0x5a, 0xa4, 0x5f, 0x76, 0xbe, 0x17, 0x2f, 0xef,
	0x02, 0x69, 0x8a, 0x3f, 0x79, 0x0e, 0x02, 0x29, 0xf0, 0xd8, 0xf9, 0x83, 0xab, 0xc8, 0xd8, 0xf9,
	0x7e, 0xc2, 0xad, 0xf2, 0x45, 0x44, 0x91, 0x56, 0xf9, 0x7d, 0x11, 0x5f, 0x0b, 0x84, 0x83, 0x8d,
	0x3c, 0x79, 0x0e, 0x02, 0xbe, 0x8b, 0x97, 0x82, 0x51, 0x51, 0x27, 0x9e, 0x3c, 0x07, 0x41, 0x04,
	0xb8, 0x4f, 0x7d, 0x00, 0x58, 0xa4, 0x4f, 0x77, 0xbe, 0xc7, 0x73, 0x6d, 0x17, 0x44, 0x15, 0x99,
	0x6b, 0xc1, 0x34, 0x75, 0xc0, 0xaa, 0x46, 0x60, 0x2a, 0x0a, 0xa3, 0x3a, 0x08, 0x80, 0xaa, 0x06,
	0x9a, 0xba, 0xc6, 0x5f, 0x77, 0xa0, 0x53, 0x14, 0x54, 0x45, 0x41, 0x53, 0x6e, 0x18, 0x95, 0xc6,
	0xeb, 0xa3, 0x3f, 0x7d, 0x03, 0xf6, 0x4a, 0x4a, 0xa5, 0x24, 0x17, 0x9a, 0x09, 0xfa, 0x66, 0x82,
	0xbe, 0x99, 0xa0, 0x6f, 0x26, 0xe8, 0x9b, 0x09, 0xfa, 0x66, 0x82, 0xbe, 0x99, 0xa0, 0x6f, 0x26,
	0xe8, 0x9b, 0x09, 0xfa, 0x66, 0x82, 0xbe, 0x99, 0xa0, 0x6f, 0x26, 0xe8, 0x9b, 0x09, 0xfa, 0x66,
	0x82, 0xbe, 0x99, 0xa0, 0x6f, 0x26, 0xe8, 0x9b, 0x09, 0xfa, 0x66, 0x82, 0xbe, 0x99, 0xa0, 0x6f,
	0x26, 0xe8, 0x9b, 0x09, 0xfa, 0x66, 0x82, 0xbe, 0x99, 0xa0, 0x6f, 0x26, 0xe8, 0x9b, 0x09, 0xfa,
	0x66, 0x82, 0xbe, 0x99, 0xa0, 0x6f, 0x26, 0xe8, 0x9b, 0x09, 0xfa, 0x66, 0x82, 0xbe, 0x99, 0xa0,
	0x7f, 0x69, 0x09, 0xfa, 0xff, 0x34, 0x07, 0xc3, 0x6f, 0x2a, 0x56, 0x33, 0x39, 0xbf, 0xb7, 0xe4,
	0xfc, 0x93, 0x97, 0xf2, 0x2f, 0xd4, 0x9a, 0xff, 0x39, 0xad, 0x89, 0x10, 0x68, 0x22, 0x04, 0x9a,
	0x08, 0x81, 0x26, 0x42, 0xa0, 0x89, 0x10, 0x68, 0x22, 0x04, 0x9a, 0x08, 0x81, 0x26, 0x42, 0xa0,
	0x89, 0x10, 0x68, 0x22, 0x04, 0x9a, 0x08, 0x81, 0x26, 0x42, 0xa0, 0x89, 0x10, 0x68, 0x22, 0x04,
	0x9a, 0x08, 0x81, 0x26, 0x42, 0xa0, 0x89, 0x10, 0x68, 0x22, 0x04, 0x9a, 0x08, 0x81, 0x26, 0x42,
	0xa0, 0x89, 0x10, 0xd8, 0x23, 0x42, 0xe0, 0x0f, 0xea, 0x5f, 0x36, 0xfd, 0xa1, 0xfc, 0x3b, 0xa5,
	0x26, 0xec, 0xa2, 0x09, 0xbb, 0xf8, 0xdb, 0x01, 0xbb, 0x38, 0xe4, 0xff, 0x4c, 0xd4, 0x44, 0x71,
	0x34, 0x51, 0x1c, 0x4d, 0x14, 0x47, 0x13, 0xc5, 0xd1, 0x44, 0x71, 0xbc, 0x18, 0x8a, 0xa3, 0x83,
	0xfb, 0xeb, 0x4e, 0xfe, 0xff, 0x74, 0x36, 0x42, 0x73, 0x88, 0x7f, 0x0e, 0xb6, 0x7e, 0x33, 0xd2,
	0xf2, 0xc5, 0x6f, 0x46, 0x5a, 0xbe, 0xfe, 0xcd, 0x08, 0x78, 0xbc, 0x3d, 0x02, 0xfe, 0xd5, 0xf6,
	0x08, 0xf8, 0xd5, 0xf6, 0x08, 0xd8, 0xda, 0x1e, 0x01, 0x5f, 0x6c, 0x8f, 0x80, 0xbf, 0xdc, 0x1e,
	0x01, 0x5f, 0x6d, 0x8f, 0xb4, 0x7c, 0xbd, 0x3d, 0x02, 0x7e, 0xfc, 0xdb, 0x91, 0x96, 0xcd, 0xdf,
	0x8e, 0x80, 0xad, 0xdf, 0x8e, 0xb4, 0x7c, 0xf1, 0xdb, 0x91, 0x96, 0xf7, 0xde, 0x5f, 0xd5, 0x2b,
	0xf7, 0x56, 0x27, 0xee, 0xeb, 0x25, 0x4b, 0x31, 0x0c, 0x79, 0x62, 0xdd, 0xbc, 0x40, 0x7e, 0xac,
	0xe8, 0x46, 0x79, 0xbc, 0x62, 0xe8, 0xf7, 0xd5, 0xa2, 0x62, 0x8c, 0xdb, 0x9f, 0x2f, 0x54, 0x96,
	0x57, 0xf5, 0x0b, 0xca, 0x43, 0x8b, 0x6e, 0xd5, 0x17, 0xd8, 0x1f, 0xb2, 0x63, 0x5f, 0xd8, 0xb1,
	0x63, 0x2f, 0x77, 0x10, 0xdc, 0x43, 0xea, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x76, 0x19,
	0xa6, 0x40, 0xcb, 0x00, 0x00,
}

func (this *ProxyTypeHttps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps)
	if !ok {
		that2, ok := that.(ProxyTypeHttps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpRedirect != that1.HttpRedirect {
		return false
	}
	if this.AddHsts != that1.AddHsts {
		return false
	}
	if that1.TlsCertificatesChoice == nil {
		if this.TlsCertificatesChoice != nil {
			return false
		}
	} else if this.TlsCertificatesChoice == nil {
		return false
	} else if !this.TlsCertificatesChoice.Equal(that1.TlsCertificatesChoice) {
		return false
	}
	if that1.ServerHeaderChoice == nil {
		if this.ServerHeaderChoice != nil {
			return false
		}
	} else if this.ServerHeaderChoice == nil {
		return false
	} else if !this.ServerHeaderChoice.Equal(that1.ServerHeaderChoice) {
		return false
	}
	if that1.PathNormalizeChoice == nil {
		if this.PathNormalizeChoice != nil {
			return false
		}
	} else if this.PathNormalizeChoice == nil {
		return false
	} else if !this.PathNormalizeChoice.Equal(that1.PathNormalizeChoice) {
		return false
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	if that1.DefaultLbChoice == nil {
		if this.DefaultLbChoice != nil {
			return false
		}
	} else if this.DefaultLbChoice == nil {
		return false
	} else if !this.DefaultLbChoice.Equal(that1.DefaultLbChoice) {
		return false
	}
	if !this.HeaderTransformationType.Equal(that1.HeaderTransformationType) {
		return false
	}
	if this.ConnectionIdleTimeout != that1.ConnectionIdleTimeout {
		return false
	}
	if !this.HttpProtocolOptions.Equal(that1.HttpProtocolOptions) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_TlsParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_TlsParameters)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_TlsParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_TlsCertParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_TlsCertParams)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_TlsCertParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsCertParams.Equal(that1.TlsCertParams) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_DefaultHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_DefaultHeader)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_DefaultHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHeader.Equal(that1.DefaultHeader) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_ServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_ServerName)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_ServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_AppendServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_AppendServerName)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_AppendServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppendServerName != that1.AppendServerName {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_PassThrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_PassThrough)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_PassThrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassThrough.Equal(that1.PassThrough) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_EnablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_EnablePathNormalize)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_EnablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnablePathNormalize.Equal(that1.EnablePathNormalize) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_DisablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_DisablePathNormalize)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_DisablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisablePathNormalize.Equal(that1.DisablePathNormalize) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_Port)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_PortRanges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_PortRanges)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_PortRanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRanges != that1.PortRanges {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_NonDefaultLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_NonDefaultLoadbalancer)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_NonDefaultLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NonDefaultLoadbalancer.Equal(that1.NonDefaultLoadbalancer) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_DefaultLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_DefaultLoadbalancer)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_DefaultLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultLoadbalancer.Equal(that1.DefaultLoadbalancer) {
		return false
	}
	return true
}
func (this *ProxyTypeHttp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttp)
	if !ok {
		that2, ok := that.(ProxyTypeHttp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	return true
}
func (this *ProxyTypeHttp_Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttp_Port)
	if !ok {
		that2, ok := that.(ProxyTypeHttp_Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *ProxyTypeHttp_PortRanges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttp_PortRanges)
	if !ok {
		that2, ok := that.(ProxyTypeHttp_PortRanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRanges != that1.PortRanges {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpRedirect != that1.HttpRedirect {
		return false
	}
	if this.AddHsts != that1.AddHsts {
		return false
	}
	if !this.TlsConfig.Equal(that1.TlsConfig) {
		return false
	}
	if that1.MtlsChoice == nil {
		if this.MtlsChoice != nil {
			return false
		}
	} else if this.MtlsChoice == nil {
		return false
	} else if !this.MtlsChoice.Equal(that1.MtlsChoice) {
		return false
	}
	if that1.ServerHeaderChoice == nil {
		if this.ServerHeaderChoice != nil {
			return false
		}
	} else if this.ServerHeaderChoice == nil {
		return false
	} else if !this.ServerHeaderChoice.Equal(that1.ServerHeaderChoice) {
		return false
	}
	if that1.PathNormalizeChoice == nil {
		if this.PathNormalizeChoice != nil {
			return false
		}
	} else if this.PathNormalizeChoice == nil {
		return false
	} else if !this.PathNormalizeChoice.Equal(that1.PathNormalizeChoice) {
		return false
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	if that1.DefaultLbChoice == nil {
		if this.DefaultLbChoice != nil {
			return false
		}
	} else if this.DefaultLbChoice == nil {
		return false
	} else if !this.DefaultLbChoice.Equal(that1.DefaultLbChoice) {
		return false
	}
	if !this.HeaderTransformationType.Equal(that1.HeaderTransformationType) {
		return false
	}
	if this.ConnectionIdleTimeout != that1.ConnectionIdleTimeout {
		return false
	}
	if !this.HttpProtocolOptions.Equal(that1.HttpProtocolOptions) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_NoMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_NoMtls)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_NoMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoMtls.Equal(that1.NoMtls) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_UseMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_UseMtls)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_UseMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseMtls.Equal(that1.UseMtls) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_DefaultHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_DefaultHeader)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_DefaultHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHeader.Equal(that1.DefaultHeader) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_ServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_ServerName)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_ServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_AppendServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_AppendServerName)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_AppendServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppendServerName != that1.AppendServerName {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_PassThrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_PassThrough)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_PassThrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassThrough.Equal(that1.PassThrough) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_EnablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_EnablePathNormalize)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_EnablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnablePathNormalize.Equal(that1.EnablePathNormalize) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_DisablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_DisablePathNormalize)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_DisablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisablePathNormalize.Equal(that1.DisablePathNormalize) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_Port) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_Port)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_Port)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_PortRanges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_PortRanges)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_PortRanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRanges != that1.PortRanges {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NonDefaultLoadbalancer.Equal(that1.NonDefaultLoadbalancer) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_DefaultLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_DefaultLoadbalancer)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_DefaultLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultLoadbalancer.Equal(that1.DefaultLoadbalancer) {
		return false
	}
	return true
}
func (this *HashPolicyListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HashPolicyListType)
	if !ok {
		that2, ok := that.(HashPolicyListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HashPolicy) != len(that1.HashPolicy) {
		return false
	}
	for i := range this.HashPolicy {
		if !this.HashPolicy[i].Equal(that1.HashPolicy[i]) {
			return false
		}
	}
	return true
}
func (this *MirrorPolicyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MirrorPolicyType)
	if !ok {
		that2, ok := that.(MirrorPolicyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OriginPool.Equal(that1.OriginPool) {
		return false
	}
	if !this.Percent.Equal(that1.Percent) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if len(this.EndpointSubsets) != len(that1.EndpointSubsets) {
		return false
	}
	for i := range this.EndpointSubsets {
		if this.EndpointSubsets[i] != that1.EndpointSubsets[i] {
			return false
		}
	}
	if that1.RewriteChoice == nil {
		if this.RewriteChoice != nil {
			return false
		}
	} else if this.RewriteChoice == nil {
		return false
	} else if !this.RewriteChoice.Equal(that1.RewriteChoice) {
		return false
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	if this.DisableLocationAdd != that1.DisableLocationAdd {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if !this.CsrfPolicy.Equal(that1.CsrfPolicy) {
		return false
	}
	if that1.SpdyChoice == nil {
		if this.SpdyChoice != nil {
			return false
		}
	} else if this.SpdyChoice == nil {
		return false
	} else if !this.SpdyChoice.Equal(that1.SpdyChoice) {
		return false
	}
	if that1.WebsocketChoice == nil {
		if this.WebsocketChoice != nil {
			return false
		}
	} else if this.WebsocketChoice == nil {
		return false
	} else if !this.WebsocketChoice.Equal(that1.WebsocketChoice) {
		return false
	}
	if that1.RetryPolicyChoice == nil {
		if this.RetryPolicyChoice != nil {
			return false
		}
	} else if this.RetryPolicyChoice == nil {
		return false
	} else if !this.RetryPolicyChoice.Equal(that1.RetryPolicyChoice) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if that1.BufferChoice == nil {
		if this.BufferChoice != nil {
			return false
		}
	} else if this.BufferChoice == nil {
		return false
	} else if !this.BufferChoice.Equal(that1.BufferChoice) {
		return false
	}
	if that1.MirroringChoice == nil {
		if this.MirroringChoice != nil {
			return false
		}
	} else if this.MirroringChoice == nil {
		return false
	} else if !this.MirroringChoice.Equal(that1.MirroringChoice) {
		return false
	}
	if that1.ClusterRetractChoice == nil {
		if this.ClusterRetractChoice != nil {
			return false
		}
	} else if this.ClusterRetractChoice == nil {
		return false
	} else if !this.ClusterRetractChoice.Equal(that1.ClusterRetractChoice) {
		return false
	}
	if that1.BotDefenseJavascriptInjectionChoice == nil {
		if this.BotDefenseJavascriptInjectionChoice != nil {
			return false
		}
	} else if this.BotDefenseJavascriptInjectionChoice == nil {
		return false
	} else if !this.BotDefenseJavascriptInjectionChoice.Equal(that1.BotDefenseJavascriptInjectionChoice) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_CommonHashPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_CommonHashPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_CommonHashPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CommonHashPolicy.Equal(that1.CommonHashPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_SpecificHashPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_SpecificHashPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_SpecificHashPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SpecificHashPolicy.Equal(that1.SpecificHashPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DisablePrefixRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DisablePrefixRewrite)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DisablePrefixRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisablePrefixRewrite.Equal(that1.DisablePrefixRewrite) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_PrefixRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_PrefixRewrite)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_PrefixRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PrefixRewrite != that1.PrefixRewrite {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_RegexRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_RegexRewrite)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_RegexRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegexRewrite.Equal(that1.RegexRewrite) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_InheritedWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_InheritedWaf)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_InheritedWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InheritedWaf.Equal(that1.InheritedWaf) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_AppFirewall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_AppFirewall)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_AppFirewall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewall.Equal(that1.AppFirewall) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DisableWaf)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DisableSpdy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DisableSpdy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DisableSpdy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableSpdy.Equal(that1.DisableSpdy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_EnableSpdy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_EnableSpdy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_EnableSpdy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableSpdy.Equal(that1.EnableSpdy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DisableWebSocketConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DisableWebSocketConfig)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DisableWebSocketConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWebSocketConfig.Equal(that1.DisableWebSocketConfig) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_WebSocketConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_WebSocketConfig)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_WebSocketConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WebSocketConfig.Equal(that1.WebSocketConfig) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DefaultRetryPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DefaultRetryPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DefaultRetryPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultRetryPolicy.Equal(that1.DefaultRetryPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_NoRetryPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_NoRetryPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_NoRetryPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoRetryPolicy.Equal(that1.NoRetryPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_RetryPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_RetryPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_RetryPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_CommonBuffering) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_CommonBuffering)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_CommonBuffering)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CommonBuffering.Equal(that1.CommonBuffering) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_BufferPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_BufferPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_BufferPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BufferPolicy.Equal(that1.BufferPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DisableMirroring) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DisableMirroring)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DisableMirroring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMirroring.Equal(that1.DisableMirroring) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_MirrorPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_MirrorPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_MirrorPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MirrorPolicy.Equal(that1.MirrorPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_RetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_RetractCluster)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_RetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetractCluster.Equal(that1.RetractCluster) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DoNotRetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DoNotRetractCluster)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DoNotRetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotRetractCluster.Equal(that1.DoNotRetractCluster) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InheritedBotDefenseJavascriptInjection.Equal(that1.InheritedBotDefenseJavascriptInjection) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefenseJavascriptInjection.Equal(that1.BotDefenseJavascriptInjection) {
		return false
	}
	return true
}
func (this *RouteTypeSimpleWithDefaultOriginPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimpleWithDefaultOriginPool)
	if !ok {
		that2, ok := that.(RouteTypeSimpleWithDefaultOriginPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpMethod != that1.HttpMethod {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if that1.HostRewriteParams == nil {
		if this.HostRewriteParams != nil {
			return false
		}
	} else if this.HostRewriteParams == nil {
		return false
	} else if !this.HostRewriteParams.Equal(that1.HostRewriteParams) {
		return false
	}
	return true
}
func (this *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutoHostRewrite.Equal(that1.AutoHostRewrite) {
		return false
	}
	return true
}
func (this *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimpleWithDefaultOriginPool_HostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimpleWithDefaultOriginPool_HostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostRewrite != that1.HostRewrite {
		return false
	}
	return true
}
func (this *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHostRewrite.Equal(that1.DisableHostRewrite) {
		return false
	}
	return true
}
func (this *RouteTypeSimple) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimple)
	if !ok {
		that2, ok := that.(RouteTypeSimple)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if this.HttpMethod != that1.HttpMethod {
		return false
	}
	if len(this.OriginPools) != len(that1.OriginPools) {
		return false
	}
	for i := range this.OriginPools {
		if !this.OriginPools[i].Equal(that1.OriginPools[i]) {
			return false
		}
	}
	if that1.HostRewriteParams == nil {
		if this.HostRewriteParams != nil {
			return false
		}
	} else if this.HostRewriteParams == nil {
		return false
	} else if !this.HostRewriteParams.Equal(that1.HostRewriteParams) {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if !this.IncomingPort.Equal(that1.IncomingPort) {
		return false
	}
	if !this.AdvancedOptions.Equal(that1.AdvancedOptions) {
		return false
	}
	return true
}
func (this *RouteTypeSimple_AutoHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimple_AutoHostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimple_AutoHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutoHostRewrite.Equal(that1.AutoHostRewrite) {
		return false
	}
	return true
}
func (this *RouteTypeSimple_HostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimple_HostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimple_HostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostRewrite != that1.HostRewrite {
		return false
	}
	return true
}
func (this *RouteTypeSimple_DisableHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimple_DisableHostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimple_DisableHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHostRewrite.Equal(that1.DisableHostRewrite) {
		return false
	}
	return true
}
func (this *RouteTypeRedirect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeRedirect)
	if !ok {
		that2, ok := that.(RouteTypeRedirect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if this.HttpMethod != that1.HttpMethod {
		return false
	}
	if !this.RouteRedirect.Equal(that1.RouteRedirect) {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if !this.IncomingPort.Equal(that1.IncomingPort) {
		return false
	}
	return true
}
func (this *RouteTypeDirectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeDirectResponse)
	if !ok {
		that2, ok := that.(RouteTypeDirectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if this.HttpMethod != that1.HttpMethod {
		return false
	}
	if !this.RouteDirectResponse.Equal(that1.RouteDirectResponse) {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if !this.IncomingPort.Equal(that1.IncomingPort) {
		return false
	}
	return true
}
func (this *RouteTypeCustomRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeCustomRoute)
	if !ok {
		that2, ok := that.(RouteTypeCustomRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RouteRef.Equal(that1.RouteRef) {
		return false
	}
	return true
}
func (this *RouteType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType)
	if !ok {
		that2, ok := that.(RouteType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *RouteType_SimpleRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType_SimpleRoute)
	if !ok {
		that2, ok := that.(RouteType_SimpleRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SimpleRoute.Equal(that1.SimpleRoute) {
		return false
	}
	return true
}
func (this *RouteType_RedirectRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType_RedirectRoute)
	if !ok {
		that2, ok := that.(RouteType_RedirectRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RedirectRoute.Equal(that1.RedirectRoute) {
		return false
	}
	return true
}
func (this *RouteType_DirectResponseRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType_DirectResponseRoute)
	if !ok {
		that2, ok := that.(RouteType_DirectResponseRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectResponseRoute.Equal(that1.DirectResponseRoute) {
		return false
	}
	return true
}
func (this *RouteType_CustomRouteObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType_CustomRouteObject)
	if !ok {
		that2, ok := that.(RouteType_CustomRouteObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomRouteObject.Equal(that1.CustomRouteObject) {
		return false
	}
	return true
}
func (this *AdvancedOptionsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvancedOptionsType)
	if !ok {
		that2, ok := that.(AdvancedOptionsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	if this.MaxRequestHeaderSize != that1.MaxRequestHeaderSize {
		return false
	}
	if !this.BufferPolicy.Equal(that1.BufferPolicy) {
		return false
	}
	if !this.CompressionParams.Equal(that1.CompressionParams) {
		return false
	}
	if len(this.CustomErrors) != len(that1.CustomErrors) {
		return false
	}
	for i := range this.CustomErrors {
		if this.CustomErrors[i] != that1.CustomErrors[i] {
			return false
		}
	}
	if !this.JavascriptInfo.Equal(that1.JavascriptInfo) {
		return false
	}
	if len(this.Jwt) != len(that1.Jwt) {
		return false
	}
	for i := range this.Jwt {
		if !this.Jwt[i].Equal(that1.Jwt[i]) {
			return false
		}
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if this.DisableDefaultErrorPages != that1.DisableDefaultErrorPages {
		return false
	}
	if that1.PathNormalizeChoice == nil {
		if this.PathNormalizeChoice != nil {
			return false
		}
	} else if this.PathNormalizeChoice == nil {
		return false
	} else if !this.PathNormalizeChoice.Equal(that1.PathNormalizeChoice) {
		return false
	}
	if that1.StrictSniHostHeaderCheckChoice == nil {
		if this.StrictSniHostHeaderCheckChoice != nil {
			return false
		}
	} else if this.StrictSniHostHeaderCheckChoice == nil {
		return false
	} else if !this.StrictSniHostHeaderCheckChoice.Equal(that1.StrictSniHostHeaderCheckChoice) {
		return false
	}
	if len(this.CookiesToModify) != len(that1.CookiesToModify) {
		return false
	}
	for i := range this.CookiesToModify {
		if !this.CookiesToModify[i].Equal(that1.CookiesToModify[i]) {
			return false
		}
	}
	return true
}
func (this *AdvancedOptionsType_EnablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvancedOptionsType_EnablePathNormalize)
	if !ok {
		that2, ok := that.(AdvancedOptionsType_EnablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnablePathNormalize.Equal(that1.EnablePathNormalize) {
		return false
	}
	return true
}
func (this *AdvancedOptionsType_DisablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvancedOptionsType_DisablePathNormalize)
	if !ok {
		that2, ok := that.(AdvancedOptionsType_DisablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisablePathNormalize.Equal(that1.DisablePathNormalize) {
		return false
	}
	return true
}
func (this *AdvancedOptionsType_EnableStrictSniHostHeaderCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvancedOptionsType_EnableStrictSniHostHeaderCheck)
	if !ok {
		that2, ok := that.(AdvancedOptionsType_EnableStrictSniHostHeaderCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableStrictSniHostHeaderCheck.Equal(that1.EnableStrictSniHostHeaderCheck) {
		return false
	}
	return true
}
func (this *AdvancedOptionsType_AdditionalDomains) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvancedOptionsType_AdditionalDomains)
	if !ok {
		that2, ok := that.(AdvancedOptionsType_AdditionalDomains)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdditionalDomains.Equal(that1.AdditionalDomains) {
		return false
	}
	return true
}
func (this *SingleLoadBalancerAppSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleLoadBalancerAppSetting)
	if !ok {
		that2, ok := that.(SingleLoadBalancerAppSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ApiDiscoveryChoice == nil {
		if this.ApiDiscoveryChoice != nil {
			return false
		}
	} else if this.ApiDiscoveryChoice == nil {
		return false
	} else if !this.ApiDiscoveryChoice.Equal(that1.ApiDiscoveryChoice) {
		return false
	}
	if that1.MaliciousUserDetectionChoice == nil {
		if this.MaliciousUserDetectionChoice != nil {
			return false
		}
	} else if this.MaliciousUserDetectionChoice == nil {
		return false
	} else if !this.MaliciousUserDetectionChoice.Equal(that1.MaliciousUserDetectionChoice) {
		return false
	}
	return true
}
func (this *SingleLoadBalancerAppSetting_EnableDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleLoadBalancerAppSetting_EnableDiscovery)
	if !ok {
		that2, ok := that.(SingleLoadBalancerAppSetting_EnableDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableDiscovery.Equal(that1.EnableDiscovery) {
		return false
	}
	return true
}
func (this *SingleLoadBalancerAppSetting_DisableDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleLoadBalancerAppSetting_DisableDiscovery)
	if !ok {
		that2, ok := that.(SingleLoadBalancerAppSetting_DisableDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableDiscovery.Equal(that1.DisableDiscovery) {
		return false
	}
	return true
}
func (this *SingleLoadBalancerAppSetting_EnableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleLoadBalancerAppSetting_EnableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(SingleLoadBalancerAppSetting_EnableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableMaliciousUserDetection.Equal(that1.EnableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *SingleLoadBalancerAppSetting_DisableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleLoadBalancerAppSetting_DisableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(SingleLoadBalancerAppSetting_DisableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMaliciousUserDetection.Equal(that1.DisableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *OriginServerSubsetRuleListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OriginServerSubsetRuleListType)
	if !ok {
		that2, ok := that.(OriginServerSubsetRuleListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OriginServerSubsetRules) != len(that1.OriginServerSubsetRules) {
		return false
	}
	for i := range this.OriginServerSubsetRules {
		if !this.OriginServerSubsetRules[i].Equal(that1.OriginServerSubsetRules[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if len(this.DownstreamTlsCertificateExpirationTimestamps) != len(that1.DownstreamTlsCertificateExpirationTimestamps) {
		return false
	}
	for i := range this.DownstreamTlsCertificateExpirationTimestamps {
		if !this.DownstreamTlsCertificateExpirationTimestamps[i].Equal(that1.DownstreamTlsCertificateExpirationTimestamps[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.DefaultRoutePools) != len(that1.DefaultRoutePools) {
		return false
	}
	for i := range this.DefaultRoutePools {
		if !this.DefaultRoutePools[i].Equal(that1.DefaultRoutePools[i]) {
			return false
		}
	}
	if that1.OriginPoolChoice == nil {
		if this.OriginPoolChoice != nil {
			return false
		}
	} else if this.OriginPoolChoice == nil {
		return false
	} else if !this.OriginPoolChoice.Equal(that1.OriginPoolChoice) {
		return false
	}
	if that1.HostRewriteParams == nil {
		if this.HostRewriteParams != nil {
			return false
		}
	} else if this.HostRewriteParams == nil {
		return false
	} else if !this.HostRewriteParams.Equal(that1.HostRewriteParams) {
		return false
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.OriginServerSubsetRuleList.Equal(that1.OriginServerSubsetRuleList) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if that1.UserIdChoice == nil {
		if this.UserIdChoice != nil {
			return false
		}
	} else if this.UserIdChoice == nil {
		return false
	} else if !this.UserIdChoice.Equal(that1.UserIdChoice) {
		return false
	}
	if !this.ApiRateLimitLegacy.Equal(that1.ApiRateLimitLegacy) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.DataGuardRules) != len(that1.DataGuardRules) {
		return false
	}
	for i := range this.DataGuardRules {
		if !this.DataGuardRules[i].Equal(that1.DataGuardRules[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if !this.ApiProtectionRules.Equal(that1.ApiProtectionRules) {
		return false
	}
	if len(this.DdosMitigationRules) != len(that1.DdosMitigationRules) {
		return false
	}
	for i := range this.DdosMitigationRules {
		if !this.DdosMitigationRules[i].Equal(that1.DdosMitigationRules[i]) {
			return false
		}
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if that1.TrustClientIpHeadersChoice == nil {
		if this.TrustClientIpHeadersChoice != nil {
			return false
		}
	} else if this.TrustClientIpHeadersChoice == nil {
		return false
	} else if !this.TrustClientIpHeadersChoice.Equal(that1.TrustClientIpHeadersChoice) {
		return false
	}
	if that1.MlConfigChoice == nil {
		if this.MlConfigChoice != nil {
			return false
		}
	} else if this.MlConfigChoice == nil {
		return false
	} else if !this.MlConfigChoice.Equal(that1.MlConfigChoice) {
		return false
	}
	if that1.MaliciousUserDetectionChoice == nil {
		if this.MaliciousUserDetectionChoice != nil {
			return false
		}
	} else if this.MaliciousUserDetectionChoice == nil {
		return false
	} else if !this.MaliciousUserDetectionChoice.Equal(that1.MaliciousUserDetectionChoice) {
		return false
	}
	if that1.ApiDiscoveryChoice == nil {
		if this.ApiDiscoveryChoice != nil {
			return false
		}
	} else if this.ApiDiscoveryChoice == nil {
		return false
	} else if !this.ApiDiscoveryChoice.Equal(that1.ApiDiscoveryChoice) {
		return false
	}
	if that1.BotDefenseChoice == nil {
		if this.BotDefenseChoice != nil {
			return false
		}
	} else if this.BotDefenseChoice == nil {
		return false
	} else if !this.BotDefenseChoice.Equal(that1.BotDefenseChoice) {
		return false
	}
	if that1.ClientSideDefenseChoice == nil {
		if this.ClientSideDefenseChoice != nil {
			return false
		}
	} else if this.ClientSideDefenseChoice == nil {
		return false
	} else if !this.ClientSideDefenseChoice.Equal(that1.ClientSideDefenseChoice) {
		return false
	}
	if that1.ApiDefinitionChoice == nil {
		if this.ApiDefinitionChoice != nil {
			return false
		}
	} else if this.ApiDefinitionChoice == nil {
		return false
	} else if !this.ApiDefinitionChoice.Equal(that1.ApiDefinitionChoice) {
		return false
	}
	if that1.SensitiveDataPolicyChoice == nil {
		if this.SensitiveDataPolicyChoice != nil {
			return false
		}
	} else if this.SensitiveDataPolicyChoice == nil {
		return false
	} else if !this.SensitiveDataPolicyChoice.Equal(that1.SensitiveDataPolicyChoice) {
		return false
	}
	if that1.IpReputationChoice == nil {
		if this.IpReputationChoice != nil {
			return false
		}
	} else if this.IpReputationChoice == nil {
		return false
	} else if !this.IpReputationChoice.Equal(that1.IpReputationChoice) {
		return false
	}
	if that1.ThreatMeshChoice == nil {
		if this.ThreatMeshChoice != nil {
			return false
		}
	} else if this.ThreatMeshChoice == nil {
		return false
	} else if !this.ThreatMeshChoice.Equal(that1.ThreatMeshChoice) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if this.State != that1.State {
		return false
	}
	if this.AutoCertState != that1.AutoCertState {
		return false
	}
	if !this.AutoCertInfo.Equal(that1.AutoCertInfo) {
		return false
	}
	if len(this.InternetVipInfo) != len(that1.InternetVipInfo) {
		return false
	}
	for i := range this.InternetVipInfo {
		if !this.InternetVipInfo[i].Equal(that1.InternetVipInfo[i]) {
			return false
		}
	}
	if !this.CsrfPolicy.Equal(that1.CsrfPolicy) {
		return false
	}
	if len(this.GraphqlRules) != len(that1.GraphqlRules) {
		return false
	}
	for i := range this.GraphqlRules {
		if !this.GraphqlRules[i].Equal(that1.GraphqlRules[i]) {
			return false
		}
	}
	if len(this.ProtectedCookies) != len(that1.ProtectedCookies) {
		return false
	}
	for i := range this.ProtectedCookies {
		if !this.ProtectedCookies[i].Equal(that1.ProtectedCookies[i]) {
			return false
		}
	}
	if that1.SlowDdosMitigationChoice == nil {
		if this.SlowDdosMitigationChoice != nil {
			return false
		}
	} else if this.SlowDdosMitigationChoice == nil {
		return false
	} else if !this.SlowDdosMitigationChoice.Equal(that1.SlowDdosMitigationChoice) {
		return false
	}
	if !this.JwtValidation.Equal(that1.JwtValidation) {
		return false
	}
	if that1.L7DdosAutoMitigationAction == nil {
		if this.L7DdosAutoMitigationAction != nil {
			return false
		}
	} else if this.L7DdosAutoMitigationAction == nil {
		return false
	} else if !this.L7DdosAutoMitigationAction.Equal(that1.L7DdosAutoMitigationAction) {
		return false
	}
	if this.CertState != that1.CertState {
		return false
	}
	if !this.SensitiveDataDisclosureRules.Equal(that1.SensitiveDataDisclosureRules) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Http)
	if !ok {
		that2, ok := that.(GlobalSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(GlobalSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Https)
	if !ok {
		that2, ok := that.(GlobalSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(GlobalSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultPool)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultPool.Equal(that1.DefaultPool) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultPoolList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultPoolList)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultPoolList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultPoolList.Equal(that1.DefaultPoolList) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AutoHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AutoHostRewrite)
	if !ok {
		that2, ok := that.(GlobalSpecType_AutoHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutoHostRewrite.Equal(that1.AutoHostRewrite) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HostRewrite)
	if !ok {
		that2, ok := that.(GlobalSpecType_HostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostRewrite != that1.HostRewrite {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableHostRewrite)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHostRewrite.Equal(that1.DisableHostRewrite) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AppFirewall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AppFirewall)
	if !ok {
		that2, ok := that.(GlobalSpecType_AppFirewall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewall.Equal(that1.AppFirewall) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableChallenge.Equal(that1.EnableChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_UserIdClientIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UserIdClientIp)
	if !ok {
		that2, ok := that.(GlobalSpecType_UserIdClientIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdClientIp.Equal(that1.UserIdClientIp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_UserIdentification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UserIdentification)
	if !ok {
		that2, ok := that.(GlobalSpecType_UserIdentification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ApiRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ApiRateLimit)
	if !ok {
		that2, ok := that.(GlobalSpecType_ApiRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiRateLimit.Equal(that1.ApiRateLimit) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RateLimit)
	if !ok {
		that2, ok := that.(GlobalSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(GlobalSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(GlobalSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RoundRobin)
	if !ok {
		that2, ok := that.(GlobalSpecType_RoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoundRobin.Equal(that1.RoundRobin) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LeastActive)
	if !ok {
		that2, ok := that.(GlobalSpecType_LeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LeastActive.Equal(that1.LeastActive) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Random) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Random)
	if !ok {
		that2, ok := that.(GlobalSpecType_Random)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Random.Equal(that1.Random) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SourceIpStickiness)
	if !ok {
		that2, ok := that.(GlobalSpecType_SourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceIpStickiness.Equal(that1.SourceIpStickiness) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CookieStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CookieStickiness)
	if !ok {
		that2, ok := that.(GlobalSpecType_CookieStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CookieStickiness.Equal(that1.CookieStickiness) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RingHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RingHash)
	if !ok {
		that2, ok := that.(GlobalSpecType_RingHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RingHash.Equal(that1.RingHash) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableTrustClientIpHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableTrustClientIpHeaders)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableTrustClientIpHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableTrustClientIpHeaders.Equal(that1.DisableTrustClientIpHeaders) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableTrustClientIpHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableTrustClientIpHeaders)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableTrustClientIpHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableTrustClientIpHeaders.Equal(that1.EnableTrustClientIpHeaders) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SingleLbApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SingleLbApp)
	if !ok {
		that2, ok := that.(GlobalSpecType_SingleLbApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SingleLbApp.Equal(that1.SingleLbApp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_MultiLbApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_MultiLbApp)
	if !ok {
		that2, ok := that.(GlobalSpecType_MultiLbApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MultiLbApp.Equal(that1.MultiLbApp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableMaliciousUserDetection.Equal(that1.EnableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMaliciousUserDetection.Equal(that1.DisableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableApiDiscovery)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableApiDiscovery.Equal(that1.EnableApiDiscovery) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableApiDiscovery)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDiscovery.Equal(that1.DisableApiDiscovery) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableBotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableBotDefense)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableBotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableBotDefense.Equal(that1.DisableBotDefense) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BotDefense)
	if !ok {
		that2, ok := that.(GlobalSpecType_BotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefense.Equal(that1.BotDefense) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BotDefenseAdvanced) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BotDefenseAdvanced)
	if !ok {
		that2, ok := that.(GlobalSpecType_BotDefenseAdvanced)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefenseAdvanced.Equal(that1.BotDefenseAdvanced) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableClientSideDefense)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableClientSideDefense.Equal(that1.DisableClientSideDefense) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ClientSideDefense)
	if !ok {
		that2, ok := that.(GlobalSpecType_ClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientSideDefense.Equal(that1.ClientSideDefense) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableApiDefinition)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDefinition.Equal(that1.DisableApiDefinition) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ApiDefinition)
	if !ok {
		that2, ok := that.(GlobalSpecType_ApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ApiSpecification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ApiSpecification)
	if !ok {
		that2, ok := that.(GlobalSpecType_ApiSpecification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecification.Equal(that1.ApiSpecification) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ApiDefinitions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ApiDefinitions)
	if !ok {
		that2, ok := that.(GlobalSpecType_ApiDefinitions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinitions.Equal(that1.ApiDefinitions) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultSensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultSensitiveDataPolicy)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultSensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSensitiveDataPolicy.Equal(that1.DefaultSensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SensitiveDataPolicy)
	if !ok {
		that2, ok := that.(GlobalSpecType_SensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SensitiveDataPolicy.Equal(that1.SensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableIpReputation)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableIpReputation.Equal(that1.DisableIpReputation) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableIpReputation)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableIpReputation.Equal(that1.EnableIpReputation) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableThreatMesh)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableThreatMesh.Equal(that1.DisableThreatMesh) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableThreatMesh)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableThreatMesh.Equal(that1.EnableThreatMesh) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SystemDefaultTimeouts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SystemDefaultTimeouts)
	if !ok {
		that2, ok := that.(GlobalSpecType_SystemDefaultTimeouts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SystemDefaultTimeouts.Equal(that1.SystemDefaultTimeouts) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SlowDdosMitigation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SlowDdosMitigation)
	if !ok {
		that2, ok := that.(GlobalSpecType_SlowDdosMitigation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SlowDdosMitigation.Equal(that1.SlowDdosMitigation) {
		return false
	}
	return true
}
func (this *GlobalSpecType_L7DdosActionDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_L7DdosActionDefault)
	if !ok {
		that2, ok := that.(GlobalSpecType_L7DdosActionDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionDefault.Equal(that1.L7DdosActionDefault) {
		return false
	}
	return true
}
func (this *GlobalSpecType_L7DdosActionBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_L7DdosActionBlock)
	if !ok {
		that2, ok := that.(GlobalSpecType_L7DdosActionBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionBlock.Equal(that1.L7DdosActionBlock) {
		return false
	}
	return true
}
func (this *GlobalSpecType_L7DdosActionJsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_L7DdosActionJsChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_L7DdosActionJsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionJsChallenge.Equal(that1.L7DdosActionJsChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_L7DdosActionNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_L7DdosActionNone)
	if !ok {
		that2, ok := that.(GlobalSpecType_L7DdosActionNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionNone.Equal(that1.L7DdosActionNone) {
		return false
	}
	return true
}
func (this *SensitiveDataDisclosureRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SensitiveDataDisclosureRules)
	if !ok {
		that2, ok := that.(SensitiveDataDisclosureRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SensitiveDataTypesInResponse) != len(that1.SensitiveDataTypesInResponse) {
		return false
	}
	for i := range this.SensitiveDataTypesInResponse {
		if !this.SensitiveDataTypesInResponse[i].Equal(that1.SensitiveDataTypesInResponse[i]) {
			return false
		}
	}
	return true
}
func (this *SensitiveDataTypes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SensitiveDataTypes)
	if !ok {
		that2, ok := that.(SensitiveDataTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.MaskingModeChoice == nil {
		if this.MaskingModeChoice != nil {
			return false
		}
	} else if this.MaskingModeChoice == nil {
		return false
	} else if !this.MaskingModeChoice.Equal(that1.MaskingModeChoice) {
		return false
	}
	if that1.TypeConditionTypeChoice == nil {
		if this.TypeConditionTypeChoice != nil {
			return false
		}
	} else if this.TypeConditionTypeChoice == nil {
		return false
	} else if !this.TypeConditionTypeChoice.Equal(that1.TypeConditionTypeChoice) {
		return false
	}
	if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *SensitiveDataTypes_Mask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SensitiveDataTypes_Mask)
	if !ok {
		that2, ok := that.(SensitiveDataTypes_Mask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mask.Equal(that1.Mask) {
		return false
	}
	return true
}
func (this *SensitiveDataTypes_Report) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SensitiveDataTypes_Report)
	if !ok {
		that2, ok := that.(SensitiveDataTypes_Report)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Report.Equal(that1.Report) {
		return false
	}
	return true
}
func (this *SensitiveDataTypes_ApiEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SensitiveDataTypes_ApiEndpoint)
	if !ok {
		that2, ok := that.(SensitiveDataTypes_ApiEndpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiEndpoint.Equal(that1.ApiEndpoint) {
		return false
	}
	return true
}
func (this *SensitiveDataTypes_BasePath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SensitiveDataTypes_BasePath)
	if !ok {
		that2, ok := that.(SensitiveDataTypes_BasePath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BasePath != that1.BasePath {
		return false
	}
	return true
}
func (this *SensitiveDataTypes_ApiGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SensitiveDataTypes_ApiGroup)
	if !ok {
		that2, ok := that.(SensitiveDataTypes_ApiGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiGroup != that1.ApiGroup {
		return false
	}
	return true
}
func (this *BodySectionMaskingOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BodySectionMaskingOptions)
	if !ok {
		that2, ok := that.(BodySectionMaskingOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if this.Fields[i] != that1.Fields[i] {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.DefaultRoutePools) != len(that1.DefaultRoutePools) {
		return false
	}
	for i := range this.DefaultRoutePools {
		if !this.DefaultRoutePools[i].Equal(that1.DefaultRoutePools[i]) {
			return false
		}
	}
	if that1.OriginPoolChoice == nil {
		if this.OriginPoolChoice != nil {
			return false
		}
	} else if this.OriginPoolChoice == nil {
		return false
	} else if !this.OriginPoolChoice.Equal(that1.OriginPoolChoice) {
		return false
	}
	if !this.OriginServerSubsetRuleList.Equal(that1.OriginServerSubsetRuleList) {
		return false
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if that1.UserIdChoice == nil {
		if this.UserIdChoice != nil {
			return false
		}
	} else if this.UserIdChoice == nil {
		return false
	} else if !this.UserIdChoice.Equal(that1.UserIdChoice) {
		return false
	}
	if !this.ApiRateLimitLegacy.Equal(that1.ApiRateLimitLegacy) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.DataGuardRules) != len(that1.DataGuardRules) {
		return false
	}
	for i := range this.DataGuardRules {
		if !this.DataGuardRules[i].Equal(that1.DataGuardRules[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if !this.ApiProtectionRules.Equal(that1.ApiProtectionRules) {
		return false
	}
	if len(this.DdosMitigationRules) != len(that1.DdosMitigationRules) {
		return false
	}
	for i := range this.DdosMitigationRules {
		if !this.DdosMitigationRules[i].Equal(that1.DdosMitigationRules[i]) {
			return false
		}
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if that1.TrustClientIpHeadersChoice == nil {
		if this.TrustClientIpHeadersChoice != nil {
			return false
		}
	} else if this.TrustClientIpHeadersChoice == nil {
		return false
	} else if !this.TrustClientIpHeadersChoice.Equal(that1.TrustClientIpHeadersChoice) {
		return false
	}
	if that1.MlConfigChoice == nil {
		if this.MlConfigChoice != nil {
			return false
		}
	} else if this.MlConfigChoice == nil {
		return false
	} else if !this.MlConfigChoice.Equal(that1.MlConfigChoice) {
		return false
	}
	if that1.MaliciousUserDetectionChoice == nil {
		if this.MaliciousUserDetectionChoice != nil {
			return false
		}
	} else if this.MaliciousUserDetectionChoice == nil {
		return false
	} else if !this.MaliciousUserDetectionChoice.Equal(that1.MaliciousUserDetectionChoice) {
		return false
	}
	if that1.ApiDiscoveryChoice == nil {
		if this.ApiDiscoveryChoice != nil {
			return false
		}
	} else if this.ApiDiscoveryChoice == nil {
		return false
	} else if !this.ApiDiscoveryChoice.Equal(that1.ApiDiscoveryChoice) {
		return false
	}
	if that1.BotDefenseChoice == nil {
		if this.BotDefenseChoice != nil {
			return false
		}
	} else if this.BotDefenseChoice == nil {
		return false
	} else if !this.BotDefenseChoice.Equal(that1.BotDefenseChoice) {
		return false
	}
	if that1.SensitiveDataPolicyChoice == nil {
		if this.SensitiveDataPolicyChoice != nil {
			return false
		}
	} else if this.SensitiveDataPolicyChoice == nil {
		return false
	} else if !this.SensitiveDataPolicyChoice.Equal(that1.SensitiveDataPolicyChoice) {
		return false
	}
	if that1.ApiDefinitionChoice == nil {
		if this.ApiDefinitionChoice != nil {
			return false
		}
	} else if this.ApiDefinitionChoice == nil {
		return false
	} else if !this.ApiDefinitionChoice.Equal(that1.ApiDefinitionChoice) {
		return false
	}
	if that1.IpReputationChoice == nil {
		if this.IpReputationChoice != nil {
			return false
		}
	} else if this.IpReputationChoice == nil {
		return false
	} else if !this.IpReputationChoice.Equal(that1.IpReputationChoice) {
		return false
	}
	if that1.ClientSideDefenseChoice == nil {
		if this.ClientSideDefenseChoice != nil {
			return false
		}
	} else if this.ClientSideDefenseChoice == nil {
		return false
	} else if !this.ClientSideDefenseChoice.Equal(that1.ClientSideDefenseChoice) {
		return false
	}
	if !this.CsrfPolicy.Equal(that1.CsrfPolicy) {
		return false
	}
	if len(this.GraphqlRules) != len(that1.GraphqlRules) {
		return false
	}
	for i := range this.GraphqlRules {
		if !this.GraphqlRules[i].Equal(that1.GraphqlRules[i]) {
			return false
		}
	}
	if len(this.ProtectedCookies) != len(that1.ProtectedCookies) {
		return false
	}
	for i := range this.ProtectedCookies {
		if !this.ProtectedCookies[i].Equal(that1.ProtectedCookies[i]) {
			return false
		}
	}
	if that1.SlowDdosMitigationChoice == nil {
		if this.SlowDdosMitigationChoice != nil {
			return false
		}
	} else if this.SlowDdosMitigationChoice == nil {
		return false
	} else if !this.SlowDdosMitigationChoice.Equal(that1.SlowDdosMitigationChoice) {
		return false
	}
	if !this.JwtValidation.Equal(that1.JwtValidation) {
		return false
	}
	if that1.ThreatMeshChoice == nil {
		if this.ThreatMeshChoice != nil {
			return false
		}
	} else if this.ThreatMeshChoice == nil {
		return false
	} else if !this.ThreatMeshChoice.Equal(that1.ThreatMeshChoice) {
		return false
	}
	if that1.L7DdosAutoMitigationAction == nil {
		if this.L7DdosAutoMitigationAction != nil {
			return false
		}
	} else if this.L7DdosAutoMitigationAction == nil {
		return false
	} else if !this.L7DdosAutoMitigationAction.Equal(that1.L7DdosAutoMitigationAction) {
		return false
	}
	if !this.SensitiveDataDisclosureRules.Equal(that1.SensitiveDataDisclosureRules) {
		return false
	}
	return true
}
func (this *CreateSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Http)
	if !ok {
		that2, ok := that.(CreateSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *CreateSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(CreateSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *CreateSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Https)
	if !ok {
		that2, ok := that.(CreateSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *CreateSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(CreateSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultPool)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultPool.Equal(that1.DefaultPool) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultPoolList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultPoolList)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultPoolList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultPoolList.Equal(that1.DefaultPoolList) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *CreateSpecType_AppFirewall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AppFirewall)
	if !ok {
		that2, ok := that.(CreateSpecType_AppFirewall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewall.Equal(that1.AppFirewall) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableChallenge.Equal(that1.EnableChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_UserIdClientIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_UserIdClientIp)
	if !ok {
		that2, ok := that.(CreateSpecType_UserIdClientIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdClientIp.Equal(that1.UserIdClientIp) {
		return false
	}
	return true
}
func (this *CreateSpecType_UserIdentification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_UserIdentification)
	if !ok {
		that2, ok := that.(CreateSpecType_UserIdentification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *CreateSpecType_ApiRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ApiRateLimit)
	if !ok {
		that2, ok := that.(CreateSpecType_ApiRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiRateLimit.Equal(that1.ApiRateLimit) {
		return false
	}
	return true
}
func (this *CreateSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RateLimit)
	if !ok {
		that2, ok := that.(CreateSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *CreateSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(CreateSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(CreateSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *CreateSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(CreateSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *CreateSpecType_RoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RoundRobin)
	if !ok {
		that2, ok := that.(CreateSpecType_RoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoundRobin.Equal(that1.RoundRobin) {
		return false
	}
	return true
}
func (this *CreateSpecType_LeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LeastActive)
	if !ok {
		that2, ok := that.(CreateSpecType_LeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LeastActive.Equal(that1.LeastActive) {
		return false
	}
	return true
}
func (this *CreateSpecType_Random) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Random)
	if !ok {
		that2, ok := that.(CreateSpecType_Random)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Random.Equal(that1.Random) {
		return false
	}
	return true
}
func (this *CreateSpecType_SourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SourceIpStickiness)
	if !ok {
		that2, ok := that.(CreateSpecType_SourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceIpStickiness.Equal(that1.SourceIpStickiness) {
		return false
	}
	return true
}
func (this *CreateSpecType_CookieStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CookieStickiness)
	if !ok {
		that2, ok := that.(CreateSpecType_CookieStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CookieStickiness.Equal(that1.CookieStickiness) {
		return false
	}
	return true
}
func (this *CreateSpecType_RingHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RingHash)
	if !ok {
		that2, ok := that.(CreateSpecType_RingHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RingHash.Equal(that1.RingHash) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableTrustClientIpHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableTrustClientIpHeaders)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableTrustClientIpHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableTrustClientIpHeaders.Equal(that1.DisableTrustClientIpHeaders) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableTrustClientIpHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableTrustClientIpHeaders)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableTrustClientIpHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableTrustClientIpHeaders.Equal(that1.EnableTrustClientIpHeaders) {
		return false
	}
	return true
}
func (this *CreateSpecType_SingleLbApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SingleLbApp)
	if !ok {
		that2, ok := that.(CreateSpecType_SingleLbApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SingleLbApp.Equal(that1.SingleLbApp) {
		return false
	}
	return true
}
func (this *CreateSpecType_MultiLbApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_MultiLbApp)
	if !ok {
		that2, ok := that.(CreateSpecType_MultiLbApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MultiLbApp.Equal(that1.MultiLbApp) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableMaliciousUserDetection.Equal(that1.EnableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMaliciousUserDetection.Equal(that1.DisableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableApiDiscovery)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableApiDiscovery.Equal(that1.EnableApiDiscovery) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableApiDiscovery)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDiscovery.Equal(that1.DisableApiDiscovery) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableBotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableBotDefense)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableBotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableBotDefense.Equal(that1.DisableBotDefense) {
		return false
	}
	return true
}
func (this *CreateSpecType_BotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BotDefense)
	if !ok {
		that2, ok := that.(CreateSpecType_BotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefense.Equal(that1.BotDefense) {
		return false
	}
	return true
}
func (this *CreateSpecType_BotDefenseAdvanced) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BotDefenseAdvanced)
	if !ok {
		that2, ok := that.(CreateSpecType_BotDefenseAdvanced)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefenseAdvanced.Equal(that1.BotDefenseAdvanced) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultSensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultSensitiveDataPolicy)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultSensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSensitiveDataPolicy.Equal(that1.DefaultSensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *CreateSpecType_SensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SensitiveDataPolicy)
	if !ok {
		that2, ok := that.(CreateSpecType_SensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SensitiveDataPolicy.Equal(that1.SensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableApiDefinition)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDefinition.Equal(that1.DisableApiDefinition) {
		return false
	}
	return true
}
func (this *CreateSpecType_ApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ApiDefinition)
	if !ok {
		that2, ok := that.(CreateSpecType_ApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	return true
}
func (this *CreateSpecType_ApiSpecification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ApiSpecification)
	if !ok {
		that2, ok := that.(CreateSpecType_ApiSpecification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecification.Equal(that1.ApiSpecification) {
		return false
	}
	return true
}
func (this *CreateSpecType_ApiDefinitions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ApiDefinitions)
	if !ok {
		that2, ok := that.(CreateSpecType_ApiDefinitions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinitions.Equal(that1.ApiDefinitions) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableIpReputation)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableIpReputation.Equal(that1.DisableIpReputation) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableIpReputation)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableIpReputation.Equal(that1.EnableIpReputation) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableClientSideDefense)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableClientSideDefense.Equal(that1.DisableClientSideDefense) {
		return false
	}
	return true
}
func (this *CreateSpecType_ClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ClientSideDefense)
	if !ok {
		that2, ok := that.(CreateSpecType_ClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientSideDefense.Equal(that1.ClientSideDefense) {
		return false
	}
	return true
}
func (this *CreateSpecType_SystemDefaultTimeouts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SystemDefaultTimeouts)
	if !ok {
		that2, ok := that.(CreateSpecType_SystemDefaultTimeouts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SystemDefaultTimeouts.Equal(that1.SystemDefaultTimeouts) {
		return false
	}
	return true
}
func (this *CreateSpecType_SlowDdosMitigation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SlowDdosMitigation)
	if !ok {
		that2, ok := that.(CreateSpecType_SlowDdosMitigation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SlowDdosMitigation.Equal(that1.SlowDdosMitigation) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableThreatMesh)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableThreatMesh.Equal(that1.DisableThreatMesh) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableThreatMesh)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableThreatMesh.Equal(that1.EnableThreatMesh) {
		return false
	}
	return true
}
func (this *CreateSpecType_L7DdosActionDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_L7DdosActionDefault)
	if !ok {
		that2, ok := that.(CreateSpecType_L7DdosActionDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionDefault.Equal(that1.L7DdosActionDefault) {
		return false
	}
	return true
}
func (this *CreateSpecType_L7DdosActionBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_L7DdosActionBlock)
	if !ok {
		that2, ok := that.(CreateSpecType_L7DdosActionBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionBlock.Equal(that1.L7DdosActionBlock) {
		return false
	}
	return true
}
func (this *CreateSpecType_L7DdosActionJsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_L7DdosActionJsChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_L7DdosActionJsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionJsChallenge.Equal(that1.L7DdosActionJsChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_L7DdosActionNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_L7DdosActionNone)
	if !ok {
		that2, ok := that.(CreateSpecType_L7DdosActionNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionNone.Equal(that1.L7DdosActionNone) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.DefaultRoutePools) != len(that1.DefaultRoutePools) {
		return false
	}
	for i := range this.DefaultRoutePools {
		if !this.DefaultRoutePools[i].Equal(that1.DefaultRoutePools[i]) {
			return false
		}
	}
	if that1.OriginPoolChoice == nil {
		if this.OriginPoolChoice != nil {
			return false
		}
	} else if this.OriginPoolChoice == nil {
		return false
	} else if !this.OriginPoolChoice.Equal(that1.OriginPoolChoice) {
		return false
	}
	if !this.OriginServerSubsetRuleList.Equal(that1.OriginServerSubsetRuleList) {
		return false
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if that1.UserIdChoice == nil {
		if this.UserIdChoice != nil {
			return false
		}
	} else if this.UserIdChoice == nil {
		return false
	} else if !this.UserIdChoice.Equal(that1.UserIdChoice) {
		return false
	}
	if !this.ApiRateLimitLegacy.Equal(that1.ApiRateLimitLegacy) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.DataGuardRules) != len(that1.DataGuardRules) {
		return false
	}
	for i := range this.DataGuardRules {
		if !this.DataGuardRules[i].Equal(that1.DataGuardRules[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if !this.ApiProtectionRules.Equal(that1.ApiProtectionRules) {
		return false
	}
	if len(this.DdosMitigationRules) != len(that1.DdosMitigationRules) {
		return false
	}
	for i := range this.DdosMitigationRules {
		if !this.DdosMitigationRules[i].Equal(that1.DdosMitigationRules[i]) {
			return false
		}
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if that1.TrustClientIpHeadersChoice == nil {
		if this.TrustClientIpHeadersChoice != nil {
			return false
		}
	} else if this.TrustClientIpHeadersChoice == nil {
		return false
	} else if !this.TrustClientIpHeadersChoice.Equal(that1.TrustClientIpHeadersChoice) {
		return false
	}
	if that1.MlConfigChoice == nil {
		if this.MlConfigChoice != nil {
			return false
		}
	} else if this.MlConfigChoice == nil {
		return false
	} else if !this.MlConfigChoice.Equal(that1.MlConfigChoice) {
		return false
	}
	if that1.MaliciousUserDetectionChoice == nil {
		if this.MaliciousUserDetectionChoice != nil {
			return false
		}
	} else if this.MaliciousUserDetectionChoice == nil {
		return false
	} else if !this.MaliciousUserDetectionChoice.Equal(that1.MaliciousUserDetectionChoice) {
		return false
	}
	if that1.ApiDiscoveryChoice == nil {
		if this.ApiDiscoveryChoice != nil {
			return false
		}
	} else if this.ApiDiscoveryChoice == nil {
		return false
	} else if !this.ApiDiscoveryChoice.Equal(that1.ApiDiscoveryChoice) {
		return false
	}
	if that1.BotDefenseChoice == nil {
		if this.BotDefenseChoice != nil {
			return false
		}
	} else if this.BotDefenseChoice == nil {
		return false
	} else if !this.BotDefenseChoice.Equal(that1.BotDefenseChoice) {
		return false
	}
	if that1.SensitiveDataPolicyChoice == nil {
		if this.SensitiveDataPolicyChoice != nil {
			return false
		}
	} else if this.SensitiveDataPolicyChoice == nil {
		return false
	} else if !this.SensitiveDataPolicyChoice.Equal(that1.SensitiveDataPolicyChoice) {
		return false
	}
	if that1.ApiDefinitionChoice == nil {
		if this.ApiDefinitionChoice != nil {
			return false
		}
	} else if this.ApiDefinitionChoice == nil {
		return false
	} else if !this.ApiDefinitionChoice.Equal(that1.ApiDefinitionChoice) {
		return false
	}
	if that1.IpReputationChoice == nil {
		if this.IpReputationChoice != nil {
			return false
		}
	} else if this.IpReputationChoice == nil {
		return false
	} else if !this.IpReputationChoice.Equal(that1.IpReputationChoice) {
		return false
	}
	if that1.ClientSideDefenseChoice == nil {
		if this.ClientSideDefenseChoice != nil {
			return false
		}
	} else if this.ClientSideDefenseChoice == nil {
		return false
	} else if !this.ClientSideDefenseChoice.Equal(that1.ClientSideDefenseChoice) {
		return false
	}
	if !this.CsrfPolicy.Equal(that1.CsrfPolicy) {
		return false
	}
	if len(this.GraphqlRules) != len(that1.GraphqlRules) {
		return false
	}
	for i := range this.GraphqlRules {
		if !this.GraphqlRules[i].Equal(that1.GraphqlRules[i]) {
			return false
		}
	}
	if len(this.ProtectedCookies) != len(that1.ProtectedCookies) {
		return false
	}
	for i := range this.ProtectedCookies {
		if !this.ProtectedCookies[i].Equal(that1.ProtectedCookies[i]) {
			return false
		}
	}
	if that1.SlowDdosMitigationChoice == nil {
		if this.SlowDdosMitigationChoice != nil {
			return false
		}
	} else if this.SlowDdosMitigationChoice == nil {
		return false
	} else if !this.SlowDdosMitigationChoice.Equal(that1.SlowDdosMitigationChoice) {
		return false
	}
	if !this.JwtValidation.Equal(that1.JwtValidation) {
		return false
	}
	if that1.ThreatMeshChoice == nil {
		if this.ThreatMeshChoice != nil {
			return false
		}
	} else if this.ThreatMeshChoice == nil {
		return false
	} else if !this.ThreatMeshChoice.Equal(that1.ThreatMeshChoice) {
		return false
	}
	if that1.L7DdosAutoMitigationAction == nil {
		if this.L7DdosAutoMitigationAction != nil {
			return false
		}
	} else if this.L7DdosAutoMitigationAction == nil {
		return false
	} else if !this.L7DdosAutoMitigationAction.Equal(that1.L7DdosAutoMitigationAction) {
		return false
	}
	if !this.SensitiveDataDisclosureRules.Equal(that1.SensitiveDataDisclosureRules) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Http)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Https)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultPool)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultPool.Equal(that1.DefaultPool) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultPoolList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultPoolList)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultPoolList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultPoolList.Equal(that1.DefaultPoolList) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AppFirewall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AppFirewall)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AppFirewall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewall.Equal(that1.AppFirewall) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableChallenge.Equal(that1.EnableChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_UserIdClientIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_UserIdClientIp)
	if !ok {
		that2, ok := that.(ReplaceSpecType_UserIdClientIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdClientIp.Equal(that1.UserIdClientIp) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_UserIdentification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_UserIdentification)
	if !ok {
		that2, ok := that.(ReplaceSpecType_UserIdentification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ApiRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ApiRateLimit)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ApiRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiRateLimit.Equal(that1.ApiRateLimit) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RateLimit)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RoundRobin)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoundRobin.Equal(that1.RoundRobin) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LeastActive)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LeastActive.Equal(that1.LeastActive) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Random) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Random)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Random)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Random.Equal(that1.Random) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SourceIpStickiness)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceIpStickiness.Equal(that1.SourceIpStickiness) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CookieStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CookieStickiness)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CookieStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CookieStickiness.Equal(that1.CookieStickiness) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RingHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RingHash)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RingHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RingHash.Equal(that1.RingHash) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableTrustClientIpHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableTrustClientIpHeaders)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableTrustClientIpHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableTrustClientIpHeaders.Equal(that1.DisableTrustClientIpHeaders) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableTrustClientIpHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableTrustClientIpHeaders)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableTrustClientIpHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableTrustClientIpHeaders.Equal(that1.EnableTrustClientIpHeaders) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SingleLbApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SingleLbApp)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SingleLbApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SingleLbApp.Equal(that1.SingleLbApp) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_MultiLbApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_MultiLbApp)
	if !ok {
		that2, ok := that.(ReplaceSpecType_MultiLbApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MultiLbApp.Equal(that1.MultiLbApp) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableMaliciousUserDetection.Equal(that1.EnableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMaliciousUserDetection.Equal(that1.DisableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableApiDiscovery)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableApiDiscovery.Equal(that1.EnableApiDiscovery) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableApiDiscovery)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDiscovery.Equal(that1.DisableApiDiscovery) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableBotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableBotDefense)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableBotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableBotDefense.Equal(that1.DisableBotDefense) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BotDefense)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefense.Equal(that1.BotDefense) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BotDefenseAdvanced) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BotDefenseAdvanced)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BotDefenseAdvanced)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefenseAdvanced.Equal(that1.BotDefenseAdvanced) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultSensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultSensitiveDataPolicy)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultSensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSensitiveDataPolicy.Equal(that1.DefaultSensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SensitiveDataPolicy)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SensitiveDataPolicy.Equal(that1.SensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableApiDefinition)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDefinition.Equal(that1.DisableApiDefinition) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ApiDefinition)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ApiSpecification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ApiSpecification)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ApiSpecification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecification.Equal(that1.ApiSpecification) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ApiDefinitions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ApiDefinitions)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ApiDefinitions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinitions.Equal(that1.ApiDefinitions) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableIpReputation)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableIpReputation.Equal(that1.DisableIpReputation) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableIpReputation)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableIpReputation.Equal(that1.EnableIpReputation) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableClientSideDefense)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableClientSideDefense.Equal(that1.DisableClientSideDefense) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ClientSideDefense)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientSideDefense.Equal(that1.ClientSideDefense) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SystemDefaultTimeouts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SystemDefaultTimeouts)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SystemDefaultTimeouts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SystemDefaultTimeouts.Equal(that1.SystemDefaultTimeouts) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SlowDdosMitigation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SlowDdosMitigation)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SlowDdosMitigation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SlowDdosMitigation.Equal(that1.SlowDdosMitigation) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableThreatMesh)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableThreatMesh.Equal(that1.DisableThreatMesh) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableThreatMesh)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableThreatMesh.Equal(that1.EnableThreatMesh) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_L7DdosActionDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_L7DdosActionDefault)
	if !ok {
		that2, ok := that.(ReplaceSpecType_L7DdosActionDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionDefault.Equal(that1.L7DdosActionDefault) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_L7DdosActionBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_L7DdosActionBlock)
	if !ok {
		that2, ok := that.(ReplaceSpecType_L7DdosActionBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionBlock.Equal(that1.L7DdosActionBlock) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_L7DdosActionJsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_L7DdosActionJsChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_L7DdosActionJsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionJsChallenge.Equal(that1.L7DdosActionJsChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_L7DdosActionNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_L7DdosActionNone)
	if !ok {
		that2, ok := that.(ReplaceSpecType_L7DdosActionNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionNone.Equal(that1.L7DdosActionNone) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if len(this.DownstreamTlsCertificateExpirationTimestamps) != len(that1.DownstreamTlsCertificateExpirationTimestamps) {
		return false
	}
	for i := range this.DownstreamTlsCertificateExpirationTimestamps {
		if !this.DownstreamTlsCertificateExpirationTimestamps[i].Equal(that1.DownstreamTlsCertificateExpirationTimestamps[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.DefaultRoutePools) != len(that1.DefaultRoutePools) {
		return false
	}
	for i := range this.DefaultRoutePools {
		if !this.DefaultRoutePools[i].Equal(that1.DefaultRoutePools[i]) {
			return false
		}
	}
	if that1.OriginPoolChoice == nil {
		if this.OriginPoolChoice != nil {
			return false
		}
	} else if this.OriginPoolChoice == nil {
		return false
	} else if !this.OriginPoolChoice.Equal(that1.OriginPoolChoice) {
		return false
	}
	if !this.OriginServerSubsetRuleList.Equal(that1.OriginServerSubsetRuleList) {
		return false
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if that1.UserIdChoice == nil {
		if this.UserIdChoice != nil {
			return false
		}
	} else if this.UserIdChoice == nil {
		return false
	} else if !this.UserIdChoice.Equal(that1.UserIdChoice) {
		return false
	}
	if !this.ApiRateLimitLegacy.Equal(that1.ApiRateLimitLegacy) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.DataGuardRules) != len(that1.DataGuardRules) {
		return false
	}
	for i := range this.DataGuardRules {
		if !this.DataGuardRules[i].Equal(that1.DataGuardRules[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if !this.ApiProtectionRules.Equal(that1.ApiProtectionRules) {
		return false
	}
	if len(this.DdosMitigationRules) != len(that1.DdosMitigationRules) {
		return false
	}
	for i := range this.DdosMitigationRules {
		if !this.DdosMitigationRules[i].Equal(that1.DdosMitigationRules[i]) {
			return false
		}
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if that1.TrustClientIpHeadersChoice == nil {
		if this.TrustClientIpHeadersChoice != nil {
			return false
		}
	} else if this.TrustClientIpHeadersChoice == nil {
		return false
	} else if !this.TrustClientIpHeadersChoice.Equal(that1.TrustClientIpHeadersChoice) {
		return false
	}
	if that1.MlConfigChoice == nil {
		if this.MlConfigChoice != nil {
			return false
		}
	} else if this.MlConfigChoice == nil {
		return false
	} else if !this.MlConfigChoice.Equal(that1.MlConfigChoice) {
		return false
	}
	if that1.MaliciousUserDetectionChoice == nil {
		if this.MaliciousUserDetectionChoice != nil {
			return false
		}
	} else if this.MaliciousUserDetectionChoice == nil {
		return false
	} else if !this.MaliciousUserDetectionChoice.Equal(that1.MaliciousUserDetectionChoice) {
		return false
	}
	if that1.ApiDiscoveryChoice == nil {
		if this.ApiDiscoveryChoice != nil {
			return false
		}
	} else if this.ApiDiscoveryChoice == nil {
		return false
	} else if !this.ApiDiscoveryChoice.Equal(that1.ApiDiscoveryChoice) {
		return false
	}
	if that1.BotDefenseChoice == nil {
		if this.BotDefenseChoice != nil {
			return false
		}
	} else if this.BotDefenseChoice == nil {
		return false
	} else if !this.BotDefenseChoice.Equal(that1.BotDefenseChoice) {
		return false
	}
	if that1.SensitiveDataPolicyChoice == nil {
		if this.SensitiveDataPolicyChoice != nil {
			return false
		}
	} else if this.SensitiveDataPolicyChoice == nil {
		return false
	} else if !this.SensitiveDataPolicyChoice.Equal(that1.SensitiveDataPolicyChoice) {
		return false
	}
	if that1.ApiDefinitionChoice == nil {
		if this.ApiDefinitionChoice != nil {
			return false
		}
	} else if this.ApiDefinitionChoice == nil {
		return false
	} else if !this.ApiDefinitionChoice.Equal(that1.ApiDefinitionChoice) {
		return false
	}
	if that1.IpReputationChoice == nil {
		if this.IpReputationChoice != nil {
			return false
		}
	} else if this.IpReputationChoice == nil {
		return false
	} else if !this.IpReputationChoice.Equal(that1.IpReputationChoice) {
		return false
	}
	if that1.ClientSideDefenseChoice == nil {
		if this.ClientSideDefenseChoice != nil {
			return false
		}
	} else if this.ClientSideDefenseChoice == nil {
		return false
	} else if !this.ClientSideDefenseChoice.Equal(that1.ClientSideDefenseChoice) {
		return false
	}
	if !this.CsrfPolicy.Equal(that1.CsrfPolicy) {
		return false
	}
	if len(this.GraphqlRules) != len(that1.GraphqlRules) {
		return false
	}
	for i := range this.GraphqlRules {
		if !this.GraphqlRules[i].Equal(that1.GraphqlRules[i]) {
			return false
		}
	}
	if len(this.ProtectedCookies) != len(that1.ProtectedCookies) {
		return false
	}
	for i := range this.ProtectedCookies {
		if !this.ProtectedCookies[i].Equal(that1.ProtectedCookies[i]) {
			return false
		}
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if this.State != that1.State {
		return false
	}
	if !this.AutoCertInfo.Equal(that1.AutoCertInfo) {
		return false
	}
	if len(this.InternetVipInfo) != len(that1.InternetVipInfo) {
		return false
	}
	for i := range this.InternetVipInfo {
		if !this.InternetVipInfo[i].Equal(that1.InternetVipInfo[i]) {
			return false
		}
	}
	if that1.SlowDdosMitigationChoice == nil {
		if this.SlowDdosMitigationChoice != nil {
			return false
		}
	} else if this.SlowDdosMitigationChoice == nil {
		return false
	} else if !this.SlowDdosMitigationChoice.Equal(that1.SlowDdosMitigationChoice) {
		return false
	}
	if !this.JwtValidation.Equal(that1.JwtValidation) {
		return false
	}
	if that1.ThreatMeshChoice == nil {
		if this.ThreatMeshChoice != nil {
			return false
		}
	} else if this.ThreatMeshChoice == nil {
		return false
	} else if !this.ThreatMeshChoice.Equal(that1.ThreatMeshChoice) {
		return false
	}
	if that1.L7DdosAutoMitigationAction == nil {
		if this.L7DdosAutoMitigationAction != nil {
			return false
		}
	} else if this.L7DdosAutoMitigationAction == nil {
		return false
	} else if !this.L7DdosAutoMitigationAction.Equal(that1.L7DdosAutoMitigationAction) {
		return false
	}
	if this.CertState != that1.CertState {
		return false
	}
	if !this.SensitiveDataDisclosureRules.Equal(that1.SensitiveDataDisclosureRules) {
		return false
	}
	return true
}
func (this *GetSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Http)
	if !ok {
		that2, ok := that.(GetSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *GetSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(GetSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *GetSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Https)
	if !ok {
		that2, ok := that.(GetSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *GetSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(GetSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultPool)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultPool.Equal(that1.DefaultPool) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultPoolList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultPoolList)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultPoolList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultPoolList.Equal(that1.DefaultPoolList) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(GetSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *GetSpecType_AppFirewall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AppFirewall)
	if !ok {
		that2, ok := that.(GetSpecType_AppFirewall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewall.Equal(that1.AppFirewall) {
		return false
	}
	return true
}
func (this *GetSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_EnableChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableChallenge.Equal(that1.EnableChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_UserIdClientIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UserIdClientIp)
	if !ok {
		that2, ok := that.(GetSpecType_UserIdClientIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdClientIp.Equal(that1.UserIdClientIp) {
		return false
	}
	return true
}
func (this *GetSpecType_UserIdentification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UserIdentification)
	if !ok {
		that2, ok := that.(GetSpecType_UserIdentification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(GetSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *GetSpecType_ApiRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ApiRateLimit)
	if !ok {
		that2, ok := that.(GetSpecType_ApiRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiRateLimit.Equal(that1.ApiRateLimit) {
		return false
	}
	return true
}
func (this *GetSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RateLimit)
	if !ok {
		that2, ok := that.(GetSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *GetSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(GetSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *GetSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(GetSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *GetSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(GetSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *GetSpecType_RoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RoundRobin)
	if !ok {
		that2, ok := that.(GetSpecType_RoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoundRobin.Equal(that1.RoundRobin) {
		return false
	}
	return true
}
func (this *GetSpecType_LeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LeastActive)
	if !ok {
		that2, ok := that.(GetSpecType_LeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LeastActive.Equal(that1.LeastActive) {
		return false
	}
	return true
}
func (this *GetSpecType_Random) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Random)
	if !ok {
		that2, ok := that.(GetSpecType_Random)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Random.Equal(that1.Random) {
		return false
	}
	return true
}
func (this *GetSpecType_SourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SourceIpStickiness)
	if !ok {
		that2, ok := that.(GetSpecType_SourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceIpStickiness.Equal(that1.SourceIpStickiness) {
		return false
	}
	return true
}
func (this *GetSpecType_CookieStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CookieStickiness)
	if !ok {
		that2, ok := that.(GetSpecType_CookieStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CookieStickiness.Equal(that1.CookieStickiness) {
		return false
	}
	return true
}
func (this *GetSpecType_RingHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RingHash)
	if !ok {
		that2, ok := that.(GetSpecType_RingHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RingHash.Equal(that1.RingHash) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableTrustClientIpHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableTrustClientIpHeaders)
	if !ok {
		that2, ok := that.(GetSpecType_DisableTrustClientIpHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableTrustClientIpHeaders.Equal(that1.DisableTrustClientIpHeaders) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableTrustClientIpHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableTrustClientIpHeaders)
	if !ok {
		that2, ok := that.(GetSpecType_EnableTrustClientIpHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableTrustClientIpHeaders.Equal(that1.EnableTrustClientIpHeaders) {
		return false
	}
	return true
}
func (this *GetSpecType_SingleLbApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SingleLbApp)
	if !ok {
		that2, ok := that.(GetSpecType_SingleLbApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SingleLbApp.Equal(that1.SingleLbApp) {
		return false
	}
	return true
}
func (this *GetSpecType_MultiLbApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_MultiLbApp)
	if !ok {
		that2, ok := that.(GetSpecType_MultiLbApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MultiLbApp.Equal(that1.MultiLbApp) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(GetSpecType_EnableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableMaliciousUserDetection.Equal(that1.EnableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(GetSpecType_DisableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMaliciousUserDetection.Equal(that1.DisableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableApiDiscovery)
	if !ok {
		that2, ok := that.(GetSpecType_EnableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableApiDiscovery.Equal(that1.EnableApiDiscovery) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableApiDiscovery)
	if !ok {
		that2, ok := that.(GetSpecType_DisableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDiscovery.Equal(that1.DisableApiDiscovery) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableBotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableBotDefense)
	if !ok {
		that2, ok := that.(GetSpecType_DisableBotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableBotDefense.Equal(that1.DisableBotDefense) {
		return false
	}
	return true
}
func (this *GetSpecType_BotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BotDefense)
	if !ok {
		that2, ok := that.(GetSpecType_BotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefense.Equal(that1.BotDefense) {
		return false
	}
	return true
}
func (this *GetSpecType_BotDefenseAdvanced) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BotDefenseAdvanced)
	if !ok {
		that2, ok := that.(GetSpecType_BotDefenseAdvanced)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefenseAdvanced.Equal(that1.BotDefenseAdvanced) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultSensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultSensitiveDataPolicy)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultSensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSensitiveDataPolicy.Equal(that1.DefaultSensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *GetSpecType_SensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SensitiveDataPolicy)
	if !ok {
		that2, ok := that.(GetSpecType_SensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SensitiveDataPolicy.Equal(that1.SensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableApiDefinition)
	if !ok {
		that2, ok := that.(GetSpecType_DisableApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDefinition.Equal(that1.DisableApiDefinition) {
		return false
	}
	return true
}
func (this *GetSpecType_ApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ApiDefinition)
	if !ok {
		that2, ok := that.(GetSpecType_ApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	return true
}
func (this *GetSpecType_ApiSpecification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ApiSpecification)
	if !ok {
		that2, ok := that.(GetSpecType_ApiSpecification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecification.Equal(that1.ApiSpecification) {
		return false
	}
	return true
}
func (this *GetSpecType_ApiDefinitions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ApiDefinitions)
	if !ok {
		that2, ok := that.(GetSpecType_ApiDefinitions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinitions.Equal(that1.ApiDefinitions) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableIpReputation)
	if !ok {
		that2, ok := that.(GetSpecType_DisableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableIpReputation.Equal(that1.DisableIpReputation) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableIpReputation)
	if !ok {
		that2, ok := that.(GetSpecType_EnableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableIpReputation.Equal(that1.EnableIpReputation) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableClientSideDefense)
	if !ok {
		that2, ok := that.(GetSpecType_DisableClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableClientSideDefense.Equal(that1.DisableClientSideDefense) {
		return false
	}
	return true
}
func (this *GetSpecType_ClientSideDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ClientSideDefense)
	if !ok {
		that2, ok := that.(GetSpecType_ClientSideDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientSideDefense.Equal(that1.ClientSideDefense) {
		return false
	}
	return true
}
func (this *GetSpecType_SystemDefaultTimeouts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SystemDefaultTimeouts)
	if !ok {
		that2, ok := that.(GetSpecType_SystemDefaultTimeouts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SystemDefaultTimeouts.Equal(that1.SystemDefaultTimeouts) {
		return false
	}
	return true
}
func (this *GetSpecType_SlowDdosMitigation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SlowDdosMitigation)
	if !ok {
		that2, ok := that.(GetSpecType_SlowDdosMitigation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SlowDdosMitigation.Equal(that1.SlowDdosMitigation) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableThreatMesh)
	if !ok {
		that2, ok := that.(GetSpecType_DisableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableThreatMesh.Equal(that1.DisableThreatMesh) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableThreatMesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableThreatMesh)
	if !ok {
		that2, ok := that.(GetSpecType_EnableThreatMesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableThreatMesh.Equal(that1.EnableThreatMesh) {
		return false
	}
	return true
}
func (this *GetSpecType_L7DdosActionDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_L7DdosActionDefault)
	if !ok {
		that2, ok := that.(GetSpecType_L7DdosActionDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionDefault.Equal(that1.L7DdosActionDefault) {
		return false
	}
	return true
}
func (this *GetSpecType_L7DdosActionBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_L7DdosActionBlock)
	if !ok {
		that2, ok := that.(GetSpecType_L7DdosActionBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionBlock.Equal(that1.L7DdosActionBlock) {
		return false
	}
	return true
}
func (this *GetSpecType_L7DdosActionJsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_L7DdosActionJsChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_L7DdosActionJsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionJsChallenge.Equal(that1.L7DdosActionJsChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_L7DdosActionNone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_L7DdosActionNone)
	if !ok {
		that2, ok := that.(GetSpecType_L7DdosActionNone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.L7DdosActionNone.Equal(that1.L7DdosActionNone) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&http_loadbalancer.ProxyTypeHttps{")
	s = append(s, "HttpRedirect: "+fmt.Sprintf("%#v", this.HttpRedirect)+",\n")
	s = append(s, "AddHsts: "+fmt.Sprintf("%#v", this.AddHsts)+",\n")
	if this.TlsCertificatesChoice != nil {
		s = append(s, "TlsCertificatesChoice: "+fmt.Sprintf("%#v", this.TlsCertificatesChoice)+",\n")
	}
	if this.ServerHeaderChoice != nil {
		s = append(s, "ServerHeaderChoice: "+fmt.Sprintf("%#v", this.ServerHeaderChoice)+",\n")
	}
	if this.PathNormalizeChoice != nil {
		s = append(s, "PathNormalizeChoice: "+fmt.Sprintf("%#v", this.PathNormalizeChoice)+",\n")
	}
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	if this.DefaultLbChoice != nil {
		s = append(s, "DefaultLbChoice: "+fmt.Sprintf("%#v", this.DefaultLbChoice)+",\n")
	}
	if this.HeaderTransformationType != nil {
		s = append(s, "HeaderTransformationType: "+fmt.Sprintf("%#v", this.HeaderTransformationType)+",\n")
	}
	s = append(s, "ConnectionIdleTimeout: "+fmt.Sprintf("%#v", this.ConnectionIdleTimeout)+",\n")
	if this.HttpProtocolOptions != nil {
		s = append(s, "HttpProtocolOptions: "+fmt.Sprintf("%#v", this.HttpProtocolOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyTypeHttps_TlsParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_TlsParameters{` +
		`TlsParameters:` + fmt.Sprintf("%#v", this.TlsParameters) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_TlsCertParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_TlsCertParams{` +
		`TlsCertParams:` + fmt.Sprintf("%#v", this.TlsCertParams) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_DefaultHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_DefaultHeader{` +
		`DefaultHeader:` + fmt.Sprintf("%#v", this.DefaultHeader) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_ServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_ServerName{` +
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_AppendServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_AppendServerName{` +
		`AppendServerName:` + fmt.Sprintf("%#v", this.AppendServerName) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_PassThrough) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_PassThrough{` +
		`PassThrough:` + fmt.Sprintf("%#v", this.PassThrough) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_EnablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_EnablePathNormalize{` +
		`EnablePathNormalize:` + fmt.Sprintf("%#v", this.EnablePathNormalize) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_DisablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_DisablePathNormalize{` +
		`DisablePathNormalize:` + fmt.Sprintf("%#v", this.DisablePathNormalize) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_Port) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_Port{` +
		`Port:` + fmt.Sprintf("%#v", this.Port) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_PortRanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_PortRanges{` +
		`PortRanges:` + fmt.Sprintf("%#v", this.PortRanges) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_NonDefaultLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_NonDefaultLoadbalancer{` +
		`NonDefaultLoadbalancer:` + fmt.Sprintf("%#v", this.NonDefaultLoadbalancer) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_DefaultLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_DefaultLoadbalancer{` +
		`DefaultLoadbalancer:` + fmt.Sprintf("%#v", this.DefaultLoadbalancer) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&http_loadbalancer.ProxyTypeHttp{")
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyTypeHttp_Port) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttp_Port{` +
		`Port:` + fmt.Sprintf("%#v", this.Port) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttp_PortRanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttp_PortRanges{` +
		`PortRanges:` + fmt.Sprintf("%#v", this.PortRanges) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 22)
	s = append(s, "&http_loadbalancer.ProxyTypeHttpsAutoCerts{")
	s = append(s, "HttpRedirect: "+fmt.Sprintf("%#v", this.HttpRedirect)+",\n")
	s = append(s, "AddHsts: "+fmt.Sprintf("%#v", this.AddHsts)+",\n")
	if this.TlsConfig != nil {
		s = append(s, "TlsConfig: "+fmt.Sprintf("%#v", this.TlsConfig)+",\n")
	}
	if this.MtlsChoice != nil {
		s = append(s, "MtlsChoice: "+fmt.Sprintf("%#v", this.MtlsChoice)+",\n")
	}
	if this.ServerHeaderChoice != nil {
		s = append(s, "ServerHeaderChoice: "+fmt.Sprintf("%#v", this.ServerHeaderChoice)+",\n")
	}
	if this.PathNormalizeChoice != nil {
		s = append(s, "PathNormalizeChoice: "+fmt.Sprintf("%#v", this.PathNormalizeChoice)+",\n")
	}
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	if this.DefaultLbChoice != nil {
		s = append(s, "DefaultLbChoice: "+fmt.Sprintf("%#v", this.DefaultLbChoice)+",\n")
	}
	if this.HeaderTransformationType != nil {
		s = append(s, "HeaderTransformationType: "+fmt.Sprintf("%#v", this.HeaderTransformationType)+",\n")
	}
	s = append(s, "ConnectionIdleTimeout: "+fmt.Sprintf("%#v", this.ConnectionIdleTimeout)+",\n")
	if this.HttpProtocolOptions != nil {
		s = append(s, "HttpProtocolOptions: "+fmt.Sprintf("%#v", this.HttpProtocolOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyTypeHttpsAutoCerts_NoMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_NoMtls{` +
		`NoMtls:` + fmt.Sprintf("%#v", this.NoMtls) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_UseMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_UseMtls{` +
		`UseMtls:` + fmt.Sprintf("%#v", this.UseMtls) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_DefaultHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_DefaultHeader{` +
		`DefaultHeader:` + fmt.Sprintf("%#v", this.DefaultHeader) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_ServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_ServerName{` +
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_AppendServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_AppendServerName{` +
		`AppendServerName:` + fmt.Sprintf("%#v", this.AppendServerName) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_PassThrough) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_PassThrough{` +
		`PassThrough:` + fmt.Sprintf("%#v", this.PassThrough) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_EnablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_EnablePathNormalize{` +
		`EnablePathNormalize:` + fmt.Sprintf("%#v", this.EnablePathNormalize) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_DisablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_DisablePathNormalize{` +
		`DisablePathNormalize:` + fmt.Sprintf("%#v", this.DisablePathNormalize) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_Port) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_Port{` +
		`Port:` + fmt.Sprintf("%#v", this.Port) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_PortRanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_PortRanges{` +
		`PortRanges:` + fmt.Sprintf("%#v", this.PortRanges) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer{` +
		`NonDefaultLoadbalancer:` + fmt.Sprintf("%#v", this.NonDefaultLoadbalancer) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_DefaultLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_DefaultLoadbalancer{` +
		`DefaultLoadbalancer:` + fmt.Sprintf("%#v", this.DefaultLoadbalancer) + `}`}, ", ")
	return s
}
func (this *HashPolicyListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.HashPolicyListType{")
	if this.HashPolicy != nil {
		s = append(s, "HashPolicy: "+fmt.Sprintf("%#v", this.HashPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MirrorPolicyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.MirrorPolicyType{")
	if this.OriginPool != nil {
		s = append(s, "OriginPool: "+fmt.Sprintf("%#v", this.OriginPool)+",\n")
	}
	if this.Percent != nil {
		s = append(s, "Percent: "+fmt.Sprintf("%#v", this.Percent)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteSimpleAdvancedOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 37)
	s = append(s, "&http_loadbalancer.RouteSimpleAdvancedOptions{")
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "Priority: "+fmt.Sprintf("%#v", this.Priority)+",\n")
	keysForEndpointSubsets := make([]string, 0, len(this.EndpointSubsets))
	for k, _ := range this.EndpointSubsets {
		keysForEndpointSubsets = append(keysForEndpointSubsets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEndpointSubsets)
	mapStringForEndpointSubsets := "map[string]string{"
	for _, k := range keysForEndpointSubsets {
		mapStringForEndpointSubsets += fmt.Sprintf("%#v: %#v,", k, this.EndpointSubsets[k])
	}
	mapStringForEndpointSubsets += "}"
	if this.EndpointSubsets != nil {
		s = append(s, "EndpointSubsets: "+mapStringForEndpointSubsets+",\n")
	}
	if this.RewriteChoice != nil {
		s = append(s, "RewriteChoice: "+fmt.Sprintf("%#v", this.RewriteChoice)+",\n")
	}
	if this.RequestHeadersToAdd != nil {
		s = append(s, "RequestHeadersToAdd: "+fmt.Sprintf("%#v", this.RequestHeadersToAdd)+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	if this.ResponseHeadersToAdd != nil {
		s = append(s, "ResponseHeadersToAdd: "+fmt.Sprintf("%#v", this.ResponseHeadersToAdd)+",\n")
	}
	s = append(s, "ResponseHeadersToRemove: "+fmt.Sprintf("%#v", this.ResponseHeadersToRemove)+",\n")
	s = append(s, "DisableLocationAdd: "+fmt.Sprintf("%#v", this.DisableLocationAdd)+",\n")
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.CsrfPolicy != nil {
		s = append(s, "CsrfPolicy: "+fmt.Sprintf("%#v", this.CsrfPolicy)+",\n")
	}
	if this.SpdyChoice != nil {
		s = append(s, "SpdyChoice: "+fmt.Sprintf("%#v", this.SpdyChoice)+",\n")
	}
	if this.WebsocketChoice != nil {
		s = append(s, "WebsocketChoice: "+fmt.Sprintf("%#v", this.WebsocketChoice)+",\n")
	}
	if this.RetryPolicyChoice != nil {
		s = append(s, "RetryPolicyChoice: "+fmt.Sprintf("%#v", this.RetryPolicyChoice)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	if this.BufferChoice != nil {
		s = append(s, "BufferChoice: "+fmt.Sprintf("%#v", this.BufferChoice)+",\n")
	}
	if this.MirroringChoice != nil {
		s = append(s, "MirroringChoice: "+fmt.Sprintf("%#v", this.MirroringChoice)+",\n")
	}
	if this.ClusterRetractChoice != nil {
		s = append(s, "ClusterRetractChoice: "+fmt.Sprintf("%#v", this.ClusterRetractChoice)+",\n")
	}
	if this.BotDefenseJavascriptInjectionChoice != nil {
		s = append(s, "BotDefenseJavascriptInjectionChoice: "+fmt.Sprintf("%#v", this.BotDefenseJavascriptInjectionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteSimpleAdvancedOptions_CommonHashPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_CommonHashPolicy{` +
		`CommonHashPolicy:` + fmt.Sprintf("%#v", this.CommonHashPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_SpecificHashPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_SpecificHashPolicy{` +
		`SpecificHashPolicy:` + fmt.Sprintf("%#v", this.SpecificHashPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisablePrefixRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DisablePrefixRewrite{` +
		`DisablePrefixRewrite:` + fmt.Sprintf("%#v", this.DisablePrefixRewrite) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_PrefixRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_PrefixRewrite{` +
		`PrefixRewrite:` + fmt.Sprintf("%#v", this.PrefixRewrite) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_RegexRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_RegexRewrite{` +
		`RegexRewrite:` + fmt.Sprintf("%#v", this.RegexRewrite) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_InheritedWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_InheritedWaf{` +
		`InheritedWaf:` + fmt.Sprintf("%#v", this.InheritedWaf) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_AppFirewall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_AppFirewall{` +
		`AppFirewall:` + fmt.Sprintf("%#v", this.AppFirewall) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableSpdy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DisableSpdy{` +
		`DisableSpdy:` + fmt.Sprintf("%#v", this.DisableSpdy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_EnableSpdy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_EnableSpdy{` +
		`EnableSpdy:` + fmt.Sprintf("%#v", this.EnableSpdy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableWebSocketConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DisableWebSocketConfig{` +
		`DisableWebSocketConfig:` + fmt.Sprintf("%#v", this.DisableWebSocketConfig) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_WebSocketConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_WebSocketConfig{` +
		`WebSocketConfig:` + fmt.Sprintf("%#v", this.WebSocketConfig) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DefaultRetryPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DefaultRetryPolicy{` +
		`DefaultRetryPolicy:` + fmt.Sprintf("%#v", this.DefaultRetryPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_NoRetryPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_NoRetryPolicy{` +
		`NoRetryPolicy:` + fmt.Sprintf("%#v", this.NoRetryPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_RetryPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_RetryPolicy{` +
		`RetryPolicy:` + fmt.Sprintf("%#v", this.RetryPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_CommonBuffering) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_CommonBuffering{` +
		`CommonBuffering:` + fmt.Sprintf("%#v", this.CommonBuffering) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_BufferPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_BufferPolicy{` +
		`BufferPolicy:` + fmt.Sprintf("%#v", this.BufferPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableMirroring) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DisableMirroring{` +
		`DisableMirroring:` + fmt.Sprintf("%#v", this.DisableMirroring) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_MirrorPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_MirrorPolicy{` +
		`MirrorPolicy:` + fmt.Sprintf("%#v", this.MirrorPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_RetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_RetractCluster{` +
		`RetractCluster:` + fmt.Sprintf("%#v", this.RetractCluster) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DoNotRetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DoNotRetractCluster{` +
		`DoNotRetractCluster:` + fmt.Sprintf("%#v", this.DoNotRetractCluster) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection{` +
		`InheritedBotDefenseJavascriptInjection:` + fmt.Sprintf("%#v", this.InheritedBotDefenseJavascriptInjection) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection{` +
		`BotDefenseJavascriptInjection:` + fmt.Sprintf("%#v", this.BotDefenseJavascriptInjection) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool{")
	s = append(s, "HttpMethod: "+fmt.Sprintf("%#v", this.HttpMethod)+",\n")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	if this.HostRewriteParams != nil {
		s = append(s, "HostRewriteParams: "+fmt.Sprintf("%#v", this.HostRewriteParams)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite{` +
		`AutoHostRewrite:` + fmt.Sprintf("%#v", this.AutoHostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool_HostRewrite{` +
		`HostRewrite:` + fmt.Sprintf("%#v", this.HostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite{` +
		`DisableHostRewrite:` + fmt.Sprintf("%#v", this.DisableHostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimple) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&http_loadbalancer.RouteTypeSimple{")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "HttpMethod: "+fmt.Sprintf("%#v", this.HttpMethod)+",\n")
	if this.OriginPools != nil {
		s = append(s, "OriginPools: "+fmt.Sprintf("%#v", this.OriginPools)+",\n")
	}
	if this.HostRewriteParams != nil {
		s = append(s, "HostRewriteParams: "+fmt.Sprintf("%#v", this.HostRewriteParams)+",\n")
	}
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	if this.IncomingPort != nil {
		s = append(s, "IncomingPort: "+fmt.Sprintf("%#v", this.IncomingPort)+",\n")
	}
	if this.AdvancedOptions != nil {
		s = append(s, "AdvancedOptions: "+fmt.Sprintf("%#v", this.AdvancedOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeSimple_AutoHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimple_AutoHostRewrite{` +
		`AutoHostRewrite:` + fmt.Sprintf("%#v", this.AutoHostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimple_HostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimple_HostRewrite{` +
		`HostRewrite:` + fmt.Sprintf("%#v", this.HostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimple_DisableHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimple_DisableHostRewrite{` +
		`DisableHostRewrite:` + fmt.Sprintf("%#v", this.DisableHostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeRedirect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&http_loadbalancer.RouteTypeRedirect{")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "HttpMethod: "+fmt.Sprintf("%#v", this.HttpMethod)+",\n")
	if this.RouteRedirect != nil {
		s = append(s, "RouteRedirect: "+fmt.Sprintf("%#v", this.RouteRedirect)+",\n")
	}
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	if this.IncomingPort != nil {
		s = append(s, "IncomingPort: "+fmt.Sprintf("%#v", this.IncomingPort)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeDirectResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&http_loadbalancer.RouteTypeDirectResponse{")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "HttpMethod: "+fmt.Sprintf("%#v", this.HttpMethod)+",\n")
	if this.RouteDirectResponse != nil {
		s = append(s, "RouteDirectResponse: "+fmt.Sprintf("%#v", this.RouteDirectResponse)+",\n")
	}
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	if this.IncomingPort != nil {
		s = append(s, "IncomingPort: "+fmt.Sprintf("%#v", this.IncomingPort)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeCustomRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.RouteTypeCustomRoute{")
	if this.RouteRef != nil {
		s = append(s, "RouteRef: "+fmt.Sprintf("%#v", this.RouteRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&http_loadbalancer.RouteType{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteType_SimpleRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteType_SimpleRoute{` +
		`SimpleRoute:` + fmt.Sprintf("%#v", this.SimpleRoute) + `}`}, ", ")
	return s
}
func (this *RouteType_RedirectRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteType_RedirectRoute{` +
		`RedirectRoute:` + fmt.Sprintf("%#v", this.RedirectRoute) + `}`}, ", ")
	return s
}
func (this *RouteType_DirectResponseRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteType_DirectResponseRoute{` +
		`DirectResponseRoute:` + fmt.Sprintf("%#v", this.DirectResponseRoute) + `}`}, ", ")
	return s
}
func (this *RouteType_CustomRouteObject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteType_CustomRouteObject{` +
		`CustomRouteObject:` + fmt.Sprintf("%#v", this.CustomRouteObject) + `}`}, ", ")
	return s
}
func (this *AdvancedOptionsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&http_loadbalancer.AdvancedOptionsType{")
	if this.RequestHeadersToAdd != nil {
		s = append(s, "RequestHeadersToAdd: "+fmt.Sprintf("%#v", this.RequestHeadersToAdd)+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	if this.ResponseHeadersToAdd != nil {
		s = append(s, "ResponseHeadersToAdd: "+fmt.Sprintf("%#v", this.ResponseHeadersToAdd)+",\n")
	}
	s = append(s, "ResponseHeadersToRemove: "+fmt.Sprintf("%#v", this.ResponseHeadersToRemove)+",\n")
	s = append(s, "MaxRequestHeaderSize: "+fmt.Sprintf("%#v", this.MaxRequestHeaderSize)+",\n")
	if this.BufferPolicy != nil {
		s = append(s, "BufferPolicy: "+fmt.Sprintf("%#v", this.BufferPolicy)+",\n")
	}
	if this.CompressionParams != nil {
		s = append(s, "CompressionParams: "+fmt.Sprintf("%#v", this.CompressionParams)+",\n")
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%#v: %#v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	if this.CustomErrors != nil {
		s = append(s, "CustomErrors: "+mapStringForCustomErrors+",\n")
	}
	if this.JavascriptInfo != nil {
		s = append(s, "JavascriptInfo: "+fmt.Sprintf("%#v", this.JavascriptInfo)+",\n")
	}
	if this.Jwt != nil {
		s = append(s, "Jwt: "+fmt.Sprintf("%#v", this.Jwt)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	s = append(s, "DisableDefaultErrorPages: "+fmt.Sprintf("%#v", this.DisableDefaultErrorPages)+",\n")
	if this.PathNormalizeChoice != nil {
		s = append(s, "PathNormalizeChoice: "+fmt.Sprintf("%#v", this.PathNormalizeChoice)+",\n")
	}
	if this.StrictSniHostHeaderCheckChoice != nil {
		s = append(s, "StrictSniHostHeaderCheckChoice: "+fmt.Sprintf("%#v", this.StrictSniHostHeaderCheckChoice)+",\n")
	}
	if this.CookiesToModify != nil {
		s = append(s, "CookiesToModify: "+fmt.Sprintf("%#v", this.CookiesToModify)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdvancedOptionsType_EnablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.AdvancedOptionsType_EnablePathNormalize{` +
		`EnablePathNormalize:` + fmt.Sprintf("%#v", this.EnablePathNormalize) + `}`}, ", ")
	return s
}
func (this *AdvancedOptionsType_DisablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.AdvancedOptionsType_DisablePathNormalize{` +
		`DisablePathNormalize:` + fmt.Sprintf("%#v", this.DisablePathNormalize) + `}`}, ", ")
	return s
}
func (this *AdvancedOptionsType_EnableStrictSniHostHeaderCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.AdvancedOptionsType_EnableStrictSniHostHeaderCheck{` +
		`EnableStrictSniHostHeaderCheck:` + fmt.Sprintf("%#v", this.EnableStrictSniHostHeaderCheck) + `}`}, ", ")
	return s
}
func (this *AdvancedOptionsType_AdditionalDomains) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.AdvancedOptionsType_AdditionalDomains{` +
		`AdditionalDomains:` + fmt.Sprintf("%#v", this.AdditionalDomains) + `}`}, ", ")
	return s
}
func (this *SingleLoadBalancerAppSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&http_loadbalancer.SingleLoadBalancerAppSetting{")
	if this.ApiDiscoveryChoice != nil {
		s = append(s, "ApiDiscoveryChoice: "+fmt.Sprintf("%#v", this.ApiDiscoveryChoice)+",\n")
	}
	if this.MaliciousUserDetectionChoice != nil {
		s = append(s, "MaliciousUserDetectionChoice: "+fmt.Sprintf("%#v", this.MaliciousUserDetectionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SingleLoadBalancerAppSetting_EnableDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SingleLoadBalancerAppSetting_EnableDiscovery{` +
		`EnableDiscovery:` + fmt.Sprintf("%#v", this.EnableDiscovery) + `}`}, ", ")
	return s
}
func (this *SingleLoadBalancerAppSetting_DisableDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SingleLoadBalancerAppSetting_DisableDiscovery{` +
		`DisableDiscovery:` + fmt.Sprintf("%#v", this.DisableDiscovery) + `}`}, ", ")
	return s
}
func (this *SingleLoadBalancerAppSetting_EnableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SingleLoadBalancerAppSetting_EnableMaliciousUserDetection{` +
		`EnableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.EnableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *SingleLoadBalancerAppSetting_DisableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SingleLoadBalancerAppSetting_DisableMaliciousUserDetection{` +
		`DisableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.DisableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *OriginServerSubsetRuleListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.OriginServerSubsetRuleListType{")
	if this.OriginServerSubsetRules != nil {
		s = append(s, "OriginServerSubsetRules: "+fmt.Sprintf("%#v", this.OriginServerSubsetRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 95)
	s = append(s, "&http_loadbalancer.GlobalSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.DownstreamTlsCertificateExpirationTimestamps != nil {
		s = append(s, "DownstreamTlsCertificateExpirationTimestamps: "+fmt.Sprintf("%#v", this.DownstreamTlsCertificateExpirationTimestamps)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.DefaultRoutePools != nil {
		s = append(s, "DefaultRoutePools: "+fmt.Sprintf("%#v", this.DefaultRoutePools)+",\n")
	}
	if this.OriginPoolChoice != nil {
		s = append(s, "OriginPoolChoice: "+fmt.Sprintf("%#v", this.OriginPoolChoice)+",\n")
	}
	if this.HostRewriteParams != nil {
		s = append(s, "HostRewriteParams: "+fmt.Sprintf("%#v", this.HostRewriteParams)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.OriginServerSubsetRuleList != nil {
		s = append(s, "OriginServerSubsetRuleList: "+fmt.Sprintf("%#v", this.OriginServerSubsetRuleList)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.UserIdChoice != nil {
		s = append(s, "UserIdChoice: "+fmt.Sprintf("%#v", this.UserIdChoice)+",\n")
	}
	if this.ApiRateLimitLegacy != nil {
		s = append(s, "ApiRateLimitLegacy: "+fmt.Sprintf("%#v", this.ApiRateLimitLegacy)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.DataGuardRules != nil {
		s = append(s, "DataGuardRules: "+fmt.Sprintf("%#v", this.DataGuardRules)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.ApiProtectionRules != nil {
		s = append(s, "ApiProtectionRules: "+fmt.Sprintf("%#v", this.ApiProtectionRules)+",\n")
	}
	if this.DdosMitigationRules != nil {
		s = append(s, "DdosMitigationRules: "+fmt.Sprintf("%#v", this.DdosMitigationRules)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	if this.TrustClientIpHeadersChoice != nil {
		s = append(s, "TrustClientIpHeadersChoice: "+fmt.Sprintf("%#v", this.TrustClientIpHeadersChoice)+",\n")
	}
	if this.MlConfigChoice != nil {
		s = append(s, "MlConfigChoice: "+fmt.Sprintf("%#v", this.MlConfigChoice)+",\n")
	}
	if this.MaliciousUserDetectionChoice != nil {
		s = append(s, "MaliciousUserDetectionChoice: "+fmt.Sprintf("%#v", this.MaliciousUserDetectionChoice)+",\n")
	}
	if this.ApiDiscoveryChoice != nil {
		s = append(s, "ApiDiscoveryChoice: "+fmt.Sprintf("%#v", this.ApiDiscoveryChoice)+",\n")
	}
	if this.BotDefenseChoice != nil {
		s = append(s, "BotDefenseChoice: "+fmt.Sprintf("%#v", this.BotDefenseChoice)+",\n")
	}
	if this.ClientSideDefenseChoice != nil {
		s = append(s, "ClientSideDefenseChoice: "+fmt.Sprintf("%#v", this.ClientSideDefenseChoice)+",\n")
	}
	if this.ApiDefinitionChoice != nil {
		s = append(s, "ApiDefinitionChoice: "+fmt.Sprintf("%#v", this.ApiDefinitionChoice)+",\n")
	}
	if this.SensitiveDataPolicyChoice != nil {
		s = append(s, "SensitiveDataPolicyChoice: "+fmt.Sprintf("%#v", this.SensitiveDataPolicyChoice)+",\n")
	}
	if this.IpReputationChoice != nil {
		s = append(s, "IpReputationChoice: "+fmt.Sprintf("%#v", this.IpReputationChoice)+",\n")
	}
	if this.ThreatMeshChoice != nil {
		s = append(s, "ThreatMeshChoice: "+fmt.Sprintf("%#v", this.ThreatMeshChoice)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "AutoCertState: "+fmt.Sprintf("%#v", this.AutoCertState)+",\n")
	if this.AutoCertInfo != nil {
		s = append(s, "AutoCertInfo: "+fmt.Sprintf("%#v", this.AutoCertInfo)+",\n")
	}
	if this.InternetVipInfo != nil {
		s = append(s, "InternetVipInfo: "+fmt.Sprintf("%#v", this.InternetVipInfo)+",\n")
	}
	if this.CsrfPolicy != nil {
		s = append(s, "CsrfPolicy: "+fmt.Sprintf("%#v", this.CsrfPolicy)+",\n")
	}
	if this.GraphqlRules != nil {
		s = append(s, "GraphqlRules: "+fmt.Sprintf("%#v", this.GraphqlRules)+",\n")
	}
	if this.ProtectedCookies != nil {
		s = append(s, "ProtectedCookies: "+fmt.Sprintf("%#v", this.ProtectedCookies)+",\n")
	}
	if this.SlowDdosMitigationChoice != nil {
		s = append(s, "SlowDdosMitigationChoice: "+fmt.Sprintf("%#v", this.SlowDdosMitigationChoice)+",\n")
	}
	if this.JwtValidation != nil {
		s = append(s, "JwtValidation: "+fmt.Sprintf("%#v", this.JwtValidation)+",\n")
	}
	if this.L7DdosAutoMitigationAction != nil {
		s = append(s, "L7DdosAutoMitigationAction: "+fmt.Sprintf("%#v", this.L7DdosAutoMitigationAction)+",\n")
	}
	s = append(s, "CertState: "+fmt.Sprintf("%#v", this.CertState)+",\n")
	if this.SensitiveDataDisclosureRules != nil {
		s = append(s, "SensitiveDataDisclosureRules: "+fmt.Sprintf("%#v", this.SensitiveDataDisclosureRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DefaultPool{` +
		`DefaultPool:` + fmt.Sprintf("%#v", this.DefaultPool) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultPoolList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DefaultPoolList{` +
		`DefaultPoolList:` + fmt.Sprintf("%#v", this.DefaultPoolList) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AutoHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AutoHostRewrite{` +
		`AutoHostRewrite:` + fmt.Sprintf("%#v", this.AutoHostRewrite) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_HostRewrite{` +
		`HostRewrite:` + fmt.Sprintf("%#v", this.HostRewrite) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableHostRewrite{` +
		`DisableHostRewrite:` + fmt.Sprintf("%#v", this.DisableHostRewrite) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AppFirewall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AppFirewall{` +
		`AppFirewall:` + fmt.Sprintf("%#v", this.AppFirewall) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_EnableChallenge{` +
		`EnableChallenge:` + fmt.Sprintf("%#v", this.EnableChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_UserIdClientIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_UserIdClientIp{` +
		`UserIdClientIp:` + fmt.Sprintf("%#v", this.UserIdClientIp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_UserIdentification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_UserIdentification{` +
		`UserIdentification:` + fmt.Sprintf("%#v", this.UserIdentification) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ApiRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_ApiRateLimit{` +
		`ApiRateLimit:` + fmt.Sprintf("%#v", this.ApiRateLimit) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_RoundRobin{` +
		`RoundRobin:` + fmt.Sprintf("%#v", this.RoundRobin) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_LeastActive{` +
		`LeastActive:` + fmt.Sprintf("%#v", this.LeastActive) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Random) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_Random{` +
		`Random:` + fmt.Sprintf("%#v", this.Random) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_SourceIpStickiness{` +
		`SourceIpStickiness:` + fmt.Sprintf("%#v", this.SourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CookieStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_CookieStickiness{` +
		`CookieStickiness:` + fmt.Sprintf("%#v", this.CookieStickiness) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RingHash) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_RingHash{` +
		`RingHash:` + fmt.Sprintf("%#v", this.RingHash) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableTrustClientIpHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableTrustClientIpHeaders{` +
		`DisableTrustClientIpHeaders:` + fmt.Sprintf("%#v", this.DisableTrustClientIpHeaders) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableTrustClientIpHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_EnableTrustClientIpHeaders{` +
		`EnableTrustClientIpHeaders:` + fmt.Sprintf("%#v", this.EnableTrustClientIpHeaders) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SingleLbApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_SingleLbApp{` +
		`SingleLbApp:` + fmt.Sprintf("%#v", this.SingleLbApp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_MultiLbApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_MultiLbApp{` +
		`MultiLbApp:` + fmt.Sprintf("%#v", this.MultiLbApp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_EnableMaliciousUserDetection{` +
		`EnableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.EnableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableMaliciousUserDetection{` +
		`DisableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.DisableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_EnableApiDiscovery{` +
		`EnableApiDiscovery:` + fmt.Sprintf("%#v", this.EnableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableApiDiscovery{` +
		`DisableApiDiscovery:` + fmt.Sprintf("%#v", this.DisableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableBotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableBotDefense{` +
		`DisableBotDefense:` + fmt.Sprintf("%#v", this.DisableBotDefense) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_BotDefense{` +
		`BotDefense:` + fmt.Sprintf("%#v", this.BotDefense) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BotDefenseAdvanced) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_BotDefenseAdvanced{` +
		`BotDefenseAdvanced:` + fmt.Sprintf("%#v", this.BotDefenseAdvanced) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableClientSideDefense{` +
		`DisableClientSideDefense:` + fmt.Sprintf("%#v", this.DisableClientSideDefense) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_ClientSideDefense{` +
		`ClientSideDefense:` + fmt.Sprintf("%#v", this.ClientSideDefense) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableApiDefinition{` +
		`DisableApiDefinition:` + fmt.Sprintf("%#v", this.DisableApiDefinition) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_ApiDefinition{` +
		`ApiDefinition:` + fmt.Sprintf("%#v", this.ApiDefinition) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ApiSpecification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_ApiSpecification{` +
		`ApiSpecification:` + fmt.Sprintf("%#v", this.ApiSpecification) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ApiDefinitions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_ApiDefinitions{` +
		`ApiDefinitions:` + fmt.Sprintf("%#v", this.ApiDefinitions) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultSensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DefaultSensitiveDataPolicy{` +
		`DefaultSensitiveDataPolicy:` + fmt.Sprintf("%#v", this.DefaultSensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_SensitiveDataPolicy{` +
		`SensitiveDataPolicy:` + fmt.Sprintf("%#v", this.SensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableIpReputation{` +
		`DisableIpReputation:` + fmt.Sprintf("%#v", this.DisableIpReputation) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_EnableIpReputation{` +
		`EnableIpReputation:` + fmt.Sprintf("%#v", this.EnableIpReputation) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableThreatMesh{` +
		`DisableThreatMesh:` + fmt.Sprintf("%#v", this.DisableThreatMesh) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_EnableThreatMesh{` +
		`EnableThreatMesh:` + fmt.Sprintf("%#v", this.EnableThreatMesh) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SystemDefaultTimeouts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_SystemDefaultTimeouts{` +
		`SystemDefaultTimeouts:` + fmt.Sprintf("%#v", this.SystemDefaultTimeouts) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SlowDdosMitigation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_SlowDdosMitigation{` +
		`SlowDdosMitigation:` + fmt.Sprintf("%#v", this.SlowDdosMitigation) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_L7DdosActionDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_L7DdosActionDefault{` +
		`L7DdosActionDefault:` + fmt.Sprintf("%#v", this.L7DdosActionDefault) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_L7DdosActionBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_L7DdosActionBlock{` +
		`L7DdosActionBlock:` + fmt.Sprintf("%#v", this.L7DdosActionBlock) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_L7DdosActionJsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_L7DdosActionJsChallenge{` +
		`L7DdosActionJsChallenge:` + fmt.Sprintf("%#v", this.L7DdosActionJsChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_L7DdosActionNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_L7DdosActionNone{` +
		`L7DdosActionNone:` + fmt.Sprintf("%#v", this.L7DdosActionNone) + `}`}, ", ")
	return s
}
func (this *SensitiveDataDisclosureRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.SensitiveDataDisclosureRules{")
	if this.SensitiveDataTypesInResponse != nil {
		s = append(s, "SensitiveDataTypesInResponse: "+fmt.Sprintf("%#v", this.SensitiveDataTypesInResponse)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SensitiveDataTypes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&http_loadbalancer.SensitiveDataTypes{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.MaskingModeChoice != nil {
		s = append(s, "MaskingModeChoice: "+fmt.Sprintf("%#v", this.MaskingModeChoice)+",\n")
	}
	if this.TypeConditionTypeChoice != nil {
		s = append(s, "TypeConditionTypeChoice: "+fmt.Sprintf("%#v", this.TypeConditionTypeChoice)+",\n")
	}
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SensitiveDataTypes_Mask) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SensitiveDataTypes_Mask{` +
		`Mask:` + fmt.Sprintf("%#v", this.Mask) + `}`}, ", ")
	return s
}
func (this *SensitiveDataTypes_Report) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SensitiveDataTypes_Report{` +
		`Report:` + fmt.Sprintf("%#v", this.Report) + `}`}, ", ")
	return s
}
func (this *SensitiveDataTypes_ApiEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SensitiveDataTypes_ApiEndpoint{` +
		`ApiEndpoint:` + fmt.Sprintf("%#v", this.ApiEndpoint) + `}`}, ", ")
	return s
}
func (this *SensitiveDataTypes_BasePath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SensitiveDataTypes_BasePath{` +
		`BasePath:` + fmt.Sprintf("%#v", this.BasePath) + `}`}, ", ")
	return s
}
func (this *SensitiveDataTypes_ApiGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SensitiveDataTypes_ApiGroup{` +
		`ApiGroup:` + fmt.Sprintf("%#v", this.ApiGroup) + `}`}, ", ")
	return s
}
func (this *BodySectionMaskingOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.BodySectionMaskingOptions{")
	s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 83)
	s = append(s, "&http_loadbalancer.CreateSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.DefaultRoutePools != nil {
		s = append(s, "DefaultRoutePools: "+fmt.Sprintf("%#v", this.DefaultRoutePools)+",\n")
	}
	if this.OriginPoolChoice != nil {
		s = append(s, "OriginPoolChoice: "+fmt.Sprintf("%#v", this.OriginPoolChoice)+",\n")
	}
	if this.OriginServerSubsetRuleList != nil {
		s = append(s, "OriginServerSubsetRuleList: "+fmt.Sprintf("%#v", this.OriginServerSubsetRuleList)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.UserIdChoice != nil {
		s = append(s, "UserIdChoice: "+fmt.Sprintf("%#v", this.UserIdChoice)+",\n")
	}
	if this.ApiRateLimitLegacy != nil {
		s = append(s, "ApiRateLimitLegacy: "+fmt.Sprintf("%#v", this.ApiRateLimitLegacy)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.DataGuardRules != nil {
		s = append(s, "DataGuardRules: "+fmt.Sprintf("%#v", this.DataGuardRules)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.ApiProtectionRules != nil {
		s = append(s, "ApiProtectionRules: "+fmt.Sprintf("%#v", this.ApiProtectionRules)+",\n")
	}
	if this.DdosMitigationRules != nil {
		s = append(s, "DdosMitigationRules: "+fmt.Sprintf("%#v", this.DdosMitigationRules)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	if this.TrustClientIpHeadersChoice != nil {
		s = append(s, "TrustClientIpHeadersChoice: "+fmt.Sprintf("%#v", this.TrustClientIpHeadersChoice)+",\n")
	}
	if this.MlConfigChoice != nil {
		s = append(s, "MlConfigChoice: "+fmt.Sprintf("%#v", this.MlConfigChoice)+",\n")
	}
	if this.MaliciousUserDetectionChoice != nil {
		s = append(s, "MaliciousUserDetectionChoice: "+fmt.Sprintf("%#v", this.MaliciousUserDetectionChoice)+",\n")
	}
	if this.ApiDiscoveryChoice != nil {
		s = append(s, "ApiDiscoveryChoice: "+fmt.Sprintf("%#v", this.ApiDiscoveryChoice)+",\n")
	}
	if this.BotDefenseChoice != nil {
		s = append(s, "BotDefenseChoice: "+fmt.Sprintf("%#v", this.BotDefenseChoice)+",\n")
	}
	if this.SensitiveDataPolicyChoice != nil {
		s = append(s, "SensitiveDataPolicyChoice: "+fmt.Sprintf("%#v", this.SensitiveDataPolicyChoice)+",\n")
	}
	if this.ApiDefinitionChoice != nil {
		s = append(s, "ApiDefinitionChoice: "+fmt.Sprintf("%#v", this.ApiDefinitionChoice)+",\n")
	}
	if this.IpReputationChoice != nil {
		s = append(s, "IpReputationChoice: "+fmt.Sprintf("%#v", this.IpReputationChoice)+",\n")
	}
	if this.ClientSideDefenseChoice != nil {
		s = append(s, "ClientSideDefenseChoice: "+fmt.Sprintf("%#v", this.ClientSideDefenseChoice)+",\n")
	}
	if this.CsrfPolicy != nil {
		s = append(s, "CsrfPolicy: "+fmt.Sprintf("%#v", this.CsrfPolicy)+",\n")
	}
	if this.GraphqlRules != nil {
		s = append(s, "GraphqlRules: "+fmt.Sprintf("%#v", this.GraphqlRules)+",\n")
	}
	if this.ProtectedCookies != nil {
		s = append(s, "ProtectedCookies: "+fmt.Sprintf("%#v", this.ProtectedCookies)+",\n")
	}
	if this.SlowDdosMitigationChoice != nil {
		s = append(s, "SlowDdosMitigationChoice: "+fmt.Sprintf("%#v", this.SlowDdosMitigationChoice)+",\n")
	}
	if this.JwtValidation != nil {
		s = append(s, "JwtValidation: "+fmt.Sprintf("%#v", this.JwtValidation)+",\n")
	}
	if this.ThreatMeshChoice != nil {
		s = append(s, "ThreatMeshChoice: "+fmt.Sprintf("%#v", this.ThreatMeshChoice)+",\n")
	}
	if this.L7DdosAutoMitigationAction != nil {
		s = append(s, "L7DdosAutoMitigationAction: "+fmt.Sprintf("%#v", this.L7DdosAutoMitigationAction)+",\n")
	}
	if this.SensitiveDataDisclosureRules != nil {
		s = append(s, "SensitiveDataDisclosureRules: "+fmt.Sprintf("%#v", this.SensitiveDataDisclosureRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DefaultPool{` +
		`DefaultPool:` + fmt.Sprintf("%#v", this.DefaultPool) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultPoolList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DefaultPoolList{` +
		`DefaultPoolList:` + fmt.Sprintf("%#v", this.DefaultPoolList) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AppFirewall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_AppFirewall{` +
		`AppFirewall:` + fmt.Sprintf("%#v", this.AppFirewall) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_EnableChallenge{` +
		`EnableChallenge:` + fmt.Sprintf("%#v", this.EnableChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_UserIdClientIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_UserIdClientIp{` +
		`UserIdClientIp:` + fmt.Sprintf("%#v", this.UserIdClientIp) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_UserIdentification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_UserIdentification{` +
		`UserIdentification:` + fmt.Sprintf("%#v", this.UserIdentification) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ApiRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_ApiRateLimit{` +
		`ApiRateLimit:` + fmt.Sprintf("%#v", this.ApiRateLimit) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_RoundRobin{` +
		`RoundRobin:` + fmt.Sprintf("%#v", this.RoundRobin) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_LeastActive{` +
		`LeastActive:` + fmt.Sprintf("%#v", this.LeastActive) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Random) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_Random{` +
		`Random:` + fmt.Sprintf("%#v", this.Random) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_SourceIpStickiness{` +
		`SourceIpStickiness:` + fmt.Sprintf("%#v", this.SourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CookieStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_CookieStickiness{` +
		`CookieStickiness:` + fmt.Sprintf("%#v", this.CookieStickiness) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RingHash) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_RingHash{` +
		`RingHash:` + fmt.Sprintf("%#v", this.RingHash) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableTrustClientIpHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableTrustClientIpHeaders{` +
		`DisableTrustClientIpHeaders:` + fmt.Sprintf("%#v", this.DisableTrustClientIpHeaders) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableTrustClientIpHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_EnableTrustClientIpHeaders{` +
		`EnableTrustClientIpHeaders:` + fmt.Sprintf("%#v", this.EnableTrustClientIpHeaders) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SingleLbApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_SingleLbApp{` +
		`SingleLbApp:` + fmt.Sprintf("%#v", this.SingleLbApp) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_MultiLbApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_MultiLbApp{` +
		`MultiLbApp:` + fmt.Sprintf("%#v", this.MultiLbApp) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_EnableMaliciousUserDetection{` +
		`EnableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.EnableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableMaliciousUserDetection{` +
		`DisableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.DisableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_EnableApiDiscovery{` +
		`EnableApiDiscovery:` + fmt.Sprintf("%#v", this.EnableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableApiDiscovery{` +
		`DisableApiDiscovery:` + fmt.Sprintf("%#v", this.DisableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableBotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableBotDefense{` +
		`DisableBotDefense:` + fmt.Sprintf("%#v", this.DisableBotDefense) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_BotDefense{` +
		`BotDefense:` + fmt.Sprintf("%#v", this.BotDefense) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BotDefenseAdvanced) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_BotDefenseAdvanced{` +
		`BotDefenseAdvanced:` + fmt.Sprintf("%#v", this.BotDefenseAdvanced) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultSensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DefaultSensitiveDataPolicy{` +
		`DefaultSensitiveDataPolicy:` + fmt.Sprintf("%#v", this.DefaultSensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_SensitiveDataPolicy{` +
		`SensitiveDataPolicy:` + fmt.Sprintf("%#v", this.SensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableApiDefinition{` +
		`DisableApiDefinition:` + fmt.Sprintf("%#v", this.DisableApiDefinition) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_ApiDefinition{` +
		`ApiDefinition:` + fmt.Sprintf("%#v", this.ApiDefinition) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ApiSpecification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_ApiSpecification{` +
		`ApiSpecification:` + fmt.Sprintf("%#v", this.ApiSpecification) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ApiDefinitions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_ApiDefinitions{` +
		`ApiDefinitions:` + fmt.Sprintf("%#v", this.ApiDefinitions) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableIpReputation{` +
		`DisableIpReputation:` + fmt.Sprintf("%#v", this.DisableIpReputation) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_EnableIpReputation{` +
		`EnableIpReputation:` + fmt.Sprintf("%#v", this.EnableIpReputation) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableClientSideDefense{` +
		`DisableClientSideDefense:` + fmt.Sprintf("%#v", this.DisableClientSideDefense) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_ClientSideDefense{` +
		`ClientSideDefense:` + fmt.Sprintf("%#v", this.ClientSideDefense) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SystemDefaultTimeouts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_SystemDefaultTimeouts{` +
		`SystemDefaultTimeouts:` + fmt.Sprintf("%#v", this.SystemDefaultTimeouts) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SlowDdosMitigation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_SlowDdosMitigation{` +
		`SlowDdosMitigation:` + fmt.Sprintf("%#v", this.SlowDdosMitigation) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableThreatMesh{` +
		`DisableThreatMesh:` + fmt.Sprintf("%#v", this.DisableThreatMesh) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_EnableThreatMesh{` +
		`EnableThreatMesh:` + fmt.Sprintf("%#v", this.EnableThreatMesh) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_L7DdosActionDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_L7DdosActionDefault{` +
		`L7DdosActionDefault:` + fmt.Sprintf("%#v", this.L7DdosActionDefault) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_L7DdosActionBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_L7DdosActionBlock{` +
		`L7DdosActionBlock:` + fmt.Sprintf("%#v", this.L7DdosActionBlock) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_L7DdosActionJsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_L7DdosActionJsChallenge{` +
		`L7DdosActionJsChallenge:` + fmt.Sprintf("%#v", this.L7DdosActionJsChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_L7DdosActionNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_L7DdosActionNone{` +
		`L7DdosActionNone:` + fmt.Sprintf("%#v", this.L7DdosActionNone) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 83)
	s = append(s, "&http_loadbalancer.ReplaceSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.DefaultRoutePools != nil {
		s = append(s, "DefaultRoutePools: "+fmt.Sprintf("%#v", this.DefaultRoutePools)+",\n")
	}
	if this.OriginPoolChoice != nil {
		s = append(s, "OriginPoolChoice: "+fmt.Sprintf("%#v", this.OriginPoolChoice)+",\n")
	}
	if this.OriginServerSubsetRuleList != nil {
		s = append(s, "OriginServerSubsetRuleList: "+fmt.Sprintf("%#v", this.OriginServerSubsetRuleList)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.UserIdChoice != nil {
		s = append(s, "UserIdChoice: "+fmt.Sprintf("%#v", this.UserIdChoice)+",\n")
	}
	if this.ApiRateLimitLegacy != nil {
		s = append(s, "ApiRateLimitLegacy: "+fmt.Sprintf("%#v", this.ApiRateLimitLegacy)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.DataGuardRules != nil {
		s = append(s, "DataGuardRules: "+fmt.Sprintf("%#v", this.DataGuardRules)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.ApiProtectionRules != nil {
		s = append(s, "ApiProtectionRules: "+fmt.Sprintf("%#v", this.ApiProtectionRules)+",\n")
	}
	if this.DdosMitigationRules != nil {
		s = append(s, "DdosMitigationRules: "+fmt.Sprintf("%#v", this.DdosMitigationRules)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	if this.TrustClientIpHeadersChoice != nil {
		s = append(s, "TrustClientIpHeadersChoice: "+fmt.Sprintf("%#v", this.TrustClientIpHeadersChoice)+",\n")
	}
	if this.MlConfigChoice != nil {
		s = append(s, "MlConfigChoice: "+fmt.Sprintf("%#v", this.MlConfigChoice)+",\n")
	}
	if this.MaliciousUserDetectionChoice != nil {
		s = append(s, "MaliciousUserDetectionChoice: "+fmt.Sprintf("%#v", this.MaliciousUserDetectionChoice)+",\n")
	}
	if this.ApiDiscoveryChoice != nil {
		s = append(s, "ApiDiscoveryChoice: "+fmt.Sprintf("%#v", this.ApiDiscoveryChoice)+",\n")
	}
	if this.BotDefenseChoice != nil {
		s = append(s, "BotDefenseChoice: "+fmt.Sprintf("%#v", this.BotDefenseChoice)+",\n")
	}
	if this.SensitiveDataPolicyChoice != nil {
		s = append(s, "SensitiveDataPolicyChoice: "+fmt.Sprintf("%#v", this.SensitiveDataPolicyChoice)+",\n")
	}
	if this.ApiDefinitionChoice != nil {
		s = append(s, "ApiDefinitionChoice: "+fmt.Sprintf("%#v", this.ApiDefinitionChoice)+",\n")
	}
	if this.IpReputationChoice != nil {
		s = append(s, "IpReputationChoice: "+fmt.Sprintf("%#v", this.IpReputationChoice)+",\n")
	}
	if this.ClientSideDefenseChoice != nil {
		s = append(s, "ClientSideDefenseChoice: "+fmt.Sprintf("%#v", this.ClientSideDefenseChoice)+",\n")
	}
	if this.CsrfPolicy != nil {
		s = append(s, "CsrfPolicy: "+fmt.Sprintf("%#v", this.CsrfPolicy)+",\n")
	}
	if this.GraphqlRules != nil {
		s = append(s, "GraphqlRules: "+fmt.Sprintf("%#v", this.GraphqlRules)+",\n")
	}
	if this.ProtectedCookies != nil {
		s = append(s, "ProtectedCookies: "+fmt.Sprintf("%#v", this.ProtectedCookies)+",\n")
	}
	if this.SlowDdosMitigationChoice != nil {
		s = append(s, "SlowDdosMitigationChoice: "+fmt.Sprintf("%#v", this.SlowDdosMitigationChoice)+",\n")
	}
	if this.JwtValidation != nil {
		s = append(s, "JwtValidation: "+fmt.Sprintf("%#v", this.JwtValidation)+",\n")
	}
	if this.ThreatMeshChoice != nil {
		s = append(s, "ThreatMeshChoice: "+fmt.Sprintf("%#v", this.ThreatMeshChoice)+",\n")
	}
	if this.L7DdosAutoMitigationAction != nil {
		s = append(s, "L7DdosAutoMitigationAction: "+fmt.Sprintf("%#v", this.L7DdosAutoMitigationAction)+",\n")
	}
	if this.SensitiveDataDisclosureRules != nil {
		s = append(s, "SensitiveDataDisclosureRules: "+fmt.Sprintf("%#v", this.SensitiveDataDisclosureRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DefaultPool{` +
		`DefaultPool:` + fmt.Sprintf("%#v", this.DefaultPool) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultPoolList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DefaultPoolList{` +
		`DefaultPoolList:` + fmt.Sprintf("%#v", this.DefaultPoolList) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AppFirewall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_AppFirewall{` +
		`AppFirewall:` + fmt.Sprintf("%#v", this.AppFirewall) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_EnableChallenge{` +
		`EnableChallenge:` + fmt.Sprintf("%#v", this.EnableChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_UserIdClientIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_UserIdClientIp{` +
		`UserIdClientIp:` + fmt.Sprintf("%#v", this.UserIdClientIp) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_UserIdentification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_UserIdentification{` +
		`UserIdentification:` + fmt.Sprintf("%#v", this.UserIdentification) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ApiRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_ApiRateLimit{` +
		`ApiRateLimit:` + fmt.Sprintf("%#v", this.ApiRateLimit) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_RoundRobin{` +
		`RoundRobin:` + fmt.Sprintf("%#v", this.RoundRobin) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_LeastActive{` +
		`LeastActive:` + fmt.Sprintf("%#v", this.LeastActive) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Random) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_Random{` +
		`Random:` + fmt.Sprintf("%#v", this.Random) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_SourceIpStickiness{` +
		`SourceIpStickiness:` + fmt.Sprintf("%#v", this.SourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CookieStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_CookieStickiness{` +
		`CookieStickiness:` + fmt.Sprintf("%#v", this.CookieStickiness) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RingHash) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_RingHash{` +
		`RingHash:` + fmt.Sprintf("%#v", this.RingHash) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableTrustClientIpHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableTrustClientIpHeaders{` +
		`DisableTrustClientIpHeaders:` + fmt.Sprintf("%#v", this.DisableTrustClientIpHeaders) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableTrustClientIpHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_EnableTrustClientIpHeaders{` +
		`EnableTrustClientIpHeaders:` + fmt.Sprintf("%#v", this.EnableTrustClientIpHeaders) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SingleLbApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_SingleLbApp{` +
		`SingleLbApp:` + fmt.Sprintf("%#v", this.SingleLbApp) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_MultiLbApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_MultiLbApp{` +
		`MultiLbApp:` + fmt.Sprintf("%#v", this.MultiLbApp) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_EnableMaliciousUserDetection{` +
		`EnableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.EnableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableMaliciousUserDetection{` +
		`DisableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.DisableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_EnableApiDiscovery{` +
		`EnableApiDiscovery:` + fmt.Sprintf("%#v", this.EnableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableApiDiscovery{` +
		`DisableApiDiscovery:` + fmt.Sprintf("%#v", this.DisableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableBotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableBotDefense{` +
		`DisableBotDefense:` + fmt.Sprintf("%#v", this.DisableBotDefense) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_BotDefense{` +
		`BotDefense:` + fmt.Sprintf("%#v", this.BotDefense) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BotDefenseAdvanced) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_BotDefenseAdvanced{` +
		`BotDefenseAdvanced:` + fmt.Sprintf("%#v", this.BotDefenseAdvanced) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultSensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DefaultSensitiveDataPolicy{` +
		`DefaultSensitiveDataPolicy:` + fmt.Sprintf("%#v", this.DefaultSensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_SensitiveDataPolicy{` +
		`SensitiveDataPolicy:` + fmt.Sprintf("%#v", this.SensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableApiDefinition{` +
		`DisableApiDefinition:` + fmt.Sprintf("%#v", this.DisableApiDefinition) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_ApiDefinition{` +
		`ApiDefinition:` + fmt.Sprintf("%#v", this.ApiDefinition) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ApiSpecification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_ApiSpecification{` +
		`ApiSpecification:` + fmt.Sprintf("%#v", this.ApiSpecification) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ApiDefinitions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_ApiDefinitions{` +
		`ApiDefinitions:` + fmt.Sprintf("%#v", this.ApiDefinitions) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableIpReputation{` +
		`DisableIpReputation:` + fmt.Sprintf("%#v", this.DisableIpReputation) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_EnableIpReputation{` +
		`EnableIpReputation:` + fmt.Sprintf("%#v", this.EnableIpReputation) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableClientSideDefense{` +
		`DisableClientSideDefense:` + fmt.Sprintf("%#v", this.DisableClientSideDefense) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_ClientSideDefense{` +
		`ClientSideDefense:` + fmt.Sprintf("%#v", this.ClientSideDefense) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SystemDefaultTimeouts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_SystemDefaultTimeouts{` +
		`SystemDefaultTimeouts:` + fmt.Sprintf("%#v", this.SystemDefaultTimeouts) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SlowDdosMitigation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_SlowDdosMitigation{` +
		`SlowDdosMitigation:` + fmt.Sprintf("%#v", this.SlowDdosMitigation) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableThreatMesh{` +
		`DisableThreatMesh:` + fmt.Sprintf("%#v", this.DisableThreatMesh) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_EnableThreatMesh{` +
		`EnableThreatMesh:` + fmt.Sprintf("%#v", this.EnableThreatMesh) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_L7DdosActionDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_L7DdosActionDefault{` +
		`L7DdosActionDefault:` + fmt.Sprintf("%#v", this.L7DdosActionDefault) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_L7DdosActionBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_L7DdosActionBlock{` +
		`L7DdosActionBlock:` + fmt.Sprintf("%#v", this.L7DdosActionBlock) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_L7DdosActionJsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_L7DdosActionJsChallenge{` +
		`L7DdosActionJsChallenge:` + fmt.Sprintf("%#v", this.L7DdosActionJsChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_L7DdosActionNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_L7DdosActionNone{` +
		`L7DdosActionNone:` + fmt.Sprintf("%#v", this.L7DdosActionNone) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 90)
	s = append(s, "&http_loadbalancer.GetSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.DownstreamTlsCertificateExpirationTimestamps != nil {
		s = append(s, "DownstreamTlsCertificateExpirationTimestamps: "+fmt.Sprintf("%#v", this.DownstreamTlsCertificateExpirationTimestamps)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.DefaultRoutePools != nil {
		s = append(s, "DefaultRoutePools: "+fmt.Sprintf("%#v", this.DefaultRoutePools)+",\n")
	}
	if this.OriginPoolChoice != nil {
		s = append(s, "OriginPoolChoice: "+fmt.Sprintf("%#v", this.OriginPoolChoice)+",\n")
	}
	if this.OriginServerSubsetRuleList != nil {
		s = append(s, "OriginServerSubsetRuleList: "+fmt.Sprintf("%#v", this.OriginServerSubsetRuleList)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.UserIdChoice != nil {
		s = append(s, "UserIdChoice: "+fmt.Sprintf("%#v", this.UserIdChoice)+",\n")
	}
	if this.ApiRateLimitLegacy != nil {
		s = append(s, "ApiRateLimitLegacy: "+fmt.Sprintf("%#v", this.ApiRateLimitLegacy)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.DataGuardRules != nil {
		s = append(s, "DataGuardRules: "+fmt.Sprintf("%#v", this.DataGuardRules)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.ApiProtectionRules != nil {
		s = append(s, "ApiProtectionRules: "+fmt.Sprintf("%#v", this.ApiProtectionRules)+",\n")
	}
	if this.DdosMitigationRules != nil {
		s = append(s, "DdosMitigationRules: "+fmt.Sprintf("%#v", this.DdosMitigationRules)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	if this.TrustClientIpHeadersChoice != nil {
		s = append(s, "TrustClientIpHeadersChoice: "+fmt.Sprintf("%#v", this.TrustClientIpHeadersChoice)+",\n")
	}
	if this.MlConfigChoice != nil {
		s = append(s, "MlConfigChoice: "+fmt.Sprintf("%#v", this.MlConfigChoice)+",\n")
	}
	if this.MaliciousUserDetectionChoice != nil {
		s = append(s, "MaliciousUserDetectionChoice: "+fmt.Sprintf("%#v", this.MaliciousUserDetectionChoice)+",\n")
	}
	if this.ApiDiscoveryChoice != nil {
		s = append(s, "ApiDiscoveryChoice: "+fmt.Sprintf("%#v", this.ApiDiscoveryChoice)+",\n")
	}
	if this.BotDefenseChoice != nil {
		s = append(s, "BotDefenseChoice: "+fmt.Sprintf("%#v", this.BotDefenseChoice)+",\n")
	}
	if this.SensitiveDataPolicyChoice != nil {
		s = append(s, "SensitiveDataPolicyChoice: "+fmt.Sprintf("%#v", this.SensitiveDataPolicyChoice)+",\n")
	}
	if this.ApiDefinitionChoice != nil {
		s = append(s, "ApiDefinitionChoice: "+fmt.Sprintf("%#v", this.ApiDefinitionChoice)+",\n")
	}
	if this.IpReputationChoice != nil {
		s = append(s, "IpReputationChoice: "+fmt.Sprintf("%#v", this.IpReputationChoice)+",\n")
	}
	if this.ClientSideDefenseChoice != nil {
		s = append(s, "ClientSideDefenseChoice: "+fmt.Sprintf("%#v", this.ClientSideDefenseChoice)+",\n")
	}
	if this.CsrfPolicy != nil {
		s = append(s, "CsrfPolicy: "+fmt.Sprintf("%#v", this.CsrfPolicy)+",\n")
	}
	if this.GraphqlRules != nil {
		s = append(s, "GraphqlRules: "+fmt.Sprintf("%#v", this.GraphqlRules)+",\n")
	}
	if this.ProtectedCookies != nil {
		s = append(s, "ProtectedCookies: "+fmt.Sprintf("%#v", this.ProtectedCookies)+",\n")
	}
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.AutoCertInfo != nil {
		s = append(s, "AutoCertInfo: "+fmt.Sprintf("%#v", this.AutoCertInfo)+",\n")
	}
	if this.InternetVipInfo != nil {
		s = append(s, "InternetVipInfo: "+fmt.Sprintf("%#v", this.InternetVipInfo)+",\n")
	}
	if this.SlowDdosMitigationChoice != nil {
		s = append(s, "SlowDdosMitigationChoice: "+fmt.Sprintf("%#v", this.SlowDdosMitigationChoice)+",\n")
	}
	if this.JwtValidation != nil {
		s = append(s, "JwtValidation: "+fmt.Sprintf("%#v", this.JwtValidation)+",\n")
	}
	if this.ThreatMeshChoice != nil {
		s = append(s, "ThreatMeshChoice: "+fmt.Sprintf("%#v", this.ThreatMeshChoice)+",\n")
	}
	if this.L7DdosAutoMitigationAction != nil {
		s = append(s, "L7DdosAutoMitigationAction: "+fmt.Sprintf("%#v", this.L7DdosAutoMitigationAction)+",\n")
	}
	s = append(s, "CertState: "+fmt.Sprintf("%#v", this.CertState)+",\n")
	if this.SensitiveDataDisclosureRules != nil {
		s = append(s, "SensitiveDataDisclosureRules: "+fmt.Sprintf("%#v", this.SensitiveDataDisclosureRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DefaultPool{` +
		`DefaultPool:` + fmt.Sprintf("%#v", this.DefaultPool) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultPoolList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DefaultPoolList{` +
		`DefaultPoolList:` + fmt.Sprintf("%#v", this.DefaultPoolList) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AppFirewall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_AppFirewall{` +
		`AppFirewall:` + fmt.Sprintf("%#v", this.AppFirewall) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_EnableChallenge{` +
		`EnableChallenge:` + fmt.Sprintf("%#v", this.EnableChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_UserIdClientIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_UserIdClientIp{` +
		`UserIdClientIp:` + fmt.Sprintf("%#v", this.UserIdClientIp) + `}`}, ", ")
	return s
}
func (this *GetSpecType_UserIdentification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_UserIdentification{` +
		`UserIdentification:` + fmt.Sprintf("%#v", this.UserIdentification) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ApiRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_ApiRateLimit{` +
		`ApiRateLimit:` + fmt.Sprintf("%#v", this.ApiRateLimit) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_RoundRobin{` +
		`RoundRobin:` + fmt.Sprintf("%#v", this.RoundRobin) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_LeastActive{` +
		`LeastActive:` + fmt.Sprintf("%#v", this.LeastActive) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Random) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_Random{` +
		`Random:` + fmt.Sprintf("%#v", this.Random) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_SourceIpStickiness{` +
		`SourceIpStickiness:` + fmt.Sprintf("%#v", this.SourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CookieStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_CookieStickiness{` +
		`CookieStickiness:` + fmt.Sprintf("%#v", this.CookieStickiness) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RingHash) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_RingHash{` +
		`RingHash:` + fmt.Sprintf("%#v", this.RingHash) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableTrustClientIpHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableTrustClientIpHeaders{` +
		`DisableTrustClientIpHeaders:` + fmt.Sprintf("%#v", this.DisableTrustClientIpHeaders) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableTrustClientIpHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_EnableTrustClientIpHeaders{` +
		`EnableTrustClientIpHeaders:` + fmt.Sprintf("%#v", this.EnableTrustClientIpHeaders) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SingleLbApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_SingleLbApp{` +
		`SingleLbApp:` + fmt.Sprintf("%#v", this.SingleLbApp) + `}`}, ", ")
	return s
}
func (this *GetSpecType_MultiLbApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_MultiLbApp{` +
		`MultiLbApp:` + fmt.Sprintf("%#v", this.MultiLbApp) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_EnableMaliciousUserDetection{` +
		`EnableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.EnableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableMaliciousUserDetection{` +
		`DisableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.DisableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_EnableApiDiscovery{` +
		`EnableApiDiscovery:` + fmt.Sprintf("%#v", this.EnableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableApiDiscovery{` +
		`DisableApiDiscovery:` + fmt.Sprintf("%#v", this.DisableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableBotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableBotDefense{` +
		`DisableBotDefense:` + fmt.Sprintf("%#v", this.DisableBotDefense) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_BotDefense{` +
		`BotDefense:` + fmt.Sprintf("%#v", this.BotDefense) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BotDefenseAdvanced) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_BotDefenseAdvanced{` +
		`BotDefenseAdvanced:` + fmt.Sprintf("%#v", this.BotDefenseAdvanced) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultSensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DefaultSensitiveDataPolicy{` +
		`DefaultSensitiveDataPolicy:` + fmt.Sprintf("%#v", this.DefaultSensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_SensitiveDataPolicy{` +
		`SensitiveDataPolicy:` + fmt.Sprintf("%#v", this.SensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableApiDefinition{` +
		`DisableApiDefinition:` + fmt.Sprintf("%#v", this.DisableApiDefinition) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_ApiDefinition{` +
		`ApiDefinition:` + fmt.Sprintf("%#v", this.ApiDefinition) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ApiSpecification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_ApiSpecification{` +
		`ApiSpecification:` + fmt.Sprintf("%#v", this.ApiSpecification) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ApiDefinitions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_ApiDefinitions{` +
		`ApiDefinitions:` + fmt.Sprintf("%#v", this.ApiDefinitions) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableIpReputation{` +
		`DisableIpReputation:` + fmt.Sprintf("%#v", this.DisableIpReputation) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_EnableIpReputation{` +
		`EnableIpReputation:` + fmt.Sprintf("%#v", this.EnableIpReputation) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableClientSideDefense{` +
		`DisableClientSideDefense:` + fmt.Sprintf("%#v", this.DisableClientSideDefense) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ClientSideDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_ClientSideDefense{` +
		`ClientSideDefense:` + fmt.Sprintf("%#v", this.ClientSideDefense) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SystemDefaultTimeouts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_SystemDefaultTimeouts{` +
		`SystemDefaultTimeouts:` + fmt.Sprintf("%#v", this.SystemDefaultTimeouts) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SlowDdosMitigation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_SlowDdosMitigation{` +
		`SlowDdosMitigation:` + fmt.Sprintf("%#v", this.SlowDdosMitigation) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableThreatMesh{` +
		`DisableThreatMesh:` + fmt.Sprintf("%#v", this.DisableThreatMesh) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableThreatMesh) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_EnableThreatMesh{` +
		`EnableThreatMesh:` + fmt.Sprintf("%#v", this.EnableThreatMesh) + `}`}, ", ")
	return s
}
func (this *GetSpecType_L7DdosActionDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_L7DdosActionDefault{` +
		`L7DdosActionDefault:` + fmt.Sprintf("%#v", this.L7DdosActionDefault) + `}`}, ", ")
	return s
}
func (this *GetSpecType_L7DdosActionBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_L7DdosActionBlock{` +
		`L7DdosActionBlock:` + fmt.Sprintf("%#v", this.L7DdosActionBlock) + `}`}, ", ")
	return s
}
func (this *GetSpecType_L7DdosActionJsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_L7DdosActionJsChallenge{` +
		`L7DdosActionJsChallenge:` + fmt.Sprintf("%#v", this.L7DdosActionJsChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_L7DdosActionNone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_L7DdosActionNone{` +
		`L7DdosActionNone:` + fmt.Sprintf("%#v", this.L7DdosActionNone) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ProxyTypeHttps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyTypeHttps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HttpProtocolOptions != nil {
		{
			size, err := m.HttpProtocolOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.TlsCertificatesChoice != nil {
		{
			size := m.TlsCertificatesChoice.Size()
			i -= size
			if _, err := m.TlsCertificatesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ConnectionIdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnectionIdleTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.HeaderTransformationType != nil {
		{
			size, err := m.HeaderTransformationType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.DefaultLbChoice != nil {
		{
			size := m.DefaultLbChoice.Size()
			i -= size
			if _, err := m.DefaultLbChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PathNormalizeChoice != nil {
		{
			size := m.PathNormalizeChoice.Size()
			i -= size
			if _, err := m.PathNormalizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServerHeaderChoice != nil {
		{
			size := m.ServerHeaderChoice.Size()
			i -= size
			if _, err := m.ServerHeaderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AddHsts {
		i--
		if m.AddHsts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.HttpRedirect {
		i--
		if m.HttpRedirect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProxyTypeHttps_TlsParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_TlsParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsParameters != nil {
		{
			size, err := m.TlsParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_DefaultHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_DefaultHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultHeader != nil {
		{
			size, err := m.DefaultHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_ServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_ServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ServerName)
	copy(dAtA[i:], m.ServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_AppendServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_AppendServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AppendServerName)
	copy(dAtA[i:], m.AppendServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AppendServerName)))
	i--
	dAtA[i] = 0x3a
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_PassThrough) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_PassThrough) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PassThrough != nil {
		{
			size, err := m.PassThrough.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_EnablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_EnablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnablePathNormalize != nil {
		{
			size, err := m.EnablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_DisablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_DisablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisablePathNormalize != nil {
		{
			size, err := m.DisablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_Port) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_Port) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x78
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_NonDefaultLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_NonDefaultLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NonDefaultLoadbalancer != nil {
		{
			size, err := m.NonDefaultLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_DefaultLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_DefaultLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultLoadbalancer != nil {
		{
			size, err := m.DefaultLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_TlsCertParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_TlsCertParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsCertParams != nil {
		{
			size, err := m.TlsCertParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_PortRanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_PortRanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PortRanges)
	copy(dAtA[i:], m.PortRanges)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PortRanges)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyTypeHttp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DnsVolterraManaged {
		i--
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProxyTypeHttp_Port) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttp_Port) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttp_PortRanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttp_PortRanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PortRanges)
	copy(dAtA[i:], m.PortRanges)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PortRanges)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyTypeHttpsAutoCerts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HttpProtocolOptions != nil {
		{
			size, err := m.HttpProtocolOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.ConnectionIdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConnectionIdleTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.HeaderTransformationType != nil {
		{
			size, err := m.HeaderTransformationType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.DefaultLbChoice != nil {
		{
			size := m.DefaultLbChoice.Size()
			i -= size
			if _, err := m.DefaultLbChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PathNormalizeChoice != nil {
		{
			size := m.PathNormalizeChoice.Size()
			i -= size
			if _, err := m.PathNormalizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServerHeaderChoice != nil {
		{
			size := m.ServerHeaderChoice.Size()
			i -= size
			if _, err := m.ServerHeaderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MtlsChoice != nil {
		{
			size := m.MtlsChoice.Size()
			i -= size
			if _, err := m.MtlsChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TlsConfig != nil {
		{
			size, err := m.TlsConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AddHsts {
		i--
		if m.AddHsts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.HttpRedirect {
		i--
		if m.HttpRedirect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProxyTypeHttpsAutoCerts_NoMtls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_NoMtls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoMtls != nil {
		{
			size, err := m.NoMtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_UseMtls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_UseMtls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseMtls != nil {
		{
			size, err := m.UseMtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_DefaultHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_DefaultHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultHeader != nil {
		{
			size, err := m.DefaultHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_ServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_ServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ServerName)
	copy(dAtA[i:], m.ServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
	i--
	dAtA[i] = 0x4a
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_AppendServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_AppendServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AppendServerName)
	copy(dAtA[i:], m.AppendServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AppendServerName)))
	i--
	dAtA[i] = 0x52
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_PassThrough) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_PassThrough) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PassThrough != nil {
		{
			size, err := m.PassThrough.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_EnablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_EnablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnablePathNormalize != nil {
		{
			size, err := m.EnablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_DisablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_DisablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisablePathNormalize != nil {
		{
			size, err := m.DisablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_Port) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_Port) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.Port))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NonDefaultLoadbalancer != nil {
		{
			size, err := m.NonDefaultLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_DefaultLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_DefaultLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultLoadbalancer != nil {
		{
			size, err := m.DefaultLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_PortRanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_PortRanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PortRanges)
	copy(dAtA[i:], m.PortRanges)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PortRanges)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd2
	return len(dAtA) - i, nil
}
func (m *HashPolicyListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashPolicyListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HashPolicyListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HashPolicy) > 0 {
		for iNdEx := len(m.HashPolicy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HashPolicy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	return len(dAtA) - i, nil
}

func (m *MirrorPolicyType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorPolicyType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MirrorPolicyType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Percent != nil {
		{
			size, err := m.Percent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.OriginPool != nil {
		{
			size, err := m.OriginPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RouteSimpleAdvancedOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteSimpleAdvancedOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WafChoice != nil {
		{
			size := m.WafChoice.Size()
			i -= size
			if _, err := m.WafChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RewriteChoice != nil {
		{
			size := m.RewriteChoice.Size()
			i -= size
			if _, err := m.RewriteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CsrfPolicy != nil {
		{
			size, err := m.CsrfPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if m.RetryPolicyChoice != nil {
		{
			size := m.RetryPolicyChoice.Size()
			i -= size
			if _, err := m.RetryPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BotDefenseJavascriptInjectionChoice != nil {
		{
			size := m.BotDefenseJavascriptInjectionChoice.Size()
			i -= size
			if _, err := m.BotDefenseJavascriptInjectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClusterRetractChoice != nil {
		{
			size := m.ClusterRetractChoice.Size()
			i -= size
			if _, err := m.ClusterRetractChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MirroringChoice != nil {
		{
			size := m.MirroringChoice.Size()
			i -= size
			if _, err := m.MirroringChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BufferChoice != nil {
		{
			size := m.BufferChoice.Size()
			i -= size
			if _, err := m.BufferChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.WebsocketChoice != nil {
		{
			size := m.WebsocketChoice.Size()
			i -= size
			if _, err := m.WebsocketChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SpdyChoice != nil {
		{
			size := m.SpdyChoice.Size()
			i -= size
			if _, err := m.SpdyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.DisableLocationAdd {
		i--
		if m.DisableLocationAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for iNdEx := len(m.ResponseHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResponseHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.ResponseHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ResponseHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for iNdEx := len(m.ResponseHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for iNdEx := len(m.RequestHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequestHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.RequestHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.RequestHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for iNdEx := len(m.RequestHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.EndpointSubsets) > 0 {
		keysForEndpointSubsets := make([]string, 0, len(m.EndpointSubsets))
		for k := range m.EndpointSubsets {
			keysForEndpointSubsets = append(keysForEndpointSubsets, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForEndpointSubsets)
		for iNdEx := len(keysForEndpointSubsets) - 1; iNdEx >= 0; iNdEx-- {
			v := m.EndpointSubsets[string(keysForEndpointSubsets[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForEndpointSubsets[iNdEx])
			copy(dAtA[i:], keysForEndpointSubsets[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForEndpointSubsets[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Priority != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x20
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RouteSimpleAdvancedOptions_CommonHashPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_CommonHashPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CommonHashPolicy != nil {
		{
			size, err := m.CommonHashPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_SpecificHashPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_SpecificHashPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SpecificHashPolicy != nil {
		{
			size, err := m.SpecificHashPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_DisablePrefixRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_DisablePrefixRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisablePrefixRewrite != nil {
		{
			size, err := m.DisablePrefixRewrite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_PrefixRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_PrefixRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PrefixRewrite)
	copy(dAtA[i:], m.PrefixRewrite)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PrefixRewrite)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_InheritedWaf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_InheritedWaf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InheritedWaf != nil {
		{
			size, err := m.InheritedWaf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_DisableSpdy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_DisableSpdy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableSpdy != nil {
		{
			size, err := m.DisableSpdy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_EnableSpdy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_EnableSpdy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableSpdy != nil {
		{
			size, err := m.EnableSpdy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_DisableWebSocketConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_DisableWebSocketConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWebSocketConfig != nil {
		{
			size, err := m.DisableWebSocketConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_WebSocketConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_WebSocketConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WebSocketConfig != nil {
		{
			size, err := m.WebSocketConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_DefaultRetryPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_DefaultRetryPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultRetryPolicy != nil {
		{
			size, err := m.DefaultRetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_RetryPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_RetryPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_CommonBuffering) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_CommonBuffering) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CommonBuffering != nil {
		{
			size, err := m.CommonBuffering.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_BufferPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_BufferPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BufferPolicy != nil {
		{
			size, err := m.BufferPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_DisableMirroring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_DisableMirroring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableMirroring != nil {
		{
			size, err := m.DisableMirroring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_MirrorPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_MirrorPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MirrorPolicy != nil {
		{
			size, err := m.MirrorPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_RetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_RetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RetractCluster != nil {
		{
			size, err := m.RetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_DoNotRetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_DoNotRetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotRetractCluster != nil {
		{
			size, err := m.DoNotRetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InheritedBotDefenseJavascriptInjection != nil {
		{
			size, err := m.InheritedBotDefenseJavascriptInjection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefenseJavascriptInjection != nil {
		{
			size, err := m.BotDefenseJavascriptInjection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_DisableWaf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWaf != nil {
		{
			size, err := m.DisableWaf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_NoRetryPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_NoRetryPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoRetryPolicy != nil {
		{
			size, err := m.NoRetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_RegexRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_RegexRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegexRewrite != nil {
		{
			size, err := m.RegexRewrite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_AppFirewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_AppFirewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewall != nil {
		{
			size, err := m.AppFirewall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeSimpleWithDefaultOriginPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HostRewriteParams != nil {
		{
			size := m.HostRewriteParams.Size()
			i -= size
			if _, err := m.HostRewriteParams.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.HttpMethod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpMethod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AutoHostRewrite != nil {
		{
			size, err := m.AutoHostRewrite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.HostRewrite)
	copy(dAtA[i:], m.HostRewrite)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HostRewrite)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableHostRewrite != nil {
		{
			size, err := m.DisableHostRewrite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *RouteTypeSimple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeSimple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeSimple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncomingPort != nil {
		{
			size, err := m.IncomingPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.AdvancedOptions != nil {
		{
			size, err := m.AdvancedOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.HostRewriteParams != nil {
		{
			size := m.HostRewriteParams.Size()
			i -= size
			if _, err := m.HostRewriteParams.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.OriginPools) > 0 {
		for iNdEx := len(m.OriginPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HttpMethod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpMethod))
		i--
		dAtA[i] = 0x10
	}
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RouteTypeSimple_AutoHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeSimple_AutoHostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AutoHostRewrite != nil {
		{
			size, err := m.AutoHostRewrite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RouteTypeSimple_HostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeSimple_HostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.HostRewrite)
	copy(dAtA[i:], m.HostRewrite)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HostRewrite)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *RouteTypeSimple_DisableHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeSimple_DisableHostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableHostRewrite != nil {
		{
			size, err := m.DisableHostRewrite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *RouteTypeRedirect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeRedirect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeRedirect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncomingPort != nil {
		{
			size, err := m.IncomingPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.RouteRedirect != nil {
		{
			size, err := m.RouteRedirect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.HttpMethod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpMethod))
		i--
		dAtA[i] = 0x10
	}
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RouteTypeDirectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeDirectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeDirectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncomingPort != nil {
		{
			size, err := m.IncomingPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.RouteDirectResponse != nil {
		{
			size, err := m.RouteDirectResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.HttpMethod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpMethod))
		i--
		dAtA[i] = 0x10
	}
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RouteTypeCustomRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeCustomRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeCustomRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RouteRef != nil {
		{
			size, err := m.RouteRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RouteType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RouteType_SimpleRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteType_SimpleRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SimpleRoute != nil {
		{
			size, err := m.SimpleRoute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RouteType_RedirectRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteType_RedirectRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RedirectRoute != nil {
		{
			size, err := m.RedirectRoute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RouteType_DirectResponseRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteType_DirectResponseRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectResponseRoute != nil {
		{
			size, err := m.DirectResponseRoute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RouteType_CustomRouteObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteType_CustomRouteObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomRouteObject != nil {
		{
			size, err := m.CustomRouteObject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AdvancedOptionsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvancedOptionsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvancedOptionsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CookiesToModify) > 0 {
		for iNdEx := len(m.CookiesToModify) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CookiesToModify[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.StrictSniHostHeaderCheckChoice != nil {
		{
			size := m.StrictSniHostHeaderCheckChoice.Size()
			i -= size
			if _, err := m.StrictSniHostHeaderCheckChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PathNormalizeChoice != nil {
		{
			size := m.PathNormalizeChoice.Size()
			i -= size
			if _, err := m.PathNormalizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DisableDefaultErrorPages {
		i--
		if m.DisableDefaultErrorPages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.IdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Jwt) > 0 {
		for iNdEx := len(m.Jwt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Jwt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.JavascriptInfo != nil {
		{
			size, err := m.JavascriptInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CustomErrors) > 0 {
		keysForCustomErrors := make([]uint32, 0, len(m.CustomErrors))
		for k := range m.CustomErrors {
			keysForCustomErrors = append(keysForCustomErrors, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
		for iNdEx := len(keysForCustomErrors) - 1; iNdEx >= 0; iNdEx-- {
			v := m.CustomErrors[uint32(keysForCustomErrors[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintTypes(dAtA, i, uint64(keysForCustomErrors[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.CompressionParams != nil {
		{
			size, err := m.CompressionParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.BufferPolicy != nil {
		{
			size, err := m.BufferPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.MaxRequestHeaderSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequestHeaderSize))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for iNdEx := len(m.ResponseHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResponseHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.ResponseHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ResponseHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for iNdEx := len(m.ResponseHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for iNdEx := len(m.RequestHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequestHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.RequestHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.RequestHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for iNdEx := len(m.RequestHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdvancedOptionsType_EnablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvancedOptionsType_EnablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnablePathNormalize != nil {
		{
			size, err := m.EnablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AdvancedOptionsType_DisablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvancedOptionsType_DisablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisablePathNormalize != nil {
		{
			size, err := m.DisablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *AdvancedOptionsType_EnableStrictSniHostHeaderCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvancedOptionsType_EnableStrictSniHostHeaderCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableStrictSniHostHeaderCheck != nil {
		{
			size, err := m.EnableStrictSniHostHeaderCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *AdvancedOptionsType_AdditionalDomains) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvancedOptionsType_AdditionalDomains) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdditionalDomains != nil {
		{
			size, err := m.AdditionalDomains.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *SingleLoadBalancerAppSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleLoadBalancerAppSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleLoadBalancerAppSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaliciousUserDetectionChoice != nil {
		{
			size := m.MaliciousUserDetectionChoice.Size()
			i -= size
			if _, err := m.MaliciousUserDetectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDiscoveryChoice != nil {
		{
			size := m.ApiDiscoveryChoice.Size()
			i -= size
			if _, err := m.ApiDiscoveryChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SingleLoadBalancerAppSetting_EnableDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleLoadBalancerAppSetting_EnableDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableDiscovery != nil {
		{
			size, err := m.EnableDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SingleLoadBalancerAppSetting_DisableDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleLoadBalancerAppSetting_DisableDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableDiscovery != nil {
		{
			size, err := m.DisableDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SingleLoadBalancerAppSetting_EnableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleLoadBalancerAppSetting_EnableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableMaliciousUserDetection != nil {
		{
			size, err := m.EnableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *SingleLoadBalancerAppSetting_DisableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleLoadBalancerAppSetting_DisableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableMaliciousUserDetection != nil {
		{
			size, err := m.DisableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *OriginServerSubsetRuleListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginServerSubsetRuleListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginServerSubsetRuleListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OriginServerSubsetRules) > 0 {
		for iNdEx := len(m.OriginServerSubsetRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginServerSubsetRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InternetVipInfo) > 0 {
		for iNdEx := len(m.InternetVipInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InternetVipInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x44
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.BotDefenseChoice != nil {
		{
			size := m.BotDefenseChoice.Size()
			i -= size
			if _, err := m.BotDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AutoCertInfo != nil {
		{
			size, err := m.AutoCertInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0x92
	}
	if m.AutoCertState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertState))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xe0
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xd8
	}
	if len(m.DnsInfo) > 0 {
		for iNdEx := len(m.DnsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.HostName) > 0 {
		i -= len(m.HostName)
		copy(dAtA[i:], m.HostName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.SensitiveDataPolicyChoice != nil {
		{
			size := m.SensitiveDataPolicyChoice.Size()
			i -= size
			if _, err := m.SensitiveDataPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RateLimitChoice != nil {
		{
			size := m.RateLimitChoice.Size()
			i -= size
			if _, err := m.RateLimitChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SensitiveDataDisclosureRules != nil {
		{
			size, err := m.SensitiveDataDisclosureRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xa2
	}
	if m.CertState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CertState))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x98
	}
	if m.L7DdosAutoMitigationAction != nil {
		{
			size := m.L7DdosAutoMitigationAction.Size()
			i -= size
			if _, err := m.L7DdosAutoMitigationAction.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ThreatMeshChoice != nil {
		{
			size := m.ThreatMeshChoice.Size()
			i -= size
			if _, err := m.ThreatMeshChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OriginServerSubsetRuleList != nil {
		{
			size, err := m.OriginServerSubsetRuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.JwtValidation != nil {
		{
			size, err := m.JwtValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if m.SlowDdosMitigationChoice != nil {
		{
			size := m.SlowDdosMitigationChoice.Size()
			i -= size
			if _, err := m.SlowDdosMitigationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for iNdEx := len(m.ProtectedCookies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProtectedCookies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.GraphqlRules) > 0 {
		for iNdEx := len(m.GraphqlRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GraphqlRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.CsrfPolicy != nil {
		{
			size, err := m.CsrfPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xda
	}
	if m.OriginPoolChoice != nil {
		{
			size := m.OriginPoolChoice.Size()
			i -= size
			if _, err := m.OriginPoolChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClientSideDefenseChoice != nil {
		{
			size := m.ClientSideDefenseChoice.Size()
			i -= size
			if _, err := m.ClientSideDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDiscoveryChoice != nil {
		{
			size := m.ApiDiscoveryChoice.Size()
			i -= size
			if _, err := m.ApiDiscoveryChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaliciousUserDetectionChoice != nil {
		{
			size := m.MaliciousUserDetectionChoice.Size()
			i -= size
			if _, err := m.MaliciousUserDetectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TrustClientIpHeadersChoice != nil {
		{
			size := m.TrustClientIpHeadersChoice.Size()
			i -= size
			if _, err := m.TrustClientIpHeadersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiProtectionRules != nil {
		{
			size, err := m.ApiProtectionRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc2
	}
	if m.ApiDefinitionChoice != nil {
		{
			size := m.ApiDefinitionChoice.Size()
			i -= size
			if _, err := m.ApiDefinitionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiRateLimitLegacy != nil {
		{
			size, err := m.ApiRateLimitLegacy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa2
	}
	if m.IpReputationChoice != nil {
		{
			size := m.IpReputationChoice.Size()
			i -= size
			if _, err := m.IpReputationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DataGuardRules) > 0 {
		for iNdEx := len(m.DataGuardRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataGuardRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.DownstreamTlsCertificateExpirationTimestamps) > 0 {
		for iNdEx := len(m.DownstreamTlsCertificateExpirationTimestamps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DownstreamTlsCertificateExpirationTimestamps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.UserIdChoice != nil {
		{
			size := m.UserIdChoice.Size()
			i -= size
			if _, err := m.UserIdChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MlConfigChoice != nil {
		{
			size := m.MlConfigChoice.Size()
			i -= size
			if _, err := m.MlConfigChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WafChoice != nil {
		{
			size := m.WafChoice.Size()
			i -= size
			if _, err := m.WafChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for iNdEx := len(m.DdosMitigationRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DdosMitigationRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.TrustedClients) > 0 {
		for iNdEx := len(m.TrustedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.BlockedClients) > 0 {
		for iNdEx := len(m.BlockedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.WafExclusionRules) > 0 {
		for iNdEx := len(m.WafExclusionRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafExclusionRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.MaliciousUserMitigation != nil {
		{
			size, err := m.MaliciousUserMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.HostRewriteParams != nil {
		{
			size := m.HostRewriteParams.Size()
			i -= size
			if _, err := m.HostRewriteParams.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MoreOption != nil {
		{
			size, err := m.MoreOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DefaultRoutePools) > 0 {
		for iNdEx := len(m.DefaultRoutePools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultRoutePools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Http) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Http != nil {
		{
			size, err := m.Http.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Https) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Https != nil {
		{
			size, err := m.Https.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableWaf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWaf != nil {
		{
			size, err := m.DisableWaf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_UserIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_UserIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdentification != nil {
		{
			size, err := m.UserIdentification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableRateLimit != nil {
		{
			size, err := m.DisableRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HttpsAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsAutoCert != nil {
		{
			size, err := m.HttpsAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AutoHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AutoHostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AutoHostRewrite != nil {
		{
			size, err := m.AutoHostRewrite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.HostRewrite)
	copy(dAtA[i:], m.HostRewrite)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HostRewrite)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xea
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableHostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableHostRewrite != nil {
		{
			size, err := m.DisableHostRewrite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_RoundRobin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_RoundRobin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RoundRobin != nil {
		{
			size, err := m.RoundRobin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_LeastActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LeastActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LeastActive != nil {
		{
			size, err := m.LeastActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Random) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Random) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Random != nil {
		{
			size, err := m.Random.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SourceIpStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourceIpStickiness != nil {
		{
			size, err := m.SourceIpStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_CookieStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_CookieStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CookieStickiness != nil {
		{
			size, err := m.CookieStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_RingHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_RingHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RingHash != nil {
		{
			size, err := m.RingHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyBasedChallenge != nil {
		{
			size, err := m.PolicyBasedChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AppFirewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AppFirewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewall != nil {
		{
			size, err := m.AppFirewall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SingleLbApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SingleLbApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SingleLbApp != nil {
		{
			size, err := m.SingleLbApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_MultiLbApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_MultiLbApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultiLbApp != nil {
		{
			size, err := m.MultiLbApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableBotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableBotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableBotDefense != nil {
		{
			size, err := m.DisableBotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefense != nil {
		{
			size, err := m.BotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_UserIdClientIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_UserIdClientIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdClientIp != nil {
		{
			size, err := m.UserIdClientIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ApiDefinitions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ApiDefinitions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinitions != nil {
		{
			size, err := m.ApiDefinitions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableIpReputation != nil {
		{
			size, err := m.DisableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableIpReputation != nil {
		{
			size, err := m.EnableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ApiSpecification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ApiSpecification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecification != nil {
		{
			size, err := m.ApiSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDefinition != nil {
		{
			size, err := m.DisableApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableTrustClientIpHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableTrustClientIpHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableTrustClientIpHeaders != nil {
		{
			size, err := m.DisableTrustClientIpHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableTrustClientIpHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableTrustClientIpHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableTrustClientIpHeaders != nil {
		{
			size, err := m.EnableTrustClientIpHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableMaliciousUserDetection != nil {
		{
			size, err := m.EnableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableMaliciousUserDetection != nil {
		{
			size, err := m.DisableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableApiDiscovery != nil {
		{
			size, err := m.EnableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDiscovery != nil {
		{
			size, err := m.DisableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableClientSideDefense != nil {
		{
			size, err := m.DisableClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientSideDefense != nil {
		{
			size, err := m.ClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultPool != nil {
		{
			size, err := m.DefaultPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultPoolList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultPoolList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultPoolList != nil {
		{
			size, err := m.DefaultPoolList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SlowDdosMitigation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SlowDdosMitigation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlowDdosMitigation != nil {
		{
			size, err := m.SlowDdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableChallenge != nil {
		{
			size, err := m.EnableChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SystemDefaultTimeouts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SystemDefaultTimeouts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemDefaultTimeouts != nil {
		{
			size, err := m.SystemDefaultTimeouts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableThreatMesh != nil {
		{
			size, err := m.DisableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableThreatMesh != nil {
		{
			size, err := m.EnableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_L7DdosActionDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_L7DdosActionDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionDefault != nil {
		{
			size, err := m.L7DdosActionDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_L7DdosActionBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_L7DdosActionBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionBlock != nil {
		{
			size, err := m.L7DdosActionBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_L7DdosActionJsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_L7DdosActionJsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionJsChallenge != nil {
		{
			size, err := m.L7DdosActionJsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_L7DdosActionNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_L7DdosActionNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionNone != nil {
		{
			size, err := m.L7DdosActionNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ApiRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ApiRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiRateLimit != nil {
		{
			size, err := m.ApiRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultSensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultSensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSensitiveDataPolicy != nil {
		{
			size, err := m.DefaultSensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SensitiveDataPolicy != nil {
		{
			size, err := m.SensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BotDefenseAdvanced) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BotDefenseAdvanced) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefenseAdvanced != nil {
		{
			size, err := m.BotDefenseAdvanced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *SensitiveDataDisclosureRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SensitiveDataDisclosureRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensitiveDataDisclosureRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SensitiveDataTypesInResponse) > 0 {
		for iNdEx := len(m.SensitiveDataTypesInResponse) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SensitiveDataTypesInResponse[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SensitiveDataTypes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SensitiveDataTypes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensitiveDataTypes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.TypeConditionTypeChoice != nil {
		{
			size := m.TypeConditionTypeChoice.Size()
			i -= size
			if _, err := m.TypeConditionTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaskingModeChoice != nil {
		{
			size := m.MaskingModeChoice.Size()
			i -= size
			if _, err := m.MaskingModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SensitiveDataTypes_Mask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensitiveDataTypes_Mask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Mask != nil {
		{
			size, err := m.Mask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SensitiveDataTypes_Report) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensitiveDataTypes_Report) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Report != nil {
		{
			size, err := m.Report.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SensitiveDataTypes_ApiEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensitiveDataTypes_ApiEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiEndpoint != nil {
		{
			size, err := m.ApiEndpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *SensitiveDataTypes_BasePath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensitiveDataTypes_BasePath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.BasePath)
	copy(dAtA[i:], m.BasePath)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.BasePath)))
	i--
	dAtA[i] = 0x3a
	return len(dAtA) - i, nil
}
func (m *SensitiveDataTypes_ApiGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensitiveDataTypes_ApiGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ApiGroup)
	copy(dAtA[i:], m.ApiGroup)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ApiGroup)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *BodySectionMaskingOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BodySectionMaskingOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BodySectionMaskingOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fields[iNdEx])
			copy(dAtA[i:], m.Fields[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Fields[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BotDefenseChoice != nil {
		{
			size := m.BotDefenseChoice.Size()
			i -= size
			if _, err := m.BotDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SensitiveDataPolicyChoice != nil {
		{
			size := m.SensitiveDataPolicyChoice.Size()
			i -= size
			if _, err := m.SensitiveDataPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RateLimitChoice != nil {
		{
			size := m.RateLimitChoice.Size()
			i -= size
			if _, err := m.RateLimitChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SensitiveDataDisclosureRules != nil {
		{
			size, err := m.SensitiveDataDisclosureRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xa2
	}
	if m.L7DdosAutoMitigationAction != nil {
		{
			size := m.L7DdosAutoMitigationAction.Size()
			i -= size
			if _, err := m.L7DdosAutoMitigationAction.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ThreatMeshChoice != nil {
		{
			size := m.ThreatMeshChoice.Size()
			i -= size
			if _, err := m.ThreatMeshChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OriginServerSubsetRuleList != nil {
		{
			size, err := m.OriginServerSubsetRuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.JwtValidation != nil {
		{
			size, err := m.JwtValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if m.SlowDdosMitigationChoice != nil {
		{
			size := m.SlowDdosMitigationChoice.Size()
			i -= size
			if _, err := m.SlowDdosMitigationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for iNdEx := len(m.ProtectedCookies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProtectedCookies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.GraphqlRules) > 0 {
		for iNdEx := len(m.GraphqlRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GraphqlRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.CsrfPolicy != nil {
		{
			size, err := m.CsrfPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xda
	}
	if m.OriginPoolChoice != nil {
		{
			size := m.OriginPoolChoice.Size()
			i -= size
			if _, err := m.OriginPoolChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClientSideDefenseChoice != nil {
		{
			size := m.ClientSideDefenseChoice.Size()
			i -= size
			if _, err := m.ClientSideDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDiscoveryChoice != nil {
		{
			size := m.ApiDiscoveryChoice.Size()
			i -= size
			if _, err := m.ApiDiscoveryChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaliciousUserDetectionChoice != nil {
		{
			size := m.MaliciousUserDetectionChoice.Size()
			i -= size
			if _, err := m.MaliciousUserDetectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TrustClientIpHeadersChoice != nil {
		{
			size := m.TrustClientIpHeadersChoice.Size()
			i -= size
			if _, err := m.TrustClientIpHeadersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiProtectionRules != nil {
		{
			size, err := m.ApiProtectionRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc2
	}
	if m.ApiDefinitionChoice != nil {
		{
			size := m.ApiDefinitionChoice.Size()
			i -= size
			if _, err := m.ApiDefinitionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiRateLimitLegacy != nil {
		{
			size, err := m.ApiRateLimitLegacy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa2
	}
	if m.IpReputationChoice != nil {
		{
			size := m.IpReputationChoice.Size()
			i -= size
			if _, err := m.IpReputationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DataGuardRules) > 0 {
		for iNdEx := len(m.DataGuardRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataGuardRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.UserIdChoice != nil {
		{
			size := m.UserIdChoice.Size()
			i -= size
			if _, err := m.UserIdChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MlConfigChoice != nil {
		{
			size := m.MlConfigChoice.Size()
			i -= size
			if _, err := m.MlConfigChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WafChoice != nil {
		{
			size := m.WafChoice.Size()
			i -= size
			if _, err := m.WafChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for iNdEx := len(m.DdosMitigationRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DdosMitigationRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.TrustedClients) > 0 {
		for iNdEx := len(m.TrustedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.BlockedClients) > 0 {
		for iNdEx := len(m.BlockedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.WafExclusionRules) > 0 {
		for iNdEx := len(m.WafExclusionRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafExclusionRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.MaliciousUserMitigation != nil {
		{
			size, err := m.MaliciousUserMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MoreOption != nil {
		{
			size, err := m.MoreOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DefaultRoutePools) > 0 {
		for iNdEx := len(m.DefaultRoutePools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultRoutePools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Http) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Http != nil {
		{
			size, err := m.Http.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Https) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Https != nil {
		{
			size, err := m.Https.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableWaf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWaf != nil {
		{
			size, err := m.DisableWaf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_UserIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_UserIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdentification != nil {
		{
			size, err := m.UserIdentification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableRateLimit != nil {
		{
			size, err := m.DisableRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HttpsAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsAutoCert != nil {
		{
			size, err := m.HttpsAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_RoundRobin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_RoundRobin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RoundRobin != nil {
		{
			size, err := m.RoundRobin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_LeastActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LeastActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LeastActive != nil {
		{
			size, err := m.LeastActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Random) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Random) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Random != nil {
		{
			size, err := m.Random.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SourceIpStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourceIpStickiness != nil {
		{
			size, err := m.SourceIpStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_CookieStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_CookieStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CookieStickiness != nil {
		{
			size, err := m.CookieStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_RingHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_RingHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RingHash != nil {
		{
			size, err := m.RingHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyBasedChallenge != nil {
		{
			size, err := m.PolicyBasedChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AppFirewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AppFirewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewall != nil {
		{
			size, err := m.AppFirewall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SingleLbApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SingleLbApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SingleLbApp != nil {
		{
			size, err := m.SingleLbApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_MultiLbApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_MultiLbApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultiLbApp != nil {
		{
			size, err := m.MultiLbApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableBotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableBotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableBotDefense != nil {
		{
			size, err := m.DisableBotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefense != nil {
		{
			size, err := m.BotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_UserIdClientIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_UserIdClientIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdClientIp != nil {
		{
			size, err := m.UserIdClientIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ApiDefinitions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ApiDefinitions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinitions != nil {
		{
			size, err := m.ApiDefinitions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableIpReputation != nil {
		{
			size, err := m.DisableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableIpReputation != nil {
		{
			size, err := m.EnableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ApiSpecification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ApiSpecification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecification != nil {
		{
			size, err := m.ApiSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDefinition != nil {
		{
			size, err := m.DisableApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableTrustClientIpHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableTrustClientIpHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableTrustClientIpHeaders != nil {
		{
			size, err := m.DisableTrustClientIpHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableTrustClientIpHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableTrustClientIpHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableTrustClientIpHeaders != nil {
		{
			size, err := m.EnableTrustClientIpHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableMaliciousUserDetection != nil {
		{
			size, err := m.EnableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableMaliciousUserDetection != nil {
		{
			size, err := m.DisableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableApiDiscovery != nil {
		{
			size, err := m.EnableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDiscovery != nil {
		{
			size, err := m.DisableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableClientSideDefense != nil {
		{
			size, err := m.DisableClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientSideDefense != nil {
		{
			size, err := m.ClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultPool != nil {
		{
			size, err := m.DefaultPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultPoolList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultPoolList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultPoolList != nil {
		{
			size, err := m.DefaultPoolList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SlowDdosMitigation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SlowDdosMitigation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlowDdosMitigation != nil {
		{
			size, err := m.SlowDdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableChallenge != nil {
		{
			size, err := m.EnableChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SystemDefaultTimeouts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SystemDefaultTimeouts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemDefaultTimeouts != nil {
		{
			size, err := m.SystemDefaultTimeouts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableThreatMesh != nil {
		{
			size, err := m.DisableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableThreatMesh != nil {
		{
			size, err := m.EnableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_L7DdosActionDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_L7DdosActionDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionDefault != nil {
		{
			size, err := m.L7DdosActionDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_L7DdosActionBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_L7DdosActionBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionBlock != nil {
		{
			size, err := m.L7DdosActionBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_L7DdosActionJsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_L7DdosActionJsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionJsChallenge != nil {
		{
			size, err := m.L7DdosActionJsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_L7DdosActionNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_L7DdosActionNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionNone != nil {
		{
			size, err := m.L7DdosActionNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ApiRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ApiRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiRateLimit != nil {
		{
			size, err := m.ApiRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultSensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultSensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSensitiveDataPolicy != nil {
		{
			size, err := m.DefaultSensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SensitiveDataPolicy != nil {
		{
			size, err := m.SensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BotDefenseAdvanced) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BotDefenseAdvanced) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefenseAdvanced != nil {
		{
			size, err := m.BotDefenseAdvanced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BotDefenseChoice != nil {
		{
			size := m.BotDefenseChoice.Size()
			i -= size
			if _, err := m.BotDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SensitiveDataPolicyChoice != nil {
		{
			size := m.SensitiveDataPolicyChoice.Size()
			i -= size
			if _, err := m.SensitiveDataPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RateLimitChoice != nil {
		{
			size := m.RateLimitChoice.Size()
			i -= size
			if _, err := m.RateLimitChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SensitiveDataDisclosureRules != nil {
		{
			size, err := m.SensitiveDataDisclosureRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xa2
	}
	if m.L7DdosAutoMitigationAction != nil {
		{
			size := m.L7DdosAutoMitigationAction.Size()
			i -= size
			if _, err := m.L7DdosAutoMitigationAction.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ThreatMeshChoice != nil {
		{
			size := m.ThreatMeshChoice.Size()
			i -= size
			if _, err := m.ThreatMeshChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OriginServerSubsetRuleList != nil {
		{
			size, err := m.OriginServerSubsetRuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.JwtValidation != nil {
		{
			size, err := m.JwtValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if m.SlowDdosMitigationChoice != nil {
		{
			size := m.SlowDdosMitigationChoice.Size()
			i -= size
			if _, err := m.SlowDdosMitigationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for iNdEx := len(m.ProtectedCookies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProtectedCookies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.GraphqlRules) > 0 {
		for iNdEx := len(m.GraphqlRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GraphqlRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.CsrfPolicy != nil {
		{
			size, err := m.CsrfPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xda
	}
	if m.OriginPoolChoice != nil {
		{
			size := m.OriginPoolChoice.Size()
			i -= size
			if _, err := m.OriginPoolChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClientSideDefenseChoice != nil {
		{
			size := m.ClientSideDefenseChoice.Size()
			i -= size
			if _, err := m.ClientSideDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDiscoveryChoice != nil {
		{
			size := m.ApiDiscoveryChoice.Size()
			i -= size
			if _, err := m.ApiDiscoveryChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaliciousUserDetectionChoice != nil {
		{
			size := m.MaliciousUserDetectionChoice.Size()
			i -= size
			if _, err := m.MaliciousUserDetectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TrustClientIpHeadersChoice != nil {
		{
			size := m.TrustClientIpHeadersChoice.Size()
			i -= size
			if _, err := m.TrustClientIpHeadersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiProtectionRules != nil {
		{
			size, err := m.ApiProtectionRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc2
	}
	if m.ApiDefinitionChoice != nil {
		{
			size := m.ApiDefinitionChoice.Size()
			i -= size
			if _, err := m.ApiDefinitionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiRateLimitLegacy != nil {
		{
			size, err := m.ApiRateLimitLegacy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa2
	}
	if m.IpReputationChoice != nil {
		{
			size := m.IpReputationChoice.Size()
			i -= size
			if _, err := m.IpReputationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DataGuardRules) > 0 {
		for iNdEx := len(m.DataGuardRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataGuardRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.UserIdChoice != nil {
		{
			size := m.UserIdChoice.Size()
			i -= size
			if _, err := m.UserIdChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MlConfigChoice != nil {
		{
			size := m.MlConfigChoice.Size()
			i -= size
			if _, err := m.MlConfigChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WafChoice != nil {
		{
			size := m.WafChoice.Size()
			i -= size
			if _, err := m.WafChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for iNdEx := len(m.DdosMitigationRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DdosMitigationRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.TrustedClients) > 0 {
		for iNdEx := len(m.TrustedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.BlockedClients) > 0 {
		for iNdEx := len(m.BlockedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.WafExclusionRules) > 0 {
		for iNdEx := len(m.WafExclusionRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafExclusionRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.MaliciousUserMitigation != nil {
		{
			size, err := m.MaliciousUserMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MoreOption != nil {
		{
			size, err := m.MoreOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DefaultRoutePools) > 0 {
		for iNdEx := len(m.DefaultRoutePools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultRoutePools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Http) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Http != nil {
		{
			size, err := m.Http.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Https) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Https != nil {
		{
			size, err := m.Https.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableWaf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWaf != nil {
		{
			size, err := m.DisableWaf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_UserIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_UserIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdentification != nil {
		{
			size, err := m.UserIdentification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableRateLimit != nil {
		{
			size, err := m.DisableRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HttpsAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsAutoCert != nil {
		{
			size, err := m.HttpsAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_RoundRobin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_RoundRobin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RoundRobin != nil {
		{
			size, err := m.RoundRobin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_LeastActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LeastActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LeastActive != nil {
		{
			size, err := m.LeastActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Random) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Random) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Random != nil {
		{
			size, err := m.Random.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SourceIpStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourceIpStickiness != nil {
		{
			size, err := m.SourceIpStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_CookieStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_CookieStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CookieStickiness != nil {
		{
			size, err := m.CookieStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_RingHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_RingHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RingHash != nil {
		{
			size, err := m.RingHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyBasedChallenge != nil {
		{
			size, err := m.PolicyBasedChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AppFirewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AppFirewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewall != nil {
		{
			size, err := m.AppFirewall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SingleLbApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SingleLbApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SingleLbApp != nil {
		{
			size, err := m.SingleLbApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_MultiLbApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_MultiLbApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultiLbApp != nil {
		{
			size, err := m.MultiLbApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableBotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableBotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableBotDefense != nil {
		{
			size, err := m.DisableBotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefense != nil {
		{
			size, err := m.BotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_UserIdClientIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_UserIdClientIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdClientIp != nil {
		{
			size, err := m.UserIdClientIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ApiDefinitions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ApiDefinitions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinitions != nil {
		{
			size, err := m.ApiDefinitions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableIpReputation != nil {
		{
			size, err := m.DisableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableIpReputation != nil {
		{
			size, err := m.EnableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ApiSpecification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ApiSpecification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecification != nil {
		{
			size, err := m.ApiSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDefinition != nil {
		{
			size, err := m.DisableApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableTrustClientIpHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableTrustClientIpHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableTrustClientIpHeaders != nil {
		{
			size, err := m.DisableTrustClientIpHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableTrustClientIpHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableTrustClientIpHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableTrustClientIpHeaders != nil {
		{
			size, err := m.EnableTrustClientIpHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableMaliciousUserDetection != nil {
		{
			size, err := m.EnableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableMaliciousUserDetection != nil {
		{
			size, err := m.DisableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableApiDiscovery != nil {
		{
			size, err := m.EnableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDiscovery != nil {
		{
			size, err := m.DisableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableClientSideDefense != nil {
		{
			size, err := m.DisableClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientSideDefense != nil {
		{
			size, err := m.ClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultPool != nil {
		{
			size, err := m.DefaultPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultPoolList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultPoolList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultPoolList != nil {
		{
			size, err := m.DefaultPoolList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SlowDdosMitigation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SlowDdosMitigation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlowDdosMitigation != nil {
		{
			size, err := m.SlowDdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableChallenge != nil {
		{
			size, err := m.EnableChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SystemDefaultTimeouts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SystemDefaultTimeouts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemDefaultTimeouts != nil {
		{
			size, err := m.SystemDefaultTimeouts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableThreatMesh != nil {
		{
			size, err := m.DisableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableThreatMesh != nil {
		{
			size, err := m.EnableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_L7DdosActionDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_L7DdosActionDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionDefault != nil {
		{
			size, err := m.L7DdosActionDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_L7DdosActionBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_L7DdosActionBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionBlock != nil {
		{
			size, err := m.L7DdosActionBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_L7DdosActionJsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_L7DdosActionJsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionJsChallenge != nil {
		{
			size, err := m.L7DdosActionJsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_L7DdosActionNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_L7DdosActionNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionNone != nil {
		{
			size, err := m.L7DdosActionNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ApiRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ApiRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiRateLimit != nil {
		{
			size, err := m.ApiRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultSensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultSensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSensitiveDataPolicy != nil {
		{
			size, err := m.DefaultSensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SensitiveDataPolicy != nil {
		{
			size, err := m.SensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BotDefenseAdvanced) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BotDefenseAdvanced) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefenseAdvanced != nil {
		{
			size, err := m.BotDefenseAdvanced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InternetVipInfo) > 0 {
		for iNdEx := len(m.InternetVipInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InternetVipInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x44
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.BotDefenseChoice != nil {
		{
			size := m.BotDefenseChoice.Size()
			i -= size
			if _, err := m.BotDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AutoCertInfo != nil {
		{
			size, err := m.AutoCertInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0x92
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xd8
	}
	if len(m.DnsInfo) > 0 {
		for iNdEx := len(m.DnsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.HostName) > 0 {
		i -= len(m.HostName)
		copy(dAtA[i:], m.HostName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.SensitiveDataPolicyChoice != nil {
		{
			size := m.SensitiveDataPolicyChoice.Size()
			i -= size
			if _, err := m.SensitiveDataPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RateLimitChoice != nil {
		{
			size := m.RateLimitChoice.Size()
			i -= size
			if _, err := m.RateLimitChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SensitiveDataDisclosureRules != nil {
		{
			size, err := m.SensitiveDataDisclosureRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xa2
	}
	if m.CertState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CertState))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x98
	}
	if m.L7DdosAutoMitigationAction != nil {
		{
			size := m.L7DdosAutoMitigationAction.Size()
			i -= size
			if _, err := m.L7DdosAutoMitigationAction.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ThreatMeshChoice != nil {
		{
			size := m.ThreatMeshChoice.Size()
			i -= size
			if _, err := m.ThreatMeshChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OriginServerSubsetRuleList != nil {
		{
			size, err := m.OriginServerSubsetRuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.JwtValidation != nil {
		{
			size, err := m.JwtValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	if m.SlowDdosMitigationChoice != nil {
		{
			size := m.SlowDdosMitigationChoice.Size()
			i -= size
			if _, err := m.SlowDdosMitigationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for iNdEx := len(m.ProtectedCookies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProtectedCookies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.GraphqlRules) > 0 {
		for iNdEx := len(m.GraphqlRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GraphqlRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.CsrfPolicy != nil {
		{
			size, err := m.CsrfPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xda
	}
	if m.OriginPoolChoice != nil {
		{
			size := m.OriginPoolChoice.Size()
			i -= size
			if _, err := m.OriginPoolChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClientSideDefenseChoice != nil {
		{
			size := m.ClientSideDefenseChoice.Size()
			i -= size
			if _, err := m.ClientSideDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDiscoveryChoice != nil {
		{
			size := m.ApiDiscoveryChoice.Size()
			i -= size
			if _, err := m.ApiDiscoveryChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaliciousUserDetectionChoice != nil {
		{
			size := m.MaliciousUserDetectionChoice.Size()
			i -= size
			if _, err := m.MaliciousUserDetectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TrustClientIpHeadersChoice != nil {
		{
			size := m.TrustClientIpHeadersChoice.Size()
			i -= size
			if _, err := m.TrustClientIpHeadersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiProtectionRules != nil {
		{
			size, err := m.ApiProtectionRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc2
	}
	if m.ApiDefinitionChoice != nil {
		{
			size := m.ApiDefinitionChoice.Size()
			i -= size
			if _, err := m.ApiDefinitionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiRateLimitLegacy != nil {
		{
			size, err := m.ApiRateLimitLegacy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa2
	}
	if m.IpReputationChoice != nil {
		{
			size := m.IpReputationChoice.Size()
			i -= size
			if _, err := m.IpReputationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DataGuardRules) > 0 {
		for iNdEx := len(m.DataGuardRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataGuardRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.DownstreamTlsCertificateExpirationTimestamps) > 0 {
		for iNdEx := len(m.DownstreamTlsCertificateExpirationTimestamps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DownstreamTlsCertificateExpirationTimestamps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.UserIdChoice != nil {
		{
			size := m.UserIdChoice.Size()
			i -= size
			if _, err := m.UserIdChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MlConfigChoice != nil {
		{
			size := m.MlConfigChoice.Size()
			i -= size
			if _, err := m.MlConfigChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WafChoice != nil {
		{
			size := m.WafChoice.Size()
			i -= size
			if _, err := m.WafChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for iNdEx := len(m.DdosMitigationRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DdosMitigationRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.TrustedClients) > 0 {
		for iNdEx := len(m.TrustedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.BlockedClients) > 0 {
		for iNdEx := len(m.BlockedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.WafExclusionRules) > 0 {
		for iNdEx := len(m.WafExclusionRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafExclusionRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.MaliciousUserMitigation != nil {
		{
			size, err := m.MaliciousUserMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MoreOption != nil {
		{
			size, err := m.MoreOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DefaultRoutePools) > 0 {
		for iNdEx := len(m.DefaultRoutePools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultRoutePools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Http) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Http != nil {
		{
			size, err := m.Http.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Https) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Https != nil {
		{
			size, err := m.Https.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableWaf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWaf != nil {
		{
			size, err := m.DisableWaf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_UserIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_UserIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdentification != nil {
		{
			size, err := m.UserIdentification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableRateLimit != nil {
		{
			size, err := m.DisableRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HttpsAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsAutoCert != nil {
		{
			size, err := m.HttpsAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_RoundRobin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_RoundRobin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RoundRobin != nil {
		{
			size, err := m.RoundRobin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_LeastActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LeastActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LeastActive != nil {
		{
			size, err := m.LeastActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Random) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Random) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Random != nil {
		{
			size, err := m.Random.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SourceIpStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourceIpStickiness != nil {
		{
			size, err := m.SourceIpStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_CookieStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_CookieStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CookieStickiness != nil {
		{
			size, err := m.CookieStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_RingHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_RingHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RingHash != nil {
		{
			size, err := m.RingHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyBasedChallenge != nil {
		{
			size, err := m.PolicyBasedChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AppFirewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AppFirewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewall != nil {
		{
			size, err := m.AppFirewall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SingleLbApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SingleLbApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SingleLbApp != nil {
		{
			size, err := m.SingleLbApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_MultiLbApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_MultiLbApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultiLbApp != nil {
		{
			size, err := m.MultiLbApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableBotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableBotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableBotDefense != nil {
		{
			size, err := m.DisableBotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefense != nil {
		{
			size, err := m.BotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_UserIdClientIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_UserIdClientIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdClientIp != nil {
		{
			size, err := m.UserIdClientIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ApiDefinitions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ApiDefinitions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinitions != nil {
		{
			size, err := m.ApiDefinitions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableIpReputation != nil {
		{
			size, err := m.DisableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableIpReputation != nil {
		{
			size, err := m.EnableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ApiSpecification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ApiSpecification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecification != nil {
		{
			size, err := m.ApiSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDefinition != nil {
		{
			size, err := m.DisableApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableTrustClientIpHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableTrustClientIpHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableTrustClientIpHeaders != nil {
		{
			size, err := m.DisableTrustClientIpHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableTrustClientIpHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableTrustClientIpHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableTrustClientIpHeaders != nil {
		{
			size, err := m.EnableTrustClientIpHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableMaliciousUserDetection != nil {
		{
			size, err := m.EnableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableMaliciousUserDetection != nil {
		{
			size, err := m.DisableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableApiDiscovery != nil {
		{
			size, err := m.EnableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDiscovery != nil {
		{
			size, err := m.DisableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableClientSideDefense != nil {
		{
			size, err := m.DisableClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ClientSideDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ClientSideDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientSideDefense != nil {
		{
			size, err := m.ClientSideDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultPool != nil {
		{
			size, err := m.DefaultPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultPoolList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultPoolList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultPoolList != nil {
		{
			size, err := m.DefaultPoolList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SlowDdosMitigation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SlowDdosMitigation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlowDdosMitigation != nil {
		{
			size, err := m.SlowDdosMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableChallenge != nil {
		{
			size, err := m.EnableChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SystemDefaultTimeouts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SystemDefaultTimeouts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemDefaultTimeouts != nil {
		{
			size, err := m.SystemDefaultTimeouts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableThreatMesh != nil {
		{
			size, err := m.DisableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableThreatMesh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableThreatMesh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableThreatMesh != nil {
		{
			size, err := m.EnableThreatMesh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_L7DdosActionDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_L7DdosActionDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionDefault != nil {
		{
			size, err := m.L7DdosActionDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_L7DdosActionBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_L7DdosActionBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionBlock != nil {
		{
			size, err := m.L7DdosActionBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_L7DdosActionJsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_L7DdosActionJsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionJsChallenge != nil {
		{
			size, err := m.L7DdosActionJsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_L7DdosActionNone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_L7DdosActionNone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.L7DdosActionNone != nil {
		{
			size, err := m.L7DdosActionNone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ApiRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ApiRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiRateLimit != nil {
		{
			size, err := m.ApiRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultSensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultSensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSensitiveDataPolicy != nil {
		{
			size, err := m.DefaultSensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SensitiveDataPolicy != nil {
		{
			size, err := m.SensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BotDefenseAdvanced) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BotDefenseAdvanced) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefenseAdvanced != nil {
		{
			size, err := m.BotDefenseAdvanced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProxyTypeHttps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpRedirect {
		n += 2
	}
	if m.AddHsts {
		n += 2
	}
	if m.TlsCertificatesChoice != nil {
		n += m.TlsCertificatesChoice.Size()
	}
	if m.ServerHeaderChoice != nil {
		n += m.ServerHeaderChoice.Size()
	}
	if m.PathNormalizeChoice != nil {
		n += m.PathNormalizeChoice.Size()
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	if m.DefaultLbChoice != nil {
		n += m.DefaultLbChoice.Size()
	}
	if m.HeaderTransformationType != nil {
		l = m.HeaderTransformationType.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ConnectionIdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.ConnectionIdleTimeout))
	}
	if m.HttpProtocolOptions != nil {
		l = m.HttpProtocolOptions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProxyTypeHttps_TlsParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps_DefaultHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultHeader != nil {
		l = m.DefaultHeader.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps_ServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ProxyTypeHttps_AppendServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppendServerName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ProxyTypeHttps_PassThrough) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PassThrough != nil {
		l = m.PassThrough.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps_EnablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnablePathNormalize != nil {
		l = m.EnablePathNormalize.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps_DisablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisablePathNormalize != nil {
		l = m.DisablePathNormalize.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps_Port) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Port))
	return n
}
func (m *ProxyTypeHttps_NonDefaultLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NonDefaultLoadbalancer != nil {
		l = m.NonDefaultLoadbalancer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps_DefaultLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultLoadbalancer != nil {
		l = m.DefaultLoadbalancer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps_TlsCertParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsCertParams != nil {
		l = m.TlsCertParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps_PortRanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortRanges)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *ProxyTypeHttp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsVolterraManaged {
		n += 2
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	return n
}

func (m *ProxyTypeHttp_Port) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.Port))
	return n
}
func (m *ProxyTypeHttp_PortRanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortRanges)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ProxyTypeHttpsAutoCerts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpRedirect {
		n += 2
	}
	if m.AddHsts {
		n += 2
	}
	if m.TlsConfig != nil {
		l = m.TlsConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MtlsChoice != nil {
		n += m.MtlsChoice.Size()
	}
	if m.ServerHeaderChoice != nil {
		n += m.ServerHeaderChoice.Size()
	}
	if m.PathNormalizeChoice != nil {
		n += m.PathNormalizeChoice.Size()
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	if m.DefaultLbChoice != nil {
		n += m.DefaultLbChoice.Size()
	}
	if m.HeaderTransformationType != nil {
		l = m.HeaderTransformationType.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ConnectionIdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.ConnectionIdleTimeout))
	}
	if m.HttpProtocolOptions != nil {
		l = m.HttpProtocolOptions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProxyTypeHttpsAutoCerts_NoMtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoMtls != nil {
		l = m.NoMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_UseMtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseMtls != nil {
		l = m.UseMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_DefaultHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultHeader != nil {
		l = m.DefaultHeader.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_ServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ProxyTypeHttpsAutoCerts_AppendServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppendServerName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ProxyTypeHttpsAutoCerts_PassThrough) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PassThrough != nil {
		l = m.PassThrough.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_EnablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnablePathNormalize != nil {
		l = m.EnablePathNormalize.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_DisablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisablePathNormalize != nil {
		l = m.DisablePathNormalize.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_Port) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.Port))
	return n
}
func (m *ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NonDefaultLoadbalancer != nil {
		l = m.NonDefaultLoadbalancer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_DefaultLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultLoadbalancer != nil {
		l = m.DefaultLoadbalancer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_PortRanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortRanges)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *HashPolicyListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HashPolicy) > 0 {
		for _, e := range m.HashPolicy {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *MirrorPolicyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OriginPool != nil {
		l = m.OriginPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Percent != nil {
		l = m.Percent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RouteSimpleAdvancedOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.Priority != 0 {
		n += 1 + sovTypes(uint64(m.Priority))
	}
	if len(m.EndpointSubsets) > 0 {
		for k, v := range m.EndpointSubsets {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.RewriteChoice != nil {
		n += m.RewriteChoice.Size()
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for _, e := range m.RequestHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, e := range m.ResponseHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DisableLocationAdd {
		n += 2
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.SpdyChoice != nil {
		n += m.SpdyChoice.Size()
	}
	if m.WebsocketChoice != nil {
		n += m.WebsocketChoice.Size()
	}
	if m.RetryPolicyChoice != nil {
		n += m.RetryPolicyChoice.Size()
	}
	if m.Timeout != 0 {
		n += 2 + sovTypes(uint64(m.Timeout))
	}
	if m.BufferChoice != nil {
		n += m.BufferChoice.Size()
	}
	if m.MirroringChoice != nil {
		n += m.MirroringChoice.Size()
	}
	if m.ClusterRetractChoice != nil {
		n += m.ClusterRetractChoice.Size()
	}
	if m.BotDefenseJavascriptInjectionChoice != nil {
		n += m.BotDefenseJavascriptInjectionChoice.Size()
	}
	if m.CsrfPolicy != nil {
		l = m.CsrfPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RouteSimpleAdvancedOptions_CommonHashPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommonHashPolicy != nil {
		l = m.CommonHashPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_SpecificHashPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpecificHashPolicy != nil {
		l = m.SpecificHashPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DisablePrefixRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisablePrefixRewrite != nil {
		l = m.DisablePrefixRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_PrefixRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrefixRewrite)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *RouteSimpleAdvancedOptions_InheritedWaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InheritedWaf != nil {
		l = m.InheritedWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DisableSpdy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableSpdy != nil {
		l = m.DisableSpdy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_EnableSpdy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableSpdy != nil {
		l = m.EnableSpdy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DisableWebSocketConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWebSocketConfig != nil {
		l = m.DisableWebSocketConfig.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_WebSocketConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WebSocketConfig != nil {
		l = m.WebSocketConfig.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DefaultRetryPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultRetryPolicy != nil {
		l = m.DefaultRetryPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_RetryPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_CommonBuffering) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommonBuffering != nil {
		l = m.CommonBuffering.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_BufferPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BufferPolicy != nil {
		l = m.BufferPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DisableMirroring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableMirroring != nil {
		l = m.DisableMirroring.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_MirrorPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MirrorPolicy != nil {
		l = m.MirrorPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_RetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetractCluster != nil {
		l = m.RetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DoNotRetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotRetractCluster != nil {
		l = m.DoNotRetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InheritedBotDefenseJavascriptInjection != nil {
		l = m.InheritedBotDefenseJavascriptInjection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefenseJavascriptInjection != nil {
		l = m.BotDefenseJavascriptInjection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DisableWaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_NoRetryPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoRetryPolicy != nil {
		l = m.NoRetryPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_RegexRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegexRewrite != nil {
		l = m.RegexRewrite.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_AppFirewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewall != nil {
		l = m.AppFirewall.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeSimpleWithDefaultOriginPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpMethod != 0 {
		n += 1 + sovTypes(uint64(m.HttpMethod))
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HostRewriteParams != nil {
		n += m.HostRewriteParams.Size()
	}
	return n
}

func (m *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoHostRewrite != nil {
		l = m.AutoHostRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostRewrite)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableHostRewrite != nil {
		l = m.DisableHostRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeSimple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HttpMethod != 0 {
		n += 1 + sovTypes(uint64(m.HttpMethod))
	}
	if len(m.OriginPools) > 0 {
		for _, e := range m.OriginPools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.HostRewriteParams != nil {
		n += m.HostRewriteParams.Size()
	}
	if m.AdvancedOptions != nil {
		l = m.AdvancedOptions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.IncomingPort != nil {
		l = m.IncomingPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RouteTypeSimple_AutoHostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoHostRewrite != nil {
		l = m.AutoHostRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeSimple_HostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostRewrite)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *RouteTypeSimple_DisableHostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableHostRewrite != nil {
		l = m.DisableHostRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeRedirect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HttpMethod != 0 {
		n += 1 + sovTypes(uint64(m.HttpMethod))
	}
	if m.RouteRedirect != nil {
		l = m.RouteRedirect.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.IncomingPort != nil {
		l = m.IncomingPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RouteTypeDirectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HttpMethod != 0 {
		n += 1 + sovTypes(uint64(m.HttpMethod))
	}
	if m.RouteDirectResponse != nil {
		l = m.RouteDirectResponse.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.IncomingPort != nil {
		l = m.IncomingPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RouteTypeCustomRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteRef != nil {
		l = m.RouteRef.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RouteType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *RouteType_SimpleRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SimpleRoute != nil {
		l = m.SimpleRoute.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteType_RedirectRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RedirectRoute != nil {
		l = m.RedirectRoute.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteType_DirectResponseRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectResponseRoute != nil {
		l = m.DirectResponseRoute.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteType_CustomRouteObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomRouteObject != nil {
		l = m.CustomRouteObject.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AdvancedOptionsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestHeadersToAdd) > 0 {
		for _, e := range m.RequestHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, e := range m.ResponseHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		n += 1 + sovTypes(uint64(m.MaxRequestHeaderSize))
	}
	if m.BufferPolicy != nil {
		l = m.BufferPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CompressionParams != nil {
		l = m.CompressionParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.CustomErrors) > 0 {
		for k, v := range m.CustomErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.JavascriptInfo != nil {
		l = m.JavascriptInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Jwt) > 0 {
		for _, e := range m.Jwt {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.IdleTimeout != 0 {
		n += 1 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.DisableDefaultErrorPages {
		n += 2
	}
	if m.PathNormalizeChoice != nil {
		n += m.PathNormalizeChoice.Size()
	}
	if m.StrictSniHostHeaderCheckChoice != nil {
		n += m.StrictSniHostHeaderCheckChoice.Size()
	}
	if len(m.CookiesToModify) > 0 {
		for _, e := range m.CookiesToModify {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AdvancedOptionsType_EnablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnablePathNormalize != nil {
		l = m.EnablePathNormalize.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AdvancedOptionsType_DisablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisablePathNormalize != nil {
		l = m.DisablePathNormalize.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AdvancedOptionsType_EnableStrictSniHostHeaderCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableStrictSniHostHeaderCheck != nil {
		l = m.EnableStrictSniHostHeaderCheck.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AdvancedOptionsType_AdditionalDomains) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdditionalDomains != nil {
		l = m.AdditionalDomains.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SingleLoadBalancerAppSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDiscoveryChoice != nil {
		n += m.ApiDiscoveryChoice.Size()
	}
	if m.MaliciousUserDetectionChoice != nil {
		n += m.MaliciousUserDetectionChoice.Size()
	}
	return n
}

func (m *SingleLoadBalancerAppSetting_EnableDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableDiscovery != nil {
		l = m.EnableDiscovery.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SingleLoadBalancerAppSetting_DisableDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableDiscovery != nil {
		l = m.DisableDiscovery.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SingleLoadBalancerAppSetting_EnableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableMaliciousUserDetection != nil {
		l = m.EnableMaliciousUserDetection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SingleLoadBalancerAppSetting_DisableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableMaliciousUserDetection != nil {
		l = m.DisableMaliciousUserDetection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OriginServerSubsetRuleListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OriginServerSubsetRules) > 0 {
		for _, e := range m.OriginServerSubsetRules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, e := range m.DefaultRoutePools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.AddLocation {
		n += 3
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserIdChoice != nil {
		n += m.UserIdChoice.Size()
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if m.HostRewriteParams != nil {
		n += m.HostRewriteParams.Size()
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for _, e := range m.DdosMitigationRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.MlConfigChoice != nil {
		n += m.MlConfigChoice.Size()
	}
	if m.BotDefenseChoice != nil {
		n += m.BotDefenseChoice.Size()
	}
	if m.ApiDefinitionChoice != nil {
		n += m.ApiDefinitionChoice.Size()
	}
	if len(m.DownstreamTlsCertificateExpirationTimestamps) > 0 {
		for _, e := range m.DownstreamTlsCertificateExpirationTimestamps {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DataGuardRules) > 0 {
		for _, e := range m.DataGuardRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.IpReputationChoice != nil {
		n += m.IpReputationChoice.Size()
	}
	if m.ApiRateLimitLegacy != nil {
		l = m.ApiRateLimitLegacy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ApiProtectionRules != nil {
		l = m.ApiProtectionRules.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TrustClientIpHeadersChoice != nil {
		n += m.TrustClientIpHeadersChoice.Size()
	}
	if m.MaliciousUserDetectionChoice != nil {
		n += m.MaliciousUserDetectionChoice.Size()
	}
	if m.ApiDiscoveryChoice != nil {
		n += m.ApiDiscoveryChoice.Size()
	}
	if m.ClientSideDefenseChoice != nil {
		n += m.ClientSideDefenseChoice.Size()
	}
	if m.OriginPoolChoice != nil {
		n += m.OriginPoolChoice.Size()
	}
	if m.CsrfPolicy != nil {
		l = m.CsrfPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.GraphqlRules) > 0 {
		for _, e := range m.GraphqlRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for _, e := range m.ProtectedCookies {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.SlowDdosMitigationChoice != nil {
		n += m.SlowDdosMitigationChoice.Size()
	}
	if m.JwtValidation != nil {
		l = m.JwtValidation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.OriginServerSubsetRuleList != nil {
		l = m.OriginServerSubsetRuleList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ThreatMeshChoice != nil {
		n += m.ThreatMeshChoice.Size()
	}
	if m.L7DdosAutoMitigationAction != nil {
		n += m.L7DdosAutoMitigationAction.Size()
	}
	if m.CertState != 0 {
		n += 2 + sovTypes(uint64(m.CertState))
	}
	if m.SensitiveDataDisclosureRules != nil {
		l = m.SensitiveDataDisclosureRules.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.SensitiveDataPolicyChoice != nil {
		n += m.SensitiveDataPolicyChoice.Size()
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.State != 0 {
		n += 2 + sovTypes(uint64(m.State))
	}
	if m.AutoCertState != 0 {
		n += 2 + sovTypes(uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		l = m.AutoCertInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.InternetVipInfo) > 0 {
		for _, e := range m.InternetVipInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType_Http) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Https) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableWaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_UserIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HttpsAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AutoHostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoHostRewrite != nil {
		l = m.AutoHostRewrite.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostRewrite)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_DisableHostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableHostRewrite != nil {
		l = m.DisableHostRewrite.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RoundRobin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundRobin != nil {
		l = m.RoundRobin.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LeastActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeastActive != nil {
		l = m.LeastActive.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Random) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Random != nil {
		l = m.Random.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SourceIpStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceIpStickiness != nil {
		l = m.SourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CookieStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CookieStickiness != nil {
		l = m.CookieStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RingHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RingHash != nil {
		l = m.RingHash.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AppFirewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewall != nil {
		l = m.AppFirewall.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SingleLbApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SingleLbApp != nil {
		l = m.SingleLbApp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_MultiLbApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultiLbApp != nil {
		l = m.MultiLbApp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableBotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableBotDefense != nil {
		l = m.DisableBotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefense != nil {
		l = m.BotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_UserIdClientIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdClientIp != nil {
		l = m.UserIdClientIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ApiDefinitions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinitions != nil {
		l = m.ApiDefinitions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableIpReputation != nil {
		l = m.DisableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableIpReputation != nil {
		l = m.EnableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ApiSpecification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecification != nil {
		l = m.ApiSpecification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDefinition != nil {
		l = m.DisableApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableTrustClientIpHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableTrustClientIpHeaders != nil {
		l = m.DisableTrustClientIpHeaders.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableTrustClientIpHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableTrustClientIpHeaders != nil {
		l = m.EnableTrustClientIpHeaders.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableMaliciousUserDetection != nil {
		l = m.EnableMaliciousUserDetection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableMaliciousUserDetection != nil {
		l = m.DisableMaliciousUserDetection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableApiDiscovery != nil {
		l = m.EnableApiDiscovery.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDiscovery != nil {
		l = m.DisableApiDiscovery.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableClientSideDefense != nil {
		l = m.DisableClientSideDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientSideDefense != nil {
		l = m.ClientSideDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultPool != nil {
		l = m.DefaultPool.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultPoolList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultPoolList != nil {
		l = m.DefaultPoolList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SlowDdosMitigation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlowDdosMitigation != nil {
		l = m.SlowDdosMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableChallenge != nil {
		l = m.EnableChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SystemDefaultTimeouts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemDefaultTimeouts != nil {
		l = m.SystemDefaultTimeouts.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableThreatMesh != nil {
		l = m.DisableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableThreatMesh != nil {
		l = m.EnableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_L7DdosActionDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionDefault != nil {
		l = m.L7DdosActionDefault.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_L7DdosActionBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionBlock != nil {
		l = m.L7DdosActionBlock.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_L7DdosActionJsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionJsChallenge != nil {
		l = m.L7DdosActionJsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_L7DdosActionNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionNone != nil {
		l = m.L7DdosActionNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ApiRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiRateLimit != nil {
		l = m.ApiRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultSensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSensitiveDataPolicy != nil {
		l = m.DefaultSensitiveDataPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensitiveDataPolicy != nil {
		l = m.SensitiveDataPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BotDefenseAdvanced) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefenseAdvanced != nil {
		l = m.BotDefenseAdvanced.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SensitiveDataDisclosureRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SensitiveDataTypesInResponse) > 0 {
		for _, e := range m.SensitiveDataTypesInResponse {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SensitiveDataTypes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MaskingModeChoice != nil {
		n += m.MaskingModeChoice.Size()
	}
	if m.TypeConditionTypeChoice != nil {
		n += m.TypeConditionTypeChoice.Size()
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SensitiveDataTypes_Mask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mask != nil {
		l = m.Mask.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SensitiveDataTypes_Report) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Report != nil {
		l = m.Report.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SensitiveDataTypes_ApiEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiEndpoint != nil {
		l = m.ApiEndpoint.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SensitiveDataTypes_BasePath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BasePath)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *SensitiveDataTypes_ApiGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiGroup)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *BodySectionMaskingOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, e := range m.DefaultRoutePools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.AddLocation {
		n += 3
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserIdChoice != nil {
		n += m.UserIdChoice.Size()
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for _, e := range m.DdosMitigationRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.MlConfigChoice != nil {
		n += m.MlConfigChoice.Size()
	}
	if m.BotDefenseChoice != nil {
		n += m.BotDefenseChoice.Size()
	}
	if m.ApiDefinitionChoice != nil {
		n += m.ApiDefinitionChoice.Size()
	}
	if len(m.DataGuardRules) > 0 {
		for _, e := range m.DataGuardRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.IpReputationChoice != nil {
		n += m.IpReputationChoice.Size()
	}
	if m.ApiRateLimitLegacy != nil {
		l = m.ApiRateLimitLegacy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ApiProtectionRules != nil {
		l = m.ApiProtectionRules.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TrustClientIpHeadersChoice != nil {
		n += m.TrustClientIpHeadersChoice.Size()
	}
	if m.MaliciousUserDetectionChoice != nil {
		n += m.MaliciousUserDetectionChoice.Size()
	}
	if m.ApiDiscoveryChoice != nil {
		n += m.ApiDiscoveryChoice.Size()
	}
	if m.ClientSideDefenseChoice != nil {
		n += m.ClientSideDefenseChoice.Size()
	}
	if m.OriginPoolChoice != nil {
		n += m.OriginPoolChoice.Size()
	}
	if m.CsrfPolicy != nil {
		l = m.CsrfPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.GraphqlRules) > 0 {
		for _, e := range m.GraphqlRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for _, e := range m.ProtectedCookies {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.SlowDdosMitigationChoice != nil {
		n += m.SlowDdosMitigationChoice.Size()
	}
	if m.JwtValidation != nil {
		l = m.JwtValidation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.OriginServerSubsetRuleList != nil {
		l = m.OriginServerSubsetRuleList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ThreatMeshChoice != nil {
		n += m.ThreatMeshChoice.Size()
	}
	if m.L7DdosAutoMitigationAction != nil {
		n += m.L7DdosAutoMitigationAction.Size()
	}
	if m.SensitiveDataDisclosureRules != nil {
		l = m.SensitiveDataDisclosureRules.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.SensitiveDataPolicyChoice != nil {
		n += m.SensitiveDataPolicyChoice.Size()
	}
	return n
}

func (m *CreateSpecType_Http) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Https) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableWaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_UserIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HttpsAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RoundRobin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundRobin != nil {
		l = m.RoundRobin.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LeastActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeastActive != nil {
		l = m.LeastActive.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Random) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Random != nil {
		l = m.Random.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SourceIpStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceIpStickiness != nil {
		l = m.SourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CookieStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CookieStickiness != nil {
		l = m.CookieStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RingHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RingHash != nil {
		l = m.RingHash.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AppFirewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewall != nil {
		l = m.AppFirewall.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SingleLbApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SingleLbApp != nil {
		l = m.SingleLbApp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_MultiLbApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultiLbApp != nil {
		l = m.MultiLbApp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableBotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableBotDefense != nil {
		l = m.DisableBotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefense != nil {
		l = m.BotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_UserIdClientIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdClientIp != nil {
		l = m.UserIdClientIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ApiDefinitions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinitions != nil {
		l = m.ApiDefinitions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableIpReputation != nil {
		l = m.DisableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableIpReputation != nil {
		l = m.EnableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ApiSpecification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecification != nil {
		l = m.ApiSpecification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDefinition != nil {
		l = m.DisableApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableTrustClientIpHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableTrustClientIpHeaders != nil {
		l = m.DisableTrustClientIpHeaders.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableTrustClientIpHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableTrustClientIpHeaders != nil {
		l = m.EnableTrustClientIpHeaders.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableMaliciousUserDetection != nil {
		l = m.EnableMaliciousUserDetection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableMaliciousUserDetection != nil {
		l = m.DisableMaliciousUserDetection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableApiDiscovery != nil {
		l = m.EnableApiDiscovery.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDiscovery != nil {
		l = m.DisableApiDiscovery.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableClientSideDefense != nil {
		l = m.DisableClientSideDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientSideDefense != nil {
		l = m.ClientSideDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultPool != nil {
		l = m.DefaultPool.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultPoolList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultPoolList != nil {
		l = m.DefaultPoolList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SlowDdosMitigation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlowDdosMitigation != nil {
		l = m.SlowDdosMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableChallenge != nil {
		l = m.EnableChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SystemDefaultTimeouts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemDefaultTimeouts != nil {
		l = m.SystemDefaultTimeouts.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableThreatMesh != nil {
		l = m.DisableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableThreatMesh != nil {
		l = m.EnableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_L7DdosActionDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionDefault != nil {
		l = m.L7DdosActionDefault.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_L7DdosActionBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionBlock != nil {
		l = m.L7DdosActionBlock.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_L7DdosActionJsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionJsChallenge != nil {
		l = m.L7DdosActionJsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_L7DdosActionNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionNone != nil {
		l = m.L7DdosActionNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ApiRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiRateLimit != nil {
		l = m.ApiRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultSensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSensitiveDataPolicy != nil {
		l = m.DefaultSensitiveDataPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensitiveDataPolicy != nil {
		l = m.SensitiveDataPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BotDefenseAdvanced) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefenseAdvanced != nil {
		l = m.BotDefenseAdvanced.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, e := range m.DefaultRoutePools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.AddLocation {
		n += 3
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserIdChoice != nil {
		n += m.UserIdChoice.Size()
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for _, e := range m.DdosMitigationRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.MlConfigChoice != nil {
		n += m.MlConfigChoice.Size()
	}
	if m.BotDefenseChoice != nil {
		n += m.BotDefenseChoice.Size()
	}
	if m.ApiDefinitionChoice != nil {
		n += m.ApiDefinitionChoice.Size()
	}
	if len(m.DataGuardRules) > 0 {
		for _, e := range m.DataGuardRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.IpReputationChoice != nil {
		n += m.IpReputationChoice.Size()
	}
	if m.ApiRateLimitLegacy != nil {
		l = m.ApiRateLimitLegacy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ApiProtectionRules != nil {
		l = m.ApiProtectionRules.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TrustClientIpHeadersChoice != nil {
		n += m.TrustClientIpHeadersChoice.Size()
	}
	if m.MaliciousUserDetectionChoice != nil {
		n += m.MaliciousUserDetectionChoice.Size()
	}
	if m.ApiDiscoveryChoice != nil {
		n += m.ApiDiscoveryChoice.Size()
	}
	if m.ClientSideDefenseChoice != nil {
		n += m.ClientSideDefenseChoice.Size()
	}
	if m.OriginPoolChoice != nil {
		n += m.OriginPoolChoice.Size()
	}
	if m.CsrfPolicy != nil {
		l = m.CsrfPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.GraphqlRules) > 0 {
		for _, e := range m.GraphqlRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for _, e := range m.ProtectedCookies {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.SlowDdosMitigationChoice != nil {
		n += m.SlowDdosMitigationChoice.Size()
	}
	if m.JwtValidation != nil {
		l = m.JwtValidation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.OriginServerSubsetRuleList != nil {
		l = m.OriginServerSubsetRuleList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ThreatMeshChoice != nil {
		n += m.ThreatMeshChoice.Size()
	}
	if m.L7DdosAutoMitigationAction != nil {
		n += m.L7DdosAutoMitigationAction.Size()
	}
	if m.SensitiveDataDisclosureRules != nil {
		l = m.SensitiveDataDisclosureRules.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.SensitiveDataPolicyChoice != nil {
		n += m.SensitiveDataPolicyChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_Http) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Https) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableWaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_UserIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HttpsAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RoundRobin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundRobin != nil {
		l = m.RoundRobin.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LeastActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeastActive != nil {
		l = m.LeastActive.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Random) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Random != nil {
		l = m.Random.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SourceIpStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceIpStickiness != nil {
		l = m.SourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CookieStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CookieStickiness != nil {
		l = m.CookieStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RingHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RingHash != nil {
		l = m.RingHash.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AppFirewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewall != nil {
		l = m.AppFirewall.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SingleLbApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SingleLbApp != nil {
		l = m.SingleLbApp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_MultiLbApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultiLbApp != nil {
		l = m.MultiLbApp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableBotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableBotDefense != nil {
		l = m.DisableBotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefense != nil {
		l = m.BotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_UserIdClientIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdClientIp != nil {
		l = m.UserIdClientIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ApiDefinitions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinitions != nil {
		l = m.ApiDefinitions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableIpReputation != nil {
		l = m.DisableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableIpReputation != nil {
		l = m.EnableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ApiSpecification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecification != nil {
		l = m.ApiSpecification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDefinition != nil {
		l = m.DisableApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableTrustClientIpHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableTrustClientIpHeaders != nil {
		l = m.DisableTrustClientIpHeaders.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableTrustClientIpHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableTrustClientIpHeaders != nil {
		l = m.EnableTrustClientIpHeaders.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableMaliciousUserDetection != nil {
		l = m.EnableMaliciousUserDetection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableMaliciousUserDetection != nil {
		l = m.DisableMaliciousUserDetection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableApiDiscovery != nil {
		l = m.EnableApiDiscovery.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDiscovery != nil {
		l = m.DisableApiDiscovery.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableClientSideDefense != nil {
		l = m.DisableClientSideDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientSideDefense != nil {
		l = m.ClientSideDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultPool != nil {
		l = m.DefaultPool.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultPoolList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultPoolList != nil {
		l = m.DefaultPoolList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SlowDdosMitigation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlowDdosMitigation != nil {
		l = m.SlowDdosMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableChallenge != nil {
		l = m.EnableChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SystemDefaultTimeouts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemDefaultTimeouts != nil {
		l = m.SystemDefaultTimeouts.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableThreatMesh != nil {
		l = m.DisableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableThreatMesh != nil {
		l = m.EnableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_L7DdosActionDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionDefault != nil {
		l = m.L7DdosActionDefault.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_L7DdosActionBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionBlock != nil {
		l = m.L7DdosActionBlock.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_L7DdosActionJsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionJsChallenge != nil {
		l = m.L7DdosActionJsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_L7DdosActionNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionNone != nil {
		l = m.L7DdosActionNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ApiRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiRateLimit != nil {
		l = m.ApiRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultSensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSensitiveDataPolicy != nil {
		l = m.DefaultSensitiveDataPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensitiveDataPolicy != nil {
		l = m.SensitiveDataPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BotDefenseAdvanced) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefenseAdvanced != nil {
		l = m.BotDefenseAdvanced.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, e := range m.DefaultRoutePools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.AddLocation {
		n += 3
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserIdChoice != nil {
		n += m.UserIdChoice.Size()
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for _, e := range m.DdosMitigationRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.MlConfigChoice != nil {
		n += m.MlConfigChoice.Size()
	}
	if m.BotDefenseChoice != nil {
		n += m.BotDefenseChoice.Size()
	}
	if m.ApiDefinitionChoice != nil {
		n += m.ApiDefinitionChoice.Size()
	}
	if len(m.DownstreamTlsCertificateExpirationTimestamps) > 0 {
		for _, e := range m.DownstreamTlsCertificateExpirationTimestamps {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DataGuardRules) > 0 {
		for _, e := range m.DataGuardRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.IpReputationChoice != nil {
		n += m.IpReputationChoice.Size()
	}
	if m.ApiRateLimitLegacy != nil {
		l = m.ApiRateLimitLegacy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ApiProtectionRules != nil {
		l = m.ApiProtectionRules.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TrustClientIpHeadersChoice != nil {
		n += m.TrustClientIpHeadersChoice.Size()
	}
	if m.MaliciousUserDetectionChoice != nil {
		n += m.MaliciousUserDetectionChoice.Size()
	}
	if m.ApiDiscoveryChoice != nil {
		n += m.ApiDiscoveryChoice.Size()
	}
	if m.ClientSideDefenseChoice != nil {
		n += m.ClientSideDefenseChoice.Size()
	}
	if m.OriginPoolChoice != nil {
		n += m.OriginPoolChoice.Size()
	}
	if m.CsrfPolicy != nil {
		l = m.CsrfPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.GraphqlRules) > 0 {
		for _, e := range m.GraphqlRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ProtectedCookies) > 0 {
		for _, e := range m.ProtectedCookies {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.SlowDdosMitigationChoice != nil {
		n += m.SlowDdosMitigationChoice.Size()
	}
	if m.JwtValidation != nil {
		l = m.JwtValidation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.OriginServerSubsetRuleList != nil {
		l = m.OriginServerSubsetRuleList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ThreatMeshChoice != nil {
		n += m.ThreatMeshChoice.Size()
	}
	if m.L7DdosAutoMitigationAction != nil {
		n += m.L7DdosAutoMitigationAction.Size()
	}
	if m.CertState != 0 {
		n += 2 + sovTypes(uint64(m.CertState))
	}
	if m.SensitiveDataDisclosureRules != nil {
		l = m.SensitiveDataDisclosureRules.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.SensitiveDataPolicyChoice != nil {
		n += m.SensitiveDataPolicyChoice.Size()
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.State != 0 {
		n += 2 + sovTypes(uint64(m.State))
	}
	if m.AutoCertInfo != nil {
		l = m.AutoCertInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.InternetVipInfo) > 0 {
		for _, e := range m.InternetVipInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType_Http) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Https) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableWaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_UserIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HttpsAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RoundRobin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundRobin != nil {
		l = m.RoundRobin.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LeastActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeastActive != nil {
		l = m.LeastActive.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Random) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Random != nil {
		l = m.Random.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SourceIpStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceIpStickiness != nil {
		l = m.SourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CookieStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CookieStickiness != nil {
		l = m.CookieStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RingHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RingHash != nil {
		l = m.RingHash.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AppFirewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewall != nil {
		l = m.AppFirewall.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SingleLbApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SingleLbApp != nil {
		l = m.SingleLbApp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_MultiLbApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultiLbApp != nil {
		l = m.MultiLbApp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableBotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableBotDefense != nil {
		l = m.DisableBotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefense != nil {
		l = m.BotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_UserIdClientIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdClientIp != nil {
		l = m.UserIdClientIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ApiDefinitions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinitions != nil {
		l = m.ApiDefinitions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableIpReputation != nil {
		l = m.DisableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableIpReputation != nil {
		l = m.EnableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ApiSpecification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecification != nil {
		l = m.ApiSpecification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDefinition != nil {
		l = m.DisableApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableTrustClientIpHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableTrustClientIpHeaders != nil {
		l = m.DisableTrustClientIpHeaders.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableTrustClientIpHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableTrustClientIpHeaders != nil {
		l = m.EnableTrustClientIpHeaders.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableMaliciousUserDetection != nil {
		l = m.EnableMaliciousUserDetection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableMaliciousUserDetection != nil {
		l = m.DisableMaliciousUserDetection.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableApiDiscovery != nil {
		l = m.EnableApiDiscovery.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDiscovery != nil {
		l = m.DisableApiDiscovery.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableClientSideDefense != nil {
		l = m.DisableClientSideDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ClientSideDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientSideDefense != nil {
		l = m.ClientSideDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultPool != nil {
		l = m.DefaultPool.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultPoolList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultPoolList != nil {
		l = m.DefaultPoolList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SlowDdosMitigation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlowDdosMitigation != nil {
		l = m.SlowDdosMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableChallenge != nil {
		l = m.EnableChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SystemDefaultTimeouts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemDefaultTimeouts != nil {
		l = m.SystemDefaultTimeouts.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableThreatMesh != nil {
		l = m.DisableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableThreatMesh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableThreatMesh != nil {
		l = m.EnableThreatMesh.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_L7DdosActionDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionDefault != nil {
		l = m.L7DdosActionDefault.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_L7DdosActionBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionBlock != nil {
		l = m.L7DdosActionBlock.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_L7DdosActionJsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionJsChallenge != nil {
		l = m.L7DdosActionJsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_L7DdosActionNone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L7DdosActionNone != nil {
		l = m.L7DdosActionNone.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ApiRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiRateLimit != nil {
		l = m.ApiRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultSensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSensitiveDataPolicy != nil {
		l = m.DefaultSensitiveDataPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensitiveDataPolicy != nil {
		l = m.SensitiveDataPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BotDefenseAdvanced) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefenseAdvanced != nil {
		l = m.BotDefenseAdvanced.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ProxyTypeHttps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps{`,
		`HttpRedirect:` + fmt.Sprintf("%v", this.HttpRedirect) + `,`,
		`AddHsts:` + fmt.Sprintf("%v", this.AddHsts) + `,`,
		`TlsCertificatesChoice:` + fmt.Sprintf("%v", this.TlsCertificatesChoice) + `,`,
		`ServerHeaderChoice:` + fmt.Sprintf("%v", this.ServerHeaderChoice) + `,`,
		`PathNormalizeChoice:` + fmt.Sprintf("%v", this.PathNormalizeChoice) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`DefaultLbChoice:` + fmt.Sprintf("%v", this.DefaultLbChoice) + `,`,
		`HeaderTransformationType:` + strings.Replace(fmt.Sprintf("%v", this.HeaderTransformationType), "HeaderTransformationType", "schema.HeaderTransformationType", 1) + `,`,
		`ConnectionIdleTimeout:` + fmt.Sprintf("%v", this.ConnectionIdleTimeout) + `,`,
		`HttpProtocolOptions:` + strings.Replace(fmt.Sprintf("%v", this.HttpProtocolOptions), "HttpProtocolOptions", "virtual_host.HttpProtocolOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_TlsParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_TlsParameters{`,
		`TlsParameters:` + strings.Replace(fmt.Sprintf("%v", this.TlsParameters), "DownstreamTlsParamsType", "views.DownstreamTlsParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_DefaultHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_DefaultHeader{`,
		`DefaultHeader:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHeader), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_ServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_ServerName{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_AppendServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_AppendServerName{`,
		`AppendServerName:` + fmt.Sprintf("%v", this.AppendServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_PassThrough) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_PassThrough{`,
		`PassThrough:` + strings.Replace(fmt.Sprintf("%v", this.PassThrough), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_EnablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_EnablePathNormalize{`,
		`EnablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.EnablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_DisablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_DisablePathNormalize{`,
		`DisablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.DisablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_Port) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_Port{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_NonDefaultLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_NonDefaultLoadbalancer{`,
		`NonDefaultLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.NonDefaultLoadbalancer), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_DefaultLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_DefaultLoadbalancer{`,
		`DefaultLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.DefaultLoadbalancer), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_TlsCertParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_TlsCertParams{`,
		`TlsCertParams:` + strings.Replace(fmt.Sprintf("%v", this.TlsCertParams), "DownstreamTLSCertsParams", "views.DownstreamTLSCertsParams", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_PortRanges) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_PortRanges{`,
		`PortRanges:` + fmt.Sprintf("%v", this.PortRanges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttp{`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttp_Port) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttp_Port{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttp_PortRanges) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttp_PortRanges{`,
		`PortRanges:` + fmt.Sprintf("%v", this.PortRanges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts{`,
		`HttpRedirect:` + fmt.Sprintf("%v", this.HttpRedirect) + `,`,
		`AddHsts:` + fmt.Sprintf("%v", this.AddHsts) + `,`,
		`TlsConfig:` + strings.Replace(fmt.Sprintf("%v", this.TlsConfig), "TlsConfig", "views.TlsConfig", 1) + `,`,
		`MtlsChoice:` + fmt.Sprintf("%v", this.MtlsChoice) + `,`,
		`ServerHeaderChoice:` + fmt.Sprintf("%v", this.ServerHeaderChoice) + `,`,
		`PathNormalizeChoice:` + fmt.Sprintf("%v", this.PathNormalizeChoice) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`DefaultLbChoice:` + fmt.Sprintf("%v", this.DefaultLbChoice) + `,`,
		`HeaderTransformationType:` + strings.Replace(fmt.Sprintf("%v", this.HeaderTransformationType), "HeaderTransformationType", "schema.HeaderTransformationType", 1) + `,`,
		`ConnectionIdleTimeout:` + fmt.Sprintf("%v", this.ConnectionIdleTimeout) + `,`,
		`HttpProtocolOptions:` + strings.Replace(fmt.Sprintf("%v", this.HttpProtocolOptions), "HttpProtocolOptions", "virtual_host.HttpProtocolOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_NoMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_NoMtls{`,
		`NoMtls:` + strings.Replace(fmt.Sprintf("%v", this.NoMtls), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_UseMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_UseMtls{`,
		`UseMtls:` + strings.Replace(fmt.Sprintf("%v", this.UseMtls), "DownstreamTlsValidationContext", "views.DownstreamTlsValidationContext", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_DefaultHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_DefaultHeader{`,
		`DefaultHeader:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHeader), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_ServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_ServerName{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_AppendServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_AppendServerName{`,
		`AppendServerName:` + fmt.Sprintf("%v", this.AppendServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_PassThrough) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_PassThrough{`,
		`PassThrough:` + strings.Replace(fmt.Sprintf("%v", this.PassThrough), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_EnablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_EnablePathNormalize{`,
		`EnablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.EnablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_DisablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_DisablePathNormalize{`,
		`DisablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.DisablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_Port) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_Port{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer{`,
		`NonDefaultLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.NonDefaultLoadbalancer), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_DefaultLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_DefaultLoadbalancer{`,
		`DefaultLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.DefaultLoadbalancer), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_PortRanges) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_PortRanges{`,
		`PortRanges:` + fmt.Sprintf("%v", this.PortRanges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HashPolicyListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHashPolicy := "[]*HashPolicyType{"
	for _, f := range this.HashPolicy {
		repeatedStringForHashPolicy += strings.Replace(fmt.Sprintf("%v", f), "HashPolicyType", "route.HashPolicyType", 1) + ","
	}
	repeatedStringForHashPolicy += "}"
	s := strings.Join([]string{`&HashPolicyListType{`,
		`HashPolicy:` + repeatedStringForHashPolicy + `,`,
		`}`,
	}, "")
	return s
}
func (this *MirrorPolicyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MirrorPolicyType{`,
		`OriginPool:` + strings.Replace(fmt.Sprintf("%v", this.OriginPool), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Percent:` + strings.Replace(fmt.Sprintf("%v", this.Percent), "FractionalPercent", "schema.FractionalPercent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRequestHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.RequestHeadersToAdd {
		repeatedStringForRequestHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForRequestHeadersToAdd += "}"
	repeatedStringForResponseHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.ResponseHeadersToAdd {
		repeatedStringForResponseHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForResponseHeadersToAdd += "}"
	keysForEndpointSubsets := make([]string, 0, len(this.EndpointSubsets))
	for k, _ := range this.EndpointSubsets {
		keysForEndpointSubsets = append(keysForEndpointSubsets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEndpointSubsets)
	mapStringForEndpointSubsets := "map[string]string{"
	for _, k := range keysForEndpointSubsets {
		mapStringForEndpointSubsets += fmt.Sprintf("%v: %v,", k, this.EndpointSubsets[k])
	}
	mapStringForEndpointSubsets += "}"
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions{`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`EndpointSubsets:` + mapStringForEndpointSubsets + `,`,
		`RewriteChoice:` + fmt.Sprintf("%v", this.RewriteChoice) + `,`,
		`RequestHeadersToAdd:` + repeatedStringForRequestHeadersToAdd + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`ResponseHeadersToAdd:` + repeatedStringForResponseHeadersToAdd + `,`,
		`ResponseHeadersToRemove:` + fmt.Sprintf("%v", this.ResponseHeadersToRemove) + `,`,
		`DisableLocationAdd:` + fmt.Sprintf("%v", this.DisableLocationAdd) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`SpdyChoice:` + fmt.Sprintf("%v", this.SpdyChoice) + `,`,
		`WebsocketChoice:` + fmt.Sprintf("%v", this.WebsocketChoice) + `,`,
		`RetryPolicyChoice:` + fmt.Sprintf("%v", this.RetryPolicyChoice) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`BufferChoice:` + fmt.Sprintf("%v", this.BufferChoice) + `,`,
		`MirroringChoice:` + fmt.Sprintf("%v", this.MirroringChoice) + `,`,
		`ClusterRetractChoice:` + fmt.Sprintf("%v", this.ClusterRetractChoice) + `,`,
		`BotDefenseJavascriptInjectionChoice:` + fmt.Sprintf("%v", this.BotDefenseJavascriptInjectionChoice) + `,`,
		`CsrfPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CsrfPolicy), "CsrfPolicy", "schema.CsrfPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_CommonHashPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_CommonHashPolicy{`,
		`CommonHashPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CommonHashPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_SpecificHashPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_SpecificHashPolicy{`,
		`SpecificHashPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SpecificHashPolicy), "HashPolicyListType", "HashPolicyListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisablePrefixRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DisablePrefixRewrite{`,
		`DisablePrefixRewrite:` + strings.Replace(fmt.Sprintf("%v", this.DisablePrefixRewrite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_PrefixRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_PrefixRewrite{`,
		`PrefixRewrite:` + fmt.Sprintf("%v", this.PrefixRewrite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_InheritedWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_InheritedWaf{`,
		`InheritedWaf:` + strings.Replace(fmt.Sprintf("%v", this.InheritedWaf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableSpdy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DisableSpdy{`,
		`DisableSpdy:` + strings.Replace(fmt.Sprintf("%v", this.DisableSpdy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_EnableSpdy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_EnableSpdy{`,
		`EnableSpdy:` + strings.Replace(fmt.Sprintf("%v", this.EnableSpdy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableWebSocketConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DisableWebSocketConfig{`,
		`DisableWebSocketConfig:` + strings.Replace(fmt.Sprintf("%v", this.DisableWebSocketConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_WebSocketConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_WebSocketConfig{`,
		`WebSocketConfig:` + strings.Replace(fmt.Sprintf("%v", this.WebSocketConfig), "WebsocketConfigType", "route.WebsocketConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DefaultRetryPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DefaultRetryPolicy{`,
		`DefaultRetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultRetryPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_RetryPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_RetryPolicy{`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicyType", "schema.RetryPolicyType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_CommonBuffering) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_CommonBuffering{`,
		`CommonBuffering:` + strings.Replace(fmt.Sprintf("%v", this.CommonBuffering), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_BufferPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_BufferPolicy{`,
		`BufferPolicy:` + strings.Replace(fmt.Sprintf("%v", this.BufferPolicy), "BufferConfigType", "schema.BufferConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableMirroring) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DisableMirroring{`,
		`DisableMirroring:` + strings.Replace(fmt.Sprintf("%v", this.DisableMirroring), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_MirrorPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_MirrorPolicy{`,
		`MirrorPolicy:` + strings.Replace(fmt.Sprintf("%v", this.MirrorPolicy), "MirrorPolicyType", "MirrorPolicyType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_RetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_RetractCluster{`,
		`RetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.RetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DoNotRetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DoNotRetractCluster{`,
		`DoNotRetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.DoNotRetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection{`,
		`InheritedBotDefenseJavascriptInjection:` + strings.Replace(fmt.Sprintf("%v", this.InheritedBotDefenseJavascriptInjection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection{`,
		`BotDefenseJavascriptInjection:` + strings.Replace(fmt.Sprintf("%v", this.BotDefenseJavascriptInjection), "BotDefenseJavascriptInjectionType", "route.BotDefenseJavascriptInjectionType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_NoRetryPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_NoRetryPolicy{`,
		`NoRetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoRetryPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_RegexRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_RegexRewrite{`,
		`RegexRewrite:` + strings.Replace(fmt.Sprintf("%v", this.RegexRewrite), "RegexMatchRewrite", "schema.RegexMatchRewrite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_AppFirewall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_AppFirewall{`,
		`AppFirewall:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewall), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimpleWithDefaultOriginPool{`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`HostRewriteParams:` + fmt.Sprintf("%v", this.HostRewriteParams) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite{`,
		`AutoHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.AutoHostRewrite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimpleWithDefaultOriginPool_HostRewrite{`,
		`HostRewrite:` + fmt.Sprintf("%v", this.HostRewrite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite{`,
		`DisableHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.DisableHostRewrite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimple) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginPools := "[]*OriginPoolWithWeight{"
	for _, f := range this.OriginPools {
		repeatedStringForOriginPools += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForOriginPools += "}"
	repeatedStringForHeaders := "[]*HeaderMatcherType{"
	for _, f := range this.Headers {
		repeatedStringForHeaders += strings.Replace(fmt.Sprintf("%v", f), "HeaderMatcherType", "schema.HeaderMatcherType", 1) + ","
	}
	repeatedStringForHeaders += "}"
	s := strings.Join([]string{`&RouteTypeSimple{`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`OriginPools:` + repeatedStringForOriginPools + `,`,
		`HostRewriteParams:` + fmt.Sprintf("%v", this.HostRewriteParams) + `,`,
		`AdvancedOptions:` + strings.Replace(this.AdvancedOptions.String(), "RouteSimpleAdvancedOptions", "RouteSimpleAdvancedOptions", 1) + `,`,
		`Headers:` + repeatedStringForHeaders + `,`,
		`IncomingPort:` + strings.Replace(fmt.Sprintf("%v", this.IncomingPort), "PortMatcherType", "schema.PortMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimple_AutoHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimple_AutoHostRewrite{`,
		`AutoHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.AutoHostRewrite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimple_HostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimple_HostRewrite{`,
		`HostRewrite:` + fmt.Sprintf("%v", this.HostRewrite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimple_DisableHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimple_DisableHostRewrite{`,
		`DisableHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.DisableHostRewrite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeRedirect) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHeaders := "[]*HeaderMatcherType{"
	for _, f := range this.Headers {
		repeatedStringForHeaders += strings.Replace(fmt.Sprintf("%v", f), "HeaderMatcherType", "schema.HeaderMatcherType", 1) + ","
	}
	repeatedStringForHeaders += "}"
	s := strings.Join([]string{`&RouteTypeRedirect{`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`RouteRedirect:` + strings.Replace(fmt.Sprintf("%v", this.RouteRedirect), "RouteRedirect", "route.RouteRedirect", 1) + `,`,
		`Headers:` + repeatedStringForHeaders + `,`,
		`IncomingPort:` + strings.Replace(fmt.Sprintf("%v", this.IncomingPort), "PortMatcherType", "schema.PortMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeDirectResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHeaders := "[]*HeaderMatcherType{"
	for _, f := range this.Headers {
		repeatedStringForHeaders += strings.Replace(fmt.Sprintf("%v", f), "HeaderMatcherType", "schema.HeaderMatcherType", 1) + ","
	}
	repeatedStringForHeaders += "}"
	s := strings.Join([]string{`&RouteTypeDirectResponse{`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`RouteDirectResponse:` + strings.Replace(fmt.Sprintf("%v", this.RouteDirectResponse), "RouteDirectResponse", "route.RouteDirectResponse", 1) + `,`,
		`Headers:` + repeatedStringForHeaders + `,`,
		`IncomingPort:` + strings.Replace(fmt.Sprintf("%v", this.IncomingPort), "PortMatcherType", "schema.PortMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeCustomRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeCustomRoute{`,
		`RouteRef:` + strings.Replace(fmt.Sprintf("%v", this.RouteRef), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType_SimpleRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType_SimpleRoute{`,
		`SimpleRoute:` + strings.Replace(fmt.Sprintf("%v", this.SimpleRoute), "RouteTypeSimple", "RouteTypeSimple", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType_RedirectRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType_RedirectRoute{`,
		`RedirectRoute:` + strings.Replace(fmt.Sprintf("%v", this.RedirectRoute), "RouteTypeRedirect", "RouteTypeRedirect", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType_DirectResponseRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType_DirectResponseRoute{`,
		`DirectResponseRoute:` + strings.Replace(fmt.Sprintf("%v", this.DirectResponseRoute), "RouteTypeDirectResponse", "RouteTypeDirectResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType_CustomRouteObject) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType_CustomRouteObject{`,
		`CustomRouteObject:` + strings.Replace(fmt.Sprintf("%v", this.CustomRouteObject), "RouteTypeCustomRoute", "RouteTypeCustomRoute", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvancedOptionsType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRequestHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.RequestHeadersToAdd {
		repeatedStringForRequestHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForRequestHeadersToAdd += "}"
	repeatedStringForResponseHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.ResponseHeadersToAdd {
		repeatedStringForResponseHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForResponseHeadersToAdd += "}"
	repeatedStringForJwt := "[]*ObjectRefType{"
	for _, f := range this.Jwt {
		repeatedStringForJwt += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForJwt += "}"
	repeatedStringForCookiesToModify := "[]*CookieManipulationOptionType{"
	for _, f := range this.CookiesToModify {
		repeatedStringForCookiesToModify += strings.Replace(fmt.Sprintf("%v", f), "CookieManipulationOptionType", "schema.CookieManipulationOptionType", 1) + ","
	}
	repeatedStringForCookiesToModify += "}"
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%v: %v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	s := strings.Join([]string{`&AdvancedOptionsType{`,
		`RequestHeadersToAdd:` + repeatedStringForRequestHeadersToAdd + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`ResponseHeadersToAdd:` + repeatedStringForResponseHeadersToAdd + `,`,
		`ResponseHeadersToRemove:` + fmt.Sprintf("%v", this.ResponseHeadersToRemove) + `,`,
		`MaxRequestHeaderSize:` + fmt.Sprintf("%v", this.MaxRequestHeaderSize) + `,`,
		`BufferPolicy:` + strings.Replace(fmt.Sprintf("%v", this.BufferPolicy), "BufferConfigType", "schema.BufferConfigType", 1) + `,`,
		`CompressionParams:` + strings.Replace(fmt.Sprintf("%v", this.CompressionParams), "CompressionType", "virtual_host.CompressionType", 1) + `,`,
		`CustomErrors:` + mapStringForCustomErrors + `,`,
		`JavascriptInfo:` + strings.Replace(fmt.Sprintf("%v", this.JavascriptInfo), "JavaScriptConfigType", "virtual_host.JavaScriptConfigType", 1) + `,`,
		`Jwt:` + repeatedStringForJwt + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`DisableDefaultErrorPages:` + fmt.Sprintf("%v", this.DisableDefaultErrorPages) + `,`,
		`PathNormalizeChoice:` + fmt.Sprintf("%v", this.PathNormalizeChoice) + `,`,
		`StrictSniHostHeaderCheckChoice:` + fmt.Sprintf("%v", this.StrictSniHostHeaderCheckChoice) + `,`,
		`CookiesToModify:` + repeatedStringForCookiesToModify + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvancedOptionsType_EnablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvancedOptionsType_EnablePathNormalize{`,
		`EnablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.EnablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvancedOptionsType_DisablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvancedOptionsType_DisablePathNormalize{`,
		`DisablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.DisablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvancedOptionsType_EnableStrictSniHostHeaderCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvancedOptionsType_EnableStrictSniHostHeaderCheck{`,
		`EnableStrictSniHostHeaderCheck:` + strings.Replace(fmt.Sprintf("%v", this.EnableStrictSniHostHeaderCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvancedOptionsType_AdditionalDomains) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvancedOptionsType_AdditionalDomains{`,
		`AdditionalDomains:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalDomains), "DomainNameList", "schema.DomainNameList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SingleLoadBalancerAppSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleLoadBalancerAppSetting{`,
		`ApiDiscoveryChoice:` + fmt.Sprintf("%v", this.ApiDiscoveryChoice) + `,`,
		`MaliciousUserDetectionChoice:` + fmt.Sprintf("%v", this.MaliciousUserDetectionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SingleLoadBalancerAppSetting_EnableDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleLoadBalancerAppSetting_EnableDiscovery{`,
		`EnableDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.EnableDiscovery), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SingleLoadBalancerAppSetting_DisableDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleLoadBalancerAppSetting_DisableDiscovery{`,
		`DisableDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.DisableDiscovery), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SingleLoadBalancerAppSetting_EnableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleLoadBalancerAppSetting_EnableMaliciousUserDetection{`,
		`EnableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.EnableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SingleLoadBalancerAppSetting_DisableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleLoadBalancerAppSetting_DisableMaliciousUserDetection{`,
		`DisableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.DisableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OriginServerSubsetRuleListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginServerSubsetRules := "[]*OriginServerSubsetRule{"
	for _, f := range this.OriginServerSubsetRules {
		repeatedStringForOriginServerSubsetRules += strings.Replace(fmt.Sprintf("%v", f), "OriginServerSubsetRule", "policy.OriginServerSubsetRule", 1) + ","
	}
	repeatedStringForOriginServerSubsetRules += "}"
	s := strings.Join([]string{`&OriginServerSubsetRuleListType{`,
		`OriginServerSubsetRules:` + repeatedStringForOriginServerSubsetRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDefaultRoutePools := "[]*OriginPoolWithWeight{"
	for _, f := range this.DefaultRoutePools {
		repeatedStringForDefaultRoutePools += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForDefaultRoutePools += "}"
	repeatedStringForRoutes := "[]*RouteType{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(f.String(), "RouteType", "RouteType", 1) + ","
	}
	repeatedStringForRoutes += "}"
	repeatedStringForWafExclusionRules := "[]*SimpleWafExclusionRule{"
	for _, f := range this.WafExclusionRules {
		repeatedStringForWafExclusionRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleWafExclusionRule", "policy.SimpleWafExclusionRule", 1) + ","
	}
	repeatedStringForWafExclusionRules += "}"
	repeatedStringForBlockedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.BlockedClients {
		repeatedStringForBlockedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForBlockedClients += "}"
	repeatedStringForTrustedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.TrustedClients {
		repeatedStringForTrustedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForTrustedClients += "}"
	repeatedStringForDdosMitigationRules := "[]*DDoSMitigationRule{"
	for _, f := range this.DdosMitigationRules {
		repeatedStringForDdosMitigationRules += strings.Replace(fmt.Sprintf("%v", f), "DDoSMitigationRule", "common_security.DDoSMitigationRule", 1) + ","
	}
	repeatedStringForDdosMitigationRules += "}"
	repeatedStringForDownstreamTlsCertificateExpirationTimestamps := "[]*Timestamp{"
	for _, f := range this.DownstreamTlsCertificateExpirationTimestamps {
		repeatedStringForDownstreamTlsCertificateExpirationTimestamps += strings.Replace(fmt.Sprintf("%v", f), "Timestamp", "types.Timestamp", 1) + ","
	}
	repeatedStringForDownstreamTlsCertificateExpirationTimestamps += "}"
	repeatedStringForDataGuardRules := "[]*SimpleDataGuardRule{"
	for _, f := range this.DataGuardRules {
		repeatedStringForDataGuardRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleDataGuardRule", "policy.SimpleDataGuardRule", 1) + ","
	}
	repeatedStringForDataGuardRules += "}"
	repeatedStringForGraphqlRules := "[]*GraphQLRule{"
	for _, f := range this.GraphqlRules {
		repeatedStringForGraphqlRules += strings.Replace(fmt.Sprintf("%v", f), "GraphQLRule", "policy.GraphQLRule", 1) + ","
	}
	repeatedStringForGraphqlRules += "}"
	repeatedStringForProtectedCookies := "[]*CookieManipulationOptionType{"
	for _, f := range this.ProtectedCookies {
		repeatedStringForProtectedCookies += strings.Replace(fmt.Sprintf("%v", f), "CookieManipulationOptionType", "schema.CookieManipulationOptionType", 1) + ","
	}
	repeatedStringForProtectedCookies += "}"
	repeatedStringForDnsInfo := "[]*DnsInfo{"
	for _, f := range this.DnsInfo {
		repeatedStringForDnsInfo += strings.Replace(fmt.Sprintf("%v", f), "DnsInfo", "virtual_host_dns_info.DnsInfo", 1) + ","
	}
	repeatedStringForDnsInfo += "}"
	repeatedStringForInternetVipInfo := "[]*InternetVIPInfo{"
	for _, f := range this.InternetVipInfo {
		repeatedStringForInternetVipInfo += strings.Replace(fmt.Sprintf("%v", f), "InternetVIPInfo", "views.InternetVIPInfo", 1) + ","
	}
	repeatedStringForInternetVipInfo += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`DefaultRoutePools:` + repeatedStringForDefaultRoutePools + `,`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`MoreOption:` + strings.Replace(this.MoreOption.String(), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`UserIdChoice:` + fmt.Sprintf("%v", this.UserIdChoice) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`HostRewriteParams:` + fmt.Sprintf("%v", this.HostRewriteParams) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`WafExclusionRules:` + repeatedStringForWafExclusionRules + `,`,
		`BlockedClients:` + repeatedStringForBlockedClients + `,`,
		`TrustedClients:` + repeatedStringForTrustedClients + `,`,
		`DdosMitigationRules:` + repeatedStringForDdosMitigationRules + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`MlConfigChoice:` + fmt.Sprintf("%v", this.MlConfigChoice) + `,`,
		`BotDefenseChoice:` + fmt.Sprintf("%v", this.BotDefenseChoice) + `,`,
		`ApiDefinitionChoice:` + fmt.Sprintf("%v", this.ApiDefinitionChoice) + `,`,
		`DownstreamTlsCertificateExpirationTimestamps:` + repeatedStringForDownstreamTlsCertificateExpirationTimestamps + `,`,
		`DataGuardRules:` + repeatedStringForDataGuardRules + `,`,
		`IpReputationChoice:` + fmt.Sprintf("%v", this.IpReputationChoice) + `,`,
		`ApiRateLimitLegacy:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimitLegacy), "APIRateLimitLegacy", "common_waf.APIRateLimitLegacy", 1) + `,`,
		`ApiProtectionRules:` + strings.Replace(fmt.Sprintf("%v", this.ApiProtectionRules), "APIProtectionRules", "common_waf.APIProtectionRules", 1) + `,`,
		`TrustClientIpHeadersChoice:` + fmt.Sprintf("%v", this.TrustClientIpHeadersChoice) + `,`,
		`MaliciousUserDetectionChoice:` + fmt.Sprintf("%v", this.MaliciousUserDetectionChoice) + `,`,
		`ApiDiscoveryChoice:` + fmt.Sprintf("%v", this.ApiDiscoveryChoice) + `,`,
		`ClientSideDefenseChoice:` + fmt.Sprintf("%v", this.ClientSideDefenseChoice) + `,`,
		`OriginPoolChoice:` + fmt.Sprintf("%v", this.OriginPoolChoice) + `,`,
		`CsrfPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CsrfPolicy), "CsrfPolicy", "schema.CsrfPolicy", 1) + `,`,
		`GraphqlRules:` + repeatedStringForGraphqlRules + `,`,
		`ProtectedCookies:` + repeatedStringForProtectedCookies + `,`,
		`SlowDdosMitigationChoice:` + fmt.Sprintf("%v", this.SlowDdosMitigationChoice) + `,`,
		`JwtValidation:` + strings.Replace(fmt.Sprintf("%v", this.JwtValidation), "JWTValidation", "common_waf.JWTValidation", 1) + `,`,
		`OriginServerSubsetRuleList:` + strings.Replace(this.OriginServerSubsetRuleList.String(), "OriginServerSubsetRuleListType", "OriginServerSubsetRuleListType", 1) + `,`,
		`ThreatMeshChoice:` + fmt.Sprintf("%v", this.ThreatMeshChoice) + `,`,
		`L7DdosAutoMitigationAction:` + fmt.Sprintf("%v", this.L7DdosAutoMitigationAction) + `,`,
		`CertState:` + fmt.Sprintf("%v", this.CertState) + `,`,
		`SensitiveDataDisclosureRules:` + strings.Replace(this.SensitiveDataDisclosureRules.String(), "SensitiveDataDisclosureRules", "SensitiveDataDisclosureRules", 1) + `,`,
		`SensitiveDataPolicyChoice:` + fmt.Sprintf("%v", this.SensitiveDataPolicyChoice) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + repeatedStringForDnsInfo + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`AutoCertState:` + fmt.Sprintf("%v", this.AutoCertState) + `,`,
		`AutoCertInfo:` + strings.Replace(fmt.Sprintf("%v", this.AutoCertInfo), "AutoCertInfoType", "virtual_host.AutoCertInfoType", 1) + `,`,
		`InternetVipInfo:` + repeatedStringForInternetVipInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UserIdentification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UserIdentification{`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "common_waf.RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "ProxyTypeHttpsAutoCerts", "ProxyTypeHttpsAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AutoHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AutoHostRewrite{`,
		`AutoHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.AutoHostRewrite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HostRewrite{`,
		`HostRewrite:` + fmt.Sprintf("%v", this.HostRewrite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableHostRewrite{`,
		`DisableHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.DisableHostRewrite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "common_waf.ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RoundRobin{`,
		`RoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.RoundRobin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LeastActive{`,
		`LeastActive:` + strings.Replace(fmt.Sprintf("%v", this.LeastActive), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Random) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Random{`,
		`Random:` + strings.Replace(fmt.Sprintf("%v", this.Random), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SourceIpStickiness{`,
		`SourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.SourceIpStickiness), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CookieStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CookieStickiness{`,
		`CookieStickiness:` + strings.Replace(fmt.Sprintf("%v", this.CookieStickiness), "CookieForHashing", "route.CookieForHashing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RingHash) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RingHash{`,
		`RingHash:` + strings.Replace(fmt.Sprintf("%v", this.RingHash), "HashPolicyListType", "HashPolicyListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "common_waf.PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AppFirewall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AppFirewall{`,
		`AppFirewall:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewall), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SingleLbApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SingleLbApp{`,
		`SingleLbApp:` + strings.Replace(fmt.Sprintf("%v", this.SingleLbApp), "SingleLoadBalancerAppSetting", "SingleLoadBalancerAppSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_MultiLbApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_MultiLbApp{`,
		`MultiLbApp:` + strings.Replace(fmt.Sprintf("%v", this.MultiLbApp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableBotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableBotDefense{`,
		`DisableBotDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableBotDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BotDefense{`,
		`BotDefense:` + strings.Replace(fmt.Sprintf("%v", this.BotDefense), "ShapeBotDefenseType", "common_security.ShapeBotDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UserIdClientIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UserIdClientIp{`,
		`UserIdClientIp:` + strings.Replace(fmt.Sprintf("%v", this.UserIdClientIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ApiDefinitions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ApiDefinitions{`,
		`ApiDefinitions:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinitions), "ApiDefinitionList", "common_waf.ApiDefinitionList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableIpReputation{`,
		`DisableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.DisableIpReputation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableIpReputation{`,
		`EnableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.EnableIpReputation), "IPThreatCategoryListType", "common_waf.IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ApiSpecification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ApiSpecification{`,
		`ApiSpecification:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecification), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableApiDefinition{`,
		`DisableApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDefinition), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ApiDefinition{`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableTrustClientIpHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableTrustClientIpHeaders{`,
		`DisableTrustClientIpHeaders:` + strings.Replace(fmt.Sprintf("%v", this.DisableTrustClientIpHeaders), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableTrustClientIpHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableTrustClientIpHeaders{`,
		`EnableTrustClientIpHeaders:` + strings.Replace(fmt.Sprintf("%v", this.EnableTrustClientIpHeaders), "ClientIPHeaders", "virtual_host.ClientIPHeaders", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableMaliciousUserDetection{`,
		`EnableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.EnableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableMaliciousUserDetection{`,
		`DisableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.DisableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableApiDiscovery{`,
		`EnableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.EnableApiDiscovery), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableApiDiscovery{`,
		`DisableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDiscovery), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableClientSideDefense{`,
		`DisableClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableClientSideDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ClientSideDefense{`,
		`ClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.ClientSideDefense), "ClientSideDefenseType", "common_security.ClientSideDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultPool{`,
		`DefaultPool:` + strings.Replace(fmt.Sprintf("%v", this.DefaultPool), "GlobalSpecType", "origin_pool.GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultPoolList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultPoolList{`,
		`DefaultPoolList:` + strings.Replace(fmt.Sprintf("%v", this.DefaultPoolList), "OriginPoolListType", "views.OriginPoolListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SlowDdosMitigation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SlowDdosMitigation{`,
		`SlowDdosMitigation:` + strings.Replace(fmt.Sprintf("%v", this.SlowDdosMitigation), "SlowDDoSMitigation", "virtual_host.SlowDDoSMitigation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableChallenge{`,
		`EnableChallenge:` + strings.Replace(fmt.Sprintf("%v", this.EnableChallenge), "EnableChallenge", "common_waf.EnableChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SystemDefaultTimeouts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SystemDefaultTimeouts{`,
		`SystemDefaultTimeouts:` + strings.Replace(fmt.Sprintf("%v", this.SystemDefaultTimeouts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableThreatMesh{`,
		`DisableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.DisableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableThreatMesh{`,
		`EnableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.EnableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_L7DdosActionDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_L7DdosActionDefault{`,
		`L7DdosActionDefault:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionDefault), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_L7DdosActionBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_L7DdosActionBlock{`,
		`L7DdosActionBlock:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionBlock), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_L7DdosActionJsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_L7DdosActionJsChallenge{`,
		`L7DdosActionJsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionJsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_L7DdosActionNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_L7DdosActionNone{`,
		`L7DdosActionNone:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ApiRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ApiRateLimit{`,
		`ApiRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimit), "APIRateLimit", "common_waf.APIRateLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultSensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultSensitiveDataPolicy{`,
		`DefaultSensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSensitiveDataPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SensitiveDataPolicy{`,
		`SensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SensitiveDataPolicy), "SensitiveDataPolicySettings", "common_security.SensitiveDataPolicySettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BotDefenseAdvanced) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BotDefenseAdvanced{`,
		`BotDefenseAdvanced:` + strings.Replace(fmt.Sprintf("%v", this.BotDefenseAdvanced), "BotDefenseAdvancedType", "common_security.BotDefenseAdvancedType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SensitiveDataDisclosureRules) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSensitiveDataTypesInResponse := "[]*SensitiveDataTypes{"
	for _, f := range this.SensitiveDataTypesInResponse {
		repeatedStringForSensitiveDataTypesInResponse += strings.Replace(f.String(), "SensitiveDataTypes", "SensitiveDataTypes", 1) + ","
	}
	repeatedStringForSensitiveDataTypesInResponse += "}"
	s := strings.Join([]string{`&SensitiveDataDisclosureRules{`,
		`SensitiveDataTypesInResponse:` + repeatedStringForSensitiveDataTypesInResponse + `,`,
		`}`,
	}, "")
	return s
}
func (this *SensitiveDataTypes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SensitiveDataTypes{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`MaskingModeChoice:` + fmt.Sprintf("%v", this.MaskingModeChoice) + `,`,
		`TypeConditionTypeChoice:` + fmt.Sprintf("%v", this.TypeConditionTypeChoice) + `,`,
		`Body:` + strings.Replace(this.Body.String(), "BodySectionMaskingOptions", "BodySectionMaskingOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SensitiveDataTypes_Mask) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SensitiveDataTypes_Mask{`,
		`Mask:` + strings.Replace(fmt.Sprintf("%v", this.Mask), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SensitiveDataTypes_Report) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SensitiveDataTypes_Report{`,
		`Report:` + strings.Replace(fmt.Sprintf("%v", this.Report), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SensitiveDataTypes_ApiEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SensitiveDataTypes_ApiEndpoint{`,
		`ApiEndpoint:` + strings.Replace(fmt.Sprintf("%v", this.ApiEndpoint), "ApiEndpointDetails", "common_waf.ApiEndpointDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SensitiveDataTypes_BasePath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SensitiveDataTypes_BasePath{`,
		`BasePath:` + fmt.Sprintf("%v", this.BasePath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SensitiveDataTypes_ApiGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SensitiveDataTypes_ApiGroup{`,
		`ApiGroup:` + fmt.Sprintf("%v", this.ApiGroup) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BodySectionMaskingOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BodySectionMaskingOptions{`,
		`Fields:` + fmt.Sprintf("%v", this.Fields) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDefaultRoutePools := "[]*OriginPoolWithWeight{"
	for _, f := range this.DefaultRoutePools {
		repeatedStringForDefaultRoutePools += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForDefaultRoutePools += "}"
	repeatedStringForRoutes := "[]*RouteType{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(f.String(), "RouteType", "RouteType", 1) + ","
	}
	repeatedStringForRoutes += "}"
	repeatedStringForWafExclusionRules := "[]*SimpleWafExclusionRule{"
	for _, f := range this.WafExclusionRules {
		repeatedStringForWafExclusionRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleWafExclusionRule", "policy.SimpleWafExclusionRule", 1) + ","
	}
	repeatedStringForWafExclusionRules += "}"
	repeatedStringForBlockedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.BlockedClients {
		repeatedStringForBlockedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForBlockedClients += "}"
	repeatedStringForTrustedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.TrustedClients {
		repeatedStringForTrustedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForTrustedClients += "}"
	repeatedStringForDdosMitigationRules := "[]*DDoSMitigationRule{"
	for _, f := range this.DdosMitigationRules {
		repeatedStringForDdosMitigationRules += strings.Replace(fmt.Sprintf("%v", f), "DDoSMitigationRule", "common_security.DDoSMitigationRule", 1) + ","
	}
	repeatedStringForDdosMitigationRules += "}"
	repeatedStringForDataGuardRules := "[]*SimpleDataGuardRule{"
	for _, f := range this.DataGuardRules {
		repeatedStringForDataGuardRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleDataGuardRule", "policy.SimpleDataGuardRule", 1) + ","
	}
	repeatedStringForDataGuardRules += "}"
	repeatedStringForGraphqlRules := "[]*GraphQLRule{"
	for _, f := range this.GraphqlRules {
		repeatedStringForGraphqlRules += strings.Replace(fmt.Sprintf("%v", f), "GraphQLRule", "policy.GraphQLRule", 1) + ","
	}
	repeatedStringForGraphqlRules += "}"
	repeatedStringForProtectedCookies := "[]*CookieManipulationOptionType{"
	for _, f := range this.ProtectedCookies {
		repeatedStringForProtectedCookies += strings.Replace(fmt.Sprintf("%v", f), "CookieManipulationOptionType", "schema.CookieManipulationOptionType", 1) + ","
	}
	repeatedStringForProtectedCookies += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`DefaultRoutePools:` + repeatedStringForDefaultRoutePools + `,`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`MoreOption:` + strings.Replace(this.MoreOption.String(), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`UserIdChoice:` + fmt.Sprintf("%v", this.UserIdChoice) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`WafExclusionRules:` + repeatedStringForWafExclusionRules + `,`,
		`BlockedClients:` + repeatedStringForBlockedClients + `,`,
		`TrustedClients:` + repeatedStringForTrustedClients + `,`,
		`DdosMitigationRules:` + repeatedStringForDdosMitigationRules + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`MlConfigChoice:` + fmt.Sprintf("%v", this.MlConfigChoice) + `,`,
		`BotDefenseChoice:` + fmt.Sprintf("%v", this.BotDefenseChoice) + `,`,
		`ApiDefinitionChoice:` + fmt.Sprintf("%v", this.ApiDefinitionChoice) + `,`,
		`DataGuardRules:` + repeatedStringForDataGuardRules + `,`,
		`IpReputationChoice:` + fmt.Sprintf("%v", this.IpReputationChoice) + `,`,
		`ApiRateLimitLegacy:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimitLegacy), "APIRateLimitLegacy", "common_waf.APIRateLimitLegacy", 1) + `,`,
		`ApiProtectionRules:` + strings.Replace(fmt.Sprintf("%v", this.ApiProtectionRules), "APIProtectionRules", "common_waf.APIProtectionRules", 1) + `,`,
		`TrustClientIpHeadersChoice:` + fmt.Sprintf("%v", this.TrustClientIpHeadersChoice) + `,`,
		`MaliciousUserDetectionChoice:` + fmt.Sprintf("%v", this.MaliciousUserDetectionChoice) + `,`,
		`ApiDiscoveryChoice:` + fmt.Sprintf("%v", this.ApiDiscoveryChoice) + `,`,
		`ClientSideDefenseChoice:` + fmt.Sprintf("%v", this.ClientSideDefenseChoice) + `,`,
		`OriginPoolChoice:` + fmt.Sprintf("%v", this.OriginPoolChoice) + `,`,
		`CsrfPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CsrfPolicy), "CsrfPolicy", "schema.CsrfPolicy", 1) + `,`,
		`GraphqlRules:` + repeatedStringForGraphqlRules + `,`,
		`ProtectedCookies:` + repeatedStringForProtectedCookies + `,`,
		`SlowDdosMitigationChoice:` + fmt.Sprintf("%v", this.SlowDdosMitigationChoice) + `,`,
		`JwtValidation:` + strings.Replace(fmt.Sprintf("%v", this.JwtValidation), "JWTValidation", "common_waf.JWTValidation", 1) + `,`,
		`OriginServerSubsetRuleList:` + strings.Replace(this.OriginServerSubsetRuleList.String(), "OriginServerSubsetRuleListType", "OriginServerSubsetRuleListType", 1) + `,`,
		`ThreatMeshChoice:` + fmt.Sprintf("%v", this.ThreatMeshChoice) + `,`,
		`L7DdosAutoMitigationAction:` + fmt.Sprintf("%v", this.L7DdosAutoMitigationAction) + `,`,
		`SensitiveDataDisclosureRules:` + strings.Replace(this.SensitiveDataDisclosureRules.String(), "SensitiveDataDisclosureRules", "SensitiveDataDisclosureRules", 1) + `,`,
		`SensitiveDataPolicyChoice:` + fmt.Sprintf("%v", this.SensitiveDataPolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_UserIdentification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_UserIdentification{`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "common_waf.RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "ProxyTypeHttpsAutoCerts", "ProxyTypeHttpsAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "common_waf.ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RoundRobin{`,
		`RoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.RoundRobin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LeastActive{`,
		`LeastActive:` + strings.Replace(fmt.Sprintf("%v", this.LeastActive), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Random) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Random{`,
		`Random:` + strings.Replace(fmt.Sprintf("%v", this.Random), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SourceIpStickiness{`,
		`SourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.SourceIpStickiness), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CookieStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CookieStickiness{`,
		`CookieStickiness:` + strings.Replace(fmt.Sprintf("%v", this.CookieStickiness), "CookieForHashing", "route.CookieForHashing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RingHash) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RingHash{`,
		`RingHash:` + strings.Replace(fmt.Sprintf("%v", this.RingHash), "HashPolicyListType", "HashPolicyListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "common_waf.PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AppFirewall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AppFirewall{`,
		`AppFirewall:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewall), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SingleLbApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SingleLbApp{`,
		`SingleLbApp:` + strings.Replace(fmt.Sprintf("%v", this.SingleLbApp), "SingleLoadBalancerAppSetting", "SingleLoadBalancerAppSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_MultiLbApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_MultiLbApp{`,
		`MultiLbApp:` + strings.Replace(fmt.Sprintf("%v", this.MultiLbApp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableBotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableBotDefense{`,
		`DisableBotDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableBotDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BotDefense{`,
		`BotDefense:` + strings.Replace(fmt.Sprintf("%v", this.BotDefense), "ShapeBotDefenseType", "common_security.ShapeBotDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_UserIdClientIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_UserIdClientIp{`,
		`UserIdClientIp:` + strings.Replace(fmt.Sprintf("%v", this.UserIdClientIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ApiDefinitions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ApiDefinitions{`,
		`ApiDefinitions:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinitions), "ApiDefinitionList", "common_waf.ApiDefinitionList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableIpReputation{`,
		`DisableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.DisableIpReputation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableIpReputation{`,
		`EnableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.EnableIpReputation), "IPThreatCategoryListType", "common_waf.IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ApiSpecification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ApiSpecification{`,
		`ApiSpecification:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecification), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableApiDefinition{`,
		`DisableApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDefinition), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ApiDefinition{`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableTrustClientIpHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableTrustClientIpHeaders{`,
		`DisableTrustClientIpHeaders:` + strings.Replace(fmt.Sprintf("%v", this.DisableTrustClientIpHeaders), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableTrustClientIpHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableTrustClientIpHeaders{`,
		`EnableTrustClientIpHeaders:` + strings.Replace(fmt.Sprintf("%v", this.EnableTrustClientIpHeaders), "ClientIPHeaders", "virtual_host.ClientIPHeaders", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableMaliciousUserDetection{`,
		`EnableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.EnableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableMaliciousUserDetection{`,
		`DisableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.DisableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableApiDiscovery{`,
		`EnableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.EnableApiDiscovery), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableApiDiscovery{`,
		`DisableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDiscovery), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableClientSideDefense{`,
		`DisableClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableClientSideDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ClientSideDefense{`,
		`ClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.ClientSideDefense), "ClientSideDefenseType", "common_security.ClientSideDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultPool{`,
		`DefaultPool:` + strings.Replace(fmt.Sprintf("%v", this.DefaultPool), "GlobalSpecType", "origin_pool.GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultPoolList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultPoolList{`,
		`DefaultPoolList:` + strings.Replace(fmt.Sprintf("%v", this.DefaultPoolList), "OriginPoolListType", "views.OriginPoolListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SlowDdosMitigation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SlowDdosMitigation{`,
		`SlowDdosMitigation:` + strings.Replace(fmt.Sprintf("%v", this.SlowDdosMitigation), "SlowDDoSMitigation", "virtual_host.SlowDDoSMitigation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableChallenge{`,
		`EnableChallenge:` + strings.Replace(fmt.Sprintf("%v", this.EnableChallenge), "EnableChallenge", "common_waf.EnableChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SystemDefaultTimeouts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SystemDefaultTimeouts{`,
		`SystemDefaultTimeouts:` + strings.Replace(fmt.Sprintf("%v", this.SystemDefaultTimeouts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableThreatMesh{`,
		`DisableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.DisableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableThreatMesh{`,
		`EnableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.EnableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_L7DdosActionDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_L7DdosActionDefault{`,
		`L7DdosActionDefault:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionDefault), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_L7DdosActionBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_L7DdosActionBlock{`,
		`L7DdosActionBlock:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionBlock), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_L7DdosActionJsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_L7DdosActionJsChallenge{`,
		`L7DdosActionJsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionJsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_L7DdosActionNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_L7DdosActionNone{`,
		`L7DdosActionNone:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ApiRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ApiRateLimit{`,
		`ApiRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimit), "APIRateLimit", "common_waf.APIRateLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultSensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultSensitiveDataPolicy{`,
		`DefaultSensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSensitiveDataPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SensitiveDataPolicy{`,
		`SensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SensitiveDataPolicy), "SensitiveDataPolicySettings", "common_security.SensitiveDataPolicySettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BotDefenseAdvanced) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BotDefenseAdvanced{`,
		`BotDefenseAdvanced:` + strings.Replace(fmt.Sprintf("%v", this.BotDefenseAdvanced), "BotDefenseAdvancedType", "common_security.BotDefenseAdvancedType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDefaultRoutePools := "[]*OriginPoolWithWeight{"
	for _, f := range this.DefaultRoutePools {
		repeatedStringForDefaultRoutePools += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForDefaultRoutePools += "}"
	repeatedStringForRoutes := "[]*RouteType{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(f.String(), "RouteType", "RouteType", 1) + ","
	}
	repeatedStringForRoutes += "}"
	repeatedStringForWafExclusionRules := "[]*SimpleWafExclusionRule{"
	for _, f := range this.WafExclusionRules {
		repeatedStringForWafExclusionRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleWafExclusionRule", "policy.SimpleWafExclusionRule", 1) + ","
	}
	repeatedStringForWafExclusionRules += "}"
	repeatedStringForBlockedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.BlockedClients {
		repeatedStringForBlockedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForBlockedClients += "}"
	repeatedStringForTrustedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.TrustedClients {
		repeatedStringForTrustedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForTrustedClients += "}"
	repeatedStringForDdosMitigationRules := "[]*DDoSMitigationRule{"
	for _, f := range this.DdosMitigationRules {
		repeatedStringForDdosMitigationRules += strings.Replace(fmt.Sprintf("%v", f), "DDoSMitigationRule", "common_security.DDoSMitigationRule", 1) + ","
	}
	repeatedStringForDdosMitigationRules += "}"
	repeatedStringForDataGuardRules := "[]*SimpleDataGuardRule{"
	for _, f := range this.DataGuardRules {
		repeatedStringForDataGuardRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleDataGuardRule", "policy.SimpleDataGuardRule", 1) + ","
	}
	repeatedStringForDataGuardRules += "}"
	repeatedStringForGraphqlRules := "[]*GraphQLRule{"
	for _, f := range this.GraphqlRules {
		repeatedStringForGraphqlRules += strings.Replace(fmt.Sprintf("%v", f), "GraphQLRule", "policy.GraphQLRule", 1) + ","
	}
	repeatedStringForGraphqlRules += "}"
	repeatedStringForProtectedCookies := "[]*CookieManipulationOptionType{"
	for _, f := range this.ProtectedCookies {
		repeatedStringForProtectedCookies += strings.Replace(fmt.Sprintf("%v", f), "CookieManipulationOptionType", "schema.CookieManipulationOptionType", 1) + ","
	}
	repeatedStringForProtectedCookies += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`DefaultRoutePools:` + repeatedStringForDefaultRoutePools + `,`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`MoreOption:` + strings.Replace(this.MoreOption.String(), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`UserIdChoice:` + fmt.Sprintf("%v", this.UserIdChoice) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`WafExclusionRules:` + repeatedStringForWafExclusionRules + `,`,
		`BlockedClients:` + repeatedStringForBlockedClients + `,`,
		`TrustedClients:` + repeatedStringForTrustedClients + `,`,
		`DdosMitigationRules:` + repeatedStringForDdosMitigationRules + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`MlConfigChoice:` + fmt.Sprintf("%v", this.MlConfigChoice) + `,`,
		`BotDefenseChoice:` + fmt.Sprintf("%v", this.BotDefenseChoice) + `,`,
		`ApiDefinitionChoice:` + fmt.Sprintf("%v", this.ApiDefinitionChoice) + `,`,
		`DataGuardRules:` + repeatedStringForDataGuardRules + `,`,
		`IpReputationChoice:` + fmt.Sprintf("%v", this.IpReputationChoice) + `,`,
		`ApiRateLimitLegacy:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimitLegacy), "APIRateLimitLegacy", "common_waf.APIRateLimitLegacy", 1) + `,`,
		`ApiProtectionRules:` + strings.Replace(fmt.Sprintf("%v", this.ApiProtectionRules), "APIProtectionRules", "common_waf.APIProtectionRules", 1) + `,`,
		`TrustClientIpHeadersChoice:` + fmt.Sprintf("%v", this.TrustClientIpHeadersChoice) + `,`,
		`MaliciousUserDetectionChoice:` + fmt.Sprintf("%v", this.MaliciousUserDetectionChoice) + `,`,
		`ApiDiscoveryChoice:` + fmt.Sprintf("%v", this.ApiDiscoveryChoice) + `,`,
		`ClientSideDefenseChoice:` + fmt.Sprintf("%v", this.ClientSideDefenseChoice) + `,`,
		`OriginPoolChoice:` + fmt.Sprintf("%v", this.OriginPoolChoice) + `,`,
		`CsrfPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CsrfPolicy), "CsrfPolicy", "schema.CsrfPolicy", 1) + `,`,
		`GraphqlRules:` + repeatedStringForGraphqlRules + `,`,
		`ProtectedCookies:` + repeatedStringForProtectedCookies + `,`,
		`SlowDdosMitigationChoice:` + fmt.Sprintf("%v", this.SlowDdosMitigationChoice) + `,`,
		`JwtValidation:` + strings.Replace(fmt.Sprintf("%v", this.JwtValidation), "JWTValidation", "common_waf.JWTValidation", 1) + `,`,
		`OriginServerSubsetRuleList:` + strings.Replace(this.OriginServerSubsetRuleList.String(), "OriginServerSubsetRuleListType", "OriginServerSubsetRuleListType", 1) + `,`,
		`ThreatMeshChoice:` + fmt.Sprintf("%v", this.ThreatMeshChoice) + `,`,
		`L7DdosAutoMitigationAction:` + fmt.Sprintf("%v", this.L7DdosAutoMitigationAction) + `,`,
		`SensitiveDataDisclosureRules:` + strings.Replace(this.SensitiveDataDisclosureRules.String(), "SensitiveDataDisclosureRules", "SensitiveDataDisclosureRules", 1) + `,`,
		`SensitiveDataPolicyChoice:` + fmt.Sprintf("%v", this.SensitiveDataPolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_UserIdentification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_UserIdentification{`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "common_waf.RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "ProxyTypeHttpsAutoCerts", "ProxyTypeHttpsAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "common_waf.ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RoundRobin{`,
		`RoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.RoundRobin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LeastActive{`,
		`LeastActive:` + strings.Replace(fmt.Sprintf("%v", this.LeastActive), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Random) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Random{`,
		`Random:` + strings.Replace(fmt.Sprintf("%v", this.Random), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SourceIpStickiness{`,
		`SourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.SourceIpStickiness), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CookieStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CookieStickiness{`,
		`CookieStickiness:` + strings.Replace(fmt.Sprintf("%v", this.CookieStickiness), "CookieForHashing", "route.CookieForHashing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RingHash) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RingHash{`,
		`RingHash:` + strings.Replace(fmt.Sprintf("%v", this.RingHash), "HashPolicyListType", "HashPolicyListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "common_waf.PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AppFirewall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AppFirewall{`,
		`AppFirewall:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewall), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SingleLbApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SingleLbApp{`,
		`SingleLbApp:` + strings.Replace(fmt.Sprintf("%v", this.SingleLbApp), "SingleLoadBalancerAppSetting", "SingleLoadBalancerAppSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_MultiLbApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_MultiLbApp{`,
		`MultiLbApp:` + strings.Replace(fmt.Sprintf("%v", this.MultiLbApp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableBotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableBotDefense{`,
		`DisableBotDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableBotDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BotDefense{`,
		`BotDefense:` + strings.Replace(fmt.Sprintf("%v", this.BotDefense), "ShapeBotDefenseType", "common_security.ShapeBotDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_UserIdClientIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_UserIdClientIp{`,
		`UserIdClientIp:` + strings.Replace(fmt.Sprintf("%v", this.UserIdClientIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ApiDefinitions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ApiDefinitions{`,
		`ApiDefinitions:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinitions), "ApiDefinitionList", "common_waf.ApiDefinitionList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableIpReputation{`,
		`DisableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.DisableIpReputation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableIpReputation{`,
		`EnableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.EnableIpReputation), "IPThreatCategoryListType", "common_waf.IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ApiSpecification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ApiSpecification{`,
		`ApiSpecification:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecification), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableApiDefinition{`,
		`DisableApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDefinition), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ApiDefinition{`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableTrustClientIpHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableTrustClientIpHeaders{`,
		`DisableTrustClientIpHeaders:` + strings.Replace(fmt.Sprintf("%v", this.DisableTrustClientIpHeaders), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableTrustClientIpHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableTrustClientIpHeaders{`,
		`EnableTrustClientIpHeaders:` + strings.Replace(fmt.Sprintf("%v", this.EnableTrustClientIpHeaders), "ClientIPHeaders", "virtual_host.ClientIPHeaders", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableMaliciousUserDetection{`,
		`EnableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.EnableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableMaliciousUserDetection{`,
		`DisableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.DisableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableApiDiscovery{`,
		`EnableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.EnableApiDiscovery), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableApiDiscovery{`,
		`DisableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDiscovery), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableClientSideDefense{`,
		`DisableClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableClientSideDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ClientSideDefense{`,
		`ClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.ClientSideDefense), "ClientSideDefenseType", "common_security.ClientSideDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultPool{`,
		`DefaultPool:` + strings.Replace(fmt.Sprintf("%v", this.DefaultPool), "GlobalSpecType", "origin_pool.GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultPoolList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultPoolList{`,
		`DefaultPoolList:` + strings.Replace(fmt.Sprintf("%v", this.DefaultPoolList), "OriginPoolListType", "views.OriginPoolListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SlowDdosMitigation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SlowDdosMitigation{`,
		`SlowDdosMitigation:` + strings.Replace(fmt.Sprintf("%v", this.SlowDdosMitigation), "SlowDDoSMitigation", "virtual_host.SlowDDoSMitigation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableChallenge{`,
		`EnableChallenge:` + strings.Replace(fmt.Sprintf("%v", this.EnableChallenge), "EnableChallenge", "common_waf.EnableChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SystemDefaultTimeouts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SystemDefaultTimeouts{`,
		`SystemDefaultTimeouts:` + strings.Replace(fmt.Sprintf("%v", this.SystemDefaultTimeouts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableThreatMesh{`,
		`DisableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.DisableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableThreatMesh{`,
		`EnableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.EnableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_L7DdosActionDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_L7DdosActionDefault{`,
		`L7DdosActionDefault:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionDefault), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_L7DdosActionBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_L7DdosActionBlock{`,
		`L7DdosActionBlock:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionBlock), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_L7DdosActionJsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_L7DdosActionJsChallenge{`,
		`L7DdosActionJsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionJsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_L7DdosActionNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_L7DdosActionNone{`,
		`L7DdosActionNone:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ApiRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ApiRateLimit{`,
		`ApiRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimit), "APIRateLimit", "common_waf.APIRateLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultSensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultSensitiveDataPolicy{`,
		`DefaultSensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSensitiveDataPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SensitiveDataPolicy{`,
		`SensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SensitiveDataPolicy), "SensitiveDataPolicySettings", "common_security.SensitiveDataPolicySettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BotDefenseAdvanced) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BotDefenseAdvanced{`,
		`BotDefenseAdvanced:` + strings.Replace(fmt.Sprintf("%v", this.BotDefenseAdvanced), "BotDefenseAdvancedType", "common_security.BotDefenseAdvancedType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDefaultRoutePools := "[]*OriginPoolWithWeight{"
	for _, f := range this.DefaultRoutePools {
		repeatedStringForDefaultRoutePools += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForDefaultRoutePools += "}"
	repeatedStringForRoutes := "[]*RouteType{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(f.String(), "RouteType", "RouteType", 1) + ","
	}
	repeatedStringForRoutes += "}"
	repeatedStringForWafExclusionRules := "[]*SimpleWafExclusionRule{"
	for _, f := range this.WafExclusionRules {
		repeatedStringForWafExclusionRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleWafExclusionRule", "policy.SimpleWafExclusionRule", 1) + ","
	}
	repeatedStringForWafExclusionRules += "}"
	repeatedStringForBlockedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.BlockedClients {
		repeatedStringForBlockedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForBlockedClients += "}"
	repeatedStringForTrustedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.TrustedClients {
		repeatedStringForTrustedClients += strings.Replace(fmt.Sprintf("%v", f), "SimpleClientSrcRule", "common_waf.SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForTrustedClients += "}"
	repeatedStringForDdosMitigationRules := "[]*DDoSMitigationRule{"
	for _, f := range this.DdosMitigationRules {
		repeatedStringForDdosMitigationRules += strings.Replace(fmt.Sprintf("%v", f), "DDoSMitigationRule", "common_security.DDoSMitigationRule", 1) + ","
	}
	repeatedStringForDdosMitigationRules += "}"
	repeatedStringForDownstreamTlsCertificateExpirationTimestamps := "[]*Timestamp{"
	for _, f := range this.DownstreamTlsCertificateExpirationTimestamps {
		repeatedStringForDownstreamTlsCertificateExpirationTimestamps += strings.Replace(fmt.Sprintf("%v", f), "Timestamp", "types.Timestamp", 1) + ","
	}
	repeatedStringForDownstreamTlsCertificateExpirationTimestamps += "}"
	repeatedStringForDataGuardRules := "[]*SimpleDataGuardRule{"
	for _, f := range this.DataGuardRules {
		repeatedStringForDataGuardRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleDataGuardRule", "policy.SimpleDataGuardRule", 1) + ","
	}
	repeatedStringForDataGuardRules += "}"
	repeatedStringForGraphqlRules := "[]*GraphQLRule{"
	for _, f := range this.GraphqlRules {
		repeatedStringForGraphqlRules += strings.Replace(fmt.Sprintf("%v", f), "GraphQLRule", "policy.GraphQLRule", 1) + ","
	}
	repeatedStringForGraphqlRules += "}"
	repeatedStringForProtectedCookies := "[]*CookieManipulationOptionType{"
	for _, f := range this.ProtectedCookies {
		repeatedStringForProtectedCookies += strings.Replace(fmt.Sprintf("%v", f), "CookieManipulationOptionType", "schema.CookieManipulationOptionType", 1) + ","
	}
	repeatedStringForProtectedCookies += "}"
	repeatedStringForDnsInfo := "[]*DnsInfo{"
	for _, f := range this.DnsInfo {
		repeatedStringForDnsInfo += strings.Replace(fmt.Sprintf("%v", f), "DnsInfo", "virtual_host_dns_info.DnsInfo", 1) + ","
	}
	repeatedStringForDnsInfo += "}"
	repeatedStringForInternetVipInfo := "[]*InternetVIPInfo{"
	for _, f := range this.InternetVipInfo {
		repeatedStringForInternetVipInfo += strings.Replace(fmt.Sprintf("%v", f), "InternetVIPInfo", "views.InternetVIPInfo", 1) + ","
	}
	repeatedStringForInternetVipInfo += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`DefaultRoutePools:` + repeatedStringForDefaultRoutePools + `,`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`MoreOption:` + strings.Replace(this.MoreOption.String(), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`UserIdChoice:` + fmt.Sprintf("%v", this.UserIdChoice) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`WafExclusionRules:` + repeatedStringForWafExclusionRules + `,`,
		`BlockedClients:` + repeatedStringForBlockedClients + `,`,
		`TrustedClients:` + repeatedStringForTrustedClients + `,`,
		`DdosMitigationRules:` + repeatedStringForDdosMitigationRules + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`MlConfigChoice:` + fmt.Sprintf("%v", this.MlConfigChoice) + `,`,
		`BotDefenseChoice:` + fmt.Sprintf("%v", this.BotDefenseChoice) + `,`,
		`ApiDefinitionChoice:` + fmt.Sprintf("%v", this.ApiDefinitionChoice) + `,`,
		`DownstreamTlsCertificateExpirationTimestamps:` + repeatedStringForDownstreamTlsCertificateExpirationTimestamps + `,`,
		`DataGuardRules:` + repeatedStringForDataGuardRules + `,`,
		`IpReputationChoice:` + fmt.Sprintf("%v", this.IpReputationChoice) + `,`,
		`ApiRateLimitLegacy:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimitLegacy), "APIRateLimitLegacy", "common_waf.APIRateLimitLegacy", 1) + `,`,
		`ApiProtectionRules:` + strings.Replace(fmt.Sprintf("%v", this.ApiProtectionRules), "APIProtectionRules", "common_waf.APIProtectionRules", 1) + `,`,
		`TrustClientIpHeadersChoice:` + fmt.Sprintf("%v", this.TrustClientIpHeadersChoice) + `,`,
		`MaliciousUserDetectionChoice:` + fmt.Sprintf("%v", this.MaliciousUserDetectionChoice) + `,`,
		`ApiDiscoveryChoice:` + fmt.Sprintf("%v", this.ApiDiscoveryChoice) + `,`,
		`ClientSideDefenseChoice:` + fmt.Sprintf("%v", this.ClientSideDefenseChoice) + `,`,
		`OriginPoolChoice:` + fmt.Sprintf("%v", this.OriginPoolChoice) + `,`,
		`CsrfPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CsrfPolicy), "CsrfPolicy", "schema.CsrfPolicy", 1) + `,`,
		`GraphqlRules:` + repeatedStringForGraphqlRules + `,`,
		`ProtectedCookies:` + repeatedStringForProtectedCookies + `,`,
		`SlowDdosMitigationChoice:` + fmt.Sprintf("%v", this.SlowDdosMitigationChoice) + `,`,
		`JwtValidation:` + strings.Replace(fmt.Sprintf("%v", this.JwtValidation), "JWTValidation", "common_waf.JWTValidation", 1) + `,`,
		`OriginServerSubsetRuleList:` + strings.Replace(this.OriginServerSubsetRuleList.String(), "OriginServerSubsetRuleListType", "OriginServerSubsetRuleListType", 1) + `,`,
		`ThreatMeshChoice:` + fmt.Sprintf("%v", this.ThreatMeshChoice) + `,`,
		`L7DdosAutoMitigationAction:` + fmt.Sprintf("%v", this.L7DdosAutoMitigationAction) + `,`,
		`CertState:` + fmt.Sprintf("%v", this.CertState) + `,`,
		`SensitiveDataDisclosureRules:` + strings.Replace(this.SensitiveDataDisclosureRules.String(), "SensitiveDataDisclosureRules", "SensitiveDataDisclosureRules", 1) + `,`,
		`SensitiveDataPolicyChoice:` + fmt.Sprintf("%v", this.SensitiveDataPolicyChoice) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + repeatedStringForDnsInfo + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`AutoCertInfo:` + strings.Replace(fmt.Sprintf("%v", this.AutoCertInfo), "AutoCertInfoType", "virtual_host.AutoCertInfoType", 1) + `,`,
		`InternetVipInfo:` + repeatedStringForInternetVipInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UserIdentification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UserIdentification{`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "common_waf.RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "ProxyTypeHttpsAutoCerts", "ProxyTypeHttpsAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "common_waf.ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RoundRobin{`,
		`RoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.RoundRobin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LeastActive{`,
		`LeastActive:` + strings.Replace(fmt.Sprintf("%v", this.LeastActive), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Random) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Random{`,
		`Random:` + strings.Replace(fmt.Sprintf("%v", this.Random), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SourceIpStickiness{`,
		`SourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.SourceIpStickiness), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CookieStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CookieStickiness{`,
		`CookieStickiness:` + strings.Replace(fmt.Sprintf("%v", this.CookieStickiness), "CookieForHashing", "route.CookieForHashing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RingHash) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RingHash{`,
		`RingHash:` + strings.Replace(fmt.Sprintf("%v", this.RingHash), "HashPolicyListType", "HashPolicyListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "common_waf.PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AppFirewall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AppFirewall{`,
		`AppFirewall:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewall), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SingleLbApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SingleLbApp{`,
		`SingleLbApp:` + strings.Replace(fmt.Sprintf("%v", this.SingleLbApp), "SingleLoadBalancerAppSetting", "SingleLoadBalancerAppSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_MultiLbApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_MultiLbApp{`,
		`MultiLbApp:` + strings.Replace(fmt.Sprintf("%v", this.MultiLbApp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableBotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableBotDefense{`,
		`DisableBotDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableBotDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BotDefense{`,
		`BotDefense:` + strings.Replace(fmt.Sprintf("%v", this.BotDefense), "ShapeBotDefenseType", "common_security.ShapeBotDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UserIdClientIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UserIdClientIp{`,
		`UserIdClientIp:` + strings.Replace(fmt.Sprintf("%v", this.UserIdClientIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ApiDefinitions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ApiDefinitions{`,
		`ApiDefinitions:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinitions), "ApiDefinitionList", "common_waf.ApiDefinitionList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableIpReputation{`,
		`DisableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.DisableIpReputation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableIpReputation{`,
		`EnableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.EnableIpReputation), "IPThreatCategoryListType", "common_waf.IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ApiSpecification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ApiSpecification{`,
		`ApiSpecification:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecification), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableApiDefinition{`,
		`DisableApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDefinition), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ApiDefinition{`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableTrustClientIpHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableTrustClientIpHeaders{`,
		`DisableTrustClientIpHeaders:` + strings.Replace(fmt.Sprintf("%v", this.DisableTrustClientIpHeaders), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableTrustClientIpHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableTrustClientIpHeaders{`,
		`EnableTrustClientIpHeaders:` + strings.Replace(fmt.Sprintf("%v", this.EnableTrustClientIpHeaders), "ClientIPHeaders", "virtual_host.ClientIPHeaders", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableMaliciousUserDetection{`,
		`EnableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.EnableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableMaliciousUserDetection{`,
		`DisableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.DisableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableApiDiscovery{`,
		`EnableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.EnableApiDiscovery), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableApiDiscovery{`,
		`DisableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDiscovery), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableClientSideDefense{`,
		`DisableClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableClientSideDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ClientSideDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ClientSideDefense{`,
		`ClientSideDefense:` + strings.Replace(fmt.Sprintf("%v", this.ClientSideDefense), "ClientSideDefenseType", "common_security.ClientSideDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultPool{`,
		`DefaultPool:` + strings.Replace(fmt.Sprintf("%v", this.DefaultPool), "GlobalSpecType", "origin_pool.GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultPoolList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultPoolList{`,
		`DefaultPoolList:` + strings.Replace(fmt.Sprintf("%v", this.DefaultPoolList), "OriginPoolListType", "views.OriginPoolListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SlowDdosMitigation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SlowDdosMitigation{`,
		`SlowDdosMitigation:` + strings.Replace(fmt.Sprintf("%v", this.SlowDdosMitigation), "SlowDDoSMitigation", "virtual_host.SlowDDoSMitigation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableChallenge{`,
		`EnableChallenge:` + strings.Replace(fmt.Sprintf("%v", this.EnableChallenge), "EnableChallenge", "common_waf.EnableChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SystemDefaultTimeouts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SystemDefaultTimeouts{`,
		`SystemDefaultTimeouts:` + strings.Replace(fmt.Sprintf("%v", this.SystemDefaultTimeouts), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableThreatMesh{`,
		`DisableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.DisableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableThreatMesh) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableThreatMesh{`,
		`EnableThreatMesh:` + strings.Replace(fmt.Sprintf("%v", this.EnableThreatMesh), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_L7DdosActionDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_L7DdosActionDefault{`,
		`L7DdosActionDefault:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionDefault), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_L7DdosActionBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_L7DdosActionBlock{`,
		`L7DdosActionBlock:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionBlock), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_L7DdosActionJsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_L7DdosActionJsChallenge{`,
		`L7DdosActionJsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionJsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_L7DdosActionNone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_L7DdosActionNone{`,
		`L7DdosActionNone:` + strings.Replace(fmt.Sprintf("%v", this.L7DdosActionNone), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ApiRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ApiRateLimit{`,
		`ApiRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimit), "APIRateLimit", "common_waf.APIRateLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultSensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultSensitiveDataPolicy{`,
		`DefaultSensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSensitiveDataPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SensitiveDataPolicy{`,
		`SensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SensitiveDataPolicy), "SensitiveDataPolicySettings", "common_security.SensitiveDataPolicySettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BotDefenseAdvanced) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BotDefenseAdvanced{`,
		`BotDefenseAdvanced:` + strings.Replace(fmt.Sprintf("%v", this.BotDefenseAdvanced), "BotDefenseAdvancedType", "common_security.BotDefenseAdvancedType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ProxyTypeHttps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyTypeHttps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyTypeHttps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRedirect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpRedirect = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddHsts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddHsts = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DownstreamTlsParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsCertificatesChoice = &ProxyTypeHttps_TlsParameters{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ProxyTypeHttps_DefaultHeader{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ProxyTypeHttps_ServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ProxyTypeHttps_AppendServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassThrough", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ProxyTypeHttps_PassThrough{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &ProxyTypeHttps_EnablePathNormalize{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &ProxyTypeHttps_DisablePathNormalize{v}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &ProxyTypeHttps_Port{v}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonDefaultLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultLbChoice = &ProxyTypeHttps_NonDefaultLoadbalancer{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultLbChoice = &ProxyTypeHttps_DefaultLoadbalancer{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderTransformationType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeaderTransformationType == nil {
				m.HeaderTransformationType = &schema.HeaderTransformationType{}
			}
			if err := m.HeaderTransformationType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionIdleTimeout", wireType)
			}
			m.ConnectionIdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionIdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DownstreamTLSCertsParams{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsCertificatesChoice = &ProxyTypeHttps_TlsCertParams{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpProtocolOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpProtocolOptions == nil {
				m.HttpProtocolOptions = &virtual_host.HttpProtocolOptions{}
			}
			if err := m.HttpProtocolOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortChoice = &ProxyTypeHttps_PortRanges{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyTypeHttp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyTypeHttp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyTypeHttp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &ProxyTypeHttp_Port{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortChoice = &ProxyTypeHttp_PortRanges{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyTypeHttpsAutoCerts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyTypeHttpsAutoCerts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyTypeHttpsAutoCerts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRedirect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpRedirect = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddHsts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddHsts = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsConfig == nil {
				m.TlsConfig = &views.TlsConfig{}
			}
			if err := m.TlsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &ProxyTypeHttpsAutoCerts_NoMtls{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DownstreamTlsValidationContext{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &ProxyTypeHttpsAutoCerts_UseMtls{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_DefaultHeader{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_ServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_AppendServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassThrough", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_PassThrough{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &ProxyTypeHttpsAutoCerts_EnablePathNormalize{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &ProxyTypeHttpsAutoCerts_DisablePathNormalize{v}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &ProxyTypeHttpsAutoCerts_Port{v}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonDefaultLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultLbChoice = &ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultLbChoice = &ProxyTypeHttpsAutoCerts_DefaultLoadbalancer{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderTransformationType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeaderTransformationType == nil {
				m.HeaderTransformationType = &schema.HeaderTransformationType{}
			}
			if err := m.HeaderTransformationType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionIdleTimeout", wireType)
			}
			m.ConnectionIdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionIdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpProtocolOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpProtocolOptions == nil {
				m.HttpProtocolOptions = &virtual_host.HttpProtocolOptions{}
			}
			if err := m.HttpProtocolOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortChoice = &ProxyTypeHttpsAutoCerts_PortRanges{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashPolicyListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashPolicyListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashPolicyListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashPolicy = append(m.HashPolicy, &route.HashPolicyType{})
			if err := m.HashPolicy[len(m.HashPolicy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorPolicyType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorPolicyType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorPolicyType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginPool == nil {
				m.OriginPool = &views.ObjectRefType{}
			}
			if err := m.OriginPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Percent == nil {
				m.Percent = &schema.FractionalPercent{}
			}
			if err := m.Percent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteSimpleAdvancedOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteSimpleAdvancedOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonHashPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &RouteSimpleAdvancedOptions_CommonHashPolicy{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificHashPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HashPolicyListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &RouteSimpleAdvancedOptions_SpecificHashPolicy{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= schema.RoutingPriority(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSubsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndpointSubsets == nil {
				m.EndpointSubsets = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EndpointSubsets[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePrefixRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RewriteChoice = &RouteSimpleAdvancedOptions_DisablePrefixRewrite{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixRewrite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewriteChoice = &RouteSimpleAdvancedOptions_PrefixRewrite{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToAdd = append(m.RequestHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.RequestHeadersToAdd[len(m.RequestHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToAdd = append(m.ResponseHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.ResponseHeadersToAdd[len(m.ResponseHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToRemove = append(m.ResponseHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableLocationAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableLocationAdd = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InheritedWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &RouteSimpleAdvancedOptions_InheritedWaf{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSpdy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SpdyChoice = &RouteSimpleAdvancedOptions_DisableSpdy{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSpdy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SpdyChoice = &RouteSimpleAdvancedOptions_EnableSpdy{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWebSocketConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WebsocketChoice = &RouteSimpleAdvancedOptions_DisableWebSocketConfig{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebSocketConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &route.WebsocketConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WebsocketChoice = &RouteSimpleAdvancedOptions_WebSocketConfig{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RetryPolicyChoice = &RouteSimpleAdvancedOptions_DefaultRetryPolicy{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.RetryPolicyType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RetryPolicyChoice = &RouteSimpleAdvancedOptions_RetryPolicy{v}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonBuffering", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BufferChoice = &RouteSimpleAdvancedOptions_CommonBuffering{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.BufferConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BufferChoice = &RouteSimpleAdvancedOptions_BufferPolicy{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMirroring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MirroringChoice = &RouteSimpleAdvancedOptions_DisableMirroring{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MirrorPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MirrorPolicyType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MirroringChoice = &RouteSimpleAdvancedOptions_MirrorPolicy{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &RouteSimpleAdvancedOptions_RetractCluster{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotRetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &RouteSimpleAdvancedOptions_DoNotRetractCluster{v}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InheritedBotDefenseJavascriptInjection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseJavascriptInjectionChoice = &RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefenseJavascriptInjection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &route.BotDefenseJavascriptInjectionType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseJavascriptInjectionChoice = &RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &RouteSimpleAdvancedOptions_DisableWaf{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoRetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RetryPolicyChoice = &RouteSimpleAdvancedOptions_NoRetryPolicy{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrfPolicy == nil {
				m.CsrfPolicy = &schema.CsrfPolicy{}
			}
			if err := m.CsrfPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegexRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.RegexMatchRewrite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RewriteChoice = &RouteSimpleAdvancedOptions_RegexRewrite{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &RouteSimpleAdvancedOptions_AppFirewall{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeSimpleWithDefaultOriginPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeSimpleWithDefaultOriginPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostRewrite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_HostRewrite{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeSimple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeSimple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeSimple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPools = append(m.OriginPools, &views.OriginPoolWithWeight{})
			if err := m.OriginPools[len(m.OriginPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &RouteTypeSimple_AutoHostRewrite{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostRewrite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostRewriteParams = &RouteTypeSimple_HostRewrite{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &RouteTypeSimple_DisableHostRewrite{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvancedOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdvancedOptions == nil {
				m.AdvancedOptions = &RouteSimpleAdvancedOptions{}
			}
			if err := m.AdvancedOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &schema.HeaderMatcherType{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomingPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IncomingPort == nil {
				m.IncomingPort = &schema.PortMatcherType{}
			}
			if err := m.IncomingPort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeRedirect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeRedirect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeRedirect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRedirect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteRedirect == nil {
				m.RouteRedirect = &route.RouteRedirect{}
			}
			if err := m.RouteRedirect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &schema.HeaderMatcherType{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomingPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IncomingPort == nil {
				m.IncomingPort = &schema.PortMatcherType{}
			}
			if err := m.IncomingPort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeDirectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeDirectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeDirectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteDirectResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteDirectResponse == nil {
				m.RouteDirectResponse = &route.RouteDirectResponse{}
			}
			if err := m.RouteDirectResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &schema.HeaderMatcherType{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomingPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IncomingPort == nil {
				m.IncomingPort = &schema.PortMatcherType{}
			}
			if err := m.IncomingPort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeCustomRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeCustomRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeCustomRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteRef == nil {
				m.RouteRef = &views.ObjectRefType{}
			}
			if err := m.RouteRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteTypeSimple{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &RouteType_SimpleRoute{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteTypeRedirect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &RouteType_RedirectRoute{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectResponseRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteTypeDirectResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &RouteType_DirectResponseRoute{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomRouteObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteTypeCustomRoute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &RouteType_CustomRouteObject{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvancedOptionsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvancedOptionsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvancedOptionsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToAdd = append(m.RequestHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.RequestHeadersToAdd[len(m.RequestHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToAdd = append(m.ResponseHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.ResponseHeadersToAdd[len(m.ResponseHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToRemove = append(m.ResponseHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestHeaderSize", wireType)
			}
			m.MaxRequestHeaderSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestHeaderSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BufferPolicy == nil {
				m.BufferPolicy = &schema.BufferConfigType{}
			}
			if err := m.BufferPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompressionParams == nil {
				m.CompressionParams = &virtual_host.CompressionType{}
			}
			if err := m.CompressionParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomErrors == nil {
				m.CustomErrors = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CustomErrors[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JavascriptInfo == nil {
				m.JavascriptInfo = &virtual_host.JavaScriptConfigType{}
			}
			if err := m.JavascriptInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jwt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jwt = append(m.Jwt, &views.ObjectRefType{})
			if err := m.Jwt[len(m.Jwt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDefaultErrorPages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDefaultErrorPages = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &AdvancedOptionsType_EnablePathNormalize{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &AdvancedOptionsType_DisablePathNormalize{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableStrictSniHostHeaderCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StrictSniHostHeaderCheckChoice = &AdvancedOptionsType_EnableStrictSniHostHeaderCheck{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalDomains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DomainNameList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StrictSniHostHeaderCheckChoice = &AdvancedOptionsType_AdditionalDomains{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookiesToModify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookiesToModify = append(m.CookiesToModify, &schema.CookieManipulationOptionType{})
			if err := m.CookiesToModify[len(m.CookiesToModify)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleLoadBalancerAppSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleLoadBalancerAppSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleLoadBalancerAppSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &SingleLoadBalancerAppSetting_EnableDiscovery{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &SingleLoadBalancerAppSetting_DisableDiscovery{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &SingleLoadBalancerAppSetting_EnableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &SingleLoadBalancerAppSetting_DisableMaliciousUserDetection{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginServerSubsetRuleListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginServerSubsetRuleListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginServerSubsetRuleListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServerSubsetRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginServerSubsetRules = append(m.OriginServerSubsetRules, &policy.OriginServerSubsetRule{})
			if err := m.OriginServerSubsetRules[len(m.OriginServerSubsetRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_Http{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_Https{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRoutePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRoutePools = append(m.DefaultRoutePools, &views.OriginPoolWithWeight{})
			if err := m.DefaultRoutePools[len(m.DefaultRoutePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &RouteType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GlobalSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &GlobalSpecType_UserIdentification{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GlobalSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GlobalSpecType_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttpsAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &GlobalSpecType_AutoHostRewrite{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostRewrite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostRewriteParams = &GlobalSpecType_HostRewrite{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &GlobalSpecType_DisableHostRewrite{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &views.ObjectRefType{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosMitigationRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdosMitigationRules = append(m.DdosMitigationRules, &common_security.DDoSMitigationRule{})
			if err := m.DdosMitigationRules[len(m.DdosMitigationRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GlobalSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GlobalSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GlobalSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_RoundRobin{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_LeastActive{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_Random{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_SourceIpStickiness{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &route.CookieForHashing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_CookieStickiness{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HashPolicyListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_RingHash{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GlobalSpecType_AppFirewall{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleLbApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SingleLoadBalancerAppSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MlConfigChoice = &GlobalSpecType_SingleLbApp{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiLbApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MlConfigChoice = &GlobalSpecType_MultiLbApp{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GlobalSpecType_DisableBotDefense{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ShapeBotDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GlobalSpecType_BotDefense{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdClientIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &GlobalSpecType_UserIdClientIp{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDefinitionList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GlobalSpecType_ApiDefinitions{v}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamTlsCertificateExpirationTimestamps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownstreamTlsCertificateExpirationTimestamps = append(m.DownstreamTlsCertificateExpirationTimestamps, &types.Timestamp{})
			if err := m.DownstreamTlsCertificateExpirationTimestamps[len(m.DownstreamTlsCertificateExpirationTimestamps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGuardRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataGuardRules = append(m.DataGuardRules, &policy.SimpleDataGuardRule{})
			if err := m.DataGuardRules[len(m.DataGuardRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &GlobalSpecType_DisableIpReputation{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &GlobalSpecType_EnableIpReputation{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GlobalSpecType_ApiSpecification{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimitLegacy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiRateLimitLegacy == nil {
				m.ApiRateLimitLegacy = &common_waf.APIRateLimitLegacy{}
			}
			if err := m.ApiRateLimitLegacy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GlobalSpecType_DisableApiDefinition{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GlobalSpecType_ApiDefinition{v}
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProtectionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiProtectionRules == nil {
				m.ApiProtectionRules = &common_waf.APIProtectionRules{}
			}
			if err := m.ApiProtectionRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableTrustClientIpHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TrustClientIpHeadersChoice = &GlobalSpecType_DisableTrustClientIpHeaders{v}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTrustClientIpHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.ClientIPHeaders{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TrustClientIpHeadersChoice = &GlobalSpecType_EnableTrustClientIpHeaders{v}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &GlobalSpecType_EnableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &GlobalSpecType_DisableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &GlobalSpecType_EnableApiDiscovery{v}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &GlobalSpecType_DisableApiDiscovery{v}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &GlobalSpecType_DisableClientSideDefense{v}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ClientSideDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &GlobalSpecType_ClientSideDefense{v}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &origin_pool.GlobalSpecType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OriginPoolChoice = &GlobalSpecType_DefaultPool{v}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPoolList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.OriginPoolListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OriginPoolChoice = &GlobalSpecType_DefaultPoolList{v}
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrfPolicy == nil {
				m.CsrfPolicy = &schema.CsrfPolicy{}
			}
			if err := m.CsrfPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphqlRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphqlRules = append(m.GraphqlRules, &policy.GraphQLRule{})
			if err := m.GraphqlRules[len(m.GraphqlRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 93:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectedCookies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtectedCookies = append(m.ProtectedCookies, &schema.CookieManipulationOptionType{})
			if err := m.ProtectedCookies[len(m.ProtectedCookies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 94:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowDdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.SlowDDoSMitigation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &GlobalSpecType_SlowDdosMitigation{v}
			iNdEx = postIndex
		case 95:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.EnableChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_EnableChallenge{v}
			iNdEx = postIndex
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemDefaultTimeouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &GlobalSpecType_SystemDefaultTimeouts{v}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JwtValidation == nil {
				m.JwtValidation = &common_waf.JWTValidation{}
			}
			if err := m.JwtValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServerSubsetRuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginServerSubsetRuleList == nil {
				m.OriginServerSubsetRuleList = &OriginServerSubsetRuleListType{}
			}
			if err := m.OriginServerSubsetRuleList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &GlobalSpecType_DisableThreatMesh{v}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &GlobalSpecType_EnableThreatMesh{v}
			iNdEx = postIndex
		case 111:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionDefault{v}
			iNdEx = postIndex
		case 112:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionBlock{v}
			iNdEx = postIndex
		case 113:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionJsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionJsChallenge{v}
			iNdEx = postIndex
		case 114:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionNone{v}
			iNdEx = postIndex
		case 115:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertState", wireType)
			}
			m.CertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertState |= virtual_host.CertificationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 116:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataDisclosureRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SensitiveDataDisclosureRules == nil {
				m.SensitiveDataDisclosureRules = &SensitiveDataDisclosureRules{}
			}
			if err := m.SensitiveDataDisclosureRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 120:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APIRateLimit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GlobalSpecType_ApiRateLimit{v}
			iNdEx = postIndex
		case 131:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &GlobalSpecType_DefaultSensitiveDataPolicy{v}
			iNdEx = postIndex
		case 132:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.SensitiveDataPolicySettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &GlobalSpecType_SensitiveDataPolicy{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= virtual_host.VirtualHostState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1004:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertState", wireType)
			}
			m.AutoCertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoCertState |= virtual_host.CertificationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertInfo == nil {
				m.AutoCertInfo = &virtual_host.AutoCertInfoType{}
			}
			if err := m.AutoCertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1011:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefenseAdvanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.BotDefenseAdvancedType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GlobalSpecType_BotDefenseAdvanced{v}
			iNdEx = postIndex
		case 1100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternetVipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternetVipInfo = append(m.InternetVipInfo, &views.InternetVIPInfo{})
			if err := m.InternetVipInfo[len(m.InternetVipInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SensitiveDataDisclosureRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SensitiveDataDisclosureRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SensitiveDataDisclosureRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataTypesInResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SensitiveDataTypesInResponse = append(m.SensitiveDataTypesInResponse, &SensitiveDataTypes{})
			if err := m.SensitiveDataTypesInResponse[len(m.SensitiveDataTypesInResponse)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SensitiveDataTypes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SensitiveDataTypes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SensitiveDataTypes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaskingModeChoice = &SensitiveDataTypes_Mask{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaskingModeChoice = &SensitiveDataTypes_Report{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiEndpointDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TypeConditionTypeChoice = &SensitiveDataTypes_ApiEndpoint{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeConditionTypeChoice = &SensitiveDataTypes_BasePath{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeConditionTypeChoice = &SensitiveDataTypes_ApiGroup{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &BodySectionMaskingOptions{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BodySectionMaskingOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BodySectionMaskingOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BodySectionMaskingOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_Http{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_Https{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRoutePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRoutePools = append(m.DefaultRoutePools, &views.OriginPoolWithWeight{})
			if err := m.DefaultRoutePools[len(m.DefaultRoutePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &RouteType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &CreateSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &CreateSpecType_UserIdentification{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &CreateSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &CreateSpecType_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttpsAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &views.ObjectRefType{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosMitigationRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdosMitigationRules = append(m.DdosMitigationRules, &common_security.DDoSMitigationRule{})
			if err := m.DdosMitigationRules[len(m.DdosMitigationRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CreateSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CreateSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CreateSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_RoundRobin{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_LeastActive{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_Random{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_SourceIpStickiness{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &route.CookieForHashing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_CookieStickiness{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HashPolicyListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_RingHash{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &CreateSpecType_AppFirewall{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleLbApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SingleLoadBalancerAppSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MlConfigChoice = &CreateSpecType_SingleLbApp{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiLbApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MlConfigChoice = &CreateSpecType_MultiLbApp{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &CreateSpecType_DisableBotDefense{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ShapeBotDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &CreateSpecType_BotDefense{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdClientIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &CreateSpecType_UserIdClientIp{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDefinitionList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &CreateSpecType_ApiDefinitions{v}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGuardRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataGuardRules = append(m.DataGuardRules, &policy.SimpleDataGuardRule{})
			if err := m.DataGuardRules[len(m.DataGuardRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &CreateSpecType_DisableIpReputation{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &CreateSpecType_EnableIpReputation{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &CreateSpecType_ApiSpecification{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimitLegacy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiRateLimitLegacy == nil {
				m.ApiRateLimitLegacy = &common_waf.APIRateLimitLegacy{}
			}
			if err := m.ApiRateLimitLegacy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &CreateSpecType_DisableApiDefinition{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &CreateSpecType_ApiDefinition{v}
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProtectionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiProtectionRules == nil {
				m.ApiProtectionRules = &common_waf.APIProtectionRules{}
			}
			if err := m.ApiProtectionRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableTrustClientIpHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TrustClientIpHeadersChoice = &CreateSpecType_DisableTrustClientIpHeaders{v}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTrustClientIpHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.ClientIPHeaders{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TrustClientIpHeadersChoice = &CreateSpecType_EnableTrustClientIpHeaders{v}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &CreateSpecType_EnableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &CreateSpecType_DisableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &CreateSpecType_EnableApiDiscovery{v}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &CreateSpecType_DisableApiDiscovery{v}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &CreateSpecType_DisableClientSideDefense{v}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ClientSideDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &CreateSpecType_ClientSideDefense{v}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &origin_pool.GlobalSpecType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OriginPoolChoice = &CreateSpecType_DefaultPool{v}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPoolList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.OriginPoolListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OriginPoolChoice = &CreateSpecType_DefaultPoolList{v}
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrfPolicy == nil {
				m.CsrfPolicy = &schema.CsrfPolicy{}
			}
			if err := m.CsrfPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphqlRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphqlRules = append(m.GraphqlRules, &policy.GraphQLRule{})
			if err := m.GraphqlRules[len(m.GraphqlRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 93:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectedCookies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtectedCookies = append(m.ProtectedCookies, &schema.CookieManipulationOptionType{})
			if err := m.ProtectedCookies[len(m.ProtectedCookies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 94:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowDdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.SlowDDoSMitigation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &CreateSpecType_SlowDdosMitigation{v}
			iNdEx = postIndex
		case 95:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.EnableChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_EnableChallenge{v}
			iNdEx = postIndex
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemDefaultTimeouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &CreateSpecType_SystemDefaultTimeouts{v}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JwtValidation == nil {
				m.JwtValidation = &common_waf.JWTValidation{}
			}
			if err := m.JwtValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServerSubsetRuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginServerSubsetRuleList == nil {
				m.OriginServerSubsetRuleList = &OriginServerSubsetRuleListType{}
			}
			if err := m.OriginServerSubsetRuleList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &CreateSpecType_DisableThreatMesh{v}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &CreateSpecType_EnableThreatMesh{v}
			iNdEx = postIndex
		case 111:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &CreateSpecType_L7DdosActionDefault{v}
			iNdEx = postIndex
		case 112:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &CreateSpecType_L7DdosActionBlock{v}
			iNdEx = postIndex
		case 113:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionJsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &CreateSpecType_L7DdosActionJsChallenge{v}
			iNdEx = postIndex
		case 114:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &CreateSpecType_L7DdosActionNone{v}
			iNdEx = postIndex
		case 116:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataDisclosureRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SensitiveDataDisclosureRules == nil {
				m.SensitiveDataDisclosureRules = &SensitiveDataDisclosureRules{}
			}
			if err := m.SensitiveDataDisclosureRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 120:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APIRateLimit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &CreateSpecType_ApiRateLimit{v}
			iNdEx = postIndex
		case 131:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &CreateSpecType_DefaultSensitiveDataPolicy{v}
			iNdEx = postIndex
		case 132:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.SensitiveDataPolicySettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &CreateSpecType_SensitiveDataPolicy{v}
			iNdEx = postIndex
		case 1011:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefenseAdvanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.BotDefenseAdvancedType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &CreateSpecType_BotDefenseAdvanced{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_Http{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_Https{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRoutePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRoutePools = append(m.DefaultRoutePools, &views.OriginPoolWithWeight{})
			if err := m.DefaultRoutePools[len(m.DefaultRoutePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &RouteType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &ReplaceSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &ReplaceSpecType_UserIdentification{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &ReplaceSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &ReplaceSpecType_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttpsAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &views.ObjectRefType{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosMitigationRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdosMitigationRules = append(m.DdosMitigationRules, &common_security.DDoSMitigationRule{})
			if err := m.DdosMitigationRules[len(m.DdosMitigationRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &ReplaceSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &ReplaceSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &ReplaceSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_RoundRobin{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_LeastActive{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_Random{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_SourceIpStickiness{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &route.CookieForHashing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_CookieStickiness{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HashPolicyListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_RingHash{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &ReplaceSpecType_AppFirewall{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleLbApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SingleLoadBalancerAppSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MlConfigChoice = &ReplaceSpecType_SingleLbApp{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiLbApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MlConfigChoice = &ReplaceSpecType_MultiLbApp{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &ReplaceSpecType_DisableBotDefense{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ShapeBotDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &ReplaceSpecType_BotDefense{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdClientIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &ReplaceSpecType_UserIdClientIp{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDefinitionList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &ReplaceSpecType_ApiDefinitions{v}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGuardRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataGuardRules = append(m.DataGuardRules, &policy.SimpleDataGuardRule{})
			if err := m.DataGuardRules[len(m.DataGuardRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &ReplaceSpecType_DisableIpReputation{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &ReplaceSpecType_EnableIpReputation{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &ReplaceSpecType_ApiSpecification{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimitLegacy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiRateLimitLegacy == nil {
				m.ApiRateLimitLegacy = &common_waf.APIRateLimitLegacy{}
			}
			if err := m.ApiRateLimitLegacy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &ReplaceSpecType_DisableApiDefinition{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &ReplaceSpecType_ApiDefinition{v}
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProtectionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiProtectionRules == nil {
				m.ApiProtectionRules = &common_waf.APIProtectionRules{}
			}
			if err := m.ApiProtectionRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableTrustClientIpHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TrustClientIpHeadersChoice = &ReplaceSpecType_DisableTrustClientIpHeaders{v}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTrustClientIpHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.ClientIPHeaders{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TrustClientIpHeadersChoice = &ReplaceSpecType_EnableTrustClientIpHeaders{v}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &ReplaceSpecType_EnableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &ReplaceSpecType_DisableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &ReplaceSpecType_EnableApiDiscovery{v}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &ReplaceSpecType_DisableApiDiscovery{v}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &ReplaceSpecType_DisableClientSideDefense{v}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ClientSideDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &ReplaceSpecType_ClientSideDefense{v}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &origin_pool.GlobalSpecType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OriginPoolChoice = &ReplaceSpecType_DefaultPool{v}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPoolList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.OriginPoolListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OriginPoolChoice = &ReplaceSpecType_DefaultPoolList{v}
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrfPolicy == nil {
				m.CsrfPolicy = &schema.CsrfPolicy{}
			}
			if err := m.CsrfPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphqlRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphqlRules = append(m.GraphqlRules, &policy.GraphQLRule{})
			if err := m.GraphqlRules[len(m.GraphqlRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 93:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectedCookies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtectedCookies = append(m.ProtectedCookies, &schema.CookieManipulationOptionType{})
			if err := m.ProtectedCookies[len(m.ProtectedCookies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 94:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowDdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.SlowDDoSMitigation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &ReplaceSpecType_SlowDdosMitigation{v}
			iNdEx = postIndex
		case 95:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.EnableChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_EnableChallenge{v}
			iNdEx = postIndex
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemDefaultTimeouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &ReplaceSpecType_SystemDefaultTimeouts{v}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JwtValidation == nil {
				m.JwtValidation = &common_waf.JWTValidation{}
			}
			if err := m.JwtValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServerSubsetRuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginServerSubsetRuleList == nil {
				m.OriginServerSubsetRuleList = &OriginServerSubsetRuleListType{}
			}
			if err := m.OriginServerSubsetRuleList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &ReplaceSpecType_DisableThreatMesh{v}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &ReplaceSpecType_EnableThreatMesh{v}
			iNdEx = postIndex
		case 111:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &ReplaceSpecType_L7DdosActionDefault{v}
			iNdEx = postIndex
		case 112:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &ReplaceSpecType_L7DdosActionBlock{v}
			iNdEx = postIndex
		case 113:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionJsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &ReplaceSpecType_L7DdosActionJsChallenge{v}
			iNdEx = postIndex
		case 114:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &ReplaceSpecType_L7DdosActionNone{v}
			iNdEx = postIndex
		case 116:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataDisclosureRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SensitiveDataDisclosureRules == nil {
				m.SensitiveDataDisclosureRules = &SensitiveDataDisclosureRules{}
			}
			if err := m.SensitiveDataDisclosureRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 120:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APIRateLimit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &ReplaceSpecType_ApiRateLimit{v}
			iNdEx = postIndex
		case 131:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &ReplaceSpecType_DefaultSensitiveDataPolicy{v}
			iNdEx = postIndex
		case 132:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.SensitiveDataPolicySettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &ReplaceSpecType_SensitiveDataPolicy{v}
			iNdEx = postIndex
		case 1011:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefenseAdvanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.BotDefenseAdvancedType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &ReplaceSpecType_BotDefenseAdvanced{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_Http{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_Https{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRoutePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRoutePools = append(m.DefaultRoutePools, &views.OriginPoolWithWeight{})
			if err := m.DefaultRoutePools[len(m.DefaultRoutePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &RouteType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GetSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &GetSpecType_UserIdentification{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GetSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GetSpecType_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttpsAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &views.ObjectRefType{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &common_waf.SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosMitigationRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdosMitigationRules = append(m.DdosMitigationRules, &common_security.DDoSMitigationRule{})
			if err := m.DdosMitigationRules[len(m.DdosMitigationRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GetSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GetSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GetSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_RoundRobin{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_LeastActive{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_Random{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_SourceIpStickiness{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &route.CookieForHashing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_CookieStickiness{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HashPolicyListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_RingHash{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GetSpecType_AppFirewall{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleLbApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SingleLoadBalancerAppSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MlConfigChoice = &GetSpecType_SingleLbApp{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiLbApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MlConfigChoice = &GetSpecType_MultiLbApp{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GetSpecType_DisableBotDefense{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ShapeBotDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GetSpecType_BotDefense{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdClientIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &GetSpecType_UserIdClientIp{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDefinitionList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GetSpecType_ApiDefinitions{v}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamTlsCertificateExpirationTimestamps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownstreamTlsCertificateExpirationTimestamps = append(m.DownstreamTlsCertificateExpirationTimestamps, &types.Timestamp{})
			if err := m.DownstreamTlsCertificateExpirationTimestamps[len(m.DownstreamTlsCertificateExpirationTimestamps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGuardRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataGuardRules = append(m.DataGuardRules, &policy.SimpleDataGuardRule{})
			if err := m.DataGuardRules[len(m.DataGuardRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &GetSpecType_DisableIpReputation{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &GetSpecType_EnableIpReputation{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GetSpecType_ApiSpecification{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimitLegacy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiRateLimitLegacy == nil {
				m.ApiRateLimitLegacy = &common_waf.APIRateLimitLegacy{}
			}
			if err := m.ApiRateLimitLegacy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GetSpecType_DisableApiDefinition{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GetSpecType_ApiDefinition{v}
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProtectionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiProtectionRules == nil {
				m.ApiProtectionRules = &common_waf.APIProtectionRules{}
			}
			if err := m.ApiProtectionRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableTrustClientIpHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TrustClientIpHeadersChoice = &GetSpecType_DisableTrustClientIpHeaders{v}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTrustClientIpHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.ClientIPHeaders{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TrustClientIpHeadersChoice = &GetSpecType_EnableTrustClientIpHeaders{v}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &GetSpecType_EnableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &GetSpecType_DisableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &GetSpecType_EnableApiDiscovery{v}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &GetSpecType_DisableApiDiscovery{v}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &GetSpecType_DisableClientSideDefense{v}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSideDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.ClientSideDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSideDefenseChoice = &GetSpecType_ClientSideDefense{v}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &origin_pool.GlobalSpecType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OriginPoolChoice = &GetSpecType_DefaultPool{v}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPoolList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.OriginPoolListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OriginPoolChoice = &GetSpecType_DefaultPoolList{v}
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CsrfPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CsrfPolicy == nil {
				m.CsrfPolicy = &schema.CsrfPolicy{}
			}
			if err := m.CsrfPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphqlRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphqlRules = append(m.GraphqlRules, &policy.GraphQLRule{})
			if err := m.GraphqlRules[len(m.GraphqlRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 93:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectedCookies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtectedCookies = append(m.ProtectedCookies, &schema.CookieManipulationOptionType{})
			if err := m.ProtectedCookies[len(m.ProtectedCookies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 94:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowDdosMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.SlowDDoSMitigation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &GetSpecType_SlowDdosMitigation{v}
			iNdEx = postIndex
		case 95:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.EnableChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_EnableChallenge{v}
			iNdEx = postIndex
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemDefaultTimeouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SlowDdosMitigationChoice = &GetSpecType_SystemDefaultTimeouts{v}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JwtValidation == nil {
				m.JwtValidation = &common_waf.JWTValidation{}
			}
			if err := m.JwtValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginServerSubsetRuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginServerSubsetRuleList == nil {
				m.OriginServerSubsetRuleList = &OriginServerSubsetRuleListType{}
			}
			if err := m.OriginServerSubsetRuleList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &GetSpecType_DisableThreatMesh{v}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableThreatMesh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatMeshChoice = &GetSpecType_EnableThreatMesh{v}
			iNdEx = postIndex
		case 111:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &GetSpecType_L7DdosActionDefault{v}
			iNdEx = postIndex
		case 112:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &GetSpecType_L7DdosActionBlock{v}
			iNdEx = postIndex
		case 113:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionJsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &GetSpecType_L7DdosActionJsChallenge{v}
			iNdEx = postIndex
		case 114:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7DdosActionNone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L7DdosAutoMitigationAction = &GetSpecType_L7DdosActionNone{v}
			iNdEx = postIndex
		case 115:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertState", wireType)
			}
			m.CertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertState |= virtual_host.CertificationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 116:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataDisclosureRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SensitiveDataDisclosureRules == nil {
				m.SensitiveDataDisclosureRules = &SensitiveDataDisclosureRules{}
			}
			if err := m.SensitiveDataDisclosureRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 120:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APIRateLimit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GetSpecType_ApiRateLimit{v}
			iNdEx = postIndex
		case 131:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &GetSpecType_DefaultSensitiveDataPolicy{v}
			iNdEx = postIndex
		case 132:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.SensitiveDataPolicySettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &GetSpecType_SensitiveDataPolicy{v}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= virtual_host.VirtualHostState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertInfo == nil {
				m.AutoCertInfo = &virtual_host.AutoCertInfoType{}
			}
			if err := m.AutoCertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1011:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefenseAdvanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.BotDefenseAdvancedType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GetSpecType_BotDefenseAdvanced{v}
			iNdEx = postIndex
		case 1100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternetVipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternetVipInfo = append(m.InternetVipInfo, &views.InternetVIPInfo{})
			if err := m.InternetVipInfo[len(m.InternetVipInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/http_loadbalancer/public_apiep_customapi.proto

// HTTP loadbalancer
//
// x-displayName: "Configure HTTP Load Balancer"
// HTTP Loadbalancer view defines a required parameters that can be used in CRUD, to create and manage HTTP load balancer.
// It can be used to create HTTP load balancer and HTTPS load balancer.
//
// View will create following child objects.
//
// * Virtual-host
// * routes
// * clusters
// * endpoints
// * advertise policy
//

package http_loadbalancer

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	app_type "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// API Inventory Schema Query Type
//
// x-displayName: "API Inventory Schema Query Type"
// API Inventory Schema Query Type
type ApiInventorySchemaQueryType int32

const (
	// Full Response
	//
	// x-displayName: "Full Response"
	API_INVENTORY_SCHEMA_FULL_RESPONSE ApiInventorySchemaQueryType = 0
	// Current Schema
	//
	// x-displayName: "Current Schema"
	API_INVENTORY_SCHEMA_CURRENT ApiInventorySchemaQueryType = 1
	// Updated Schema
	//
	// x-displayName: "Updated Schema"
	API_INVENTORY_SCHEMA_UPDATED ApiInventorySchemaQueryType = 2
)

var ApiInventorySchemaQueryType_name = map[int32]string{
	0: "API_INVENTORY_SCHEMA_FULL_RESPONSE",
	1: "API_INVENTORY_SCHEMA_CURRENT",
	2: "API_INVENTORY_SCHEMA_UPDATED",
}

var ApiInventorySchemaQueryType_value = map[string]int32{
	"API_INVENTORY_SCHEMA_FULL_RESPONSE": 0,
	"API_INVENTORY_SCHEMA_CURRENT":       1,
	"API_INVENTORY_SCHEMA_UPDATED":       2,
}

func (ApiInventorySchemaQueryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_edda31a2e072ec0d, []int{0}
}

// Swagger spec request
//
// x-displayName: "Swagger spec Request"
// Request shape for GET Swagger Spec API
type SwaggerSpecReq struct {
	// Name
	//
	// x-displayName: "Name"
	// x-example: "blogging-app"
	// HTTP load balancer for current request
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the HTTP Load Balancer for current request
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *SwaggerSpecReq) Reset()      { *m = SwaggerSpecReq{} }
func (*SwaggerSpecReq) ProtoMessage() {}
func (*SwaggerSpecReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_edda31a2e072ec0d, []int{0}
}
func (m *SwaggerSpecReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwaggerSpecReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwaggerSpecReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwaggerSpecReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwaggerSpecReq.Merge(m, src)
}
func (m *SwaggerSpecReq) XXX_Size() int {
	return m.Size()
}
func (m *SwaggerSpecReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SwaggerSpecReq.DiscardUnknown(m)
}

var xxx_messageInfo_SwaggerSpecReq proto.InternalMessageInfo

func (m *SwaggerSpecReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SwaggerSpecReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// Swagger Spec Response
//
// x-displayName: "Swagger Spec Response"
// JSON encoded swagger spec for the given HTTP load balancer.
type SwaggerSpecRsp struct {
	// Swagger Spec
	//
	// x-displayName: "Swagger Spec"
	// x-example: "{\"info\": {\"description\": \"\",\"title\": \"\",\"version\": \"\"},\"paths\": {\"\/api\/Addresss\": {\"post\": {\"consumes\": [\"application\/json\"],\"description\": \"Swagger auto-generated from learnt schema\",\"parameters\": [{\"description\": \"\",\"in\": \"query\",\"name\": \"test1\",\"type\": \"string\"},{\"description\": \"\",\"in\": \"query\",\"items\": {\"description\": \"Integer\",\"pattern\": \"-?\\\\d+\",\"type\": \"string\"},\"name\": \"test\",\"type\": \"array\"},{\"description\": \"\",\"in\": \"body\",\"name\": \"body\",\"schema\": {\"example\": [\"{\\\"country\\\": \\\"dummy\\\", \\\"fullName\\\": \\\"dummy\\\", \\\"mobileNum\\\": 1234567890, \\\"zipCode\\\": \\\"121\\\", \\\"streetAddress\\\": \\\"dummy\\\", \\\"city\\\": \\\"dummy\\\", \\\"state\\\": \\\"dummy\\\", \\\"test\\\": \\\"Hello, \\\\u4e16\\\\u754c\\\", \\\"abc\\\": \\\"def\\\"}\"],\"properties\": {\"abc\": {\"description\": \"Word\",\"pattern\": \"[a-z0-9-]+\",\"type\": \"string\"},\"city\": {\"description\": \"Word\",\"pattern\": \"[a-z0-9-]+\",\"type\": \"string\"},\"country\": {\"description\": \"Word\",\"pattern\": \"[a-z0-9-]+\",\"type\": \"string\"},\"fullName\": {\"description\": \"Word\",\"pattern\": \"[a-z0-9-]+\",\"type\": \"string\"},\"mobileNum\": {\"type\": \"integer\"},\"state\": {\"description\": \"Word\",\"pattern\": \"[a-z0-9-]+\",\"type\": \"string\"},\"streetAddress\": {\"description\": \"Word\",\"pattern\": \"[a-z0-9-]+\",\"type\": \"string\"},\"test\": {\"type\": \"string\"},\"zipCode\": {\"description\": \"Integer\",\"pattern\": \"-?\\\\d+\",\"type\": \"string\"}},\"required\": [\"fullName\",\"mobileNum\",\"city\",\"test\",\"zipCode\",\"state\",\"streetAddress\",\"country\",\"abc\"],\"type\": \"object\"}}],\"responses\": {\"200\": {\"description\": \"\"}}}},\"\/api\/Cards\": {\"post\": {\"consumes\": [\"application\/json\"],\"description\": \"Swagger auto-generated from learnt schema\",\"parameters\": [{\"description\": \"\",\"in\": \"body\",\"name\": \"body\",\"schema\": {\"example\": [\"{\\\"fullName\\\": \\\"dummy\\\", \\\"cardNum\\\": 0, \\\"expMonth\\\": \\\"0\\\", \\\"expYear\\\": \\\"0\\\"}\"],\"properties\": {\"cardNum\": {\"type\": \"integer\"},\"expMonth\": {\"description\": \"Integer\",\"pattern\": \"-?\\\\d+\",\"type\": \"string\"},\"expYear\": {\"description\": \"Integer\",\"pattern\": \"-?\\\\d+\",\"type\": \"string\"},\"fullName\": {\"description\": \"Word\",\"pattern\": \"[a-z0-9-]+\",\"type\": \"string\"}},\"required\": [\"expMonth\",\"expYear\",\"fullName\",\"cardNum\"],\"type\": \"object\"}}],\"responses\": {\"200\": {\"description\": \"\"}}}},\"\/rest\/basket\/6\/checkout\": {\"post\": {\"consumes\": [\"application\/json\"],\"description\": \"Swagger auto-generated from learnt schema\",\"parameters\": [{\"description\": \"\",\"in\": \"body\",\"name\": \"body\",\"schema\": {\"example\": [\"{\\\"couponData\\\": \\\"MTIzNDU2Nzg5MC0xNTg3MzM3MjAwMDAw\\\", \\\"orderDetails\\\": {\\\"paymentId\\\": \\\"9792\\\", \\\"addressId\\\": \\\"21189\\\", \\\"deliveryMethodId\\\": \\\"1\\\"}}\",\"{\\\"couponData\\\": \\\"MTIzNDU2Nzg5MC0xNTg3MzM3MjAwMDAw\\\", \\\"orderDetails\\\": {\\\"paymentId\\\": \\\"9814\\\", \\\"addressId\\\": \\\"21409\\\", \\\"deliveryMethodId\\\": \\\"1\\\"}}\",\"{\\\"couponData\\\": \\\"MTIzNDU2Nzg5MC0xNTg3MzM3MjAwMDAw\\\", \\\"orderDetails\\\": {\\\"paymentId\\\": \\\"9822\\\", \\\"addressId\\\": \\\"21489\\\", \\\"deliveryMethodId\\\": \\\"1\\\"}}\",\"{\\\"couponData\\\": \\\"MTIzNDU2Nzg5MC0xNTg3MzM3MjAwMDAw\\\", \\\"orderDetails\\\": {\\\"paymentId\\\": \\\"9793\\\", \\\"addressId\\\": \\\"21199\\\", \\\"deliveryMethodId\\\": \\\"1\\\"}}\",\"{\\\"couponData\\\": \\\"MTIzNDU2Nzg5MC0xNTg3MzM3MjAwMDAw\\\", \\\"orderDetails\\\": {\\\"paymentId\\\": \\\"9817\\\", \\\"addressId\\\": \\\"21439\\\", \\\"deliveryMethodId\\\": \\\"1\\\"}}\"],\"properties\": {\"couponData\": {\"type\": \"string\"},\"orderDetails\": {\"properties\": {\"addressId\": {\"description\": \"Integer\",\"pattern\": \"-?\\\\d+\",\"type\": \"string\"},\"deliveryMethodId\": {\"description\": \"Integer\",\"pattern\": \"-?\\\\d+\",\"type\": \"string\"},\"paymentId\": {\"description\": \"Integer\",\"pattern\": \"-?\\\\d+\",\"type\": \"string\"}},\"required\": [\"addressId\",\"paymentId\",\"deliveryMethodId\"],\"type\": \"object\"}},\"required\": [\"orderDetails\",\"couponData\"],\"type\": \"object\"}}],\"responses\": {\"200\": {\"description\": \"\"}}}},\"\/rest\/products\/1\/reviews\": {\"put\": {\"consumes\": [\"application\/json\"],\"description\": \"Swagger auto-generated from learnt schema\",\"parameters\": [],\"responses\": {\"200\": {\"description\": \"\"}}}},\"\/rest\/user\/login\": {\"post\": {\"consumes\": [\"application\/json\"],\"description\": \"Swagger auto-generated from learnt schema\",\"parameters\": [{\"description\": \"\",\"in\": \"body\",\"name\": \"body\",\"schema\": {\"example\": [\"{\\\"email\\\":\\\"dummy0@dummy.com\\\",\\\"password\\\":\\\"redacted\\\",\\\"test\\\":\\\"Hello, \u4E16\u754C\\\"}\",\"{\\\"email\\\":\\\"dummy1@dummy.com\\\",\\\"password\\\":\\\"redacted\\\",\\\"test\\\":\\\"Hello, \u4E16\u754C\\\"}\",\"{\\\"email\\\":\\\"dummy2@dummy.com\\\",\\\"password\\\":\\\"redacted\\\",\\\"test\\\":\\\"Hello, \u4E16\u754C\\\"}\",\"{\\\"email\\\":\\\"dummy3@dummy.com\\\",\\\"password\\\":\\\"redacted\\\",\\\"test\\\":\\\"Hello, \u4E16\u754C\\\"}\"],\"properties\": {\"email\": {\"description\": \"Email\",\"pattern\": \".+@.+\",\"type\": \"string\",\"x-pii\": {\"examples\": [\"dummy0@dummy.com\",\"dummy1@dummy.com\",\"dummy2@dummy.com\",\"dummy3@dummy.com\"]}},\"password\": {\"description\": \"Word\",\"pattern\": \"[a-z0-9-]+\",\"type\": \"string\"},\"test\": {\"type\": \"string\"}},\"required\": [\"email\",\"test\",\"password\"],\"type\": \"object\"}}],\"responses\": {\"200\": {\"description\": \"\"}}}}},\"schemes\": [\"https\",\"http\"],\"swagger\": \"2.0\"}"
	// Swagger spec json encoded string for current request
	SwaggerSpec string `protobuf:"bytes,1,opt,name=swagger_spec,json=swaggerSpec,proto3" json:"swagger_spec,omitempty"`
}

func (m *SwaggerSpecRsp) Reset()      { *m = SwaggerSpecRsp{} }
func (*SwaggerSpecRsp) ProtoMessage() {}
func (*SwaggerSpecRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_edda31a2e072ec0d, []int{1}
}
func (m *SwaggerSpecRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwaggerSpecRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwaggerSpecRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwaggerSpecRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwaggerSpecRsp.Merge(m, src)
}
func (m *SwaggerSpecRsp) XXX_Size() int {
	return m.Size()
}
func (m *SwaggerSpecRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SwaggerSpecRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SwaggerSpecRsp proto.InternalMessageInfo

func (m *SwaggerSpecRsp) GetSwaggerSpec() string {
	if m != nil {
		return m.SwaggerSpec
	}
	return ""
}

// Get API Endpoints For Groups Request
//
// x-displayName: "Get API Endpoints For Groups"
// Request shape for Get API Endpoints For Groups
type GetAPIEndpointsForGroupsReq struct {
	// Http LoadBalancer Name
	//
	// x-displayName: "Http LoadBalancer Name"
	// x-example: "blogging-app"
	// Http LoadBalancer for the current request
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the Http LoadBalancer for the current request
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *GetAPIEndpointsForGroupsReq) Reset()      { *m = GetAPIEndpointsForGroupsReq{} }
func (*GetAPIEndpointsForGroupsReq) ProtoMessage() {}
func (*GetAPIEndpointsForGroupsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_edda31a2e072ec0d, []int{2}
}
func (m *GetAPIEndpointsForGroupsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAPIEndpointsForGroupsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAPIEndpointsForGroupsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAPIEndpointsForGroupsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAPIEndpointsForGroupsReq.Merge(m, src)
}
func (m *GetAPIEndpointsForGroupsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAPIEndpointsForGroupsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAPIEndpointsForGroupsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAPIEndpointsForGroupsReq proto.InternalMessageInfo

func (m *GetAPIEndpointsForGroupsReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetAPIEndpointsForGroupsReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// Get API Endpoints For Groups Response
//
// x-displayName: "Get API Endpoints For Groups Response"
// Response shape for Get API Endpoints For Groups request
type GetAPIEndpointsForGroupsRsp struct {
	// API Endpoints
	//
	// x-displayName: "API Endpoints"
	// A list of API endpoints associated with the HTTP Loadbalancer
	ApiEndpoints []*APIGroupsApiep `protobuf:"bytes,1,rep,name=api_endpoints,json=apiEndpoints,proto3" json:"api_endpoints,omitempty"`
	// apieps_timestamp
	//
	// x-displayName: "API Endpoints Timestamp"
	// The API endpoints timestamp indicates most recent update of API endpoints happened
	// The API Discovery periodically updates the API endpoints list based on application's traffic
	ApiepsTimestamp *types.Timestamp `protobuf:"bytes,2,opt,name=apieps_timestamp,json=apiepsTimestamp,proto3" json:"apieps_timestamp,omitempty"`
}

func (m *GetAPIEndpointsForGroupsRsp) Reset()      { *m = GetAPIEndpointsForGroupsRsp{} }
func (*GetAPIEndpointsForGroupsRsp) ProtoMessage() {}
func (*GetAPIEndpointsForGroupsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_edda31a2e072ec0d, []int{3}
}
func (m *GetAPIEndpointsForGroupsRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAPIEndpointsForGroupsRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAPIEndpointsForGroupsRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAPIEndpointsForGroupsRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAPIEndpointsForGroupsRsp.Merge(m, src)
}
func (m *GetAPIEndpointsForGroupsRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetAPIEndpointsForGroupsRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAPIEndpointsForGroupsRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetAPIEndpointsForGroupsRsp proto.InternalMessageInfo

func (m *GetAPIEndpointsForGroupsRsp) GetApiEndpoints() []*APIGroupsApiep {
	if m != nil {
		return m.ApiEndpoints
	}
	return nil
}

func (m *GetAPIEndpointsForGroupsRsp) GetApiepsTimestamp() *types.Timestamp {
	if m != nil {
		return m.ApiepsTimestamp
	}
	return nil
}

// API Endpoint for API Group Evaluation
//
// x-displayName: "API Groups Endpoint"
// Apiep for the Evaluate Api Group Builder response.
type APIGroupsApiep struct {
	// Path
	//
	// x-displayName: "Path"
	// x-example: "/api/v1/users/{id}"
	// API Endpoint path
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Method
	//
	// x-displayName: "Method"
	// API Endpoint method
	Method schema.HttpMethod `protobuf:"varint,2,opt,name=method,proto3,enum=ves.io.schema.HttpMethod" json:"method,omitempty"`
	// Category
	//
	// x-displayName: "Category"
	// x-example: "[APIEP_CATEGORY_DISCOVERED, APIEP_CATEGORY_INVENTORY]"
	// The category of the API Endpoint relative to API Inventory.
	Category []app_type.APIEPCategory `protobuf:"varint,3,rep,packed,name=category,proto3,enum=ves.io.schema.app_type.APIEPCategory" json:"category,omitempty"`
	// Sensitive Data
	//
	// x-displayName: "Sensitive Data"
	// x-example: "[SENSITIVE_DATA_TYPE_CCN, SENSITIVE_DATA_TYPE_SSN]"
	// Sensitive Data of the API endpoint
	SensitiveData []app_type.SensitiveDataType `protobuf:"varint,4,rep,packed,name=sensitive_data,json=sensitiveData,proto3,enum=ves.io.schema.app_type.SensitiveDataType" json:"sensitive_data,omitempty"` // Deprecated: Do not use.
	// Sensitive Data
	//
	// x-displayName: "Sensitive Data"
	// x-example: "[Social-Security-Number, Credit-Card-Number]"
	// Sensitive Data of the API endpoint
	SensitiveDataTypes []string `protobuf:"bytes,5,rep,name=sensitive_data_types,json=sensitiveDataTypes,proto3" json:"sensitive_data_types,omitempty"`
	// Risk score
	//
	// x-displayName: "Risk score"
	// Risk score for this API Endpoint.
	RiskScore *app_type.RiskScore `protobuf:"bytes,6,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`
}

func (m *APIGroupsApiep) Reset()      { *m = APIGroupsApiep{} }
func (*APIGroupsApiep) ProtoMessage() {}
func (*APIGroupsApiep) Descriptor() ([]byte, []int) {
	return fileDescriptor_edda31a2e072ec0d, []int{4}
}
func (m *APIGroupsApiep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIGroupsApiep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIGroupsApiep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIGroupsApiep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIGroupsApiep.Merge(m, src)
}
func (m *APIGroupsApiep) XXX_Size() int {
	return m.Size()
}
func (m *APIGroupsApiep) XXX_DiscardUnknown() {
	xxx_messageInfo_APIGroupsApiep.DiscardUnknown(m)
}

var xxx_messageInfo_APIGroupsApiep proto.InternalMessageInfo

func (m *APIGroupsApiep) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *APIGroupsApiep) GetMethod() schema.HttpMethod {
	if m != nil {
		return m.Method
	}
	return schema.ANY
}

func (m *APIGroupsApiep) GetCategory() []app_type.APIEPCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

// Deprecated: Do not use.
func (m *APIGroupsApiep) GetSensitiveData() []app_type.SensitiveDataType {
	if m != nil {
		return m.SensitiveData
	}
	return nil
}

func (m *APIGroupsApiep) GetSensitiveDataTypes() []string {
	if m != nil {
		return m.SensitiveDataTypes
	}
	return nil
}

func (m *APIGroupsApiep) GetRiskScore() *app_type.RiskScore {
	if m != nil {
		return m.RiskScore
	}
	return nil
}

// Get API Endpoints Schema Updates Request
//
// x-displayName: "Get API Endpoints Schema Updates Request"
// Request shape for Get API Endpoints Schema Updates
type GetAPIEndpointsSchemaUpdatesReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// The namespace of the HTTP Loadbalancer for the current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "name"
	// The name of the HTTP Loadbalancer for the current request
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// API Endpoints Filter
	//
	// x-displayName: "API Endpoints Filter"
	// The list of discovered API endpoint to get schema for.
	// NOTE: if empty, then the all API endpoints with schema changes would be returned
	ApiEndpointsFilter []*views.ApiOperation `protobuf:"bytes,3,rep,name=api_endpoints_filter,json=apiEndpointsFilter,proto3" json:"api_endpoints_filter,omitempty"`
	// Query Type
	//
	// x-displayName: "Query Type"
	// An option not to populate the schema fields, to reduce response size and time.
	QueryType ApiInventorySchemaQueryType `protobuf:"varint,4,opt,name=query_type,json=queryType,proto3,enum=ves.io.schema.views.http_loadbalancer.ApiInventorySchemaQueryType" json:"query_type,omitempty"`
}

func (m *GetAPIEndpointsSchemaUpdatesReq) Reset()      { *m = GetAPIEndpointsSchemaUpdatesReq{} }
func (*GetAPIEndpointsSchemaUpdatesReq) ProtoMessage() {}
func (*GetAPIEndpointsSchemaUpdatesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_edda31a2e072ec0d, []int{5}
}
func (m *GetAPIEndpointsSchemaUpdatesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAPIEndpointsSchemaUpdatesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAPIEndpointsSchemaUpdatesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAPIEndpointsSchemaUpdatesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAPIEndpointsSchemaUpdatesReq.Merge(m, src)
}
func (m *GetAPIEndpointsSchemaUpdatesReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAPIEndpointsSchemaUpdatesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAPIEndpointsSchemaUpdatesReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAPIEndpointsSchemaUpdatesReq proto.InternalMessageInfo

func (m *GetAPIEndpointsSchemaUpdatesReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetAPIEndpointsSchemaUpdatesReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetAPIEndpointsSchemaUpdatesReq) GetApiEndpointsFilter() []*views.ApiOperation {
	if m != nil {
		return m.ApiEndpointsFilter
	}
	return nil
}

func (m *GetAPIEndpointsSchemaUpdatesReq) GetQueryType() ApiInventorySchemaQueryType {
	if m != nil {
		return m.QueryType
	}
	return API_INVENTORY_SCHEMA_FULL_RESPONSE
}

// Get API Endpoints Schema Updates Response
//
// x-displayName: "Get API Endpoints Schema Updates Response"
// Response shape for Get API Endpoints Schema Updates
type GetAPIEndpointsSchemaUpdatesResp struct {
	// API Endpoints Current Schemas
	//
	// x-displayName: "API Endpoints Current Schemas"
	// The list of discovered API endpoints with current schemas
	ApiEndpointsCurrentSchemas []*views.ApiEndpointWithSchema `protobuf:"bytes,1,rep,name=api_endpoints_current_schemas,json=apiEndpointsCurrentSchemas,proto3" json:"api_endpoints_current_schemas,omitempty"`
	// API Endpoints Updated Schemas
	//
	// x-displayName: "API Endpoints Updated Schemas"
	// The list of API Inventory API endpoints with updated schemas
	ApiEndpointsUpdatedSchemas []*views.ApiEndpointWithSchema `protobuf:"bytes,2,rep,name=api_endpoints_updated_schemas,json=apiEndpointsUpdatedSchemas,proto3" json:"api_endpoints_updated_schemas,omitempty"`
}

func (m *GetAPIEndpointsSchemaUpdatesResp) Reset()      { *m = GetAPIEndpointsSchemaUpdatesResp{} }
func (*GetAPIEndpointsSchemaUpdatesResp) ProtoMessage() {}
func (*GetAPIEndpointsSchemaUpdatesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_edda31a2e072ec0d, []int{6}
}
func (m *GetAPIEndpointsSchemaUpdatesResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAPIEndpointsSchemaUpdatesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAPIEndpointsSchemaUpdatesResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAPIEndpointsSchemaUpdatesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAPIEndpointsSchemaUpdatesResp.Merge(m, src)
}
func (m *GetAPIEndpointsSchemaUpdatesResp) XXX_Size() int {
	return m.Size()
}
func (m *GetAPIEndpointsSchemaUpdatesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAPIEndpointsSchemaUpdatesResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetAPIEndpointsSchemaUpdatesResp proto.InternalMessageInfo

func (m *GetAPIEndpointsSchemaUpdatesResp) GetApiEndpointsCurrentSchemas() []*views.ApiEndpointWithSchema {
	if m != nil {
		return m.ApiEndpointsCurrentSchemas
	}
	return nil
}

func (m *GetAPIEndpointsSchemaUpdatesResp) GetApiEndpointsUpdatedSchemas() []*views.ApiEndpointWithSchema {
	if m != nil {
		return m.ApiEndpointsUpdatedSchemas
	}
	return nil
}

// Update API Endpoints Schemas Request
//
// x-displayName: "Update API Endpoints Schemas Request"
// Request shape for Update API Endpoints Schemas
type UpdateAPIEndpointsSchemasReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// The namespace of the HTTP Loadbalancer for the current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "name"
	// The name of the HTTP Loadbalancer for the current request
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// API Endpoints Schema Updates
	//
	// x-displayName: "API Endpoints Schema Updates"
	// x-required
	// The list of API Inventory API endpoints schema updates.
	ApiEndpointsSchemaUpdates []*views.ApiEndpointWithSchema `protobuf:"bytes,3,rep,name=api_endpoints_schema_updates,json=apiEndpointsSchemaUpdates,proto3" json:"api_endpoints_schema_updates,omitempty"`
}

func (m *UpdateAPIEndpointsSchemasReq) Reset()      { *m = UpdateAPIEndpointsSchemasReq{} }
func (*UpdateAPIEndpointsSchemasReq) ProtoMessage() {}
func (*UpdateAPIEndpointsSchemasReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_edda31a2e072ec0d, []int{7}
}
func (m *UpdateAPIEndpointsSchemasReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAPIEndpointsSchemasReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAPIEndpointsSchemasReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAPIEndpointsSchemasReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAPIEndpointsSchemasReq.Merge(m, src)
}
func (m *UpdateAPIEndpointsSchemasReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAPIEndpointsSchemasReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAPIEndpointsSchemasReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAPIEndpointsSchemasReq proto.InternalMessageInfo

func (m *UpdateAPIEndpointsSchemasReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateAPIEndpointsSchemasReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateAPIEndpointsSchemasReq) GetApiEndpointsSchemaUpdates() []*views.ApiEndpointWithSchema {
	if m != nil {
		return m.ApiEndpointsSchemaUpdates
	}
	return nil
}

// Update API Endpoints Schema Response
//
// x-displayName: "Update API Endpoints Schema Response"
// Response shape for Update API Endpoints With Newly Discovered Schema
type UpdateAPIEndpointsSchemasResp struct {
	// Updated API Endpoints
	//
	// x-displayName: "Updated API Endpoints"
	// The list of API endpoints which were successfully proceeded by the API Inventory request.
	UpdatedApiEndpoints []*views.ApiOperation `protobuf:"bytes,1,rep,name=updated_api_endpoints,json=updatedApiEndpoints,proto3" json:"updated_api_endpoints,omitempty"`
}

func (m *UpdateAPIEndpointsSchemasResp) Reset()      { *m = UpdateAPIEndpointsSchemasResp{} }
func (*UpdateAPIEndpointsSchemasResp) ProtoMessage() {}
func (*UpdateAPIEndpointsSchemasResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_edda31a2e072ec0d, []int{8}
}
func (m *UpdateAPIEndpointsSchemasResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAPIEndpointsSchemasResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAPIEndpointsSchemasResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAPIEndpointsSchemasResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAPIEndpointsSchemasResp.Merge(m, src)
}
func (m *UpdateAPIEndpointsSchemasResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAPIEndpointsSchemasResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAPIEndpointsSchemasResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAPIEndpointsSchemasResp proto.InternalMessageInfo

func (m *UpdateAPIEndpointsSchemasResp) GetUpdatedApiEndpoints() []*views.ApiOperation {
	if m != nil {
		return m.UpdatedApiEndpoints
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.views.http_loadbalancer.ApiInventorySchemaQueryType", ApiInventorySchemaQueryType_name, ApiInventorySchemaQueryType_value)
	golang_proto.RegisterEnum("ves.io.schema.views.http_loadbalancer.ApiInventorySchemaQueryType", ApiInventorySchemaQueryType_name, ApiInventorySchemaQueryType_value)
	proto.RegisterType((*SwaggerSpecReq)(nil), "ves.io.schema.views.http_loadbalancer.SwaggerSpecReq")
	golang_proto.RegisterType((*SwaggerSpecReq)(nil), "ves.io.schema.views.http_loadbalancer.SwaggerSpecReq")
	proto.RegisterType((*SwaggerSpecRsp)(nil), "ves.io.schema.views.http_loadbalancer.SwaggerSpecRsp")
	golang_proto.RegisterType((*SwaggerSpecRsp)(nil), "ves.io.schema.views.http_loadbalancer.SwaggerSpecRsp")
	proto.RegisterType((*GetAPIEndpointsForGroupsReq)(nil), "ves.io.schema.views.http_loadbalancer.GetAPIEndpointsForGroupsReq")
	golang_proto.RegisterType((*GetAPIEndpointsForGroupsReq)(nil), "ves.io.schema.views.http_loadbalancer.GetAPIEndpointsForGroupsReq")
	proto.RegisterType((*GetAPIEndpointsForGroupsRsp)(nil), "ves.io.schema.views.http_loadbalancer.GetAPIEndpointsForGroupsRsp")
	golang_proto.RegisterType((*GetAPIEndpointsForGroupsRsp)(nil), "ves.io.schema.views.http_loadbalancer.GetAPIEndpointsForGroupsRsp")
	proto.RegisterType((*APIGroupsApiep)(nil), "ves.io.schema.views.http_loadbalancer.APIGroupsApiep")
	golang_proto.RegisterType((*APIGroupsApiep)(nil), "ves.io.schema.views.http_loadbalancer.APIGroupsApiep")
	proto.RegisterType((*GetAPIEndpointsSchemaUpdatesReq)(nil), "ves.io.schema.views.http_loadbalancer.GetAPIEndpointsSchemaUpdatesReq")
	golang_proto.RegisterType((*GetAPIEndpointsSchemaUpdatesReq)(nil), "ves.io.schema.views.http_loadbalancer.GetAPIEndpointsSchemaUpdatesReq")
	proto.RegisterType((*GetAPIEndpointsSchemaUpdatesResp)(nil), "ves.io.schema.views.http_loadbalancer.GetAPIEndpointsSchemaUpdatesResp")
	golang_proto.RegisterType((*GetAPIEndpointsSchemaUpdatesResp)(nil), "ves.io.schema.views.http_loadbalancer.GetAPIEndpointsSchemaUpdatesResp")
	proto.RegisterType((*UpdateAPIEndpointsSchemasReq)(nil), "ves.io.schema.views.http_loadbalancer.UpdateAPIEndpointsSchemasReq")
	golang_proto.RegisterType((*UpdateAPIEndpointsSchemasReq)(nil), "ves.io.schema.views.http_loadbalancer.UpdateAPIEndpointsSchemasReq")
	proto.RegisterType((*UpdateAPIEndpointsSchemasResp)(nil), "ves.io.schema.views.http_loadbalancer.UpdateAPIEndpointsSchemasResp")
	golang_proto.RegisterType((*UpdateAPIEndpointsSchemasResp)(nil), "ves.io.schema.views.http_loadbalancer.UpdateAPIEndpointsSchemasResp")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/http_loadbalancer/public_apiep_customapi.proto", fileDescriptor_edda31a2e072ec0d)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/http_loadbalancer/public_apiep_customapi.proto", fileDescriptor_edda31a2e072ec0d)
}

var fileDescriptor_edda31a2e072ec0d = []byte{
	// 1355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xac, 0xd3, 0xd2, 0x4c, 0xda, 0x10, 0x2d, 0x45, 0x72, 0xdc, 0x74, 0xeb, 0xae, 0x54,
	0x14, 0xa2, 0xda, 0x5b, 0x52, 0x8a, 0x50, 0x4f, 0xd8, 0x89, 0x93, 0x46, 0xb4, 0x49, 0x58, 0x27,
	0x20, 0xca, 0x61, 0x35, 0xde, 0x9d, 0xac, 0x87, 0xda, 0x3b, 0xd3, 0x9d, 0xb1, 0x53, 0x0b, 0x55,
	0xaa, 0x7a, 0xe2, 0x56, 0x54, 0x84, 0xb8, 0x71, 0x44, 0xfc, 0x00, 0x0e, 0x15, 0xbd, 0xe4, 0xd6,
	0x4a, 0x48, 0xa8, 0x82, 0x4b, 0xc5, 0x05, 0xea, 0xf4, 0x00, 0x12, 0x87, 0x8a, 0x5f, 0x80, 0x76,
	0x76, 0xd7, 0xf5, 0x3a, 0xb1, 0x31, 0x4d, 0xb9, 0x24, 0xe3, 0x7d, 0xef, 0x7d, 0x6f, 0xde, 0xf7,
	0xbe, 0x7d, 0x33, 0x0b, 0x4b, 0x2d, 0xcc, 0x0b, 0x84, 0x1a, 0xdc, 0xae, 0xe1, 0x06, 0x32, 0x5a,
	0x04, 0x6f, 0x73, 0xa3, 0x26, 0x04, 0xb3, 0xea, 0x14, 0x39, 0x55, 0x54, 0x47, 0x9e, 0x8d, 0x7d,
	0x83, 0x35, 0xab, 0x75, 0x62, 0x5b, 0x88, 0x11, 0xcc, 0x2c, 0xbb, 0xc9, 0x05, 0x6d, 0x20, 0x46,
	0x0a, 0xcc, 0xa7, 0x82, 0xaa, 0x67, 0x42, 0x8c, 0x42, 0x88, 0x51, 0x90, 0x18, 0x85, 0x3d, 0x18,
	0xd9, 0xbc, 0x4b, 0x44, 0xad, 0x59, 0x2d, 0xd8, 0xb4, 0x61, 0xb8, 0xd4, 0xa5, 0x86, 0x8c, 0xae,
	0x36, 0xb7, 0xe4, 0x2f, 0xf9, 0x43, 0xae, 0x42, 0xd4, 0xec, 0x8c, 0x4b, 0xa9, 0x5b, 0xc7, 0x06,
	0x62, 0xc4, 0x40, 0x9e, 0x47, 0x05, 0x12, 0x84, 0x7a, 0x3c, 0xb2, 0x4e, 0xf7, 0x58, 0x83, 0x54,
	0x55, 0xea, 0xb4, 0x23, 0xd3, 0xa9, 0xc8, 0xd4, 0x85, 0x17, 0xa4, 0x81, 0xb9, 0x40, 0x0d, 0x16,
	0x39, 0xe8, 0xc9, 0x9a, 0x11, 0x63, 0x96, 0x68, 0x33, 0x6c, 0x04, 0x7f, 0x62, 0xfc, 0x13, 0x49,
	0x1f, 0xca, 0x12, 0xc9, 0x93, 0xc6, 0xde, 0xb8, 0x99, 0x3e, 0x3e, 0x51, 0x9d, 0x38, 0x48, 0xe0,
	0xfd, 0x33, 0xb7, 0x30, 0xc7, 0x5e, 0xab, 0x0f, 0x3c, 0xb7, 0xb7, 0x23, 0x56, 0xd2, 0xe3, 0xd4,
	0x7e, 0x3d, 0xeb, 0xdd, 0xc4, 0xb9, 0x7e, 0x07, 0x5f, 0x34, 0x51, 0xdd, 0xaa, 0x51, 0x2e, 0x2c,
	0xc7, 0xe3, 0x16, 0xf1, 0xb6, 0xa8, 0x41, 0xab, 0x9f, 0x62, 0x5b, 0x84, 0x11, 0x7a, 0x09, 0x4e,
	0x56, 0xb6, 0x91, 0xeb, 0x62, 0xbf, 0xc2, 0xb0, 0x6d, 0xe2, 0xeb, 0xaa, 0x0a, 0xc7, 0x3c, 0xd4,
	0xc0, 0x19, 0x90, 0x03, 0xb3, 0xe3, 0xa6, 0x5c, 0xab, 0x33, 0x70, 0x3c, 0xf8, 0xcf, 0x19, 0xb2,
	0x71, 0x46, 0x91, 0x86, 0xe7, 0x0f, 0xf4, 0xf3, 0x49, 0x0c, 0xce, 0xd4, 0xd3, 0xf0, 0x28, 0x0f,
	0x9f, 0x58, 0x9c, 0x61, 0x3b, 0xc2, 0x9a, 0xe0, 0xcf, 0xbd, 0xf4, 0x35, 0x78, 0x62, 0x19, 0x8b,
	0xe2, 0xfa, 0x4a, 0xd9, 0x73, 0x18, 0x25, 0x9e, 0xe0, 0x4b, 0xd4, 0x5f, 0xf6, 0x69, 0x93, 0xf1,
	0x17, 0xdb, 0xc5, 0x0e, 0x18, 0x82, 0xc8, 0x99, 0x7a, 0x15, 0x1e, 0x43, 0x8c, 0x58, 0x38, 0x36,
	0x66, 0x40, 0x2e, 0x3d, 0x3b, 0x31, 0x7f, 0xa1, 0x30, 0x92, 0x88, 0x0b, 0xc5, 0xf5, 0x95, 0x10,
	0xab, 0x18, 0xbc, 0x0a, 0xe6, 0x51, 0xc4, 0x48, 0x37, 0x8f, 0x5a, 0x86, 0x53, 0xf2, 0x0d, 0xe1,
	0x56, 0x57, 0x72, 0x72, 0x83, 0x13, 0xf3, 0xd9, 0x42, 0x28, 0xca, 0x42, 0x2c, 0xca, 0xc2, 0x46,
	0xec, 0x61, 0xbe, 0x1a, 0xc6, 0x74, 0x1f, 0xe8, 0x4f, 0x15, 0x38, 0x99, 0xcc, 0x13, 0xf0, 0xc0,
	0x90, 0xa8, 0xc5, 0x3c, 0x04, 0x6b, 0xf5, 0x2d, 0x78, 0xb8, 0x81, 0x45, 0x8d, 0x3a, 0x32, 0xc7,
	0xe4, 0xfc, 0x74, 0x5f, 0x09, 0x97, 0x84, 0x60, 0x57, 0xa4, 0x83, 0x19, 0x39, 0xaa, 0x45, 0x78,
	0xc4, 0x46, 0x02, 0xbb, 0xd4, 0x6f, 0x67, 0xd2, 0xb9, 0xf4, 0xec, 0xe4, 0xfc, 0x99, 0xbe, 0xa0,
	0xf8, 0x65, 0x08, 0x0a, 0x2d, 0xaf, 0x2f, 0x44, 0xce, 0x66, 0x37, 0x4c, 0xdd, 0x80, 0x93, 0x1c,
	0x7b, 0x9c, 0x08, 0xd2, 0xc2, 0x96, 0x83, 0x04, 0xca, 0x8c, 0x49, 0xa0, 0x37, 0x07, 0x01, 0x55,
	0x62, 0xef, 0x45, 0x24, 0xd0, 0x46, 0x9b, 0xe1, 0x92, 0x92, 0x01, 0xe6, 0x31, 0xde, 0xfb, 0x58,
	0x3d, 0x07, 0x8f, 0x27, 0x51, 0x65, 0x2c, 0xcf, 0x1c, 0xca, 0xa5, 0x67, 0xc7, 0x4d, 0x95, 0xf7,
	0x63, 0x70, 0xf5, 0x3d, 0x08, 0x7d, 0xc2, 0xaf, 0x59, 0xdc, 0xa6, 0x3e, 0xce, 0x1c, 0x96, 0x2c,
	0x9f, 0x1e, 0xb4, 0x07, 0x93, 0xf0, 0x6b, 0x95, 0xc0, 0xd1, 0x1c, 0xf7, 0xe3, 0xa5, 0xfe, 0xb5,
	0x02, 0x4f, 0xf5, 0x29, 0xa5, 0x22, 0xe3, 0x36, 0x59, 0xf0, 0xca, 0x4a, 0xfd, 0x25, 0xb4, 0x06,
	0xfa, 0xb4, 0xd6, 0x55, 0xa7, 0xd2, 0xa3, 0x4e, 0x0b, 0x1e, 0x4f, 0xe8, 0xcb, 0xda, 0x22, 0x75,
	0x81, 0x7d, 0x49, 0xf7, 0xde, 0x1d, 0x86, 0x32, 0x2b, 0x32, 0xb2, 0xc6, 0xb0, 0x2f, 0x07, 0x5c,
	0x09, 0xfe, 0xf0, 0xe7, 0x4e, 0xfa, 0xd0, 0x5d, 0xa0, 0x4c, 0x39, 0xa6, 0xda, 0x2b, 0xaf, 0x25,
	0x09, 0xa4, 0x22, 0x08, 0xaf, 0x37, 0xb1, 0xdf, 0x96, 0x95, 0x65, 0xc6, 0x64, 0xeb, 0x4b, 0xa3,
	0xaa, 0x97, 0x91, 0x15, 0xaf, 0x85, 0x3d, 0x41, 0xfd, 0x76, 0x58, 0xeb, 0x07, 0x01, 0x54, 0xc0,
	0xa8, 0x39, 0x7e, 0x3d, 0x5e, 0xea, 0xb7, 0x14, 0x98, 0x1b, 0xce, 0x0c, 0x67, 0x6a, 0x03, 0x9e,
	0x4c, 0x16, 0x6a, 0x37, 0x7d, 0x1f, 0x7b, 0xc2, 0x0a, 0xf7, 0x10, 0xbf, 0x58, 0x73, 0x83, 0x2a,
	0x8e, 0xa1, 0x3f, 0x22, 0xa2, 0x16, 0xa2, 0x9b, 0xd9, 0xde, 0x72, 0x17, 0x42, 0xb8, 0xd0, 0xc4,
	0xf7, 0xa6, 0x6b, 0xca, 0xbd, 0x38, 0xdd, 0x74, 0xca, 0xc1, 0xd2, 0x85, 0xa5, 0x39, 0x51, 0x3a,
	0xfd, 0x47, 0x00, 0x67, 0xc2, 0x47, 0x7b, 0x59, 0x78, 0x41, 0x65, 0xb4, 0xe1, 0x4c, 0xb2, 0x82,
	0x70, 0x8b, 0x51, 0x21, 0x3c, 0x52, 0xc8, 0x7f, 0x28, 0xa0, 0x74, 0x34, 0x90, 0xca, 0x2b, 0x77,
	0xc1, 0xd8, 0x11, 0x30, 0xe5, 0x98, 0xd3, 0xbd, 0xe5, 0x24, 0xfa, 0xa5, 0xb7, 0xe0, 0xc9, 0x21,
	0xc5, 0x70, 0xa6, 0x6e, 0xc2, 0xd7, 0x63, 0x3e, 0xf7, 0x9b, 0x8e, 0xff, 0x2e, 0x5b, 0xf3, 0xb5,
	0x28, 0xbe, 0x67, 0xa7, 0x7c, 0xee, 0x0e, 0x80, 0x27, 0x86, 0x68, 0x4e, 0x7d, 0x03, 0xea, 0xc5,
	0xf5, 0x15, 0x6b, 0x65, 0xf5, 0xc3, 0xf2, 0xea, 0xc6, 0x9a, 0xf9, 0xb1, 0x55, 0x59, 0xb8, 0x54,
	0xbe, 0x52, 0xb4, 0x96, 0x36, 0x2f, 0x5f, 0xb6, 0xcc, 0x72, 0x65, 0x7d, 0x6d, 0xb5, 0x52, 0x9e,
	0x4a, 0xa9, 0x39, 0x38, 0xb3, 0xaf, 0xdf, 0xc2, 0xa6, 0x69, 0x96, 0x57, 0x37, 0xa6, 0xc0, 0x40,
	0x8f, 0xcd, 0xf5, 0xc5, 0xe2, 0x46, 0x79, 0x71, 0x4a, 0xc9, 0x8e, 0xed, 0xdc, 0x07, 0xa9, 0xf9,
	0x6f, 0x27, 0xe0, 0x94, 0x1c, 0xa9, 0x97, 0x4b, 0x0b, 0xf2, 0x1a, 0x53, 0x5c, 0x5f, 0x51, 0xff,
	0x06, 0x70, 0x72, 0x19, 0x8b, 0x9e, 0xd3, 0x4b, 0x1d, 0xf5, 0x3c, 0x48, 0x9e, 0x9a, 0xd9, 0xe3,
	0xf1, 0x9c, 0x0f, 0x6e, 0x47, 0xc1, 0x00, 0x2e, 0x51, 0xa7, 0xad, 0xdf, 0x05, 0x0f, 0xef, 0x29,
	0xa0, 0xf3, 0x20, 0x63, 0x6c, 0x5d, 0xb8, 0x61, 0xe7, 0xb7, 0x11, 0x62, 0x79, 0xe4, 0xb4, 0x02,
	0x04, 0x27, 0xdf, 0xa0, 0x1e, 0x11, 0xd4, 0x3f, 0x1b, 0x9c, 0xfb, 0x79, 0x42, 0xf3, 0x2e, 0xf6,
	0xb0, 0x8f, 0xea, 0x79, 0x1f, 0x23, 0xe7, 0xf6, 0x2f, 0x4f, 0xbf, 0x54, 0x36, 0xd5, 0x4a, 0x74,
	0xff, 0x32, 0xba, 0x02, 0xe3, 0xc6, 0x67, 0xdd, 0xf5, 0xcd, 0xbd, 0xf7, 0xb5, 0xc8, 0x7c, 0xd3,
	0x48, 0x34, 0xd3, 0xe8, 0x3d, 0x8c, 0xd5, 0xef, 0x15, 0x98, 0x19, 0x74, 0x50, 0xaa, 0xa3, 0x0e,
	0x94, 0x21, 0x67, 0x77, 0xf6, 0xc0, 0x18, 0x9c, 0xe9, 0x77, 0x62, 0xe6, 0xde, 0x19, 0x81, 0x39,
	0xe6, 0xd3, 0x1b, 0xed, 0x3c, 0xc7, 0x76, 0xd3, 0x27, 0xa2, 0xfd, 0x9c, 0xc0, 0xf7, 0xf5, 0xa5,
	0x97, 0x43, 0xe0, 0x45, 0x30, 0xa7, 0x7e, 0x93, 0x86, 0x33, 0xc3, 0x66, 0xa3, 0xba, 0xf4, 0x62,
	0x65, 0xf7, 0x1f, 0x3d, 0xd9, 0xe5, 0x97, 0x82, 0xc3, 0x99, 0xfe, 0x97, 0xe4, 0xf0, 0xd7, 0x7b,
	0xca, 0xbb, 0x9b, 0x95, 0x72, 0x2e, 0xba, 0x0c, 0xe6, 0x82, 0xcb, 0x60, 0x2e, 0xbc, 0xc9, 0xe7,
	0x10, 0x23, 0x43, 0xe7, 0xfd, 0x01, 0xf9, 0xaf, 0xeb, 0xee, 0x81, 0xf8, 0x27, 0xf1, 0xf8, 0xe8,
	0x93, 0xb3, 0x8b, 0x45, 0xdf, 0x0c, 0x0d, 0x1a, 0xf4, 0x79, 0x1a, 0x4e, 0x0f, 0x1c, 0x76, 0xea,
	0xc2, 0x88, 0xac, 0x0e, 0x9b, 0xfd, 0xd9, 0xc5, 0x83, 0x83, 0x70, 0xa6, 0xff, 0x16, 0xf4, 0xe4,
	0xc2, 0xb0, 0x9e, 0x0c, 0x8c, 0xef, 0x3c, 0xc8, 0xbc, 0xbd, 0x4f, 0x43, 0x9a, 0x1c, 0x0f, 0xec,
	0xc6, 0xb6, 0x4f, 0x04, 0x96, 0xed, 0xa8, 0xe9, 0xf6, 0xff, 0xd2, 0x8e, 0xb0, 0x07, 0xf1, 0x79,
	0x7c, 0x11, 0xcc, 0x65, 0x2f, 0xee, 0xdc, 0x07, 0xe9, 0x9f, 0xef, 0x83, 0xb3, 0xa3, 0xd1, 0xb5,
	0x26, 0xbf, 0x48, 0x6e, 0xff, 0x94, 0x51, 0xce, 0x81, 0xd2, 0x57, 0xe0, 0xd1, 0x13, 0x2d, 0xf5,
	0xf8, 0x89, 0x96, 0x7a, 0xf6, 0x44, 0x03, 0xb7, 0x3a, 0x1a, 0xf8, 0xae, 0xa3, 0x81, 0x87, 0x1d,
	0x0d, 0x3c, 0xea, 0x68, 0xe0, 0xf7, 0x8e, 0x06, 0xfe, 0xe8, 0x68, 0xa9, 0x67, 0x1d, 0x0d, 0x7c,
	0xb1, 0xab, 0xa5, 0x76, 0x76, 0x35, 0xf0, 0x68, 0x57, 0x4b, 0x3d, 0xde, 0xd5, 0x52, 0x57, 0x3f,
	0x71, 0x29, 0xbb, 0xe6, 0x16, 0x5a, 0x34, 0xb8, 0x2f, 0xf9, 0xa8, 0xd0, 0xe4, 0x86, 0x5c, 0x6c,
	0x51, 0xbf, 0x11, 0xd0, 0xd2, 0x22, 0x0e, 0xf6, 0xf3, 0xb1, 0xd9, 0x60, 0x55, 0x97, 0x1a, 0xf8,
	0x86, 0x88, 0xbe, 0x96, 0x86, 0x7f, 0x09, 0x57, 0x0f, 0xcb, 0x1b, 0xfc, 0xf9, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xf3, 0x95, 0x35, 0xd6, 0x39, 0x0f, 0x00, 0x00,
}

func (x ApiInventorySchemaQueryType) String() string {
	s, ok := ApiInventorySchemaQueryType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SwaggerSpecReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SwaggerSpecReq)
	if !ok {
		that2, ok := that.(SwaggerSpecReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *SwaggerSpecRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SwaggerSpecRsp)
	if !ok {
		that2, ok := that.(SwaggerSpecRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SwaggerSpec != that1.SwaggerSpec {
		return false
	}
	return true
}
func (this *GetAPIEndpointsForGroupsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAPIEndpointsForGroupsReq)
	if !ok {
		that2, ok := that.(GetAPIEndpointsForGroupsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *GetAPIEndpointsForGroupsRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAPIEndpointsForGroupsRsp)
	if !ok {
		that2, ok := that.(GetAPIEndpointsForGroupsRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ApiEndpoints) != len(that1.ApiEndpoints) {
		return false
	}
	for i := range this.ApiEndpoints {
		if !this.ApiEndpoints[i].Equal(that1.ApiEndpoints[i]) {
			return false
		}
	}
	if !this.ApiepsTimestamp.Equal(that1.ApiepsTimestamp) {
		return false
	}
	return true
}
func (this *APIGroupsApiep) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIGroupsApiep)
	if !ok {
		that2, ok := that.(APIGroupsApiep)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if len(this.Category) != len(that1.Category) {
		return false
	}
	for i := range this.Category {
		if this.Category[i] != that1.Category[i] {
			return false
		}
	}
	if len(this.SensitiveData) != len(that1.SensitiveData) {
		return false
	}
	for i := range this.SensitiveData {
		if this.SensitiveData[i] != that1.SensitiveData[i] {
			return false
		}
	}
	if len(this.SensitiveDataTypes) != len(that1.SensitiveDataTypes) {
		return false
	}
	for i := range this.SensitiveDataTypes {
		if this.SensitiveDataTypes[i] != that1.SensitiveDataTypes[i] {
			return false
		}
	}
	if !this.RiskScore.Equal(that1.RiskScore) {
		return false
	}
	return true
}
func (this *GetAPIEndpointsSchemaUpdatesReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAPIEndpointsSchemaUpdatesReq)
	if !ok {
		that2, ok := that.(GetAPIEndpointsSchemaUpdatesReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.ApiEndpointsFilter) != len(that1.ApiEndpointsFilter) {
		return false
	}
	for i := range this.ApiEndpointsFilter {
		if !this.ApiEndpointsFilter[i].Equal(that1.ApiEndpointsFilter[i]) {
			return false
		}
	}
	if this.QueryType != that1.QueryType {
		return false
	}
	return true
}
func (this *GetAPIEndpointsSchemaUpdatesResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAPIEndpointsSchemaUpdatesResp)
	if !ok {
		that2, ok := that.(GetAPIEndpointsSchemaUpdatesResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ApiEndpointsCurrentSchemas) != len(that1.ApiEndpointsCurrentSchemas) {
		return false
	}
	for i := range this.ApiEndpointsCurrentSchemas {
		if !this.ApiEndpointsCurrentSchemas[i].Equal(that1.ApiEndpointsCurrentSchemas[i]) {
			return false
		}
	}
	if len(this.ApiEndpointsUpdatedSchemas) != len(that1.ApiEndpointsUpdatedSchemas) {
		return false
	}
	for i := range this.ApiEndpointsUpdatedSchemas {
		if !this.ApiEndpointsUpdatedSchemas[i].Equal(that1.ApiEndpointsUpdatedSchemas[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateAPIEndpointsSchemasReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAPIEndpointsSchemasReq)
	if !ok {
		that2, ok := that.(UpdateAPIEndpointsSchemasReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.ApiEndpointsSchemaUpdates) != len(that1.ApiEndpointsSchemaUpdates) {
		return false
	}
	for i := range this.ApiEndpointsSchemaUpdates {
		if !this.ApiEndpointsSchemaUpdates[i].Equal(that1.ApiEndpointsSchemaUpdates[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateAPIEndpointsSchemasResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateAPIEndpointsSchemasResp)
	if !ok {
		that2, ok := that.(UpdateAPIEndpointsSchemasResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UpdatedApiEndpoints) != len(that1.UpdatedApiEndpoints) {
		return false
	}
	for i := range this.UpdatedApiEndpoints {
		if !this.UpdatedApiEndpoints[i].Equal(that1.UpdatedApiEndpoints[i]) {
			return false
		}
	}
	return true
}
func (this *SwaggerSpecReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.SwaggerSpecReq{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SwaggerSpecRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.SwaggerSpecRsp{")
	s = append(s, "SwaggerSpec: "+fmt.Sprintf("%#v", this.SwaggerSpec)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAPIEndpointsForGroupsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.GetAPIEndpointsForGroupsReq{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAPIEndpointsForGroupsRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.GetAPIEndpointsForGroupsRsp{")
	if this.ApiEndpoints != nil {
		s = append(s, "ApiEndpoints: "+fmt.Sprintf("%#v", this.ApiEndpoints)+",\n")
	}
	if this.ApiepsTimestamp != nil {
		s = append(s, "ApiepsTimestamp: "+fmt.Sprintf("%#v", this.ApiepsTimestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIGroupsApiep) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&http_loadbalancer.APIGroupsApiep{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	s = append(s, "SensitiveData: "+fmt.Sprintf("%#v", this.SensitiveData)+",\n")
	s = append(s, "SensitiveDataTypes: "+fmt.Sprintf("%#v", this.SensitiveDataTypes)+",\n")
	if this.RiskScore != nil {
		s = append(s, "RiskScore: "+fmt.Sprintf("%#v", this.RiskScore)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAPIEndpointsSchemaUpdatesReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&http_loadbalancer.GetAPIEndpointsSchemaUpdatesReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.ApiEndpointsFilter != nil {
		s = append(s, "ApiEndpointsFilter: "+fmt.Sprintf("%#v", this.ApiEndpointsFilter)+",\n")
	}
	s = append(s, "QueryType: "+fmt.Sprintf("%#v", this.QueryType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAPIEndpointsSchemaUpdatesResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.GetAPIEndpointsSchemaUpdatesResp{")
	if this.ApiEndpointsCurrentSchemas != nil {
		s = append(s, "ApiEndpointsCurrentSchemas: "+fmt.Sprintf("%#v", this.ApiEndpointsCurrentSchemas)+",\n")
	}
	if this.ApiEndpointsUpdatedSchemas != nil {
		s = append(s, "ApiEndpointsUpdatedSchemas: "+fmt.Sprintf("%#v", this.ApiEndpointsUpdatedSchemas)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateAPIEndpointsSchemasReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&http_loadbalancer.UpdateAPIEndpointsSchemasReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.ApiEndpointsSchemaUpdates != nil {
		s = append(s, "ApiEndpointsSchemaUpdates: "+fmt.Sprintf("%#v", this.ApiEndpointsSchemaUpdates)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateAPIEndpointsSchemasResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.UpdateAPIEndpointsSchemasResp{")
	if this.UpdatedApiEndpoints != nil {
		s = append(s, "UpdatedApiEndpoints: "+fmt.Sprintf("%#v", this.UpdatedApiEndpoints)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicApiepCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApiepLBCustomAPIClient is the client API for ApiepLBCustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiepLBCustomAPIClient interface {
	// Get Swagger Spec for App Type
	//
	// x-displayName: "Get Swagger Spec for Http Load Balancer"
	// Get the corresponding Swagger spec for the given HTTP load balancer
	GetSwaggerSpec(ctx context.Context, in *SwaggerSpecReq, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Get API Endpoints for groups
	//
	// x-displayName: "Get API Endpoints"
	// Get list of all API Endpoints associated with the HTTP loadbalancer in format suitable for API Groups management.
	GetAPIEndpointsForGroups(ctx context.Context, in *GetAPIEndpointsForGroupsReq, opts ...grpc.CallOption) (*GetAPIEndpointsForGroupsRsp, error)
	// Get API Endpoints Schema Updates
	//
	// x-displayName: "Get API Endpoints Schema Updates"
	// Get list of schema pairs, current and updated, for each endpoint in the request
	// or all pending changes if empty list is provided.
	// NOTE: any API endpoint defined in user swagger files should be ignored
	// DEPRECATED. USE virtual host custom api GetAPIEndpointsSchemaUpdates
	GetAPIEndpointsSchemaUpdates(ctx context.Context, in *GetAPIEndpointsSchemaUpdatesReq, opts ...grpc.CallOption) (*GetAPIEndpointsSchemaUpdatesResp, error)
	// Update API Endpoints Schemas
	//
	// x-displayName: "Update API Endpoints Schemas"
	// Update the payload schema for the specified endpoints or all pending changes if empty list is provided.
	// NOTE: only API endpoints returned by a call to `GetAPIEndpointsSchemaStates` can be updated.
	// DEPRECATED. USE virtual host custom api UpdateAPIEndpointsSchemas
	UpdateAPIEndpointsSchemas(ctx context.Context, in *UpdateAPIEndpointsSchemasReq, opts ...grpc.CallOption) (*UpdateAPIEndpointsSchemasResp, error)
}

type apiepLBCustomAPIClient struct {
	cc *grpc.ClientConn
}

func NewApiepLBCustomAPIClient(cc *grpc.ClientConn) ApiepLBCustomAPIClient {
	return &apiepLBCustomAPIClient{cc}
}

func (c *apiepLBCustomAPIClient) GetSwaggerSpec(ctx context.Context, in *SwaggerSpecReq, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI/GetSwaggerSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiepLBCustomAPIClient) GetAPIEndpointsForGroups(ctx context.Context, in *GetAPIEndpointsForGroupsReq, opts ...grpc.CallOption) (*GetAPIEndpointsForGroupsRsp, error) {
	out := new(GetAPIEndpointsForGroupsRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI/GetAPIEndpointsForGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiepLBCustomAPIClient) GetAPIEndpointsSchemaUpdates(ctx context.Context, in *GetAPIEndpointsSchemaUpdatesReq, opts ...grpc.CallOption) (*GetAPIEndpointsSchemaUpdatesResp, error) {
	out := new(GetAPIEndpointsSchemaUpdatesResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI/GetAPIEndpointsSchemaUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiepLBCustomAPIClient) UpdateAPIEndpointsSchemas(ctx context.Context, in *UpdateAPIEndpointsSchemasReq, opts ...grpc.CallOption) (*UpdateAPIEndpointsSchemasResp, error) {
	out := new(UpdateAPIEndpointsSchemasResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI/UpdateAPIEndpointsSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiepLBCustomAPIServer is the server API for ApiepLBCustomAPI service.
type ApiepLBCustomAPIServer interface {
	// Get Swagger Spec for App Type
	//
	// x-displayName: "Get Swagger Spec for Http Load Balancer"
	// Get the corresponding Swagger spec for the given HTTP load balancer
	GetSwaggerSpec(context.Context, *SwaggerSpecReq) (*httpbody.HttpBody, error)
	// Get API Endpoints for groups
	//
	// x-displayName: "Get API Endpoints"
	// Get list of all API Endpoints associated with the HTTP loadbalancer in format suitable for API Groups management.
	GetAPIEndpointsForGroups(context.Context, *GetAPIEndpointsForGroupsReq) (*GetAPIEndpointsForGroupsRsp, error)
	// Get API Endpoints Schema Updates
	//
	// x-displayName: "Get API Endpoints Schema Updates"
	// Get list of schema pairs, current and updated, for each endpoint in the request
	// or all pending changes if empty list is provided.
	// NOTE: any API endpoint defined in user swagger files should be ignored
	// DEPRECATED. USE virtual host custom api GetAPIEndpointsSchemaUpdates
	GetAPIEndpointsSchemaUpdates(context.Context, *GetAPIEndpointsSchemaUpdatesReq) (*GetAPIEndpointsSchemaUpdatesResp, error)
	// Update API Endpoints Schemas
	//
	// x-displayName: "Update API Endpoints Schemas"
	// Update the payload schema for the specified endpoints or all pending changes if empty list is provided.
	// NOTE: only API endpoints returned by a call to `GetAPIEndpointsSchemaStates` can be updated.
	// DEPRECATED. USE virtual host custom api UpdateAPIEndpointsSchemas
	UpdateAPIEndpointsSchemas(context.Context, *UpdateAPIEndpointsSchemasReq) (*UpdateAPIEndpointsSchemasResp, error)
}

// UnimplementedApiepLBCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedApiepLBCustomAPIServer struct {
}

func (*UnimplementedApiepLBCustomAPIServer) GetSwaggerSpec(ctx context.Context, req *SwaggerSpecReq) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwaggerSpec not implemented")
}
func (*UnimplementedApiepLBCustomAPIServer) GetAPIEndpointsForGroups(ctx context.Context, req *GetAPIEndpointsForGroupsReq) (*GetAPIEndpointsForGroupsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIEndpointsForGroups not implemented")
}
func (*UnimplementedApiepLBCustomAPIServer) GetAPIEndpointsSchemaUpdates(ctx context.Context, req *GetAPIEndpointsSchemaUpdatesReq) (*GetAPIEndpointsSchemaUpdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIEndpointsSchemaUpdates not implemented")
}
func (*UnimplementedApiepLBCustomAPIServer) UpdateAPIEndpointsSchemas(ctx context.Context, req *UpdateAPIEndpointsSchemasReq) (*UpdateAPIEndpointsSchemasResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPIEndpointsSchemas not implemented")
}

func RegisterApiepLBCustomAPIServer(s *grpc.Server, srv ApiepLBCustomAPIServer) {
	s.RegisterService(&_ApiepLBCustomAPI_serviceDesc, srv)
}

func _ApiepLBCustomAPI_GetSwaggerSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwaggerSpecReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepLBCustomAPIServer).GetSwaggerSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI/GetSwaggerSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepLBCustomAPIServer).GetSwaggerSpec(ctx, req.(*SwaggerSpecReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiepLBCustomAPI_GetAPIEndpointsForGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIEndpointsForGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepLBCustomAPIServer).GetAPIEndpointsForGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI/GetAPIEndpointsForGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepLBCustomAPIServer).GetAPIEndpointsForGroups(ctx, req.(*GetAPIEndpointsForGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiepLBCustomAPI_GetAPIEndpointsSchemaUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIEndpointsSchemaUpdatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepLBCustomAPIServer).GetAPIEndpointsSchemaUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI/GetAPIEndpointsSchemaUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepLBCustomAPIServer).GetAPIEndpointsSchemaUpdates(ctx, req.(*GetAPIEndpointsSchemaUpdatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiepLBCustomAPI_UpdateAPIEndpointsSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPIEndpointsSchemasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiepLBCustomAPIServer).UpdateAPIEndpointsSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI/UpdateAPIEndpointsSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiepLBCustomAPIServer).UpdateAPIEndpointsSchemas(ctx, req.(*UpdateAPIEndpointsSchemasReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiepLBCustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.http_loadbalancer.ApiepLBCustomAPI",
	HandlerType: (*ApiepLBCustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSwaggerSpec",
			Handler:    _ApiepLBCustomAPI_GetSwaggerSpec_Handler,
		},
		{
			MethodName: "GetAPIEndpointsForGroups",
			Handler:    _ApiepLBCustomAPI_GetAPIEndpointsForGroups_Handler,
		},
		{
			MethodName: "GetAPIEndpointsSchemaUpdates",
			Handler:    _ApiepLBCustomAPI_GetAPIEndpointsSchemaUpdates_Handler,
		},
		{
			MethodName: "UpdateAPIEndpointsSchemas",
			Handler:    _ApiepLBCustomAPI_UpdateAPIEndpointsSchemas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/http_loadbalancer/public_apiep_customapi.proto",
}

func (m *SwaggerSpecReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwaggerSpecReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwaggerSpecReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwaggerSpecRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwaggerSpecRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwaggerSpecRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwaggerSpec) > 0 {
		i -= len(m.SwaggerSpec)
		copy(dAtA[i:], m.SwaggerSpec)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.SwaggerSpec)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAPIEndpointsForGroupsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAPIEndpointsForGroupsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAPIEndpointsForGroupsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAPIEndpointsForGroupsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAPIEndpointsForGroupsRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAPIEndpointsForGroupsRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiepsTimestamp != nil {
		{
			size, err := m.ApiepsTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApiEndpoints) > 0 {
		for iNdEx := len(m.ApiEndpoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiEndpoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *APIGroupsApiep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIGroupsApiep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIGroupsApiep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RiskScore != nil {
		{
			size, err := m.RiskScore.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.SensitiveDataTypes) > 0 {
		for iNdEx := len(m.SensitiveDataTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SensitiveDataTypes[iNdEx])
			copy(dAtA[i:], m.SensitiveDataTypes[iNdEx])
			i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.SensitiveDataTypes[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SensitiveData) > 0 {
		dAtA4 := make([]byte, len(m.SensitiveData)*10)
		var j3 int
		for _, num := range m.SensitiveData {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Category) > 0 {
		dAtA6 := make([]byte, len(m.Category)*10)
		var j5 int
		for _, num := range m.Category {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if m.Method != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.Method))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAPIEndpointsSchemaUpdatesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAPIEndpointsSchemaUpdatesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAPIEndpointsSchemaUpdatesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryType != 0 {
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(m.QueryType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ApiEndpointsFilter) > 0 {
		for iNdEx := len(m.ApiEndpointsFilter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiEndpointsFilter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAPIEndpointsSchemaUpdatesResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAPIEndpointsSchemaUpdatesResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAPIEndpointsSchemaUpdatesResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiEndpointsUpdatedSchemas) > 0 {
		for iNdEx := len(m.ApiEndpointsUpdatedSchemas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiEndpointsUpdatedSchemas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ApiEndpointsCurrentSchemas) > 0 {
		for iNdEx := len(m.ApiEndpointsCurrentSchemas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiEndpointsCurrentSchemas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAPIEndpointsSchemasReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAPIEndpointsSchemasReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAPIEndpointsSchemasReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiEndpointsSchemaUpdates) > 0 {
		for iNdEx := len(m.ApiEndpointsSchemaUpdates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiEndpointsSchemaUpdates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAPIEndpointsSchemasResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAPIEndpointsSchemasResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAPIEndpointsSchemasResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdatedApiEndpoints) > 0 {
		for iNdEx := len(m.UpdatedApiEndpoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdatedApiEndpoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicApiepCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicApiepCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicApiepCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SwaggerSpecReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *SwaggerSpecRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SwaggerSpec)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *GetAPIEndpointsForGroupsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *GetAPIEndpointsForGroupsRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiEndpoints) > 0 {
		for _, e := range m.ApiEndpoints {
			l = e.Size()
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	if m.ApiepsTimestamp != nil {
		l = m.ApiepsTimestamp.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *APIGroupsApiep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if m.Method != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.Method))
	}
	if len(m.Category) > 0 {
		l = 0
		for _, e := range m.Category {
			l += sovPublicApiepCustomapi(uint64(e))
		}
		n += 1 + sovPublicApiepCustomapi(uint64(l)) + l
	}
	if len(m.SensitiveData) > 0 {
		l = 0
		for _, e := range m.SensitiveData {
			l += sovPublicApiepCustomapi(uint64(e))
		}
		n += 1 + sovPublicApiepCustomapi(uint64(l)) + l
	}
	if len(m.SensitiveDataTypes) > 0 {
		for _, s := range m.SensitiveDataTypes {
			l = len(s)
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	if m.RiskScore != nil {
		l = m.RiskScore.Size()
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	return n
}

func (m *GetAPIEndpointsSchemaUpdatesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if len(m.ApiEndpointsFilter) > 0 {
		for _, e := range m.ApiEndpointsFilter {
			l = e.Size()
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	if m.QueryType != 0 {
		n += 1 + sovPublicApiepCustomapi(uint64(m.QueryType))
	}
	return n
}

func (m *GetAPIEndpointsSchemaUpdatesResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiEndpointsCurrentSchemas) > 0 {
		for _, e := range m.ApiEndpointsCurrentSchemas {
			l = e.Size()
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	if len(m.ApiEndpointsUpdatedSchemas) > 0 {
		for _, e := range m.ApiEndpointsUpdatedSchemas {
			l = e.Size()
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	return n
}

func (m *UpdateAPIEndpointsSchemasReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicApiepCustomapi(uint64(l))
	}
	if len(m.ApiEndpointsSchemaUpdates) > 0 {
		for _, e := range m.ApiEndpointsSchemaUpdates {
			l = e.Size()
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	return n
}

func (m *UpdateAPIEndpointsSchemasResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UpdatedApiEndpoints) > 0 {
		for _, e := range m.UpdatedApiEndpoints {
			l = e.Size()
			n += 1 + l + sovPublicApiepCustomapi(uint64(l))
		}
	}
	return n
}

func sovPublicApiepCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicApiepCustomapi(x uint64) (n int) {
	return sovPublicApiepCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SwaggerSpecReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SwaggerSpecReq{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SwaggerSpecRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SwaggerSpecRsp{`,
		`SwaggerSpec:` + fmt.Sprintf("%v", this.SwaggerSpec) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAPIEndpointsForGroupsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAPIEndpointsForGroupsReq{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAPIEndpointsForGroupsRsp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApiEndpoints := "[]*APIGroupsApiep{"
	for _, f := range this.ApiEndpoints {
		repeatedStringForApiEndpoints += strings.Replace(f.String(), "APIGroupsApiep", "APIGroupsApiep", 1) + ","
	}
	repeatedStringForApiEndpoints += "}"
	s := strings.Join([]string{`&GetAPIEndpointsForGroupsRsp{`,
		`ApiEndpoints:` + repeatedStringForApiEndpoints + `,`,
		`ApiepsTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ApiepsTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIGroupsApiep) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIGroupsApiep{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Category:` + fmt.Sprintf("%v", this.Category) + `,`,
		`SensitiveData:` + fmt.Sprintf("%v", this.SensitiveData) + `,`,
		`SensitiveDataTypes:` + fmt.Sprintf("%v", this.SensitiveDataTypes) + `,`,
		`RiskScore:` + strings.Replace(fmt.Sprintf("%v", this.RiskScore), "RiskScore", "app_type.RiskScore", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAPIEndpointsSchemaUpdatesReq) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApiEndpointsFilter := "[]*ApiOperation{"
	for _, f := range this.ApiEndpointsFilter {
		repeatedStringForApiEndpointsFilter += strings.Replace(fmt.Sprintf("%v", f), "ApiOperation", "views.ApiOperation", 1) + ","
	}
	repeatedStringForApiEndpointsFilter += "}"
	s := strings.Join([]string{`&GetAPIEndpointsSchemaUpdatesReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ApiEndpointsFilter:` + repeatedStringForApiEndpointsFilter + `,`,
		`QueryType:` + fmt.Sprintf("%v", this.QueryType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAPIEndpointsSchemaUpdatesResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApiEndpointsCurrentSchemas := "[]*ApiEndpointWithSchema{"
	for _, f := range this.ApiEndpointsCurrentSchemas {
		repeatedStringForApiEndpointsCurrentSchemas += strings.Replace(fmt.Sprintf("%v", f), "ApiEndpointWithSchema", "views.ApiEndpointWithSchema", 1) + ","
	}
	repeatedStringForApiEndpointsCurrentSchemas += "}"
	repeatedStringForApiEndpointsUpdatedSchemas := "[]*ApiEndpointWithSchema{"
	for _, f := range this.ApiEndpointsUpdatedSchemas {
		repeatedStringForApiEndpointsUpdatedSchemas += strings.Replace(fmt.Sprintf("%v", f), "ApiEndpointWithSchema", "views.ApiEndpointWithSchema", 1) + ","
	}
	repeatedStringForApiEndpointsUpdatedSchemas += "}"
	s := strings.Join([]string{`&GetAPIEndpointsSchemaUpdatesResp{`,
		`ApiEndpointsCurrentSchemas:` + repeatedStringForApiEndpointsCurrentSchemas + `,`,
		`ApiEndpointsUpdatedSchemas:` + repeatedStringForApiEndpointsUpdatedSchemas + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateAPIEndpointsSchemasReq) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApiEndpointsSchemaUpdates := "[]*ApiEndpointWithSchema{"
	for _, f := range this.ApiEndpointsSchemaUpdates {
		repeatedStringForApiEndpointsSchemaUpdates += strings.Replace(fmt.Sprintf("%v", f), "ApiEndpointWithSchema", "views.ApiEndpointWithSchema", 1) + ","
	}
	repeatedStringForApiEndpointsSchemaUpdates += "}"
	s := strings.Join([]string{`&UpdateAPIEndpointsSchemasReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ApiEndpointsSchemaUpdates:` + repeatedStringForApiEndpointsSchemaUpdates + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateAPIEndpointsSchemasResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUpdatedApiEndpoints := "[]*ApiOperation{"
	for _, f := range this.UpdatedApiEndpoints {
		repeatedStringForUpdatedApiEndpoints += strings.Replace(fmt.Sprintf("%v", f), "ApiOperation", "views.ApiOperation", 1) + ","
	}
	repeatedStringForUpdatedApiEndpoints += "}"
	s := strings.Join([]string{`&UpdateAPIEndpointsSchemasResp{`,
		`UpdatedApiEndpoints:` + repeatedStringForUpdatedApiEndpoints + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicApiepCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SwaggerSpecReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwaggerSpecReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwaggerSpecReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwaggerSpecRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwaggerSpecRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwaggerSpecRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwaggerSpec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwaggerSpec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAPIEndpointsForGroupsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAPIEndpointsForGroupsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAPIEndpointsForGroupsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAPIEndpointsForGroupsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAPIEndpointsForGroupsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAPIEndpointsForGroupsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpoints = append(m.ApiEndpoints, &APIGroupsApiep{})
			if err := m.ApiEndpoints[len(m.ApiEndpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiepsTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiepsTimestamp == nil {
				m.ApiepsTimestamp = &types.Timestamp{}
			}
			if err := m.ApiepsTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIGroupsApiep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIGroupsApiep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIGroupsApiep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v app_type.APIEPCategory
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= app_type.APIEPCategory(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Category = append(m.Category, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Category) == 0 {
					m.Category = make([]app_type.APIEPCategory, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v app_type.APIEPCategory
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicApiepCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= app_type.APIEPCategory(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Category = append(m.Category, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
		case 4:
			if wireType == 0 {
				var v app_type.SensitiveDataType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= app_type.SensitiveDataType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SensitiveData = append(m.SensitiveData, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicApiepCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPublicApiepCustomapi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.SensitiveData) == 0 {
					m.SensitiveData = make([]app_type.SensitiveDataType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v app_type.SensitiveDataType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicApiepCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= app_type.SensitiveDataType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SensitiveData = append(m.SensitiveData, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveData", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SensitiveDataTypes = append(m.SensitiveDataTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskScore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RiskScore == nil {
				m.RiskScore = &app_type.RiskScore{}
			}
			if err := m.RiskScore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAPIEndpointsSchemaUpdatesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAPIEndpointsSchemaUpdatesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAPIEndpointsSchemaUpdatesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointsFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpointsFilter = append(m.ApiEndpointsFilter, &views.ApiOperation{})
			if err := m.ApiEndpointsFilter[len(m.ApiEndpointsFilter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryType", wireType)
			}
			m.QueryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryType |= ApiInventorySchemaQueryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAPIEndpointsSchemaUpdatesResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAPIEndpointsSchemaUpdatesResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAPIEndpointsSchemaUpdatesResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointsCurrentSchemas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpointsCurrentSchemas = append(m.ApiEndpointsCurrentSchemas, &views.ApiEndpointWithSchema{})
			if err := m.ApiEndpointsCurrentSchemas[len(m.ApiEndpointsCurrentSchemas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointsUpdatedSchemas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpointsUpdatedSchemas = append(m.ApiEndpointsUpdatedSchemas, &views.ApiEndpointWithSchema{})
			if err := m.ApiEndpointsUpdatedSchemas[len(m.ApiEndpointsUpdatedSchemas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAPIEndpointsSchemasReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAPIEndpointsSchemasReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAPIEndpointsSchemasReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointsSchemaUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpointsSchemaUpdates = append(m.ApiEndpointsSchemaUpdates, &views.ApiEndpointWithSchema{})
			if err := m.ApiEndpointsSchemaUpdates[len(m.ApiEndpointsSchemaUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAPIEndpointsSchemasResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAPIEndpointsSchemasResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAPIEndpointsSchemasResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedApiEndpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedApiEndpoints = append(m.UpdatedApiEndpoints, &views.ApiOperation{})
			if err := m.UpdatedApiEndpoints[len(m.UpdatedApiEndpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicApiepCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicApiepCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicApiepCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicApiepCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicApiepCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicApiepCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicApiepCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicApiepCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicApiepCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicApiepCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicApiepCustomapi = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package http_loadbalancer

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AssignAPIDefinitionReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AssignAPIDefinitionReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AssignAPIDefinitionReq) DeepCopy() *AssignAPIDefinitionReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AssignAPIDefinitionReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AssignAPIDefinitionReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AssignAPIDefinitionReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AssignAPIDefinitionReqValidator().Validate(ctx, m, opts...)
}

func (m *AssignAPIDefinitionReq) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetApiDefinitionDRefInfo()

}

func (m *AssignAPIDefinitionReq) GetApiDefinitionDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetApiDefinition()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("api_definition.Object")
	dri := db.DRefInfo{
		RefdType:   "api_definition.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "api_definition",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetApiDefinitionDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AssignAPIDefinitionReq) GetApiDefinitionDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "api_definition.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: api_definition")
	}

	vref := m.GetApiDefinition()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "api_definition.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateAssignAPIDefinitionReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAssignAPIDefinitionReq) ApiDefinitionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for api_definition")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAssignAPIDefinitionReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AssignAPIDefinitionReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AssignAPIDefinitionReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_definition"]; exists {

		vOpts := append(opts, db.WithValidateField("api_definition"))
		if err := fv(ctx, m.GetApiDefinition(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["create_if_not_exists"]; exists {

		vOpts := append(opts, db.WithValidateField("create_if_not_exists"))
		if err := fv(ctx, m.GetCreateIfNotExists(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAssignAPIDefinitionReqValidator = func() *ValidateAssignAPIDefinitionReq {
	v := &ValidateAssignAPIDefinitionReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiDefinition := v.ApiDefinitionValidationRuleHandler
	rulesApiDefinition := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhApiDefinition(rulesApiDefinition)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AssignAPIDefinitionReq.api_definition: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_definition"] = vFn

	return v
}()

func AssignAPIDefinitionReqValidator() db.Validator {
	return DefaultAssignAPIDefinitionReqValidator
}

// augmented methods on protoc/std generated struct

func (m *AssignAPIDefinitionResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AssignAPIDefinitionResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AssignAPIDefinitionResp) DeepCopy() *AssignAPIDefinitionResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AssignAPIDefinitionResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AssignAPIDefinitionResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AssignAPIDefinitionResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AssignAPIDefinitionRespValidator().Validate(ctx, m, opts...)
}

type ValidateAssignAPIDefinitionResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAssignAPIDefinitionResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AssignAPIDefinitionResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AssignAPIDefinitionResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAssignAPIDefinitionRespValidator = func() *ValidateAssignAPIDefinitionResp {
	v := &ValidateAssignAPIDefinitionResp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AssignAPIDefinitionRespValidator() db.Validator {
	return DefaultAssignAPIDefinitionRespValidator
}

// augmented methods on protoc/std generated struct

func (m *GetDnsInfoRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetDnsInfoRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetDnsInfoRequest) DeepCopy() *GetDnsInfoRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetDnsInfoRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetDnsInfoRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetDnsInfoRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetDnsInfoRequestValidator().Validate(ctx, m, opts...)
}

type ValidateGetDnsInfoRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetDnsInfoRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetDnsInfoRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetDnsInfoRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetDnsInfoRequestValidator = func() *ValidateGetDnsInfoRequest {
	v := &ValidateGetDnsInfoRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GetDnsInfoRequestValidator() db.Validator {
	return DefaultGetDnsInfoRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *GetDnsInfoResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetDnsInfoResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetDnsInfoResponse) DeepCopy() *GetDnsInfoResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetDnsInfoResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetDnsInfoResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetDnsInfoResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetDnsInfoResponseValidator().Validate(ctx, m, opts...)
}

func (m *GetDnsInfoResponse) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetDnsInfoDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetDnsInfoResponse) GetDnsInfoDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDnsInfo() == nil {
		return nil, nil
	}

	drInfos, err := m.GetDnsInfo().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetDnsInfo().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "dns_info." + dri.DRField
	}
	return drInfos, err

}

type ValidateGetDnsInfoResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetDnsInfoResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetDnsInfoResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetDnsInfoResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_info"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_info"))
		if err := fv(ctx, m.GetDnsInfo(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetDnsInfoResponseValidator = func() *ValidateGetDnsInfoResponse {
	v := &ValidateGetDnsInfoResponse{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["dns_info"] = ves_io_schema_virtual_host_dns_info.GlobalSpecTypeValidator().Validate

	return v
}()

func GetDnsInfoResponseValidator() db.Validator {
	return DefaultGetDnsInfoResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSecurityConfigReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSecurityConfigReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSecurityConfigReq) DeepCopy() *GetSecurityConfigReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSecurityConfigReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSecurityConfigReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSecurityConfigReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSecurityConfigReqValidator().Validate(ctx, m, opts...)
}

type ValidateGetSecurityConfigReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSecurityConfigReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSecurityConfigReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSecurityConfigReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetLoadbalancerChoice().(type) {
	case *GetSecurityConfigReq_AllHttpLoadbalancers:
		if fv, exists := v.FldValidators["loadbalancer_choice.all_http_loadbalancers"]; exists {
			val := m.GetLoadbalancerChoice().(*GetSecurityConfigReq_AllHttpLoadbalancers).AllHttpLoadbalancers
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_choice"),
				db.WithValidateField("all_http_loadbalancers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSecurityConfigReq_HttpLoadbalancersList:
		if fv, exists := v.FldValidators["loadbalancer_choice.http_loadbalancers_list"]; exists {
			val := m.GetLoadbalancerChoice().(*GetSecurityConfigReq_HttpLoadbalancersList).HttpLoadbalancersList
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_choice"),
				db.WithValidateField("http_loadbalancers_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSecurityConfigReqValidator = func() *ValidateGetSecurityConfigReq {
	v := &ValidateGetSecurityConfigReq{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["loadbalancer_choice.http_loadbalancers_list"] = HTTPLoadBalancerListValidator().Validate

	return v
}()

func GetSecurityConfigReqValidator() db.Validator {
	return DefaultGetSecurityConfigReqValidator
}

// augmented methods on protoc/std generated struct

func (m *HTTPLoadBalancerList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HTTPLoadBalancerList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *HTTPLoadBalancerList) DeepCopy() *HTTPLoadBalancerList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HTTPLoadBalancerList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HTTPLoadBalancerList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HTTPLoadBalancerList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HTTPLoadBalancerListValidator().Validate(ctx, m, opts...)
}

type ValidateHTTPLoadBalancerList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHTTPLoadBalancerList) HttpLoadbalancerValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for http_loadbalancer")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for http_loadbalancer")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated http_loadbalancer")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items http_loadbalancer")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHTTPLoadBalancerList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HTTPLoadBalancerList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HTTPLoadBalancerList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["http_loadbalancer"]; exists {
		vOpts := append(opts, db.WithValidateField("http_loadbalancer"))
		if err := fv(ctx, m.GetHttpLoadbalancer(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHTTPLoadBalancerListValidator = func() *ValidateHTTPLoadBalancerList {
	v := &ValidateHTTPLoadBalancerList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHttpLoadbalancer := v.HttpLoadbalancerValidationRuleHandler
	rulesHttpLoadbalancer := map[string]string{
		"ves.io.schema.rules.message.required":              "true",
		"ves.io.schema.rules.repeated.items.string.max_len": "256",
		"ves.io.schema.rules.repeated.items.string.min_len": "1",
		"ves.io.schema.rules.repeated.max_items":            "5",
		"ves.io.schema.rules.repeated.min_items":            "1",
	}
	vFn, err = vrhHttpLoadbalancer(rulesHttpLoadbalancer)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HTTPLoadBalancerList.http_loadbalancer: %s", err)
		panic(errMsg)
	}
	v.FldValidators["http_loadbalancer"] = vFn

	return v
}()

func HTTPLoadBalancerListValidator() db.Validator {
	return DefaultHTTPLoadBalancerListValidator
}

// augmented methods on protoc/std generated struct

func (m *ListAvailableAPIDefinitionsReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ListAvailableAPIDefinitionsReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ListAvailableAPIDefinitionsReq) DeepCopy() *ListAvailableAPIDefinitionsReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ListAvailableAPIDefinitionsReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ListAvailableAPIDefinitionsReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ListAvailableAPIDefinitionsReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ListAvailableAPIDefinitionsReqValidator().Validate(ctx, m, opts...)
}

type ValidateListAvailableAPIDefinitionsReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateListAvailableAPIDefinitionsReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ListAvailableAPIDefinitionsReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ListAvailableAPIDefinitionsReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultListAvailableAPIDefinitionsReqValidator = func() *ValidateListAvailableAPIDefinitionsReq {
	v := &ValidateListAvailableAPIDefinitionsReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ListAvailableAPIDefinitionsReqValidator() db.Validator {
	return DefaultListAvailableAPIDefinitionsReqValidator
}

// augmented methods on protoc/std generated struct

func (m *ListAvailableAPIDefinitionsResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ListAvailableAPIDefinitionsResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ListAvailableAPIDefinitionsResp) DeepCopy() *ListAvailableAPIDefinitionsResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ListAvailableAPIDefinitionsResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ListAvailableAPIDefinitionsResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ListAvailableAPIDefinitionsResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ListAvailableAPIDefinitionsRespValidator().Validate(ctx, m, opts...)
}

func (m *ListAvailableAPIDefinitionsResp) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetAvailableApiDefinitionsDRefInfo()

}

func (m *ListAvailableAPIDefinitionsResp) GetAvailableApiDefinitionsDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetAvailableApiDefinitions()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("ListAvailableAPIDefinitionsResp.available_api_definitions[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("api_definition.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "api_definition.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "available_api_definitions",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetAvailableApiDefinitionsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ListAvailableAPIDefinitionsResp) GetAvailableApiDefinitionsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "api_definition.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: api_definition")
	}
	for i, vref := range m.GetAvailableApiDefinitions() {
		if vref == nil {
			return nil, fmt.Errorf("ListAvailableAPIDefinitionsResp.available_api_definitions[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "api_definition.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateListAvailableAPIDefinitionsResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateListAvailableAPIDefinitionsResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ListAvailableAPIDefinitionsResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ListAvailableAPIDefinitionsResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["available_api_definitions"]; exists {

		vOpts := append(opts, db.WithValidateField("available_api_definitions"))
		for idx, item := range m.GetAvailableApiDefinitions() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultListAvailableAPIDefinitionsRespValidator = func() *ValidateListAvailableAPIDefinitionsResp {
	v := &ValidateListAvailableAPIDefinitionsResp{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["available_api_definitions"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func ListAvailableAPIDefinitionsRespValidator() db.Validator {
	return DefaultListAvailableAPIDefinitionsRespValidator
}

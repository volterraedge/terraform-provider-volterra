// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package http_loadbalancer

import (
	"bytes"
	"context"
	"fmt"
	io "io"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"

	ves_io_schema_views_common_cdn "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_cdn"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CDNCustomAPI GRPC Client satisfying server.CustomClient
type CDNCustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CDNCustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CDNCustomAPIGrpcClient) doRPCCDNCachePurgeHTTPLBCacheEnabled(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ves_io_schema_views_common_cdn.LilacCDNCachePurgeRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.common_cdn.LilacCDNCachePurgeRequest", yamlReq)
	}
	rsp, err := c.grpcClient.CDNCachePurgeHTTPLBCacheEnabled(ctx, req, opts...)
	return rsp, err
}

func (c *CDNCustomAPIGrpcClient) doRPCGetServiceOperationHTTPLBCacheEnabled(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ves_io_schema_views_common_cdn.GetServiceOperationReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.common_cdn.GetServiceOperationReq", yamlReq)
	}
	rsp, err := c.grpcClient.GetServiceOperationHTTPLBCacheEnabled(ctx, req, opts...)
	return rsp, err
}

func (c *CDNCustomAPIGrpcClient) doRPCListServiceOperationsHTTPLBCacheEnabled(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ves_io_schema_views_common_cdn.ListServiceOperationsReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.common_cdn.ListServiceOperationsReq", yamlReq)
	}
	rsp, err := c.grpcClient.ListServiceOperationsHTTPLBCacheEnabled(ctx, req, opts...)
	return rsp, err
}

func (c *CDNCustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCDNCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CDNCustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCDNCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["CDNCachePurgeHTTPLBCacheEnabled"] = ccl.doRPCCDNCachePurgeHTTPLBCacheEnabled

	rpcFns["GetServiceOperationHTTPLBCacheEnabled"] = ccl.doRPCGetServiceOperationHTTPLBCacheEnabled

	rpcFns["ListServiceOperationsHTTPLBCacheEnabled"] = ccl.doRPCListServiceOperationsHTTPLBCacheEnabled

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CDNCustomAPI REST Client satisfying server.CustomClient
type CDNCustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CDNCustomAPIRestClient) doRPCCDNCachePurgeHTTPLBCacheEnabled(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ves_io_schema_views_common_cdn.LilacCDNCachePurgeRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.common_cdn.LilacCDNCachePurgeRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("pattern_type", fmt.Sprintf("%v", req.PatternType))
		q.Add("purge_epoch_timestamp", fmt.Sprintf("%v", req.PurgeEpochTimestamp))
		q.Add("purge_type", fmt.Sprintf("%v", req.PurgeType))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ves_io_schema_views_common_cdn.LilacCDNCachePurgeResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.views.common_cdn.LilacCDNCachePurgeResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CDNCustomAPIRestClient) doRPCGetServiceOperationHTTPLBCacheEnabled(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ves_io_schema_views_common_cdn.GetServiceOperationReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.common_cdn.GetServiceOperationReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("service_op_id", fmt.Sprintf("%v", req.ServiceOpId))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ves_io_schema_views_common_cdn.GetServiceOperationRsp{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.views.common_cdn.GetServiceOperationRsp", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CDNCustomAPIRestClient) doRPCListServiceOperationsHTTPLBCacheEnabled(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ves_io_schema_views_common_cdn.ListServiceOperationsReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.views.common_cdn.ListServiceOperationsReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("namespace", fmt.Sprintf("%v", req.Namespace))
		q.Add("options", fmt.Sprintf("%v", req.Options))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	// checking whether the status code is a successful status code (2xx series)
	if rsp.StatusCode < 200 || rsp.StatusCode > 299 {
		body, err := io.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ves_io_schema_views_common_cdn.ListServiceOperationsRsp{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, errors.Wrapf(err, "JSON Response %s is not of type *ves.io.schema.views.common_cdn.ListServiceOperationsRsp", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CDNCustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCDNCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CDNCustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["CDNCachePurgeHTTPLBCacheEnabled"] = ccl.doRPCCDNCachePurgeHTTPLBCacheEnabled

	rpcFns["GetServiceOperationHTTPLBCacheEnabled"] = ccl.doRPCGetServiceOperationHTTPLBCacheEnabled

	rpcFns["ListServiceOperationsHTTPLBCacheEnabled"] = ccl.doRPCListServiceOperationsHTTPLBCacheEnabled

	ccl.rpcFns = rpcFns

	return ccl
}

// Create cDNCustomAPIInprocClient

// INPROC Client (satisfying CDNCustomAPIClient interface)
type cDNCustomAPIInprocClient struct {
	CDNCustomAPIServer
}

func (c *cDNCustomAPIInprocClient) CDNCachePurgeHTTPLBCacheEnabled(ctx context.Context, in *ves_io_schema_views_common_cdn.LilacCDNCachePurgeRequest, opts ...grpc.CallOption) (*ves_io_schema_views_common_cdn.LilacCDNCachePurgeResponse, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.views.http_loadbalancer.CDNCustomAPI.CDNCachePurgeHTTPLBCacheEnabled")
	return c.CDNCustomAPIServer.CDNCachePurgeHTTPLBCacheEnabled(ctx, in)
}
func (c *cDNCustomAPIInprocClient) GetServiceOperationHTTPLBCacheEnabled(ctx context.Context, in *ves_io_schema_views_common_cdn.GetServiceOperationReq, opts ...grpc.CallOption) (*ves_io_schema_views_common_cdn.GetServiceOperationRsp, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.views.http_loadbalancer.CDNCustomAPI.GetServiceOperationHTTPLBCacheEnabled")
	return c.CDNCustomAPIServer.GetServiceOperationHTTPLBCacheEnabled(ctx, in)
}
func (c *cDNCustomAPIInprocClient) ListServiceOperationsHTTPLBCacheEnabled(ctx context.Context, in *ves_io_schema_views_common_cdn.ListServiceOperationsReq, opts ...grpc.CallOption) (*ves_io_schema_views_common_cdn.ListServiceOperationsRsp, error) {
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.views.http_loadbalancer.CDNCustomAPI.ListServiceOperationsHTTPLBCacheEnabled")
	return c.CDNCustomAPIServer.ListServiceOperationsHTTPLBCacheEnabled(ctx, in)
}

func NewCDNCustomAPIInprocClient(svc svcfw.Service) CDNCustomAPIClient {
	return &cDNCustomAPIInprocClient{CDNCustomAPIServer: NewCDNCustomAPIServer(svc)}
}

// RegisterGwCDNCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCDNCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCDNCustomAPIHandlerClient(ctx, mux, NewCDNCustomAPIInprocClient(s))
}

// Create cDNCustomAPISrv

// SERVER (satisfying CDNCustomAPIServer interface)
type cDNCustomAPISrv struct {
	svc svcfw.Service
}

func (s *cDNCustomAPISrv) CDNCachePurgeHTTPLBCacheEnabled(ctx context.Context, in *ves_io_schema_views_common_cdn.LilacCDNCachePurgeRequest) (*ves_io_schema_views_common_cdn.LilacCDNCachePurgeResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.views.http_loadbalancer.CDNCustomAPI")
	cah, ok := ah.(CDNCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CDNCustomAPIServer", ah)
	}

	var (
		rsp *ves_io_schema_views_common_cdn.LilacCDNCachePurgeResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.views.common_cdn.LilacCDNCachePurgeRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CDNCustomAPI.CDNCachePurgeHTTPLBCacheEnabled' operation on 'http_loadbalancer'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.views.http_loadbalancer.CDNCustomAPI.CDNCachePurgeHTTPLBCacheEnabled"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.CDNCachePurgeHTTPLBCacheEnabled(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.views.common_cdn.LilacCDNCachePurgeResponse", rsp)...)

	return rsp, nil
}
func (s *cDNCustomAPISrv) GetServiceOperationHTTPLBCacheEnabled(ctx context.Context, in *ves_io_schema_views_common_cdn.GetServiceOperationReq) (*ves_io_schema_views_common_cdn.GetServiceOperationRsp, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.views.http_loadbalancer.CDNCustomAPI")
	cah, ok := ah.(CDNCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CDNCustomAPIServer", ah)
	}

	var (
		rsp *ves_io_schema_views_common_cdn.GetServiceOperationRsp
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.views.common_cdn.GetServiceOperationReq", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CDNCustomAPI.GetServiceOperationHTTPLBCacheEnabled' operation on 'http_loadbalancer'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.views.http_loadbalancer.CDNCustomAPI.GetServiceOperationHTTPLBCacheEnabled"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetServiceOperationHTTPLBCacheEnabled(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.views.common_cdn.GetServiceOperationRsp", rsp)...)

	return rsp, nil
}
func (s *cDNCustomAPISrv) ListServiceOperationsHTTPLBCacheEnabled(ctx context.Context, in *ves_io_schema_views_common_cdn.ListServiceOperationsReq) (*ves_io_schema_views_common_cdn.ListServiceOperationsRsp, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.views.http_loadbalancer.CDNCustomAPI")
	cah, ok := ah.(CDNCustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CDNCustomAPIServer", ah)
	}

	var (
		rsp *ves_io_schema_views_common_cdn.ListServiceOperationsRsp
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.views.common_cdn.ListServiceOperationsReq", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CDNCustomAPI.ListServiceOperationsHTTPLBCacheEnabled' operation on 'http_loadbalancer'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.views.http_loadbalancer.CDNCustomAPI.ListServiceOperationsHTTPLBCacheEnabled"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListServiceOperationsHTTPLBCacheEnabled(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.views.common_cdn.ListServiceOperationsRsp", rsp)...)

	return rsp, nil
}

func NewCDNCustomAPIServer(svc svcfw.Service) CDNCustomAPIServer {
	return &cDNCustomAPISrv{svc: svc}
}

var CDNCustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "HTTP Load Balancer",
        "description": "HTTP Load Balancer view defines a required parameters that can be used in CRUD, to create and manage HTTP Load Balancer.\nIt can be used to create HTTP Load Balancer and HTTPS Load Balancer.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/namespaces/{namespace}/http_loadbalancer/get-service-operation-status": {
            "post": {
                "summary": "Get Service Operation Status for HTTPLB when Caching Enabled",
                "description": "Get status of an operation command for a given HTTP LB when caching enabled.",
                "operationId": "ves.io.schema.views.http_loadbalancer.CDNCustomAPI.GetServiceOperationHTTPLBCacheEnabled",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/common_cdnGetServiceOperationRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"default\"\nx-required\nNamespace scope of the operation request",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/common_cdnGetServiceOperationReq"
                        }
                    }
                ],
                "tags": [
                    "CDNCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-views-http_loadbalancer-cdncustomapi-getserviceoperationhttplbcacheenabled"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.http_loadbalancer.CDNCustomAPI.GetServiceOperationHTTPLBCacheEnabled"
            },
            "x-displayname": "CDN Custom API when HTTPLB Cache Enabled",
            "x-ves-proto-service": "ves.io.schema.views.http_loadbalancer.CDNCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/http_loadbalancer/list-service-operations-status": {
            "post": {
                "summary": "List of HTTPLB Operation Commands when Caching Enabled",
                "description": "List of service operations for a given HTTP LB when Caching Enabled",
                "operationId": "ves.io.schema.views.http_loadbalancer.CDNCustomAPI.ListServiceOperationsHTTPLBCacheEnabled",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/common_cdnListServiceOperationsRsp"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"ns1\"\nx-required\nThe namespace this item belongs to",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/common_cdnListServiceOperationsReq"
                        }
                    }
                ],
                "tags": [
                    "CDNCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-views-http_loadbalancer-cdncustomapi-listserviceoperationshttplbcacheenabled"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.http_loadbalancer.CDNCustomAPI.ListServiceOperationsHTTPLBCacheEnabled"
            },
            "x-displayname": "CDN Custom API when HTTPLB Cache Enabled",
            "x-ves-proto-service": "ves.io.schema.views.http_loadbalancer.CDNCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/namespaces/{namespace}/http_loadbalancer/{name}/cache-purge": {
            "post": {
                "summary": "Purge the LB Cache",
                "description": "Initiate Purge on the LB Cache",
                "operationId": "ves.io.schema.views.http_loadbalancer.CDNCustomAPI.CDNCachePurgeHTTPLBCacheEnabled",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/common_cdnLilacCDNCachePurgeResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "Namespace\n\nx-example: \"default\"\nx-required\nNamespace scope of the metric request",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "CDN Distribution Name\n\nx-example: \"cdn-1\"\nx-required\nFormat: string",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name of the CDN distrubition"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/common_cdnLilacCDNCachePurgeRequest"
                        }
                    }
                ],
                "tags": [
                    "CDNCustomAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://docs.cloud.f5.com/docs-v2/platform/reference/api-ref/ves-io-schema-views-http_loadbalancer-cdncustomapi-cdncachepurgehttplbcacheenabled"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.http_loadbalancer.CDNCustomAPI.CDNCachePurgeHTTPLBCacheEnabled"
            },
            "x-displayname": "CDN Custom API when HTTPLB Cache Enabled",
            "x-ves-proto-service": "ves.io.schema.views.http_loadbalancer.CDNCustomAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "common_cdnGetServiceOperationReq": {
            "type": "object",
            "description": "Get Service Operation Request",
            "title": "Service Operation Request",
            "x-displayname": "Get Service Operation Request",
            "x-ves-proto-message": "ves.io.schema.views.common_cdn.GetServiceOperationReq",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Name of the CDN distribution.\n Format: string\n\nExample: - \"cdn-1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "CDN Distribution Name",
                    "x-displayname": "Name of the CDN distribution",
                    "x-ves-example": "cdn-1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace scope of the operation request\n\nExample: - \"default\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "default",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "service_op_id": {
                    "type": "integer",
                    "description": " Operation ID for which status is requested\n\nExample: - \"101\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Service Operation ID",
                    "format": "int64",
                    "x-displayname": "Service Operation ID",
                    "x-ves-example": "101",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "common_cdnGetServiceOperationRsp": {
            "type": "object",
            "description": "Get Service Operation Response",
            "title": "Service Operation Response",
            "x-displayname": "Service Operation Response",
            "x-ves-proto-message": "ves.io.schema.views.common_cdn.GetServiceOperationRsp",
            "properties": {
                "error": {
                    "description": " Errors(if any) while listing items from collection ",
                    "title": "error",
                    "$ref": "#/definitions/schemaErrorType",
                    "x-displayname": "Errors"
                },
                "items": {
                    "type": "array",
                    "description": " items represents the collection in response",
                    "title": "Serice Operation Status Details",
                    "items": {
                        "$ref": "#/definitions/common_cdnServiceOperationItem"
                    },
                    "x-displayname": "Operation Status Details"
                }
            }
        },
        "common_cdnLilacCDNCachePurgeRequest": {
            "type": "object",
            "description": "CDN Cache Purge",
            "title": "Cache Purge Request",
            "x-displayname": "Cache Purge",
            "x-ves-oneof-field-pattern_type": "[\"hostname\",\"pattern\",\"purge_all\",\"url\"]",
            "x-ves-oneof-field-purge_type": "[\"hard_purge\",\"soft_purge\"]",
            "x-ves-proto-message": "ves.io.schema.views.common_cdn.LilacCDNCachePurgeRequest",
            "properties": {
                "hard_purge": {
                    "description": "Exclusive with [soft_purge]\n Delete the cache entries",
                    "title": "Hard Purge",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Hard Purge"
                },
                "hostname": {
                    "type": "string",
                    "description": "Exclusive with [pattern purge_all url]\n Purge cached content by Hostname.\n\nExample: - \"xyz.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.vh_domain: true\n",
                    "title": "Hostname",
                    "x-displayname": "Hostname",
                    "x-ves-example": "xyz.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.vh_domain": "true"
                    }
                },
                "pattern": {
                    "type": "string",
                    "description": "Exclusive with [hostname purge_all url]\n Purge cached content using RegEx.\n\nExample: - \"*.ts\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 256\n  ves.io.schema.rules.string.min_len: 1\n  ves.io.schema.rules.string.regex: true\n",
                    "title": "Regex Pattern to match",
                    "minLength": 1,
                    "maxLength": 256,
                    "x-displayname": "Pattern",
                    "x-ves-example": "*.ts",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "256",
                        "ves.io.schema.rules.string.min_len": "1",
                        "ves.io.schema.rules.string.regex": "true"
                    }
                },
                "purge_all": {
                    "description": "Exclusive with [hostname pattern url]\n Purge all cached content.",
                    "title": "Purge All",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "All"
                },
                "soft_purge": {
                    "description": "Exclusive with [hard_purge]\n Invalidate the cache entries",
                    "title": "Soft Purge",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Soft Purge"
                },
                "url": {
                    "type": "string",
                    "description": "Exclusive with [hostname pattern purge_all]\n Purge cache by using a URL path\n\nExample: - \"/path1\"-",
                    "title": "URL",
                    "x-displayname": "URL",
                    "x-ves-example": "/path1"
                }
            }
        },
        "common_cdnLilacCDNCachePurgeResponse": {
            "type": "object",
            "description": "Cache Purge message",
            "title": "Purge Response",
            "x-displayname": "Cache Purge Response",
            "x-ves-proto-message": "ves.io.schema.views.common_cdn.LilacCDNCachePurgeResponse",
            "properties": {
                "purge_request_id": {
                    "type": "integer",
                    "description": " Request Id to track the status of the purge request",
                    "title": "Purge Request Id",
                    "format": "int64",
                    "x-displayname": "Purge Request Id"
                }
            }
        },
        "common_cdnListServiceOperationsReq": {
            "type": "object",
            "description": "List Service Operations Request",
            "title": "Service Operations Request",
            "x-displayname": "List Service Operations Request",
            "x-ves-oneof-field-options": "[\"lastn\",\"time_range\"]",
            "x-ves-proto-message": "ves.io.schema.views.common_cdn.ListServiceOperationsReq",
            "properties": {
                "lastn": {
                    "type": "integer",
                    "description": "Exclusive with [time_range]\n The last n service operations\n\nExample: - \"5\"-",
                    "title": "lastn",
                    "format": "int64",
                    "x-displayname": "Last N",
                    "x-ves-example": "5"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the CDN Distribution\n\nExample: - \"name\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": " The namespace this item belongs to\n\nExample: - \"ns1\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "time_range": {
                    "description": "Exclusive with [lastn]\n service operations between a start and end time.",
                    "title": "time-range",
                    "$ref": "#/definitions/common_cdnServiceOperationsTimeRange",
                    "x-displayname": "Time Range"
                }
            }
        },
        "common_cdnListServiceOperationsRsp": {
            "type": "object",
            "description": "Get Service Operations Response",
            "title": "Service Operations Response",
            "x-displayname": "Service Operations Response",
            "x-ves-proto-message": "ves.io.schema.views.common_cdn.ListServiceOperationsRsp",
            "properties": {
                "error": {
                    "description": " Errors(if any) while listing items from collection",
                    "title": "error",
                    "$ref": "#/definitions/schemaErrorType",
                    "x-displayname": "Errors"
                },
                "items": {
                    "type": "array",
                    "description": " items represents the collection in response",
                    "title": "Details of the Service Operation",
                    "items": {
                        "$ref": "#/definitions/common_cdnServiceOperationsItem"
                    },
                    "x-displayname": "Details of the Service Operation"
                }
            }
        },
        "common_cdnPurgeOperationItem": {
            "type": "object",
            "description": "Purge Operation Status",
            "title": "Purge Operation Status",
            "x-displayname": "Purge Operation Status",
            "x-ves-proto-message": "ves.io.schema.views.common_cdn.PurgeOperationItem",
            "properties": {
                "bytes_not_purged": {
                    "type": "string",
                    "description": " Number of bytes Not Purged\n\nExample: - 1024-",
                    "title": "Number of Bytes Not Purged",
                    "format": "uint64",
                    "x-displayname": "Number of Bytes Not Purged"
                },
                "bytes_purged": {
                    "type": "string",
                    "description": " Number of bytes Purged\n\nExample: - 1024-",
                    "title": "Number of Bytes Purged",
                    "format": "uint64",
                    "x-displayname": "Number of Bytes Purged"
                },
                "finish_time": {
                    "type": "string",
                    "description": " Finish time of Purge Operation\n format: unix_timestamp|rfc 3339\n\nExample: - \"2019-09-23T12:32:11.733Z\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.query_time: true\n",
                    "title": "Finish time of Purge Operation",
                    "x-displayname": "Cache Purge Finish Time",
                    "x-ves-example": "2019-09-23T12:32:11.733Z",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.query_time": "true"
                    }
                },
                "hard_purge": {
                    "type": "boolean",
                    "description": " Cache Hard Purge\n\nExample: - true-",
                    "title": "Hard Purge",
                    "format": "boolean",
                    "x-displayname": "Cache Hard Purge"
                },
                "purge_time": {
                    "type": "string",
                    "description": " Time taken for Cache Purge\n\nExample: - \"2018-12-23T12:30:11.733Z\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.query_time: true\n",
                    "title": "Time taken for Cache Purge",
                    "x-displayname": "Cache Purge Time",
                    "x-ves-example": "2018-12-23T12:30:11.733Z",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.query_time": "true"
                    }
                },
                "regexp": {
                    "type": "string",
                    "description": " Regex issued in the Purge Operation\n\nExample: - \"*.m3u8\"-",
                    "title": "Regex used in Purge",
                    "x-displayname": "Cache Purge Regex",
                    "x-ves-example": "*.m3u8"
                },
                "site": {
                    "type": "string",
                    "description": " Site at which the purge operation was performed.",
                    "title": "NodeId on which the operation status is gathered",
                    "x-displayname": "CDN CE Site"
                },
                "start_time": {
                    "type": "string",
                    "description": " Start time of Purge Operation\n\nExample: - \"2019-09-23T12:30:11.733Z\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.query_time: true\n",
                    "title": "Start time of Purge Operation",
                    "x-displayname": "Cache Purge Start Time",
                    "x-ves-example": "2019-09-23T12:30:11.733Z",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.query_time": "true"
                    }
                }
            }
        },
        "common_cdnServiceOperationItem": {
            "type": "object",
            "description": "Service Operation Item",
            "title": "Service Operation Item",
            "x-displayname": "Service Operation Item",
            "x-ves-oneof-field-op_status": "[\"purge\"]",
            "x-ves-proto-message": "ves.io.schema.views.common_cdn.ServiceOperationItem",
            "properties": {
                "purge": {
                    "description": "Exclusive with []\n",
                    "$ref": "#/definitions/common_cdnPurgeOperationItem"
                },
                "service_op_id": {
                    "type": "integer",
                    "description": " Operation ID for which status is requested. This for example is the purge_request_id obtained in the response to the CachePurge Request.\n\nExample: - \"101\"-",
                    "title": "Service Operation ID",
                    "format": "int64",
                    "x-displayname": "Service Operation ID",
                    "x-ves-example": "101"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the operation command\n\nExample: - success-",
                    "title": "Service Operation Status",
                    "x-displayname": "Service Operation Status"
                }
            }
        },
        "common_cdnServiceOperationsItem": {
            "type": "object",
            "description": "List of Service Operations",
            "title": "Service Operations Item",
            "x-displayname": "List of Service Operations",
            "x-ves-proto-message": "ves.io.schema.views.common_cdn.ServiceOperationsItem",
            "properties": {
                "created_time": {
                    "type": "string",
                    "description": " The service created time\n\nValidation Rules:\n  ves.io.schema.rules.string.query_time: true\n",
                    "title": "created time",
                    "x-displayname": "Created Time",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.query_time": "true"
                    }
                },
                "modified_time": {
                    "type": "string",
                    "description": " The service modified time\n\nValidation Rules:\n  ves.io.schema.rules.string.query_time: true\n",
                    "title": "modified time",
                    "x-displayname": "Modified Time",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.query_time": "true"
                    }
                },
                "service_op_id": {
                    "type": "integer",
                    "description": " The id of the operation command\n\nExample: - \"\"-",
                    "title": "service operation id",
                    "format": "int64",
                    "x-displayname": "Service Operation ID"
                },
                "svc_version": {
                    "type": "integer",
                    "description": " The version info of the service\n\nExample: - \"\"-",
                    "title": "svc version",
                    "format": "int64",
                    "x-displayname": "Service Version"
                }
            }
        },
        "common_cdnServiceOperationsTimeRange": {
            "type": "object",
            "description": "Option to specify lastn or start-end time.",
            "title": "Service Operations Time Range",
            "x-displayname": "Service Operations Options",
            "x-ves-proto-message": "ves.io.schema.views.common_cdn.ServiceOperationsTimeRange",
            "properties": {
                "finish_time": {
                    "type": "string",
                    "description": " A finish time for the time range in which the service operation status is requested.\n format: unix_timestamp|rfc 3339\n\nExample: - \"2019-09-23T12:32:11.733Z\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.query_time: true\n",
                    "title": "Finish time of Service Operations",
                    "x-displayname": "Service Operation Finish Time",
                    "x-ves-example": "2019-09-23T12:32:11.733Z",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.query_time": "true"
                    }
                },
                "start_time": {
                    "type": "string",
                    "description": " A start time for the time range in which the service operation status is requested.\n\nExample: - \"2019-09-23T12:30:11.733Z\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.query_time: true\n",
                    "title": "Start time of Service Operations",
                    "x-displayname": "Service Operation Start Time",
                    "x-ves-example": "2019-09-23T12:30:11.733Z",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.query_time": "true"
                    }
                }
            }
        },
        "ioschemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "schemaErrorCode": {
            "type": "string",
            "description": "Union of all possible error-codes from system\n\n - EOK: No error\n - EPERMS: Permissions error\n - EBADINPUT: Input is not correct\n - ENOTFOUND: Not found\n - EEXISTS: Already exists\n - EUNKNOWN: Unknown/catchall error\n - ESERIALIZE: Error in serializing/de-serializing\n - EINTERNAL: Server error\n - EPARTIAL: Partial error",
            "title": "ErrorCode",
            "enum": [
                "EOK",
                "EPERMS",
                "EBADINPUT",
                "ENOTFOUND",
                "EEXISTS",
                "EUNKNOWN",
                "ESERIALIZE",
                "EINTERNAL",
                "EPARTIAL"
            ],
            "default": "EOK",
            "x-displayname": "Error Code",
            "x-ves-proto-enum": "ves.io.schema.ErrorCode"
        },
        "schemaErrorType": {
            "type": "object",
            "description": "Information about a error in API operation",
            "title": "ErrorType",
            "x-displayname": "Error Type",
            "x-ves-proto-message": "ves.io.schema.ErrorType",
            "properties": {
                "code": {
                    "description": " A simple general code by category",
                    "title": "code",
                    "$ref": "#/definitions/schemaErrorCode",
                    "x-displayname": "Code"
                },
                "error_obj": {
                    "description": " A structured error object for machine parsing",
                    "title": "error_obj",
                    "$ref": "#/definitions/protobufAny",
                    "x-displayname": "Error Object"
                },
                "message": {
                    "type": "string",
                    "description": " A human readable string of the error\n\nExample: - \"value\"-",
                    "title": "message",
                    "x-displayname": "Message",
                    "x-ves-example": "value"
                }
            }
        }
    },
    "x-displayname": "Configure HTTP Load Balancer",
    "x-ves-proto-file": "ves.io/schema/views/http_loadbalancer/public_cdn_customapi.proto"
}`

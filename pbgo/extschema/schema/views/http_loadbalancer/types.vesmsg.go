//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package http_loadbalancer

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_rate_limiter "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter"
	ves_io_schema_route "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/route"
	ves_io_schema_service_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_views_rate_limiter_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy"
	ves_io_schema_virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
	ves_io_schema_virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AdvancedOptionsType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AdvancedOptionsType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AdvancedOptionsType) DeepCopy() *AdvancedOptionsType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AdvancedOptionsType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AdvancedOptionsType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AdvancedOptionsType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AdvancedOptionsTypeValidator().Validate(ctx, m, opts...)
}

func (m *AdvancedOptionsType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetJwtDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *AdvancedOptionsType) GetJwtDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, vref := range m.GetJwt() {
		if vref == nil {
			return nil, fmt.Errorf("AdvancedOptionsType.jwt[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("jwt.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "jwt.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "jwt",
			Ref:        vdRef,
		})
	}

	return drInfos, nil
}

// GetJwtDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AdvancedOptionsType) GetJwtDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "jwt.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: jwt")
	}
	for i, vref := range m.GetJwt() {
		if vref == nil {
			return nil, fmt.Errorf("AdvancedOptionsType.jwt[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "jwt.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateAdvancedOptionsType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAdvancedOptionsType) RequestHeadersToAddValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.HeaderManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for request_headers_to_add")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated request_headers_to_add")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items request_headers_to_add")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) RequestHeadersToRemoveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for request_headers_to_remove")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for request_headers_to_remove")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated request_headers_to_remove")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items request_headers_to_remove")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) ResponseHeadersToAddValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.HeaderManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for response_headers_to_add")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated response_headers_to_add")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items response_headers_to_add")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) ResponseHeadersToRemoveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for response_headers_to_remove")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for response_headers_to_remove")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated response_headers_to_remove")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items response_headers_to_remove")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) MaxRequestHeaderSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for max_request_header_size")
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) CustomErrorsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapUint32KeyRules(rules)
	itemKeyFn, err := db.NewUint32ValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for custom_errors")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for custom_errors")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[uint32]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for custom_errors")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[uint32]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ uint32 ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map custom_errors")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items custom_errors")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) IdleTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for idle_timeout")
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AdvancedOptionsType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AdvancedOptionsType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["buffer_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("buffer_policy"))
		if err := fv(ctx, m.GetBufferPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["compression_params"]; exists {

		vOpts := append(opts, db.WithValidateField("compression_params"))
		if err := fv(ctx, m.GetCompressionParams(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_errors"]; exists {
		vOpts := append(opts, db.WithValidateField("custom_errors"))
		if err := fv(ctx, m.GetCustomErrors(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disable_default_error_pages"]; exists {

		vOpts := append(opts, db.WithValidateField("disable_default_error_pages"))
		if err := fv(ctx, m.GetDisableDefaultErrorPages(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["idle_timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("idle_timeout"))
		if err := fv(ctx, m.GetIdleTimeout(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["javascript_info"]; exists {

		vOpts := append(opts, db.WithValidateField("javascript_info"))
		if err := fv(ctx, m.GetJavascriptInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["jwt"]; exists {

		vOpts := append(opts, db.WithValidateField("jwt"))
		for idx, item := range m.GetJwt() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["max_request_header_size"]; exists {

		vOpts := append(opts, db.WithValidateField("max_request_header_size"))
		if err := fv(ctx, m.GetMaxRequestHeaderSize(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetPathNormalizeChoice().(type) {
	case *AdvancedOptionsType_EnablePathNormalize:
		if fv, exists := v.FldValidators["path_normalize_choice.enable_path_normalize"]; exists {
			val := m.GetPathNormalizeChoice().(*AdvancedOptionsType_EnablePathNormalize).EnablePathNormalize
			vOpts := append(opts,
				db.WithValidateField("path_normalize_choice"),
				db.WithValidateField("enable_path_normalize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AdvancedOptionsType_DisablePathNormalize:
		if fv, exists := v.FldValidators["path_normalize_choice.disable_path_normalize"]; exists {
			val := m.GetPathNormalizeChoice().(*AdvancedOptionsType_DisablePathNormalize).DisablePathNormalize
			vOpts := append(opts,
				db.WithValidateField("path_normalize_choice"),
				db.WithValidateField("disable_path_normalize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["request_headers_to_add"]; exists {
		vOpts := append(opts, db.WithValidateField("request_headers_to_add"))
		if err := fv(ctx, m.GetRequestHeadersToAdd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_headers_to_remove"]; exists {
		vOpts := append(opts, db.WithValidateField("request_headers_to_remove"))
		if err := fv(ctx, m.GetRequestHeadersToRemove(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_headers_to_add"]; exists {
		vOpts := append(opts, db.WithValidateField("response_headers_to_add"))
		if err := fv(ctx, m.GetResponseHeadersToAdd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_headers_to_remove"]; exists {
		vOpts := append(opts, db.WithValidateField("response_headers_to_remove"))
		if err := fv(ctx, m.GetResponseHeadersToRemove(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAdvancedOptionsTypeValidator = func() *ValidateAdvancedOptionsType {
	v := &ValidateAdvancedOptionsType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRequestHeadersToAdd := v.RequestHeadersToAddValidationRuleHandler
	rulesRequestHeadersToAdd := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRequestHeadersToAdd(rulesRequestHeadersToAdd)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.request_headers_to_add: %s", err)
		panic(errMsg)
	}
	v.FldValidators["request_headers_to_add"] = vFn

	vrhRequestHeadersToRemove := v.RequestHeadersToRemoveValidationRuleHandler
	rulesRequestHeadersToRemove := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.min_bytes": "1",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhRequestHeadersToRemove(rulesRequestHeadersToRemove)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.request_headers_to_remove: %s", err)
		panic(errMsg)
	}
	v.FldValidators["request_headers_to_remove"] = vFn

	vrhResponseHeadersToAdd := v.ResponseHeadersToAddValidationRuleHandler
	rulesResponseHeadersToAdd := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhResponseHeadersToAdd(rulesResponseHeadersToAdd)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.response_headers_to_add: %s", err)
		panic(errMsg)
	}
	v.FldValidators["response_headers_to_add"] = vFn

	vrhResponseHeadersToRemove := v.ResponseHeadersToRemoveValidationRuleHandler
	rulesResponseHeadersToRemove := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.min_bytes": "1",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhResponseHeadersToRemove(rulesResponseHeadersToRemove)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.response_headers_to_remove: %s", err)
		panic(errMsg)
	}
	v.FldValidators["response_headers_to_remove"] = vFn

	vrhMaxRequestHeaderSize := v.MaxRequestHeaderSizeValidationRuleHandler
	rulesMaxRequestHeaderSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "96",
	}
	vFn, err = vrhMaxRequestHeaderSize(rulesMaxRequestHeaderSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.max_request_header_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["max_request_header_size"] = vFn

	vrhCustomErrors := v.CustomErrorsValidationRuleHandler
	rulesCustomErrors := map[string]string{
		"ves.io.schema.rules.map.keys.uint32.ranges":    "3,4,5,300-599",
		"ves.io.schema.rules.map.max_pairs":             "16",
		"ves.io.schema.rules.map.values.string.max_len": "65536",
		"ves.io.schema.rules.map.values.string.uri_ref": "true",
	}
	vFn, err = vrhCustomErrors(rulesCustomErrors)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.custom_errors: %s", err)
		panic(errMsg)
	}
	v.FldValidators["custom_errors"] = vFn

	vrhIdleTimeout := v.IdleTimeoutValidationRuleHandler
	rulesIdleTimeout := map[string]string{
		"ves.io.schema.rules.uint32.lte": "300000",
	}
	vFn, err = vrhIdleTimeout(rulesIdleTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.idle_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["idle_timeout"] = vFn

	v.FldValidators["buffer_policy"] = ves_io_schema.BufferConfigTypeValidator().Validate

	v.FldValidators["compression_params"] = ves_io_schema_virtual_host.CompressionTypeValidator().Validate

	v.FldValidators["jwt"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func AdvancedOptionsTypeValidator() db.Validator {
	return DefaultAdvancedOptionsTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ChallengeRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ChallengeRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ChallengeRule) DeepCopy() *ChallengeRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ChallengeRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ChallengeRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ChallengeRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ChallengeRuleValidator().Validate(ctx, m, opts...)
}

func (m *ChallengeRule) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetSpecDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *ChallengeRule) GetSpecDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetSpec() == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.GetSpec().GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "spec." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

type ValidateChallengeRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateChallengeRule) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateChallengeRule) SpecValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for spec")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_service_policy_rule.ChallengeRuleSpecValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateChallengeRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ChallengeRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ChallengeRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["spec"]; exists {

		vOpts := append(opts, db.WithValidateField("spec"))
		if err := fv(ctx, m.GetSpec(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultChallengeRuleValidator = func() *ValidateChallengeRule {
	v := &ValidateChallengeRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ChallengeRule.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhSpec := v.SpecValidationRuleHandler
	rulesSpec := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSpec(rulesSpec)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ChallengeRule.spec: %s", err)
		panic(errMsg)
	}
	v.FldValidators["spec"] = vFn

	return v
}()

func ChallengeRuleValidator() db.Validator {
	return DefaultChallengeRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *ChallengeRuleList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ChallengeRuleList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ChallengeRuleList) DeepCopy() *ChallengeRuleList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ChallengeRuleList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ChallengeRuleList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ChallengeRuleList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ChallengeRuleListValidator().Validate(ctx, m, opts...)
}

func (m *ChallengeRuleList) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetRulesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *ChallengeRuleList) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetRules() == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.GetRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("rules[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

type ValidateChallengeRuleList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateChallengeRuleList) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ChallengeRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ChallengeRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ChallengeRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ChallengeRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateChallengeRuleList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ChallengeRuleList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ChallengeRuleList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultChallengeRuleListValidator = func() *ValidateChallengeRuleList {
	v := &ValidateChallengeRuleList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ChallengeRuleList.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	return v
}()

func ChallengeRuleListValidator() db.Validator {
	return DefaultChallengeRuleListValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttps().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.https")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvertiseChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetChallengeTypeDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDefaultRoutePoolsDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMaliciousUserMitigationDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMoreOptionDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimitChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRoutesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServicePolicyChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetUserIdentificationDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetAdvertiseChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetAdvertiseChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetAdvertiseChoice().(type) {
	case *CreateSpecType_AdvertiseOnPublic:
		odrInfos, err = m.GetAdvertiseOnPublic().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "advertise_on_public." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *CreateSpecType_AdvertiseCustom:
		odrInfos, err = m.GetAdvertiseCustom().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "advertise_custom." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *CreateSpecType_DoNotAdvertise:

	case *CreateSpecType_AdvertiseOnPublicDefaultVip:

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetChallengeTypeDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetChallengeType() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetChallengeType().(type) {
	case *CreateSpecType_JsChallenge:

	case *CreateSpecType_CaptchaChallenge:

	case *CreateSpecType_NoChallenge:

	case *CreateSpecType_PolicyBasedChallenge:
		odrInfos, err = m.GetPolicyBasedChallenge().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "policy_based_challenge." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetDefaultRoutePoolsDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetDefaultRoutePools() == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.GetDefaultRoutePools() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("default_route_pools[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

func (m *CreateSpecType) GetMaliciousUserMitigationDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("malicious_user_mitigation.Object")
	drInfos = append(drInfos, db.DRefInfo{
		RefdType:   "malicious_user_mitigation.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "malicious_user_mitigation",
		Ref:        vdRef,
	})

	return drInfos, nil
}

// GetMaliciousUserMitigationDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetMaliciousUserMitigationDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "malicious_user_mitigation.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: malicious_user_mitigation")
	}

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "malicious_user_mitigation.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetMoreOptionDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetMoreOption() == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.GetMoreOption().GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "more_option." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetRateLimitChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetRateLimitChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetRateLimitChoice().(type) {
	case *CreateSpecType_DisableRateLimit:

	case *CreateSpecType_RateLimit:
		odrInfos, err = m.GetRateLimit().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "rate_limit." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetRoutesDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetRoutes() == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.GetRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("routes[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetServicePolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetServicePolicyChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetServicePolicyChoice().(type) {
	case *CreateSpecType_ServicePoliciesFromNamespace:

	case *CreateSpecType_NoServicePolicies:

	case *CreateSpecType_ActiveServicePolicies:
		odrInfos, err = m.GetActiveServicePolicies().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "active_service_policies." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

func (m *CreateSpecType) GetUserIdentificationDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}

	vref := m.GetUserIdentification()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("user_identification.Object")
	drInfos = append(drInfos, db.DRefInfo{
		RefdType:   "user_identification.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "user_identification",
		Ref:        vdRef,
	})

	return drInfos, nil
}

// GetUserIdentificationDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetUserIdentificationDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "user_identification.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: user_identification")
	}

	vref := m.GetUserIdentification()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "user_identification.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *CreateSpecType) GetWafChoiceDRefInfo() ([]db.DRefInfo, error) {
	var odrInfos []db.DRefInfo

	switch m.GetWafChoice().(type) {
	case *CreateSpecType_Waf:

		vref := m.GetWaf()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("waf.Object")
		odri := db.DRefInfo{
			RefdType:   "waf.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "waf",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	case *CreateSpecType_WafRule:

		vref := m.GetWafRule()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("waf_rules.Object")
		odri := db.DRefInfo{
			RefdType:   "waf_rules.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "waf_rule",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	case *CreateSpecType_DisableWaf:

	case *CreateSpecType_AppFirewall:

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("app_firewall.Object")
		odri := db.DRefInfo{
			RefdType:   "app_firewall.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "app_firewall",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	}

	return odrInfos, nil
}

// GetWafChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetWafChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetWafChoice().(type) {
	case *CreateSpecType_Waf:
		refdType, err := d.TypeForEntryKind("", "", "waf.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: waf")
		}

		vref := m.GetWaf()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "waf.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *CreateSpecType_WafRule:
		refdType, err := d.TypeForEntryKind("", "", "waf_rules.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: waf_rules")
		}

		vref := m.GetWafRule()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "waf_rules.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *CreateSpecType_DisableWaf:

	case *CreateSpecType_AppFirewall:
		refdType, err := d.TypeForEntryKind("", "", "app_firewall.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: app_firewall")
		}

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "app_firewall.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) AdvertiseChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for advertise_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ChallengeTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_type")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) LoadbalancerTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for loadbalancer_type")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) RateLimitChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rate_limit_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ServicePolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) WafChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for waf_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DefaultRoutePoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_route_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_route_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_route_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*RouteType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := RouteTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RouteType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RouteType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) WafExclusionRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleWafExclusionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.SimpleWafExclusionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for waf_exclusion_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleWafExclusionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleWafExclusionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated waf_exclusion_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items waf_exclusion_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) BlockedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for blocked_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated blocked_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items blocked_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) TrustedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for trusted_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated trusted_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items trusted_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DdosMitigationRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*DDoSMitigationRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := DDoSMitigationRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ddos_mitigation_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DDoSMitigationRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DDoSMitigationRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ddos_mitigation_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ddos_mitigation_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_location"]; exists {

		vOpts := append(opts, db.WithValidateField("add_location"))
		if err := fv(ctx, m.GetAddLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["advertise_choice"]; exists {
		val := m.GetAdvertiseChoice()
		vOpts := append(opts,
			db.WithValidateField("advertise_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdvertiseChoice().(type) {
	case *CreateSpecType_AdvertiseOnPublic:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public"]; exists {
			val := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublic).AdvertiseOnPublic
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AdvertiseCustom:
		if fv, exists := v.FldValidators["advertise_choice.advertise_custom"]; exists {
			val := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseCustom).AdvertiseCustom
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DoNotAdvertise:
		if fv, exists := v.FldValidators["advertise_choice.do_not_advertise"]; exists {
			val := m.GetAdvertiseChoice().(*CreateSpecType_DoNotAdvertise).DoNotAdvertise
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("do_not_advertise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AdvertiseOnPublicDefaultVip:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public_default_vip"]; exists {
			val := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublicDefaultVip).AdvertiseOnPublicDefaultVip
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public_default_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["blocked_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("blocked_clients"))
		if err := fv(ctx, m.GetBlockedClients(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["challenge_type"]; exists {
		val := m.GetChallengeType()
		vOpts := append(opts,
			db.WithValidateField("challenge_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChallengeType().(type) {
	case *CreateSpecType_JsChallenge:
		if fv, exists := v.FldValidators["challenge_type.js_challenge"]; exists {
			val := m.GetChallengeType().(*CreateSpecType_JsChallenge).JsChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_CaptchaChallenge:
		if fv, exists := v.FldValidators["challenge_type.captcha_challenge"]; exists {
			val := m.GetChallengeType().(*CreateSpecType_CaptchaChallenge).CaptchaChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("captcha_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NoChallenge:
		if fv, exists := v.FldValidators["challenge_type.no_challenge"]; exists {
			val := m.GetChallengeType().(*CreateSpecType_NoChallenge).NoChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("no_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_PolicyBasedChallenge:
		if fv, exists := v.FldValidators["challenge_type.policy_based_challenge"]; exists {
			val := m.GetChallengeType().(*CreateSpecType_PolicyBasedChallenge).PolicyBasedChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("policy_based_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cors_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("cors_policy"))
		if err := fv(ctx, m.GetCorsPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ddos_mitigation_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("ddos_mitigation_rules"))
		if err := fv(ctx, m.GetDdosMitigationRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_route_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("default_route_pools"))
		if err := fv(ctx, m.GetDefaultRoutePools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *CreateSpecType_RoundRobin:
		if fv, exists := v.FldValidators["hash_policy_choice.round_robin"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_RoundRobin).RoundRobin
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("round_robin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_LeastActive:
		if fv, exists := v.FldValidators["hash_policy_choice.least_active"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_LeastActive).LeastActive
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("least_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Random:
		if fv, exists := v.FldValidators["hash_policy_choice.random"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_Random).Random
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("random"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SourceIpStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.source_ip_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_SourceIpStickiness).SourceIpStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("source_ip_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_CookieStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.cookie_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_CookieStickiness).CookieStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("cookie_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_RingHash:
		if fv, exists := v.FldValidators["hash_policy_choice.ring_hash"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_RingHash).RingHash
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("ring_hash"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["loadbalancer_type"]; exists {
		val := m.GetLoadbalancerType()
		vOpts := append(opts,
			db.WithValidateField("loadbalancer_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLoadbalancerType().(type) {
	case *CreateSpecType_Http:
		if fv, exists := v.FldValidators["loadbalancer_type.http"]; exists {
			val := m.GetLoadbalancerType().(*CreateSpecType_Http).Http
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("http"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Https:
		if fv, exists := v.FldValidators["loadbalancer_type.https"]; exists {
			val := m.GetLoadbalancerType().(*CreateSpecType_Https).Https
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_HttpsAutoCert:
		if fv, exists := v.FldValidators["loadbalancer_type.https_auto_cert"]; exists {
			val := m.GetLoadbalancerType().(*CreateSpecType_HttpsAutoCert).HttpsAutoCert
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https_auto_cert"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_mitigation"]; exists {

		vOpts := append(opts, db.WithValidateField("malicious_user_mitigation"))
		if err := fv(ctx, m.GetMaliciousUserMitigation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["more_option"]; exists {

		vOpts := append(opts, db.WithValidateField("more_option"))
		if err := fv(ctx, m.GetMoreOption(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limit_choice"]; exists {
		val := m.GetRateLimitChoice()
		vOpts := append(opts,
			db.WithValidateField("rate_limit_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRateLimitChoice().(type) {
	case *CreateSpecType_DisableRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.disable_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*CreateSpecType_DisableRateLimit).DisableRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("disable_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_RateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*CreateSpecType_RateLimit).RateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["routes"]; exists {
		vOpts := append(opts, db.WithValidateField("routes"))
		if err := fv(ctx, m.GetRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service_policy_choice"]; exists {
		val := m.GetServicePolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("service_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServicePolicyChoice().(type) {
	case *CreateSpecType_ServicePoliciesFromNamespace:
		if fv, exists := v.FldValidators["service_policy_choice.service_policies_from_namespace"]; exists {
			val := m.GetServicePolicyChoice().(*CreateSpecType_ServicePoliciesFromNamespace).ServicePoliciesFromNamespace
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("service_policies_from_namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NoServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.no_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*CreateSpecType_NoServicePolicies).NoServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("no_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ActiveServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.active_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*CreateSpecType_ActiveServicePolicies).ActiveServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("active_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["trusted_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("trusted_clients"))
		if err := fv(ctx, m.GetTrustedClients(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_identification"]; exists {

		vOpts := append(opts, db.WithValidateField("user_identification"))
		if err := fv(ctx, m.GetUserIdentification(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_choice"]; exists {
		val := m.GetWafChoice()
		vOpts := append(opts,
			db.WithValidateField("waf_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWafChoice().(type) {
	case *CreateSpecType_Waf:
		if fv, exists := v.FldValidators["waf_choice.waf"]; exists {
			val := m.GetWafChoice().(*CreateSpecType_Waf).Waf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_WafRule:
		if fv, exists := v.FldValidators["waf_choice.waf_rule"]; exists {
			val := m.GetWafChoice().(*CreateSpecType_WafRule).WafRule
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("waf_rule"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DisableWaf:
		if fv, exists := v.FldValidators["waf_choice.disable_waf"]; exists {
			val := m.GetWafChoice().(*CreateSpecType_DisableWaf).DisableWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("disable_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AppFirewall:
		if fv, exists := v.FldValidators["waf_choice.app_firewall"]; exists {
			val := m.GetWafChoice().(*CreateSpecType_AppFirewall).AppFirewall
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("app_firewall"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_exclusion_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("waf_exclusion_rules"))
		if err := fv(ctx, m.GetWafExclusionRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdvertiseChoice := v.AdvertiseChoiceValidationRuleHandler
	rulesAdvertiseChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdvertiseChoice(rulesAdvertiseChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.advertise_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["advertise_choice"] = vFn

	vrhChallengeType := v.ChallengeTypeValidationRuleHandler
	rulesChallengeType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChallengeType(rulesChallengeType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.challenge_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_type"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhLoadbalancerType := v.LoadbalancerTypeValidationRuleHandler
	rulesLoadbalancerType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLoadbalancerType(rulesLoadbalancerType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.loadbalancer_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_type"] = vFn

	vrhRateLimitChoice := v.RateLimitChoiceValidationRuleHandler
	rulesRateLimitChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRateLimitChoice(rulesRateLimitChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.rate_limit_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limit_choice"] = vFn

	vrhServicePolicyChoice := v.ServicePolicyChoiceValidationRuleHandler
	rulesServicePolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServicePolicyChoice(rulesServicePolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.service_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_policy_choice"] = vFn

	vrhWafChoice := v.WafChoiceValidationRuleHandler
	rulesWafChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWafChoice(rulesWafChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.waf_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhDefaultRoutePools := v.DefaultRoutePoolsValidationRuleHandler
	rulesDefaultRoutePools := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDefaultRoutePools(rulesDefaultRoutePools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.default_route_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_route_pools"] = vFn

	vrhRoutes := v.RoutesValidationRuleHandler
	rulesRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRoutes(rulesRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routes"] = vFn

	vrhWafExclusionRules := v.WafExclusionRulesValidationRuleHandler
	rulesWafExclusionRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhWafExclusionRules(rulesWafExclusionRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.waf_exclusion_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_exclusion_rules"] = vFn

	vrhBlockedClients := v.BlockedClientsValidationRuleHandler
	rulesBlockedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhBlockedClients(rulesBlockedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.blocked_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_clients"] = vFn

	vrhTrustedClients := v.TrustedClientsValidationRuleHandler
	rulesTrustedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhTrustedClients(rulesTrustedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.trusted_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trusted_clients"] = vFn

	vrhDdosMitigationRules := v.DdosMitigationRulesValidationRuleHandler
	rulesDdosMitigationRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDdosMitigationRules(rulesDdosMitigationRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.ddos_mitigation_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ddos_mitigation_rules"] = vFn

	v.FldValidators["advertise_choice.advertise_on_public"] = ves_io_schema_views.AdvertisePublicValidator().Validate
	v.FldValidators["advertise_choice.advertise_custom"] = ves_io_schema_views.AdvertiseCustomValidator().Validate

	v.FldValidators["challenge_type.js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.captcha_challenge"] = ves_io_schema_virtual_host.CaptchaChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.policy_based_challenge"] = PolicyBasedChallengeValidator().Validate

	v.FldValidators["hash_policy_choice.cookie_stickiness"] = ves_io_schema_route.CookieForHashingValidator().Validate
	v.FldValidators["hash_policy_choice.ring_hash"] = HashPolicyListTypeValidator().Validate

	v.FldValidators["loadbalancer_type.https"] = ProxyTypeHttpsValidator().Validate
	v.FldValidators["loadbalancer_type.https_auto_cert"] = ProxyTypeHttpsAutoCertsValidator().Validate

	v.FldValidators["rate_limit_choice.rate_limit"] = RateLimitConfigTypeValidator().Validate

	v.FldValidators["service_policy_choice.active_service_policies"] = ServicePolicyListValidator().Validate

	v.FldValidators["waf_choice.waf"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["waf_choice.waf_rule"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["waf_choice.app_firewall"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cors_policy"] = ves_io_schema.CorsPolicyValidator().Validate

	v.FldValidators["more_option"] = AdvancedOptionsTypeValidator().Validate

	v.FldValidators["user_identification"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["malicious_user_mitigation"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CustomIpAllowedList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CustomIpAllowedList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CustomIpAllowedList) DeepCopy() *CustomIpAllowedList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CustomIpAllowedList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CustomIpAllowedList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CustomIpAllowedList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CustomIpAllowedListValidator().Validate(ctx, m, opts...)
}

func (m *CustomIpAllowedList) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetRateLimiterAllowedPrefixesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *CustomIpAllowedList) GetRateLimiterAllowedPrefixesDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, vref := range m.GetRateLimiterAllowedPrefixes() {
		if vref == nil {
			return nil, fmt.Errorf("CustomIpAllowedList.rate_limiter_allowed_prefixes[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("ip_prefix_set.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "ip_prefix_set.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "rate_limiter_allowed_prefixes",
			Ref:        vdRef,
		})
	}

	return drInfos, nil
}

// GetRateLimiterAllowedPrefixesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CustomIpAllowedList) GetRateLimiterAllowedPrefixesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "ip_prefix_set.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: ip_prefix_set")
	}
	for i, vref := range m.GetRateLimiterAllowedPrefixes() {
		if vref == nil {
			return nil, fmt.Errorf("CustomIpAllowedList.rate_limiter_allowed_prefixes[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "ip_prefix_set.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateCustomIpAllowedList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCustomIpAllowedList) RateLimiterAllowedPrefixesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rate_limiter_allowed_prefixes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rate_limiter_allowed_prefixes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rate_limiter_allowed_prefixes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCustomIpAllowedList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CustomIpAllowedList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CustomIpAllowedList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["rate_limiter_allowed_prefixes"]; exists {
		vOpts := append(opts, db.WithValidateField("rate_limiter_allowed_prefixes"))
		if err := fv(ctx, m.GetRateLimiterAllowedPrefixes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCustomIpAllowedListValidator = func() *ValidateCustomIpAllowedList {
	v := &ValidateCustomIpAllowedList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRateLimiterAllowedPrefixes := v.RateLimiterAllowedPrefixesValidationRuleHandler
	rulesRateLimiterAllowedPrefixes := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhRateLimiterAllowedPrefixes(rulesRateLimiterAllowedPrefixes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CustomIpAllowedList.rate_limiter_allowed_prefixes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limiter_allowed_prefixes"] = vFn

	return v
}()

func CustomIpAllowedListValidator() db.Validator {
	return DefaultCustomIpAllowedListValidator
}

// augmented methods on protoc/std generated struct

func (m *DDoSClientSource) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DDoSClientSource) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DDoSClientSource) DeepCopy() *DDoSClientSource {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DDoSClientSource{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DDoSClientSource) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DDoSClientSource) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DDoSClientSourceValidator().Validate(ctx, m, opts...)
}

type ValidateDDoSClientSource struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDDoSClientSource) CountryListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.CountryCode)
		return int32(i)
	}
	// ves_io_schema_policy.CountryCode_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_policy.CountryCode_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for country_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_policy.CountryCode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for country_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_policy.CountryCode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_policy.CountryCode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated country_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items country_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDDoSClientSource) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DDoSClientSource)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DDoSClientSource got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["asn_list"]; exists {

		vOpts := append(opts, db.WithValidateField("asn_list"))
		if err := fv(ctx, m.GetAsnList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["country_list"]; exists {
		vOpts := append(opts, db.WithValidateField("country_list"))
		if err := fv(ctx, m.GetCountryList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_fingerprint_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("tls_fingerprint_matcher"))
		if err := fv(ctx, m.GetTlsFingerprintMatcher(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDDoSClientSourceValidator = func() *ValidateDDoSClientSource {
	v := &ValidateDDoSClientSource{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCountryList := v.CountryListValidationRuleHandler
	rulesCountryList := map[string]string{
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.items.enum.not_in":       "[0]",
		"ves.io.schema.rules.repeated.max_items":               "64",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhCountryList(rulesCountryList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DDoSClientSource.country_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["country_list"] = vFn

	v.FldValidators["asn_list"] = ves_io_schema_policy.AsnMatchListValidator().Validate

	v.FldValidators["tls_fingerprint_matcher"] = ves_io_schema_policy.TlsFingerprintMatcherTypeValidator().Validate

	return v
}()

func DDoSClientSourceValidator() db.Validator {
	return DefaultDDoSClientSourceValidator
}

// augmented methods on protoc/std generated struct

func (m *DDoSMitigationRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DDoSMitigationRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DDoSMitigationRule) DeepCopy() *DDoSMitigationRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DDoSMitigationRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DDoSMitigationRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DDoSMitigationRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DDoSMitigationRuleValidator().Validate(ctx, m, opts...)
}

type ValidateDDoSMitigationRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDDoSMitigationRule) MitigationActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mitigation_action")
	}
	return validatorFn, nil
}

func (v *ValidateDDoSMitigationRule) MitigationChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mitigation_choice")
	}
	return validatorFn, nil
}

func (v *ValidateDDoSMitigationRule) MitigationChoiceDdosClientSourceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return DDoSClientSourceValidator().Validate, nil
}
func (v *ValidateDDoSMitigationRule) MitigationChoiceIpPrefixListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return ves_io_schema_policy.PrefixMatchListValidator().Validate, nil
}

func (v *ValidateDDoSMitigationRule) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDDoSMitigationRule) ExpirationTimestampValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var (
		reqdValidatorFn db.ValidatorFunc
		err             error
	)

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if reqdValidatorFn != nil {
			if err = reqdValidatorFn(ctx, val, opts...); err != nil {
				return err
			}
		}
		// TODO: lookup configured third-party type validators
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDDoSMitigationRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DDoSMitigationRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DDoSMitigationRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["expiration_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("expiration_timestamp"))
		if err := fv(ctx, m.GetExpirationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mitigation_action"]; exists {
		val := m.GetMitigationAction()
		vOpts := append(opts,
			db.WithValidateField("mitigation_action"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMitigationAction().(type) {
	case *DDoSMitigationRule_Block:
		if fv, exists := v.FldValidators["mitigation_action.block"]; exists {
			val := m.GetMitigationAction().(*DDoSMitigationRule_Block).Block
			vOpts := append(opts,
				db.WithValidateField("mitigation_action"),
				db.WithValidateField("block"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["mitigation_choice"]; exists {
		val := m.GetMitigationChoice()
		vOpts := append(opts,
			db.WithValidateField("mitigation_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMitigationChoice().(type) {
	case *DDoSMitigationRule_DdosClientSource:
		if fv, exists := v.FldValidators["mitigation_choice.ddos_client_source"]; exists {
			val := m.GetMitigationChoice().(*DDoSMitigationRule_DdosClientSource).DdosClientSource
			vOpts := append(opts,
				db.WithValidateField("mitigation_choice"),
				db.WithValidateField("ddos_client_source"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DDoSMitigationRule_IpPrefixList:
		if fv, exists := v.FldValidators["mitigation_choice.ip_prefix_list"]; exists {
			val := m.GetMitigationChoice().(*DDoSMitigationRule_IpPrefixList).IpPrefixList
			vOpts := append(opts,
				db.WithValidateField("mitigation_choice"),
				db.WithValidateField("ip_prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDDoSMitigationRuleValidator = func() *ValidateDDoSMitigationRule {
	v := &ValidateDDoSMitigationRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMitigationAction := v.MitigationActionValidationRuleHandler
	rulesMitigationAction := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMitigationAction(rulesMitigationAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DDoSMitigationRule.mitigation_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mitigation_action"] = vFn

	vrhMitigationChoice := v.MitigationChoiceValidationRuleHandler
	rulesMitigationChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMitigationChoice(rulesMitigationChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DDoSMitigationRule.mitigation_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mitigation_choice"] = vFn

	vrhMitigationChoiceDdosClientSource := v.MitigationChoiceDdosClientSourceValidationRuleHandler
	rulesMitigationChoiceDdosClientSource := map[string]string{
		"ves.io.schema.rules.message.required":                   "true",
		"ves.io.schema.rules.message.required_one_nonzero_field": "true",
	}
	vFnMap["mitigation_choice.ddos_client_source"], err = vrhMitigationChoiceDdosClientSource(rulesMitigationChoiceDdosClientSource)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field DDoSMitigationRule.mitigation_choice_ddos_client_source: %s", err)
		panic(errMsg)
	}
	vrhMitigationChoiceIpPrefixList := v.MitigationChoiceIpPrefixListValidationRuleHandler
	rulesMitigationChoiceIpPrefixList := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFnMap["mitigation_choice.ip_prefix_list"], err = vrhMitigationChoiceIpPrefixList(rulesMitigationChoiceIpPrefixList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field DDoSMitigationRule.mitigation_choice_ip_prefix_list: %s", err)
		panic(errMsg)
	}

	v.FldValidators["mitigation_choice.ddos_client_source"] = vFnMap["mitigation_choice.ddos_client_source"]
	v.FldValidators["mitigation_choice.ip_prefix_list"] = vFnMap["mitigation_choice.ip_prefix_list"]

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DDoSMitigationRule.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhExpirationTimestamp := v.ExpirationTimestampValidationRuleHandler
	rulesExpirationTimestamp := map[string]string{
		"ves.io.schema.rules.timestamp.gt_now":         "true",
		"ves.io.schema.rules.timestamp.within.seconds": "31536000",
	}
	vFn, err = vrhExpirationTimestamp(rulesExpirationTimestamp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DDoSMitigationRule.expiration_timestamp: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expiration_timestamp"] = vFn

	return v
}()

func DDoSMitigationRuleValidator() db.Validator {
	return DefaultDDoSMitigationRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *DownstreamTlsParamsType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DownstreamTlsParamsType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *DownstreamTlsParamsType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetTlsCertificates() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting DownstreamTlsParamsType.tls_certificates idx %v", idx)
		}
	}

	return nil
}

func (m *DownstreamTlsParamsType) DeepCopy() *DownstreamTlsParamsType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DownstreamTlsParamsType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DownstreamTlsParamsType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DownstreamTlsParamsType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DownstreamTlsParamsTypeValidator().Validate(ctx, m, opts...)
}

type ValidateDownstreamTlsParamsType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDownstreamTlsParamsType) MtlsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mtls_choice")
	}
	return validatorFn, nil
}

func (v *ValidateDownstreamTlsParamsType) TlsCertificatesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.TlsCertificateType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.TlsCertificateTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for tls_certificates")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.TlsCertificateType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.TlsCertificateType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated tls_certificates")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tls_certificates")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDownstreamTlsParamsType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DownstreamTlsParamsType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DownstreamTlsParamsType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["mtls_choice"]; exists {
		val := m.GetMtlsChoice()
		vOpts := append(opts,
			db.WithValidateField("mtls_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMtlsChoice().(type) {
	case *DownstreamTlsParamsType_NoMtls:
		if fv, exists := v.FldValidators["mtls_choice.no_mtls"]; exists {
			val := m.GetMtlsChoice().(*DownstreamTlsParamsType_NoMtls).NoMtls
			vOpts := append(opts,
				db.WithValidateField("mtls_choice"),
				db.WithValidateField("no_mtls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DownstreamTlsParamsType_UseMtls:
		if fv, exists := v.FldValidators["mtls_choice.use_mtls"]; exists {
			val := m.GetMtlsChoice().(*DownstreamTlsParamsType_UseMtls).UseMtls
			vOpts := append(opts,
				db.WithValidateField("mtls_choice"),
				db.WithValidateField("use_mtls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tls_certificates"]; exists {
		vOpts := append(opts, db.WithValidateField("tls_certificates"))
		if err := fv(ctx, m.GetTlsCertificates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_config"]; exists {

		vOpts := append(opts, db.WithValidateField("tls_config"))
		if err := fv(ctx, m.GetTlsConfig(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDownstreamTlsParamsTypeValidator = func() *ValidateDownstreamTlsParamsType {
	v := &ValidateDownstreamTlsParamsType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMtlsChoice := v.MtlsChoiceValidationRuleHandler
	rulesMtlsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMtlsChoice(rulesMtlsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DownstreamTlsParamsType.mtls_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mtls_choice"] = vFn

	vrhTlsCertificates := v.TlsCertificatesValidationRuleHandler
	rulesTlsCertificates := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhTlsCertificates(rulesTlsCertificates)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DownstreamTlsParamsType.tls_certificates: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_certificates"] = vFn

	v.FldValidators["mtls_choice.use_mtls"] = DownstreamTlsValidationContextValidator().Validate

	v.FldValidators["tls_config"] = ves_io_schema_views.TlsConfigValidator().Validate

	return v
}()

func DownstreamTlsParamsTypeValidator() db.Validator {
	return DefaultDownstreamTlsParamsTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DownstreamTlsValidationContext) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DownstreamTlsValidationContext) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DownstreamTlsValidationContext) DeepCopy() *DownstreamTlsValidationContext {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DownstreamTlsValidationContext{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DownstreamTlsValidationContext) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DownstreamTlsValidationContext) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DownstreamTlsValidationContextValidator().Validate(ctx, m, opts...)
}

type ValidateDownstreamTlsValidationContext struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDownstreamTlsValidationContext) TrustedCaUrlValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for trusted_ca_url")
	}

	return validatorFn, nil
}

func (v *ValidateDownstreamTlsValidationContext) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DownstreamTlsValidationContext)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DownstreamTlsValidationContext got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["trusted_ca_url"]; exists {

		vOpts := append(opts, db.WithValidateField("trusted_ca_url"))
		if err := fv(ctx, m.GetTrustedCaUrl(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDownstreamTlsValidationContextValidator = func() *ValidateDownstreamTlsValidationContext {
	v := &ValidateDownstreamTlsValidationContext{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTrustedCaUrl := v.TrustedCaUrlValidationRuleHandler
	rulesTrustedCaUrl := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_bytes": "131072",
		"ves.io.schema.rules.string.min_bytes": "1",
		"ves.io.schema.rules.string.uri_ref":   "true",
	}
	vFn, err = vrhTrustedCaUrl(rulesTrustedCaUrl)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DownstreamTlsValidationContext.trusted_ca_url: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trusted_ca_url"] = vFn

	return v
}()

func DownstreamTlsValidationContextValidator() db.Validator {
	return DefaultDownstreamTlsValidationContextValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttps().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.https")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvertiseChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetChallengeTypeDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDefaultRoutePoolsDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMaliciousUserMitigationDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMoreOptionDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimitChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRoutesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServicePolicyChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetUserIdentificationDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetAdvertiseChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetAdvertiseChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetAdvertiseChoice().(type) {
	case *GetSpecType_AdvertiseOnPublic:
		odrInfos, err = m.GetAdvertiseOnPublic().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "advertise_on_public." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *GetSpecType_AdvertiseCustom:
		odrInfos, err = m.GetAdvertiseCustom().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "advertise_custom." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *GetSpecType_DoNotAdvertise:

	case *GetSpecType_AdvertiseOnPublicDefaultVip:

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetChallengeTypeDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetChallengeType() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetChallengeType().(type) {
	case *GetSpecType_JsChallenge:

	case *GetSpecType_CaptchaChallenge:

	case *GetSpecType_NoChallenge:

	case *GetSpecType_PolicyBasedChallenge:
		odrInfos, err = m.GetPolicyBasedChallenge().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "policy_based_challenge." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetDefaultRoutePoolsDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetDefaultRoutePools() == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.GetDefaultRoutePools() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("default_route_pools[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

func (m *GetSpecType) GetMaliciousUserMitigationDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("malicious_user_mitigation.Object")
	drInfos = append(drInfos, db.DRefInfo{
		RefdType:   "malicious_user_mitigation.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "malicious_user_mitigation",
		Ref:        vdRef,
	})

	return drInfos, nil
}

// GetMaliciousUserMitigationDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetMaliciousUserMitigationDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "malicious_user_mitigation.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: malicious_user_mitigation")
	}

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "malicious_user_mitigation.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetMoreOptionDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetMoreOption() == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.GetMoreOption().GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "more_option." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetRateLimitChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetRateLimitChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetRateLimitChoice().(type) {
	case *GetSpecType_DisableRateLimit:

	case *GetSpecType_RateLimit:
		odrInfos, err = m.GetRateLimit().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "rate_limit." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetRoutesDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetRoutes() == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.GetRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("routes[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetServicePolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetServicePolicyChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetServicePolicyChoice().(type) {
	case *GetSpecType_ServicePoliciesFromNamespace:

	case *GetSpecType_NoServicePolicies:

	case *GetSpecType_ActiveServicePolicies:
		odrInfos, err = m.GetActiveServicePolicies().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "active_service_policies." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

func (m *GetSpecType) GetUserIdentificationDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}

	vref := m.GetUserIdentification()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("user_identification.Object")
	drInfos = append(drInfos, db.DRefInfo{
		RefdType:   "user_identification.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "user_identification",
		Ref:        vdRef,
	})

	return drInfos, nil
}

// GetUserIdentificationDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetUserIdentificationDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "user_identification.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: user_identification")
	}

	vref := m.GetUserIdentification()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "user_identification.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *GetSpecType) GetWafChoiceDRefInfo() ([]db.DRefInfo, error) {
	var odrInfos []db.DRefInfo

	switch m.GetWafChoice().(type) {
	case *GetSpecType_Waf:

		vref := m.GetWaf()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("waf.Object")
		odri := db.DRefInfo{
			RefdType:   "waf.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "waf",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	case *GetSpecType_WafRule:

		vref := m.GetWafRule()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("waf_rules.Object")
		odri := db.DRefInfo{
			RefdType:   "waf_rules.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "waf_rule",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	case *GetSpecType_DisableWaf:

	case *GetSpecType_AppFirewall:

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("app_firewall.Object")
		odri := db.DRefInfo{
			RefdType:   "app_firewall.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "app_firewall",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	}

	return odrInfos, nil
}

// GetWafChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetWafChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetWafChoice().(type) {
	case *GetSpecType_Waf:
		refdType, err := d.TypeForEntryKind("", "", "waf.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: waf")
		}

		vref := m.GetWaf()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "waf.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GetSpecType_WafRule:
		refdType, err := d.TypeForEntryKind("", "", "waf_rules.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: waf_rules")
		}

		vref := m.GetWafRule()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "waf_rules.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GetSpecType_DisableWaf:

	case *GetSpecType_AppFirewall:
		refdType, err := d.TypeForEntryKind("", "", "app_firewall.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: app_firewall")
		}

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "app_firewall.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) AdvertiseChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for advertise_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ChallengeTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_type")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) LoadbalancerTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for loadbalancer_type")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) RateLimitChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rate_limit_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ServicePolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) WafChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for waf_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DefaultRoutePoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_route_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_route_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_route_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*RouteType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := RouteTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RouteType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RouteType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) WafExclusionRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleWafExclusionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.SimpleWafExclusionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for waf_exclusion_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleWafExclusionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleWafExclusionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated waf_exclusion_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items waf_exclusion_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) BlockedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for blocked_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated blocked_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items blocked_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) TrustedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for trusted_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated trusted_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items trusted_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DdosMitigationRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*DDoSMitigationRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := DDoSMitigationRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ddos_mitigation_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DDoSMitigationRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DDoSMitigationRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ddos_mitigation_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ddos_mitigation_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_location"]; exists {

		vOpts := append(opts, db.WithValidateField("add_location"))
		if err := fv(ctx, m.GetAddLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["advertise_choice"]; exists {
		val := m.GetAdvertiseChoice()
		vOpts := append(opts,
			db.WithValidateField("advertise_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdvertiseChoice().(type) {
	case *GetSpecType_AdvertiseOnPublic:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public"]; exists {
			val := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublic).AdvertiseOnPublic
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AdvertiseCustom:
		if fv, exists := v.FldValidators["advertise_choice.advertise_custom"]; exists {
			val := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseCustom).AdvertiseCustom
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DoNotAdvertise:
		if fv, exists := v.FldValidators["advertise_choice.do_not_advertise"]; exists {
			val := m.GetAdvertiseChoice().(*GetSpecType_DoNotAdvertise).DoNotAdvertise
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("do_not_advertise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AdvertiseOnPublicDefaultVip:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public_default_vip"]; exists {
			val := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublicDefaultVip).AdvertiseOnPublicDefaultVip
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public_default_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["auto_cert_info"]; exists {

		vOpts := append(opts, db.WithValidateField("auto_cert_info"))
		if err := fv(ctx, m.GetAutoCertInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["auto_cert_state"]; exists {

		vOpts := append(opts, db.WithValidateField("auto_cert_state"))
		if err := fv(ctx, m.GetAutoCertState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("blocked_clients"))
		if err := fv(ctx, m.GetBlockedClients(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["challenge_type"]; exists {
		val := m.GetChallengeType()
		vOpts := append(opts,
			db.WithValidateField("challenge_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChallengeType().(type) {
	case *GetSpecType_JsChallenge:
		if fv, exists := v.FldValidators["challenge_type.js_challenge"]; exists {
			val := m.GetChallengeType().(*GetSpecType_JsChallenge).JsChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_CaptchaChallenge:
		if fv, exists := v.FldValidators["challenge_type.captcha_challenge"]; exists {
			val := m.GetChallengeType().(*GetSpecType_CaptchaChallenge).CaptchaChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("captcha_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NoChallenge:
		if fv, exists := v.FldValidators["challenge_type.no_challenge"]; exists {
			val := m.GetChallengeType().(*GetSpecType_NoChallenge).NoChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("no_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_PolicyBasedChallenge:
		if fv, exists := v.FldValidators["challenge_type.policy_based_challenge"]; exists {
			val := m.GetChallengeType().(*GetSpecType_PolicyBasedChallenge).PolicyBasedChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("policy_based_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cors_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("cors_policy"))
		if err := fv(ctx, m.GetCorsPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ddos_mitigation_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("ddos_mitigation_rules"))
		if err := fv(ctx, m.GetDdosMitigationRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_route_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("default_route_pools"))
		if err := fv(ctx, m.GetDefaultRoutePools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dns_info"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_info"))
		for idx, item := range m.GetDnsInfo() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *GetSpecType_RoundRobin:
		if fv, exists := v.FldValidators["hash_policy_choice.round_robin"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_RoundRobin).RoundRobin
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("round_robin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LeastActive:
		if fv, exists := v.FldValidators["hash_policy_choice.least_active"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_LeastActive).LeastActive
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("least_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Random:
		if fv, exists := v.FldValidators["hash_policy_choice.random"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_Random).Random
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("random"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SourceIpStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.source_ip_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_SourceIpStickiness).SourceIpStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("source_ip_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_CookieStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.cookie_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_CookieStickiness).CookieStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("cookie_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_RingHash:
		if fv, exists := v.FldValidators["hash_policy_choice.ring_hash"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_RingHash).RingHash
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("ring_hash"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["host_name"]; exists {

		vOpts := append(opts, db.WithValidateField("host_name"))
		if err := fv(ctx, m.GetHostName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["loadbalancer_type"]; exists {
		val := m.GetLoadbalancerType()
		vOpts := append(opts,
			db.WithValidateField("loadbalancer_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLoadbalancerType().(type) {
	case *GetSpecType_Http:
		if fv, exists := v.FldValidators["loadbalancer_type.http"]; exists {
			val := m.GetLoadbalancerType().(*GetSpecType_Http).Http
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("http"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Https:
		if fv, exists := v.FldValidators["loadbalancer_type.https"]; exists {
			val := m.GetLoadbalancerType().(*GetSpecType_Https).Https
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_HttpsAutoCert:
		if fv, exists := v.FldValidators["loadbalancer_type.https_auto_cert"]; exists {
			val := m.GetLoadbalancerType().(*GetSpecType_HttpsAutoCert).HttpsAutoCert
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https_auto_cert"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_mitigation"]; exists {

		vOpts := append(opts, db.WithValidateField("malicious_user_mitigation"))
		if err := fv(ctx, m.GetMaliciousUserMitigation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["more_option"]; exists {

		vOpts := append(opts, db.WithValidateField("more_option"))
		if err := fv(ctx, m.GetMoreOption(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limit_choice"]; exists {
		val := m.GetRateLimitChoice()
		vOpts := append(opts,
			db.WithValidateField("rate_limit_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRateLimitChoice().(type) {
	case *GetSpecType_DisableRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.disable_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*GetSpecType_DisableRateLimit).DisableRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("disable_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_RateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*GetSpecType_RateLimit).RateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["routes"]; exists {
		vOpts := append(opts, db.WithValidateField("routes"))
		if err := fv(ctx, m.GetRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service_policy_choice"]; exists {
		val := m.GetServicePolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("service_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServicePolicyChoice().(type) {
	case *GetSpecType_ServicePoliciesFromNamespace:
		if fv, exists := v.FldValidators["service_policy_choice.service_policies_from_namespace"]; exists {
			val := m.GetServicePolicyChoice().(*GetSpecType_ServicePoliciesFromNamespace).ServicePoliciesFromNamespace
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("service_policies_from_namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NoServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.no_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*GetSpecType_NoServicePolicies).NoServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("no_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ActiveServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.active_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*GetSpecType_ActiveServicePolicies).ActiveServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("active_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["state"]; exists {

		vOpts := append(opts, db.WithValidateField("state"))
		if err := fv(ctx, m.GetState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["trusted_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("trusted_clients"))
		if err := fv(ctx, m.GetTrustedClients(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_identification"]; exists {

		vOpts := append(opts, db.WithValidateField("user_identification"))
		if err := fv(ctx, m.GetUserIdentification(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_choice"]; exists {
		val := m.GetWafChoice()
		vOpts := append(opts,
			db.WithValidateField("waf_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWafChoice().(type) {
	case *GetSpecType_Waf:
		if fv, exists := v.FldValidators["waf_choice.waf"]; exists {
			val := m.GetWafChoice().(*GetSpecType_Waf).Waf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_WafRule:
		if fv, exists := v.FldValidators["waf_choice.waf_rule"]; exists {
			val := m.GetWafChoice().(*GetSpecType_WafRule).WafRule
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("waf_rule"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DisableWaf:
		if fv, exists := v.FldValidators["waf_choice.disable_waf"]; exists {
			val := m.GetWafChoice().(*GetSpecType_DisableWaf).DisableWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("disable_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AppFirewall:
		if fv, exists := v.FldValidators["waf_choice.app_firewall"]; exists {
			val := m.GetWafChoice().(*GetSpecType_AppFirewall).AppFirewall
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("app_firewall"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_exclusion_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("waf_exclusion_rules"))
		if err := fv(ctx, m.GetWafExclusionRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdvertiseChoice := v.AdvertiseChoiceValidationRuleHandler
	rulesAdvertiseChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdvertiseChoice(rulesAdvertiseChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.advertise_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["advertise_choice"] = vFn

	vrhChallengeType := v.ChallengeTypeValidationRuleHandler
	rulesChallengeType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChallengeType(rulesChallengeType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.challenge_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_type"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhLoadbalancerType := v.LoadbalancerTypeValidationRuleHandler
	rulesLoadbalancerType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLoadbalancerType(rulesLoadbalancerType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.loadbalancer_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_type"] = vFn

	vrhRateLimitChoice := v.RateLimitChoiceValidationRuleHandler
	rulesRateLimitChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRateLimitChoice(rulesRateLimitChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.rate_limit_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limit_choice"] = vFn

	vrhServicePolicyChoice := v.ServicePolicyChoiceValidationRuleHandler
	rulesServicePolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServicePolicyChoice(rulesServicePolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.service_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_policy_choice"] = vFn

	vrhWafChoice := v.WafChoiceValidationRuleHandler
	rulesWafChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWafChoice(rulesWafChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.waf_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhDefaultRoutePools := v.DefaultRoutePoolsValidationRuleHandler
	rulesDefaultRoutePools := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDefaultRoutePools(rulesDefaultRoutePools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.default_route_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_route_pools"] = vFn

	vrhRoutes := v.RoutesValidationRuleHandler
	rulesRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRoutes(rulesRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routes"] = vFn

	vrhWafExclusionRules := v.WafExclusionRulesValidationRuleHandler
	rulesWafExclusionRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhWafExclusionRules(rulesWafExclusionRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.waf_exclusion_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_exclusion_rules"] = vFn

	vrhBlockedClients := v.BlockedClientsValidationRuleHandler
	rulesBlockedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhBlockedClients(rulesBlockedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.blocked_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_clients"] = vFn

	vrhTrustedClients := v.TrustedClientsValidationRuleHandler
	rulesTrustedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhTrustedClients(rulesTrustedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.trusted_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trusted_clients"] = vFn

	vrhDdosMitigationRules := v.DdosMitigationRulesValidationRuleHandler
	rulesDdosMitigationRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDdosMitigationRules(rulesDdosMitigationRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.ddos_mitigation_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ddos_mitigation_rules"] = vFn

	v.FldValidators["advertise_choice.advertise_on_public"] = ves_io_schema_views.AdvertisePublicValidator().Validate
	v.FldValidators["advertise_choice.advertise_custom"] = ves_io_schema_views.AdvertiseCustomValidator().Validate

	v.FldValidators["challenge_type.js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.captcha_challenge"] = ves_io_schema_virtual_host.CaptchaChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.policy_based_challenge"] = PolicyBasedChallengeValidator().Validate

	v.FldValidators["hash_policy_choice.cookie_stickiness"] = ves_io_schema_route.CookieForHashingValidator().Validate
	v.FldValidators["hash_policy_choice.ring_hash"] = HashPolicyListTypeValidator().Validate

	v.FldValidators["loadbalancer_type.https"] = ProxyTypeHttpsValidator().Validate
	v.FldValidators["loadbalancer_type.https_auto_cert"] = ProxyTypeHttpsAutoCertsValidator().Validate

	v.FldValidators["rate_limit_choice.rate_limit"] = RateLimitConfigTypeValidator().Validate

	v.FldValidators["service_policy_choice.active_service_policies"] = ServicePolicyListValidator().Validate

	v.FldValidators["waf_choice.waf"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["waf_choice.waf_rule"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["waf_choice.app_firewall"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cors_policy"] = ves_io_schema.CorsPolicyValidator().Validate

	v.FldValidators["more_option"] = AdvancedOptionsTypeValidator().Validate

	v.FldValidators["user_identification"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["malicious_user_mitigation"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["dns_info"] = ves_io_schema_virtual_host_dns_info.DnsInfoValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttps().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.https")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvertiseChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetChallengeTypeDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDefaultRoutePoolsDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMaliciousUserMitigationDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMoreOptionDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimitChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRoutesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServicePolicyChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetUserIdentificationDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetAdvertiseChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetAdvertiseChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetAdvertiseChoice().(type) {
	case *GlobalSpecType_AdvertiseOnPublic:
		odrInfos, err = m.GetAdvertiseOnPublic().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "advertise_on_public." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *GlobalSpecType_AdvertiseCustom:
		odrInfos, err = m.GetAdvertiseCustom().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "advertise_custom." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *GlobalSpecType_DoNotAdvertise:

	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetChallengeTypeDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetChallengeType() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetChallengeType().(type) {
	case *GlobalSpecType_JsChallenge:

	case *GlobalSpecType_CaptchaChallenge:

	case *GlobalSpecType_NoChallenge:

	case *GlobalSpecType_PolicyBasedChallenge:
		odrInfos, err = m.GetPolicyBasedChallenge().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "policy_based_challenge." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetDefaultRoutePoolsDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetDefaultRoutePools() == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.GetDefaultRoutePools() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("default_route_pools[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

func (m *GlobalSpecType) GetMaliciousUserMitigationDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("malicious_user_mitigation.Object")
	drInfos = append(drInfos, db.DRefInfo{
		RefdType:   "malicious_user_mitigation.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "malicious_user_mitigation",
		Ref:        vdRef,
	})

	return drInfos, nil
}

// GetMaliciousUserMitigationDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetMaliciousUserMitigationDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "malicious_user_mitigation.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: malicious_user_mitigation")
	}

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "malicious_user_mitigation.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetMoreOptionDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetMoreOption() == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.GetMoreOption().GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "more_option." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetRateLimitChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetRateLimitChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetRateLimitChoice().(type) {
	case *GlobalSpecType_DisableRateLimit:

	case *GlobalSpecType_RateLimit:
		odrInfos, err = m.GetRateLimit().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "rate_limit." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetRoutesDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetRoutes() == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.GetRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("routes[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetServicePolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetServicePolicyChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetServicePolicyChoice().(type) {
	case *GlobalSpecType_ServicePoliciesFromNamespace:

	case *GlobalSpecType_NoServicePolicies:

	case *GlobalSpecType_ActiveServicePolicies:
		odrInfos, err = m.GetActiveServicePolicies().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "active_service_policies." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

func (m *GlobalSpecType) GetUserIdentificationDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}

	vref := m.GetUserIdentification()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("user_identification.Object")
	drInfos = append(drInfos, db.DRefInfo{
		RefdType:   "user_identification.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "user_identification",
		Ref:        vdRef,
	})

	return drInfos, nil
}

// GetUserIdentificationDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetUserIdentificationDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "user_identification.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: user_identification")
	}

	vref := m.GetUserIdentification()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "user_identification.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	drInfos = append(drInfos, db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	})

	return drInfos, nil
}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *GlobalSpecType) GetWafChoiceDRefInfo() ([]db.DRefInfo, error) {
	var odrInfos []db.DRefInfo

	switch m.GetWafChoice().(type) {
	case *GlobalSpecType_Waf:

		vref := m.GetWaf()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("waf.Object")
		odri := db.DRefInfo{
			RefdType:   "waf.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "waf",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	case *GlobalSpecType_WafRule:

		vref := m.GetWafRule()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("waf_rules.Object")
		odri := db.DRefInfo{
			RefdType:   "waf_rules.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "waf_rule",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	case *GlobalSpecType_DisableWaf:

	case *GlobalSpecType_AppFirewall:

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("app_firewall.Object")
		odri := db.DRefInfo{
			RefdType:   "app_firewall.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "app_firewall",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	}

	return odrInfos, nil
}

// GetWafChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetWafChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetWafChoice().(type) {
	case *GlobalSpecType_Waf:
		refdType, err := d.TypeForEntryKind("", "", "waf.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: waf")
		}

		vref := m.GetWaf()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "waf.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GlobalSpecType_WafRule:
		refdType, err := d.TypeForEntryKind("", "", "waf_rules.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: waf_rules")
		}

		vref := m.GetWafRule()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "waf_rules.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GlobalSpecType_DisableWaf:

	case *GlobalSpecType_AppFirewall:
		refdType, err := d.TypeForEntryKind("", "", "app_firewall.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: app_firewall")
		}

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "app_firewall.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) AdvertiseChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for advertise_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ChallengeTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_type")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) HostRewriteParamsHostRewriteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_HostRewrite, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_rewrite")
	}
	return oValidatorFn_HostRewrite, nil
}

func (v *ValidateGlobalSpecType) LoadbalancerTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for loadbalancer_type")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RateLimitChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rate_limit_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ServicePolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) WafChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for waf_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DefaultRoutePoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_route_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_route_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_route_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*RouteType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := RouteTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RouteType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RouteType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) WafExclusionRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleWafExclusionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.SimpleWafExclusionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for waf_exclusion_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleWafExclusionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleWafExclusionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated waf_exclusion_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items waf_exclusion_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) BlockedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for blocked_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated blocked_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items blocked_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TrustedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for trusted_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated trusted_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items trusted_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DdosMitigationRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*DDoSMitigationRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := DDoSMitigationRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ddos_mitigation_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DDoSMitigationRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DDoSMitigationRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ddos_mitigation_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ddos_mitigation_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_location"]; exists {

		vOpts := append(opts, db.WithValidateField("add_location"))
		if err := fv(ctx, m.GetAddLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["advertise_choice"]; exists {
		val := m.GetAdvertiseChoice()
		vOpts := append(opts,
			db.WithValidateField("advertise_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdvertiseChoice().(type) {
	case *GlobalSpecType_AdvertiseOnPublic:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public"]; exists {
			val := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublic).AdvertiseOnPublic
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AdvertiseCustom:
		if fv, exists := v.FldValidators["advertise_choice.advertise_custom"]; exists {
			val := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseCustom).AdvertiseCustom
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DoNotAdvertise:
		if fv, exists := v.FldValidators["advertise_choice.do_not_advertise"]; exists {
			val := m.GetAdvertiseChoice().(*GlobalSpecType_DoNotAdvertise).DoNotAdvertise
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("do_not_advertise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public_default_vip"]; exists {
			val := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublicDefaultVip).AdvertiseOnPublicDefaultVip
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public_default_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["auto_cert_info"]; exists {

		vOpts := append(opts, db.WithValidateField("auto_cert_info"))
		if err := fv(ctx, m.GetAutoCertInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["auto_cert_state"]; exists {

		vOpts := append(opts, db.WithValidateField("auto_cert_state"))
		if err := fv(ctx, m.GetAutoCertState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("blocked_clients"))
		if err := fv(ctx, m.GetBlockedClients(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["challenge_type"]; exists {
		val := m.GetChallengeType()
		vOpts := append(opts,
			db.WithValidateField("challenge_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChallengeType().(type) {
	case *GlobalSpecType_JsChallenge:
		if fv, exists := v.FldValidators["challenge_type.js_challenge"]; exists {
			val := m.GetChallengeType().(*GlobalSpecType_JsChallenge).JsChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_CaptchaChallenge:
		if fv, exists := v.FldValidators["challenge_type.captcha_challenge"]; exists {
			val := m.GetChallengeType().(*GlobalSpecType_CaptchaChallenge).CaptchaChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("captcha_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NoChallenge:
		if fv, exists := v.FldValidators["challenge_type.no_challenge"]; exists {
			val := m.GetChallengeType().(*GlobalSpecType_NoChallenge).NoChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("no_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_PolicyBasedChallenge:
		if fv, exists := v.FldValidators["challenge_type.policy_based_challenge"]; exists {
			val := m.GetChallengeType().(*GlobalSpecType_PolicyBasedChallenge).PolicyBasedChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("policy_based_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cors_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("cors_policy"))
		if err := fv(ctx, m.GetCorsPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ddos_mitigation_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("ddos_mitigation_rules"))
		if err := fv(ctx, m.GetDdosMitigationRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_route_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("default_route_pools"))
		if err := fv(ctx, m.GetDefaultRoutePools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dns_info"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_info"))
		for idx, item := range m.GetDnsInfo() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *GlobalSpecType_RoundRobin:
		if fv, exists := v.FldValidators["hash_policy_choice.round_robin"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_RoundRobin).RoundRobin
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("round_robin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LeastActive:
		if fv, exists := v.FldValidators["hash_policy_choice.least_active"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_LeastActive).LeastActive
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("least_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Random:
		if fv, exists := v.FldValidators["hash_policy_choice.random"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_Random).Random
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("random"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SourceIpStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.source_ip_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_SourceIpStickiness).SourceIpStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("source_ip_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_CookieStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.cookie_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_CookieStickiness).CookieStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("cookie_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_RingHash:
		if fv, exists := v.FldValidators["hash_policy_choice.ring_hash"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_RingHash).RingHash
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("ring_hash"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["host_name"]; exists {

		vOpts := append(opts, db.WithValidateField("host_name"))
		if err := fv(ctx, m.GetHostName(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetHostRewriteParams().(type) {
	case *GlobalSpecType_AutoHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.auto_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*GlobalSpecType_AutoHostRewrite).AutoHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("auto_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_HostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*GlobalSpecType_HostRewrite).HostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DisableHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.disable_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*GlobalSpecType_DisableHostRewrite).DisableHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("disable_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["loadbalancer_type"]; exists {
		val := m.GetLoadbalancerType()
		vOpts := append(opts,
			db.WithValidateField("loadbalancer_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLoadbalancerType().(type) {
	case *GlobalSpecType_Http:
		if fv, exists := v.FldValidators["loadbalancer_type.http"]; exists {
			val := m.GetLoadbalancerType().(*GlobalSpecType_Http).Http
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("http"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Https:
		if fv, exists := v.FldValidators["loadbalancer_type.https"]; exists {
			val := m.GetLoadbalancerType().(*GlobalSpecType_Https).Https
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_HttpsAutoCert:
		if fv, exists := v.FldValidators["loadbalancer_type.https_auto_cert"]; exists {
			val := m.GetLoadbalancerType().(*GlobalSpecType_HttpsAutoCert).HttpsAutoCert
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https_auto_cert"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_mitigation"]; exists {

		vOpts := append(opts, db.WithValidateField("malicious_user_mitigation"))
		if err := fv(ctx, m.GetMaliciousUserMitigation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["more_option"]; exists {

		vOpts := append(opts, db.WithValidateField("more_option"))
		if err := fv(ctx, m.GetMoreOption(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limit_choice"]; exists {
		val := m.GetRateLimitChoice()
		vOpts := append(opts,
			db.WithValidateField("rate_limit_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRateLimitChoice().(type) {
	case *GlobalSpecType_DisableRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.disable_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*GlobalSpecType_DisableRateLimit).DisableRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("disable_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_RateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*GlobalSpecType_RateLimit).RateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["routes"]; exists {
		vOpts := append(opts, db.WithValidateField("routes"))
		if err := fv(ctx, m.GetRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service_policy_choice"]; exists {
		val := m.GetServicePolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("service_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServicePolicyChoice().(type) {
	case *GlobalSpecType_ServicePoliciesFromNamespace:
		if fv, exists := v.FldValidators["service_policy_choice.service_policies_from_namespace"]; exists {
			val := m.GetServicePolicyChoice().(*GlobalSpecType_ServicePoliciesFromNamespace).ServicePoliciesFromNamespace
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("service_policies_from_namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NoServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.no_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*GlobalSpecType_NoServicePolicies).NoServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("no_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ActiveServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.active_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*GlobalSpecType_ActiveServicePolicies).ActiveServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("active_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["state"]; exists {

		vOpts := append(opts, db.WithValidateField("state"))
		if err := fv(ctx, m.GetState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["trusted_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("trusted_clients"))
		if err := fv(ctx, m.GetTrustedClients(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_identification"]; exists {

		vOpts := append(opts, db.WithValidateField("user_identification"))
		if err := fv(ctx, m.GetUserIdentification(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_choice"]; exists {
		val := m.GetWafChoice()
		vOpts := append(opts,
			db.WithValidateField("waf_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWafChoice().(type) {
	case *GlobalSpecType_Waf:
		if fv, exists := v.FldValidators["waf_choice.waf"]; exists {
			val := m.GetWafChoice().(*GlobalSpecType_Waf).Waf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_WafRule:
		if fv, exists := v.FldValidators["waf_choice.waf_rule"]; exists {
			val := m.GetWafChoice().(*GlobalSpecType_WafRule).WafRule
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("waf_rule"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DisableWaf:
		if fv, exists := v.FldValidators["waf_choice.disable_waf"]; exists {
			val := m.GetWafChoice().(*GlobalSpecType_DisableWaf).DisableWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("disable_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AppFirewall:
		if fv, exists := v.FldValidators["waf_choice.app_firewall"]; exists {
			val := m.GetWafChoice().(*GlobalSpecType_AppFirewall).AppFirewall
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("app_firewall"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_exclusion_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("waf_exclusion_rules"))
		if err := fv(ctx, m.GetWafExclusionRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdvertiseChoice := v.AdvertiseChoiceValidationRuleHandler
	rulesAdvertiseChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdvertiseChoice(rulesAdvertiseChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.advertise_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["advertise_choice"] = vFn

	vrhChallengeType := v.ChallengeTypeValidationRuleHandler
	rulesChallengeType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChallengeType(rulesChallengeType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.challenge_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_type"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhHostRewriteParamsHostRewrite := v.HostRewriteParamsHostRewriteValidationRuleHandler
	rulesHostRewriteParamsHostRewrite := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
	}
	vFnMap["host_rewrite_params.host_rewrite"], err = vrhHostRewriteParamsHostRewrite(rulesHostRewriteParamsHostRewrite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.host_rewrite_params_host_rewrite: %s", err)
		panic(errMsg)
	}

	v.FldValidators["host_rewrite_params.host_rewrite"] = vFnMap["host_rewrite_params.host_rewrite"]

	vrhLoadbalancerType := v.LoadbalancerTypeValidationRuleHandler
	rulesLoadbalancerType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLoadbalancerType(rulesLoadbalancerType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.loadbalancer_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_type"] = vFn

	vrhRateLimitChoice := v.RateLimitChoiceValidationRuleHandler
	rulesRateLimitChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRateLimitChoice(rulesRateLimitChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.rate_limit_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limit_choice"] = vFn

	vrhServicePolicyChoice := v.ServicePolicyChoiceValidationRuleHandler
	rulesServicePolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServicePolicyChoice(rulesServicePolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.service_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_policy_choice"] = vFn

	vrhWafChoice := v.WafChoiceValidationRuleHandler
	rulesWafChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWafChoice(rulesWafChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.waf_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhDefaultRoutePools := v.DefaultRoutePoolsValidationRuleHandler
	rulesDefaultRoutePools := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDefaultRoutePools(rulesDefaultRoutePools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.default_route_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_route_pools"] = vFn

	vrhRoutes := v.RoutesValidationRuleHandler
	rulesRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRoutes(rulesRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routes"] = vFn

	vrhWafExclusionRules := v.WafExclusionRulesValidationRuleHandler
	rulesWafExclusionRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhWafExclusionRules(rulesWafExclusionRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.waf_exclusion_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_exclusion_rules"] = vFn

	vrhBlockedClients := v.BlockedClientsValidationRuleHandler
	rulesBlockedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhBlockedClients(rulesBlockedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.blocked_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_clients"] = vFn

	vrhTrustedClients := v.TrustedClientsValidationRuleHandler
	rulesTrustedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhTrustedClients(rulesTrustedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.trusted_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trusted_clients"] = vFn

	vrhDdosMitigationRules := v.DdosMitigationRulesValidationRuleHandler
	rulesDdosMitigationRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDdosMitigationRules(rulesDdosMitigationRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ddos_mitigation_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ddos_mitigation_rules"] = vFn

	v.FldValidators["advertise_choice.advertise_on_public"] = ves_io_schema_views.AdvertisePublicValidator().Validate
	v.FldValidators["advertise_choice.advertise_custom"] = ves_io_schema_views.AdvertiseCustomValidator().Validate

	v.FldValidators["challenge_type.js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.captcha_challenge"] = ves_io_schema_virtual_host.CaptchaChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.policy_based_challenge"] = PolicyBasedChallengeValidator().Validate

	v.FldValidators["hash_policy_choice.cookie_stickiness"] = ves_io_schema_route.CookieForHashingValidator().Validate
	v.FldValidators["hash_policy_choice.ring_hash"] = HashPolicyListTypeValidator().Validate

	v.FldValidators["loadbalancer_type.https"] = ProxyTypeHttpsValidator().Validate
	v.FldValidators["loadbalancer_type.https_auto_cert"] = ProxyTypeHttpsAutoCertsValidator().Validate

	v.FldValidators["rate_limit_choice.rate_limit"] = RateLimitConfigTypeValidator().Validate

	v.FldValidators["service_policy_choice.active_service_policies"] = ServicePolicyListValidator().Validate

	v.FldValidators["waf_choice.waf"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["waf_choice.waf_rule"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["waf_choice.app_firewall"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cors_policy"] = ves_io_schema.CorsPolicyValidator().Validate

	v.FldValidators["more_option"] = AdvancedOptionsTypeValidator().Validate

	v.FldValidators["user_identification"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["malicious_user_mitigation"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["dns_info"] = ves_io_schema_virtual_host_dns_info.DnsInfoValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *HashPolicyListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HashPolicyListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *HashPolicyListType) DeepCopy() *HashPolicyListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HashPolicyListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HashPolicyListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HashPolicyListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HashPolicyListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateHashPolicyListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHashPolicyListType) HashPolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_route.HashPolicyType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_route.HashPolicyTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for hash_policy")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_route.HashPolicyType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_route.HashPolicyType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated hash_policy")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items hash_policy")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHashPolicyListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HashPolicyListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HashPolicyListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["hash_policy"]; exists {
		vOpts := append(opts, db.WithValidateField("hash_policy"))
		if err := fv(ctx, m.GetHashPolicy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHashPolicyListTypeValidator = func() *ValidateHashPolicyListType {
	v := &ValidateHashPolicyListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHashPolicy := v.HashPolicyValidationRuleHandler
	rulesHashPolicy := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhHashPolicy(rulesHashPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HashPolicyListType.hash_policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy"] = vFn

	return v
}()

func HashPolicyListTypeValidator() db.Validator {
	return DefaultHashPolicyListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *MirrorPolicyType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MirrorPolicyType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MirrorPolicyType) DeepCopy() *MirrorPolicyType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MirrorPolicyType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MirrorPolicyType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MirrorPolicyType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MirrorPolicyTypeValidator().Validate(ctx, m, opts...)
}

func (m *MirrorPolicyType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetOriginPoolDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *MirrorPolicyType) GetOriginPoolDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}

	vref := m.GetOriginPool()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("origin_pool.Object")
	drInfos = append(drInfos, db.DRefInfo{
		RefdType:   "origin_pool.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "origin_pool",
		Ref:        vdRef,
	})

	return drInfos, nil
}

// GetOriginPoolDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *MirrorPolicyType) GetOriginPoolDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "origin_pool.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: origin_pool")
	}

	vref := m.GetOriginPool()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "origin_pool.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateMirrorPolicyType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMirrorPolicyType) OriginPoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for origin_pool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateMirrorPolicyType) PercentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for percent")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.FractionalPercentValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateMirrorPolicyType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MirrorPolicyType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MirrorPolicyType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["origin_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("origin_pool"))
		if err := fv(ctx, m.GetOriginPool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["percent"]; exists {

		vOpts := append(opts, db.WithValidateField("percent"))
		if err := fv(ctx, m.GetPercent(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMirrorPolicyTypeValidator = func() *ValidateMirrorPolicyType {
	v := &ValidateMirrorPolicyType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhOriginPool := v.OriginPoolValidationRuleHandler
	rulesOriginPool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhOriginPool(rulesOriginPool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MirrorPolicyType.origin_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_pool"] = vFn

	vrhPercent := v.PercentValidationRuleHandler
	rulesPercent := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPercent(rulesPercent)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MirrorPolicyType.percent: %s", err)
		panic(errMsg)
	}
	v.FldValidators["percent"] = vFn

	return v
}()

func MirrorPolicyTypeValidator() db.Validator {
	return DefaultMirrorPolicyTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *PolicyBasedChallenge) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PolicyBasedChallenge) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PolicyBasedChallenge) DeepCopy() *PolicyBasedChallenge {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PolicyBasedChallenge{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PolicyBasedChallenge) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PolicyBasedChallenge) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PolicyBasedChallengeValidator().Validate(ctx, m, opts...)
}

func (m *PolicyBasedChallenge) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetMaliciousUserMitigationChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRuleListDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *PolicyBasedChallenge) GetMaliciousUserMitigationChoiceDRefInfo() ([]db.DRefInfo, error) {
	var odrInfos []db.DRefInfo

	switch m.GetMaliciousUserMitigationChoice().(type) {
	case *PolicyBasedChallenge_DefaultMitigationSettings:

	case *PolicyBasedChallenge_MaliciousUserMitigation:

		vref := m.GetMaliciousUserMitigation()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("malicious_user_mitigation.Object")
		odri := db.DRefInfo{
			RefdType:   "malicious_user_mitigation.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "malicious_user_mitigation",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	}

	return odrInfos, nil
}

// GetMaliciousUserMitigationChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *PolicyBasedChallenge) GetMaliciousUserMitigationChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetMaliciousUserMitigationChoice().(type) {
	case *PolicyBasedChallenge_DefaultMitigationSettings:

	case *PolicyBasedChallenge_MaliciousUserMitigation:
		refdType, err := d.TypeForEntryKind("", "", "malicious_user_mitigation.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: malicious_user_mitigation")
		}

		vref := m.GetMaliciousUserMitigation()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "malicious_user_mitigation.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *PolicyBasedChallenge) GetRuleListDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetRuleList() == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.GetRuleList().GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "rule_list." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

type ValidatePolicyBasedChallenge struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePolicyBasedChallenge) ChallengeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_choice")
	}
	return validatorFn, nil
}

func (v *ValidatePolicyBasedChallenge) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PolicyBasedChallenge)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PolicyBasedChallenge got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetCaptchaChallengeParametersChoice().(type) {
	case *PolicyBasedChallenge_DefaultCaptchaChallengeParameters:
		if fv, exists := v.FldValidators["captcha_challenge_parameters_choice.default_captcha_challenge_parameters"]; exists {
			val := m.GetCaptchaChallengeParametersChoice().(*PolicyBasedChallenge_DefaultCaptchaChallengeParameters).DefaultCaptchaChallengeParameters
			vOpts := append(opts,
				db.WithValidateField("captcha_challenge_parameters_choice"),
				db.WithValidateField("default_captcha_challenge_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PolicyBasedChallenge_CaptchaChallengeParameters:
		if fv, exists := v.FldValidators["captcha_challenge_parameters_choice.captcha_challenge_parameters"]; exists {
			val := m.GetCaptchaChallengeParametersChoice().(*PolicyBasedChallenge_CaptchaChallengeParameters).CaptchaChallengeParameters
			vOpts := append(opts,
				db.WithValidateField("captcha_challenge_parameters_choice"),
				db.WithValidateField("captcha_challenge_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["challenge_choice"]; exists {
		val := m.GetChallengeChoice()
		vOpts := append(opts,
			db.WithValidateField("challenge_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChallengeChoice().(type) {
	case *PolicyBasedChallenge_NoChallenge:
		if fv, exists := v.FldValidators["challenge_choice.no_challenge"]; exists {
			val := m.GetChallengeChoice().(*PolicyBasedChallenge_NoChallenge).NoChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_choice"),
				db.WithValidateField("no_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PolicyBasedChallenge_AlwaysEnableJsChallenge:
		if fv, exists := v.FldValidators["challenge_choice.always_enable_js_challenge"]; exists {
			val := m.GetChallengeChoice().(*PolicyBasedChallenge_AlwaysEnableJsChallenge).AlwaysEnableJsChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_choice"),
				db.WithValidateField("always_enable_js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge:
		if fv, exists := v.FldValidators["challenge_choice.always_enable_captcha_challenge"]; exists {
			val := m.GetChallengeChoice().(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge).AlwaysEnableCaptchaChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_choice"),
				db.WithValidateField("always_enable_captcha_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetJsChallengeParametersChoice().(type) {
	case *PolicyBasedChallenge_DefaultJsChallengeParameters:
		if fv, exists := v.FldValidators["js_challenge_parameters_choice.default_js_challenge_parameters"]; exists {
			val := m.GetJsChallengeParametersChoice().(*PolicyBasedChallenge_DefaultJsChallengeParameters).DefaultJsChallengeParameters
			vOpts := append(opts,
				db.WithValidateField("js_challenge_parameters_choice"),
				db.WithValidateField("default_js_challenge_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PolicyBasedChallenge_JsChallengeParameters:
		if fv, exists := v.FldValidators["js_challenge_parameters_choice.js_challenge_parameters"]; exists {
			val := m.GetJsChallengeParametersChoice().(*PolicyBasedChallenge_JsChallengeParameters).JsChallengeParameters
			vOpts := append(opts,
				db.WithValidateField("js_challenge_parameters_choice"),
				db.WithValidateField("js_challenge_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetMaliciousUserMitigationChoice().(type) {
	case *PolicyBasedChallenge_DefaultMitigationSettings:
		if fv, exists := v.FldValidators["malicious_user_mitigation_choice.default_mitigation_settings"]; exists {
			val := m.GetMaliciousUserMitigationChoice().(*PolicyBasedChallenge_DefaultMitigationSettings).DefaultMitigationSettings
			vOpts := append(opts,
				db.WithValidateField("malicious_user_mitigation_choice"),
				db.WithValidateField("default_mitigation_settings"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PolicyBasedChallenge_MaliciousUserMitigation:
		if fv, exists := v.FldValidators["malicious_user_mitigation_choice.malicious_user_mitigation"]; exists {
			val := m.GetMaliciousUserMitigationChoice().(*PolicyBasedChallenge_MaliciousUserMitigation).MaliciousUserMitigation
			vOpts := append(opts,
				db.WithValidateField("malicious_user_mitigation_choice"),
				db.WithValidateField("malicious_user_mitigation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rule_list"]; exists {

		vOpts := append(opts, db.WithValidateField("rule_list"))
		if err := fv(ctx, m.GetRuleList(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetTemporaryBlockingParametersChoice().(type) {
	case *PolicyBasedChallenge_DefaultTemporaryBlockingParameters:
		if fv, exists := v.FldValidators["temporary_blocking_parameters_choice.default_temporary_blocking_parameters"]; exists {
			val := m.GetTemporaryBlockingParametersChoice().(*PolicyBasedChallenge_DefaultTemporaryBlockingParameters).DefaultTemporaryBlockingParameters
			vOpts := append(opts,
				db.WithValidateField("temporary_blocking_parameters_choice"),
				db.WithValidateField("default_temporary_blocking_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PolicyBasedChallenge_TemporaryUserBlocking:
		if fv, exists := v.FldValidators["temporary_blocking_parameters_choice.temporary_user_blocking"]; exists {
			val := m.GetTemporaryBlockingParametersChoice().(*PolicyBasedChallenge_TemporaryUserBlocking).TemporaryUserBlocking
			vOpts := append(opts,
				db.WithValidateField("temporary_blocking_parameters_choice"),
				db.WithValidateField("temporary_user_blocking"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPolicyBasedChallengeValidator = func() *ValidatePolicyBasedChallenge {
	v := &ValidatePolicyBasedChallenge{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhChallengeChoice := v.ChallengeChoiceValidationRuleHandler
	rulesChallengeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChallengeChoice(rulesChallengeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PolicyBasedChallenge.challenge_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_choice"] = vFn

	v.FldValidators["captcha_challenge_parameters_choice.captcha_challenge_parameters"] = ves_io_schema_virtual_host.CaptchaChallengeTypeValidator().Validate

	v.FldValidators["js_challenge_parameters_choice.js_challenge_parameters"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate

	v.FldValidators["malicious_user_mitigation_choice.malicious_user_mitigation"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["temporary_blocking_parameters_choice.temporary_user_blocking"] = ves_io_schema_virtual_host.TemporaryUserBlockingTypeValidator().Validate

	v.FldValidators["rule_list"] = ChallengeRuleListValidator().Validate

	return v
}()

func PolicyBasedChallengeValidator() db.Validator {
	return DefaultPolicyBasedChallengeValidator
}

// augmented methods on protoc/std generated struct

func (m *ProxyTypeHttp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ProxyTypeHttp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ProxyTypeHttp) DeepCopy() *ProxyTypeHttp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ProxyTypeHttp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ProxyTypeHttp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ProxyTypeHttp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ProxyTypeHttpValidator().Validate(ctx, m, opts...)
}

type ValidateProxyTypeHttp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateProxyTypeHttp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ProxyTypeHttp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ProxyTypeHttp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_volterra_managed"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_volterra_managed"))
		if err := fv(ctx, m.GetDnsVolterraManaged(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultProxyTypeHttpValidator = func() *ValidateProxyTypeHttp {
	v := &ValidateProxyTypeHttp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ProxyTypeHttpValidator() db.Validator {
	return DefaultProxyTypeHttpValidator
}

// augmented methods on protoc/std generated struct

func (m *ProxyTypeHttps) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ProxyTypeHttps) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ProxyTypeHttps) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetTlsParameters().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ProxyTypeHttps.tls_parameters")
	}

	return nil
}

func (m *ProxyTypeHttps) DeepCopy() *ProxyTypeHttps {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ProxyTypeHttps{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ProxyTypeHttps) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ProxyTypeHttps) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ProxyTypeHttpsValidator().Validate(ctx, m, opts...)
}

type ValidateProxyTypeHttps struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateProxyTypeHttps) ServerHeaderChoiceServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}
	return oValidatorFn_ServerName, nil
}
func (v *ValidateProxyTypeHttps) ServerHeaderChoiceAppendServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AppendServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for append_server_name")
	}
	return oValidatorFn_AppendServerName, nil
}

func (v *ValidateProxyTypeHttps) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ProxyTypeHttps)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ProxyTypeHttps got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_hsts"]; exists {

		vOpts := append(opts, db.WithValidateField("add_hsts"))
		if err := fv(ctx, m.GetAddHsts(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_redirect"]; exists {

		vOpts := append(opts, db.WithValidateField("http_redirect"))
		if err := fv(ctx, m.GetHttpRedirect(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetServerHeaderChoice().(type) {
	case *ProxyTypeHttps_DefaultHeader:
		if fv, exists := v.FldValidators["server_header_choice.default_header"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttps_DefaultHeader).DefaultHeader
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("default_header"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_ServerName:
		if fv, exists := v.FldValidators["server_header_choice.server_name"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttps_ServerName).ServerName
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_AppendServerName:
		if fv, exists := v.FldValidators["server_header_choice.append_server_name"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttps_AppendServerName).AppendServerName
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("append_server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_PassThrough:
		if fv, exists := v.FldValidators["server_header_choice.pass_through"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttps_PassThrough).PassThrough
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("pass_through"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tls_parameters"]; exists {

		vOpts := append(opts, db.WithValidateField("tls_parameters"))
		if err := fv(ctx, m.GetTlsParameters(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultProxyTypeHttpsValidator = func() *ValidateProxyTypeHttps {
	v := &ValidateProxyTypeHttps{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServerHeaderChoiceServerName := v.ServerHeaderChoiceServerNameValidationRuleHandler
	rulesServerHeaderChoiceServerName := map[string]string{
		"ves.io.schema.rules.string.max_len": "8096",
	}
	vFnMap["server_header_choice.server_name"], err = vrhServerHeaderChoiceServerName(rulesServerHeaderChoiceServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttps.server_header_choice_server_name: %s", err)
		panic(errMsg)
	}
	vrhServerHeaderChoiceAppendServerName := v.ServerHeaderChoiceAppendServerNameValidationRuleHandler
	rulesServerHeaderChoiceAppendServerName := map[string]string{
		"ves.io.schema.rules.string.max_len": "8096",
	}
	vFnMap["server_header_choice.append_server_name"], err = vrhServerHeaderChoiceAppendServerName(rulesServerHeaderChoiceAppendServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttps.server_header_choice_append_server_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["server_header_choice.server_name"] = vFnMap["server_header_choice.server_name"]
	v.FldValidators["server_header_choice.append_server_name"] = vFnMap["server_header_choice.append_server_name"]

	v.FldValidators["tls_parameters"] = DownstreamTlsParamsTypeValidator().Validate

	return v
}()

func ProxyTypeHttpsValidator() db.Validator {
	return DefaultProxyTypeHttpsValidator
}

// augmented methods on protoc/std generated struct

func (m *ProxyTypeHttpsAutoCerts) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ProxyTypeHttpsAutoCerts) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ProxyTypeHttpsAutoCerts) DeepCopy() *ProxyTypeHttpsAutoCerts {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ProxyTypeHttpsAutoCerts{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ProxyTypeHttpsAutoCerts) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ProxyTypeHttpsAutoCerts) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ProxyTypeHttpsAutoCertsValidator().Validate(ctx, m, opts...)
}

type ValidateProxyTypeHttpsAutoCerts struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateProxyTypeHttpsAutoCerts) MtlsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mtls_choice")
	}
	return validatorFn, nil
}

func (v *ValidateProxyTypeHttpsAutoCerts) ServerHeaderChoiceServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}
	return oValidatorFn_ServerName, nil
}
func (v *ValidateProxyTypeHttpsAutoCerts) ServerHeaderChoiceAppendServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AppendServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for append_server_name")
	}
	return oValidatorFn_AppendServerName, nil
}

func (v *ValidateProxyTypeHttpsAutoCerts) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ProxyTypeHttpsAutoCerts)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ProxyTypeHttpsAutoCerts got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_hsts"]; exists {

		vOpts := append(opts, db.WithValidateField("add_hsts"))
		if err := fv(ctx, m.GetAddHsts(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_redirect"]; exists {

		vOpts := append(opts, db.WithValidateField("http_redirect"))
		if err := fv(ctx, m.GetHttpRedirect(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mtls_choice"]; exists {
		val := m.GetMtlsChoice()
		vOpts := append(opts,
			db.WithValidateField("mtls_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMtlsChoice().(type) {
	case *ProxyTypeHttpsAutoCerts_NoMtls:
		if fv, exists := v.FldValidators["mtls_choice.no_mtls"]; exists {
			val := m.GetMtlsChoice().(*ProxyTypeHttpsAutoCerts_NoMtls).NoMtls
			vOpts := append(opts,
				db.WithValidateField("mtls_choice"),
				db.WithValidateField("no_mtls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_UseMtls:
		if fv, exists := v.FldValidators["mtls_choice.use_mtls"]; exists {
			val := m.GetMtlsChoice().(*ProxyTypeHttpsAutoCerts_UseMtls).UseMtls
			vOpts := append(opts,
				db.WithValidateField("mtls_choice"),
				db.WithValidateField("use_mtls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetServerHeaderChoice().(type) {
	case *ProxyTypeHttpsAutoCerts_DefaultHeader:
		if fv, exists := v.FldValidators["server_header_choice.default_header"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_DefaultHeader).DefaultHeader
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("default_header"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_ServerName:
		if fv, exists := v.FldValidators["server_header_choice.server_name"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_ServerName).ServerName
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_AppendServerName:
		if fv, exists := v.FldValidators["server_header_choice.append_server_name"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_AppendServerName).AppendServerName
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("append_server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_PassThrough:
		if fv, exists := v.FldValidators["server_header_choice.pass_through"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_PassThrough).PassThrough
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("pass_through"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tls_config"]; exists {

		vOpts := append(opts, db.WithValidateField("tls_config"))
		if err := fv(ctx, m.GetTlsConfig(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultProxyTypeHttpsAutoCertsValidator = func() *ValidateProxyTypeHttpsAutoCerts {
	v := &ValidateProxyTypeHttpsAutoCerts{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMtlsChoice := v.MtlsChoiceValidationRuleHandler
	rulesMtlsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMtlsChoice(rulesMtlsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProxyTypeHttpsAutoCerts.mtls_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mtls_choice"] = vFn

	vrhServerHeaderChoiceServerName := v.ServerHeaderChoiceServerNameValidationRuleHandler
	rulesServerHeaderChoiceServerName := map[string]string{
		"ves.io.schema.rules.string.max_len": "8096",
	}
	vFnMap["server_header_choice.server_name"], err = vrhServerHeaderChoiceServerName(rulesServerHeaderChoiceServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttpsAutoCerts.server_header_choice_server_name: %s", err)
		panic(errMsg)
	}
	vrhServerHeaderChoiceAppendServerName := v.ServerHeaderChoiceAppendServerNameValidationRuleHandler
	rulesServerHeaderChoiceAppendServerName := map[string]string{
		"ves.io.schema.rules.string.max_len": "8096",
	}
	vFnMap["server_header_choice.append_server_name"], err = vrhServerHeaderChoiceAppendServerName(rulesServerHeaderChoiceAppendServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttpsAutoCerts.server_header_choice_append_server_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["server_header_choice.server_name"] = vFnMap["server_header_choice.server_name"]
	v.FldValidators["server_header_choice.append_server_name"] = vFnMap["server_header_choice.append_server_name"]

	v.FldValidators["mtls_choice.use_mtls"] = DownstreamTlsValidationContextValidator().Validate

	v.FldValidators["tls_config"] = ves_io_schema_views.TlsConfigValidator().Validate

	return v
}()

func ProxyTypeHttpsAutoCertsValidator() db.Validator {
	return DefaultProxyTypeHttpsAutoCertsValidator
}

// augmented methods on protoc/std generated struct

func (m *RateLimitConfigType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RateLimitConfigType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RateLimitConfigType) DeepCopy() *RateLimitConfigType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RateLimitConfigType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RateLimitConfigType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RateLimitConfigType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RateLimitConfigTypeValidator().Validate(ctx, m, opts...)
}

func (m *RateLimitConfigType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetIpAllowedListChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPolicyChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *RateLimitConfigType) GetIpAllowedListChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetIpAllowedListChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetIpAllowedListChoice().(type) {
	case *RateLimitConfigType_NoIpAllowedList:

	case *RateLimitConfigType_IpAllowedList:

	case *RateLimitConfigType_CustomIpAllowedList:
		odrInfos, err = m.GetCustomIpAllowedList().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "custom_ip_allowed_list." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *RateLimitConfigType) GetPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetPolicyChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetPolicyChoice().(type) {
	case *RateLimitConfigType_NoPolicies:

	case *RateLimitConfigType_Policies:
		odrInfos, err = m.GetPolicies().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "policies." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

type ValidateRateLimitConfigType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRateLimitConfigType) IpAllowedListChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_allowed_list_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRateLimitConfigType) PolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRateLimitConfigType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RateLimitConfigType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RateLimitConfigType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ip_allowed_list_choice"]; exists {
		val := m.GetIpAllowedListChoice()
		vOpts := append(opts,
			db.WithValidateField("ip_allowed_list_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIpAllowedListChoice().(type) {
	case *RateLimitConfigType_NoIpAllowedList:
		if fv, exists := v.FldValidators["ip_allowed_list_choice.no_ip_allowed_list"]; exists {
			val := m.GetIpAllowedListChoice().(*RateLimitConfigType_NoIpAllowedList).NoIpAllowedList
			vOpts := append(opts,
				db.WithValidateField("ip_allowed_list_choice"),
				db.WithValidateField("no_ip_allowed_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RateLimitConfigType_IpAllowedList:
		if fv, exists := v.FldValidators["ip_allowed_list_choice.ip_allowed_list"]; exists {
			val := m.GetIpAllowedListChoice().(*RateLimitConfigType_IpAllowedList).IpAllowedList
			vOpts := append(opts,
				db.WithValidateField("ip_allowed_list_choice"),
				db.WithValidateField("ip_allowed_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RateLimitConfigType_CustomIpAllowedList:
		if fv, exists := v.FldValidators["ip_allowed_list_choice.custom_ip_allowed_list"]; exists {
			val := m.GetIpAllowedListChoice().(*RateLimitConfigType_CustomIpAllowedList).CustomIpAllowedList
			vOpts := append(opts,
				db.WithValidateField("ip_allowed_list_choice"),
				db.WithValidateField("custom_ip_allowed_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["policy_choice"]; exists {
		val := m.GetPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPolicyChoice().(type) {
	case *RateLimitConfigType_NoPolicies:
		if fv, exists := v.FldValidators["policy_choice.no_policies"]; exists {
			val := m.GetPolicyChoice().(*RateLimitConfigType_NoPolicies).NoPolicies
			vOpts := append(opts,
				db.WithValidateField("policy_choice"),
				db.WithValidateField("no_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RateLimitConfigType_Policies:
		if fv, exists := v.FldValidators["policy_choice.policies"]; exists {
			val := m.GetPolicyChoice().(*RateLimitConfigType_Policies).Policies
			vOpts := append(opts,
				db.WithValidateField("policy_choice"),
				db.WithValidateField("policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rate_limiter"]; exists {

		vOpts := append(opts, db.WithValidateField("rate_limiter"))
		if err := fv(ctx, m.GetRateLimiter(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRateLimitConfigTypeValidator = func() *ValidateRateLimitConfigType {
	v := &ValidateRateLimitConfigType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIpAllowedListChoice := v.IpAllowedListChoiceValidationRuleHandler
	rulesIpAllowedListChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIpAllowedListChoice(rulesIpAllowedListChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RateLimitConfigType.ip_allowed_list_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_allowed_list_choice"] = vFn

	vrhPolicyChoice := v.PolicyChoiceValidationRuleHandler
	rulesPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPolicyChoice(rulesPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RateLimitConfigType.policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["policy_choice"] = vFn

	v.FldValidators["ip_allowed_list_choice.ip_allowed_list"] = ves_io_schema_views.PrefixStringListTypeValidator().Validate
	v.FldValidators["ip_allowed_list_choice.custom_ip_allowed_list"] = CustomIpAllowedListValidator().Validate

	v.FldValidators["policy_choice.policies"] = ves_io_schema_views_rate_limiter_policy.PolicyListValidator().Validate

	v.FldValidators["rate_limiter"] = ves_io_schema_rate_limiter.RateLimitValueValidator().Validate

	return v
}()

func RateLimitConfigTypeValidator() db.Validator {
	return DefaultRateLimitConfigTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttps().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.https")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvertiseChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetChallengeTypeDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDefaultRoutePoolsDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMaliciousUserMitigationDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMoreOptionDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimitChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRoutesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServicePolicyChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetUserIdentificationDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetAdvertiseChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetAdvertiseChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetAdvertiseChoice().(type) {
	case *ReplaceSpecType_AdvertiseOnPublic:
		odrInfos, err = m.GetAdvertiseOnPublic().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "advertise_on_public." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *ReplaceSpecType_AdvertiseCustom:
		odrInfos, err = m.GetAdvertiseCustom().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "advertise_custom." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *ReplaceSpecType_DoNotAdvertise:

	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetChallengeTypeDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetChallengeType() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetChallengeType().(type) {
	case *ReplaceSpecType_JsChallenge:

	case *ReplaceSpecType_CaptchaChallenge:

	case *ReplaceSpecType_NoChallenge:

	case *ReplaceSpecType_PolicyBasedChallenge:
		odrInfos, err = m.GetPolicyBasedChallenge().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "policy_based_challenge." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetDefaultRoutePoolsDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetDefaultRoutePools() == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.GetDefaultRoutePools() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("default_route_pools[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

func (m *ReplaceSpecType) GetMaliciousUserMitigationDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("malicious_user_mitigation.Object")
	drInfos = append(drInfos, db.DRefInfo{
		RefdType:   "malicious_user_mitigation.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "malicious_user_mitigation",
		Ref:        vdRef,
	})

	return drInfos, nil
}

// GetMaliciousUserMitigationDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetMaliciousUserMitigationDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "malicious_user_mitigation.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: malicious_user_mitigation")
	}

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "malicious_user_mitigation.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetMoreOptionDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetMoreOption() == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.GetMoreOption().GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "more_option." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetRateLimitChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetRateLimitChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetRateLimitChoice().(type) {
	case *ReplaceSpecType_DisableRateLimit:

	case *ReplaceSpecType_RateLimit:
		odrInfos, err = m.GetRateLimit().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "rate_limit." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetRoutesDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetRoutes() == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.GetRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("routes[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetServicePolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetServicePolicyChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetServicePolicyChoice().(type) {
	case *ReplaceSpecType_ServicePoliciesFromNamespace:

	case *ReplaceSpecType_NoServicePolicies:

	case *ReplaceSpecType_ActiveServicePolicies:
		odrInfos, err = m.GetActiveServicePolicies().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "active_service_policies." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

func (m *ReplaceSpecType) GetUserIdentificationDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}

	vref := m.GetUserIdentification()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("user_identification.Object")
	drInfos = append(drInfos, db.DRefInfo{
		RefdType:   "user_identification.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "user_identification",
		Ref:        vdRef,
	})

	return drInfos, nil
}

// GetUserIdentificationDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetUserIdentificationDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "user_identification.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: user_identification")
	}

	vref := m.GetUserIdentification()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "user_identification.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *ReplaceSpecType) GetWafChoiceDRefInfo() ([]db.DRefInfo, error) {
	var odrInfos []db.DRefInfo

	switch m.GetWafChoice().(type) {
	case *ReplaceSpecType_Waf:

		vref := m.GetWaf()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("waf.Object")
		odri := db.DRefInfo{
			RefdType:   "waf.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "waf",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	case *ReplaceSpecType_WafRule:

		vref := m.GetWafRule()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("waf_rules.Object")
		odri := db.DRefInfo{
			RefdType:   "waf_rules.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "waf_rule",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	case *ReplaceSpecType_DisableWaf:

	case *ReplaceSpecType_AppFirewall:

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("app_firewall.Object")
		odri := db.DRefInfo{
			RefdType:   "app_firewall.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "app_firewall",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	}

	return odrInfos, nil
}

// GetWafChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetWafChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetWafChoice().(type) {
	case *ReplaceSpecType_Waf:
		refdType, err := d.TypeForEntryKind("", "", "waf.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: waf")
		}

		vref := m.GetWaf()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "waf.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *ReplaceSpecType_WafRule:
		refdType, err := d.TypeForEntryKind("", "", "waf_rules.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: waf_rules")
		}

		vref := m.GetWafRule()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "waf_rules.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *ReplaceSpecType_DisableWaf:

	case *ReplaceSpecType_AppFirewall:
		refdType, err := d.TypeForEntryKind("", "", "app_firewall.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: app_firewall")
		}

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "app_firewall.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) AdvertiseChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for advertise_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ChallengeTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_type")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) LoadbalancerTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for loadbalancer_type")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) RateLimitChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rate_limit_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ServicePolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) WafChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for waf_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DefaultRoutePoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_route_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_route_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_route_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*RouteType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := RouteTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RouteType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RouteType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) WafExclusionRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleWafExclusionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_policy.SimpleWafExclusionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for waf_exclusion_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleWafExclusionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleWafExclusionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated waf_exclusion_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items waf_exclusion_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) BlockedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for blocked_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated blocked_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items blocked_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) TrustedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for trusted_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated trusted_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items trusted_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DdosMitigationRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*DDoSMitigationRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := DDoSMitigationRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ddos_mitigation_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DDoSMitigationRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DDoSMitigationRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ddos_mitigation_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ddos_mitigation_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_location"]; exists {

		vOpts := append(opts, db.WithValidateField("add_location"))
		if err := fv(ctx, m.GetAddLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["advertise_choice"]; exists {
		val := m.GetAdvertiseChoice()
		vOpts := append(opts,
			db.WithValidateField("advertise_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdvertiseChoice().(type) {
	case *ReplaceSpecType_AdvertiseOnPublic:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public"]; exists {
			val := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublic).AdvertiseOnPublic
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AdvertiseCustom:
		if fv, exists := v.FldValidators["advertise_choice.advertise_custom"]; exists {
			val := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseCustom).AdvertiseCustom
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DoNotAdvertise:
		if fv, exists := v.FldValidators["advertise_choice.do_not_advertise"]; exists {
			val := m.GetAdvertiseChoice().(*ReplaceSpecType_DoNotAdvertise).DoNotAdvertise
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("do_not_advertise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public_default_vip"]; exists {
			val := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublicDefaultVip).AdvertiseOnPublicDefaultVip
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public_default_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["blocked_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("blocked_clients"))
		if err := fv(ctx, m.GetBlockedClients(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["challenge_type"]; exists {
		val := m.GetChallengeType()
		vOpts := append(opts,
			db.WithValidateField("challenge_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChallengeType().(type) {
	case *ReplaceSpecType_JsChallenge:
		if fv, exists := v.FldValidators["challenge_type.js_challenge"]; exists {
			val := m.GetChallengeType().(*ReplaceSpecType_JsChallenge).JsChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_CaptchaChallenge:
		if fv, exists := v.FldValidators["challenge_type.captcha_challenge"]; exists {
			val := m.GetChallengeType().(*ReplaceSpecType_CaptchaChallenge).CaptchaChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("captcha_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NoChallenge:
		if fv, exists := v.FldValidators["challenge_type.no_challenge"]; exists {
			val := m.GetChallengeType().(*ReplaceSpecType_NoChallenge).NoChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("no_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_PolicyBasedChallenge:
		if fv, exists := v.FldValidators["challenge_type.policy_based_challenge"]; exists {
			val := m.GetChallengeType().(*ReplaceSpecType_PolicyBasedChallenge).PolicyBasedChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("policy_based_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cors_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("cors_policy"))
		if err := fv(ctx, m.GetCorsPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ddos_mitigation_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("ddos_mitigation_rules"))
		if err := fv(ctx, m.GetDdosMitigationRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_route_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("default_route_pools"))
		if err := fv(ctx, m.GetDefaultRoutePools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *ReplaceSpecType_RoundRobin:
		if fv, exists := v.FldValidators["hash_policy_choice.round_robin"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_RoundRobin).RoundRobin
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("round_robin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LeastActive:
		if fv, exists := v.FldValidators["hash_policy_choice.least_active"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_LeastActive).LeastActive
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("least_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Random:
		if fv, exists := v.FldValidators["hash_policy_choice.random"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_Random).Random
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("random"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SourceIpStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.source_ip_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_SourceIpStickiness).SourceIpStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("source_ip_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_CookieStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.cookie_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_CookieStickiness).CookieStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("cookie_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_RingHash:
		if fv, exists := v.FldValidators["hash_policy_choice.ring_hash"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_RingHash).RingHash
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("ring_hash"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["loadbalancer_type"]; exists {
		val := m.GetLoadbalancerType()
		vOpts := append(opts,
			db.WithValidateField("loadbalancer_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLoadbalancerType().(type) {
	case *ReplaceSpecType_Http:
		if fv, exists := v.FldValidators["loadbalancer_type.http"]; exists {
			val := m.GetLoadbalancerType().(*ReplaceSpecType_Http).Http
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("http"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Https:
		if fv, exists := v.FldValidators["loadbalancer_type.https"]; exists {
			val := m.GetLoadbalancerType().(*ReplaceSpecType_Https).Https
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_HttpsAutoCert:
		if fv, exists := v.FldValidators["loadbalancer_type.https_auto_cert"]; exists {
			val := m.GetLoadbalancerType().(*ReplaceSpecType_HttpsAutoCert).HttpsAutoCert
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https_auto_cert"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_mitigation"]; exists {

		vOpts := append(opts, db.WithValidateField("malicious_user_mitigation"))
		if err := fv(ctx, m.GetMaliciousUserMitigation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["more_option"]; exists {

		vOpts := append(opts, db.WithValidateField("more_option"))
		if err := fv(ctx, m.GetMoreOption(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limit_choice"]; exists {
		val := m.GetRateLimitChoice()
		vOpts := append(opts,
			db.WithValidateField("rate_limit_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRateLimitChoice().(type) {
	case *ReplaceSpecType_DisableRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.disable_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*ReplaceSpecType_DisableRateLimit).DisableRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("disable_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_RateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*ReplaceSpecType_RateLimit).RateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["routes"]; exists {
		vOpts := append(opts, db.WithValidateField("routes"))
		if err := fv(ctx, m.GetRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service_policy_choice"]; exists {
		val := m.GetServicePolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("service_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServicePolicyChoice().(type) {
	case *ReplaceSpecType_ServicePoliciesFromNamespace:
		if fv, exists := v.FldValidators["service_policy_choice.service_policies_from_namespace"]; exists {
			val := m.GetServicePolicyChoice().(*ReplaceSpecType_ServicePoliciesFromNamespace).ServicePoliciesFromNamespace
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("service_policies_from_namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NoServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.no_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*ReplaceSpecType_NoServicePolicies).NoServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("no_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ActiveServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.active_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*ReplaceSpecType_ActiveServicePolicies).ActiveServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("active_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["trusted_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("trusted_clients"))
		if err := fv(ctx, m.GetTrustedClients(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_identification"]; exists {

		vOpts := append(opts, db.WithValidateField("user_identification"))
		if err := fv(ctx, m.GetUserIdentification(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_choice"]; exists {
		val := m.GetWafChoice()
		vOpts := append(opts,
			db.WithValidateField("waf_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWafChoice().(type) {
	case *ReplaceSpecType_Waf:
		if fv, exists := v.FldValidators["waf_choice.waf"]; exists {
			val := m.GetWafChoice().(*ReplaceSpecType_Waf).Waf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_WafRule:
		if fv, exists := v.FldValidators["waf_choice.waf_rule"]; exists {
			val := m.GetWafChoice().(*ReplaceSpecType_WafRule).WafRule
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("waf_rule"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DisableWaf:
		if fv, exists := v.FldValidators["waf_choice.disable_waf"]; exists {
			val := m.GetWafChoice().(*ReplaceSpecType_DisableWaf).DisableWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("disable_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AppFirewall:
		if fv, exists := v.FldValidators["waf_choice.app_firewall"]; exists {
			val := m.GetWafChoice().(*ReplaceSpecType_AppFirewall).AppFirewall
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("app_firewall"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_exclusion_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("waf_exclusion_rules"))
		if err := fv(ctx, m.GetWafExclusionRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdvertiseChoice := v.AdvertiseChoiceValidationRuleHandler
	rulesAdvertiseChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdvertiseChoice(rulesAdvertiseChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.advertise_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["advertise_choice"] = vFn

	vrhChallengeType := v.ChallengeTypeValidationRuleHandler
	rulesChallengeType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChallengeType(rulesChallengeType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.challenge_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_type"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhLoadbalancerType := v.LoadbalancerTypeValidationRuleHandler
	rulesLoadbalancerType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLoadbalancerType(rulesLoadbalancerType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.loadbalancer_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_type"] = vFn

	vrhRateLimitChoice := v.RateLimitChoiceValidationRuleHandler
	rulesRateLimitChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRateLimitChoice(rulesRateLimitChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.rate_limit_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limit_choice"] = vFn

	vrhServicePolicyChoice := v.ServicePolicyChoiceValidationRuleHandler
	rulesServicePolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServicePolicyChoice(rulesServicePolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.service_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_policy_choice"] = vFn

	vrhWafChoice := v.WafChoiceValidationRuleHandler
	rulesWafChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWafChoice(rulesWafChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.waf_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhDefaultRoutePools := v.DefaultRoutePoolsValidationRuleHandler
	rulesDefaultRoutePools := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDefaultRoutePools(rulesDefaultRoutePools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.default_route_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_route_pools"] = vFn

	vrhRoutes := v.RoutesValidationRuleHandler
	rulesRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRoutes(rulesRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routes"] = vFn

	vrhWafExclusionRules := v.WafExclusionRulesValidationRuleHandler
	rulesWafExclusionRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhWafExclusionRules(rulesWafExclusionRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.waf_exclusion_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_exclusion_rules"] = vFn

	vrhBlockedClients := v.BlockedClientsValidationRuleHandler
	rulesBlockedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhBlockedClients(rulesBlockedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.blocked_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_clients"] = vFn

	vrhTrustedClients := v.TrustedClientsValidationRuleHandler
	rulesTrustedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhTrustedClients(rulesTrustedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.trusted_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trusted_clients"] = vFn

	vrhDdosMitigationRules := v.DdosMitigationRulesValidationRuleHandler
	rulesDdosMitigationRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDdosMitigationRules(rulesDdosMitigationRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.ddos_mitigation_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ddos_mitigation_rules"] = vFn

	v.FldValidators["advertise_choice.advertise_on_public"] = ves_io_schema_views.AdvertisePublicValidator().Validate
	v.FldValidators["advertise_choice.advertise_custom"] = ves_io_schema_views.AdvertiseCustomValidator().Validate

	v.FldValidators["challenge_type.js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.captcha_challenge"] = ves_io_schema_virtual_host.CaptchaChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.policy_based_challenge"] = PolicyBasedChallengeValidator().Validate

	v.FldValidators["hash_policy_choice.cookie_stickiness"] = ves_io_schema_route.CookieForHashingValidator().Validate
	v.FldValidators["hash_policy_choice.ring_hash"] = HashPolicyListTypeValidator().Validate

	v.FldValidators["loadbalancer_type.https"] = ProxyTypeHttpsValidator().Validate
	v.FldValidators["loadbalancer_type.https_auto_cert"] = ProxyTypeHttpsAutoCertsValidator().Validate

	v.FldValidators["rate_limit_choice.rate_limit"] = RateLimitConfigTypeValidator().Validate

	v.FldValidators["service_policy_choice.active_service_policies"] = ServicePolicyListValidator().Validate

	v.FldValidators["waf_choice.waf"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["waf_choice.waf_rule"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["waf_choice.app_firewall"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cors_policy"] = ves_io_schema.CorsPolicyValidator().Validate

	v.FldValidators["more_option"] = AdvancedOptionsTypeValidator().Validate

	v.FldValidators["user_identification"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["malicious_user_mitigation"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteSimpleAdvancedOptions) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteSimpleAdvancedOptions) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteSimpleAdvancedOptions) DeepCopy() *RouteSimpleAdvancedOptions {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteSimpleAdvancedOptions{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteSimpleAdvancedOptions) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteSimpleAdvancedOptions) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteSimpleAdvancedOptionsValidator().Validate(ctx, m, opts...)
}

func (m *RouteSimpleAdvancedOptions) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetMirroringChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *RouteSimpleAdvancedOptions) GetMirroringChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetMirroringChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetMirroringChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisableMirroring:

	case *RouteSimpleAdvancedOptions_MirrorPolicy:
		odrInfos, err = m.GetMirrorPolicy().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "mirror_policy." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

func (m *RouteSimpleAdvancedOptions) GetWafChoiceDRefInfo() ([]db.DRefInfo, error) {
	var odrInfos []db.DRefInfo

	switch m.GetWafChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisableWaf:

	case *RouteSimpleAdvancedOptions_Waf:

		vref := m.GetWaf()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("waf.Object")
		odri := db.DRefInfo{
			RefdType:   "waf.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "waf",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	case *RouteSimpleAdvancedOptions_WafRule:

		vref := m.GetWafRule()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("waf_rules.Object")
		odri := db.DRefInfo{
			RefdType:   "waf_rules.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "waf_rule",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	case *RouteSimpleAdvancedOptions_AppFirewall:

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("app_firewall.Object")
		odri := db.DRefInfo{
			RefdType:   "app_firewall.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "app_firewall",
			Ref:        vdRef,
		}
		odrInfos = append(odrInfos, odri)

	}

	return odrInfos, nil
}

// GetWafChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *RouteSimpleAdvancedOptions) GetWafChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetWafChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisableWaf:

	case *RouteSimpleAdvancedOptions_Waf:
		refdType, err := d.TypeForEntryKind("", "", "waf.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: waf")
		}

		vref := m.GetWaf()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "waf.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *RouteSimpleAdvancedOptions_WafRule:
		refdType, err := d.TypeForEntryKind("", "", "waf_rules.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: waf_rules")
		}

		vref := m.GetWafRule()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "waf_rules.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *RouteSimpleAdvancedOptions_AppFirewall:
		refdType, err := d.TypeForEntryKind("", "", "app_firewall.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: app_firewall")
		}

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "app_firewall.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateRouteSimpleAdvancedOptions struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteSimpleAdvancedOptions) BufferChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for buffer_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) ClusterRetractChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_retract_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) MirroringChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mirroring_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) RetryPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for retry_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) RewriteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rewrite_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) RewriteChoicePrefixRewriteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_PrefixRewrite, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for prefix_rewrite")
	}
	return oValidatorFn_PrefixRewrite, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) SpdyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for spdy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) WafChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for waf_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) WebsocketChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for websocket_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) EndpointSubsetsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for endpoint_subsets")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for endpoint_subsets")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for endpoint_subsets")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map endpoint_subsets")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items endpoint_subsets")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) RequestHeadersToAddValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.HeaderManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for request_headers_to_add")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated request_headers_to_add")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items request_headers_to_add")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) RequestHeadersToRemoveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for request_headers_to_remove")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for request_headers_to_remove")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated request_headers_to_remove")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items request_headers_to_remove")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) ResponseHeadersToAddValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema.HeaderManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for response_headers_to_add")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated response_headers_to_add")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items response_headers_to_add")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) ResponseHeadersToRemoveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for response_headers_to_remove")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for response_headers_to_remove")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated response_headers_to_remove")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items response_headers_to_remove")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) TimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for timeout")
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteSimpleAdvancedOptions)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteSimpleAdvancedOptions got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["buffer_choice"]; exists {
		val := m.GetBufferChoice()
		vOpts := append(opts,
			db.WithValidateField("buffer_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBufferChoice().(type) {
	case *RouteSimpleAdvancedOptions_CommonBuffering:
		if fv, exists := v.FldValidators["buffer_choice.common_buffering"]; exists {
			val := m.GetBufferChoice().(*RouteSimpleAdvancedOptions_CommonBuffering).CommonBuffering
			vOpts := append(opts,
				db.WithValidateField("buffer_choice"),
				db.WithValidateField("common_buffering"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_BufferPolicy:
		if fv, exists := v.FldValidators["buffer_choice.buffer_policy"]; exists {
			val := m.GetBufferChoice().(*RouteSimpleAdvancedOptions_BufferPolicy).BufferPolicy
			vOpts := append(opts,
				db.WithValidateField("buffer_choice"),
				db.WithValidateField("buffer_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_retract_choice"]; exists {
		val := m.GetClusterRetractChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_retract_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterRetractChoice().(type) {
	case *RouteSimpleAdvancedOptions_RetractCluster:
		if fv, exists := v.FldValidators["cluster_retract_choice.retract_cluster"]; exists {
			val := m.GetClusterRetractChoice().(*RouteSimpleAdvancedOptions_RetractCluster).RetractCluster
			vOpts := append(opts,
				db.WithValidateField("cluster_retract_choice"),
				db.WithValidateField("retract_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_DoNotRetractCluster:
		if fv, exists := v.FldValidators["cluster_retract_choice.do_not_retract_cluster"]; exists {
			val := m.GetClusterRetractChoice().(*RouteSimpleAdvancedOptions_DoNotRetractCluster).DoNotRetractCluster
			vOpts := append(opts,
				db.WithValidateField("cluster_retract_choice"),
				db.WithValidateField("do_not_retract_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cors_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("cors_policy"))
		if err := fv(ctx, m.GetCorsPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disable_location_add"]; exists {

		vOpts := append(opts, db.WithValidateField("disable_location_add"))
		if err := fv(ctx, m.GetDisableLocationAdd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["endpoint_subsets"]; exists {
		vOpts := append(opts, db.WithValidateField("endpoint_subsets"))
		if err := fv(ctx, m.GetEndpointSubsets(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *RouteSimpleAdvancedOptions_CommonHashPolicy:
		if fv, exists := v.FldValidators["hash_policy_choice.common_hash_policy"]; exists {
			val := m.GetHashPolicyChoice().(*RouteSimpleAdvancedOptions_CommonHashPolicy).CommonHashPolicy
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("common_hash_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_SpecificHashPolicy:
		if fv, exists := v.FldValidators["hash_policy_choice.specific_hash_policy"]; exists {
			val := m.GetHashPolicyChoice().(*RouteSimpleAdvancedOptions_SpecificHashPolicy).SpecificHashPolicy
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("specific_hash_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["mirroring_choice"]; exists {
		val := m.GetMirroringChoice()
		vOpts := append(opts,
			db.WithValidateField("mirroring_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMirroringChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisableMirroring:
		if fv, exists := v.FldValidators["mirroring_choice.disable_mirroring"]; exists {
			val := m.GetMirroringChoice().(*RouteSimpleAdvancedOptions_DisableMirroring).DisableMirroring
			vOpts := append(opts,
				db.WithValidateField("mirroring_choice"),
				db.WithValidateField("disable_mirroring"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_MirrorPolicy:
		if fv, exists := v.FldValidators["mirroring_choice.mirror_policy"]; exists {
			val := m.GetMirroringChoice().(*RouteSimpleAdvancedOptions_MirrorPolicy).MirrorPolicy
			vOpts := append(opts,
				db.WithValidateField("mirroring_choice"),
				db.WithValidateField("mirror_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["priority"]; exists {

		vOpts := append(opts, db.WithValidateField("priority"))
		if err := fv(ctx, m.GetPriority(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_headers_to_add"]; exists {
		vOpts := append(opts, db.WithValidateField("request_headers_to_add"))
		if err := fv(ctx, m.GetRequestHeadersToAdd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_headers_to_remove"]; exists {
		vOpts := append(opts, db.WithValidateField("request_headers_to_remove"))
		if err := fv(ctx, m.GetRequestHeadersToRemove(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_headers_to_add"]; exists {
		vOpts := append(opts, db.WithValidateField("response_headers_to_add"))
		if err := fv(ctx, m.GetResponseHeadersToAdd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_headers_to_remove"]; exists {
		vOpts := append(opts, db.WithValidateField("response_headers_to_remove"))
		if err := fv(ctx, m.GetResponseHeadersToRemove(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["retry_policy_choice"]; exists {
		val := m.GetRetryPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("retry_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRetryPolicyChoice().(type) {
	case *RouteSimpleAdvancedOptions_DefaultRetryPolicy:
		if fv, exists := v.FldValidators["retry_policy_choice.default_retry_policy"]; exists {
			val := m.GetRetryPolicyChoice().(*RouteSimpleAdvancedOptions_DefaultRetryPolicy).DefaultRetryPolicy
			vOpts := append(opts,
				db.WithValidateField("retry_policy_choice"),
				db.WithValidateField("default_retry_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_RetryPolicy:
		if fv, exists := v.FldValidators["retry_policy_choice.retry_policy"]; exists {
			val := m.GetRetryPolicyChoice().(*RouteSimpleAdvancedOptions_RetryPolicy).RetryPolicy
			vOpts := append(opts,
				db.WithValidateField("retry_policy_choice"),
				db.WithValidateField("retry_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rewrite_choice"]; exists {
		val := m.GetRewriteChoice()
		vOpts := append(opts,
			db.WithValidateField("rewrite_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRewriteChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisablePrefixRewrite:
		if fv, exists := v.FldValidators["rewrite_choice.disable_prefix_rewrite"]; exists {
			val := m.GetRewriteChoice().(*RouteSimpleAdvancedOptions_DisablePrefixRewrite).DisablePrefixRewrite
			vOpts := append(opts,
				db.WithValidateField("rewrite_choice"),
				db.WithValidateField("disable_prefix_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_PrefixRewrite:
		if fv, exists := v.FldValidators["rewrite_choice.prefix_rewrite"]; exists {
			val := m.GetRewriteChoice().(*RouteSimpleAdvancedOptions_PrefixRewrite).PrefixRewrite
			vOpts := append(opts,
				db.WithValidateField("rewrite_choice"),
				db.WithValidateField("prefix_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["spdy_choice"]; exists {
		val := m.GetSpdyChoice()
		vOpts := append(opts,
			db.WithValidateField("spdy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSpdyChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisableSpdy:
		if fv, exists := v.FldValidators["spdy_choice.disable_spdy"]; exists {
			val := m.GetSpdyChoice().(*RouteSimpleAdvancedOptions_DisableSpdy).DisableSpdy
			vOpts := append(opts,
				db.WithValidateField("spdy_choice"),
				db.WithValidateField("disable_spdy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_EnableSpdy:
		if fv, exists := v.FldValidators["spdy_choice.enable_spdy"]; exists {
			val := m.GetSpdyChoice().(*RouteSimpleAdvancedOptions_EnableSpdy).EnableSpdy
			vOpts := append(opts,
				db.WithValidateField("spdy_choice"),
				db.WithValidateField("enable_spdy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("timeout"))
		if err := fv(ctx, m.GetTimeout(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_choice"]; exists {
		val := m.GetWafChoice()
		vOpts := append(opts,
			db.WithValidateField("waf_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWafChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisableWaf:
		if fv, exists := v.FldValidators["waf_choice.disable_waf"]; exists {
			val := m.GetWafChoice().(*RouteSimpleAdvancedOptions_DisableWaf).DisableWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("disable_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_Waf:
		if fv, exists := v.FldValidators["waf_choice.waf"]; exists {
			val := m.GetWafChoice().(*RouteSimpleAdvancedOptions_Waf).Waf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_WafRule:
		if fv, exists := v.FldValidators["waf_choice.waf_rule"]; exists {
			val := m.GetWafChoice().(*RouteSimpleAdvancedOptions_WafRule).WafRule
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("waf_rule"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_AppFirewall:
		if fv, exists := v.FldValidators["waf_choice.app_firewall"]; exists {
			val := m.GetWafChoice().(*RouteSimpleAdvancedOptions_AppFirewall).AppFirewall
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("app_firewall"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["websocket_choice"]; exists {
		val := m.GetWebsocketChoice()
		vOpts := append(opts,
			db.WithValidateField("websocket_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWebsocketChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisableWebSocketConfig:
		if fv, exists := v.FldValidators["websocket_choice.disable_web_socket_config"]; exists {
			val := m.GetWebsocketChoice().(*RouteSimpleAdvancedOptions_DisableWebSocketConfig).DisableWebSocketConfig
			vOpts := append(opts,
				db.WithValidateField("websocket_choice"),
				db.WithValidateField("disable_web_socket_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_WebSocketConfig:
		if fv, exists := v.FldValidators["websocket_choice.web_socket_config"]; exists {
			val := m.GetWebsocketChoice().(*RouteSimpleAdvancedOptions_WebSocketConfig).WebSocketConfig
			vOpts := append(opts,
				db.WithValidateField("websocket_choice"),
				db.WithValidateField("web_socket_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteSimpleAdvancedOptionsValidator = func() *ValidateRouteSimpleAdvancedOptions {
	v := &ValidateRouteSimpleAdvancedOptions{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBufferChoice := v.BufferChoiceValidationRuleHandler
	rulesBufferChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBufferChoice(rulesBufferChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.buffer_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["buffer_choice"] = vFn

	vrhClusterRetractChoice := v.ClusterRetractChoiceValidationRuleHandler
	rulesClusterRetractChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterRetractChoice(rulesClusterRetractChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.cluster_retract_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_retract_choice"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhMirroringChoice := v.MirroringChoiceValidationRuleHandler
	rulesMirroringChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMirroringChoice(rulesMirroringChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.mirroring_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mirroring_choice"] = vFn

	vrhRetryPolicyChoice := v.RetryPolicyChoiceValidationRuleHandler
	rulesRetryPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRetryPolicyChoice(rulesRetryPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.retry_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["retry_policy_choice"] = vFn

	vrhRewriteChoice := v.RewriteChoiceValidationRuleHandler
	rulesRewriteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRewriteChoice(rulesRewriteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.rewrite_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rewrite_choice"] = vFn

	vrhRewriteChoicePrefixRewrite := v.RewriteChoicePrefixRewriteValidationRuleHandler
	rulesRewriteChoicePrefixRewrite := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFnMap["rewrite_choice.prefix_rewrite"], err = vrhRewriteChoicePrefixRewrite(rulesRewriteChoicePrefixRewrite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field RouteSimpleAdvancedOptions.rewrite_choice_prefix_rewrite: %s", err)
		panic(errMsg)
	}

	v.FldValidators["rewrite_choice.prefix_rewrite"] = vFnMap["rewrite_choice.prefix_rewrite"]

	vrhSpdyChoice := v.SpdyChoiceValidationRuleHandler
	rulesSpdyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSpdyChoice(rulesSpdyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.spdy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["spdy_choice"] = vFn

	vrhWafChoice := v.WafChoiceValidationRuleHandler
	rulesWafChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWafChoice(rulesWafChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.waf_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_choice"] = vFn

	vrhWebsocketChoice := v.WebsocketChoiceValidationRuleHandler
	rulesWebsocketChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWebsocketChoice(rulesWebsocketChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.websocket_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["websocket_choice"] = vFn

	vrhEndpointSubsets := v.EndpointSubsetsValidationRuleHandler
	rulesEndpointSubsets := map[string]string{
		"ves.io.schema.rules.map.max_pairs": "16",
	}
	vFn, err = vrhEndpointSubsets(rulesEndpointSubsets)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.endpoint_subsets: %s", err)
		panic(errMsg)
	}
	v.FldValidators["endpoint_subsets"] = vFn

	vrhRequestHeadersToAdd := v.RequestHeadersToAddValidationRuleHandler
	rulesRequestHeadersToAdd := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRequestHeadersToAdd(rulesRequestHeadersToAdd)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.request_headers_to_add: %s", err)
		panic(errMsg)
	}
	v.FldValidators["request_headers_to_add"] = vFn

	vrhRequestHeadersToRemove := v.RequestHeadersToRemoveValidationRuleHandler
	rulesRequestHeadersToRemove := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.min_bytes": "1",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhRequestHeadersToRemove(rulesRequestHeadersToRemove)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.request_headers_to_remove: %s", err)
		panic(errMsg)
	}
	v.FldValidators["request_headers_to_remove"] = vFn

	vrhResponseHeadersToAdd := v.ResponseHeadersToAddValidationRuleHandler
	rulesResponseHeadersToAdd := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhResponseHeadersToAdd(rulesResponseHeadersToAdd)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.response_headers_to_add: %s", err)
		panic(errMsg)
	}
	v.FldValidators["response_headers_to_add"] = vFn

	vrhResponseHeadersToRemove := v.ResponseHeadersToRemoveValidationRuleHandler
	rulesResponseHeadersToRemove := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.min_bytes": "1",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhResponseHeadersToRemove(rulesResponseHeadersToRemove)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.response_headers_to_remove: %s", err)
		panic(errMsg)
	}
	v.FldValidators["response_headers_to_remove"] = vFn

	vrhTimeout := v.TimeoutValidationRuleHandler
	rulesTimeout := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "600000",
	}
	vFn, err = vrhTimeout(rulesTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["timeout"] = vFn

	v.FldValidators["buffer_choice.buffer_policy"] = ves_io_schema.BufferConfigTypeValidator().Validate

	v.FldValidators["hash_policy_choice.specific_hash_policy"] = HashPolicyListTypeValidator().Validate

	v.FldValidators["mirroring_choice.mirror_policy"] = MirrorPolicyTypeValidator().Validate

	v.FldValidators["retry_policy_choice.retry_policy"] = ves_io_schema.RetryPolicyTypeValidator().Validate

	v.FldValidators["waf_choice.waf"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["waf_choice.waf_rule"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["waf_choice.app_firewall"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cors_policy"] = ves_io_schema.CorsPolicyValidator().Validate

	return v
}()

func RouteSimpleAdvancedOptionsValidator() db.Validator {
	return DefaultRouteSimpleAdvancedOptionsValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteType) DeepCopy() *RouteType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeValidator().Validate(ctx, m, opts...)
}

func (m *RouteType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *RouteType) GetChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetChoice().(type) {
	case *RouteType_SimpleRoute:
		odrInfos, err = m.GetSimpleRoute().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "simple_route." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *RouteType_RedirectRoute:

	case *RouteType_DirectResponseRoute:

	case *RouteType_CustomRouteObject:
		odrInfos, err = m.GetCustomRouteObject().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "custom_route_object." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	}

	return drInfos, err
}

type ValidateRouteType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteType) ChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["choice"]; exists {
		val := m.GetChoice()
		vOpts := append(opts,
			db.WithValidateField("choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChoice().(type) {
	case *RouteType_SimpleRoute:
		if fv, exists := v.FldValidators["choice.simple_route"]; exists {
			val := m.GetChoice().(*RouteType_SimpleRoute).SimpleRoute
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("simple_route"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteType_RedirectRoute:
		if fv, exists := v.FldValidators["choice.redirect_route"]; exists {
			val := m.GetChoice().(*RouteType_RedirectRoute).RedirectRoute
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("redirect_route"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteType_DirectResponseRoute:
		if fv, exists := v.FldValidators["choice.direct_response_route"]; exists {
			val := m.GetChoice().(*RouteType_DirectResponseRoute).DirectResponseRoute
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("direct_response_route"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteType_CustomRouteObject:
		if fv, exists := v.FldValidators["choice.custom_route_object"]; exists {
			val := m.GetChoice().(*RouteType_CustomRouteObject).CustomRouteObject
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("custom_route_object"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeValidator = func() *ValidateRouteType {
	v := &ValidateRouteType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhChoice := v.ChoiceValidationRuleHandler
	rulesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChoice(rulesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteType.choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["choice"] = vFn

	v.FldValidators["choice.simple_route"] = RouteTypeSimpleValidator().Validate
	v.FldValidators["choice.redirect_route"] = RouteTypeRedirectValidator().Validate
	v.FldValidators["choice.direct_response_route"] = RouteTypeDirectResponseValidator().Validate
	v.FldValidators["choice.custom_route_object"] = RouteTypeCustomRouteValidator().Validate

	return v
}()

func RouteTypeValidator() db.Validator {
	return DefaultRouteTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTypeCustomRoute) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTypeCustomRoute) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTypeCustomRoute) DeepCopy() *RouteTypeCustomRoute {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTypeCustomRoute{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTypeCustomRoute) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTypeCustomRoute) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeCustomRouteValidator().Validate(ctx, m, opts...)
}

func (m *RouteTypeCustomRoute) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetRouteRefDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *RouteTypeCustomRoute) GetRouteRefDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}

	vref := m.GetRouteRef()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("route.Object")
	drInfos = append(drInfos, db.DRefInfo{
		RefdType:   "route.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "route_ref",
		Ref:        vdRef,
	})

	return drInfos, nil
}

// GetRouteRefDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *RouteTypeCustomRoute) GetRouteRefDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "route.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: route")
	}

	vref := m.GetRouteRef()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "route.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateRouteTypeCustomRoute struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTypeCustomRoute) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTypeCustomRoute)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTypeCustomRoute got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["route_ref"]; exists {

		vOpts := append(opts, db.WithValidateField("route_ref"))
		if err := fv(ctx, m.GetRouteRef(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeCustomRouteValidator = func() *ValidateRouteTypeCustomRoute {
	v := &ValidateRouteTypeCustomRoute{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["route_ref"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func RouteTypeCustomRouteValidator() db.Validator {
	return DefaultRouteTypeCustomRouteValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTypeDirectResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTypeDirectResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTypeDirectResponse) DeepCopy() *RouteTypeDirectResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTypeDirectResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTypeDirectResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTypeDirectResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeDirectResponseValidator().Validate(ctx, m, opts...)
}

type ValidateRouteTypeDirectResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTypeDirectResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTypeDirectResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTypeDirectResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["route_direct_response"]; exists {

		vOpts := append(opts, db.WithValidateField("route_direct_response"))
		if err := fv(ctx, m.GetRouteDirectResponse(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeDirectResponseValidator = func() *ValidateRouteTypeDirectResponse {
	v := &ValidateRouteTypeDirectResponse{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["path"] = ves_io_schema.PathMatcherTypeValidator().Validate

	v.FldValidators["route_direct_response"] = ves_io_schema_route.RouteDirectResponseValidator().Validate

	return v
}()

func RouteTypeDirectResponseValidator() db.Validator {
	return DefaultRouteTypeDirectResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTypeRedirect) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTypeRedirect) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTypeRedirect) DeepCopy() *RouteTypeRedirect {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTypeRedirect{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTypeRedirect) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTypeRedirect) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeRedirectValidator().Validate(ctx, m, opts...)
}

type ValidateRouteTypeRedirect struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTypeRedirect) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTypeRedirect)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTypeRedirect got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["route_redirect"]; exists {

		vOpts := append(opts, db.WithValidateField("route_redirect"))
		if err := fv(ctx, m.GetRouteRedirect(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeRedirectValidator = func() *ValidateRouteTypeRedirect {
	v := &ValidateRouteTypeRedirect{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["path"] = ves_io_schema.PathMatcherTypeValidator().Validate

	v.FldValidators["route_redirect"] = ves_io_schema_route.RouteRedirectValidator().Validate

	return v
}()

func RouteTypeRedirectValidator() db.Validator {
	return DefaultRouteTypeRedirectValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTypeSimple) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTypeSimple) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTypeSimple) DeepCopy() *RouteTypeSimple {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTypeSimple{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTypeSimple) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTypeSimple) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeSimpleValidator().Validate(ctx, m, opts...)
}

func (m *RouteTypeSimple) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvancedOptionsDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolsDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *RouteTypeSimple) GetAdvancedOptionsDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetAdvancedOptions() == nil {
		return []db.DRefInfo{}, nil
	}

	driSet, err = m.GetAdvancedOptions().GetDRefInfo()
	if err != nil {
		return nil, err
	}
	for _, dri := range driSet {
		dri.DRField = "advanced_options." + dri.DRField
		drInfos = append(drInfos, dri)
	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *RouteTypeSimple) GetOriginPoolsDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetOriginPools() == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.GetOriginPools() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("origin_pools[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

type ValidateRouteTypeSimple struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTypeSimple) HostRewriteParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_rewrite_params")
	}
	return validatorFn, nil
}

func (v *ValidateRouteTypeSimple) HostRewriteParamsHostRewriteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_HostRewrite, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_rewrite")
	}
	return oValidatorFn_HostRewrite, nil
}

func (v *ValidateRouteTypeSimple) OriginPoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for origin_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated origin_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items origin_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeSimple) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTypeSimple)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTypeSimple got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["advanced_options"]; exists {

		vOpts := append(opts, db.WithValidateField("advanced_options"))
		if err := fv(ctx, m.GetAdvancedOptions(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["host_rewrite_params"]; exists {
		val := m.GetHostRewriteParams()
		vOpts := append(opts,
			db.WithValidateField("host_rewrite_params"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHostRewriteParams().(type) {
	case *RouteTypeSimple_AutoHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.auto_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimple_AutoHostRewrite).AutoHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("auto_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteTypeSimple_HostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimple_HostRewrite).HostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteTypeSimple_DisableHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.disable_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimple_DisableHostRewrite).DisableHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("disable_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["origin_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("origin_pools"))
		if err := fv(ctx, m.GetOriginPools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeSimpleValidator = func() *ValidateRouteTypeSimple {
	v := &ValidateRouteTypeSimple{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHostRewriteParams := v.HostRewriteParamsValidationRuleHandler
	rulesHostRewriteParams := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHostRewriteParams(rulesHostRewriteParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeSimple.host_rewrite_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["host_rewrite_params"] = vFn

	vrhHostRewriteParamsHostRewrite := v.HostRewriteParamsHostRewriteValidationRuleHandler
	rulesHostRewriteParamsHostRewrite := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
	}
	vFnMap["host_rewrite_params.host_rewrite"], err = vrhHostRewriteParamsHostRewrite(rulesHostRewriteParamsHostRewrite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field RouteTypeSimple.host_rewrite_params_host_rewrite: %s", err)
		panic(errMsg)
	}

	v.FldValidators["host_rewrite_params.host_rewrite"] = vFnMap["host_rewrite_params.host_rewrite"]

	vrhOriginPools := v.OriginPoolsValidationRuleHandler
	rulesOriginPools := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhOriginPools(rulesOriginPools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeSimple.origin_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_pools"] = vFn

	v.FldValidators["path"] = ves_io_schema.PathMatcherTypeValidator().Validate

	v.FldValidators["advanced_options"] = RouteSimpleAdvancedOptionsValidator().Validate

	return v
}()

func RouteTypeSimpleValidator() db.Validator {
	return DefaultRouteTypeSimpleValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTypeSimpleWithDefaultOriginPool) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTypeSimpleWithDefaultOriginPool) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTypeSimpleWithDefaultOriginPool) DeepCopy() *RouteTypeSimpleWithDefaultOriginPool {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTypeSimpleWithDefaultOriginPool{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTypeSimpleWithDefaultOriginPool) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTypeSimpleWithDefaultOriginPool) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeSimpleWithDefaultOriginPoolValidator().Validate(ctx, m, opts...)
}

type ValidateRouteTypeSimpleWithDefaultOriginPool struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTypeSimpleWithDefaultOriginPool) HostRewriteParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_rewrite_params")
	}
	return validatorFn, nil
}

func (v *ValidateRouteTypeSimpleWithDefaultOriginPool) HostRewriteParamsHostRewriteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_HostRewrite, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_rewrite")
	}
	return oValidatorFn_HostRewrite, nil
}

func (v *ValidateRouteTypeSimpleWithDefaultOriginPool) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTypeSimpleWithDefaultOriginPool)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTypeSimpleWithDefaultOriginPool got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["host_rewrite_params"]; exists {
		val := m.GetHostRewriteParams()
		vOpts := append(opts,
			db.WithValidateField("host_rewrite_params"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHostRewriteParams().(type) {
	case *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.auto_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite).AutoHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("auto_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteTypeSimpleWithDefaultOriginPool_HostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_HostRewrite).HostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.disable_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite).DisableHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("disable_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeSimpleWithDefaultOriginPoolValidator = func() *ValidateRouteTypeSimpleWithDefaultOriginPool {
	v := &ValidateRouteTypeSimpleWithDefaultOriginPool{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHostRewriteParams := v.HostRewriteParamsValidationRuleHandler
	rulesHostRewriteParams := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHostRewriteParams(rulesHostRewriteParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeSimpleWithDefaultOriginPool.host_rewrite_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["host_rewrite_params"] = vFn

	vrhHostRewriteParamsHostRewrite := v.HostRewriteParamsHostRewriteValidationRuleHandler
	rulesHostRewriteParamsHostRewrite := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
	}
	vFnMap["host_rewrite_params.host_rewrite"], err = vrhHostRewriteParamsHostRewrite(rulesHostRewriteParamsHostRewrite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field RouteTypeSimpleWithDefaultOriginPool.host_rewrite_params_host_rewrite: %s", err)
		panic(errMsg)
	}

	v.FldValidators["host_rewrite_params.host_rewrite"] = vFnMap["host_rewrite_params.host_rewrite"]

	v.FldValidators["path"] = ves_io_schema.PathMatcherTypeValidator().Validate

	return v
}()

func RouteTypeSimpleWithDefaultOriginPoolValidator() db.Validator {
	return DefaultRouteTypeSimpleWithDefaultOriginPoolValidator
}

// augmented methods on protoc/std generated struct

func (m *ServicePolicyList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ServicePolicyList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ServicePolicyList) DeepCopy() *ServicePolicyList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ServicePolicyList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ServicePolicyList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ServicePolicyList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ServicePolicyListValidator().Validate(ctx, m, opts...)
}

func (m *ServicePolicyList) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetPoliciesDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

func (m *ServicePolicyList) GetPoliciesDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, vref := range m.GetPolicies() {
		if vref == nil {
			return nil, fmt.Errorf("ServicePolicyList.policies[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("service_policy.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "service_policy.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "policies",
			Ref:        vdRef,
		})
	}

	return drInfos, nil
}

// GetPoliciesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ServicePolicyList) GetPoliciesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "service_policy.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: service_policy")
	}
	for i, vref := range m.GetPolicies() {
		if vref == nil {
			return nil, fmt.Errorf("ServicePolicyList.policies[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "service_policy.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateServicePolicyList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateServicePolicyList) PoliciesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for policies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated policies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items policies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateServicePolicyList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ServicePolicyList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ServicePolicyList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["policies"]; exists {
		vOpts := append(opts, db.WithValidateField("policies"))
		if err := fv(ctx, m.GetPolicies(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultServicePolicyListValidator = func() *ValidateServicePolicyList {
	v := &ValidateServicePolicyList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPolicies := v.PoliciesValidationRuleHandler
	rulesPolicies := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhPolicies(rulesPolicies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ServicePolicyList.policies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["policies"] = vFn

	return v
}()

func ServicePolicyListValidator() db.Validator {
	return DefaultServicePolicyListValidator
}

// augmented methods on protoc/std generated struct

func (m *SimpleClientSrcRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SimpleClientSrcRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SimpleClientSrcRule) DeepCopy() *SimpleClientSrcRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SimpleClientSrcRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SimpleClientSrcRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SimpleClientSrcRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SimpleClientSrcRuleValidator().Validate(ctx, m, opts...)
}

type ValidateSimpleClientSrcRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSimpleClientSrcRule) ClientSourceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_source_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSimpleClientSrcRule) ClientSourceChoiceIpPrefixValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_IpPrefix, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_prefix")
	}
	return oValidatorFn_IpPrefix, nil
}
func (v *ValidateSimpleClientSrcRule) ClientSourceChoiceAsNumberValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AsNumber, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for as_number")
	}
	return oValidatorFn_AsNumber, nil
}

func (v *ValidateSimpleClientSrcRule) ExpirationTimestampValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var (
		reqdValidatorFn db.ValidatorFunc
		err             error
	)

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if reqdValidatorFn != nil {
			if err = reqdValidatorFn(ctx, val, opts...); err != nil {
				return err
			}
		}
		// TODO: lookup configured third-party type validators
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSimpleClientSrcRule) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSimpleClientSrcRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SimpleClientSrcRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SimpleClientSrcRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["client_source_choice"]; exists {
		val := m.GetClientSourceChoice()
		vOpts := append(opts,
			db.WithValidateField("client_source_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClientSourceChoice().(type) {
	case *SimpleClientSrcRule_IpPrefix:
		if fv, exists := v.FldValidators["client_source_choice.ip_prefix"]; exists {
			val := m.GetClientSourceChoice().(*SimpleClientSrcRule_IpPrefix).IpPrefix
			vOpts := append(opts,
				db.WithValidateField("client_source_choice"),
				db.WithValidateField("ip_prefix"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SimpleClientSrcRule_AsNumber:
		if fv, exists := v.FldValidators["client_source_choice.as_number"]; exists {
			val := m.GetClientSourceChoice().(*SimpleClientSrcRule_AsNumber).AsNumber
			vOpts := append(opts,
				db.WithValidateField("client_source_choice"),
				db.WithValidateField("as_number"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["expiration_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("expiration_timestamp"))
		if err := fv(ctx, m.GetExpirationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSimpleClientSrcRuleValidator = func() *ValidateSimpleClientSrcRule {
	v := &ValidateSimpleClientSrcRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhClientSourceChoice := v.ClientSourceChoiceValidationRuleHandler
	rulesClientSourceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClientSourceChoice(rulesClientSourceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleClientSrcRule.client_source_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["client_source_choice"] = vFn

	vrhClientSourceChoiceIpPrefix := v.ClientSourceChoiceIpPrefixValidationRuleHandler
	rulesClientSourceChoiceIpPrefix := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.string.ipv4_prefix": "true",
	}
	vFnMap["client_source_choice.ip_prefix"], err = vrhClientSourceChoiceIpPrefix(rulesClientSourceChoiceIpPrefix)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field SimpleClientSrcRule.client_source_choice_ip_prefix: %s", err)
		panic(errMsg)
	}
	vrhClientSourceChoiceAsNumber := v.ClientSourceChoiceAsNumberValidationRuleHandler
	rulesClientSourceChoiceAsNumber := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gte":       "1",
		"ves.io.schema.rules.uint32.lte":       "401308",
	}
	vFnMap["client_source_choice.as_number"], err = vrhClientSourceChoiceAsNumber(rulesClientSourceChoiceAsNumber)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field SimpleClientSrcRule.client_source_choice_as_number: %s", err)
		panic(errMsg)
	}

	v.FldValidators["client_source_choice.ip_prefix"] = vFnMap["client_source_choice.ip_prefix"]
	v.FldValidators["client_source_choice.as_number"] = vFnMap["client_source_choice.as_number"]

	vrhExpirationTimestamp := v.ExpirationTimestampValidationRuleHandler
	rulesExpirationTimestamp := map[string]string{
		"ves.io.schema.rules.timestamp.gt_now":         "true",
		"ves.io.schema.rules.timestamp.within.seconds": "31536000",
	}
	vFn, err = vrhExpirationTimestamp(rulesExpirationTimestamp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleClientSrcRule.expiration_timestamp: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expiration_timestamp"] = vFn

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleClientSrcRule.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	return v
}()

func SimpleClientSrcRuleValidator() db.Validator {
	return DefaultSimpleClientSrcRuleValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetAdvertiseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AdvertiseChoice.(type) {
	case nil:
		o.AdvertiseChoice = nil

	case *CreateSpecType_AdvertiseCustom:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *CreateSpecType_AdvertiseOnPublic:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *CreateSpecType_AdvertiseOnPublicDefaultVip:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *CreateSpecType_DoNotAdvertise:
		o.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetAdvertiseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AdvertiseChoice.(type) {
	case nil:
		r.AdvertiseChoice = nil

	case *GlobalSpecType_AdvertiseCustom:
		r.AdvertiseChoice = &CreateSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *GlobalSpecType_AdvertiseOnPublic:
		r.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		r.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *GlobalSpecType_DoNotAdvertise:
		r.AdvertiseChoice = &CreateSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetChallengeTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ChallengeType.(type) {
	case nil:
		o.ChallengeType = nil

	case *CreateSpecType_CaptchaChallenge:
		o.ChallengeType = &GlobalSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *CreateSpecType_JsChallenge:
		o.ChallengeType = &GlobalSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *CreateSpecType_NoChallenge:
		o.ChallengeType = &GlobalSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *CreateSpecType_PolicyBasedChallenge:
		o.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetChallengeTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ChallengeType.(type) {
	case nil:
		r.ChallengeType = nil

	case *GlobalSpecType_CaptchaChallenge:
		r.ChallengeType = &CreateSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *GlobalSpecType_JsChallenge:
		r.ChallengeType = &CreateSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *GlobalSpecType_NoChallenge:
		r.ChallengeType = &CreateSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *GlobalSpecType_PolicyBasedChallenge:
		r.ChallengeType = &CreateSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetHashPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HashPolicyChoice.(type) {
	case nil:
		o.HashPolicyChoice = nil

	case *CreateSpecType_CookieStickiness:
		o.HashPolicyChoice = &GlobalSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *CreateSpecType_LeastActive:
		o.HashPolicyChoice = &GlobalSpecType_LeastActive{LeastActive: of.LeastActive}

	case *CreateSpecType_Random:
		o.HashPolicyChoice = &GlobalSpecType_Random{Random: of.Random}

	case *CreateSpecType_RingHash:
		o.HashPolicyChoice = &GlobalSpecType_RingHash{RingHash: of.RingHash}

	case *CreateSpecType_RoundRobin:
		o.HashPolicyChoice = &GlobalSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *CreateSpecType_SourceIpStickiness:
		o.HashPolicyChoice = &GlobalSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetHashPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HashPolicyChoice.(type) {
	case nil:
		r.HashPolicyChoice = nil

	case *GlobalSpecType_CookieStickiness:
		r.HashPolicyChoice = &CreateSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *GlobalSpecType_LeastActive:
		r.HashPolicyChoice = &CreateSpecType_LeastActive{LeastActive: of.LeastActive}

	case *GlobalSpecType_Random:
		r.HashPolicyChoice = &CreateSpecType_Random{Random: of.Random}

	case *GlobalSpecType_RingHash:
		r.HashPolicyChoice = &CreateSpecType_RingHash{RingHash: of.RingHash}

	case *GlobalSpecType_RoundRobin:
		r.HashPolicyChoice = &CreateSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *GlobalSpecType_SourceIpStickiness:
		r.HashPolicyChoice = &CreateSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetLoadbalancerTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LoadbalancerType.(type) {
	case nil:
		o.LoadbalancerType = nil

	case *CreateSpecType_Http:
		o.LoadbalancerType = &GlobalSpecType_Http{Http: of.Http}

	case *CreateSpecType_Https:
		o.LoadbalancerType = &GlobalSpecType_Https{Https: of.Https}

	case *CreateSpecType_HttpsAutoCert:
		o.LoadbalancerType = &GlobalSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetLoadbalancerTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LoadbalancerType.(type) {
	case nil:
		r.LoadbalancerType = nil

	case *GlobalSpecType_Http:
		r.LoadbalancerType = &CreateSpecType_Http{Http: of.Http}

	case *GlobalSpecType_Https:
		r.LoadbalancerType = &CreateSpecType_Https{Https: of.Https}

	case *GlobalSpecType_HttpsAutoCert:
		r.LoadbalancerType = &CreateSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetRateLimitChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RateLimitChoice.(type) {
	case nil:
		o.RateLimitChoice = nil

	case *CreateSpecType_DisableRateLimit:
		o.RateLimitChoice = &GlobalSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *CreateSpecType_RateLimit:
		o.RateLimitChoice = &GlobalSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetRateLimitChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RateLimitChoice.(type) {
	case nil:
		r.RateLimitChoice = nil

	case *GlobalSpecType_DisableRateLimit:
		r.RateLimitChoice = &CreateSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *GlobalSpecType_RateLimit:
		r.RateLimitChoice = &CreateSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetServicePolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServicePolicyChoice.(type) {
	case nil:
		o.ServicePolicyChoice = nil

	case *CreateSpecType_ActiveServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *CreateSpecType_NoServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *CreateSpecType_ServicePoliciesFromNamespace:
		o.ServicePolicyChoice = &GlobalSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetServicePolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServicePolicyChoice.(type) {
	case nil:
		r.ServicePolicyChoice = nil

	case *GlobalSpecType_ActiveServicePolicies:
		r.ServicePolicyChoice = &CreateSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *GlobalSpecType_NoServicePolicies:
		r.ServicePolicyChoice = &CreateSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *GlobalSpecType_ServicePoliciesFromNamespace:
		r.ServicePolicyChoice = &CreateSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetWafChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WafChoice.(type) {
	case nil:
		o.WafChoice = nil

	case *CreateSpecType_AppFirewall:
		o.WafChoice = &GlobalSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *CreateSpecType_DisableWaf:
		o.WafChoice = &GlobalSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	case *CreateSpecType_Waf:
		o.WafChoice = &GlobalSpecType_Waf{Waf: of.Waf}

	case *CreateSpecType_WafRule:
		o.WafChoice = &GlobalSpecType_WafRule{WafRule: of.WafRule}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetWafChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WafChoice.(type) {
	case nil:
		r.WafChoice = nil

	case *GlobalSpecType_AppFirewall:
		r.WafChoice = &CreateSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *GlobalSpecType_DisableWaf:
		r.WafChoice = &CreateSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	case *GlobalSpecType_Waf:
		r.WafChoice = &CreateSpecType_Waf{Waf: of.Waf}

	case *GlobalSpecType_WafRule:
		r.WafChoice = &CreateSpecType_WafRule{WafRule: of.WafRule}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.AddLocation = f.GetAddLocation()
	m.GetAdvertiseChoiceFromGlobalSpecType(f)
	m.BlockedClients = f.GetBlockedClients()
	m.GetChallengeTypeFromGlobalSpecType(f)
	m.CorsPolicy = f.GetCorsPolicy()
	m.DdosMitigationRules = f.GetDdosMitigationRules()
	m.DefaultRoutePools = f.GetDefaultRoutePools()
	m.Domains = f.GetDomains()
	m.GetHashPolicyChoiceFromGlobalSpecType(f)
	m.GetLoadbalancerTypeFromGlobalSpecType(f)
	m.MaliciousUserMitigation = f.GetMaliciousUserMitigation()
	m.MoreOption = f.GetMoreOption()
	m.GetRateLimitChoiceFromGlobalSpecType(f)
	m.Routes = f.GetRoutes()
	m.GetServicePolicyChoiceFromGlobalSpecType(f)
	m.TrustedClients = f.GetTrustedClients()
	m.UserIdentification = f.GetUserIdentification()
	m.GetWafChoiceFromGlobalSpecType(f)
	m.WafExclusionRules = f.GetWafExclusionRules()
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.AddLocation = m1.AddLocation
	m1.SetAdvertiseChoiceToGlobalSpecType(f)
	f.BlockedClients = m1.BlockedClients
	m1.SetChallengeTypeToGlobalSpecType(f)
	f.CorsPolicy = m1.CorsPolicy
	f.DdosMitigationRules = m1.DdosMitigationRules
	f.DefaultRoutePools = m1.DefaultRoutePools
	f.Domains = m1.Domains
	m1.SetHashPolicyChoiceToGlobalSpecType(f)
	m1.SetLoadbalancerTypeToGlobalSpecType(f)
	f.MaliciousUserMitigation = m1.MaliciousUserMitigation
	f.MoreOption = m1.MoreOption
	m1.SetRateLimitChoiceToGlobalSpecType(f)
	f.Routes = m1.Routes
	m1.SetServicePolicyChoiceToGlobalSpecType(f)
	f.TrustedClients = m1.TrustedClients
	f.UserIdentification = m1.UserIdentification
	m1.SetWafChoiceToGlobalSpecType(f)
	f.WafExclusionRules = m1.WafExclusionRules
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetAdvertiseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AdvertiseChoice.(type) {
	case nil:
		o.AdvertiseChoice = nil

	case *GetSpecType_AdvertiseCustom:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *GetSpecType_AdvertiseOnPublic:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *GetSpecType_AdvertiseOnPublicDefaultVip:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *GetSpecType_DoNotAdvertise:
		o.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetAdvertiseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AdvertiseChoice.(type) {
	case nil:
		r.AdvertiseChoice = nil

	case *GlobalSpecType_AdvertiseCustom:
		r.AdvertiseChoice = &GetSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *GlobalSpecType_AdvertiseOnPublic:
		r.AdvertiseChoice = &GetSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		r.AdvertiseChoice = &GetSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *GlobalSpecType_DoNotAdvertise:
		r.AdvertiseChoice = &GetSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetChallengeTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ChallengeType.(type) {
	case nil:
		o.ChallengeType = nil

	case *GetSpecType_CaptchaChallenge:
		o.ChallengeType = &GlobalSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *GetSpecType_JsChallenge:
		o.ChallengeType = &GlobalSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *GetSpecType_NoChallenge:
		o.ChallengeType = &GlobalSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *GetSpecType_PolicyBasedChallenge:
		o.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetChallengeTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ChallengeType.(type) {
	case nil:
		r.ChallengeType = nil

	case *GlobalSpecType_CaptchaChallenge:
		r.ChallengeType = &GetSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *GlobalSpecType_JsChallenge:
		r.ChallengeType = &GetSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *GlobalSpecType_NoChallenge:
		r.ChallengeType = &GetSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *GlobalSpecType_PolicyBasedChallenge:
		r.ChallengeType = &GetSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetHashPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HashPolicyChoice.(type) {
	case nil:
		o.HashPolicyChoice = nil

	case *GetSpecType_CookieStickiness:
		o.HashPolicyChoice = &GlobalSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *GetSpecType_LeastActive:
		o.HashPolicyChoice = &GlobalSpecType_LeastActive{LeastActive: of.LeastActive}

	case *GetSpecType_Random:
		o.HashPolicyChoice = &GlobalSpecType_Random{Random: of.Random}

	case *GetSpecType_RingHash:
		o.HashPolicyChoice = &GlobalSpecType_RingHash{RingHash: of.RingHash}

	case *GetSpecType_RoundRobin:
		o.HashPolicyChoice = &GlobalSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *GetSpecType_SourceIpStickiness:
		o.HashPolicyChoice = &GlobalSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetHashPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HashPolicyChoice.(type) {
	case nil:
		r.HashPolicyChoice = nil

	case *GlobalSpecType_CookieStickiness:
		r.HashPolicyChoice = &GetSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *GlobalSpecType_LeastActive:
		r.HashPolicyChoice = &GetSpecType_LeastActive{LeastActive: of.LeastActive}

	case *GlobalSpecType_Random:
		r.HashPolicyChoice = &GetSpecType_Random{Random: of.Random}

	case *GlobalSpecType_RingHash:
		r.HashPolicyChoice = &GetSpecType_RingHash{RingHash: of.RingHash}

	case *GlobalSpecType_RoundRobin:
		r.HashPolicyChoice = &GetSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *GlobalSpecType_SourceIpStickiness:
		r.HashPolicyChoice = &GetSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetLoadbalancerTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LoadbalancerType.(type) {
	case nil:
		o.LoadbalancerType = nil

	case *GetSpecType_Http:
		o.LoadbalancerType = &GlobalSpecType_Http{Http: of.Http}

	case *GetSpecType_Https:
		o.LoadbalancerType = &GlobalSpecType_Https{Https: of.Https}

	case *GetSpecType_HttpsAutoCert:
		o.LoadbalancerType = &GlobalSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetLoadbalancerTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LoadbalancerType.(type) {
	case nil:
		r.LoadbalancerType = nil

	case *GlobalSpecType_Http:
		r.LoadbalancerType = &GetSpecType_Http{Http: of.Http}

	case *GlobalSpecType_Https:
		r.LoadbalancerType = &GetSpecType_Https{Https: of.Https}

	case *GlobalSpecType_HttpsAutoCert:
		r.LoadbalancerType = &GetSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetRateLimitChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RateLimitChoice.(type) {
	case nil:
		o.RateLimitChoice = nil

	case *GetSpecType_DisableRateLimit:
		o.RateLimitChoice = &GlobalSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *GetSpecType_RateLimit:
		o.RateLimitChoice = &GlobalSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetRateLimitChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RateLimitChoice.(type) {
	case nil:
		r.RateLimitChoice = nil

	case *GlobalSpecType_DisableRateLimit:
		r.RateLimitChoice = &GetSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *GlobalSpecType_RateLimit:
		r.RateLimitChoice = &GetSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetServicePolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServicePolicyChoice.(type) {
	case nil:
		o.ServicePolicyChoice = nil

	case *GetSpecType_ActiveServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *GetSpecType_NoServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *GetSpecType_ServicePoliciesFromNamespace:
		o.ServicePolicyChoice = &GlobalSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetServicePolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServicePolicyChoice.(type) {
	case nil:
		r.ServicePolicyChoice = nil

	case *GlobalSpecType_ActiveServicePolicies:
		r.ServicePolicyChoice = &GetSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *GlobalSpecType_NoServicePolicies:
		r.ServicePolicyChoice = &GetSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *GlobalSpecType_ServicePoliciesFromNamespace:
		r.ServicePolicyChoice = &GetSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetWafChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WafChoice.(type) {
	case nil:
		o.WafChoice = nil

	case *GetSpecType_AppFirewall:
		o.WafChoice = &GlobalSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *GetSpecType_DisableWaf:
		o.WafChoice = &GlobalSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	case *GetSpecType_Waf:
		o.WafChoice = &GlobalSpecType_Waf{Waf: of.Waf}

	case *GetSpecType_WafRule:
		o.WafChoice = &GlobalSpecType_WafRule{WafRule: of.WafRule}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetWafChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WafChoice.(type) {
	case nil:
		r.WafChoice = nil

	case *GlobalSpecType_AppFirewall:
		r.WafChoice = &GetSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *GlobalSpecType_DisableWaf:
		r.WafChoice = &GetSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	case *GlobalSpecType_Waf:
		r.WafChoice = &GetSpecType_Waf{Waf: of.Waf}

	case *GlobalSpecType_WafRule:
		r.WafChoice = &GetSpecType_WafRule{WafRule: of.WafRule}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.AddLocation = f.GetAddLocation()
	m.GetAdvertiseChoiceFromGlobalSpecType(f)
	m.AutoCertInfo = f.GetAutoCertInfo()
	m.AutoCertState = f.GetAutoCertState()
	m.BlockedClients = f.GetBlockedClients()
	m.GetChallengeTypeFromGlobalSpecType(f)
	m.CorsPolicy = f.GetCorsPolicy()
	m.DdosMitigationRules = f.GetDdosMitigationRules()
	m.DefaultRoutePools = f.GetDefaultRoutePools()
	m.DnsInfo = f.GetDnsInfo()
	m.Domains = f.GetDomains()
	m.GetHashPolicyChoiceFromGlobalSpecType(f)
	m.HostName = f.GetHostName()
	m.GetLoadbalancerTypeFromGlobalSpecType(f)
	m.MaliciousUserMitigation = f.GetMaliciousUserMitigation()
	m.MoreOption = f.GetMoreOption()
	m.GetRateLimitChoiceFromGlobalSpecType(f)
	m.Routes = f.GetRoutes()
	m.GetServicePolicyChoiceFromGlobalSpecType(f)
	m.State = f.GetState()
	m.TrustedClients = f.GetTrustedClients()
	m.UserIdentification = f.GetUserIdentification()
	m.GetWafChoiceFromGlobalSpecType(f)
	m.WafExclusionRules = f.GetWafExclusionRules()
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.AddLocation = m1.AddLocation
	m1.SetAdvertiseChoiceToGlobalSpecType(f)
	f.AutoCertInfo = m1.AutoCertInfo
	f.AutoCertState = m1.AutoCertState
	f.BlockedClients = m1.BlockedClients
	m1.SetChallengeTypeToGlobalSpecType(f)
	f.CorsPolicy = m1.CorsPolicy
	f.DdosMitigationRules = m1.DdosMitigationRules
	f.DefaultRoutePools = m1.DefaultRoutePools
	f.DnsInfo = m1.DnsInfo
	f.Domains = m1.Domains
	m1.SetHashPolicyChoiceToGlobalSpecType(f)
	f.HostName = m1.HostName
	m1.SetLoadbalancerTypeToGlobalSpecType(f)
	f.MaliciousUserMitigation = m1.MaliciousUserMitigation
	f.MoreOption = m1.MoreOption
	m1.SetRateLimitChoiceToGlobalSpecType(f)
	f.Routes = m1.Routes
	m1.SetServicePolicyChoiceToGlobalSpecType(f)
	f.State = m1.State
	f.TrustedClients = m1.TrustedClients
	f.UserIdentification = m1.UserIdentification
	m1.SetWafChoiceToGlobalSpecType(f)
	f.WafExclusionRules = m1.WafExclusionRules
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetAdvertiseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AdvertiseChoice.(type) {
	case nil:
		o.AdvertiseChoice = nil

	case *ReplaceSpecType_AdvertiseCustom:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *ReplaceSpecType_AdvertiseOnPublic:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *ReplaceSpecType_DoNotAdvertise:
		o.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetAdvertiseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AdvertiseChoice.(type) {
	case nil:
		r.AdvertiseChoice = nil

	case *GlobalSpecType_AdvertiseCustom:
		r.AdvertiseChoice = &ReplaceSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *GlobalSpecType_AdvertiseOnPublic:
		r.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		r.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *GlobalSpecType_DoNotAdvertise:
		r.AdvertiseChoice = &ReplaceSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetChallengeTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ChallengeType.(type) {
	case nil:
		o.ChallengeType = nil

	case *ReplaceSpecType_CaptchaChallenge:
		o.ChallengeType = &GlobalSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *ReplaceSpecType_JsChallenge:
		o.ChallengeType = &GlobalSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *ReplaceSpecType_NoChallenge:
		o.ChallengeType = &GlobalSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *ReplaceSpecType_PolicyBasedChallenge:
		o.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetChallengeTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ChallengeType.(type) {
	case nil:
		r.ChallengeType = nil

	case *GlobalSpecType_CaptchaChallenge:
		r.ChallengeType = &ReplaceSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *GlobalSpecType_JsChallenge:
		r.ChallengeType = &ReplaceSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *GlobalSpecType_NoChallenge:
		r.ChallengeType = &ReplaceSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *GlobalSpecType_PolicyBasedChallenge:
		r.ChallengeType = &ReplaceSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetHashPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HashPolicyChoice.(type) {
	case nil:
		o.HashPolicyChoice = nil

	case *ReplaceSpecType_CookieStickiness:
		o.HashPolicyChoice = &GlobalSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *ReplaceSpecType_LeastActive:
		o.HashPolicyChoice = &GlobalSpecType_LeastActive{LeastActive: of.LeastActive}

	case *ReplaceSpecType_Random:
		o.HashPolicyChoice = &GlobalSpecType_Random{Random: of.Random}

	case *ReplaceSpecType_RingHash:
		o.HashPolicyChoice = &GlobalSpecType_RingHash{RingHash: of.RingHash}

	case *ReplaceSpecType_RoundRobin:
		o.HashPolicyChoice = &GlobalSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *ReplaceSpecType_SourceIpStickiness:
		o.HashPolicyChoice = &GlobalSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetHashPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HashPolicyChoice.(type) {
	case nil:
		r.HashPolicyChoice = nil

	case *GlobalSpecType_CookieStickiness:
		r.HashPolicyChoice = &ReplaceSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *GlobalSpecType_LeastActive:
		r.HashPolicyChoice = &ReplaceSpecType_LeastActive{LeastActive: of.LeastActive}

	case *GlobalSpecType_Random:
		r.HashPolicyChoice = &ReplaceSpecType_Random{Random: of.Random}

	case *GlobalSpecType_RingHash:
		r.HashPolicyChoice = &ReplaceSpecType_RingHash{RingHash: of.RingHash}

	case *GlobalSpecType_RoundRobin:
		r.HashPolicyChoice = &ReplaceSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *GlobalSpecType_SourceIpStickiness:
		r.HashPolicyChoice = &ReplaceSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetLoadbalancerTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LoadbalancerType.(type) {
	case nil:
		o.LoadbalancerType = nil

	case *ReplaceSpecType_Http:
		o.LoadbalancerType = &GlobalSpecType_Http{Http: of.Http}

	case *ReplaceSpecType_Https:
		o.LoadbalancerType = &GlobalSpecType_Https{Https: of.Https}

	case *ReplaceSpecType_HttpsAutoCert:
		o.LoadbalancerType = &GlobalSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetLoadbalancerTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LoadbalancerType.(type) {
	case nil:
		r.LoadbalancerType = nil

	case *GlobalSpecType_Http:
		r.LoadbalancerType = &ReplaceSpecType_Http{Http: of.Http}

	case *GlobalSpecType_Https:
		r.LoadbalancerType = &ReplaceSpecType_Https{Https: of.Https}

	case *GlobalSpecType_HttpsAutoCert:
		r.LoadbalancerType = &ReplaceSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetRateLimitChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RateLimitChoice.(type) {
	case nil:
		o.RateLimitChoice = nil

	case *ReplaceSpecType_DisableRateLimit:
		o.RateLimitChoice = &GlobalSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *ReplaceSpecType_RateLimit:
		o.RateLimitChoice = &GlobalSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetRateLimitChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RateLimitChoice.(type) {
	case nil:
		r.RateLimitChoice = nil

	case *GlobalSpecType_DisableRateLimit:
		r.RateLimitChoice = &ReplaceSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *GlobalSpecType_RateLimit:
		r.RateLimitChoice = &ReplaceSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetServicePolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServicePolicyChoice.(type) {
	case nil:
		o.ServicePolicyChoice = nil

	case *ReplaceSpecType_ActiveServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *ReplaceSpecType_NoServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *ReplaceSpecType_ServicePoliciesFromNamespace:
		o.ServicePolicyChoice = &GlobalSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetServicePolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServicePolicyChoice.(type) {
	case nil:
		r.ServicePolicyChoice = nil

	case *GlobalSpecType_ActiveServicePolicies:
		r.ServicePolicyChoice = &ReplaceSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *GlobalSpecType_NoServicePolicies:
		r.ServicePolicyChoice = &ReplaceSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *GlobalSpecType_ServicePoliciesFromNamespace:
		r.ServicePolicyChoice = &ReplaceSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetWafChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WafChoice.(type) {
	case nil:
		o.WafChoice = nil

	case *ReplaceSpecType_AppFirewall:
		o.WafChoice = &GlobalSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *ReplaceSpecType_DisableWaf:
		o.WafChoice = &GlobalSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	case *ReplaceSpecType_Waf:
		o.WafChoice = &GlobalSpecType_Waf{Waf: of.Waf}

	case *ReplaceSpecType_WafRule:
		o.WafChoice = &GlobalSpecType_WafRule{WafRule: of.WafRule}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetWafChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WafChoice.(type) {
	case nil:
		r.WafChoice = nil

	case *GlobalSpecType_AppFirewall:
		r.WafChoice = &ReplaceSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *GlobalSpecType_DisableWaf:
		r.WafChoice = &ReplaceSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	case *GlobalSpecType_Waf:
		r.WafChoice = &ReplaceSpecType_Waf{Waf: of.Waf}

	case *GlobalSpecType_WafRule:
		r.WafChoice = &ReplaceSpecType_WafRule{WafRule: of.WafRule}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.AddLocation = f.GetAddLocation()
	m.GetAdvertiseChoiceFromGlobalSpecType(f)
	m.BlockedClients = f.GetBlockedClients()
	m.GetChallengeTypeFromGlobalSpecType(f)
	m.CorsPolicy = f.GetCorsPolicy()
	m.DdosMitigationRules = f.GetDdosMitigationRules()
	m.DefaultRoutePools = f.GetDefaultRoutePools()
	m.Domains = f.GetDomains()
	m.GetHashPolicyChoiceFromGlobalSpecType(f)
	m.GetLoadbalancerTypeFromGlobalSpecType(f)
	m.MaliciousUserMitigation = f.GetMaliciousUserMitigation()
	m.MoreOption = f.GetMoreOption()
	m.GetRateLimitChoiceFromGlobalSpecType(f)
	m.Routes = f.GetRoutes()
	m.GetServicePolicyChoiceFromGlobalSpecType(f)
	m.TrustedClients = f.GetTrustedClients()
	m.UserIdentification = f.GetUserIdentification()
	m.GetWafChoiceFromGlobalSpecType(f)
	m.WafExclusionRules = f.GetWafExclusionRules()
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	f.AddLocation = m1.AddLocation
	m1.SetAdvertiseChoiceToGlobalSpecType(f)
	f.BlockedClients = m1.BlockedClients
	m1.SetChallengeTypeToGlobalSpecType(f)
	f.CorsPolicy = m1.CorsPolicy
	f.DdosMitigationRules = m1.DdosMitigationRules
	f.DefaultRoutePools = m1.DefaultRoutePools
	f.Domains = m1.Domains
	m1.SetHashPolicyChoiceToGlobalSpecType(f)
	m1.SetLoadbalancerTypeToGlobalSpecType(f)
	f.MaliciousUserMitigation = m1.MaliciousUserMitigation
	f.MoreOption = m1.MoreOption
	m1.SetRateLimitChoiceToGlobalSpecType(f)
	f.Routes = m1.Routes
	m1.SetServicePolicyChoiceToGlobalSpecType(f)
	f.TrustedClients = m1.TrustedClients
	f.UserIdentification = m1.UserIdentification
	m1.SetWafChoiceToGlobalSpecType(f)
	f.WafExclusionRules = m1.WafExclusionRules
}

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package http_loadbalancer

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_route "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/route"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_views_common_security "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_security"
	ves_io_schema_views_common_waf "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_waf"
	ves_io_schema_views_origin_pool "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/origin_pool"
	ves_io_schema_virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
	ves_io_schema_virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AdvancedOptionsType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AdvancedOptionsType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AdvancedOptionsType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetRequestHeadersToAdd() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting AdvancedOptionsType.request_headers_to_add idx %v", idx)
		}
	}

	for idx, e := range m.GetResponseHeadersToAdd() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting AdvancedOptionsType.response_headers_to_add idx %v", idx)
		}
	}

	return nil
}

func (m *AdvancedOptionsType) DeepCopy() *AdvancedOptionsType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AdvancedOptionsType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AdvancedOptionsType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AdvancedOptionsType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AdvancedOptionsTypeValidator().Validate(ctx, m, opts...)
}

func (m *AdvancedOptionsType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetJwtDRefInfo()

}

func (m *AdvancedOptionsType) GetJwtDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetJwt()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("AdvancedOptionsType.jwt[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("jwt.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "jwt.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "jwt",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetJwtDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AdvancedOptionsType) GetJwtDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "jwt.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: jwt")
	}
	for i, vref := range m.GetJwt() {
		if vref == nil {
			return nil, fmt.Errorf("AdvancedOptionsType.jwt[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "jwt.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateAdvancedOptionsType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAdvancedOptionsType) RequestHeadersToAddValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for request_headers_to_add")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.HeaderManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for request_headers_to_add")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated request_headers_to_add")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items request_headers_to_add")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) RequestHeadersToRemoveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for request_headers_to_remove")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for request_headers_to_remove")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated request_headers_to_remove")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items request_headers_to_remove")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) ResponseHeadersToAddValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for response_headers_to_add")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.HeaderManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for response_headers_to_add")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated response_headers_to_add")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items response_headers_to_add")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) ResponseHeadersToRemoveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for response_headers_to_remove")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for response_headers_to_remove")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated response_headers_to_remove")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items response_headers_to_remove")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) MaxRequestHeaderSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for max_request_header_size")
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) CustomErrorsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapUint32KeyRules(rules)
	itemKeyFn, err := db.NewUint32ValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for custom_errors")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for custom_errors")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[uint32]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for custom_errors")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[uint32]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ uint32 ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map custom_errors")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items custom_errors")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) JwtValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for jwt")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for jwt")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated jwt")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items jwt")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) IdleTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for idle_timeout")
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) CookiesToModifyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for cookies_to_modify")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.CookieManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.CookieManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cookies_to_modify")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.CookieManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.CookieManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cookies_to_modify")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cookies_to_modify")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AdvancedOptionsType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AdvancedOptionsType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["buffer_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("buffer_policy"))
		if err := fv(ctx, m.GetBufferPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["compression_params"]; exists {

		vOpts := append(opts, db.WithValidateField("compression_params"))
		if err := fv(ctx, m.GetCompressionParams(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cookies_to_modify"]; exists {
		vOpts := append(opts, db.WithValidateField("cookies_to_modify"))
		if err := fv(ctx, m.GetCookiesToModify(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_errors"]; exists {
		vOpts := append(opts, db.WithValidateField("custom_errors"))
		if err := fv(ctx, m.GetCustomErrors(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disable_default_error_pages"]; exists {

		vOpts := append(opts, db.WithValidateField("disable_default_error_pages"))
		if err := fv(ctx, m.GetDisableDefaultErrorPages(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["idle_timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("idle_timeout"))
		if err := fv(ctx, m.GetIdleTimeout(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["javascript_info"]; exists {

		vOpts := append(opts, db.WithValidateField("javascript_info"))
		if err := fv(ctx, m.GetJavascriptInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["jwt"]; exists {
		vOpts := append(opts, db.WithValidateField("jwt"))
		if err := fv(ctx, m.GetJwt(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["max_request_header_size"]; exists {

		vOpts := append(opts, db.WithValidateField("max_request_header_size"))
		if err := fv(ctx, m.GetMaxRequestHeaderSize(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetPathNormalizeChoice().(type) {
	case *AdvancedOptionsType_EnablePathNormalize:
		if fv, exists := v.FldValidators["path_normalize_choice.enable_path_normalize"]; exists {
			val := m.GetPathNormalizeChoice().(*AdvancedOptionsType_EnablePathNormalize).EnablePathNormalize
			vOpts := append(opts,
				db.WithValidateField("path_normalize_choice"),
				db.WithValidateField("enable_path_normalize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AdvancedOptionsType_DisablePathNormalize:
		if fv, exists := v.FldValidators["path_normalize_choice.disable_path_normalize"]; exists {
			val := m.GetPathNormalizeChoice().(*AdvancedOptionsType_DisablePathNormalize).DisablePathNormalize
			vOpts := append(opts,
				db.WithValidateField("path_normalize_choice"),
				db.WithValidateField("disable_path_normalize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["request_headers_to_add"]; exists {
		vOpts := append(opts, db.WithValidateField("request_headers_to_add"))
		if err := fv(ctx, m.GetRequestHeadersToAdd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_headers_to_remove"]; exists {
		vOpts := append(opts, db.WithValidateField("request_headers_to_remove"))
		if err := fv(ctx, m.GetRequestHeadersToRemove(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_headers_to_add"]; exists {
		vOpts := append(opts, db.WithValidateField("response_headers_to_add"))
		if err := fv(ctx, m.GetResponseHeadersToAdd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_headers_to_remove"]; exists {
		vOpts := append(opts, db.WithValidateField("response_headers_to_remove"))
		if err := fv(ctx, m.GetResponseHeadersToRemove(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetStrictSniHostHeaderCheckChoice().(type) {
	case *AdvancedOptionsType_EnableStrictSniHostHeaderCheck:
		if fv, exists := v.FldValidators["strict_sni_host_header_check_choice.enable_strict_sni_host_header_check"]; exists {
			val := m.GetStrictSniHostHeaderCheckChoice().(*AdvancedOptionsType_EnableStrictSniHostHeaderCheck).EnableStrictSniHostHeaderCheck
			vOpts := append(opts,
				db.WithValidateField("strict_sni_host_header_check_choice"),
				db.WithValidateField("enable_strict_sni_host_header_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AdvancedOptionsType_AdditionalDomains:
		if fv, exists := v.FldValidators["strict_sni_host_header_check_choice.additional_domains"]; exists {
			val := m.GetStrictSniHostHeaderCheckChoice().(*AdvancedOptionsType_AdditionalDomains).AdditionalDomains
			vOpts := append(opts,
				db.WithValidateField("strict_sni_host_header_check_choice"),
				db.WithValidateField("additional_domains"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAdvancedOptionsTypeValidator = func() *ValidateAdvancedOptionsType {
	v := &ValidateAdvancedOptionsType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRequestHeadersToAdd := v.RequestHeadersToAddValidationRuleHandler
	rulesRequestHeadersToAdd := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRequestHeadersToAdd(rulesRequestHeadersToAdd)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.request_headers_to_add: %s", err)
		panic(errMsg)
	}
	v.FldValidators["request_headers_to_add"] = vFn

	vrhRequestHeadersToRemove := v.RequestHeadersToRemoveValidationRuleHandler
	rulesRequestHeadersToRemove := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.min_bytes": "1",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhRequestHeadersToRemove(rulesRequestHeadersToRemove)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.request_headers_to_remove: %s", err)
		panic(errMsg)
	}
	v.FldValidators["request_headers_to_remove"] = vFn

	vrhResponseHeadersToAdd := v.ResponseHeadersToAddValidationRuleHandler
	rulesResponseHeadersToAdd := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhResponseHeadersToAdd(rulesResponseHeadersToAdd)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.response_headers_to_add: %s", err)
		panic(errMsg)
	}
	v.FldValidators["response_headers_to_add"] = vFn

	vrhResponseHeadersToRemove := v.ResponseHeadersToRemoveValidationRuleHandler
	rulesResponseHeadersToRemove := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.min_bytes": "1",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhResponseHeadersToRemove(rulesResponseHeadersToRemove)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.response_headers_to_remove: %s", err)
		panic(errMsg)
	}
	v.FldValidators["response_headers_to_remove"] = vFn

	vrhMaxRequestHeaderSize := v.MaxRequestHeaderSizeValidationRuleHandler
	rulesMaxRequestHeaderSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "96",
	}
	vFn, err = vrhMaxRequestHeaderSize(rulesMaxRequestHeaderSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.max_request_header_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["max_request_header_size"] = vFn

	vrhCustomErrors := v.CustomErrorsValidationRuleHandler
	rulesCustomErrors := map[string]string{
		"ves.io.schema.rules.map.keys.uint32.ranges":    "3,4,5,300-599",
		"ves.io.schema.rules.map.max_pairs":             "16",
		"ves.io.schema.rules.map.values.string.max_len": "65536",
		"ves.io.schema.rules.map.values.string.uri_ref": "true",
	}
	vFn, err = vrhCustomErrors(rulesCustomErrors)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.custom_errors: %s", err)
		panic(errMsg)
	}
	v.FldValidators["custom_errors"] = vFn

	vrhJwt := v.JwtValidationRuleHandler
	rulesJwt := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhJwt(rulesJwt)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.jwt: %s", err)
		panic(errMsg)
	}
	v.FldValidators["jwt"] = vFn

	vrhIdleTimeout := v.IdleTimeoutValidationRuleHandler
	rulesIdleTimeout := map[string]string{
		"ves.io.schema.rules.uint32.lte": "3600000",
	}
	vFn, err = vrhIdleTimeout(rulesIdleTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.idle_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["idle_timeout"] = vFn

	vrhCookiesToModify := v.CookiesToModifyValidationRuleHandler
	rulesCookiesToModify := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.min_bytes": "1",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhCookiesToModify(rulesCookiesToModify)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.cookies_to_modify: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cookies_to_modify"] = vFn

	v.FldValidators["strict_sni_host_header_check_choice.additional_domains"] = ves_io_schema.DomainNameListValidator().Validate

	v.FldValidators["buffer_policy"] = ves_io_schema.BufferConfigTypeValidator().Validate

	v.FldValidators["compression_params"] = ves_io_schema_virtual_host.CompressionTypeValidator().Validate

	return v
}()

func AdvancedOptionsTypeValidator() db.Validator {
	return DefaultAdvancedOptionsTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *BodySectionMaskingOptions) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BodySectionMaskingOptions) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BodySectionMaskingOptions) DeepCopy() *BodySectionMaskingOptions {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BodySectionMaskingOptions{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BodySectionMaskingOptions) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BodySectionMaskingOptions) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BodySectionMaskingOptionsValidator().Validate(ctx, m, opts...)
}

type ValidateBodySectionMaskingOptions struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBodySectionMaskingOptions) FieldsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for fields")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for fields")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated fields")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items fields")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateBodySectionMaskingOptions) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BodySectionMaskingOptions)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BodySectionMaskingOptions got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["fields"]; exists {
		vOpts := append(opts, db.WithValidateField("fields"))
		if err := fv(ctx, m.GetFields(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBodySectionMaskingOptionsValidator = func() *ValidateBodySectionMaskingOptions {
	v := &ValidateBodySectionMaskingOptions{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFields := v.FieldsValidationRuleHandler
	rulesFields := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.json_path": "true",
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.min_bytes": "1",
		"ves.io.schema.rules.repeated.items.string.not_empty": "true",
		"ves.io.schema.rules.repeated.max_items":              "16",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhFields(rulesFields)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BodySectionMaskingOptions.fields: %s", err)
		panic(errMsg)
	}
	v.FldValidators["fields"] = vFn

	return v
}()

func BodySectionMaskingOptionsValidator() db.Validator {
	return DefaultBodySectionMaskingOptionsValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttps().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.https")
	}

	for idx, e := range m.GetRoutes() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting CreateSpecType.routes idx %v", idx)
		}
	}

	if err := m.GetMoreOption().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.more_option")
	}

	if err := m.GetDefaultPool().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.default_pool")
	}

	if err := m.GetJwtValidation().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.jwt_validation")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvertiseChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAdvertiseChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiDefinitionChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDefinitionChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiDiscoveryChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDiscoveryChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiProtectionRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiProtectionRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiRateLimitLegacyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiRateLimitLegacyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetBotDefenseChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetBotDefenseChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetChallengeTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetChallengeTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDefaultRoutePoolsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDefaultRoutePoolsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLoadbalancerTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLoadbalancerTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMaliciousUserMitigationDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMaliciousUserMitigationDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMlConfigChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMlConfigChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMoreOptionDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMoreOptionDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginPoolChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginServerSubsetRuleListDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginServerSubsetRuleListDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimitChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRateLimitChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRoutesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRoutesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSensitiveDataPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSensitiveDataPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServicePolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetServicePolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetUserIdChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetUserIdChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetWafChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetAdvertiseChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAdvertiseChoice() == nil {
		return nil, nil
	}
	switch m.GetAdvertiseChoice().(type) {
	case *CreateSpecType_AdvertiseOnPublic:

		drInfos, err := m.GetAdvertiseOnPublic().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAdvertiseOnPublic().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "advertise_on_public." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_AdvertiseCustom:

		drInfos, err := m.GetAdvertiseCustom().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAdvertiseCustom().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "advertise_custom." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_DoNotAdvertise:

		return nil, nil

	case *CreateSpecType_AdvertiseOnPublicDefaultVip:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetApiDefinitionChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDefinitionChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDefinitionChoice().(type) {
	case *CreateSpecType_ApiDefinitions:

		drInfos, err := m.GetApiDefinitions().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiDefinitions().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_definitions." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_ApiSpecification:

		drInfos, err := m.GetApiSpecification().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiSpecification().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_specification." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_DisableApiDefinition:

		return nil, nil

	case *CreateSpecType_ApiDefinition:

		vref := m.GetApiDefinition()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("api_definition.Object")
		dri := db.DRefInfo{
			RefdType:   "api_definition.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "api_definition",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetApiDiscoveryChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDiscoveryChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDiscoveryChoice().(type) {
	case *CreateSpecType_EnableApiDiscovery:

		drInfos, err := m.GetEnableApiDiscovery().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableApiDiscovery().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_api_discovery." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_DisableApiDiscovery:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetApiProtectionRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiProtectionRules() == nil {
		return nil, nil
	}

	drInfos, err := m.GetApiProtectionRules().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetApiProtectionRules().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "api_protection_rules." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetApiRateLimitLegacyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiRateLimitLegacy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetApiRateLimitLegacy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetApiRateLimitLegacy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "api_rate_limit_legacy." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetBotDefenseChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetBotDefenseChoice() == nil {
		return nil, nil
	}
	switch m.GetBotDefenseChoice().(type) {
	case *CreateSpecType_DisableBotDefense:

		return nil, nil

	case *CreateSpecType_BotDefense:

		return nil, nil

	case *CreateSpecType_BotDefenseAdvanced:

		drInfos, err := m.GetBotDefenseAdvanced().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetBotDefenseAdvanced().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "bot_defense_advanced." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetChallengeTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetChallengeType() == nil {
		return nil, nil
	}
	switch m.GetChallengeType().(type) {
	case *CreateSpecType_JsChallenge:

		return nil, nil

	case *CreateSpecType_CaptchaChallenge:

		return nil, nil

	case *CreateSpecType_NoChallenge:

		return nil, nil

	case *CreateSpecType_PolicyBasedChallenge:

		drInfos, err := m.GetPolicyBasedChallenge().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPolicyBasedChallenge().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "policy_based_challenge." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_EnableChallenge:

		drInfos, err := m.GetEnableChallenge().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableChallenge().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_challenge." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetDefaultRoutePoolsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDefaultRoutePools() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetDefaultRoutePools() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultRoutePools() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("default_route_pools[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetLoadbalancerTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLoadbalancerType() == nil {
		return nil, nil
	}
	switch m.GetLoadbalancerType().(type) {
	case *CreateSpecType_Http:

		return nil, nil

	case *CreateSpecType_Https:

		drInfos, err := m.GetHttps().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttps().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_HttpsAutoCert:

		drInfos, err := m.GetHttpsAutoCert().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpsAutoCert().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https_auto_cert." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *CreateSpecType) GetMaliciousUserMitigationDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("malicious_user_mitigation.Object")
	dri := db.DRefInfo{
		RefdType:   "malicious_user_mitigation.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "malicious_user_mitigation",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetMaliciousUserMitigationDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetMaliciousUserMitigationDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "malicious_user_mitigation.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: malicious_user_mitigation")
	}

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "malicious_user_mitigation.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetMlConfigChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMlConfigChoice() == nil {
		return nil, nil
	}
	switch m.GetMlConfigChoice().(type) {
	case *CreateSpecType_SingleLbApp:

		drInfos, err := m.GetSingleLbApp().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSingleLbApp().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "single_lb_app." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_MultiLbApp:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetMoreOptionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMoreOption() == nil {
		return nil, nil
	}

	drInfos, err := m.GetMoreOption().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetMoreOption().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "more_option." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetOriginPoolChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginPoolChoice() == nil {
		return nil, nil
	}
	switch m.GetOriginPoolChoice().(type) {
	case *CreateSpecType_DefaultPool:

		drInfos, err := m.GetDefaultPool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultPool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "default_pool." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_DefaultPoolList:

		drInfos, err := m.GetDefaultPoolList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultPoolList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "default_pool_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetOriginServerSubsetRuleListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginServerSubsetRuleList() == nil {
		return nil, nil
	}

	drInfos, err := m.GetOriginServerSubsetRuleList().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetOriginServerSubsetRuleList().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "origin_server_subset_rule_list." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetRateLimitChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRateLimitChoice() == nil {
		return nil, nil
	}
	switch m.GetRateLimitChoice().(type) {
	case *CreateSpecType_DisableRateLimit:

		return nil, nil

	case *CreateSpecType_RateLimit:

		drInfos, err := m.GetRateLimit().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRateLimit().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rate_limit." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_ApiRateLimit:

		drInfos, err := m.GetApiRateLimit().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiRateLimit().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_rate_limit." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetRoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRoutes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRoutes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetSensitiveDataPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSensitiveDataPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetSensitiveDataPolicyChoice().(type) {
	case *CreateSpecType_DefaultSensitiveDataPolicy:

		return nil, nil

	case *CreateSpecType_SensitiveDataPolicy:

		drInfos, err := m.GetSensitiveDataPolicy().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSensitiveDataPolicy().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sensitive_data_policy." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetServicePolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServicePolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetServicePolicyChoice().(type) {
	case *CreateSpecType_ServicePoliciesFromNamespace:

		return nil, nil

	case *CreateSpecType_NoServicePolicies:

		return nil, nil

	case *CreateSpecType_ActiveServicePolicies:

		drInfos, err := m.GetActiveServicePolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveServicePolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_service_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *CreateSpecType) GetUserIdChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetUserIdChoice().(type) {
	case *CreateSpecType_UserIdentification:

		vref := m.GetUserIdentification()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("user_identification.Object")
		dri := db.DRefInfo{
			RefdType:   "user_identification.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "user_identification",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *CreateSpecType_UserIdClientIp:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetUserIdChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetUserIdChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetUserIdChoice().(type) {
	case *CreateSpecType_UserIdentification:
		refdType, err := d.TypeForEntryKind("", "", "user_identification.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: user_identification")
		}

		vref := m.GetUserIdentification()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "user_identification.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *CreateSpecType_UserIdClientIp:

	}

	return entries, nil
}

func (m *CreateSpecType) GetWafChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetWafChoice().(type) {
	case *CreateSpecType_DisableWaf:

		return nil, nil

	case *CreateSpecType_AppFirewall:

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("app_firewall.Object")
		dri := db.DRefInfo{
			RefdType:   "app_firewall.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "app_firewall",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetWafChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetWafChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetWafChoice().(type) {
	case *CreateSpecType_DisableWaf:

	case *CreateSpecType_AppFirewall:
		refdType, err := d.TypeForEntryKind("", "", "app_firewall.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: app_firewall")
		}

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "app_firewall.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) AdvertiseChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for advertise_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ApiDefinitionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_definition_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ApiDiscoveryChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_discovery_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ChallengeTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_type")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) L7DdosAutoMitigationActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for l7_ddos_auto_mitigation_action")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) LoadbalancerTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for loadbalancer_type")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) MaliciousUserDetectionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for malicious_user_detection_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) RateLimitChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rate_limit_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) SensitiveDataPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for sensitive_data_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ServicePolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ThreatMeshChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for threat_mesh_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) TrustClientIpHeadersChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for trust_client_ip_headers_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) UserIdChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for user_id_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) WafChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for waf_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DefaultRoutePoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for default_route_pools")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_route_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_route_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_route_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RouteType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RouteTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RouteType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RouteType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) WafExclusionRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for waf_exclusion_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleWafExclusionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.SimpleWafExclusionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for waf_exclusion_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleWafExclusionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleWafExclusionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated waf_exclusion_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items waf_exclusion_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) BlockedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for blocked_clients")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views_common_waf.SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views_common_waf.SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for blocked_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views_common_waf.SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views_common_waf.SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated blocked_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items blocked_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) TrustedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for trusted_clients")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views_common_waf.SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views_common_waf.SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for trusted_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views_common_waf.SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views_common_waf.SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated trusted_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items trusted_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DdosMitigationRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ddos_mitigation_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views_common_security.DDoSMitigationRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views_common_security.DDoSMitigationRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ddos_mitigation_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views_common_security.DDoSMitigationRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views_common_security.DDoSMitigationRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ddos_mitigation_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ddos_mitigation_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DataGuardRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for data_guard_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleDataGuardRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.SimpleDataGuardRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for data_guard_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleDataGuardRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleDataGuardRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated data_guard_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items data_guard_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) GraphqlRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for graphql_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.GraphQLRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.GraphQLRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for graphql_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.GraphQLRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.GraphQLRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated graphql_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items graphql_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ProtectedCookiesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for protected_cookies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.CookieManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.CookieManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for protected_cookies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.CookieManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.CookieManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated protected_cookies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items protected_cookies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_location"]; exists {

		vOpts := append(opts, db.WithValidateField("add_location"))
		if err := fv(ctx, m.GetAddLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["advertise_choice"]; exists {
		val := m.GetAdvertiseChoice()
		vOpts := append(opts,
			db.WithValidateField("advertise_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdvertiseChoice().(type) {
	case *CreateSpecType_AdvertiseOnPublic:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public"]; exists {
			val := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublic).AdvertiseOnPublic
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AdvertiseCustom:
		if fv, exists := v.FldValidators["advertise_choice.advertise_custom"]; exists {
			val := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseCustom).AdvertiseCustom
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DoNotAdvertise:
		if fv, exists := v.FldValidators["advertise_choice.do_not_advertise"]; exists {
			val := m.GetAdvertiseChoice().(*CreateSpecType_DoNotAdvertise).DoNotAdvertise
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("do_not_advertise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AdvertiseOnPublicDefaultVip:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public_default_vip"]; exists {
			val := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublicDefaultVip).AdvertiseOnPublicDefaultVip
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public_default_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_definition_choice"]; exists {
		val := m.GetApiDefinitionChoice()
		vOpts := append(opts,
			db.WithValidateField("api_definition_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDefinitionChoice().(type) {
	case *CreateSpecType_ApiDefinitions:
		if fv, exists := v.FldValidators["api_definition_choice.api_definitions"]; exists {
			val := m.GetApiDefinitionChoice().(*CreateSpecType_ApiDefinitions).ApiDefinitions
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_definitions"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ApiSpecification:
		if fv, exists := v.FldValidators["api_definition_choice.api_specification"]; exists {
			val := m.GetApiDefinitionChoice().(*CreateSpecType_ApiSpecification).ApiSpecification
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_specification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DisableApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.disable_api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*CreateSpecType_DisableApiDefinition).DisableApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("disable_api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*CreateSpecType_ApiDefinition).ApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_discovery_choice"]; exists {
		val := m.GetApiDiscoveryChoice()
		vOpts := append(opts,
			db.WithValidateField("api_discovery_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDiscoveryChoice().(type) {
	case *CreateSpecType_EnableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.enable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*CreateSpecType_EnableApiDiscovery).EnableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("enable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DisableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.disable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*CreateSpecType_DisableApiDiscovery).DisableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("disable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_protection_rules"]; exists {

		vOpts := append(opts, db.WithValidateField("api_protection_rules"))
		if err := fv(ctx, m.GetApiProtectionRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_rate_limit_legacy"]; exists {

		vOpts := append(opts, db.WithValidateField("api_rate_limit_legacy"))
		if err := fv(ctx, m.GetApiRateLimitLegacy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("blocked_clients"))
		if err := fv(ctx, m.GetBlockedClients(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetBotDefenseChoice().(type) {
	case *CreateSpecType_DisableBotDefense:
		if fv, exists := v.FldValidators["bot_defense_choice.disable_bot_defense"]; exists {
			val := m.GetBotDefenseChoice().(*CreateSpecType_DisableBotDefense).DisableBotDefense
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("disable_bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_BotDefense:
		if fv, exists := v.FldValidators["bot_defense_choice.bot_defense"]; exists {
			val := m.GetBotDefenseChoice().(*CreateSpecType_BotDefense).BotDefense
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_BotDefenseAdvanced:
		if fv, exists := v.FldValidators["bot_defense_choice.bot_defense_advanced"]; exists {
			val := m.GetBotDefenseChoice().(*CreateSpecType_BotDefenseAdvanced).BotDefenseAdvanced
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("bot_defense_advanced"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["challenge_type"]; exists {
		val := m.GetChallengeType()
		vOpts := append(opts,
			db.WithValidateField("challenge_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChallengeType().(type) {
	case *CreateSpecType_JsChallenge:
		if fv, exists := v.FldValidators["challenge_type.js_challenge"]; exists {
			val := m.GetChallengeType().(*CreateSpecType_JsChallenge).JsChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_CaptchaChallenge:
		if fv, exists := v.FldValidators["challenge_type.captcha_challenge"]; exists {
			val := m.GetChallengeType().(*CreateSpecType_CaptchaChallenge).CaptchaChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("captcha_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NoChallenge:
		if fv, exists := v.FldValidators["challenge_type.no_challenge"]; exists {
			val := m.GetChallengeType().(*CreateSpecType_NoChallenge).NoChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("no_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_PolicyBasedChallenge:
		if fv, exists := v.FldValidators["challenge_type.policy_based_challenge"]; exists {
			val := m.GetChallengeType().(*CreateSpecType_PolicyBasedChallenge).PolicyBasedChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("policy_based_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EnableChallenge:
		if fv, exists := v.FldValidators["challenge_type.enable_challenge"]; exists {
			val := m.GetChallengeType().(*CreateSpecType_EnableChallenge).EnableChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("enable_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetClientSideDefenseChoice().(type) {
	case *CreateSpecType_DisableClientSideDefense:
		if fv, exists := v.FldValidators["client_side_defense_choice.disable_client_side_defense"]; exists {
			val := m.GetClientSideDefenseChoice().(*CreateSpecType_DisableClientSideDefense).DisableClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("client_side_defense_choice"),
				db.WithValidateField("disable_client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ClientSideDefense:
		if fv, exists := v.FldValidators["client_side_defense_choice.client_side_defense"]; exists {
			val := m.GetClientSideDefenseChoice().(*CreateSpecType_ClientSideDefense).ClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("client_side_defense_choice"),
				db.WithValidateField("client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cors_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("cors_policy"))
		if err := fv(ctx, m.GetCorsPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["csrf_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("csrf_policy"))
		if err := fv(ctx, m.GetCsrfPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["data_guard_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("data_guard_rules"))
		if err := fv(ctx, m.GetDataGuardRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ddos_mitigation_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("ddos_mitigation_rules"))
		if err := fv(ctx, m.GetDdosMitigationRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_route_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("default_route_pools"))
		if err := fv(ctx, m.GetDefaultRoutePools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["graphql_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("graphql_rules"))
		if err := fv(ctx, m.GetGraphqlRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *CreateSpecType_RoundRobin:
		if fv, exists := v.FldValidators["hash_policy_choice.round_robin"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_RoundRobin).RoundRobin
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("round_robin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_LeastActive:
		if fv, exists := v.FldValidators["hash_policy_choice.least_active"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_LeastActive).LeastActive
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("least_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Random:
		if fv, exists := v.FldValidators["hash_policy_choice.random"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_Random).Random
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("random"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SourceIpStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.source_ip_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_SourceIpStickiness).SourceIpStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("source_ip_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_CookieStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.cookie_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_CookieStickiness).CookieStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("cookie_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_RingHash:
		if fv, exists := v.FldValidators["hash_policy_choice.ring_hash"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_RingHash).RingHash
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("ring_hash"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetIpReputationChoice().(type) {
	case *CreateSpecType_DisableIpReputation:
		if fv, exists := v.FldValidators["ip_reputation_choice.disable_ip_reputation"]; exists {
			val := m.GetIpReputationChoice().(*CreateSpecType_DisableIpReputation).DisableIpReputation
			vOpts := append(opts,
				db.WithValidateField("ip_reputation_choice"),
				db.WithValidateField("disable_ip_reputation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EnableIpReputation:
		if fv, exists := v.FldValidators["ip_reputation_choice.enable_ip_reputation"]; exists {
			val := m.GetIpReputationChoice().(*CreateSpecType_EnableIpReputation).EnableIpReputation
			vOpts := append(opts,
				db.WithValidateField("ip_reputation_choice"),
				db.WithValidateField("enable_ip_reputation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["jwt_validation"]; exists {

		vOpts := append(opts, db.WithValidateField("jwt_validation"))
		if err := fv(ctx, m.GetJwtValidation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action"]; exists {
		val := m.GetL7DdosAutoMitigationAction()
		vOpts := append(opts,
			db.WithValidateField("l7_ddos_auto_mitigation_action"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetL7DdosAutoMitigationAction().(type) {
	case *CreateSpecType_L7DdosActionDefault:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_default"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*CreateSpecType_L7DdosActionDefault).L7DdosActionDefault
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_L7DdosActionBlock:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_block"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*CreateSpecType_L7DdosActionBlock).L7DdosActionBlock
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_block"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_L7DdosActionJsChallenge:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_js_challenge"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*CreateSpecType_L7DdosActionJsChallenge).L7DdosActionJsChallenge
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_L7DdosActionNone:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_none"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*CreateSpecType_L7DdosActionNone).L7DdosActionNone
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["loadbalancer_type"]; exists {
		val := m.GetLoadbalancerType()
		vOpts := append(opts,
			db.WithValidateField("loadbalancer_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLoadbalancerType().(type) {
	case *CreateSpecType_Http:
		if fv, exists := v.FldValidators["loadbalancer_type.http"]; exists {
			val := m.GetLoadbalancerType().(*CreateSpecType_Http).Http
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("http"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Https:
		if fv, exists := v.FldValidators["loadbalancer_type.https"]; exists {
			val := m.GetLoadbalancerType().(*CreateSpecType_Https).Https
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_HttpsAutoCert:
		if fv, exists := v.FldValidators["loadbalancer_type.https_auto_cert"]; exists {
			val := m.GetLoadbalancerType().(*CreateSpecType_HttpsAutoCert).HttpsAutoCert
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https_auto_cert"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_detection_choice"]; exists {
		val := m.GetMaliciousUserDetectionChoice()
		vOpts := append(opts,
			db.WithValidateField("malicious_user_detection_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMaliciousUserDetectionChoice().(type) {
	case *CreateSpecType_EnableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.enable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*CreateSpecType_EnableMaliciousUserDetection).EnableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("enable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DisableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.disable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*CreateSpecType_DisableMaliciousUserDetection).DisableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("disable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_mitigation"]; exists {

		vOpts := append(opts, db.WithValidateField("malicious_user_mitigation"))
		if err := fv(ctx, m.GetMaliciousUserMitigation(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetMlConfigChoice().(type) {
	case *CreateSpecType_SingleLbApp:
		if fv, exists := v.FldValidators["ml_config_choice.single_lb_app"]; exists {
			val := m.GetMlConfigChoice().(*CreateSpecType_SingleLbApp).SingleLbApp
			vOpts := append(opts,
				db.WithValidateField("ml_config_choice"),
				db.WithValidateField("single_lb_app"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_MultiLbApp:
		if fv, exists := v.FldValidators["ml_config_choice.multi_lb_app"]; exists {
			val := m.GetMlConfigChoice().(*CreateSpecType_MultiLbApp).MultiLbApp
			vOpts := append(opts,
				db.WithValidateField("ml_config_choice"),
				db.WithValidateField("multi_lb_app"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["more_option"]; exists {

		vOpts := append(opts, db.WithValidateField("more_option"))
		if err := fv(ctx, m.GetMoreOption(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetOriginPoolChoice().(type) {
	case *CreateSpecType_DefaultPool:
		if fv, exists := v.FldValidators["origin_pool_choice.default_pool"]; exists {
			val := m.GetOriginPoolChoice().(*CreateSpecType_DefaultPool).DefaultPool
			vOpts := append(opts,
				db.WithValidateField("origin_pool_choice"),
				db.WithValidateField("default_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DefaultPoolList:
		if fv, exists := v.FldValidators["origin_pool_choice.default_pool_list"]; exists {
			val := m.GetOriginPoolChoice().(*CreateSpecType_DefaultPoolList).DefaultPoolList
			vOpts := append(opts,
				db.WithValidateField("origin_pool_choice"),
				db.WithValidateField("default_pool_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["origin_server_subset_rule_list"]; exists {

		vOpts := append(opts, db.WithValidateField("origin_server_subset_rule_list"))
		if err := fv(ctx, m.GetOriginServerSubsetRuleList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protected_cookies"]; exists {
		vOpts := append(opts, db.WithValidateField("protected_cookies"))
		if err := fv(ctx, m.GetProtectedCookies(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limit_choice"]; exists {
		val := m.GetRateLimitChoice()
		vOpts := append(opts,
			db.WithValidateField("rate_limit_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRateLimitChoice().(type) {
	case *CreateSpecType_DisableRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.disable_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*CreateSpecType_DisableRateLimit).DisableRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("disable_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_RateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*CreateSpecType_RateLimit).RateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ApiRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.api_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*CreateSpecType_ApiRateLimit).ApiRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("api_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["routes"]; exists {
		vOpts := append(opts, db.WithValidateField("routes"))
		if err := fv(ctx, m.GetRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_disclosure_rules"]; exists {

		vOpts := append(opts, db.WithValidateField("sensitive_data_disclosure_rules"))
		if err := fv(ctx, m.GetSensitiveDataDisclosureRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_policy_choice"]; exists {
		val := m.GetSensitiveDataPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("sensitive_data_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSensitiveDataPolicyChoice().(type) {
	case *CreateSpecType_DefaultSensitiveDataPolicy:
		if fv, exists := v.FldValidators["sensitive_data_policy_choice.default_sensitive_data_policy"]; exists {
			val := m.GetSensitiveDataPolicyChoice().(*CreateSpecType_DefaultSensitiveDataPolicy).DefaultSensitiveDataPolicy
			vOpts := append(opts,
				db.WithValidateField("sensitive_data_policy_choice"),
				db.WithValidateField("default_sensitive_data_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SensitiveDataPolicy:
		if fv, exists := v.FldValidators["sensitive_data_policy_choice.sensitive_data_policy"]; exists {
			val := m.GetSensitiveDataPolicyChoice().(*CreateSpecType_SensitiveDataPolicy).SensitiveDataPolicy
			vOpts := append(opts,
				db.WithValidateField("sensitive_data_policy_choice"),
				db.WithValidateField("sensitive_data_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["service_policy_choice"]; exists {
		val := m.GetServicePolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("service_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServicePolicyChoice().(type) {
	case *CreateSpecType_ServicePoliciesFromNamespace:
		if fv, exists := v.FldValidators["service_policy_choice.service_policies_from_namespace"]; exists {
			val := m.GetServicePolicyChoice().(*CreateSpecType_ServicePoliciesFromNamespace).ServicePoliciesFromNamespace
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("service_policies_from_namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NoServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.no_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*CreateSpecType_NoServicePolicies).NoServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("no_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ActiveServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.active_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*CreateSpecType_ActiveServicePolicies).ActiveServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("active_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetSlowDdosMitigationChoice().(type) {
	case *CreateSpecType_SlowDdosMitigation:
		if fv, exists := v.FldValidators["slow_ddos_mitigation_choice.slow_ddos_mitigation"]; exists {
			val := m.GetSlowDdosMitigationChoice().(*CreateSpecType_SlowDdosMitigation).SlowDdosMitigation
			vOpts := append(opts,
				db.WithValidateField("slow_ddos_mitigation_choice"),
				db.WithValidateField("slow_ddos_mitigation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SystemDefaultTimeouts:
		if fv, exists := v.FldValidators["slow_ddos_mitigation_choice.system_default_timeouts"]; exists {
			val := m.GetSlowDdosMitigationChoice().(*CreateSpecType_SystemDefaultTimeouts).SystemDefaultTimeouts
			vOpts := append(opts,
				db.WithValidateField("slow_ddos_mitigation_choice"),
				db.WithValidateField("system_default_timeouts"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["threat_mesh_choice"]; exists {
		val := m.GetThreatMeshChoice()
		vOpts := append(opts,
			db.WithValidateField("threat_mesh_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetThreatMeshChoice().(type) {
	case *CreateSpecType_DisableThreatMesh:
		if fv, exists := v.FldValidators["threat_mesh_choice.disable_threat_mesh"]; exists {
			val := m.GetThreatMeshChoice().(*CreateSpecType_DisableThreatMesh).DisableThreatMesh
			vOpts := append(opts,
				db.WithValidateField("threat_mesh_choice"),
				db.WithValidateField("disable_threat_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EnableThreatMesh:
		if fv, exists := v.FldValidators["threat_mesh_choice.enable_threat_mesh"]; exists {
			val := m.GetThreatMeshChoice().(*CreateSpecType_EnableThreatMesh).EnableThreatMesh
			vOpts := append(opts,
				db.WithValidateField("threat_mesh_choice"),
				db.WithValidateField("enable_threat_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["trust_client_ip_headers_choice"]; exists {
		val := m.GetTrustClientIpHeadersChoice()
		vOpts := append(opts,
			db.WithValidateField("trust_client_ip_headers_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTrustClientIpHeadersChoice().(type) {
	case *CreateSpecType_DisableTrustClientIpHeaders:
		if fv, exists := v.FldValidators["trust_client_ip_headers_choice.disable_trust_client_ip_headers"]; exists {
			val := m.GetTrustClientIpHeadersChoice().(*CreateSpecType_DisableTrustClientIpHeaders).DisableTrustClientIpHeaders
			vOpts := append(opts,
				db.WithValidateField("trust_client_ip_headers_choice"),
				db.WithValidateField("disable_trust_client_ip_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EnableTrustClientIpHeaders:
		if fv, exists := v.FldValidators["trust_client_ip_headers_choice.enable_trust_client_ip_headers"]; exists {
			val := m.GetTrustClientIpHeadersChoice().(*CreateSpecType_EnableTrustClientIpHeaders).EnableTrustClientIpHeaders
			vOpts := append(opts,
				db.WithValidateField("trust_client_ip_headers_choice"),
				db.WithValidateField("enable_trust_client_ip_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["trusted_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("trusted_clients"))
		if err := fv(ctx, m.GetTrustedClients(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_id_choice"]; exists {
		val := m.GetUserIdChoice()
		vOpts := append(opts,
			db.WithValidateField("user_id_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetUserIdChoice().(type) {
	case *CreateSpecType_UserIdentification:
		if fv, exists := v.FldValidators["user_id_choice.user_identification"]; exists {
			val := m.GetUserIdChoice().(*CreateSpecType_UserIdentification).UserIdentification
			vOpts := append(opts,
				db.WithValidateField("user_id_choice"),
				db.WithValidateField("user_identification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_UserIdClientIp:
		if fv, exists := v.FldValidators["user_id_choice.user_id_client_ip"]; exists {
			val := m.GetUserIdChoice().(*CreateSpecType_UserIdClientIp).UserIdClientIp
			vOpts := append(opts,
				db.WithValidateField("user_id_choice"),
				db.WithValidateField("user_id_client_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_choice"]; exists {
		val := m.GetWafChoice()
		vOpts := append(opts,
			db.WithValidateField("waf_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWafChoice().(type) {
	case *CreateSpecType_DisableWaf:
		if fv, exists := v.FldValidators["waf_choice.disable_waf"]; exists {
			val := m.GetWafChoice().(*CreateSpecType_DisableWaf).DisableWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("disable_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AppFirewall:
		if fv, exists := v.FldValidators["waf_choice.app_firewall"]; exists {
			val := m.GetWafChoice().(*CreateSpecType_AppFirewall).AppFirewall
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("app_firewall"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_exclusion_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("waf_exclusion_rules"))
		if err := fv(ctx, m.GetWafExclusionRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdvertiseChoice := v.AdvertiseChoiceValidationRuleHandler
	rulesAdvertiseChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdvertiseChoice(rulesAdvertiseChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.advertise_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["advertise_choice"] = vFn

	vrhApiDefinitionChoice := v.ApiDefinitionChoiceValidationRuleHandler
	rulesApiDefinitionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDefinitionChoice(rulesApiDefinitionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.api_definition_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_definition_choice"] = vFn

	vrhApiDiscoveryChoice := v.ApiDiscoveryChoiceValidationRuleHandler
	rulesApiDiscoveryChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDiscoveryChoice(rulesApiDiscoveryChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.api_discovery_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_discovery_choice"] = vFn

	vrhChallengeType := v.ChallengeTypeValidationRuleHandler
	rulesChallengeType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChallengeType(rulesChallengeType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.challenge_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_type"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhL7DdosAutoMitigationAction := v.L7DdosAutoMitigationActionValidationRuleHandler
	rulesL7DdosAutoMitigationAction := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhL7DdosAutoMitigationAction(rulesL7DdosAutoMitigationAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.l7_ddos_auto_mitigation_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["l7_ddos_auto_mitigation_action"] = vFn

	vrhLoadbalancerType := v.LoadbalancerTypeValidationRuleHandler
	rulesLoadbalancerType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLoadbalancerType(rulesLoadbalancerType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.loadbalancer_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_type"] = vFn

	vrhMaliciousUserDetectionChoice := v.MaliciousUserDetectionChoiceValidationRuleHandler
	rulesMaliciousUserDetectionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMaliciousUserDetectionChoice(rulesMaliciousUserDetectionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.malicious_user_detection_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["malicious_user_detection_choice"] = vFn

	vrhRateLimitChoice := v.RateLimitChoiceValidationRuleHandler
	rulesRateLimitChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRateLimitChoice(rulesRateLimitChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.rate_limit_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limit_choice"] = vFn

	vrhSensitiveDataPolicyChoice := v.SensitiveDataPolicyChoiceValidationRuleHandler
	rulesSensitiveDataPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSensitiveDataPolicyChoice(rulesSensitiveDataPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.sensitive_data_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sensitive_data_policy_choice"] = vFn

	vrhServicePolicyChoice := v.ServicePolicyChoiceValidationRuleHandler
	rulesServicePolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServicePolicyChoice(rulesServicePolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.service_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_policy_choice"] = vFn

	vrhThreatMeshChoice := v.ThreatMeshChoiceValidationRuleHandler
	rulesThreatMeshChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhThreatMeshChoice(rulesThreatMeshChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.threat_mesh_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["threat_mesh_choice"] = vFn

	vrhTrustClientIpHeadersChoice := v.TrustClientIpHeadersChoiceValidationRuleHandler
	rulesTrustClientIpHeadersChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTrustClientIpHeadersChoice(rulesTrustClientIpHeadersChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.trust_client_ip_headers_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trust_client_ip_headers_choice"] = vFn

	vrhUserIdChoice := v.UserIdChoiceValidationRuleHandler
	rulesUserIdChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhUserIdChoice(rulesUserIdChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.user_id_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user_id_choice"] = vFn

	vrhWafChoice := v.WafChoiceValidationRuleHandler
	rulesWafChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWafChoice(rulesWafChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.waf_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhDefaultRoutePools := v.DefaultRoutePoolsValidationRuleHandler
	rulesDefaultRoutePools := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDefaultRoutePools(rulesDefaultRoutePools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.default_route_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_route_pools"] = vFn

	vrhRoutes := v.RoutesValidationRuleHandler
	rulesRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRoutes(rulesRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routes"] = vFn

	vrhWafExclusionRules := v.WafExclusionRulesValidationRuleHandler
	rulesWafExclusionRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhWafExclusionRules(rulesWafExclusionRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.waf_exclusion_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_exclusion_rules"] = vFn

	vrhBlockedClients := v.BlockedClientsValidationRuleHandler
	rulesBlockedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhBlockedClients(rulesBlockedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.blocked_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_clients"] = vFn

	vrhTrustedClients := v.TrustedClientsValidationRuleHandler
	rulesTrustedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhTrustedClients(rulesTrustedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.trusted_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trusted_clients"] = vFn

	vrhDdosMitigationRules := v.DdosMitigationRulesValidationRuleHandler
	rulesDdosMitigationRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDdosMitigationRules(rulesDdosMitigationRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.ddos_mitigation_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ddos_mitigation_rules"] = vFn

	vrhDataGuardRules := v.DataGuardRulesValidationRuleHandler
	rulesDataGuardRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDataGuardRules(rulesDataGuardRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.data_guard_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["data_guard_rules"] = vFn

	vrhGraphqlRules := v.GraphqlRulesValidationRuleHandler
	rulesGraphqlRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhGraphqlRules(rulesGraphqlRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.graphql_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["graphql_rules"] = vFn

	vrhProtectedCookies := v.ProtectedCookiesValidationRuleHandler
	rulesProtectedCookies := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhProtectedCookies(rulesProtectedCookies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.protected_cookies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protected_cookies"] = vFn

	v.FldValidators["advertise_choice.advertise_on_public"] = ves_io_schema_views.AdvertisePublicValidator().Validate
	v.FldValidators["advertise_choice.advertise_custom"] = ves_io_schema_views.AdvertiseCustomValidator().Validate

	v.FldValidators["api_definition_choice.api_definitions"] = ves_io_schema_views_common_waf.ApiDefinitionListValidator().Validate
	v.FldValidators["api_definition_choice.api_specification"] = ves_io_schema_views_common_waf.APISpecificationSettingsValidator().Validate
	v.FldValidators["api_definition_choice.api_definition"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_discovery_choice.enable_api_discovery"] = ves_io_schema_views_common_waf.ApiDiscoverySettingValidator().Validate

	v.FldValidators["bot_defense_choice.bot_defense"] = ves_io_schema_views_common_security.ShapeBotDefenseTypeValidator().Validate
	v.FldValidators["bot_defense_choice.bot_defense_advanced"] = ves_io_schema_views_common_security.BotDefenseAdvancedTypeValidator().Validate

	v.FldValidators["challenge_type.js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.captcha_challenge"] = ves_io_schema_virtual_host.CaptchaChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.policy_based_challenge"] = ves_io_schema_views_common_waf.PolicyBasedChallengeValidator().Validate
	v.FldValidators["challenge_type.enable_challenge"] = ves_io_schema_views_common_waf.EnableChallengeValidator().Validate

	v.FldValidators["client_side_defense_choice.client_side_defense"] = ves_io_schema_views_common_security.ClientSideDefenseTypeValidator().Validate

	v.FldValidators["hash_policy_choice.cookie_stickiness"] = ves_io_schema_route.CookieForHashingValidator().Validate
	v.FldValidators["hash_policy_choice.ring_hash"] = HashPolicyListTypeValidator().Validate

	v.FldValidators["ip_reputation_choice.enable_ip_reputation"] = ves_io_schema_views_common_waf.IPThreatCategoryListTypeValidator().Validate

	v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate

	v.FldValidators["loadbalancer_type.http"] = ProxyTypeHttpValidator().Validate
	v.FldValidators["loadbalancer_type.https"] = ProxyTypeHttpsValidator().Validate
	v.FldValidators["loadbalancer_type.https_auto_cert"] = ProxyTypeHttpsAutoCertsValidator().Validate

	v.FldValidators["ml_config_choice.single_lb_app"] = SingleLoadBalancerAppSettingValidator().Validate

	v.FldValidators["origin_pool_choice.default_pool"] = ves_io_schema_views_origin_pool.GlobalSpecTypeValidator().Validate
	v.FldValidators["origin_pool_choice.default_pool_list"] = ves_io_schema_views.OriginPoolListTypeValidator().Validate

	v.FldValidators["rate_limit_choice.rate_limit"] = ves_io_schema_views_common_waf.RateLimitConfigTypeValidator().Validate
	v.FldValidators["rate_limit_choice.api_rate_limit"] = ves_io_schema_views_common_waf.APIRateLimitValidator().Validate

	v.FldValidators["sensitive_data_policy_choice.sensitive_data_policy"] = ves_io_schema_views_common_security.SensitiveDataPolicySettingsValidator().Validate

	v.FldValidators["service_policy_choice.active_service_policies"] = ves_io_schema_views_common_waf.ServicePolicyListValidator().Validate

	v.FldValidators["slow_ddos_mitigation_choice.slow_ddos_mitigation"] = ves_io_schema_virtual_host.SlowDDoSMitigationValidator().Validate

	v.FldValidators["trust_client_ip_headers_choice.enable_trust_client_ip_headers"] = ves_io_schema_virtual_host.ClientIPHeadersValidator().Validate

	v.FldValidators["user_id_choice.user_identification"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["waf_choice.app_firewall"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cors_policy"] = ves_io_schema.CorsPolicyValidator().Validate

	v.FldValidators["more_option"] = AdvancedOptionsTypeValidator().Validate

	v.FldValidators["malicious_user_mitigation"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_rate_limit_legacy"] = ves_io_schema_views_common_waf.APIRateLimitLegacyValidator().Validate

	v.FldValidators["api_protection_rules"] = ves_io_schema_views_common_waf.APIProtectionRulesValidator().Validate

	v.FldValidators["csrf_policy"] = ves_io_schema.CsrfPolicyValidator().Validate

	v.FldValidators["jwt_validation"] = ves_io_schema_views_common_waf.JWTValidationValidator().Validate

	v.FldValidators["origin_server_subset_rule_list"] = OriginServerSubsetRuleListTypeValidator().Validate

	v.FldValidators["sensitive_data_disclosure_rules"] = SensitiveDataDisclosureRulesValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttps().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.https")
	}

	for idx, e := range m.GetRoutes() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting GetSpecType.routes idx %v", idx)
		}
	}

	if err := m.GetMoreOption().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.more_option")
	}

	if err := m.GetDefaultPool().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.default_pool")
	}

	if err := m.GetJwtValidation().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.jwt_validation")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvertiseChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAdvertiseChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiDefinitionChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDefinitionChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiDiscoveryChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDiscoveryChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiProtectionRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiProtectionRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiRateLimitLegacyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiRateLimitLegacyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetBotDefenseChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetBotDefenseChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetChallengeTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetChallengeTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDefaultRoutePoolsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDefaultRoutePoolsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLoadbalancerTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLoadbalancerTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMaliciousUserMitigationDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMaliciousUserMitigationDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMlConfigChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMlConfigChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMoreOptionDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMoreOptionDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginPoolChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginServerSubsetRuleListDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginServerSubsetRuleListDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimitChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRateLimitChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRoutesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRoutesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSensitiveDataPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSensitiveDataPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServicePolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetServicePolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetUserIdChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetUserIdChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetWafChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetAdvertiseChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAdvertiseChoice() == nil {
		return nil, nil
	}
	switch m.GetAdvertiseChoice().(type) {
	case *GetSpecType_AdvertiseOnPublic:

		drInfos, err := m.GetAdvertiseOnPublic().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAdvertiseOnPublic().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "advertise_on_public." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_AdvertiseCustom:

		drInfos, err := m.GetAdvertiseCustom().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAdvertiseCustom().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "advertise_custom." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_DoNotAdvertise:

		return nil, nil

	case *GetSpecType_AdvertiseOnPublicDefaultVip:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetApiDefinitionChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDefinitionChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDefinitionChoice().(type) {
	case *GetSpecType_ApiDefinitions:

		drInfos, err := m.GetApiDefinitions().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiDefinitions().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_definitions." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_ApiSpecification:

		drInfos, err := m.GetApiSpecification().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiSpecification().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_specification." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_DisableApiDefinition:

		return nil, nil

	case *GetSpecType_ApiDefinition:

		vref := m.GetApiDefinition()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("api_definition.Object")
		dri := db.DRefInfo{
			RefdType:   "api_definition.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "api_definition",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetApiDiscoveryChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDiscoveryChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDiscoveryChoice().(type) {
	case *GetSpecType_EnableApiDiscovery:

		drInfos, err := m.GetEnableApiDiscovery().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableApiDiscovery().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_api_discovery." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_DisableApiDiscovery:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetApiProtectionRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiProtectionRules() == nil {
		return nil, nil
	}

	drInfos, err := m.GetApiProtectionRules().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetApiProtectionRules().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "api_protection_rules." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetApiRateLimitLegacyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiRateLimitLegacy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetApiRateLimitLegacy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetApiRateLimitLegacy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "api_rate_limit_legacy." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetBotDefenseChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetBotDefenseChoice() == nil {
		return nil, nil
	}
	switch m.GetBotDefenseChoice().(type) {
	case *GetSpecType_DisableBotDefense:

		return nil, nil

	case *GetSpecType_BotDefense:

		return nil, nil

	case *GetSpecType_BotDefenseAdvanced:

		drInfos, err := m.GetBotDefenseAdvanced().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetBotDefenseAdvanced().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "bot_defense_advanced." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetChallengeTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetChallengeType() == nil {
		return nil, nil
	}
	switch m.GetChallengeType().(type) {
	case *GetSpecType_JsChallenge:

		return nil, nil

	case *GetSpecType_CaptchaChallenge:

		return nil, nil

	case *GetSpecType_NoChallenge:

		return nil, nil

	case *GetSpecType_PolicyBasedChallenge:

		drInfos, err := m.GetPolicyBasedChallenge().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPolicyBasedChallenge().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "policy_based_challenge." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_EnableChallenge:

		drInfos, err := m.GetEnableChallenge().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableChallenge().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_challenge." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetDefaultRoutePoolsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDefaultRoutePools() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetDefaultRoutePools() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultRoutePools() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("default_route_pools[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetLoadbalancerTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLoadbalancerType() == nil {
		return nil, nil
	}
	switch m.GetLoadbalancerType().(type) {
	case *GetSpecType_Http:

		return nil, nil

	case *GetSpecType_Https:

		drInfos, err := m.GetHttps().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttps().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_HttpsAutoCert:

		drInfos, err := m.GetHttpsAutoCert().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpsAutoCert().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https_auto_cert." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GetSpecType) GetMaliciousUserMitigationDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("malicious_user_mitigation.Object")
	dri := db.DRefInfo{
		RefdType:   "malicious_user_mitigation.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "malicious_user_mitigation",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetMaliciousUserMitigationDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetMaliciousUserMitigationDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "malicious_user_mitigation.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: malicious_user_mitigation")
	}

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "malicious_user_mitigation.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetMlConfigChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMlConfigChoice() == nil {
		return nil, nil
	}
	switch m.GetMlConfigChoice().(type) {
	case *GetSpecType_SingleLbApp:

		drInfos, err := m.GetSingleLbApp().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSingleLbApp().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "single_lb_app." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_MultiLbApp:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetMoreOptionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMoreOption() == nil {
		return nil, nil
	}

	drInfos, err := m.GetMoreOption().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetMoreOption().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "more_option." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetOriginPoolChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginPoolChoice() == nil {
		return nil, nil
	}
	switch m.GetOriginPoolChoice().(type) {
	case *GetSpecType_DefaultPool:

		drInfos, err := m.GetDefaultPool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultPool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "default_pool." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_DefaultPoolList:

		drInfos, err := m.GetDefaultPoolList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultPoolList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "default_pool_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetOriginServerSubsetRuleListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginServerSubsetRuleList() == nil {
		return nil, nil
	}

	drInfos, err := m.GetOriginServerSubsetRuleList().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetOriginServerSubsetRuleList().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "origin_server_subset_rule_list." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetRateLimitChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRateLimitChoice() == nil {
		return nil, nil
	}
	switch m.GetRateLimitChoice().(type) {
	case *GetSpecType_DisableRateLimit:

		return nil, nil

	case *GetSpecType_RateLimit:

		drInfos, err := m.GetRateLimit().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRateLimit().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rate_limit." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_ApiRateLimit:

		drInfos, err := m.GetApiRateLimit().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiRateLimit().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_rate_limit." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetRoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRoutes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRoutes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetSensitiveDataPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSensitiveDataPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetSensitiveDataPolicyChoice().(type) {
	case *GetSpecType_DefaultSensitiveDataPolicy:

		return nil, nil

	case *GetSpecType_SensitiveDataPolicy:

		drInfos, err := m.GetSensitiveDataPolicy().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSensitiveDataPolicy().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sensitive_data_policy." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetServicePolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServicePolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetServicePolicyChoice().(type) {
	case *GetSpecType_ServicePoliciesFromNamespace:

		return nil, nil

	case *GetSpecType_NoServicePolicies:

		return nil, nil

	case *GetSpecType_ActiveServicePolicies:

		drInfos, err := m.GetActiveServicePolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveServicePolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_service_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GetSpecType) GetUserIdChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetUserIdChoice().(type) {
	case *GetSpecType_UserIdentification:

		vref := m.GetUserIdentification()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("user_identification.Object")
		dri := db.DRefInfo{
			RefdType:   "user_identification.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "user_identification",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *GetSpecType_UserIdClientIp:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetUserIdChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetUserIdChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetUserIdChoice().(type) {
	case *GetSpecType_UserIdentification:
		refdType, err := d.TypeForEntryKind("", "", "user_identification.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: user_identification")
		}

		vref := m.GetUserIdentification()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "user_identification.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GetSpecType_UserIdClientIp:

	}

	return entries, nil
}

func (m *GetSpecType) GetWafChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetWafChoice().(type) {
	case *GetSpecType_DisableWaf:

		return nil, nil

	case *GetSpecType_AppFirewall:

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("app_firewall.Object")
		dri := db.DRefInfo{
			RefdType:   "app_firewall.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "app_firewall",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetWafChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetWafChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetWafChoice().(type) {
	case *GetSpecType_DisableWaf:

	case *GetSpecType_AppFirewall:
		refdType, err := d.TypeForEntryKind("", "", "app_firewall.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: app_firewall")
		}

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "app_firewall.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) AdvertiseChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for advertise_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ApiDefinitionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_definition_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ApiDiscoveryChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_discovery_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ChallengeTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_type")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) L7DdosAutoMitigationActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for l7_ddos_auto_mitigation_action")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) LoadbalancerTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for loadbalancer_type")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) MaliciousUserDetectionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for malicious_user_detection_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) RateLimitChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rate_limit_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) SensitiveDataPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for sensitive_data_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ServicePolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ThreatMeshChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for threat_mesh_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) TrustClientIpHeadersChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for trust_client_ip_headers_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) UserIdChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for user_id_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) WafChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for waf_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DefaultRoutePoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for default_route_pools")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_route_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_route_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_route_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RouteType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RouteTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RouteType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RouteType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) WafExclusionRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for waf_exclusion_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleWafExclusionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.SimpleWafExclusionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for waf_exclusion_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleWafExclusionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleWafExclusionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated waf_exclusion_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items waf_exclusion_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) BlockedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for blocked_clients")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views_common_waf.SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views_common_waf.SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for blocked_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views_common_waf.SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views_common_waf.SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated blocked_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items blocked_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) TrustedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for trusted_clients")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views_common_waf.SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views_common_waf.SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for trusted_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views_common_waf.SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views_common_waf.SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated trusted_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items trusted_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DdosMitigationRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ddos_mitigation_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views_common_security.DDoSMitigationRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views_common_security.DDoSMitigationRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ddos_mitigation_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views_common_security.DDoSMitigationRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views_common_security.DDoSMitigationRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ddos_mitigation_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ddos_mitigation_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DataGuardRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for data_guard_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleDataGuardRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.SimpleDataGuardRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for data_guard_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleDataGuardRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleDataGuardRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated data_guard_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items data_guard_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) GraphqlRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for graphql_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.GraphQLRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.GraphQLRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for graphql_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.GraphQLRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.GraphQLRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated graphql_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items graphql_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) ProtectedCookiesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for protected_cookies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.CookieManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.CookieManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for protected_cookies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.CookieManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.CookieManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated protected_cookies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items protected_cookies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_location"]; exists {

		vOpts := append(opts, db.WithValidateField("add_location"))
		if err := fv(ctx, m.GetAddLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["advertise_choice"]; exists {
		val := m.GetAdvertiseChoice()
		vOpts := append(opts,
			db.WithValidateField("advertise_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdvertiseChoice().(type) {
	case *GetSpecType_AdvertiseOnPublic:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public"]; exists {
			val := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublic).AdvertiseOnPublic
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AdvertiseCustom:
		if fv, exists := v.FldValidators["advertise_choice.advertise_custom"]; exists {
			val := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseCustom).AdvertiseCustom
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DoNotAdvertise:
		if fv, exists := v.FldValidators["advertise_choice.do_not_advertise"]; exists {
			val := m.GetAdvertiseChoice().(*GetSpecType_DoNotAdvertise).DoNotAdvertise
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("do_not_advertise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AdvertiseOnPublicDefaultVip:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public_default_vip"]; exists {
			val := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublicDefaultVip).AdvertiseOnPublicDefaultVip
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public_default_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_definition_choice"]; exists {
		val := m.GetApiDefinitionChoice()
		vOpts := append(opts,
			db.WithValidateField("api_definition_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDefinitionChoice().(type) {
	case *GetSpecType_ApiDefinitions:
		if fv, exists := v.FldValidators["api_definition_choice.api_definitions"]; exists {
			val := m.GetApiDefinitionChoice().(*GetSpecType_ApiDefinitions).ApiDefinitions
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_definitions"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ApiSpecification:
		if fv, exists := v.FldValidators["api_definition_choice.api_specification"]; exists {
			val := m.GetApiDefinitionChoice().(*GetSpecType_ApiSpecification).ApiSpecification
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_specification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DisableApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.disable_api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*GetSpecType_DisableApiDefinition).DisableApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("disable_api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*GetSpecType_ApiDefinition).ApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_discovery_choice"]; exists {
		val := m.GetApiDiscoveryChoice()
		vOpts := append(opts,
			db.WithValidateField("api_discovery_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDiscoveryChoice().(type) {
	case *GetSpecType_EnableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.enable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*GetSpecType_EnableApiDiscovery).EnableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("enable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DisableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.disable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*GetSpecType_DisableApiDiscovery).DisableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("disable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_protection_rules"]; exists {

		vOpts := append(opts, db.WithValidateField("api_protection_rules"))
		if err := fv(ctx, m.GetApiProtectionRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_rate_limit_legacy"]; exists {

		vOpts := append(opts, db.WithValidateField("api_rate_limit_legacy"))
		if err := fv(ctx, m.GetApiRateLimitLegacy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["auto_cert_info"]; exists {

		vOpts := append(opts, db.WithValidateField("auto_cert_info"))
		if err := fv(ctx, m.GetAutoCertInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("blocked_clients"))
		if err := fv(ctx, m.GetBlockedClients(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetBotDefenseChoice().(type) {
	case *GetSpecType_DisableBotDefense:
		if fv, exists := v.FldValidators["bot_defense_choice.disable_bot_defense"]; exists {
			val := m.GetBotDefenseChoice().(*GetSpecType_DisableBotDefense).DisableBotDefense
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("disable_bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_BotDefense:
		if fv, exists := v.FldValidators["bot_defense_choice.bot_defense"]; exists {
			val := m.GetBotDefenseChoice().(*GetSpecType_BotDefense).BotDefense
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_BotDefenseAdvanced:
		if fv, exists := v.FldValidators["bot_defense_choice.bot_defense_advanced"]; exists {
			val := m.GetBotDefenseChoice().(*GetSpecType_BotDefenseAdvanced).BotDefenseAdvanced
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("bot_defense_advanced"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cert_state"]; exists {

		vOpts := append(opts, db.WithValidateField("cert_state"))
		if err := fv(ctx, m.GetCertState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["challenge_type"]; exists {
		val := m.GetChallengeType()
		vOpts := append(opts,
			db.WithValidateField("challenge_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChallengeType().(type) {
	case *GetSpecType_JsChallenge:
		if fv, exists := v.FldValidators["challenge_type.js_challenge"]; exists {
			val := m.GetChallengeType().(*GetSpecType_JsChallenge).JsChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_CaptchaChallenge:
		if fv, exists := v.FldValidators["challenge_type.captcha_challenge"]; exists {
			val := m.GetChallengeType().(*GetSpecType_CaptchaChallenge).CaptchaChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("captcha_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NoChallenge:
		if fv, exists := v.FldValidators["challenge_type.no_challenge"]; exists {
			val := m.GetChallengeType().(*GetSpecType_NoChallenge).NoChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("no_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_PolicyBasedChallenge:
		if fv, exists := v.FldValidators["challenge_type.policy_based_challenge"]; exists {
			val := m.GetChallengeType().(*GetSpecType_PolicyBasedChallenge).PolicyBasedChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("policy_based_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EnableChallenge:
		if fv, exists := v.FldValidators["challenge_type.enable_challenge"]; exists {
			val := m.GetChallengeType().(*GetSpecType_EnableChallenge).EnableChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("enable_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetClientSideDefenseChoice().(type) {
	case *GetSpecType_DisableClientSideDefense:
		if fv, exists := v.FldValidators["client_side_defense_choice.disable_client_side_defense"]; exists {
			val := m.GetClientSideDefenseChoice().(*GetSpecType_DisableClientSideDefense).DisableClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("client_side_defense_choice"),
				db.WithValidateField("disable_client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ClientSideDefense:
		if fv, exists := v.FldValidators["client_side_defense_choice.client_side_defense"]; exists {
			val := m.GetClientSideDefenseChoice().(*GetSpecType_ClientSideDefense).ClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("client_side_defense_choice"),
				db.WithValidateField("client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cors_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("cors_policy"))
		if err := fv(ctx, m.GetCorsPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["csrf_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("csrf_policy"))
		if err := fv(ctx, m.GetCsrfPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["data_guard_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("data_guard_rules"))
		if err := fv(ctx, m.GetDataGuardRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ddos_mitigation_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("ddos_mitigation_rules"))
		if err := fv(ctx, m.GetDdosMitigationRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_route_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("default_route_pools"))
		if err := fv(ctx, m.GetDefaultRoutePools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dns_info"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_info"))
		for idx, item := range m.GetDnsInfo() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["downstream_tls_certificate_expiration_timestamps"]; exists {

		vOpts := append(opts, db.WithValidateField("downstream_tls_certificate_expiration_timestamps"))
		for idx, item := range m.GetDownstreamTlsCertificateExpirationTimestamps() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["graphql_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("graphql_rules"))
		if err := fv(ctx, m.GetGraphqlRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *GetSpecType_RoundRobin:
		if fv, exists := v.FldValidators["hash_policy_choice.round_robin"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_RoundRobin).RoundRobin
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("round_robin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LeastActive:
		if fv, exists := v.FldValidators["hash_policy_choice.least_active"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_LeastActive).LeastActive
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("least_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Random:
		if fv, exists := v.FldValidators["hash_policy_choice.random"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_Random).Random
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("random"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SourceIpStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.source_ip_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_SourceIpStickiness).SourceIpStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("source_ip_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_CookieStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.cookie_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_CookieStickiness).CookieStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("cookie_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_RingHash:
		if fv, exists := v.FldValidators["hash_policy_choice.ring_hash"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_RingHash).RingHash
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("ring_hash"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["host_name"]; exists {

		vOpts := append(opts, db.WithValidateField("host_name"))
		if err := fv(ctx, m.GetHostName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["internet_vip_info"]; exists {

		vOpts := append(opts, db.WithValidateField("internet_vip_info"))
		for idx, item := range m.GetInternetVipInfo() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetIpReputationChoice().(type) {
	case *GetSpecType_DisableIpReputation:
		if fv, exists := v.FldValidators["ip_reputation_choice.disable_ip_reputation"]; exists {
			val := m.GetIpReputationChoice().(*GetSpecType_DisableIpReputation).DisableIpReputation
			vOpts := append(opts,
				db.WithValidateField("ip_reputation_choice"),
				db.WithValidateField("disable_ip_reputation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EnableIpReputation:
		if fv, exists := v.FldValidators["ip_reputation_choice.enable_ip_reputation"]; exists {
			val := m.GetIpReputationChoice().(*GetSpecType_EnableIpReputation).EnableIpReputation
			vOpts := append(opts,
				db.WithValidateField("ip_reputation_choice"),
				db.WithValidateField("enable_ip_reputation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["jwt_validation"]; exists {

		vOpts := append(opts, db.WithValidateField("jwt_validation"))
		if err := fv(ctx, m.GetJwtValidation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action"]; exists {
		val := m.GetL7DdosAutoMitigationAction()
		vOpts := append(opts,
			db.WithValidateField("l7_ddos_auto_mitigation_action"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetL7DdosAutoMitigationAction().(type) {
	case *GetSpecType_L7DdosActionDefault:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_default"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*GetSpecType_L7DdosActionDefault).L7DdosActionDefault
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_L7DdosActionBlock:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_block"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*GetSpecType_L7DdosActionBlock).L7DdosActionBlock
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_block"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_L7DdosActionJsChallenge:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_js_challenge"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*GetSpecType_L7DdosActionJsChallenge).L7DdosActionJsChallenge
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_L7DdosActionNone:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_none"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*GetSpecType_L7DdosActionNone).L7DdosActionNone
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["loadbalancer_type"]; exists {
		val := m.GetLoadbalancerType()
		vOpts := append(opts,
			db.WithValidateField("loadbalancer_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLoadbalancerType().(type) {
	case *GetSpecType_Http:
		if fv, exists := v.FldValidators["loadbalancer_type.http"]; exists {
			val := m.GetLoadbalancerType().(*GetSpecType_Http).Http
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("http"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Https:
		if fv, exists := v.FldValidators["loadbalancer_type.https"]; exists {
			val := m.GetLoadbalancerType().(*GetSpecType_Https).Https
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_HttpsAutoCert:
		if fv, exists := v.FldValidators["loadbalancer_type.https_auto_cert"]; exists {
			val := m.GetLoadbalancerType().(*GetSpecType_HttpsAutoCert).HttpsAutoCert
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https_auto_cert"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_detection_choice"]; exists {
		val := m.GetMaliciousUserDetectionChoice()
		vOpts := append(opts,
			db.WithValidateField("malicious_user_detection_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMaliciousUserDetectionChoice().(type) {
	case *GetSpecType_EnableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.enable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*GetSpecType_EnableMaliciousUserDetection).EnableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("enable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DisableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.disable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*GetSpecType_DisableMaliciousUserDetection).DisableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("disable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_mitigation"]; exists {

		vOpts := append(opts, db.WithValidateField("malicious_user_mitigation"))
		if err := fv(ctx, m.GetMaliciousUserMitigation(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetMlConfigChoice().(type) {
	case *GetSpecType_SingleLbApp:
		if fv, exists := v.FldValidators["ml_config_choice.single_lb_app"]; exists {
			val := m.GetMlConfigChoice().(*GetSpecType_SingleLbApp).SingleLbApp
			vOpts := append(opts,
				db.WithValidateField("ml_config_choice"),
				db.WithValidateField("single_lb_app"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_MultiLbApp:
		if fv, exists := v.FldValidators["ml_config_choice.multi_lb_app"]; exists {
			val := m.GetMlConfigChoice().(*GetSpecType_MultiLbApp).MultiLbApp
			vOpts := append(opts,
				db.WithValidateField("ml_config_choice"),
				db.WithValidateField("multi_lb_app"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["more_option"]; exists {

		vOpts := append(opts, db.WithValidateField("more_option"))
		if err := fv(ctx, m.GetMoreOption(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetOriginPoolChoice().(type) {
	case *GetSpecType_DefaultPool:
		if fv, exists := v.FldValidators["origin_pool_choice.default_pool"]; exists {
			val := m.GetOriginPoolChoice().(*GetSpecType_DefaultPool).DefaultPool
			vOpts := append(opts,
				db.WithValidateField("origin_pool_choice"),
				db.WithValidateField("default_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DefaultPoolList:
		if fv, exists := v.FldValidators["origin_pool_choice.default_pool_list"]; exists {
			val := m.GetOriginPoolChoice().(*GetSpecType_DefaultPoolList).DefaultPoolList
			vOpts := append(opts,
				db.WithValidateField("origin_pool_choice"),
				db.WithValidateField("default_pool_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["origin_server_subset_rule_list"]; exists {

		vOpts := append(opts, db.WithValidateField("origin_server_subset_rule_list"))
		if err := fv(ctx, m.GetOriginServerSubsetRuleList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protected_cookies"]; exists {
		vOpts := append(opts, db.WithValidateField("protected_cookies"))
		if err := fv(ctx, m.GetProtectedCookies(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limit_choice"]; exists {
		val := m.GetRateLimitChoice()
		vOpts := append(opts,
			db.WithValidateField("rate_limit_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRateLimitChoice().(type) {
	case *GetSpecType_DisableRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.disable_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*GetSpecType_DisableRateLimit).DisableRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("disable_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_RateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*GetSpecType_RateLimit).RateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ApiRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.api_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*GetSpecType_ApiRateLimit).ApiRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("api_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["routes"]; exists {
		vOpts := append(opts, db.WithValidateField("routes"))
		if err := fv(ctx, m.GetRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_disclosure_rules"]; exists {

		vOpts := append(opts, db.WithValidateField("sensitive_data_disclosure_rules"))
		if err := fv(ctx, m.GetSensitiveDataDisclosureRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_policy_choice"]; exists {
		val := m.GetSensitiveDataPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("sensitive_data_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSensitiveDataPolicyChoice().(type) {
	case *GetSpecType_DefaultSensitiveDataPolicy:
		if fv, exists := v.FldValidators["sensitive_data_policy_choice.default_sensitive_data_policy"]; exists {
			val := m.GetSensitiveDataPolicyChoice().(*GetSpecType_DefaultSensitiveDataPolicy).DefaultSensitiveDataPolicy
			vOpts := append(opts,
				db.WithValidateField("sensitive_data_policy_choice"),
				db.WithValidateField("default_sensitive_data_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SensitiveDataPolicy:
		if fv, exists := v.FldValidators["sensitive_data_policy_choice.sensitive_data_policy"]; exists {
			val := m.GetSensitiveDataPolicyChoice().(*GetSpecType_SensitiveDataPolicy).SensitiveDataPolicy
			vOpts := append(opts,
				db.WithValidateField("sensitive_data_policy_choice"),
				db.WithValidateField("sensitive_data_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["service_policy_choice"]; exists {
		val := m.GetServicePolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("service_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServicePolicyChoice().(type) {
	case *GetSpecType_ServicePoliciesFromNamespace:
		if fv, exists := v.FldValidators["service_policy_choice.service_policies_from_namespace"]; exists {
			val := m.GetServicePolicyChoice().(*GetSpecType_ServicePoliciesFromNamespace).ServicePoliciesFromNamespace
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("service_policies_from_namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NoServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.no_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*GetSpecType_NoServicePolicies).NoServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("no_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ActiveServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.active_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*GetSpecType_ActiveServicePolicies).ActiveServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("active_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetSlowDdosMitigationChoice().(type) {
	case *GetSpecType_SlowDdosMitigation:
		if fv, exists := v.FldValidators["slow_ddos_mitigation_choice.slow_ddos_mitigation"]; exists {
			val := m.GetSlowDdosMitigationChoice().(*GetSpecType_SlowDdosMitigation).SlowDdosMitigation
			vOpts := append(opts,
				db.WithValidateField("slow_ddos_mitigation_choice"),
				db.WithValidateField("slow_ddos_mitigation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SystemDefaultTimeouts:
		if fv, exists := v.FldValidators["slow_ddos_mitigation_choice.system_default_timeouts"]; exists {
			val := m.GetSlowDdosMitigationChoice().(*GetSpecType_SystemDefaultTimeouts).SystemDefaultTimeouts
			vOpts := append(opts,
				db.WithValidateField("slow_ddos_mitigation_choice"),
				db.WithValidateField("system_default_timeouts"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["state"]; exists {

		vOpts := append(opts, db.WithValidateField("state"))
		if err := fv(ctx, m.GetState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["threat_mesh_choice"]; exists {
		val := m.GetThreatMeshChoice()
		vOpts := append(opts,
			db.WithValidateField("threat_mesh_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetThreatMeshChoice().(type) {
	case *GetSpecType_DisableThreatMesh:
		if fv, exists := v.FldValidators["threat_mesh_choice.disable_threat_mesh"]; exists {
			val := m.GetThreatMeshChoice().(*GetSpecType_DisableThreatMesh).DisableThreatMesh
			vOpts := append(opts,
				db.WithValidateField("threat_mesh_choice"),
				db.WithValidateField("disable_threat_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EnableThreatMesh:
		if fv, exists := v.FldValidators["threat_mesh_choice.enable_threat_mesh"]; exists {
			val := m.GetThreatMeshChoice().(*GetSpecType_EnableThreatMesh).EnableThreatMesh
			vOpts := append(opts,
				db.WithValidateField("threat_mesh_choice"),
				db.WithValidateField("enable_threat_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["trust_client_ip_headers_choice"]; exists {
		val := m.GetTrustClientIpHeadersChoice()
		vOpts := append(opts,
			db.WithValidateField("trust_client_ip_headers_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTrustClientIpHeadersChoice().(type) {
	case *GetSpecType_DisableTrustClientIpHeaders:
		if fv, exists := v.FldValidators["trust_client_ip_headers_choice.disable_trust_client_ip_headers"]; exists {
			val := m.GetTrustClientIpHeadersChoice().(*GetSpecType_DisableTrustClientIpHeaders).DisableTrustClientIpHeaders
			vOpts := append(opts,
				db.WithValidateField("trust_client_ip_headers_choice"),
				db.WithValidateField("disable_trust_client_ip_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EnableTrustClientIpHeaders:
		if fv, exists := v.FldValidators["trust_client_ip_headers_choice.enable_trust_client_ip_headers"]; exists {
			val := m.GetTrustClientIpHeadersChoice().(*GetSpecType_EnableTrustClientIpHeaders).EnableTrustClientIpHeaders
			vOpts := append(opts,
				db.WithValidateField("trust_client_ip_headers_choice"),
				db.WithValidateField("enable_trust_client_ip_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["trusted_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("trusted_clients"))
		if err := fv(ctx, m.GetTrustedClients(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_id_choice"]; exists {
		val := m.GetUserIdChoice()
		vOpts := append(opts,
			db.WithValidateField("user_id_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetUserIdChoice().(type) {
	case *GetSpecType_UserIdentification:
		if fv, exists := v.FldValidators["user_id_choice.user_identification"]; exists {
			val := m.GetUserIdChoice().(*GetSpecType_UserIdentification).UserIdentification
			vOpts := append(opts,
				db.WithValidateField("user_id_choice"),
				db.WithValidateField("user_identification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_UserIdClientIp:
		if fv, exists := v.FldValidators["user_id_choice.user_id_client_ip"]; exists {
			val := m.GetUserIdChoice().(*GetSpecType_UserIdClientIp).UserIdClientIp
			vOpts := append(opts,
				db.WithValidateField("user_id_choice"),
				db.WithValidateField("user_id_client_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_choice"]; exists {
		val := m.GetWafChoice()
		vOpts := append(opts,
			db.WithValidateField("waf_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWafChoice().(type) {
	case *GetSpecType_DisableWaf:
		if fv, exists := v.FldValidators["waf_choice.disable_waf"]; exists {
			val := m.GetWafChoice().(*GetSpecType_DisableWaf).DisableWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("disable_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AppFirewall:
		if fv, exists := v.FldValidators["waf_choice.app_firewall"]; exists {
			val := m.GetWafChoice().(*GetSpecType_AppFirewall).AppFirewall
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("app_firewall"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_exclusion_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("waf_exclusion_rules"))
		if err := fv(ctx, m.GetWafExclusionRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdvertiseChoice := v.AdvertiseChoiceValidationRuleHandler
	rulesAdvertiseChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdvertiseChoice(rulesAdvertiseChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.advertise_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["advertise_choice"] = vFn

	vrhApiDefinitionChoice := v.ApiDefinitionChoiceValidationRuleHandler
	rulesApiDefinitionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDefinitionChoice(rulesApiDefinitionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.api_definition_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_definition_choice"] = vFn

	vrhApiDiscoveryChoice := v.ApiDiscoveryChoiceValidationRuleHandler
	rulesApiDiscoveryChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDiscoveryChoice(rulesApiDiscoveryChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.api_discovery_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_discovery_choice"] = vFn

	vrhChallengeType := v.ChallengeTypeValidationRuleHandler
	rulesChallengeType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChallengeType(rulesChallengeType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.challenge_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_type"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhL7DdosAutoMitigationAction := v.L7DdosAutoMitigationActionValidationRuleHandler
	rulesL7DdosAutoMitigationAction := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhL7DdosAutoMitigationAction(rulesL7DdosAutoMitigationAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.l7_ddos_auto_mitigation_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["l7_ddos_auto_mitigation_action"] = vFn

	vrhLoadbalancerType := v.LoadbalancerTypeValidationRuleHandler
	rulesLoadbalancerType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLoadbalancerType(rulesLoadbalancerType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.loadbalancer_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_type"] = vFn

	vrhMaliciousUserDetectionChoice := v.MaliciousUserDetectionChoiceValidationRuleHandler
	rulesMaliciousUserDetectionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMaliciousUserDetectionChoice(rulesMaliciousUserDetectionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.malicious_user_detection_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["malicious_user_detection_choice"] = vFn

	vrhRateLimitChoice := v.RateLimitChoiceValidationRuleHandler
	rulesRateLimitChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRateLimitChoice(rulesRateLimitChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.rate_limit_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limit_choice"] = vFn

	vrhSensitiveDataPolicyChoice := v.SensitiveDataPolicyChoiceValidationRuleHandler
	rulesSensitiveDataPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSensitiveDataPolicyChoice(rulesSensitiveDataPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.sensitive_data_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sensitive_data_policy_choice"] = vFn

	vrhServicePolicyChoice := v.ServicePolicyChoiceValidationRuleHandler
	rulesServicePolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServicePolicyChoice(rulesServicePolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.service_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_policy_choice"] = vFn

	vrhThreatMeshChoice := v.ThreatMeshChoiceValidationRuleHandler
	rulesThreatMeshChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhThreatMeshChoice(rulesThreatMeshChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.threat_mesh_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["threat_mesh_choice"] = vFn

	vrhTrustClientIpHeadersChoice := v.TrustClientIpHeadersChoiceValidationRuleHandler
	rulesTrustClientIpHeadersChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTrustClientIpHeadersChoice(rulesTrustClientIpHeadersChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.trust_client_ip_headers_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trust_client_ip_headers_choice"] = vFn

	vrhUserIdChoice := v.UserIdChoiceValidationRuleHandler
	rulesUserIdChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhUserIdChoice(rulesUserIdChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.user_id_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user_id_choice"] = vFn

	vrhWafChoice := v.WafChoiceValidationRuleHandler
	rulesWafChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWafChoice(rulesWafChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.waf_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhDefaultRoutePools := v.DefaultRoutePoolsValidationRuleHandler
	rulesDefaultRoutePools := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDefaultRoutePools(rulesDefaultRoutePools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.default_route_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_route_pools"] = vFn

	vrhRoutes := v.RoutesValidationRuleHandler
	rulesRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRoutes(rulesRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routes"] = vFn

	vrhWafExclusionRules := v.WafExclusionRulesValidationRuleHandler
	rulesWafExclusionRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhWafExclusionRules(rulesWafExclusionRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.waf_exclusion_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_exclusion_rules"] = vFn

	vrhBlockedClients := v.BlockedClientsValidationRuleHandler
	rulesBlockedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhBlockedClients(rulesBlockedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.blocked_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_clients"] = vFn

	vrhTrustedClients := v.TrustedClientsValidationRuleHandler
	rulesTrustedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhTrustedClients(rulesTrustedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.trusted_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trusted_clients"] = vFn

	vrhDdosMitigationRules := v.DdosMitigationRulesValidationRuleHandler
	rulesDdosMitigationRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDdosMitigationRules(rulesDdosMitigationRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.ddos_mitigation_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ddos_mitigation_rules"] = vFn

	vrhDataGuardRules := v.DataGuardRulesValidationRuleHandler
	rulesDataGuardRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDataGuardRules(rulesDataGuardRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.data_guard_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["data_guard_rules"] = vFn

	vrhGraphqlRules := v.GraphqlRulesValidationRuleHandler
	rulesGraphqlRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhGraphqlRules(rulesGraphqlRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.graphql_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["graphql_rules"] = vFn

	vrhProtectedCookies := v.ProtectedCookiesValidationRuleHandler
	rulesProtectedCookies := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhProtectedCookies(rulesProtectedCookies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.protected_cookies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protected_cookies"] = vFn

	v.FldValidators["advertise_choice.advertise_on_public"] = ves_io_schema_views.AdvertisePublicValidator().Validate
	v.FldValidators["advertise_choice.advertise_custom"] = ves_io_schema_views.AdvertiseCustomValidator().Validate

	v.FldValidators["api_definition_choice.api_definitions"] = ves_io_schema_views_common_waf.ApiDefinitionListValidator().Validate
	v.FldValidators["api_definition_choice.api_specification"] = ves_io_schema_views_common_waf.APISpecificationSettingsValidator().Validate
	v.FldValidators["api_definition_choice.api_definition"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_discovery_choice.enable_api_discovery"] = ves_io_schema_views_common_waf.ApiDiscoverySettingValidator().Validate

	v.FldValidators["bot_defense_choice.bot_defense"] = ves_io_schema_views_common_security.ShapeBotDefenseTypeValidator().Validate
	v.FldValidators["bot_defense_choice.bot_defense_advanced"] = ves_io_schema_views_common_security.BotDefenseAdvancedTypeValidator().Validate

	v.FldValidators["challenge_type.js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.captcha_challenge"] = ves_io_schema_virtual_host.CaptchaChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.policy_based_challenge"] = ves_io_schema_views_common_waf.PolicyBasedChallengeValidator().Validate
	v.FldValidators["challenge_type.enable_challenge"] = ves_io_schema_views_common_waf.EnableChallengeValidator().Validate

	v.FldValidators["client_side_defense_choice.client_side_defense"] = ves_io_schema_views_common_security.ClientSideDefenseTypeValidator().Validate

	v.FldValidators["hash_policy_choice.cookie_stickiness"] = ves_io_schema_route.CookieForHashingValidator().Validate
	v.FldValidators["hash_policy_choice.ring_hash"] = HashPolicyListTypeValidator().Validate

	v.FldValidators["ip_reputation_choice.enable_ip_reputation"] = ves_io_schema_views_common_waf.IPThreatCategoryListTypeValidator().Validate

	v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate

	v.FldValidators["loadbalancer_type.http"] = ProxyTypeHttpValidator().Validate
	v.FldValidators["loadbalancer_type.https"] = ProxyTypeHttpsValidator().Validate
	v.FldValidators["loadbalancer_type.https_auto_cert"] = ProxyTypeHttpsAutoCertsValidator().Validate

	v.FldValidators["ml_config_choice.single_lb_app"] = SingleLoadBalancerAppSettingValidator().Validate

	v.FldValidators["origin_pool_choice.default_pool"] = ves_io_schema_views_origin_pool.GlobalSpecTypeValidator().Validate
	v.FldValidators["origin_pool_choice.default_pool_list"] = ves_io_schema_views.OriginPoolListTypeValidator().Validate

	v.FldValidators["rate_limit_choice.rate_limit"] = ves_io_schema_views_common_waf.RateLimitConfigTypeValidator().Validate
	v.FldValidators["rate_limit_choice.api_rate_limit"] = ves_io_schema_views_common_waf.APIRateLimitValidator().Validate

	v.FldValidators["sensitive_data_policy_choice.sensitive_data_policy"] = ves_io_schema_views_common_security.SensitiveDataPolicySettingsValidator().Validate

	v.FldValidators["service_policy_choice.active_service_policies"] = ves_io_schema_views_common_waf.ServicePolicyListValidator().Validate

	v.FldValidators["slow_ddos_mitigation_choice.slow_ddos_mitigation"] = ves_io_schema_virtual_host.SlowDDoSMitigationValidator().Validate

	v.FldValidators["trust_client_ip_headers_choice.enable_trust_client_ip_headers"] = ves_io_schema_virtual_host.ClientIPHeadersValidator().Validate

	v.FldValidators["user_id_choice.user_identification"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["waf_choice.app_firewall"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cors_policy"] = ves_io_schema.CorsPolicyValidator().Validate

	v.FldValidators["more_option"] = AdvancedOptionsTypeValidator().Validate

	v.FldValidators["malicious_user_mitigation"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_rate_limit_legacy"] = ves_io_schema_views_common_waf.APIRateLimitLegacyValidator().Validate

	v.FldValidators["api_protection_rules"] = ves_io_schema_views_common_waf.APIProtectionRulesValidator().Validate

	v.FldValidators["csrf_policy"] = ves_io_schema.CsrfPolicyValidator().Validate

	v.FldValidators["jwt_validation"] = ves_io_schema_views_common_waf.JWTValidationValidator().Validate

	v.FldValidators["origin_server_subset_rule_list"] = OriginServerSubsetRuleListTypeValidator().Validate

	v.FldValidators["sensitive_data_disclosure_rules"] = SensitiveDataDisclosureRulesValidator().Validate

	v.FldValidators["dns_info"] = ves_io_schema_virtual_host_dns_info.DnsInfoValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttps().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.https")
	}

	for idx, e := range m.GetRoutes() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting GlobalSpecType.routes idx %v", idx)
		}
	}

	if err := m.GetMoreOption().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.more_option")
	}

	if err := m.GetDefaultPool().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.default_pool")
	}

	if err := m.GetJwtValidation().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.jwt_validation")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvertiseChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAdvertiseChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiDefinitionChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDefinitionChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiDiscoveryChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDiscoveryChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiProtectionRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiProtectionRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiRateLimitLegacyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiRateLimitLegacyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetBotDefenseChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetBotDefenseChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetChallengeTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetChallengeTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDefaultRoutePoolsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDefaultRoutePoolsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLoadbalancerTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLoadbalancerTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMaliciousUserMitigationDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMaliciousUserMitigationDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMlConfigChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMlConfigChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMoreOptionDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMoreOptionDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginPoolChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginServerSubsetRuleListDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginServerSubsetRuleListDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimitChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRateLimitChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRoutesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRoutesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSensitiveDataPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSensitiveDataPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServicePolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetServicePolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetUserIdChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetUserIdChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetWafChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetAdvertiseChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAdvertiseChoice() == nil {
		return nil, nil
	}
	switch m.GetAdvertiseChoice().(type) {
	case *GlobalSpecType_AdvertiseOnPublic:

		drInfos, err := m.GetAdvertiseOnPublic().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAdvertiseOnPublic().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "advertise_on_public." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_AdvertiseCustom:

		drInfos, err := m.GetAdvertiseCustom().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAdvertiseCustom().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "advertise_custom." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_DoNotAdvertise:

		return nil, nil

	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetApiDefinitionChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDefinitionChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDefinitionChoice().(type) {
	case *GlobalSpecType_ApiDefinitions:

		drInfos, err := m.GetApiDefinitions().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiDefinitions().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_definitions." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_ApiSpecification:

		drInfos, err := m.GetApiSpecification().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiSpecification().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_specification." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_DisableApiDefinition:

		return nil, nil

	case *GlobalSpecType_ApiDefinition:

		vref := m.GetApiDefinition()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("api_definition.Object")
		dri := db.DRefInfo{
			RefdType:   "api_definition.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "api_definition",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetApiDiscoveryChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDiscoveryChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDiscoveryChoice().(type) {
	case *GlobalSpecType_EnableApiDiscovery:

		drInfos, err := m.GetEnableApiDiscovery().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableApiDiscovery().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_api_discovery." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_DisableApiDiscovery:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetApiProtectionRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiProtectionRules() == nil {
		return nil, nil
	}

	drInfos, err := m.GetApiProtectionRules().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetApiProtectionRules().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "api_protection_rules." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetApiRateLimitLegacyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiRateLimitLegacy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetApiRateLimitLegacy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetApiRateLimitLegacy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "api_rate_limit_legacy." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetBotDefenseChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetBotDefenseChoice() == nil {
		return nil, nil
	}
	switch m.GetBotDefenseChoice().(type) {
	case *GlobalSpecType_DisableBotDefense:

		return nil, nil

	case *GlobalSpecType_BotDefense:

		return nil, nil

	case *GlobalSpecType_BotDefenseAdvanced:

		drInfos, err := m.GetBotDefenseAdvanced().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetBotDefenseAdvanced().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "bot_defense_advanced." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetChallengeTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetChallengeType() == nil {
		return nil, nil
	}
	switch m.GetChallengeType().(type) {
	case *GlobalSpecType_JsChallenge:

		return nil, nil

	case *GlobalSpecType_CaptchaChallenge:

		return nil, nil

	case *GlobalSpecType_NoChallenge:

		return nil, nil

	case *GlobalSpecType_PolicyBasedChallenge:

		drInfos, err := m.GetPolicyBasedChallenge().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPolicyBasedChallenge().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "policy_based_challenge." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_EnableChallenge:

		drInfos, err := m.GetEnableChallenge().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableChallenge().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_challenge." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetDefaultRoutePoolsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDefaultRoutePools() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetDefaultRoutePools() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultRoutePools() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("default_route_pools[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetLoadbalancerTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLoadbalancerType() == nil {
		return nil, nil
	}
	switch m.GetLoadbalancerType().(type) {
	case *GlobalSpecType_Http:

		return nil, nil

	case *GlobalSpecType_Https:

		drInfos, err := m.GetHttps().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttps().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_HttpsAutoCert:

		drInfos, err := m.GetHttpsAutoCert().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpsAutoCert().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https_auto_cert." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetMaliciousUserMitigationDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("malicious_user_mitigation.Object")
	dri := db.DRefInfo{
		RefdType:   "malicious_user_mitigation.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "malicious_user_mitigation",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetMaliciousUserMitigationDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetMaliciousUserMitigationDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "malicious_user_mitigation.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: malicious_user_mitigation")
	}

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "malicious_user_mitigation.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetMlConfigChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMlConfigChoice() == nil {
		return nil, nil
	}
	switch m.GetMlConfigChoice().(type) {
	case *GlobalSpecType_SingleLbApp:

		drInfos, err := m.GetSingleLbApp().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSingleLbApp().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "single_lb_app." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_MultiLbApp:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetMoreOptionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMoreOption() == nil {
		return nil, nil
	}

	drInfos, err := m.GetMoreOption().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetMoreOption().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "more_option." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetOriginPoolChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginPoolChoice() == nil {
		return nil, nil
	}
	switch m.GetOriginPoolChoice().(type) {
	case *GlobalSpecType_DefaultPool:

		drInfos, err := m.GetDefaultPool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultPool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "default_pool." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_DefaultPoolList:

		drInfos, err := m.GetDefaultPoolList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultPoolList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "default_pool_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetOriginServerSubsetRuleListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginServerSubsetRuleList() == nil {
		return nil, nil
	}

	drInfos, err := m.GetOriginServerSubsetRuleList().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetOriginServerSubsetRuleList().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "origin_server_subset_rule_list." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetRateLimitChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRateLimitChoice() == nil {
		return nil, nil
	}
	switch m.GetRateLimitChoice().(type) {
	case *GlobalSpecType_DisableRateLimit:

		return nil, nil

	case *GlobalSpecType_RateLimit:

		drInfos, err := m.GetRateLimit().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRateLimit().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rate_limit." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_ApiRateLimit:

		drInfos, err := m.GetApiRateLimit().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiRateLimit().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_rate_limit." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetRoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRoutes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRoutes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetSensitiveDataPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSensitiveDataPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetSensitiveDataPolicyChoice().(type) {
	case *GlobalSpecType_DefaultSensitiveDataPolicy:

		return nil, nil

	case *GlobalSpecType_SensitiveDataPolicy:

		drInfos, err := m.GetSensitiveDataPolicy().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSensitiveDataPolicy().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sensitive_data_policy." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetServicePolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServicePolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetServicePolicyChoice().(type) {
	case *GlobalSpecType_ServicePoliciesFromNamespace:

		return nil, nil

	case *GlobalSpecType_NoServicePolicies:

		return nil, nil

	case *GlobalSpecType_ActiveServicePolicies:

		drInfos, err := m.GetActiveServicePolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveServicePolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_service_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetUserIdChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetUserIdChoice().(type) {
	case *GlobalSpecType_UserIdentification:

		vref := m.GetUserIdentification()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("user_identification.Object")
		dri := db.DRefInfo{
			RefdType:   "user_identification.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "user_identification",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *GlobalSpecType_UserIdClientIp:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetUserIdChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetUserIdChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetUserIdChoice().(type) {
	case *GlobalSpecType_UserIdentification:
		refdType, err := d.TypeForEntryKind("", "", "user_identification.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: user_identification")
		}

		vref := m.GetUserIdentification()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "user_identification.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GlobalSpecType_UserIdClientIp:

	}

	return entries, nil
}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *GlobalSpecType) GetWafChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetWafChoice().(type) {
	case *GlobalSpecType_DisableWaf:

		return nil, nil

	case *GlobalSpecType_AppFirewall:

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("app_firewall.Object")
		dri := db.DRefInfo{
			RefdType:   "app_firewall.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "app_firewall",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetWafChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetWafChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetWafChoice().(type) {
	case *GlobalSpecType_DisableWaf:

	case *GlobalSpecType_AppFirewall:
		refdType, err := d.TypeForEntryKind("", "", "app_firewall.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: app_firewall")
		}

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "app_firewall.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) AdvertiseChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for advertise_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ApiDefinitionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_definition_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ApiDiscoveryChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_discovery_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ChallengeTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_type")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) HostRewriteParamsHostRewriteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_HostRewrite, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_rewrite")
	}
	return oValidatorFn_HostRewrite, nil
}

func (v *ValidateGlobalSpecType) L7DdosAutoMitigationActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for l7_ddos_auto_mitigation_action")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) LoadbalancerTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for loadbalancer_type")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) MaliciousUserDetectionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for malicious_user_detection_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RateLimitChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rate_limit_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SensitiveDataPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for sensitive_data_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ServicePolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ThreatMeshChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for threat_mesh_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TrustClientIpHeadersChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for trust_client_ip_headers_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) UserIdChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for user_id_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) WafChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for waf_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DefaultRoutePoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for default_route_pools")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_route_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_route_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_route_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RouteType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RouteTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RouteType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RouteType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) WafExclusionRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for waf_exclusion_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleWafExclusionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.SimpleWafExclusionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for waf_exclusion_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleWafExclusionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleWafExclusionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated waf_exclusion_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items waf_exclusion_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) BlockedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for blocked_clients")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views_common_waf.SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views_common_waf.SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for blocked_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views_common_waf.SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views_common_waf.SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated blocked_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items blocked_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TrustedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for trusted_clients")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views_common_waf.SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views_common_waf.SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for trusted_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views_common_waf.SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views_common_waf.SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated trusted_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items trusted_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DdosMitigationRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ddos_mitigation_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views_common_security.DDoSMitigationRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views_common_security.DDoSMitigationRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ddos_mitigation_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views_common_security.DDoSMitigationRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views_common_security.DDoSMitigationRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ddos_mitigation_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ddos_mitigation_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DataGuardRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for data_guard_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleDataGuardRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.SimpleDataGuardRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for data_guard_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleDataGuardRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleDataGuardRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated data_guard_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items data_guard_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) GraphqlRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for graphql_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.GraphQLRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.GraphQLRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for graphql_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.GraphQLRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.GraphQLRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated graphql_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items graphql_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ProtectedCookiesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for protected_cookies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.CookieManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.CookieManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for protected_cookies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.CookieManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.CookieManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated protected_cookies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items protected_cookies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_location"]; exists {

		vOpts := append(opts, db.WithValidateField("add_location"))
		if err := fv(ctx, m.GetAddLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["advertise_choice"]; exists {
		val := m.GetAdvertiseChoice()
		vOpts := append(opts,
			db.WithValidateField("advertise_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdvertiseChoice().(type) {
	case *GlobalSpecType_AdvertiseOnPublic:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public"]; exists {
			val := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublic).AdvertiseOnPublic
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AdvertiseCustom:
		if fv, exists := v.FldValidators["advertise_choice.advertise_custom"]; exists {
			val := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseCustom).AdvertiseCustom
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DoNotAdvertise:
		if fv, exists := v.FldValidators["advertise_choice.do_not_advertise"]; exists {
			val := m.GetAdvertiseChoice().(*GlobalSpecType_DoNotAdvertise).DoNotAdvertise
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("do_not_advertise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public_default_vip"]; exists {
			val := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublicDefaultVip).AdvertiseOnPublicDefaultVip
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public_default_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_definition_choice"]; exists {
		val := m.GetApiDefinitionChoice()
		vOpts := append(opts,
			db.WithValidateField("api_definition_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDefinitionChoice().(type) {
	case *GlobalSpecType_ApiDefinitions:
		if fv, exists := v.FldValidators["api_definition_choice.api_definitions"]; exists {
			val := m.GetApiDefinitionChoice().(*GlobalSpecType_ApiDefinitions).ApiDefinitions
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_definitions"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ApiSpecification:
		if fv, exists := v.FldValidators["api_definition_choice.api_specification"]; exists {
			val := m.GetApiDefinitionChoice().(*GlobalSpecType_ApiSpecification).ApiSpecification
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_specification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DisableApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.disable_api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*GlobalSpecType_DisableApiDefinition).DisableApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("disable_api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*GlobalSpecType_ApiDefinition).ApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_discovery_choice"]; exists {
		val := m.GetApiDiscoveryChoice()
		vOpts := append(opts,
			db.WithValidateField("api_discovery_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDiscoveryChoice().(type) {
	case *GlobalSpecType_EnableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.enable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*GlobalSpecType_EnableApiDiscovery).EnableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("enable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DisableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.disable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*GlobalSpecType_DisableApiDiscovery).DisableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("disable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_protection_rules"]; exists {

		vOpts := append(opts, db.WithValidateField("api_protection_rules"))
		if err := fv(ctx, m.GetApiProtectionRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_rate_limit_legacy"]; exists {

		vOpts := append(opts, db.WithValidateField("api_rate_limit_legacy"))
		if err := fv(ctx, m.GetApiRateLimitLegacy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["auto_cert_info"]; exists {

		vOpts := append(opts, db.WithValidateField("auto_cert_info"))
		if err := fv(ctx, m.GetAutoCertInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["auto_cert_state"]; exists {

		vOpts := append(opts, db.WithValidateField("auto_cert_state"))
		if err := fv(ctx, m.GetAutoCertState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("blocked_clients"))
		if err := fv(ctx, m.GetBlockedClients(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetBotDefenseChoice().(type) {
	case *GlobalSpecType_DisableBotDefense:
		if fv, exists := v.FldValidators["bot_defense_choice.disable_bot_defense"]; exists {
			val := m.GetBotDefenseChoice().(*GlobalSpecType_DisableBotDefense).DisableBotDefense
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("disable_bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_BotDefense:
		if fv, exists := v.FldValidators["bot_defense_choice.bot_defense"]; exists {
			val := m.GetBotDefenseChoice().(*GlobalSpecType_BotDefense).BotDefense
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_BotDefenseAdvanced:
		if fv, exists := v.FldValidators["bot_defense_choice.bot_defense_advanced"]; exists {
			val := m.GetBotDefenseChoice().(*GlobalSpecType_BotDefenseAdvanced).BotDefenseAdvanced
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("bot_defense_advanced"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cert_state"]; exists {

		vOpts := append(opts, db.WithValidateField("cert_state"))
		if err := fv(ctx, m.GetCertState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["challenge_type"]; exists {
		val := m.GetChallengeType()
		vOpts := append(opts,
			db.WithValidateField("challenge_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChallengeType().(type) {
	case *GlobalSpecType_JsChallenge:
		if fv, exists := v.FldValidators["challenge_type.js_challenge"]; exists {
			val := m.GetChallengeType().(*GlobalSpecType_JsChallenge).JsChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_CaptchaChallenge:
		if fv, exists := v.FldValidators["challenge_type.captcha_challenge"]; exists {
			val := m.GetChallengeType().(*GlobalSpecType_CaptchaChallenge).CaptchaChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("captcha_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NoChallenge:
		if fv, exists := v.FldValidators["challenge_type.no_challenge"]; exists {
			val := m.GetChallengeType().(*GlobalSpecType_NoChallenge).NoChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("no_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_PolicyBasedChallenge:
		if fv, exists := v.FldValidators["challenge_type.policy_based_challenge"]; exists {
			val := m.GetChallengeType().(*GlobalSpecType_PolicyBasedChallenge).PolicyBasedChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("policy_based_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EnableChallenge:
		if fv, exists := v.FldValidators["challenge_type.enable_challenge"]; exists {
			val := m.GetChallengeType().(*GlobalSpecType_EnableChallenge).EnableChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("enable_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetClientSideDefenseChoice().(type) {
	case *GlobalSpecType_DisableClientSideDefense:
		if fv, exists := v.FldValidators["client_side_defense_choice.disable_client_side_defense"]; exists {
			val := m.GetClientSideDefenseChoice().(*GlobalSpecType_DisableClientSideDefense).DisableClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("client_side_defense_choice"),
				db.WithValidateField("disable_client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ClientSideDefense:
		if fv, exists := v.FldValidators["client_side_defense_choice.client_side_defense"]; exists {
			val := m.GetClientSideDefenseChoice().(*GlobalSpecType_ClientSideDefense).ClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("client_side_defense_choice"),
				db.WithValidateField("client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cors_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("cors_policy"))
		if err := fv(ctx, m.GetCorsPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["csrf_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("csrf_policy"))
		if err := fv(ctx, m.GetCsrfPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["data_guard_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("data_guard_rules"))
		if err := fv(ctx, m.GetDataGuardRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ddos_mitigation_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("ddos_mitigation_rules"))
		if err := fv(ctx, m.GetDdosMitigationRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_route_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("default_route_pools"))
		if err := fv(ctx, m.GetDefaultRoutePools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dns_info"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_info"))
		for idx, item := range m.GetDnsInfo() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["downstream_tls_certificate_expiration_timestamps"]; exists {

		vOpts := append(opts, db.WithValidateField("downstream_tls_certificate_expiration_timestamps"))
		for idx, item := range m.GetDownstreamTlsCertificateExpirationTimestamps() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["graphql_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("graphql_rules"))
		if err := fv(ctx, m.GetGraphqlRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *GlobalSpecType_RoundRobin:
		if fv, exists := v.FldValidators["hash_policy_choice.round_robin"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_RoundRobin).RoundRobin
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("round_robin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LeastActive:
		if fv, exists := v.FldValidators["hash_policy_choice.least_active"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_LeastActive).LeastActive
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("least_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Random:
		if fv, exists := v.FldValidators["hash_policy_choice.random"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_Random).Random
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("random"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SourceIpStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.source_ip_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_SourceIpStickiness).SourceIpStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("source_ip_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_CookieStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.cookie_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_CookieStickiness).CookieStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("cookie_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_RingHash:
		if fv, exists := v.FldValidators["hash_policy_choice.ring_hash"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_RingHash).RingHash
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("ring_hash"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["host_name"]; exists {

		vOpts := append(opts, db.WithValidateField("host_name"))
		if err := fv(ctx, m.GetHostName(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetHostRewriteParams().(type) {
	case *GlobalSpecType_AutoHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.auto_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*GlobalSpecType_AutoHostRewrite).AutoHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("auto_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_HostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*GlobalSpecType_HostRewrite).HostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DisableHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.disable_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*GlobalSpecType_DisableHostRewrite).DisableHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("disable_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["internet_vip_info"]; exists {

		vOpts := append(opts, db.WithValidateField("internet_vip_info"))
		for idx, item := range m.GetInternetVipInfo() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetIpReputationChoice().(type) {
	case *GlobalSpecType_DisableIpReputation:
		if fv, exists := v.FldValidators["ip_reputation_choice.disable_ip_reputation"]; exists {
			val := m.GetIpReputationChoice().(*GlobalSpecType_DisableIpReputation).DisableIpReputation
			vOpts := append(opts,
				db.WithValidateField("ip_reputation_choice"),
				db.WithValidateField("disable_ip_reputation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EnableIpReputation:
		if fv, exists := v.FldValidators["ip_reputation_choice.enable_ip_reputation"]; exists {
			val := m.GetIpReputationChoice().(*GlobalSpecType_EnableIpReputation).EnableIpReputation
			vOpts := append(opts,
				db.WithValidateField("ip_reputation_choice"),
				db.WithValidateField("enable_ip_reputation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["jwt_validation"]; exists {

		vOpts := append(opts, db.WithValidateField("jwt_validation"))
		if err := fv(ctx, m.GetJwtValidation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action"]; exists {
		val := m.GetL7DdosAutoMitigationAction()
		vOpts := append(opts,
			db.WithValidateField("l7_ddos_auto_mitigation_action"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetL7DdosAutoMitigationAction().(type) {
	case *GlobalSpecType_L7DdosActionDefault:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_default"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionDefault).L7DdosActionDefault
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_L7DdosActionBlock:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_block"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionBlock).L7DdosActionBlock
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_block"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_L7DdosActionJsChallenge:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_js_challenge"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionJsChallenge).L7DdosActionJsChallenge
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_L7DdosActionNone:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_none"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionNone).L7DdosActionNone
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["loadbalancer_type"]; exists {
		val := m.GetLoadbalancerType()
		vOpts := append(opts,
			db.WithValidateField("loadbalancer_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLoadbalancerType().(type) {
	case *GlobalSpecType_Http:
		if fv, exists := v.FldValidators["loadbalancer_type.http"]; exists {
			val := m.GetLoadbalancerType().(*GlobalSpecType_Http).Http
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("http"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Https:
		if fv, exists := v.FldValidators["loadbalancer_type.https"]; exists {
			val := m.GetLoadbalancerType().(*GlobalSpecType_Https).Https
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_HttpsAutoCert:
		if fv, exists := v.FldValidators["loadbalancer_type.https_auto_cert"]; exists {
			val := m.GetLoadbalancerType().(*GlobalSpecType_HttpsAutoCert).HttpsAutoCert
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https_auto_cert"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_detection_choice"]; exists {
		val := m.GetMaliciousUserDetectionChoice()
		vOpts := append(opts,
			db.WithValidateField("malicious_user_detection_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMaliciousUserDetectionChoice().(type) {
	case *GlobalSpecType_EnableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.enable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*GlobalSpecType_EnableMaliciousUserDetection).EnableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("enable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DisableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.disable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*GlobalSpecType_DisableMaliciousUserDetection).DisableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("disable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_mitigation"]; exists {

		vOpts := append(opts, db.WithValidateField("malicious_user_mitigation"))
		if err := fv(ctx, m.GetMaliciousUserMitigation(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetMlConfigChoice().(type) {
	case *GlobalSpecType_SingleLbApp:
		if fv, exists := v.FldValidators["ml_config_choice.single_lb_app"]; exists {
			val := m.GetMlConfigChoice().(*GlobalSpecType_SingleLbApp).SingleLbApp
			vOpts := append(opts,
				db.WithValidateField("ml_config_choice"),
				db.WithValidateField("single_lb_app"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_MultiLbApp:
		if fv, exists := v.FldValidators["ml_config_choice.multi_lb_app"]; exists {
			val := m.GetMlConfigChoice().(*GlobalSpecType_MultiLbApp).MultiLbApp
			vOpts := append(opts,
				db.WithValidateField("ml_config_choice"),
				db.WithValidateField("multi_lb_app"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["more_option"]; exists {

		vOpts := append(opts, db.WithValidateField("more_option"))
		if err := fv(ctx, m.GetMoreOption(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetOriginPoolChoice().(type) {
	case *GlobalSpecType_DefaultPool:
		if fv, exists := v.FldValidators["origin_pool_choice.default_pool"]; exists {
			val := m.GetOriginPoolChoice().(*GlobalSpecType_DefaultPool).DefaultPool
			vOpts := append(opts,
				db.WithValidateField("origin_pool_choice"),
				db.WithValidateField("default_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DefaultPoolList:
		if fv, exists := v.FldValidators["origin_pool_choice.default_pool_list"]; exists {
			val := m.GetOriginPoolChoice().(*GlobalSpecType_DefaultPoolList).DefaultPoolList
			vOpts := append(opts,
				db.WithValidateField("origin_pool_choice"),
				db.WithValidateField("default_pool_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["origin_server_subset_rule_list"]; exists {

		vOpts := append(opts, db.WithValidateField("origin_server_subset_rule_list"))
		if err := fv(ctx, m.GetOriginServerSubsetRuleList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protected_cookies"]; exists {
		vOpts := append(opts, db.WithValidateField("protected_cookies"))
		if err := fv(ctx, m.GetProtectedCookies(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limit_choice"]; exists {
		val := m.GetRateLimitChoice()
		vOpts := append(opts,
			db.WithValidateField("rate_limit_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRateLimitChoice().(type) {
	case *GlobalSpecType_DisableRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.disable_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*GlobalSpecType_DisableRateLimit).DisableRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("disable_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_RateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*GlobalSpecType_RateLimit).RateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ApiRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.api_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*GlobalSpecType_ApiRateLimit).ApiRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("api_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["routes"]; exists {
		vOpts := append(opts, db.WithValidateField("routes"))
		if err := fv(ctx, m.GetRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_disclosure_rules"]; exists {

		vOpts := append(opts, db.WithValidateField("sensitive_data_disclosure_rules"))
		if err := fv(ctx, m.GetSensitiveDataDisclosureRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_policy_choice"]; exists {
		val := m.GetSensitiveDataPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("sensitive_data_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSensitiveDataPolicyChoice().(type) {
	case *GlobalSpecType_DefaultSensitiveDataPolicy:
		if fv, exists := v.FldValidators["sensitive_data_policy_choice.default_sensitive_data_policy"]; exists {
			val := m.GetSensitiveDataPolicyChoice().(*GlobalSpecType_DefaultSensitiveDataPolicy).DefaultSensitiveDataPolicy
			vOpts := append(opts,
				db.WithValidateField("sensitive_data_policy_choice"),
				db.WithValidateField("default_sensitive_data_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SensitiveDataPolicy:
		if fv, exists := v.FldValidators["sensitive_data_policy_choice.sensitive_data_policy"]; exists {
			val := m.GetSensitiveDataPolicyChoice().(*GlobalSpecType_SensitiveDataPolicy).SensitiveDataPolicy
			vOpts := append(opts,
				db.WithValidateField("sensitive_data_policy_choice"),
				db.WithValidateField("sensitive_data_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["service_policy_choice"]; exists {
		val := m.GetServicePolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("service_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServicePolicyChoice().(type) {
	case *GlobalSpecType_ServicePoliciesFromNamespace:
		if fv, exists := v.FldValidators["service_policy_choice.service_policies_from_namespace"]; exists {
			val := m.GetServicePolicyChoice().(*GlobalSpecType_ServicePoliciesFromNamespace).ServicePoliciesFromNamespace
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("service_policies_from_namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NoServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.no_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*GlobalSpecType_NoServicePolicies).NoServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("no_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ActiveServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.active_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*GlobalSpecType_ActiveServicePolicies).ActiveServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("active_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetSlowDdosMitigationChoice().(type) {
	case *GlobalSpecType_SlowDdosMitigation:
		if fv, exists := v.FldValidators["slow_ddos_mitigation_choice.slow_ddos_mitigation"]; exists {
			val := m.GetSlowDdosMitigationChoice().(*GlobalSpecType_SlowDdosMitigation).SlowDdosMitigation
			vOpts := append(opts,
				db.WithValidateField("slow_ddos_mitigation_choice"),
				db.WithValidateField("slow_ddos_mitigation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SystemDefaultTimeouts:
		if fv, exists := v.FldValidators["slow_ddos_mitigation_choice.system_default_timeouts"]; exists {
			val := m.GetSlowDdosMitigationChoice().(*GlobalSpecType_SystemDefaultTimeouts).SystemDefaultTimeouts
			vOpts := append(opts,
				db.WithValidateField("slow_ddos_mitigation_choice"),
				db.WithValidateField("system_default_timeouts"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["state"]; exists {

		vOpts := append(opts, db.WithValidateField("state"))
		if err := fv(ctx, m.GetState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["threat_mesh_choice"]; exists {
		val := m.GetThreatMeshChoice()
		vOpts := append(opts,
			db.WithValidateField("threat_mesh_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetThreatMeshChoice().(type) {
	case *GlobalSpecType_DisableThreatMesh:
		if fv, exists := v.FldValidators["threat_mesh_choice.disable_threat_mesh"]; exists {
			val := m.GetThreatMeshChoice().(*GlobalSpecType_DisableThreatMesh).DisableThreatMesh
			vOpts := append(opts,
				db.WithValidateField("threat_mesh_choice"),
				db.WithValidateField("disable_threat_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EnableThreatMesh:
		if fv, exists := v.FldValidators["threat_mesh_choice.enable_threat_mesh"]; exists {
			val := m.GetThreatMeshChoice().(*GlobalSpecType_EnableThreatMesh).EnableThreatMesh
			vOpts := append(opts,
				db.WithValidateField("threat_mesh_choice"),
				db.WithValidateField("enable_threat_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["trust_client_ip_headers_choice"]; exists {
		val := m.GetTrustClientIpHeadersChoice()
		vOpts := append(opts,
			db.WithValidateField("trust_client_ip_headers_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTrustClientIpHeadersChoice().(type) {
	case *GlobalSpecType_DisableTrustClientIpHeaders:
		if fv, exists := v.FldValidators["trust_client_ip_headers_choice.disable_trust_client_ip_headers"]; exists {
			val := m.GetTrustClientIpHeadersChoice().(*GlobalSpecType_DisableTrustClientIpHeaders).DisableTrustClientIpHeaders
			vOpts := append(opts,
				db.WithValidateField("trust_client_ip_headers_choice"),
				db.WithValidateField("disable_trust_client_ip_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EnableTrustClientIpHeaders:
		if fv, exists := v.FldValidators["trust_client_ip_headers_choice.enable_trust_client_ip_headers"]; exists {
			val := m.GetTrustClientIpHeadersChoice().(*GlobalSpecType_EnableTrustClientIpHeaders).EnableTrustClientIpHeaders
			vOpts := append(opts,
				db.WithValidateField("trust_client_ip_headers_choice"),
				db.WithValidateField("enable_trust_client_ip_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["trusted_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("trusted_clients"))
		if err := fv(ctx, m.GetTrustedClients(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_id_choice"]; exists {
		val := m.GetUserIdChoice()
		vOpts := append(opts,
			db.WithValidateField("user_id_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetUserIdChoice().(type) {
	case *GlobalSpecType_UserIdentification:
		if fv, exists := v.FldValidators["user_id_choice.user_identification"]; exists {
			val := m.GetUserIdChoice().(*GlobalSpecType_UserIdentification).UserIdentification
			vOpts := append(opts,
				db.WithValidateField("user_id_choice"),
				db.WithValidateField("user_identification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_UserIdClientIp:
		if fv, exists := v.FldValidators["user_id_choice.user_id_client_ip"]; exists {
			val := m.GetUserIdChoice().(*GlobalSpecType_UserIdClientIp).UserIdClientIp
			vOpts := append(opts,
				db.WithValidateField("user_id_choice"),
				db.WithValidateField("user_id_client_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_choice"]; exists {
		val := m.GetWafChoice()
		vOpts := append(opts,
			db.WithValidateField("waf_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWafChoice().(type) {
	case *GlobalSpecType_DisableWaf:
		if fv, exists := v.FldValidators["waf_choice.disable_waf"]; exists {
			val := m.GetWafChoice().(*GlobalSpecType_DisableWaf).DisableWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("disable_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AppFirewall:
		if fv, exists := v.FldValidators["waf_choice.app_firewall"]; exists {
			val := m.GetWafChoice().(*GlobalSpecType_AppFirewall).AppFirewall
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("app_firewall"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_exclusion_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("waf_exclusion_rules"))
		if err := fv(ctx, m.GetWafExclusionRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdvertiseChoice := v.AdvertiseChoiceValidationRuleHandler
	rulesAdvertiseChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdvertiseChoice(rulesAdvertiseChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.advertise_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["advertise_choice"] = vFn

	vrhApiDefinitionChoice := v.ApiDefinitionChoiceValidationRuleHandler
	rulesApiDefinitionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDefinitionChoice(rulesApiDefinitionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.api_definition_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_definition_choice"] = vFn

	vrhApiDiscoveryChoice := v.ApiDiscoveryChoiceValidationRuleHandler
	rulesApiDiscoveryChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDiscoveryChoice(rulesApiDiscoveryChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.api_discovery_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_discovery_choice"] = vFn

	vrhChallengeType := v.ChallengeTypeValidationRuleHandler
	rulesChallengeType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChallengeType(rulesChallengeType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.challenge_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_type"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhHostRewriteParamsHostRewrite := v.HostRewriteParamsHostRewriteValidationRuleHandler
	rulesHostRewriteParamsHostRewrite := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
	}
	vFnMap["host_rewrite_params.host_rewrite"], err = vrhHostRewriteParamsHostRewrite(rulesHostRewriteParamsHostRewrite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.host_rewrite_params_host_rewrite: %s", err)
		panic(errMsg)
	}

	v.FldValidators["host_rewrite_params.host_rewrite"] = vFnMap["host_rewrite_params.host_rewrite"]

	vrhL7DdosAutoMitigationAction := v.L7DdosAutoMitigationActionValidationRuleHandler
	rulesL7DdosAutoMitigationAction := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhL7DdosAutoMitigationAction(rulesL7DdosAutoMitigationAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.l7_ddos_auto_mitigation_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["l7_ddos_auto_mitigation_action"] = vFn

	vrhLoadbalancerType := v.LoadbalancerTypeValidationRuleHandler
	rulesLoadbalancerType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLoadbalancerType(rulesLoadbalancerType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.loadbalancer_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_type"] = vFn

	vrhMaliciousUserDetectionChoice := v.MaliciousUserDetectionChoiceValidationRuleHandler
	rulesMaliciousUserDetectionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMaliciousUserDetectionChoice(rulesMaliciousUserDetectionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.malicious_user_detection_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["malicious_user_detection_choice"] = vFn

	vrhRateLimitChoice := v.RateLimitChoiceValidationRuleHandler
	rulesRateLimitChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRateLimitChoice(rulesRateLimitChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.rate_limit_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limit_choice"] = vFn

	vrhSensitiveDataPolicyChoice := v.SensitiveDataPolicyChoiceValidationRuleHandler
	rulesSensitiveDataPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSensitiveDataPolicyChoice(rulesSensitiveDataPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.sensitive_data_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sensitive_data_policy_choice"] = vFn

	vrhServicePolicyChoice := v.ServicePolicyChoiceValidationRuleHandler
	rulesServicePolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServicePolicyChoice(rulesServicePolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.service_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_policy_choice"] = vFn

	vrhThreatMeshChoice := v.ThreatMeshChoiceValidationRuleHandler
	rulesThreatMeshChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhThreatMeshChoice(rulesThreatMeshChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.threat_mesh_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["threat_mesh_choice"] = vFn

	vrhTrustClientIpHeadersChoice := v.TrustClientIpHeadersChoiceValidationRuleHandler
	rulesTrustClientIpHeadersChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTrustClientIpHeadersChoice(rulesTrustClientIpHeadersChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.trust_client_ip_headers_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trust_client_ip_headers_choice"] = vFn

	vrhUserIdChoice := v.UserIdChoiceValidationRuleHandler
	rulesUserIdChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhUserIdChoice(rulesUserIdChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.user_id_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user_id_choice"] = vFn

	vrhWafChoice := v.WafChoiceValidationRuleHandler
	rulesWafChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWafChoice(rulesWafChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.waf_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhDefaultRoutePools := v.DefaultRoutePoolsValidationRuleHandler
	rulesDefaultRoutePools := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDefaultRoutePools(rulesDefaultRoutePools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.default_route_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_route_pools"] = vFn

	vrhRoutes := v.RoutesValidationRuleHandler
	rulesRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRoutes(rulesRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routes"] = vFn

	vrhWafExclusionRules := v.WafExclusionRulesValidationRuleHandler
	rulesWafExclusionRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhWafExclusionRules(rulesWafExclusionRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.waf_exclusion_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_exclusion_rules"] = vFn

	vrhBlockedClients := v.BlockedClientsValidationRuleHandler
	rulesBlockedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhBlockedClients(rulesBlockedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.blocked_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_clients"] = vFn

	vrhTrustedClients := v.TrustedClientsValidationRuleHandler
	rulesTrustedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhTrustedClients(rulesTrustedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.trusted_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trusted_clients"] = vFn

	vrhDdosMitigationRules := v.DdosMitigationRulesValidationRuleHandler
	rulesDdosMitigationRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDdosMitigationRules(rulesDdosMitigationRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ddos_mitigation_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ddos_mitigation_rules"] = vFn

	vrhDataGuardRules := v.DataGuardRulesValidationRuleHandler
	rulesDataGuardRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDataGuardRules(rulesDataGuardRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.data_guard_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["data_guard_rules"] = vFn

	vrhGraphqlRules := v.GraphqlRulesValidationRuleHandler
	rulesGraphqlRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhGraphqlRules(rulesGraphqlRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.graphql_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["graphql_rules"] = vFn

	vrhProtectedCookies := v.ProtectedCookiesValidationRuleHandler
	rulesProtectedCookies := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhProtectedCookies(rulesProtectedCookies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.protected_cookies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protected_cookies"] = vFn

	v.FldValidators["advertise_choice.advertise_on_public"] = ves_io_schema_views.AdvertisePublicValidator().Validate
	v.FldValidators["advertise_choice.advertise_custom"] = ves_io_schema_views.AdvertiseCustomValidator().Validate

	v.FldValidators["api_definition_choice.api_definitions"] = ves_io_schema_views_common_waf.ApiDefinitionListValidator().Validate
	v.FldValidators["api_definition_choice.api_specification"] = ves_io_schema_views_common_waf.APISpecificationSettingsValidator().Validate
	v.FldValidators["api_definition_choice.api_definition"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_discovery_choice.enable_api_discovery"] = ves_io_schema_views_common_waf.ApiDiscoverySettingValidator().Validate

	v.FldValidators["bot_defense_choice.bot_defense"] = ves_io_schema_views_common_security.ShapeBotDefenseTypeValidator().Validate
	v.FldValidators["bot_defense_choice.bot_defense_advanced"] = ves_io_schema_views_common_security.BotDefenseAdvancedTypeValidator().Validate

	v.FldValidators["challenge_type.js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.captcha_challenge"] = ves_io_schema_virtual_host.CaptchaChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.policy_based_challenge"] = ves_io_schema_views_common_waf.PolicyBasedChallengeValidator().Validate
	v.FldValidators["challenge_type.enable_challenge"] = ves_io_schema_views_common_waf.EnableChallengeValidator().Validate

	v.FldValidators["client_side_defense_choice.client_side_defense"] = ves_io_schema_views_common_security.ClientSideDefenseTypeValidator().Validate

	v.FldValidators["hash_policy_choice.cookie_stickiness"] = ves_io_schema_route.CookieForHashingValidator().Validate
	v.FldValidators["hash_policy_choice.ring_hash"] = HashPolicyListTypeValidator().Validate

	v.FldValidators["ip_reputation_choice.enable_ip_reputation"] = ves_io_schema_views_common_waf.IPThreatCategoryListTypeValidator().Validate

	v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate

	v.FldValidators["loadbalancer_type.http"] = ProxyTypeHttpValidator().Validate
	v.FldValidators["loadbalancer_type.https"] = ProxyTypeHttpsValidator().Validate
	v.FldValidators["loadbalancer_type.https_auto_cert"] = ProxyTypeHttpsAutoCertsValidator().Validate

	v.FldValidators["ml_config_choice.single_lb_app"] = SingleLoadBalancerAppSettingValidator().Validate

	v.FldValidators["origin_pool_choice.default_pool"] = ves_io_schema_views_origin_pool.GlobalSpecTypeValidator().Validate
	v.FldValidators["origin_pool_choice.default_pool_list"] = ves_io_schema_views.OriginPoolListTypeValidator().Validate

	v.FldValidators["rate_limit_choice.rate_limit"] = ves_io_schema_views_common_waf.RateLimitConfigTypeValidator().Validate
	v.FldValidators["rate_limit_choice.api_rate_limit"] = ves_io_schema_views_common_waf.APIRateLimitValidator().Validate

	v.FldValidators["sensitive_data_policy_choice.sensitive_data_policy"] = ves_io_schema_views_common_security.SensitiveDataPolicySettingsValidator().Validate

	v.FldValidators["service_policy_choice.active_service_policies"] = ves_io_schema_views_common_waf.ServicePolicyListValidator().Validate

	v.FldValidators["slow_ddos_mitigation_choice.slow_ddos_mitigation"] = ves_io_schema_virtual_host.SlowDDoSMitigationValidator().Validate

	v.FldValidators["trust_client_ip_headers_choice.enable_trust_client_ip_headers"] = ves_io_schema_virtual_host.ClientIPHeadersValidator().Validate

	v.FldValidators["user_id_choice.user_identification"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["waf_choice.app_firewall"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cors_policy"] = ves_io_schema.CorsPolicyValidator().Validate

	v.FldValidators["more_option"] = AdvancedOptionsTypeValidator().Validate

	v.FldValidators["malicious_user_mitigation"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_rate_limit_legacy"] = ves_io_schema_views_common_waf.APIRateLimitLegacyValidator().Validate

	v.FldValidators["api_protection_rules"] = ves_io_schema_views_common_waf.APIProtectionRulesValidator().Validate

	v.FldValidators["csrf_policy"] = ves_io_schema.CsrfPolicyValidator().Validate

	v.FldValidators["jwt_validation"] = ves_io_schema_views_common_waf.JWTValidationValidator().Validate

	v.FldValidators["origin_server_subset_rule_list"] = OriginServerSubsetRuleListTypeValidator().Validate

	v.FldValidators["sensitive_data_disclosure_rules"] = SensitiveDataDisclosureRulesValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["dns_info"] = ves_io_schema_virtual_host_dns_info.DnsInfoValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *HashPolicyListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HashPolicyListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *HashPolicyListType) DeepCopy() *HashPolicyListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HashPolicyListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HashPolicyListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HashPolicyListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HashPolicyListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateHashPolicyListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHashPolicyListType) HashPolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for hash_policy")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_route.HashPolicyType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_route.HashPolicyTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for hash_policy")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_route.HashPolicyType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_route.HashPolicyType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated hash_policy")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items hash_policy")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHashPolicyListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HashPolicyListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HashPolicyListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["hash_policy"]; exists {
		vOpts := append(opts, db.WithValidateField("hash_policy"))
		if err := fv(ctx, m.GetHashPolicy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHashPolicyListTypeValidator = func() *ValidateHashPolicyListType {
	v := &ValidateHashPolicyListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHashPolicy := v.HashPolicyValidationRuleHandler
	rulesHashPolicy := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhHashPolicy(rulesHashPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HashPolicyListType.hash_policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy"] = vFn

	return v
}()

func HashPolicyListTypeValidator() db.Validator {
	return DefaultHashPolicyListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *MirrorPolicyType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MirrorPolicyType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MirrorPolicyType) DeepCopy() *MirrorPolicyType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MirrorPolicyType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MirrorPolicyType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MirrorPolicyType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MirrorPolicyTypeValidator().Validate(ctx, m, opts...)
}

func (m *MirrorPolicyType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetOriginPoolDRefInfo()

}

func (m *MirrorPolicyType) GetOriginPoolDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetOriginPool()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("origin_pool.Object")
	dri := db.DRefInfo{
		RefdType:   "origin_pool.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "origin_pool",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetOriginPoolDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *MirrorPolicyType) GetOriginPoolDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "origin_pool.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: origin_pool")
	}

	vref := m.GetOriginPool()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "origin_pool.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateMirrorPolicyType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMirrorPolicyType) OriginPoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for origin_pool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateMirrorPolicyType) PercentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for percent")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.FractionalPercentValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateMirrorPolicyType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MirrorPolicyType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MirrorPolicyType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["origin_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("origin_pool"))
		if err := fv(ctx, m.GetOriginPool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["percent"]; exists {

		vOpts := append(opts, db.WithValidateField("percent"))
		if err := fv(ctx, m.GetPercent(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMirrorPolicyTypeValidator = func() *ValidateMirrorPolicyType {
	v := &ValidateMirrorPolicyType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhOriginPool := v.OriginPoolValidationRuleHandler
	rulesOriginPool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhOriginPool(rulesOriginPool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MirrorPolicyType.origin_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_pool"] = vFn

	vrhPercent := v.PercentValidationRuleHandler
	rulesPercent := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPercent(rulesPercent)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MirrorPolicyType.percent: %s", err)
		panic(errMsg)
	}
	v.FldValidators["percent"] = vFn

	return v
}()

func MirrorPolicyTypeValidator() db.Validator {
	return DefaultMirrorPolicyTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *OriginServerSubsetRuleListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OriginServerSubsetRuleListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OriginServerSubsetRuleListType) DeepCopy() *OriginServerSubsetRuleListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OriginServerSubsetRuleListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OriginServerSubsetRuleListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OriginServerSubsetRuleListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OriginServerSubsetRuleListTypeValidator().Validate(ctx, m, opts...)
}

func (m *OriginServerSubsetRuleListType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetOriginServerSubsetRulesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *OriginServerSubsetRuleListType) GetOriginServerSubsetRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginServerSubsetRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetOriginServerSubsetRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOriginServerSubsetRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("origin_server_subset_rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateOriginServerSubsetRuleListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOriginServerSubsetRuleListType) OriginServerSubsetRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for origin_server_subset_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.OriginServerSubsetRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.OriginServerSubsetRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for origin_server_subset_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.OriginServerSubsetRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.OriginServerSubsetRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated origin_server_subset_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items origin_server_subset_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateOriginServerSubsetRuleListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OriginServerSubsetRuleListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OriginServerSubsetRuleListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["origin_server_subset_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("origin_server_subset_rules"))
		if err := fv(ctx, m.GetOriginServerSubsetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOriginServerSubsetRuleListTypeValidator = func() *ValidateOriginServerSubsetRuleListType {
	v := &ValidateOriginServerSubsetRuleListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhOriginServerSubsetRules := v.OriginServerSubsetRulesValidationRuleHandler
	rulesOriginServerSubsetRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhOriginServerSubsetRules(rulesOriginServerSubsetRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OriginServerSubsetRuleListType.origin_server_subset_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_server_subset_rules"] = vFn

	return v
}()

func OriginServerSubsetRuleListTypeValidator() db.Validator {
	return DefaultOriginServerSubsetRuleListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ProxyTypeHttp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ProxyTypeHttp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ProxyTypeHttp) DeepCopy() *ProxyTypeHttp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ProxyTypeHttp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ProxyTypeHttp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ProxyTypeHttp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ProxyTypeHttpValidator().Validate(ctx, m, opts...)
}

type ValidateProxyTypeHttp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateProxyTypeHttp) PortChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port_choice")
	}
	return validatorFn, nil
}

func (v *ValidateProxyTypeHttp) PortChoicePortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Port, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}
	return oValidatorFn_Port, nil
}
func (v *ValidateProxyTypeHttp) PortChoicePortRangesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_PortRanges, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port_ranges")
	}
	return oValidatorFn_PortRanges, nil
}

func (v *ValidateProxyTypeHttp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ProxyTypeHttp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ProxyTypeHttp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_volterra_managed"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_volterra_managed"))
		if err := fv(ctx, m.GetDnsVolterraManaged(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_choice"]; exists {
		val := m.GetPortChoice()
		vOpts := append(opts,
			db.WithValidateField("port_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPortChoice().(type) {
	case *ProxyTypeHttp_Port:
		if fv, exists := v.FldValidators["port_choice.port"]; exists {
			val := m.GetPortChoice().(*ProxyTypeHttp_Port).Port
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttp_PortRanges:
		if fv, exists := v.FldValidators["port_choice.port_ranges"]; exists {
			val := m.GetPortChoice().(*ProxyTypeHttp_PortRanges).PortRanges
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port_ranges"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultProxyTypeHttpValidator = func() *ValidateProxyTypeHttp {
	v := &ValidateProxyTypeHttp{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPortChoice := v.PortChoiceValidationRuleHandler
	rulesPortChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPortChoice(rulesPortChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProxyTypeHttp.port_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port_choice"] = vFn

	vrhPortChoicePort := v.PortChoicePortValidationRuleHandler
	rulesPortChoicePort := map[string]string{
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFnMap["port_choice.port"], err = vrhPortChoicePort(rulesPortChoicePort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttp.port_choice_port: %s", err)
		panic(errMsg)
	}
	vrhPortChoicePortRanges := v.PortChoicePortRangesValidationRuleHandler
	rulesPortChoicePortRanges := map[string]string{
		"ves.io.schema.rules.string.max_len":                "512",
		"ves.io.schema.rules.string.max_ports":              "64",
		"ves.io.schema.rules.string.min_len":                "1",
		"ves.io.schema.rules.string.unique_port_range_list": "true",
	}
	vFnMap["port_choice.port_ranges"], err = vrhPortChoicePortRanges(rulesPortChoicePortRanges)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttp.port_choice_port_ranges: %s", err)
		panic(errMsg)
	}

	v.FldValidators["port_choice.port"] = vFnMap["port_choice.port"]
	v.FldValidators["port_choice.port_ranges"] = vFnMap["port_choice.port_ranges"]

	return v
}()

func ProxyTypeHttpValidator() db.Validator {
	return DefaultProxyTypeHttpValidator
}

// augmented methods on protoc/std generated struct

func (m *ProxyTypeHttps) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ProxyTypeHttps) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ProxyTypeHttps) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetTlsParameters().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ProxyTypeHttps.tls_parameters")
	}

	return nil
}

func (m *ProxyTypeHttps) DeepCopy() *ProxyTypeHttps {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ProxyTypeHttps{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ProxyTypeHttps) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ProxyTypeHttps) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ProxyTypeHttpsValidator().Validate(ctx, m, opts...)
}

func (m *ProxyTypeHttps) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetTlsCertificatesChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ProxyTypeHttps) GetTlsCertificatesChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetTlsCertificatesChoice() == nil {
		return nil, nil
	}
	switch m.GetTlsCertificatesChoice().(type) {
	case *ProxyTypeHttps_TlsParameters:

		drInfos, err := m.GetTlsParameters().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetTlsParameters().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "tls_parameters." + dri.DRField
		}
		return drInfos, err

	case *ProxyTypeHttps_TlsCertParams:

		drInfos, err := m.GetTlsCertParams().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetTlsCertParams().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "tls_cert_params." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateProxyTypeHttps struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateProxyTypeHttps) PathNormalizeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for path_normalize_choice")
	}
	return validatorFn, nil
}

func (v *ValidateProxyTypeHttps) PortChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port_choice")
	}
	return validatorFn, nil
}

func (v *ValidateProxyTypeHttps) PortChoicePortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Port, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}
	return oValidatorFn_Port, nil
}
func (v *ValidateProxyTypeHttps) PortChoicePortRangesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_PortRanges, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port_ranges")
	}
	return oValidatorFn_PortRanges, nil
}

func (v *ValidateProxyTypeHttps) ServerHeaderChoiceServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}
	return oValidatorFn_ServerName, nil
}
func (v *ValidateProxyTypeHttps) ServerHeaderChoiceAppendServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AppendServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for append_server_name")
	}
	return oValidatorFn_AppendServerName, nil
}

func (v *ValidateProxyTypeHttps) TlsCertificatesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tls_certificates_choice")
	}
	return validatorFn, nil
}

func (v *ValidateProxyTypeHttps) ConnectionIdleTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for connection_idle_timeout")
	}

	return validatorFn, nil
}

func (v *ValidateProxyTypeHttps) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ProxyTypeHttps)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ProxyTypeHttps got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_hsts"]; exists {

		vOpts := append(opts, db.WithValidateField("add_hsts"))
		if err := fv(ctx, m.GetAddHsts(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_idle_timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("connection_idle_timeout"))
		if err := fv(ctx, m.GetConnectionIdleTimeout(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetDefaultLbChoice().(type) {
	case *ProxyTypeHttps_NonDefaultLoadbalancer:
		if fv, exists := v.FldValidators["default_lb_choice.non_default_loadbalancer"]; exists {
			val := m.GetDefaultLbChoice().(*ProxyTypeHttps_NonDefaultLoadbalancer).NonDefaultLoadbalancer
			vOpts := append(opts,
				db.WithValidateField("default_lb_choice"),
				db.WithValidateField("non_default_loadbalancer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_DefaultLoadbalancer:
		if fv, exists := v.FldValidators["default_lb_choice.default_loadbalancer"]; exists {
			val := m.GetDefaultLbChoice().(*ProxyTypeHttps_DefaultLoadbalancer).DefaultLoadbalancer
			vOpts := append(opts,
				db.WithValidateField("default_lb_choice"),
				db.WithValidateField("default_loadbalancer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["header_transformation_type"]; exists {

		vOpts := append(opts, db.WithValidateField("header_transformation_type"))
		if err := fv(ctx, m.GetHeaderTransformationType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_protocol_options"]; exists {

		vOpts := append(opts, db.WithValidateField("http_protocol_options"))
		if err := fv(ctx, m.GetHttpProtocolOptions(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_redirect"]; exists {

		vOpts := append(opts, db.WithValidateField("http_redirect"))
		if err := fv(ctx, m.GetHttpRedirect(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path_normalize_choice"]; exists {
		val := m.GetPathNormalizeChoice()
		vOpts := append(opts,
			db.WithValidateField("path_normalize_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPathNormalizeChoice().(type) {
	case *ProxyTypeHttps_EnablePathNormalize:
		if fv, exists := v.FldValidators["path_normalize_choice.enable_path_normalize"]; exists {
			val := m.GetPathNormalizeChoice().(*ProxyTypeHttps_EnablePathNormalize).EnablePathNormalize
			vOpts := append(opts,
				db.WithValidateField("path_normalize_choice"),
				db.WithValidateField("enable_path_normalize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_DisablePathNormalize:
		if fv, exists := v.FldValidators["path_normalize_choice.disable_path_normalize"]; exists {
			val := m.GetPathNormalizeChoice().(*ProxyTypeHttps_DisablePathNormalize).DisablePathNormalize
			vOpts := append(opts,
				db.WithValidateField("path_normalize_choice"),
				db.WithValidateField("disable_path_normalize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["port_choice"]; exists {
		val := m.GetPortChoice()
		vOpts := append(opts,
			db.WithValidateField("port_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPortChoice().(type) {
	case *ProxyTypeHttps_Port:
		if fv, exists := v.FldValidators["port_choice.port"]; exists {
			val := m.GetPortChoice().(*ProxyTypeHttps_Port).Port
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_PortRanges:
		if fv, exists := v.FldValidators["port_choice.port_ranges"]; exists {
			val := m.GetPortChoice().(*ProxyTypeHttps_PortRanges).PortRanges
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port_ranges"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetServerHeaderChoice().(type) {
	case *ProxyTypeHttps_DefaultHeader:
		if fv, exists := v.FldValidators["server_header_choice.default_header"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttps_DefaultHeader).DefaultHeader
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("default_header"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_ServerName:
		if fv, exists := v.FldValidators["server_header_choice.server_name"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttps_ServerName).ServerName
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_AppendServerName:
		if fv, exists := v.FldValidators["server_header_choice.append_server_name"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttps_AppendServerName).AppendServerName
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("append_server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_PassThrough:
		if fv, exists := v.FldValidators["server_header_choice.pass_through"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttps_PassThrough).PassThrough
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("pass_through"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tls_certificates_choice"]; exists {
		val := m.GetTlsCertificatesChoice()
		vOpts := append(opts,
			db.WithValidateField("tls_certificates_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTlsCertificatesChoice().(type) {
	case *ProxyTypeHttps_TlsParameters:
		if fv, exists := v.FldValidators["tls_certificates_choice.tls_parameters"]; exists {
			val := m.GetTlsCertificatesChoice().(*ProxyTypeHttps_TlsParameters).TlsParameters
			vOpts := append(opts,
				db.WithValidateField("tls_certificates_choice"),
				db.WithValidateField("tls_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_TlsCertParams:
		if fv, exists := v.FldValidators["tls_certificates_choice.tls_cert_params"]; exists {
			val := m.GetTlsCertificatesChoice().(*ProxyTypeHttps_TlsCertParams).TlsCertParams
			vOpts := append(opts,
				db.WithValidateField("tls_certificates_choice"),
				db.WithValidateField("tls_cert_params"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultProxyTypeHttpsValidator = func() *ValidateProxyTypeHttps {
	v := &ValidateProxyTypeHttps{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPathNormalizeChoice := v.PathNormalizeChoiceValidationRuleHandler
	rulesPathNormalizeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPathNormalizeChoice(rulesPathNormalizeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProxyTypeHttps.path_normalize_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path_normalize_choice"] = vFn

	vrhPortChoice := v.PortChoiceValidationRuleHandler
	rulesPortChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPortChoice(rulesPortChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProxyTypeHttps.port_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port_choice"] = vFn

	vrhPortChoicePort := v.PortChoicePortValidationRuleHandler
	rulesPortChoicePort := map[string]string{
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFnMap["port_choice.port"], err = vrhPortChoicePort(rulesPortChoicePort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttps.port_choice_port: %s", err)
		panic(errMsg)
	}
	vrhPortChoicePortRanges := v.PortChoicePortRangesValidationRuleHandler
	rulesPortChoicePortRanges := map[string]string{
		"ves.io.schema.rules.string.max_len":                "512",
		"ves.io.schema.rules.string.max_ports":              "64",
		"ves.io.schema.rules.string.min_len":                "1",
		"ves.io.schema.rules.string.unique_port_range_list": "true",
	}
	vFnMap["port_choice.port_ranges"], err = vrhPortChoicePortRanges(rulesPortChoicePortRanges)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttps.port_choice_port_ranges: %s", err)
		panic(errMsg)
	}

	v.FldValidators["port_choice.port"] = vFnMap["port_choice.port"]
	v.FldValidators["port_choice.port_ranges"] = vFnMap["port_choice.port_ranges"]

	vrhServerHeaderChoiceServerName := v.ServerHeaderChoiceServerNameValidationRuleHandler
	rulesServerHeaderChoiceServerName := map[string]string{
		"ves.io.schema.rules.string.max_len": "8096",
	}
	vFnMap["server_header_choice.server_name"], err = vrhServerHeaderChoiceServerName(rulesServerHeaderChoiceServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttps.server_header_choice_server_name: %s", err)
		panic(errMsg)
	}
	vrhServerHeaderChoiceAppendServerName := v.ServerHeaderChoiceAppendServerNameValidationRuleHandler
	rulesServerHeaderChoiceAppendServerName := map[string]string{
		"ves.io.schema.rules.string.max_len": "8096",
	}
	vFnMap["server_header_choice.append_server_name"], err = vrhServerHeaderChoiceAppendServerName(rulesServerHeaderChoiceAppendServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttps.server_header_choice_append_server_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["server_header_choice.server_name"] = vFnMap["server_header_choice.server_name"]
	v.FldValidators["server_header_choice.append_server_name"] = vFnMap["server_header_choice.append_server_name"]

	vrhTlsCertificatesChoice := v.TlsCertificatesChoiceValidationRuleHandler
	rulesTlsCertificatesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTlsCertificatesChoice(rulesTlsCertificatesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProxyTypeHttps.tls_certificates_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_certificates_choice"] = vFn

	vrhConnectionIdleTimeout := v.ConnectionIdleTimeoutValidationRuleHandler
	rulesConnectionIdleTimeout := map[string]string{
		"ves.io.schema.rules.uint32.lte": "600000",
	}
	vFn, err = vrhConnectionIdleTimeout(rulesConnectionIdleTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProxyTypeHttps.connection_idle_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connection_idle_timeout"] = vFn

	v.FldValidators["tls_certificates_choice.tls_parameters"] = ves_io_schema_views.DownstreamTlsParamsTypeValidator().Validate
	v.FldValidators["tls_certificates_choice.tls_cert_params"] = ves_io_schema_views.DownstreamTLSCertsParamsValidator().Validate

	v.FldValidators["header_transformation_type"] = ves_io_schema.HeaderTransformationTypeValidator().Validate

	v.FldValidators["http_protocol_options"] = ves_io_schema_virtual_host.HttpProtocolOptionsValidator().Validate

	return v
}()

func ProxyTypeHttpsValidator() db.Validator {
	return DefaultProxyTypeHttpsValidator
}

// augmented methods on protoc/std generated struct

func (m *ProxyTypeHttpsAutoCerts) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ProxyTypeHttpsAutoCerts) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ProxyTypeHttpsAutoCerts) DeepCopy() *ProxyTypeHttpsAutoCerts {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ProxyTypeHttpsAutoCerts{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ProxyTypeHttpsAutoCerts) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ProxyTypeHttpsAutoCerts) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ProxyTypeHttpsAutoCertsValidator().Validate(ctx, m, opts...)
}

func (m *ProxyTypeHttpsAutoCerts) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetMtlsChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ProxyTypeHttpsAutoCerts) GetMtlsChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMtlsChoice() == nil {
		return nil, nil
	}
	switch m.GetMtlsChoice().(type) {
	case *ProxyTypeHttpsAutoCerts_NoMtls:

		return nil, nil

	case *ProxyTypeHttpsAutoCerts_UseMtls:

		drInfos, err := m.GetUseMtls().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetUseMtls().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "use_mtls." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateProxyTypeHttpsAutoCerts struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateProxyTypeHttpsAutoCerts) MtlsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mtls_choice")
	}
	return validatorFn, nil
}

func (v *ValidateProxyTypeHttpsAutoCerts) PathNormalizeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for path_normalize_choice")
	}
	return validatorFn, nil
}

func (v *ValidateProxyTypeHttpsAutoCerts) PortChoicePortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Port, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}
	return oValidatorFn_Port, nil
}
func (v *ValidateProxyTypeHttpsAutoCerts) PortChoicePortRangesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_PortRanges, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port_ranges")
	}
	return oValidatorFn_PortRanges, nil
}

func (v *ValidateProxyTypeHttpsAutoCerts) ServerHeaderChoiceServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}
	return oValidatorFn_ServerName, nil
}
func (v *ValidateProxyTypeHttpsAutoCerts) ServerHeaderChoiceAppendServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AppendServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for append_server_name")
	}
	return oValidatorFn_AppendServerName, nil
}

func (v *ValidateProxyTypeHttpsAutoCerts) ConnectionIdleTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for connection_idle_timeout")
	}

	return validatorFn, nil
}

func (v *ValidateProxyTypeHttpsAutoCerts) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ProxyTypeHttpsAutoCerts)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ProxyTypeHttpsAutoCerts got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_hsts"]; exists {

		vOpts := append(opts, db.WithValidateField("add_hsts"))
		if err := fv(ctx, m.GetAddHsts(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_idle_timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("connection_idle_timeout"))
		if err := fv(ctx, m.GetConnectionIdleTimeout(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetDefaultLbChoice().(type) {
	case *ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer:
		if fv, exists := v.FldValidators["default_lb_choice.non_default_loadbalancer"]; exists {
			val := m.GetDefaultLbChoice().(*ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer).NonDefaultLoadbalancer
			vOpts := append(opts,
				db.WithValidateField("default_lb_choice"),
				db.WithValidateField("non_default_loadbalancer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_DefaultLoadbalancer:
		if fv, exists := v.FldValidators["default_lb_choice.default_loadbalancer"]; exists {
			val := m.GetDefaultLbChoice().(*ProxyTypeHttpsAutoCerts_DefaultLoadbalancer).DefaultLoadbalancer
			vOpts := append(opts,
				db.WithValidateField("default_lb_choice"),
				db.WithValidateField("default_loadbalancer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["header_transformation_type"]; exists {

		vOpts := append(opts, db.WithValidateField("header_transformation_type"))
		if err := fv(ctx, m.GetHeaderTransformationType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_protocol_options"]; exists {

		vOpts := append(opts, db.WithValidateField("http_protocol_options"))
		if err := fv(ctx, m.GetHttpProtocolOptions(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_redirect"]; exists {

		vOpts := append(opts, db.WithValidateField("http_redirect"))
		if err := fv(ctx, m.GetHttpRedirect(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mtls_choice"]; exists {
		val := m.GetMtlsChoice()
		vOpts := append(opts,
			db.WithValidateField("mtls_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMtlsChoice().(type) {
	case *ProxyTypeHttpsAutoCerts_NoMtls:
		if fv, exists := v.FldValidators["mtls_choice.no_mtls"]; exists {
			val := m.GetMtlsChoice().(*ProxyTypeHttpsAutoCerts_NoMtls).NoMtls
			vOpts := append(opts,
				db.WithValidateField("mtls_choice"),
				db.WithValidateField("no_mtls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_UseMtls:
		if fv, exists := v.FldValidators["mtls_choice.use_mtls"]; exists {
			val := m.GetMtlsChoice().(*ProxyTypeHttpsAutoCerts_UseMtls).UseMtls
			vOpts := append(opts,
				db.WithValidateField("mtls_choice"),
				db.WithValidateField("use_mtls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["path_normalize_choice"]; exists {
		val := m.GetPathNormalizeChoice()
		vOpts := append(opts,
			db.WithValidateField("path_normalize_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPathNormalizeChoice().(type) {
	case *ProxyTypeHttpsAutoCerts_EnablePathNormalize:
		if fv, exists := v.FldValidators["path_normalize_choice.enable_path_normalize"]; exists {
			val := m.GetPathNormalizeChoice().(*ProxyTypeHttpsAutoCerts_EnablePathNormalize).EnablePathNormalize
			vOpts := append(opts,
				db.WithValidateField("path_normalize_choice"),
				db.WithValidateField("enable_path_normalize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_DisablePathNormalize:
		if fv, exists := v.FldValidators["path_normalize_choice.disable_path_normalize"]; exists {
			val := m.GetPathNormalizeChoice().(*ProxyTypeHttpsAutoCerts_DisablePathNormalize).DisablePathNormalize
			vOpts := append(opts,
				db.WithValidateField("path_normalize_choice"),
				db.WithValidateField("disable_path_normalize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetPortChoice().(type) {
	case *ProxyTypeHttpsAutoCerts_Port:
		if fv, exists := v.FldValidators["port_choice.port"]; exists {
			val := m.GetPortChoice().(*ProxyTypeHttpsAutoCerts_Port).Port
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_PortRanges:
		if fv, exists := v.FldValidators["port_choice.port_ranges"]; exists {
			val := m.GetPortChoice().(*ProxyTypeHttpsAutoCerts_PortRanges).PortRanges
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port_ranges"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetServerHeaderChoice().(type) {
	case *ProxyTypeHttpsAutoCerts_DefaultHeader:
		if fv, exists := v.FldValidators["server_header_choice.default_header"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_DefaultHeader).DefaultHeader
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("default_header"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_ServerName:
		if fv, exists := v.FldValidators["server_header_choice.server_name"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_ServerName).ServerName
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_AppendServerName:
		if fv, exists := v.FldValidators["server_header_choice.append_server_name"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_AppendServerName).AppendServerName
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("append_server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_PassThrough:
		if fv, exists := v.FldValidators["server_header_choice.pass_through"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_PassThrough).PassThrough
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("pass_through"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tls_config"]; exists {

		vOpts := append(opts, db.WithValidateField("tls_config"))
		if err := fv(ctx, m.GetTlsConfig(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultProxyTypeHttpsAutoCertsValidator = func() *ValidateProxyTypeHttpsAutoCerts {
	v := &ValidateProxyTypeHttpsAutoCerts{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMtlsChoice := v.MtlsChoiceValidationRuleHandler
	rulesMtlsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMtlsChoice(rulesMtlsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProxyTypeHttpsAutoCerts.mtls_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mtls_choice"] = vFn

	vrhPathNormalizeChoice := v.PathNormalizeChoiceValidationRuleHandler
	rulesPathNormalizeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPathNormalizeChoice(rulesPathNormalizeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProxyTypeHttpsAutoCerts.path_normalize_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path_normalize_choice"] = vFn

	vrhPortChoicePort := v.PortChoicePortValidationRuleHandler
	rulesPortChoicePort := map[string]string{
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFnMap["port_choice.port"], err = vrhPortChoicePort(rulesPortChoicePort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttpsAutoCerts.port_choice_port: %s", err)
		panic(errMsg)
	}
	vrhPortChoicePortRanges := v.PortChoicePortRangesValidationRuleHandler
	rulesPortChoicePortRanges := map[string]string{
		"ves.io.schema.rules.string.max_len":                "512",
		"ves.io.schema.rules.string.max_ports":              "64",
		"ves.io.schema.rules.string.min_len":                "1",
		"ves.io.schema.rules.string.unique_port_range_list": "true",
	}
	vFnMap["port_choice.port_ranges"], err = vrhPortChoicePortRanges(rulesPortChoicePortRanges)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttpsAutoCerts.port_choice_port_ranges: %s", err)
		panic(errMsg)
	}

	v.FldValidators["port_choice.port"] = vFnMap["port_choice.port"]
	v.FldValidators["port_choice.port_ranges"] = vFnMap["port_choice.port_ranges"]

	vrhServerHeaderChoiceServerName := v.ServerHeaderChoiceServerNameValidationRuleHandler
	rulesServerHeaderChoiceServerName := map[string]string{
		"ves.io.schema.rules.string.max_len": "8096",
	}
	vFnMap["server_header_choice.server_name"], err = vrhServerHeaderChoiceServerName(rulesServerHeaderChoiceServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttpsAutoCerts.server_header_choice_server_name: %s", err)
		panic(errMsg)
	}
	vrhServerHeaderChoiceAppendServerName := v.ServerHeaderChoiceAppendServerNameValidationRuleHandler
	rulesServerHeaderChoiceAppendServerName := map[string]string{
		"ves.io.schema.rules.string.max_len": "8096",
	}
	vFnMap["server_header_choice.append_server_name"], err = vrhServerHeaderChoiceAppendServerName(rulesServerHeaderChoiceAppendServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttpsAutoCerts.server_header_choice_append_server_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["server_header_choice.server_name"] = vFnMap["server_header_choice.server_name"]
	v.FldValidators["server_header_choice.append_server_name"] = vFnMap["server_header_choice.append_server_name"]

	vrhConnectionIdleTimeout := v.ConnectionIdleTimeoutValidationRuleHandler
	rulesConnectionIdleTimeout := map[string]string{
		"ves.io.schema.rules.uint32.lte": "600000",
	}
	vFn, err = vrhConnectionIdleTimeout(rulesConnectionIdleTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProxyTypeHttpsAutoCerts.connection_idle_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connection_idle_timeout"] = vFn

	v.FldValidators["mtls_choice.use_mtls"] = ves_io_schema_views.DownstreamTlsValidationContextValidator().Validate

	v.FldValidators["tls_config"] = ves_io_schema_views.TlsConfigValidator().Validate

	v.FldValidators["header_transformation_type"] = ves_io_schema.HeaderTransformationTypeValidator().Validate

	v.FldValidators["http_protocol_options"] = ves_io_schema_virtual_host.HttpProtocolOptionsValidator().Validate

	return v
}()

func ProxyTypeHttpsAutoCertsValidator() db.Validator {
	return DefaultProxyTypeHttpsAutoCertsValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttps().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.https")
	}

	for idx, e := range m.GetRoutes() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting ReplaceSpecType.routes idx %v", idx)
		}
	}

	if err := m.GetMoreOption().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.more_option")
	}

	if err := m.GetDefaultPool().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.default_pool")
	}

	if err := m.GetJwtValidation().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.jwt_validation")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvertiseChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAdvertiseChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiDefinitionChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDefinitionChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiDiscoveryChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDiscoveryChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiProtectionRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiProtectionRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiRateLimitLegacyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiRateLimitLegacyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetBotDefenseChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetBotDefenseChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetChallengeTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetChallengeTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDefaultRoutePoolsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDefaultRoutePoolsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLoadbalancerTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLoadbalancerTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMaliciousUserMitigationDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMaliciousUserMitigationDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMlConfigChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMlConfigChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMoreOptionDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMoreOptionDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginPoolChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginServerSubsetRuleListDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginServerSubsetRuleListDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimitChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRateLimitChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRoutesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRoutesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSensitiveDataPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSensitiveDataPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServicePolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetServicePolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetUserIdChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetUserIdChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetWafChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetAdvertiseChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAdvertiseChoice() == nil {
		return nil, nil
	}
	switch m.GetAdvertiseChoice().(type) {
	case *ReplaceSpecType_AdvertiseOnPublic:

		drInfos, err := m.GetAdvertiseOnPublic().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAdvertiseOnPublic().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "advertise_on_public." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_AdvertiseCustom:

		drInfos, err := m.GetAdvertiseCustom().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAdvertiseCustom().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "advertise_custom." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_DoNotAdvertise:

		return nil, nil

	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetApiDefinitionChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDefinitionChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDefinitionChoice().(type) {
	case *ReplaceSpecType_ApiDefinitions:

		drInfos, err := m.GetApiDefinitions().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiDefinitions().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_definitions." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_ApiSpecification:

		drInfos, err := m.GetApiSpecification().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiSpecification().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_specification." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_DisableApiDefinition:

		return nil, nil

	case *ReplaceSpecType_ApiDefinition:

		vref := m.GetApiDefinition()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("api_definition.Object")
		dri := db.DRefInfo{
			RefdType:   "api_definition.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "api_definition",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetApiDiscoveryChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDiscoveryChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDiscoveryChoice().(type) {
	case *ReplaceSpecType_EnableApiDiscovery:

		drInfos, err := m.GetEnableApiDiscovery().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableApiDiscovery().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_api_discovery." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_DisableApiDiscovery:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetApiProtectionRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiProtectionRules() == nil {
		return nil, nil
	}

	drInfos, err := m.GetApiProtectionRules().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetApiProtectionRules().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "api_protection_rules." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetApiRateLimitLegacyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiRateLimitLegacy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetApiRateLimitLegacy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetApiRateLimitLegacy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "api_rate_limit_legacy." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetBotDefenseChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetBotDefenseChoice() == nil {
		return nil, nil
	}
	switch m.GetBotDefenseChoice().(type) {
	case *ReplaceSpecType_DisableBotDefense:

		return nil, nil

	case *ReplaceSpecType_BotDefense:

		return nil, nil

	case *ReplaceSpecType_BotDefenseAdvanced:

		drInfos, err := m.GetBotDefenseAdvanced().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetBotDefenseAdvanced().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "bot_defense_advanced." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetChallengeTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetChallengeType() == nil {
		return nil, nil
	}
	switch m.GetChallengeType().(type) {
	case *ReplaceSpecType_JsChallenge:

		return nil, nil

	case *ReplaceSpecType_CaptchaChallenge:

		return nil, nil

	case *ReplaceSpecType_NoChallenge:

		return nil, nil

	case *ReplaceSpecType_PolicyBasedChallenge:

		drInfos, err := m.GetPolicyBasedChallenge().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPolicyBasedChallenge().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "policy_based_challenge." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_EnableChallenge:

		drInfos, err := m.GetEnableChallenge().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableChallenge().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_challenge." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetDefaultRoutePoolsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDefaultRoutePools() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetDefaultRoutePools() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultRoutePools() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("default_route_pools[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetLoadbalancerTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLoadbalancerType() == nil {
		return nil, nil
	}
	switch m.GetLoadbalancerType().(type) {
	case *ReplaceSpecType_Http:

		return nil, nil

	case *ReplaceSpecType_Https:

		drInfos, err := m.GetHttps().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttps().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_HttpsAutoCert:

		drInfos, err := m.GetHttpsAutoCert().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpsAutoCert().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https_auto_cert." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *ReplaceSpecType) GetMaliciousUserMitigationDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("malicious_user_mitigation.Object")
	dri := db.DRefInfo{
		RefdType:   "malicious_user_mitigation.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "malicious_user_mitigation",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetMaliciousUserMitigationDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetMaliciousUserMitigationDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "malicious_user_mitigation.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: malicious_user_mitigation")
	}

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "malicious_user_mitigation.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetMlConfigChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMlConfigChoice() == nil {
		return nil, nil
	}
	switch m.GetMlConfigChoice().(type) {
	case *ReplaceSpecType_SingleLbApp:

		drInfos, err := m.GetSingleLbApp().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSingleLbApp().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "single_lb_app." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_MultiLbApp:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetMoreOptionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMoreOption() == nil {
		return nil, nil
	}

	drInfos, err := m.GetMoreOption().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetMoreOption().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "more_option." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetOriginPoolChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginPoolChoice() == nil {
		return nil, nil
	}
	switch m.GetOriginPoolChoice().(type) {
	case *ReplaceSpecType_DefaultPool:

		drInfos, err := m.GetDefaultPool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultPool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "default_pool." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_DefaultPoolList:

		drInfos, err := m.GetDefaultPoolList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultPoolList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "default_pool_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetOriginServerSubsetRuleListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginServerSubsetRuleList() == nil {
		return nil, nil
	}

	drInfos, err := m.GetOriginServerSubsetRuleList().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetOriginServerSubsetRuleList().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "origin_server_subset_rule_list." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetRateLimitChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRateLimitChoice() == nil {
		return nil, nil
	}
	switch m.GetRateLimitChoice().(type) {
	case *ReplaceSpecType_DisableRateLimit:

		return nil, nil

	case *ReplaceSpecType_RateLimit:

		drInfos, err := m.GetRateLimit().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRateLimit().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rate_limit." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_ApiRateLimit:

		drInfos, err := m.GetApiRateLimit().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiRateLimit().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_rate_limit." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetRoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRoutes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRoutes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetSensitiveDataPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSensitiveDataPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetSensitiveDataPolicyChoice().(type) {
	case *ReplaceSpecType_DefaultSensitiveDataPolicy:

		return nil, nil

	case *ReplaceSpecType_SensitiveDataPolicy:

		drInfos, err := m.GetSensitiveDataPolicy().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSensitiveDataPolicy().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sensitive_data_policy." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetServicePolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServicePolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetServicePolicyChoice().(type) {
	case *ReplaceSpecType_ServicePoliciesFromNamespace:

		return nil, nil

	case *ReplaceSpecType_NoServicePolicies:

		return nil, nil

	case *ReplaceSpecType_ActiveServicePolicies:

		drInfos, err := m.GetActiveServicePolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveServicePolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_service_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *ReplaceSpecType) GetUserIdChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetUserIdChoice().(type) {
	case *ReplaceSpecType_UserIdentification:

		vref := m.GetUserIdentification()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("user_identification.Object")
		dri := db.DRefInfo{
			RefdType:   "user_identification.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "user_identification",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *ReplaceSpecType_UserIdClientIp:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetUserIdChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetUserIdChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetUserIdChoice().(type) {
	case *ReplaceSpecType_UserIdentification:
		refdType, err := d.TypeForEntryKind("", "", "user_identification.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: user_identification")
		}

		vref := m.GetUserIdentification()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "user_identification.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *ReplaceSpecType_UserIdClientIp:

	}

	return entries, nil
}

func (m *ReplaceSpecType) GetWafChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetWafChoice().(type) {
	case *ReplaceSpecType_DisableWaf:

		return nil, nil

	case *ReplaceSpecType_AppFirewall:

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("app_firewall.Object")
		dri := db.DRefInfo{
			RefdType:   "app_firewall.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "app_firewall",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetWafChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetWafChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetWafChoice().(type) {
	case *ReplaceSpecType_DisableWaf:

	case *ReplaceSpecType_AppFirewall:
		refdType, err := d.TypeForEntryKind("", "", "app_firewall.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: app_firewall")
		}

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "app_firewall.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) AdvertiseChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for advertise_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ApiDefinitionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_definition_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ApiDiscoveryChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_discovery_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ChallengeTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_type")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) L7DdosAutoMitigationActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for l7_ddos_auto_mitigation_action")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) LoadbalancerTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for loadbalancer_type")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) MaliciousUserDetectionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for malicious_user_detection_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) RateLimitChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rate_limit_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) SensitiveDataPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for sensitive_data_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ServicePolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ThreatMeshChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for threat_mesh_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) TrustClientIpHeadersChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for trust_client_ip_headers_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) UserIdChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for user_id_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) WafChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for waf_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DefaultRoutePoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for default_route_pools")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_route_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_route_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_route_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RouteType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RouteTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RouteType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RouteType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) WafExclusionRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for waf_exclusion_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleWafExclusionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.SimpleWafExclusionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for waf_exclusion_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleWafExclusionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleWafExclusionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated waf_exclusion_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items waf_exclusion_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) BlockedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for blocked_clients")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views_common_waf.SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views_common_waf.SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for blocked_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views_common_waf.SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views_common_waf.SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated blocked_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items blocked_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) TrustedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for trusted_clients")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views_common_waf.SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views_common_waf.SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for trusted_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views_common_waf.SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views_common_waf.SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated trusted_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items trusted_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DdosMitigationRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ddos_mitigation_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views_common_security.DDoSMitigationRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views_common_security.DDoSMitigationRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ddos_mitigation_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views_common_security.DDoSMitigationRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views_common_security.DDoSMitigationRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ddos_mitigation_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ddos_mitigation_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DataGuardRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for data_guard_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleDataGuardRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.SimpleDataGuardRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for data_guard_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleDataGuardRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleDataGuardRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated data_guard_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items data_guard_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) GraphqlRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for graphql_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.GraphQLRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.GraphQLRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for graphql_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.GraphQLRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.GraphQLRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated graphql_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items graphql_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ProtectedCookiesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for protected_cookies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.CookieManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.CookieManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for protected_cookies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.CookieManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.CookieManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated protected_cookies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items protected_cookies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_location"]; exists {

		vOpts := append(opts, db.WithValidateField("add_location"))
		if err := fv(ctx, m.GetAddLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["advertise_choice"]; exists {
		val := m.GetAdvertiseChoice()
		vOpts := append(opts,
			db.WithValidateField("advertise_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdvertiseChoice().(type) {
	case *ReplaceSpecType_AdvertiseOnPublic:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public"]; exists {
			val := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublic).AdvertiseOnPublic
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AdvertiseCustom:
		if fv, exists := v.FldValidators["advertise_choice.advertise_custom"]; exists {
			val := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseCustom).AdvertiseCustom
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DoNotAdvertise:
		if fv, exists := v.FldValidators["advertise_choice.do_not_advertise"]; exists {
			val := m.GetAdvertiseChoice().(*ReplaceSpecType_DoNotAdvertise).DoNotAdvertise
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("do_not_advertise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public_default_vip"]; exists {
			val := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublicDefaultVip).AdvertiseOnPublicDefaultVip
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public_default_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_definition_choice"]; exists {
		val := m.GetApiDefinitionChoice()
		vOpts := append(opts,
			db.WithValidateField("api_definition_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDefinitionChoice().(type) {
	case *ReplaceSpecType_ApiDefinitions:
		if fv, exists := v.FldValidators["api_definition_choice.api_definitions"]; exists {
			val := m.GetApiDefinitionChoice().(*ReplaceSpecType_ApiDefinitions).ApiDefinitions
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_definitions"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ApiSpecification:
		if fv, exists := v.FldValidators["api_definition_choice.api_specification"]; exists {
			val := m.GetApiDefinitionChoice().(*ReplaceSpecType_ApiSpecification).ApiSpecification
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_specification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DisableApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.disable_api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*ReplaceSpecType_DisableApiDefinition).DisableApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("disable_api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*ReplaceSpecType_ApiDefinition).ApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_discovery_choice"]; exists {
		val := m.GetApiDiscoveryChoice()
		vOpts := append(opts,
			db.WithValidateField("api_discovery_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDiscoveryChoice().(type) {
	case *ReplaceSpecType_EnableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.enable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*ReplaceSpecType_EnableApiDiscovery).EnableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("enable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DisableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.disable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*ReplaceSpecType_DisableApiDiscovery).DisableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("disable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_protection_rules"]; exists {

		vOpts := append(opts, db.WithValidateField("api_protection_rules"))
		if err := fv(ctx, m.GetApiProtectionRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_rate_limit_legacy"]; exists {

		vOpts := append(opts, db.WithValidateField("api_rate_limit_legacy"))
		if err := fv(ctx, m.GetApiRateLimitLegacy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("blocked_clients"))
		if err := fv(ctx, m.GetBlockedClients(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetBotDefenseChoice().(type) {
	case *ReplaceSpecType_DisableBotDefense:
		if fv, exists := v.FldValidators["bot_defense_choice.disable_bot_defense"]; exists {
			val := m.GetBotDefenseChoice().(*ReplaceSpecType_DisableBotDefense).DisableBotDefense
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("disable_bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_BotDefense:
		if fv, exists := v.FldValidators["bot_defense_choice.bot_defense"]; exists {
			val := m.GetBotDefenseChoice().(*ReplaceSpecType_BotDefense).BotDefense
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_BotDefenseAdvanced:
		if fv, exists := v.FldValidators["bot_defense_choice.bot_defense_advanced"]; exists {
			val := m.GetBotDefenseChoice().(*ReplaceSpecType_BotDefenseAdvanced).BotDefenseAdvanced
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("bot_defense_advanced"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["challenge_type"]; exists {
		val := m.GetChallengeType()
		vOpts := append(opts,
			db.WithValidateField("challenge_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChallengeType().(type) {
	case *ReplaceSpecType_JsChallenge:
		if fv, exists := v.FldValidators["challenge_type.js_challenge"]; exists {
			val := m.GetChallengeType().(*ReplaceSpecType_JsChallenge).JsChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_CaptchaChallenge:
		if fv, exists := v.FldValidators["challenge_type.captcha_challenge"]; exists {
			val := m.GetChallengeType().(*ReplaceSpecType_CaptchaChallenge).CaptchaChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("captcha_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NoChallenge:
		if fv, exists := v.FldValidators["challenge_type.no_challenge"]; exists {
			val := m.GetChallengeType().(*ReplaceSpecType_NoChallenge).NoChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("no_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_PolicyBasedChallenge:
		if fv, exists := v.FldValidators["challenge_type.policy_based_challenge"]; exists {
			val := m.GetChallengeType().(*ReplaceSpecType_PolicyBasedChallenge).PolicyBasedChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("policy_based_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_EnableChallenge:
		if fv, exists := v.FldValidators["challenge_type.enable_challenge"]; exists {
			val := m.GetChallengeType().(*ReplaceSpecType_EnableChallenge).EnableChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("enable_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetClientSideDefenseChoice().(type) {
	case *ReplaceSpecType_DisableClientSideDefense:
		if fv, exists := v.FldValidators["client_side_defense_choice.disable_client_side_defense"]; exists {
			val := m.GetClientSideDefenseChoice().(*ReplaceSpecType_DisableClientSideDefense).DisableClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("client_side_defense_choice"),
				db.WithValidateField("disable_client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ClientSideDefense:
		if fv, exists := v.FldValidators["client_side_defense_choice.client_side_defense"]; exists {
			val := m.GetClientSideDefenseChoice().(*ReplaceSpecType_ClientSideDefense).ClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("client_side_defense_choice"),
				db.WithValidateField("client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cors_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("cors_policy"))
		if err := fv(ctx, m.GetCorsPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["csrf_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("csrf_policy"))
		if err := fv(ctx, m.GetCsrfPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["data_guard_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("data_guard_rules"))
		if err := fv(ctx, m.GetDataGuardRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ddos_mitigation_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("ddos_mitigation_rules"))
		if err := fv(ctx, m.GetDdosMitigationRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_route_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("default_route_pools"))
		if err := fv(ctx, m.GetDefaultRoutePools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["graphql_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("graphql_rules"))
		if err := fv(ctx, m.GetGraphqlRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *ReplaceSpecType_RoundRobin:
		if fv, exists := v.FldValidators["hash_policy_choice.round_robin"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_RoundRobin).RoundRobin
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("round_robin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LeastActive:
		if fv, exists := v.FldValidators["hash_policy_choice.least_active"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_LeastActive).LeastActive
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("least_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Random:
		if fv, exists := v.FldValidators["hash_policy_choice.random"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_Random).Random
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("random"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SourceIpStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.source_ip_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_SourceIpStickiness).SourceIpStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("source_ip_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_CookieStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.cookie_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_CookieStickiness).CookieStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("cookie_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_RingHash:
		if fv, exists := v.FldValidators["hash_policy_choice.ring_hash"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_RingHash).RingHash
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("ring_hash"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetIpReputationChoice().(type) {
	case *ReplaceSpecType_DisableIpReputation:
		if fv, exists := v.FldValidators["ip_reputation_choice.disable_ip_reputation"]; exists {
			val := m.GetIpReputationChoice().(*ReplaceSpecType_DisableIpReputation).DisableIpReputation
			vOpts := append(opts,
				db.WithValidateField("ip_reputation_choice"),
				db.WithValidateField("disable_ip_reputation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_EnableIpReputation:
		if fv, exists := v.FldValidators["ip_reputation_choice.enable_ip_reputation"]; exists {
			val := m.GetIpReputationChoice().(*ReplaceSpecType_EnableIpReputation).EnableIpReputation
			vOpts := append(opts,
				db.WithValidateField("ip_reputation_choice"),
				db.WithValidateField("enable_ip_reputation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["jwt_validation"]; exists {

		vOpts := append(opts, db.WithValidateField("jwt_validation"))
		if err := fv(ctx, m.GetJwtValidation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action"]; exists {
		val := m.GetL7DdosAutoMitigationAction()
		vOpts := append(opts,
			db.WithValidateField("l7_ddos_auto_mitigation_action"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetL7DdosAutoMitigationAction().(type) {
	case *ReplaceSpecType_L7DdosActionDefault:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_default"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*ReplaceSpecType_L7DdosActionDefault).L7DdosActionDefault
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_L7DdosActionBlock:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_block"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*ReplaceSpecType_L7DdosActionBlock).L7DdosActionBlock
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_block"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_L7DdosActionJsChallenge:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_js_challenge"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*ReplaceSpecType_L7DdosActionJsChallenge).L7DdosActionJsChallenge
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_L7DdosActionNone:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_none"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*ReplaceSpecType_L7DdosActionNone).L7DdosActionNone
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["loadbalancer_type"]; exists {
		val := m.GetLoadbalancerType()
		vOpts := append(opts,
			db.WithValidateField("loadbalancer_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLoadbalancerType().(type) {
	case *ReplaceSpecType_Http:
		if fv, exists := v.FldValidators["loadbalancer_type.http"]; exists {
			val := m.GetLoadbalancerType().(*ReplaceSpecType_Http).Http
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("http"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Https:
		if fv, exists := v.FldValidators["loadbalancer_type.https"]; exists {
			val := m.GetLoadbalancerType().(*ReplaceSpecType_Https).Https
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_HttpsAutoCert:
		if fv, exists := v.FldValidators["loadbalancer_type.https_auto_cert"]; exists {
			val := m.GetLoadbalancerType().(*ReplaceSpecType_HttpsAutoCert).HttpsAutoCert
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https_auto_cert"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_detection_choice"]; exists {
		val := m.GetMaliciousUserDetectionChoice()
		vOpts := append(opts,
			db.WithValidateField("malicious_user_detection_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMaliciousUserDetectionChoice().(type) {
	case *ReplaceSpecType_EnableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.enable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*ReplaceSpecType_EnableMaliciousUserDetection).EnableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("enable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DisableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.disable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*ReplaceSpecType_DisableMaliciousUserDetection).DisableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("disable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_mitigation"]; exists {

		vOpts := append(opts, db.WithValidateField("malicious_user_mitigation"))
		if err := fv(ctx, m.GetMaliciousUserMitigation(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetMlConfigChoice().(type) {
	case *ReplaceSpecType_SingleLbApp:
		if fv, exists := v.FldValidators["ml_config_choice.single_lb_app"]; exists {
			val := m.GetMlConfigChoice().(*ReplaceSpecType_SingleLbApp).SingleLbApp
			vOpts := append(opts,
				db.WithValidateField("ml_config_choice"),
				db.WithValidateField("single_lb_app"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_MultiLbApp:
		if fv, exists := v.FldValidators["ml_config_choice.multi_lb_app"]; exists {
			val := m.GetMlConfigChoice().(*ReplaceSpecType_MultiLbApp).MultiLbApp
			vOpts := append(opts,
				db.WithValidateField("ml_config_choice"),
				db.WithValidateField("multi_lb_app"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["more_option"]; exists {

		vOpts := append(opts, db.WithValidateField("more_option"))
		if err := fv(ctx, m.GetMoreOption(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetOriginPoolChoice().(type) {
	case *ReplaceSpecType_DefaultPool:
		if fv, exists := v.FldValidators["origin_pool_choice.default_pool"]; exists {
			val := m.GetOriginPoolChoice().(*ReplaceSpecType_DefaultPool).DefaultPool
			vOpts := append(opts,
				db.WithValidateField("origin_pool_choice"),
				db.WithValidateField("default_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DefaultPoolList:
		if fv, exists := v.FldValidators["origin_pool_choice.default_pool_list"]; exists {
			val := m.GetOriginPoolChoice().(*ReplaceSpecType_DefaultPoolList).DefaultPoolList
			vOpts := append(opts,
				db.WithValidateField("origin_pool_choice"),
				db.WithValidateField("default_pool_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["origin_server_subset_rule_list"]; exists {

		vOpts := append(opts, db.WithValidateField("origin_server_subset_rule_list"))
		if err := fv(ctx, m.GetOriginServerSubsetRuleList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protected_cookies"]; exists {
		vOpts := append(opts, db.WithValidateField("protected_cookies"))
		if err := fv(ctx, m.GetProtectedCookies(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limit_choice"]; exists {
		val := m.GetRateLimitChoice()
		vOpts := append(opts,
			db.WithValidateField("rate_limit_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRateLimitChoice().(type) {
	case *ReplaceSpecType_DisableRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.disable_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*ReplaceSpecType_DisableRateLimit).DisableRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("disable_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_RateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*ReplaceSpecType_RateLimit).RateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ApiRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.api_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*ReplaceSpecType_ApiRateLimit).ApiRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("api_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["routes"]; exists {
		vOpts := append(opts, db.WithValidateField("routes"))
		if err := fv(ctx, m.GetRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_disclosure_rules"]; exists {

		vOpts := append(opts, db.WithValidateField("sensitive_data_disclosure_rules"))
		if err := fv(ctx, m.GetSensitiveDataDisclosureRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_policy_choice"]; exists {
		val := m.GetSensitiveDataPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("sensitive_data_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSensitiveDataPolicyChoice().(type) {
	case *ReplaceSpecType_DefaultSensitiveDataPolicy:
		if fv, exists := v.FldValidators["sensitive_data_policy_choice.default_sensitive_data_policy"]; exists {
			val := m.GetSensitiveDataPolicyChoice().(*ReplaceSpecType_DefaultSensitiveDataPolicy).DefaultSensitiveDataPolicy
			vOpts := append(opts,
				db.WithValidateField("sensitive_data_policy_choice"),
				db.WithValidateField("default_sensitive_data_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SensitiveDataPolicy:
		if fv, exists := v.FldValidators["sensitive_data_policy_choice.sensitive_data_policy"]; exists {
			val := m.GetSensitiveDataPolicyChoice().(*ReplaceSpecType_SensitiveDataPolicy).SensitiveDataPolicy
			vOpts := append(opts,
				db.WithValidateField("sensitive_data_policy_choice"),
				db.WithValidateField("sensitive_data_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["service_policy_choice"]; exists {
		val := m.GetServicePolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("service_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServicePolicyChoice().(type) {
	case *ReplaceSpecType_ServicePoliciesFromNamespace:
		if fv, exists := v.FldValidators["service_policy_choice.service_policies_from_namespace"]; exists {
			val := m.GetServicePolicyChoice().(*ReplaceSpecType_ServicePoliciesFromNamespace).ServicePoliciesFromNamespace
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("service_policies_from_namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NoServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.no_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*ReplaceSpecType_NoServicePolicies).NoServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("no_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ActiveServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.active_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*ReplaceSpecType_ActiveServicePolicies).ActiveServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("active_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetSlowDdosMitigationChoice().(type) {
	case *ReplaceSpecType_SlowDdosMitigation:
		if fv, exists := v.FldValidators["slow_ddos_mitigation_choice.slow_ddos_mitigation"]; exists {
			val := m.GetSlowDdosMitigationChoice().(*ReplaceSpecType_SlowDdosMitigation).SlowDdosMitigation
			vOpts := append(opts,
				db.WithValidateField("slow_ddos_mitigation_choice"),
				db.WithValidateField("slow_ddos_mitigation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SystemDefaultTimeouts:
		if fv, exists := v.FldValidators["slow_ddos_mitigation_choice.system_default_timeouts"]; exists {
			val := m.GetSlowDdosMitigationChoice().(*ReplaceSpecType_SystemDefaultTimeouts).SystemDefaultTimeouts
			vOpts := append(opts,
				db.WithValidateField("slow_ddos_mitigation_choice"),
				db.WithValidateField("system_default_timeouts"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["threat_mesh_choice"]; exists {
		val := m.GetThreatMeshChoice()
		vOpts := append(opts,
			db.WithValidateField("threat_mesh_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetThreatMeshChoice().(type) {
	case *ReplaceSpecType_DisableThreatMesh:
		if fv, exists := v.FldValidators["threat_mesh_choice.disable_threat_mesh"]; exists {
			val := m.GetThreatMeshChoice().(*ReplaceSpecType_DisableThreatMesh).DisableThreatMesh
			vOpts := append(opts,
				db.WithValidateField("threat_mesh_choice"),
				db.WithValidateField("disable_threat_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_EnableThreatMesh:
		if fv, exists := v.FldValidators["threat_mesh_choice.enable_threat_mesh"]; exists {
			val := m.GetThreatMeshChoice().(*ReplaceSpecType_EnableThreatMesh).EnableThreatMesh
			vOpts := append(opts,
				db.WithValidateField("threat_mesh_choice"),
				db.WithValidateField("enable_threat_mesh"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["trust_client_ip_headers_choice"]; exists {
		val := m.GetTrustClientIpHeadersChoice()
		vOpts := append(opts,
			db.WithValidateField("trust_client_ip_headers_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTrustClientIpHeadersChoice().(type) {
	case *ReplaceSpecType_DisableTrustClientIpHeaders:
		if fv, exists := v.FldValidators["trust_client_ip_headers_choice.disable_trust_client_ip_headers"]; exists {
			val := m.GetTrustClientIpHeadersChoice().(*ReplaceSpecType_DisableTrustClientIpHeaders).DisableTrustClientIpHeaders
			vOpts := append(opts,
				db.WithValidateField("trust_client_ip_headers_choice"),
				db.WithValidateField("disable_trust_client_ip_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_EnableTrustClientIpHeaders:
		if fv, exists := v.FldValidators["trust_client_ip_headers_choice.enable_trust_client_ip_headers"]; exists {
			val := m.GetTrustClientIpHeadersChoice().(*ReplaceSpecType_EnableTrustClientIpHeaders).EnableTrustClientIpHeaders
			vOpts := append(opts,
				db.WithValidateField("trust_client_ip_headers_choice"),
				db.WithValidateField("enable_trust_client_ip_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["trusted_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("trusted_clients"))
		if err := fv(ctx, m.GetTrustedClients(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_id_choice"]; exists {
		val := m.GetUserIdChoice()
		vOpts := append(opts,
			db.WithValidateField("user_id_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetUserIdChoice().(type) {
	case *ReplaceSpecType_UserIdentification:
		if fv, exists := v.FldValidators["user_id_choice.user_identification"]; exists {
			val := m.GetUserIdChoice().(*ReplaceSpecType_UserIdentification).UserIdentification
			vOpts := append(opts,
				db.WithValidateField("user_id_choice"),
				db.WithValidateField("user_identification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_UserIdClientIp:
		if fv, exists := v.FldValidators["user_id_choice.user_id_client_ip"]; exists {
			val := m.GetUserIdChoice().(*ReplaceSpecType_UserIdClientIp).UserIdClientIp
			vOpts := append(opts,
				db.WithValidateField("user_id_choice"),
				db.WithValidateField("user_id_client_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_choice"]; exists {
		val := m.GetWafChoice()
		vOpts := append(opts,
			db.WithValidateField("waf_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWafChoice().(type) {
	case *ReplaceSpecType_DisableWaf:
		if fv, exists := v.FldValidators["waf_choice.disable_waf"]; exists {
			val := m.GetWafChoice().(*ReplaceSpecType_DisableWaf).DisableWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("disable_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AppFirewall:
		if fv, exists := v.FldValidators["waf_choice.app_firewall"]; exists {
			val := m.GetWafChoice().(*ReplaceSpecType_AppFirewall).AppFirewall
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("app_firewall"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_exclusion_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("waf_exclusion_rules"))
		if err := fv(ctx, m.GetWafExclusionRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdvertiseChoice := v.AdvertiseChoiceValidationRuleHandler
	rulesAdvertiseChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdvertiseChoice(rulesAdvertiseChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.advertise_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["advertise_choice"] = vFn

	vrhApiDefinitionChoice := v.ApiDefinitionChoiceValidationRuleHandler
	rulesApiDefinitionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDefinitionChoice(rulesApiDefinitionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.api_definition_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_definition_choice"] = vFn

	vrhApiDiscoveryChoice := v.ApiDiscoveryChoiceValidationRuleHandler
	rulesApiDiscoveryChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDiscoveryChoice(rulesApiDiscoveryChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.api_discovery_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_discovery_choice"] = vFn

	vrhChallengeType := v.ChallengeTypeValidationRuleHandler
	rulesChallengeType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChallengeType(rulesChallengeType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.challenge_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_type"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhL7DdosAutoMitigationAction := v.L7DdosAutoMitigationActionValidationRuleHandler
	rulesL7DdosAutoMitigationAction := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhL7DdosAutoMitigationAction(rulesL7DdosAutoMitigationAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.l7_ddos_auto_mitigation_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["l7_ddos_auto_mitigation_action"] = vFn

	vrhLoadbalancerType := v.LoadbalancerTypeValidationRuleHandler
	rulesLoadbalancerType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLoadbalancerType(rulesLoadbalancerType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.loadbalancer_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_type"] = vFn

	vrhMaliciousUserDetectionChoice := v.MaliciousUserDetectionChoiceValidationRuleHandler
	rulesMaliciousUserDetectionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMaliciousUserDetectionChoice(rulesMaliciousUserDetectionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.malicious_user_detection_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["malicious_user_detection_choice"] = vFn

	vrhRateLimitChoice := v.RateLimitChoiceValidationRuleHandler
	rulesRateLimitChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRateLimitChoice(rulesRateLimitChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.rate_limit_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limit_choice"] = vFn

	vrhSensitiveDataPolicyChoice := v.SensitiveDataPolicyChoiceValidationRuleHandler
	rulesSensitiveDataPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSensitiveDataPolicyChoice(rulesSensitiveDataPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.sensitive_data_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sensitive_data_policy_choice"] = vFn

	vrhServicePolicyChoice := v.ServicePolicyChoiceValidationRuleHandler
	rulesServicePolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServicePolicyChoice(rulesServicePolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.service_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_policy_choice"] = vFn

	vrhThreatMeshChoice := v.ThreatMeshChoiceValidationRuleHandler
	rulesThreatMeshChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhThreatMeshChoice(rulesThreatMeshChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.threat_mesh_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["threat_mesh_choice"] = vFn

	vrhTrustClientIpHeadersChoice := v.TrustClientIpHeadersChoiceValidationRuleHandler
	rulesTrustClientIpHeadersChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTrustClientIpHeadersChoice(rulesTrustClientIpHeadersChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.trust_client_ip_headers_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trust_client_ip_headers_choice"] = vFn

	vrhUserIdChoice := v.UserIdChoiceValidationRuleHandler
	rulesUserIdChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhUserIdChoice(rulesUserIdChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.user_id_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user_id_choice"] = vFn

	vrhWafChoice := v.WafChoiceValidationRuleHandler
	rulesWafChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWafChoice(rulesWafChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.waf_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhDefaultRoutePools := v.DefaultRoutePoolsValidationRuleHandler
	rulesDefaultRoutePools := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDefaultRoutePools(rulesDefaultRoutePools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.default_route_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_route_pools"] = vFn

	vrhRoutes := v.RoutesValidationRuleHandler
	rulesRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRoutes(rulesRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routes"] = vFn

	vrhWafExclusionRules := v.WafExclusionRulesValidationRuleHandler
	rulesWafExclusionRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhWafExclusionRules(rulesWafExclusionRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.waf_exclusion_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_exclusion_rules"] = vFn

	vrhBlockedClients := v.BlockedClientsValidationRuleHandler
	rulesBlockedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhBlockedClients(rulesBlockedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.blocked_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_clients"] = vFn

	vrhTrustedClients := v.TrustedClientsValidationRuleHandler
	rulesTrustedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhTrustedClients(rulesTrustedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.trusted_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trusted_clients"] = vFn

	vrhDdosMitigationRules := v.DdosMitigationRulesValidationRuleHandler
	rulesDdosMitigationRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDdosMitigationRules(rulesDdosMitigationRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.ddos_mitigation_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ddos_mitigation_rules"] = vFn

	vrhDataGuardRules := v.DataGuardRulesValidationRuleHandler
	rulesDataGuardRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDataGuardRules(rulesDataGuardRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.data_guard_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["data_guard_rules"] = vFn

	vrhGraphqlRules := v.GraphqlRulesValidationRuleHandler
	rulesGraphqlRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhGraphqlRules(rulesGraphqlRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.graphql_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["graphql_rules"] = vFn

	vrhProtectedCookies := v.ProtectedCookiesValidationRuleHandler
	rulesProtectedCookies := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhProtectedCookies(rulesProtectedCookies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.protected_cookies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protected_cookies"] = vFn

	v.FldValidators["advertise_choice.advertise_on_public"] = ves_io_schema_views.AdvertisePublicValidator().Validate
	v.FldValidators["advertise_choice.advertise_custom"] = ves_io_schema_views.AdvertiseCustomValidator().Validate

	v.FldValidators["api_definition_choice.api_definitions"] = ves_io_schema_views_common_waf.ApiDefinitionListValidator().Validate
	v.FldValidators["api_definition_choice.api_specification"] = ves_io_schema_views_common_waf.APISpecificationSettingsValidator().Validate
	v.FldValidators["api_definition_choice.api_definition"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_discovery_choice.enable_api_discovery"] = ves_io_schema_views_common_waf.ApiDiscoverySettingValidator().Validate

	v.FldValidators["bot_defense_choice.bot_defense"] = ves_io_schema_views_common_security.ShapeBotDefenseTypeValidator().Validate
	v.FldValidators["bot_defense_choice.bot_defense_advanced"] = ves_io_schema_views_common_security.BotDefenseAdvancedTypeValidator().Validate

	v.FldValidators["challenge_type.js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.captcha_challenge"] = ves_io_schema_virtual_host.CaptchaChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.policy_based_challenge"] = ves_io_schema_views_common_waf.PolicyBasedChallengeValidator().Validate
	v.FldValidators["challenge_type.enable_challenge"] = ves_io_schema_views_common_waf.EnableChallengeValidator().Validate

	v.FldValidators["client_side_defense_choice.client_side_defense"] = ves_io_schema_views_common_security.ClientSideDefenseTypeValidator().Validate

	v.FldValidators["hash_policy_choice.cookie_stickiness"] = ves_io_schema_route.CookieForHashingValidator().Validate
	v.FldValidators["hash_policy_choice.ring_hash"] = HashPolicyListTypeValidator().Validate

	v.FldValidators["ip_reputation_choice.enable_ip_reputation"] = ves_io_schema_views_common_waf.IPThreatCategoryListTypeValidator().Validate

	v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate

	v.FldValidators["loadbalancer_type.http"] = ProxyTypeHttpValidator().Validate
	v.FldValidators["loadbalancer_type.https"] = ProxyTypeHttpsValidator().Validate
	v.FldValidators["loadbalancer_type.https_auto_cert"] = ProxyTypeHttpsAutoCertsValidator().Validate

	v.FldValidators["ml_config_choice.single_lb_app"] = SingleLoadBalancerAppSettingValidator().Validate

	v.FldValidators["origin_pool_choice.default_pool"] = ves_io_schema_views_origin_pool.GlobalSpecTypeValidator().Validate
	v.FldValidators["origin_pool_choice.default_pool_list"] = ves_io_schema_views.OriginPoolListTypeValidator().Validate

	v.FldValidators["rate_limit_choice.rate_limit"] = ves_io_schema_views_common_waf.RateLimitConfigTypeValidator().Validate
	v.FldValidators["rate_limit_choice.api_rate_limit"] = ves_io_schema_views_common_waf.APIRateLimitValidator().Validate

	v.FldValidators["sensitive_data_policy_choice.sensitive_data_policy"] = ves_io_schema_views_common_security.SensitiveDataPolicySettingsValidator().Validate

	v.FldValidators["service_policy_choice.active_service_policies"] = ves_io_schema_views_common_waf.ServicePolicyListValidator().Validate

	v.FldValidators["slow_ddos_mitigation_choice.slow_ddos_mitigation"] = ves_io_schema_virtual_host.SlowDDoSMitigationValidator().Validate

	v.FldValidators["trust_client_ip_headers_choice.enable_trust_client_ip_headers"] = ves_io_schema_virtual_host.ClientIPHeadersValidator().Validate

	v.FldValidators["user_id_choice.user_identification"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["waf_choice.app_firewall"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cors_policy"] = ves_io_schema.CorsPolicyValidator().Validate

	v.FldValidators["more_option"] = AdvancedOptionsTypeValidator().Validate

	v.FldValidators["malicious_user_mitigation"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_rate_limit_legacy"] = ves_io_schema_views_common_waf.APIRateLimitLegacyValidator().Validate

	v.FldValidators["api_protection_rules"] = ves_io_schema_views_common_waf.APIProtectionRulesValidator().Validate

	v.FldValidators["csrf_policy"] = ves_io_schema.CsrfPolicyValidator().Validate

	v.FldValidators["jwt_validation"] = ves_io_schema_views_common_waf.JWTValidationValidator().Validate

	v.FldValidators["origin_server_subset_rule_list"] = OriginServerSubsetRuleListTypeValidator().Validate

	v.FldValidators["sensitive_data_disclosure_rules"] = SensitiveDataDisclosureRulesValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteSimpleAdvancedOptions) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteSimpleAdvancedOptions) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *RouteSimpleAdvancedOptions) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetRequestHeadersToAdd() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting RouteSimpleAdvancedOptions.request_headers_to_add idx %v", idx)
		}
	}

	for idx, e := range m.GetResponseHeadersToAdd() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting RouteSimpleAdvancedOptions.response_headers_to_add idx %v", idx)
		}
	}

	return nil
}

func (m *RouteSimpleAdvancedOptions) DeepCopy() *RouteSimpleAdvancedOptions {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteSimpleAdvancedOptions{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteSimpleAdvancedOptions) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteSimpleAdvancedOptions) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteSimpleAdvancedOptionsValidator().Validate(ctx, m, opts...)
}

func (m *RouteSimpleAdvancedOptions) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetMirroringChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMirroringChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetWafChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *RouteSimpleAdvancedOptions) GetMirroringChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMirroringChoice() == nil {
		return nil, nil
	}
	switch m.GetMirroringChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisableMirroring:

		return nil, nil

	case *RouteSimpleAdvancedOptions_MirrorPolicy:

		drInfos, err := m.GetMirrorPolicy().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetMirrorPolicy().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "mirror_policy." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *RouteSimpleAdvancedOptions) GetWafChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetWafChoice().(type) {
	case *RouteSimpleAdvancedOptions_InheritedWaf:

		return nil, nil

	case *RouteSimpleAdvancedOptions_DisableWaf:

		return nil, nil

	case *RouteSimpleAdvancedOptions_AppFirewall:

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("app_firewall.Object")
		dri := db.DRefInfo{
			RefdType:   "app_firewall.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "app_firewall",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetWafChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *RouteSimpleAdvancedOptions) GetWafChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetWafChoice().(type) {
	case *RouteSimpleAdvancedOptions_InheritedWaf:

	case *RouteSimpleAdvancedOptions_DisableWaf:

	case *RouteSimpleAdvancedOptions_AppFirewall:
		refdType, err := d.TypeForEntryKind("", "", "app_firewall.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: app_firewall")
		}

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "app_firewall.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateRouteSimpleAdvancedOptions struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteSimpleAdvancedOptions) BufferChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for buffer_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) ClusterRetractChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_retract_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) MirroringChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mirroring_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) RetryPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for retry_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) RewriteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rewrite_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) RewriteChoicePrefixRewriteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_PrefixRewrite, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for prefix_rewrite")
	}
	return oValidatorFn_PrefixRewrite, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) SpdyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for spdy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) WebsocketChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for websocket_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) EndpointSubsetsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for endpoint_subsets")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for endpoint_subsets")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for endpoint_subsets")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map endpoint_subsets")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items endpoint_subsets")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) RequestHeadersToAddValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for request_headers_to_add")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.HeaderManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for request_headers_to_add")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated request_headers_to_add")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items request_headers_to_add")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) RequestHeadersToRemoveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for request_headers_to_remove")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for request_headers_to_remove")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated request_headers_to_remove")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items request_headers_to_remove")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) ResponseHeadersToAddValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for response_headers_to_add")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.HeaderManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for response_headers_to_add")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated response_headers_to_add")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items response_headers_to_add")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) ResponseHeadersToRemoveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for response_headers_to_remove")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for response_headers_to_remove")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated response_headers_to_remove")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items response_headers_to_remove")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) TimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for timeout")
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteSimpleAdvancedOptions)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteSimpleAdvancedOptions got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetBotDefenseJavascriptInjectionChoice().(type) {
	case *RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection:
		if fv, exists := v.FldValidators["bot_defense_javascript_injection_choice.inherited_bot_defense_javascript_injection"]; exists {
			val := m.GetBotDefenseJavascriptInjectionChoice().(*RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection).InheritedBotDefenseJavascriptInjection
			vOpts := append(opts,
				db.WithValidateField("bot_defense_javascript_injection_choice"),
				db.WithValidateField("inherited_bot_defense_javascript_injection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection:
		if fv, exists := v.FldValidators["bot_defense_javascript_injection_choice.bot_defense_javascript_injection"]; exists {
			val := m.GetBotDefenseJavascriptInjectionChoice().(*RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection).BotDefenseJavascriptInjection
			vOpts := append(opts,
				db.WithValidateField("bot_defense_javascript_injection_choice"),
				db.WithValidateField("bot_defense_javascript_injection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["buffer_choice"]; exists {
		val := m.GetBufferChoice()
		vOpts := append(opts,
			db.WithValidateField("buffer_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBufferChoice().(type) {
	case *RouteSimpleAdvancedOptions_CommonBuffering:
		if fv, exists := v.FldValidators["buffer_choice.common_buffering"]; exists {
			val := m.GetBufferChoice().(*RouteSimpleAdvancedOptions_CommonBuffering).CommonBuffering
			vOpts := append(opts,
				db.WithValidateField("buffer_choice"),
				db.WithValidateField("common_buffering"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_BufferPolicy:
		if fv, exists := v.FldValidators["buffer_choice.buffer_policy"]; exists {
			val := m.GetBufferChoice().(*RouteSimpleAdvancedOptions_BufferPolicy).BufferPolicy
			vOpts := append(opts,
				db.WithValidateField("buffer_choice"),
				db.WithValidateField("buffer_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_retract_choice"]; exists {
		val := m.GetClusterRetractChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_retract_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterRetractChoice().(type) {
	case *RouteSimpleAdvancedOptions_RetractCluster:
		if fv, exists := v.FldValidators["cluster_retract_choice.retract_cluster"]; exists {
			val := m.GetClusterRetractChoice().(*RouteSimpleAdvancedOptions_RetractCluster).RetractCluster
			vOpts := append(opts,
				db.WithValidateField("cluster_retract_choice"),
				db.WithValidateField("retract_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_DoNotRetractCluster:
		if fv, exists := v.FldValidators["cluster_retract_choice.do_not_retract_cluster"]; exists {
			val := m.GetClusterRetractChoice().(*RouteSimpleAdvancedOptions_DoNotRetractCluster).DoNotRetractCluster
			vOpts := append(opts,
				db.WithValidateField("cluster_retract_choice"),
				db.WithValidateField("do_not_retract_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cors_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("cors_policy"))
		if err := fv(ctx, m.GetCorsPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["csrf_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("csrf_policy"))
		if err := fv(ctx, m.GetCsrfPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disable_location_add"]; exists {

		vOpts := append(opts, db.WithValidateField("disable_location_add"))
		if err := fv(ctx, m.GetDisableLocationAdd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["endpoint_subsets"]; exists {
		vOpts := append(opts, db.WithValidateField("endpoint_subsets"))
		if err := fv(ctx, m.GetEndpointSubsets(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *RouteSimpleAdvancedOptions_CommonHashPolicy:
		if fv, exists := v.FldValidators["hash_policy_choice.common_hash_policy"]; exists {
			val := m.GetHashPolicyChoice().(*RouteSimpleAdvancedOptions_CommonHashPolicy).CommonHashPolicy
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("common_hash_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_SpecificHashPolicy:
		if fv, exists := v.FldValidators["hash_policy_choice.specific_hash_policy"]; exists {
			val := m.GetHashPolicyChoice().(*RouteSimpleAdvancedOptions_SpecificHashPolicy).SpecificHashPolicy
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("specific_hash_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["mirroring_choice"]; exists {
		val := m.GetMirroringChoice()
		vOpts := append(opts,
			db.WithValidateField("mirroring_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMirroringChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisableMirroring:
		if fv, exists := v.FldValidators["mirroring_choice.disable_mirroring"]; exists {
			val := m.GetMirroringChoice().(*RouteSimpleAdvancedOptions_DisableMirroring).DisableMirroring
			vOpts := append(opts,
				db.WithValidateField("mirroring_choice"),
				db.WithValidateField("disable_mirroring"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_MirrorPolicy:
		if fv, exists := v.FldValidators["mirroring_choice.mirror_policy"]; exists {
			val := m.GetMirroringChoice().(*RouteSimpleAdvancedOptions_MirrorPolicy).MirrorPolicy
			vOpts := append(opts,
				db.WithValidateField("mirroring_choice"),
				db.WithValidateField("mirror_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["priority"]; exists {

		vOpts := append(opts, db.WithValidateField("priority"))
		if err := fv(ctx, m.GetPriority(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_headers_to_add"]; exists {
		vOpts := append(opts, db.WithValidateField("request_headers_to_add"))
		if err := fv(ctx, m.GetRequestHeadersToAdd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_headers_to_remove"]; exists {
		vOpts := append(opts, db.WithValidateField("request_headers_to_remove"))
		if err := fv(ctx, m.GetRequestHeadersToRemove(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_headers_to_add"]; exists {
		vOpts := append(opts, db.WithValidateField("response_headers_to_add"))
		if err := fv(ctx, m.GetResponseHeadersToAdd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_headers_to_remove"]; exists {
		vOpts := append(opts, db.WithValidateField("response_headers_to_remove"))
		if err := fv(ctx, m.GetResponseHeadersToRemove(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["retry_policy_choice"]; exists {
		val := m.GetRetryPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("retry_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRetryPolicyChoice().(type) {
	case *RouteSimpleAdvancedOptions_DefaultRetryPolicy:
		if fv, exists := v.FldValidators["retry_policy_choice.default_retry_policy"]; exists {
			val := m.GetRetryPolicyChoice().(*RouteSimpleAdvancedOptions_DefaultRetryPolicy).DefaultRetryPolicy
			vOpts := append(opts,
				db.WithValidateField("retry_policy_choice"),
				db.WithValidateField("default_retry_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_RetryPolicy:
		if fv, exists := v.FldValidators["retry_policy_choice.retry_policy"]; exists {
			val := m.GetRetryPolicyChoice().(*RouteSimpleAdvancedOptions_RetryPolicy).RetryPolicy
			vOpts := append(opts,
				db.WithValidateField("retry_policy_choice"),
				db.WithValidateField("retry_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_NoRetryPolicy:
		if fv, exists := v.FldValidators["retry_policy_choice.no_retry_policy"]; exists {
			val := m.GetRetryPolicyChoice().(*RouteSimpleAdvancedOptions_NoRetryPolicy).NoRetryPolicy
			vOpts := append(opts,
				db.WithValidateField("retry_policy_choice"),
				db.WithValidateField("no_retry_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rewrite_choice"]; exists {
		val := m.GetRewriteChoice()
		vOpts := append(opts,
			db.WithValidateField("rewrite_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRewriteChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisablePrefixRewrite:
		if fv, exists := v.FldValidators["rewrite_choice.disable_prefix_rewrite"]; exists {
			val := m.GetRewriteChoice().(*RouteSimpleAdvancedOptions_DisablePrefixRewrite).DisablePrefixRewrite
			vOpts := append(opts,
				db.WithValidateField("rewrite_choice"),
				db.WithValidateField("disable_prefix_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_PrefixRewrite:
		if fv, exists := v.FldValidators["rewrite_choice.prefix_rewrite"]; exists {
			val := m.GetRewriteChoice().(*RouteSimpleAdvancedOptions_PrefixRewrite).PrefixRewrite
			vOpts := append(opts,
				db.WithValidateField("rewrite_choice"),
				db.WithValidateField("prefix_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_RegexRewrite:
		if fv, exists := v.FldValidators["rewrite_choice.regex_rewrite"]; exists {
			val := m.GetRewriteChoice().(*RouteSimpleAdvancedOptions_RegexRewrite).RegexRewrite
			vOpts := append(opts,
				db.WithValidateField("rewrite_choice"),
				db.WithValidateField("regex_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["spdy_choice"]; exists {
		val := m.GetSpdyChoice()
		vOpts := append(opts,
			db.WithValidateField("spdy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSpdyChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisableSpdy:
		if fv, exists := v.FldValidators["spdy_choice.disable_spdy"]; exists {
			val := m.GetSpdyChoice().(*RouteSimpleAdvancedOptions_DisableSpdy).DisableSpdy
			vOpts := append(opts,
				db.WithValidateField("spdy_choice"),
				db.WithValidateField("disable_spdy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_EnableSpdy:
		if fv, exists := v.FldValidators["spdy_choice.enable_spdy"]; exists {
			val := m.GetSpdyChoice().(*RouteSimpleAdvancedOptions_EnableSpdy).EnableSpdy
			vOpts := append(opts,
				db.WithValidateField("spdy_choice"),
				db.WithValidateField("enable_spdy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("timeout"))
		if err := fv(ctx, m.GetTimeout(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetWafChoice().(type) {
	case *RouteSimpleAdvancedOptions_InheritedWaf:
		if fv, exists := v.FldValidators["waf_choice.inherited_waf"]; exists {
			val := m.GetWafChoice().(*RouteSimpleAdvancedOptions_InheritedWaf).InheritedWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("inherited_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_DisableWaf:
		if fv, exists := v.FldValidators["waf_choice.disable_waf"]; exists {
			val := m.GetWafChoice().(*RouteSimpleAdvancedOptions_DisableWaf).DisableWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("disable_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_AppFirewall:
		if fv, exists := v.FldValidators["waf_choice.app_firewall"]; exists {
			val := m.GetWafChoice().(*RouteSimpleAdvancedOptions_AppFirewall).AppFirewall
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("app_firewall"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["websocket_choice"]; exists {
		val := m.GetWebsocketChoice()
		vOpts := append(opts,
			db.WithValidateField("websocket_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWebsocketChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisableWebSocketConfig:
		if fv, exists := v.FldValidators["websocket_choice.disable_web_socket_config"]; exists {
			val := m.GetWebsocketChoice().(*RouteSimpleAdvancedOptions_DisableWebSocketConfig).DisableWebSocketConfig
			vOpts := append(opts,
				db.WithValidateField("websocket_choice"),
				db.WithValidateField("disable_web_socket_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_WebSocketConfig:
		if fv, exists := v.FldValidators["websocket_choice.web_socket_config"]; exists {
			val := m.GetWebsocketChoice().(*RouteSimpleAdvancedOptions_WebSocketConfig).WebSocketConfig
			vOpts := append(opts,
				db.WithValidateField("websocket_choice"),
				db.WithValidateField("web_socket_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteSimpleAdvancedOptionsValidator = func() *ValidateRouteSimpleAdvancedOptions {
	v := &ValidateRouteSimpleAdvancedOptions{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBufferChoice := v.BufferChoiceValidationRuleHandler
	rulesBufferChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBufferChoice(rulesBufferChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.buffer_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["buffer_choice"] = vFn

	vrhClusterRetractChoice := v.ClusterRetractChoiceValidationRuleHandler
	rulesClusterRetractChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterRetractChoice(rulesClusterRetractChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.cluster_retract_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_retract_choice"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhMirroringChoice := v.MirroringChoiceValidationRuleHandler
	rulesMirroringChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMirroringChoice(rulesMirroringChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.mirroring_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mirroring_choice"] = vFn

	vrhRetryPolicyChoice := v.RetryPolicyChoiceValidationRuleHandler
	rulesRetryPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRetryPolicyChoice(rulesRetryPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.retry_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["retry_policy_choice"] = vFn

	vrhRewriteChoice := v.RewriteChoiceValidationRuleHandler
	rulesRewriteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRewriteChoice(rulesRewriteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.rewrite_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rewrite_choice"] = vFn

	vrhRewriteChoicePrefixRewrite := v.RewriteChoicePrefixRewriteValidationRuleHandler
	rulesRewriteChoicePrefixRewrite := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFnMap["rewrite_choice.prefix_rewrite"], err = vrhRewriteChoicePrefixRewrite(rulesRewriteChoicePrefixRewrite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field RouteSimpleAdvancedOptions.rewrite_choice_prefix_rewrite: %s", err)
		panic(errMsg)
	}

	v.FldValidators["rewrite_choice.prefix_rewrite"] = vFnMap["rewrite_choice.prefix_rewrite"]

	vrhSpdyChoice := v.SpdyChoiceValidationRuleHandler
	rulesSpdyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSpdyChoice(rulesSpdyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.spdy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["spdy_choice"] = vFn

	vrhWebsocketChoice := v.WebsocketChoiceValidationRuleHandler
	rulesWebsocketChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWebsocketChoice(rulesWebsocketChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.websocket_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["websocket_choice"] = vFn

	vrhEndpointSubsets := v.EndpointSubsetsValidationRuleHandler
	rulesEndpointSubsets := map[string]string{
		"ves.io.schema.rules.map.max_pairs": "16",
	}
	vFn, err = vrhEndpointSubsets(rulesEndpointSubsets)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.endpoint_subsets: %s", err)
		panic(errMsg)
	}
	v.FldValidators["endpoint_subsets"] = vFn

	vrhRequestHeadersToAdd := v.RequestHeadersToAddValidationRuleHandler
	rulesRequestHeadersToAdd := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRequestHeadersToAdd(rulesRequestHeadersToAdd)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.request_headers_to_add: %s", err)
		panic(errMsg)
	}
	v.FldValidators["request_headers_to_add"] = vFn

	vrhRequestHeadersToRemove := v.RequestHeadersToRemoveValidationRuleHandler
	rulesRequestHeadersToRemove := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.min_bytes": "1",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhRequestHeadersToRemove(rulesRequestHeadersToRemove)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.request_headers_to_remove: %s", err)
		panic(errMsg)
	}
	v.FldValidators["request_headers_to_remove"] = vFn

	vrhResponseHeadersToAdd := v.ResponseHeadersToAddValidationRuleHandler
	rulesResponseHeadersToAdd := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhResponseHeadersToAdd(rulesResponseHeadersToAdd)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.response_headers_to_add: %s", err)
		panic(errMsg)
	}
	v.FldValidators["response_headers_to_add"] = vFn

	vrhResponseHeadersToRemove := v.ResponseHeadersToRemoveValidationRuleHandler
	rulesResponseHeadersToRemove := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.min_bytes": "1",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhResponseHeadersToRemove(rulesResponseHeadersToRemove)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.response_headers_to_remove: %s", err)
		panic(errMsg)
	}
	v.FldValidators["response_headers_to_remove"] = vFn

	vrhTimeout := v.TimeoutValidationRuleHandler
	rulesTimeout := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "600000",
	}
	vFn, err = vrhTimeout(rulesTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["timeout"] = vFn

	v.FldValidators["bot_defense_javascript_injection_choice.bot_defense_javascript_injection"] = ves_io_schema_route.BotDefenseJavascriptInjectionTypeValidator().Validate

	v.FldValidators["buffer_choice.buffer_policy"] = ves_io_schema.BufferConfigTypeValidator().Validate

	v.FldValidators["hash_policy_choice.specific_hash_policy"] = HashPolicyListTypeValidator().Validate

	v.FldValidators["mirroring_choice.mirror_policy"] = MirrorPolicyTypeValidator().Validate

	v.FldValidators["retry_policy_choice.retry_policy"] = ves_io_schema.RetryPolicyTypeValidator().Validate

	v.FldValidators["rewrite_choice.regex_rewrite"] = ves_io_schema.RegexMatchRewriteValidator().Validate

	v.FldValidators["waf_choice.app_firewall"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cors_policy"] = ves_io_schema.CorsPolicyValidator().Validate

	v.FldValidators["csrf_policy"] = ves_io_schema.CsrfPolicyValidator().Validate

	return v
}()

func RouteSimpleAdvancedOptionsValidator() db.Validator {
	return DefaultRouteSimpleAdvancedOptionsValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *RouteType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSimpleRoute().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting RouteType.simple_route")
	}

	return nil
}

func (m *RouteType) DeepCopy() *RouteType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeValidator().Validate(ctx, m, opts...)
}

func (m *RouteType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *RouteType) GetChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetChoice() == nil {
		return nil, nil
	}
	switch m.GetChoice().(type) {
	case *RouteType_SimpleRoute:

		drInfos, err := m.GetSimpleRoute().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSimpleRoute().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "simple_route." + dri.DRField
		}
		return drInfos, err

	case *RouteType_RedirectRoute:

		return nil, nil

	case *RouteType_DirectResponseRoute:

		return nil, nil

	case *RouteType_CustomRouteObject:

		drInfos, err := m.GetCustomRouteObject().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomRouteObject().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "custom_route_object." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateRouteType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteType) ChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["choice"]; exists {
		val := m.GetChoice()
		vOpts := append(opts,
			db.WithValidateField("choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChoice().(type) {
	case *RouteType_SimpleRoute:
		if fv, exists := v.FldValidators["choice.simple_route"]; exists {
			val := m.GetChoice().(*RouteType_SimpleRoute).SimpleRoute
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("simple_route"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteType_RedirectRoute:
		if fv, exists := v.FldValidators["choice.redirect_route"]; exists {
			val := m.GetChoice().(*RouteType_RedirectRoute).RedirectRoute
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("redirect_route"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteType_DirectResponseRoute:
		if fv, exists := v.FldValidators["choice.direct_response_route"]; exists {
			val := m.GetChoice().(*RouteType_DirectResponseRoute).DirectResponseRoute
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("direct_response_route"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteType_CustomRouteObject:
		if fv, exists := v.FldValidators["choice.custom_route_object"]; exists {
			val := m.GetChoice().(*RouteType_CustomRouteObject).CustomRouteObject
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("custom_route_object"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeValidator = func() *ValidateRouteType {
	v := &ValidateRouteType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhChoice := v.ChoiceValidationRuleHandler
	rulesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChoice(rulesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteType.choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["choice"] = vFn

	v.FldValidators["choice.simple_route"] = RouteTypeSimpleValidator().Validate
	v.FldValidators["choice.redirect_route"] = RouteTypeRedirectValidator().Validate
	v.FldValidators["choice.direct_response_route"] = RouteTypeDirectResponseValidator().Validate
	v.FldValidators["choice.custom_route_object"] = RouteTypeCustomRouteValidator().Validate

	return v
}()

func RouteTypeValidator() db.Validator {
	return DefaultRouteTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTypeCustomRoute) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTypeCustomRoute) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTypeCustomRoute) DeepCopy() *RouteTypeCustomRoute {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTypeCustomRoute{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTypeCustomRoute) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTypeCustomRoute) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeCustomRouteValidator().Validate(ctx, m, opts...)
}

func (m *RouteTypeCustomRoute) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRouteRefDRefInfo()

}

func (m *RouteTypeCustomRoute) GetRouteRefDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetRouteRef()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("route.Object")
	dri := db.DRefInfo{
		RefdType:   "route.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "route_ref",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetRouteRefDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *RouteTypeCustomRoute) GetRouteRefDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "route.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: route")
	}

	vref := m.GetRouteRef()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "route.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateRouteTypeCustomRoute struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTypeCustomRoute) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTypeCustomRoute)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTypeCustomRoute got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["route_ref"]; exists {

		vOpts := append(opts, db.WithValidateField("route_ref"))
		if err := fv(ctx, m.GetRouteRef(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeCustomRouteValidator = func() *ValidateRouteTypeCustomRoute {
	v := &ValidateRouteTypeCustomRoute{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["route_ref"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func RouteTypeCustomRouteValidator() db.Validator {
	return DefaultRouteTypeCustomRouteValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTypeDirectResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTypeDirectResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTypeDirectResponse) DeepCopy() *RouteTypeDirectResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTypeDirectResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTypeDirectResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTypeDirectResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeDirectResponseValidator().Validate(ctx, m, opts...)
}

type ValidateRouteTypeDirectResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTypeDirectResponse) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for path")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.PathMatcherTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeDirectResponse) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for headers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.HeaderMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeDirectResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTypeDirectResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTypeDirectResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["incoming_port"]; exists {

		vOpts := append(opts, db.WithValidateField("incoming_port"))
		if err := fv(ctx, m.GetIncomingPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["route_direct_response"]; exists {

		vOpts := append(opts, db.WithValidateField("route_direct_response"))
		if err := fv(ctx, m.GetRouteDirectResponse(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeDirectResponseValidator = func() *ValidateRouteTypeDirectResponse {
	v := &ValidateRouteTypeDirectResponse{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeDirectResponse.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeDirectResponse.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	v.FldValidators["route_direct_response"] = ves_io_schema_route.RouteDirectResponseValidator().Validate

	v.FldValidators["incoming_port"] = ves_io_schema.PortMatcherTypeValidator().Validate

	return v
}()

func RouteTypeDirectResponseValidator() db.Validator {
	return DefaultRouteTypeDirectResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTypeRedirect) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTypeRedirect) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTypeRedirect) DeepCopy() *RouteTypeRedirect {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTypeRedirect{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTypeRedirect) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTypeRedirect) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeRedirectValidator().Validate(ctx, m, opts...)
}

type ValidateRouteTypeRedirect struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTypeRedirect) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for path")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.PathMatcherTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeRedirect) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for headers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.HeaderMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeRedirect) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTypeRedirect)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTypeRedirect got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["incoming_port"]; exists {

		vOpts := append(opts, db.WithValidateField("incoming_port"))
		if err := fv(ctx, m.GetIncomingPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["route_redirect"]; exists {

		vOpts := append(opts, db.WithValidateField("route_redirect"))
		if err := fv(ctx, m.GetRouteRedirect(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeRedirectValidator = func() *ValidateRouteTypeRedirect {
	v := &ValidateRouteTypeRedirect{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeRedirect.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeRedirect.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	v.FldValidators["route_redirect"] = ves_io_schema_route.RouteRedirectValidator().Validate

	v.FldValidators["incoming_port"] = ves_io_schema.PortMatcherTypeValidator().Validate

	return v
}()

func RouteTypeRedirectValidator() db.Validator {
	return DefaultRouteTypeRedirectValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTypeSimple) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTypeSimple) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *RouteTypeSimple) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAdvancedOptions().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting RouteTypeSimple.advanced_options")
	}

	return nil
}

func (m *RouteTypeSimple) DeepCopy() *RouteTypeSimple {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTypeSimple{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTypeSimple) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTypeSimple) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeSimpleValidator().Validate(ctx, m, opts...)
}

func (m *RouteTypeSimple) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvancedOptionsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAdvancedOptionsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginPoolsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *RouteTypeSimple) GetAdvancedOptionsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAdvancedOptions() == nil {
		return nil, nil
	}

	drInfos, err := m.GetAdvancedOptions().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetAdvancedOptions().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "advanced_options." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *RouteTypeSimple) GetOriginPoolsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginPools() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetOriginPools() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOriginPools() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("origin_pools[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateRouteTypeSimple struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTypeSimple) HostRewriteParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_rewrite_params")
	}
	return validatorFn, nil
}

func (v *ValidateRouteTypeSimple) HostRewriteParamsHostRewriteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_HostRewrite, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_rewrite")
	}
	return oValidatorFn_HostRewrite, nil
}

func (v *ValidateRouteTypeSimple) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for path")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.PathMatcherTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeSimple) OriginPoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for origin_pools")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for origin_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated origin_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items origin_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeSimple) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for headers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.HeaderMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeSimple) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTypeSimple)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTypeSimple got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["advanced_options"]; exists {

		vOpts := append(opts, db.WithValidateField("advanced_options"))
		if err := fv(ctx, m.GetAdvancedOptions(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["host_rewrite_params"]; exists {
		val := m.GetHostRewriteParams()
		vOpts := append(opts,
			db.WithValidateField("host_rewrite_params"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHostRewriteParams().(type) {
	case *RouteTypeSimple_AutoHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.auto_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimple_AutoHostRewrite).AutoHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("auto_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteTypeSimple_HostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimple_HostRewrite).HostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteTypeSimple_DisableHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.disable_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimple_DisableHostRewrite).DisableHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("disable_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["incoming_port"]; exists {

		vOpts := append(opts, db.WithValidateField("incoming_port"))
		if err := fv(ctx, m.GetIncomingPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["origin_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("origin_pools"))
		if err := fv(ctx, m.GetOriginPools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeSimpleValidator = func() *ValidateRouteTypeSimple {
	v := &ValidateRouteTypeSimple{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHostRewriteParams := v.HostRewriteParamsValidationRuleHandler
	rulesHostRewriteParams := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHostRewriteParams(rulesHostRewriteParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeSimple.host_rewrite_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["host_rewrite_params"] = vFn

	vrhHostRewriteParamsHostRewrite := v.HostRewriteParamsHostRewriteValidationRuleHandler
	rulesHostRewriteParamsHostRewrite := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
	}
	vFnMap["host_rewrite_params.host_rewrite"], err = vrhHostRewriteParamsHostRewrite(rulesHostRewriteParamsHostRewrite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field RouteTypeSimple.host_rewrite_params_host_rewrite: %s", err)
		panic(errMsg)
	}

	v.FldValidators["host_rewrite_params.host_rewrite"] = vFnMap["host_rewrite_params.host_rewrite"]

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeSimple.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	vrhOriginPools := v.OriginPoolsValidationRuleHandler
	rulesOriginPools := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhOriginPools(rulesOriginPools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeSimple.origin_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_pools"] = vFn

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeSimple.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	v.FldValidators["advanced_options"] = RouteSimpleAdvancedOptionsValidator().Validate

	v.FldValidators["incoming_port"] = ves_io_schema.PortMatcherTypeValidator().Validate

	return v
}()

func RouteTypeSimpleValidator() db.Validator {
	return DefaultRouteTypeSimpleValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTypeSimpleWithDefaultOriginPool) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTypeSimpleWithDefaultOriginPool) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTypeSimpleWithDefaultOriginPool) DeepCopy() *RouteTypeSimpleWithDefaultOriginPool {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTypeSimpleWithDefaultOriginPool{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTypeSimpleWithDefaultOriginPool) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTypeSimpleWithDefaultOriginPool) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeSimpleWithDefaultOriginPoolValidator().Validate(ctx, m, opts...)
}

type ValidateRouteTypeSimpleWithDefaultOriginPool struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTypeSimpleWithDefaultOriginPool) HostRewriteParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_rewrite_params")
	}
	return validatorFn, nil
}

func (v *ValidateRouteTypeSimpleWithDefaultOriginPool) HostRewriteParamsHostRewriteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_HostRewrite, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_rewrite")
	}
	return oValidatorFn_HostRewrite, nil
}

func (v *ValidateRouteTypeSimpleWithDefaultOriginPool) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for path")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.PathMatcherTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeSimpleWithDefaultOriginPool) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTypeSimpleWithDefaultOriginPool)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTypeSimpleWithDefaultOriginPool got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["host_rewrite_params"]; exists {
		val := m.GetHostRewriteParams()
		vOpts := append(opts,
			db.WithValidateField("host_rewrite_params"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHostRewriteParams().(type) {
	case *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.auto_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite).AutoHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("auto_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteTypeSimpleWithDefaultOriginPool_HostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_HostRewrite).HostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.disable_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite).DisableHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("disable_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeSimpleWithDefaultOriginPoolValidator = func() *ValidateRouteTypeSimpleWithDefaultOriginPool {
	v := &ValidateRouteTypeSimpleWithDefaultOriginPool{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHostRewriteParams := v.HostRewriteParamsValidationRuleHandler
	rulesHostRewriteParams := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHostRewriteParams(rulesHostRewriteParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeSimpleWithDefaultOriginPool.host_rewrite_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["host_rewrite_params"] = vFn

	vrhHostRewriteParamsHostRewrite := v.HostRewriteParamsHostRewriteValidationRuleHandler
	rulesHostRewriteParamsHostRewrite := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
	}
	vFnMap["host_rewrite_params.host_rewrite"], err = vrhHostRewriteParamsHostRewrite(rulesHostRewriteParamsHostRewrite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field RouteTypeSimpleWithDefaultOriginPool.host_rewrite_params_host_rewrite: %s", err)
		panic(errMsg)
	}

	v.FldValidators["host_rewrite_params.host_rewrite"] = vFnMap["host_rewrite_params.host_rewrite"]

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeSimpleWithDefaultOriginPool.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	return v
}()

func RouteTypeSimpleWithDefaultOriginPoolValidator() db.Validator {
	return DefaultRouteTypeSimpleWithDefaultOriginPoolValidator
}

// augmented methods on protoc/std generated struct

func (m *SensitiveDataDisclosureRules) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SensitiveDataDisclosureRules) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SensitiveDataDisclosureRules) DeepCopy() *SensitiveDataDisclosureRules {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SensitiveDataDisclosureRules{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SensitiveDataDisclosureRules) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SensitiveDataDisclosureRules) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SensitiveDataDisclosureRulesValidator().Validate(ctx, m, opts...)
}

type ValidateSensitiveDataDisclosureRules struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSensitiveDataDisclosureRules) SensitiveDataTypesInResponseValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for sensitive_data_types_in_response")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*SensitiveDataTypes, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := SensitiveDataTypesValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for sensitive_data_types_in_response")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SensitiveDataTypes)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SensitiveDataTypes, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated sensitive_data_types_in_response")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items sensitive_data_types_in_response")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSensitiveDataDisclosureRules) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SensitiveDataDisclosureRules)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SensitiveDataDisclosureRules got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["sensitive_data_types_in_response"]; exists {
		vOpts := append(opts, db.WithValidateField("sensitive_data_types_in_response"))
		if err := fv(ctx, m.GetSensitiveDataTypesInResponse(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSensitiveDataDisclosureRulesValidator = func() *ValidateSensitiveDataDisclosureRules {
	v := &ValidateSensitiveDataDisclosureRules{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSensitiveDataTypesInResponse := v.SensitiveDataTypesInResponseValidationRuleHandler
	rulesSensitiveDataTypesInResponse := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhSensitiveDataTypesInResponse(rulesSensitiveDataTypesInResponse)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SensitiveDataDisclosureRules.sensitive_data_types_in_response: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sensitive_data_types_in_response"] = vFn

	return v
}()

func SensitiveDataDisclosureRulesValidator() db.Validator {
	return DefaultSensitiveDataDisclosureRulesValidator
}

// augmented methods on protoc/std generated struct

func (m *SensitiveDataTypes) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SensitiveDataTypes) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SensitiveDataTypes) DeepCopy() *SensitiveDataTypes {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SensitiveDataTypes{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SensitiveDataTypes) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SensitiveDataTypes) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SensitiveDataTypesValidator().Validate(ctx, m, opts...)
}

type ValidateSensitiveDataTypes struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSensitiveDataTypes) TypeConditionTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type_condition_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSensitiveDataTypes) TypeConditionTypeChoiceBasePathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_BasePath, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for base_path")
	}
	return oValidatorFn_BasePath, nil
}
func (v *ValidateSensitiveDataTypes) TypeConditionTypeChoiceApiGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ApiGroup, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_group")
	}
	return oValidatorFn_ApiGroup, nil
}

func (v *ValidateSensitiveDataTypes) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SensitiveDataTypes)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SensitiveDataTypes got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["body"]; exists {

		vOpts := append(opts, db.WithValidateField("body"))
		if err := fv(ctx, m.GetBody(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetMaskingModeChoice().(type) {
	case *SensitiveDataTypes_Mask:
		if fv, exists := v.FldValidators["masking_mode_choice.mask"]; exists {
			val := m.GetMaskingModeChoice().(*SensitiveDataTypes_Mask).Mask
			vOpts := append(opts,
				db.WithValidateField("masking_mode_choice"),
				db.WithValidateField("mask"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SensitiveDataTypes_Report:
		if fv, exists := v.FldValidators["masking_mode_choice.report"]; exists {
			val := m.GetMaskingModeChoice().(*SensitiveDataTypes_Report).Report
			vOpts := append(opts,
				db.WithValidateField("masking_mode_choice"),
				db.WithValidateField("report"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["type_condition_type_choice"]; exists {
		val := m.GetTypeConditionTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("type_condition_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTypeConditionTypeChoice().(type) {
	case *SensitiveDataTypes_ApiEndpoint:
		if fv, exists := v.FldValidators["type_condition_type_choice.api_endpoint"]; exists {
			val := m.GetTypeConditionTypeChoice().(*SensitiveDataTypes_ApiEndpoint).ApiEndpoint
			vOpts := append(opts,
				db.WithValidateField("type_condition_type_choice"),
				db.WithValidateField("api_endpoint"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SensitiveDataTypes_BasePath:
		if fv, exists := v.FldValidators["type_condition_type_choice.base_path"]; exists {
			val := m.GetTypeConditionTypeChoice().(*SensitiveDataTypes_BasePath).BasePath
			vOpts := append(opts,
				db.WithValidateField("type_condition_type_choice"),
				db.WithValidateField("base_path"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SensitiveDataTypes_ApiGroup:
		if fv, exists := v.FldValidators["type_condition_type_choice.api_group"]; exists {
			val := m.GetTypeConditionTypeChoice().(*SensitiveDataTypes_ApiGroup).ApiGroup
			vOpts := append(opts,
				db.WithValidateField("type_condition_type_choice"),
				db.WithValidateField("api_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSensitiveDataTypesValidator = func() *ValidateSensitiveDataTypes {
	v := &ValidateSensitiveDataTypes{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTypeConditionTypeChoice := v.TypeConditionTypeChoiceValidationRuleHandler
	rulesTypeConditionTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTypeConditionTypeChoice(rulesTypeConditionTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SensitiveDataTypes.type_condition_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type_condition_type_choice"] = vFn

	vrhTypeConditionTypeChoiceBasePath := v.TypeConditionTypeChoiceBasePathValidationRuleHandler
	rulesTypeConditionTypeChoiceBasePath := map[string]string{
		"ves.io.schema.rules.string.http_path": "true",
		"ves.io.schema.rules.string.max_len":   "128",
	}
	vFnMap["type_condition_type_choice.base_path"], err = vrhTypeConditionTypeChoiceBasePath(rulesTypeConditionTypeChoiceBasePath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field SensitiveDataTypes.type_condition_type_choice_base_path: %s", err)
		panic(errMsg)
	}
	vrhTypeConditionTypeChoiceApiGroup := v.TypeConditionTypeChoiceApiGroupValidationRuleHandler
	rulesTypeConditionTypeChoiceApiGroup := map[string]string{
		"ves.io.schema.rules.string.max_len": "128",
	}
	vFnMap["type_condition_type_choice.api_group"], err = vrhTypeConditionTypeChoiceApiGroup(rulesTypeConditionTypeChoiceApiGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field SensitiveDataTypes.type_condition_type_choice_api_group: %s", err)
		panic(errMsg)
	}

	v.FldValidators["type_condition_type_choice.base_path"] = vFnMap["type_condition_type_choice.base_path"]
	v.FldValidators["type_condition_type_choice.api_group"] = vFnMap["type_condition_type_choice.api_group"]

	v.FldValidators["type_condition_type_choice.api_endpoint"] = ves_io_schema_views_common_waf.ApiEndpointDetailsValidator().Validate

	v.FldValidators["body"] = BodySectionMaskingOptionsValidator().Validate

	return v
}()

func SensitiveDataTypesValidator() db.Validator {
	return DefaultSensitiveDataTypesValidator
}

// augmented methods on protoc/std generated struct

func (m *SingleLoadBalancerAppSetting) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SingleLoadBalancerAppSetting) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SingleLoadBalancerAppSetting) DeepCopy() *SingleLoadBalancerAppSetting {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SingleLoadBalancerAppSetting{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SingleLoadBalancerAppSetting) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SingleLoadBalancerAppSetting) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SingleLoadBalancerAppSettingValidator().Validate(ctx, m, opts...)
}

func (m *SingleLoadBalancerAppSetting) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetApiDiscoveryChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *SingleLoadBalancerAppSetting) GetApiDiscoveryChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDiscoveryChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDiscoveryChoice().(type) {
	case *SingleLoadBalancerAppSetting_EnableDiscovery:

		drInfos, err := m.GetEnableDiscovery().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableDiscovery().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_discovery." + dri.DRField
		}
		return drInfos, err

	case *SingleLoadBalancerAppSetting_DisableDiscovery:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateSingleLoadBalancerAppSetting struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSingleLoadBalancerAppSetting) ApiDiscoveryChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_discovery_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSingleLoadBalancerAppSetting) MaliciousUserDetectionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for malicious_user_detection_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSingleLoadBalancerAppSetting) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SingleLoadBalancerAppSetting)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SingleLoadBalancerAppSetting got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_discovery_choice"]; exists {
		val := m.GetApiDiscoveryChoice()
		vOpts := append(opts,
			db.WithValidateField("api_discovery_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDiscoveryChoice().(type) {
	case *SingleLoadBalancerAppSetting_EnableDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.enable_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*SingleLoadBalancerAppSetting_EnableDiscovery).EnableDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("enable_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SingleLoadBalancerAppSetting_DisableDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.disable_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*SingleLoadBalancerAppSetting_DisableDiscovery).DisableDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("disable_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_detection_choice"]; exists {
		val := m.GetMaliciousUserDetectionChoice()
		vOpts := append(opts,
			db.WithValidateField("malicious_user_detection_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMaliciousUserDetectionChoice().(type) {
	case *SingleLoadBalancerAppSetting_EnableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.enable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*SingleLoadBalancerAppSetting_EnableMaliciousUserDetection).EnableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("enable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SingleLoadBalancerAppSetting_DisableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.disable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*SingleLoadBalancerAppSetting_DisableMaliciousUserDetection).DisableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("disable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSingleLoadBalancerAppSettingValidator = func() *ValidateSingleLoadBalancerAppSetting {
	v := &ValidateSingleLoadBalancerAppSetting{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiDiscoveryChoice := v.ApiDiscoveryChoiceValidationRuleHandler
	rulesApiDiscoveryChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDiscoveryChoice(rulesApiDiscoveryChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SingleLoadBalancerAppSetting.api_discovery_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_discovery_choice"] = vFn

	vrhMaliciousUserDetectionChoice := v.MaliciousUserDetectionChoiceValidationRuleHandler
	rulesMaliciousUserDetectionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMaliciousUserDetectionChoice(rulesMaliciousUserDetectionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SingleLoadBalancerAppSetting.malicious_user_detection_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["malicious_user_detection_choice"] = vFn

	v.FldValidators["api_discovery_choice.enable_discovery"] = ves_io_schema_views_common_waf.ApiDiscoverySettingValidator().Validate

	return v
}()

func SingleLoadBalancerAppSettingValidator() db.Validator {
	return DefaultSingleLoadBalancerAppSettingValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetAdvertiseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AdvertiseChoice.(type) {
	case nil:
		o.AdvertiseChoice = nil

	case *CreateSpecType_AdvertiseCustom:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *CreateSpecType_AdvertiseOnPublic:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *CreateSpecType_AdvertiseOnPublicDefaultVip:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *CreateSpecType_DoNotAdvertise:
		o.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetAdvertiseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AdvertiseChoice.(type) {
	case nil:
		r.AdvertiseChoice = nil

	case *GlobalSpecType_AdvertiseCustom:
		r.AdvertiseChoice = &CreateSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *GlobalSpecType_AdvertiseOnPublic:
		r.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		r.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *GlobalSpecType_DoNotAdvertise:
		r.AdvertiseChoice = &CreateSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetApiDefinitionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ApiDefinitionChoice.(type) {
	case nil:
		o.ApiDefinitionChoice = nil

	case *CreateSpecType_ApiDefinition:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *CreateSpecType_ApiDefinitions:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiDefinitions{ApiDefinitions: of.ApiDefinitions}

	case *CreateSpecType_ApiSpecification:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiSpecification{ApiSpecification: of.ApiSpecification}

	case *CreateSpecType_DisableApiDefinition:
		o.ApiDefinitionChoice = &GlobalSpecType_DisableApiDefinition{DisableApiDefinition: of.DisableApiDefinition}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetApiDefinitionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ApiDefinitionChoice.(type) {
	case nil:
		r.ApiDefinitionChoice = nil

	case *GlobalSpecType_ApiDefinition:
		r.ApiDefinitionChoice = &CreateSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *GlobalSpecType_ApiDefinitions:
		r.ApiDefinitionChoice = &CreateSpecType_ApiDefinitions{ApiDefinitions: of.ApiDefinitions}

	case *GlobalSpecType_ApiSpecification:
		r.ApiDefinitionChoice = &CreateSpecType_ApiSpecification{ApiSpecification: of.ApiSpecification}

	case *GlobalSpecType_DisableApiDefinition:
		r.ApiDefinitionChoice = &CreateSpecType_DisableApiDefinition{DisableApiDefinition: of.DisableApiDefinition}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetApiDiscoveryChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ApiDiscoveryChoice.(type) {
	case nil:
		o.ApiDiscoveryChoice = nil

	case *CreateSpecType_DisableApiDiscovery:
		o.ApiDiscoveryChoice = &GlobalSpecType_DisableApiDiscovery{DisableApiDiscovery: of.DisableApiDiscovery}

	case *CreateSpecType_EnableApiDiscovery:
		o.ApiDiscoveryChoice = &GlobalSpecType_EnableApiDiscovery{EnableApiDiscovery: of.EnableApiDiscovery}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetApiDiscoveryChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ApiDiscoveryChoice.(type) {
	case nil:
		r.ApiDiscoveryChoice = nil

	case *GlobalSpecType_DisableApiDiscovery:
		r.ApiDiscoveryChoice = &CreateSpecType_DisableApiDiscovery{DisableApiDiscovery: of.DisableApiDiscovery}

	case *GlobalSpecType_EnableApiDiscovery:
		r.ApiDiscoveryChoice = &CreateSpecType_EnableApiDiscovery{EnableApiDiscovery: of.EnableApiDiscovery}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetBotDefenseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BotDefenseChoice.(type) {
	case nil:
		o.BotDefenseChoice = nil

	case *CreateSpecType_BotDefense:
		o.BotDefenseChoice = &GlobalSpecType_BotDefense{BotDefense: of.BotDefense}

	case *CreateSpecType_BotDefenseAdvanced:
		o.BotDefenseChoice = &GlobalSpecType_BotDefenseAdvanced{BotDefenseAdvanced: of.BotDefenseAdvanced}

	case *CreateSpecType_DisableBotDefense:
		o.BotDefenseChoice = &GlobalSpecType_DisableBotDefense{DisableBotDefense: of.DisableBotDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetBotDefenseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BotDefenseChoice.(type) {
	case nil:
		r.BotDefenseChoice = nil

	case *GlobalSpecType_BotDefense:
		r.BotDefenseChoice = &CreateSpecType_BotDefense{BotDefense: of.BotDefense}

	case *GlobalSpecType_BotDefenseAdvanced:
		r.BotDefenseChoice = &CreateSpecType_BotDefenseAdvanced{BotDefenseAdvanced: of.BotDefenseAdvanced}

	case *GlobalSpecType_DisableBotDefense:
		r.BotDefenseChoice = &CreateSpecType_DisableBotDefense{DisableBotDefense: of.DisableBotDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetChallengeTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ChallengeType.(type) {
	case nil:
		o.ChallengeType = nil

	case *CreateSpecType_CaptchaChallenge:
		o.ChallengeType = &GlobalSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *CreateSpecType_EnableChallenge:
		o.ChallengeType = &GlobalSpecType_EnableChallenge{EnableChallenge: of.EnableChallenge}

	case *CreateSpecType_JsChallenge:
		o.ChallengeType = &GlobalSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *CreateSpecType_NoChallenge:
		o.ChallengeType = &GlobalSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *CreateSpecType_PolicyBasedChallenge:
		o.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetChallengeTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ChallengeType.(type) {
	case nil:
		r.ChallengeType = nil

	case *GlobalSpecType_CaptchaChallenge:
		r.ChallengeType = &CreateSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *GlobalSpecType_EnableChallenge:
		r.ChallengeType = &CreateSpecType_EnableChallenge{EnableChallenge: of.EnableChallenge}

	case *GlobalSpecType_JsChallenge:
		r.ChallengeType = &CreateSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *GlobalSpecType_NoChallenge:
		r.ChallengeType = &CreateSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *GlobalSpecType_PolicyBasedChallenge:
		r.ChallengeType = &CreateSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetClientSideDefenseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClientSideDefenseChoice.(type) {
	case nil:
		o.ClientSideDefenseChoice = nil

	case *CreateSpecType_ClientSideDefense:
		o.ClientSideDefenseChoice = &GlobalSpecType_ClientSideDefense{ClientSideDefense: of.ClientSideDefense}

	case *CreateSpecType_DisableClientSideDefense:
		o.ClientSideDefenseChoice = &GlobalSpecType_DisableClientSideDefense{DisableClientSideDefense: of.DisableClientSideDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetClientSideDefenseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClientSideDefenseChoice.(type) {
	case nil:
		r.ClientSideDefenseChoice = nil

	case *GlobalSpecType_ClientSideDefense:
		r.ClientSideDefenseChoice = &CreateSpecType_ClientSideDefense{ClientSideDefense: of.ClientSideDefense}

	case *GlobalSpecType_DisableClientSideDefense:
		r.ClientSideDefenseChoice = &CreateSpecType_DisableClientSideDefense{DisableClientSideDefense: of.DisableClientSideDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetHashPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HashPolicyChoice.(type) {
	case nil:
		o.HashPolicyChoice = nil

	case *CreateSpecType_CookieStickiness:
		o.HashPolicyChoice = &GlobalSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *CreateSpecType_LeastActive:
		o.HashPolicyChoice = &GlobalSpecType_LeastActive{LeastActive: of.LeastActive}

	case *CreateSpecType_Random:
		o.HashPolicyChoice = &GlobalSpecType_Random{Random: of.Random}

	case *CreateSpecType_RingHash:
		o.HashPolicyChoice = &GlobalSpecType_RingHash{RingHash: of.RingHash}

	case *CreateSpecType_RoundRobin:
		o.HashPolicyChoice = &GlobalSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *CreateSpecType_SourceIpStickiness:
		o.HashPolicyChoice = &GlobalSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetHashPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HashPolicyChoice.(type) {
	case nil:
		r.HashPolicyChoice = nil

	case *GlobalSpecType_CookieStickiness:
		r.HashPolicyChoice = &CreateSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *GlobalSpecType_LeastActive:
		r.HashPolicyChoice = &CreateSpecType_LeastActive{LeastActive: of.LeastActive}

	case *GlobalSpecType_Random:
		r.HashPolicyChoice = &CreateSpecType_Random{Random: of.Random}

	case *GlobalSpecType_RingHash:
		r.HashPolicyChoice = &CreateSpecType_RingHash{RingHash: of.RingHash}

	case *GlobalSpecType_RoundRobin:
		r.HashPolicyChoice = &CreateSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *GlobalSpecType_SourceIpStickiness:
		r.HashPolicyChoice = &CreateSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetIpReputationChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IpReputationChoice.(type) {
	case nil:
		o.IpReputationChoice = nil

	case *CreateSpecType_DisableIpReputation:
		o.IpReputationChoice = &GlobalSpecType_DisableIpReputation{DisableIpReputation: of.DisableIpReputation}

	case *CreateSpecType_EnableIpReputation:
		o.IpReputationChoice = &GlobalSpecType_EnableIpReputation{EnableIpReputation: of.EnableIpReputation}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetIpReputationChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IpReputationChoice.(type) {
	case nil:
		r.IpReputationChoice = nil

	case *GlobalSpecType_DisableIpReputation:
		r.IpReputationChoice = &CreateSpecType_DisableIpReputation{DisableIpReputation: of.DisableIpReputation}

	case *GlobalSpecType_EnableIpReputation:
		r.IpReputationChoice = &CreateSpecType_EnableIpReputation{EnableIpReputation: of.EnableIpReputation}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetL7DdosAutoMitigationActionToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.L7DdosAutoMitigationAction.(type) {
	case nil:
		o.L7DdosAutoMitigationAction = nil

	case *CreateSpecType_L7DdosActionBlock:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionBlock{L7DdosActionBlock: of.L7DdosActionBlock}

	case *CreateSpecType_L7DdosActionDefault:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionDefault{L7DdosActionDefault: of.L7DdosActionDefault}

	case *CreateSpecType_L7DdosActionJsChallenge:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionJsChallenge{L7DdosActionJsChallenge: of.L7DdosActionJsChallenge}

	case *CreateSpecType_L7DdosActionNone:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionNone{L7DdosActionNone: of.L7DdosActionNone}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetL7DdosAutoMitigationActionFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.L7DdosAutoMitigationAction.(type) {
	case nil:
		r.L7DdosAutoMitigationAction = nil

	case *GlobalSpecType_L7DdosActionBlock:
		r.L7DdosAutoMitigationAction = &CreateSpecType_L7DdosActionBlock{L7DdosActionBlock: of.L7DdosActionBlock}

	case *GlobalSpecType_L7DdosActionDefault:
		r.L7DdosAutoMitigationAction = &CreateSpecType_L7DdosActionDefault{L7DdosActionDefault: of.L7DdosActionDefault}

	case *GlobalSpecType_L7DdosActionJsChallenge:
		r.L7DdosAutoMitigationAction = &CreateSpecType_L7DdosActionJsChallenge{L7DdosActionJsChallenge: of.L7DdosActionJsChallenge}

	case *GlobalSpecType_L7DdosActionNone:
		r.L7DdosAutoMitigationAction = &CreateSpecType_L7DdosActionNone{L7DdosActionNone: of.L7DdosActionNone}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetLoadbalancerTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LoadbalancerType.(type) {
	case nil:
		o.LoadbalancerType = nil

	case *CreateSpecType_Http:
		o.LoadbalancerType = &GlobalSpecType_Http{Http: of.Http}

	case *CreateSpecType_Https:
		o.LoadbalancerType = &GlobalSpecType_Https{Https: of.Https}

	case *CreateSpecType_HttpsAutoCert:
		o.LoadbalancerType = &GlobalSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetLoadbalancerTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LoadbalancerType.(type) {
	case nil:
		r.LoadbalancerType = nil

	case *GlobalSpecType_Http:
		r.LoadbalancerType = &CreateSpecType_Http{Http: of.Http}

	case *GlobalSpecType_Https:
		r.LoadbalancerType = &CreateSpecType_Https{Https: of.Https}

	case *GlobalSpecType_HttpsAutoCert:
		r.LoadbalancerType = &CreateSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetMaliciousUserDetectionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.MaliciousUserDetectionChoice.(type) {
	case nil:
		o.MaliciousUserDetectionChoice = nil

	case *CreateSpecType_DisableMaliciousUserDetection:
		o.MaliciousUserDetectionChoice = &GlobalSpecType_DisableMaliciousUserDetection{DisableMaliciousUserDetection: of.DisableMaliciousUserDetection}

	case *CreateSpecType_EnableMaliciousUserDetection:
		o.MaliciousUserDetectionChoice = &GlobalSpecType_EnableMaliciousUserDetection{EnableMaliciousUserDetection: of.EnableMaliciousUserDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetMaliciousUserDetectionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.MaliciousUserDetectionChoice.(type) {
	case nil:
		r.MaliciousUserDetectionChoice = nil

	case *GlobalSpecType_DisableMaliciousUserDetection:
		r.MaliciousUserDetectionChoice = &CreateSpecType_DisableMaliciousUserDetection{DisableMaliciousUserDetection: of.DisableMaliciousUserDetection}

	case *GlobalSpecType_EnableMaliciousUserDetection:
		r.MaliciousUserDetectionChoice = &CreateSpecType_EnableMaliciousUserDetection{EnableMaliciousUserDetection: of.EnableMaliciousUserDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetMlConfigChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.MlConfigChoice.(type) {
	case nil:
		o.MlConfigChoice = nil

	case *CreateSpecType_MultiLbApp:
		o.MlConfigChoice = &GlobalSpecType_MultiLbApp{MultiLbApp: of.MultiLbApp}

	case *CreateSpecType_SingleLbApp:
		o.MlConfigChoice = &GlobalSpecType_SingleLbApp{SingleLbApp: of.SingleLbApp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetMlConfigChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.MlConfigChoice.(type) {
	case nil:
		r.MlConfigChoice = nil

	case *GlobalSpecType_MultiLbApp:
		r.MlConfigChoice = &CreateSpecType_MultiLbApp{MultiLbApp: of.MultiLbApp}

	case *GlobalSpecType_SingleLbApp:
		r.MlConfigChoice = &CreateSpecType_SingleLbApp{SingleLbApp: of.SingleLbApp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetOriginPoolChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.OriginPoolChoice.(type) {
	case nil:
		o.OriginPoolChoice = nil

	case *CreateSpecType_DefaultPool:
		o.OriginPoolChoice = &GlobalSpecType_DefaultPool{DefaultPool: of.DefaultPool}

	case *CreateSpecType_DefaultPoolList:
		o.OriginPoolChoice = &GlobalSpecType_DefaultPoolList{DefaultPoolList: of.DefaultPoolList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetOriginPoolChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.OriginPoolChoice.(type) {
	case nil:
		r.OriginPoolChoice = nil

	case *GlobalSpecType_DefaultPool:
		r.OriginPoolChoice = &CreateSpecType_DefaultPool{DefaultPool: of.DefaultPool}

	case *GlobalSpecType_DefaultPoolList:
		r.OriginPoolChoice = &CreateSpecType_DefaultPoolList{DefaultPoolList: of.DefaultPoolList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetRateLimitChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RateLimitChoice.(type) {
	case nil:
		o.RateLimitChoice = nil

	case *CreateSpecType_ApiRateLimit:
		o.RateLimitChoice = &GlobalSpecType_ApiRateLimit{ApiRateLimit: of.ApiRateLimit}

	case *CreateSpecType_DisableRateLimit:
		o.RateLimitChoice = &GlobalSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *CreateSpecType_RateLimit:
		o.RateLimitChoice = &GlobalSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetRateLimitChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RateLimitChoice.(type) {
	case nil:
		r.RateLimitChoice = nil

	case *GlobalSpecType_ApiRateLimit:
		r.RateLimitChoice = &CreateSpecType_ApiRateLimit{ApiRateLimit: of.ApiRateLimit}

	case *GlobalSpecType_DisableRateLimit:
		r.RateLimitChoice = &CreateSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *GlobalSpecType_RateLimit:
		r.RateLimitChoice = &CreateSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetSensitiveDataPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SensitiveDataPolicyChoice.(type) {
	case nil:
		o.SensitiveDataPolicyChoice = nil

	case *CreateSpecType_DefaultSensitiveDataPolicy:
		o.SensitiveDataPolicyChoice = &GlobalSpecType_DefaultSensitiveDataPolicy{DefaultSensitiveDataPolicy: of.DefaultSensitiveDataPolicy}

	case *CreateSpecType_SensitiveDataPolicy:
		o.SensitiveDataPolicyChoice = &GlobalSpecType_SensitiveDataPolicy{SensitiveDataPolicy: of.SensitiveDataPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetSensitiveDataPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SensitiveDataPolicyChoice.(type) {
	case nil:
		r.SensitiveDataPolicyChoice = nil

	case *GlobalSpecType_DefaultSensitiveDataPolicy:
		r.SensitiveDataPolicyChoice = &CreateSpecType_DefaultSensitiveDataPolicy{DefaultSensitiveDataPolicy: of.DefaultSensitiveDataPolicy}

	case *GlobalSpecType_SensitiveDataPolicy:
		r.SensitiveDataPolicyChoice = &CreateSpecType_SensitiveDataPolicy{SensitiveDataPolicy: of.SensitiveDataPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetServicePolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServicePolicyChoice.(type) {
	case nil:
		o.ServicePolicyChoice = nil

	case *CreateSpecType_ActiveServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *CreateSpecType_NoServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *CreateSpecType_ServicePoliciesFromNamespace:
		o.ServicePolicyChoice = &GlobalSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetServicePolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServicePolicyChoice.(type) {
	case nil:
		r.ServicePolicyChoice = nil

	case *GlobalSpecType_ActiveServicePolicies:
		r.ServicePolicyChoice = &CreateSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *GlobalSpecType_NoServicePolicies:
		r.ServicePolicyChoice = &CreateSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *GlobalSpecType_ServicePoliciesFromNamespace:
		r.ServicePolicyChoice = &CreateSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetSlowDdosMitigationChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SlowDdosMitigationChoice.(type) {
	case nil:
		o.SlowDdosMitigationChoice = nil

	case *CreateSpecType_SlowDdosMitigation:
		o.SlowDdosMitigationChoice = &GlobalSpecType_SlowDdosMitigation{SlowDdosMitigation: of.SlowDdosMitigation}

	case *CreateSpecType_SystemDefaultTimeouts:
		o.SlowDdosMitigationChoice = &GlobalSpecType_SystemDefaultTimeouts{SystemDefaultTimeouts: of.SystemDefaultTimeouts}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetSlowDdosMitigationChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SlowDdosMitigationChoice.(type) {
	case nil:
		r.SlowDdosMitigationChoice = nil

	case *GlobalSpecType_SlowDdosMitigation:
		r.SlowDdosMitigationChoice = &CreateSpecType_SlowDdosMitigation{SlowDdosMitigation: of.SlowDdosMitigation}

	case *GlobalSpecType_SystemDefaultTimeouts:
		r.SlowDdosMitigationChoice = &CreateSpecType_SystemDefaultTimeouts{SystemDefaultTimeouts: of.SystemDefaultTimeouts}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetThreatMeshChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ThreatMeshChoice.(type) {
	case nil:
		o.ThreatMeshChoice = nil

	case *CreateSpecType_DisableThreatMesh:
		o.ThreatMeshChoice = &GlobalSpecType_DisableThreatMesh{DisableThreatMesh: of.DisableThreatMesh}

	case *CreateSpecType_EnableThreatMesh:
		o.ThreatMeshChoice = &GlobalSpecType_EnableThreatMesh{EnableThreatMesh: of.EnableThreatMesh}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetThreatMeshChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ThreatMeshChoice.(type) {
	case nil:
		r.ThreatMeshChoice = nil

	case *GlobalSpecType_DisableThreatMesh:
		r.ThreatMeshChoice = &CreateSpecType_DisableThreatMesh{DisableThreatMesh: of.DisableThreatMesh}

	case *GlobalSpecType_EnableThreatMesh:
		r.ThreatMeshChoice = &CreateSpecType_EnableThreatMesh{EnableThreatMesh: of.EnableThreatMesh}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetTrustClientIpHeadersChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.TrustClientIpHeadersChoice.(type) {
	case nil:
		o.TrustClientIpHeadersChoice = nil

	case *CreateSpecType_DisableTrustClientIpHeaders:
		o.TrustClientIpHeadersChoice = &GlobalSpecType_DisableTrustClientIpHeaders{DisableTrustClientIpHeaders: of.DisableTrustClientIpHeaders}

	case *CreateSpecType_EnableTrustClientIpHeaders:
		o.TrustClientIpHeadersChoice = &GlobalSpecType_EnableTrustClientIpHeaders{EnableTrustClientIpHeaders: of.EnableTrustClientIpHeaders}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetTrustClientIpHeadersChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.TrustClientIpHeadersChoice.(type) {
	case nil:
		r.TrustClientIpHeadersChoice = nil

	case *GlobalSpecType_DisableTrustClientIpHeaders:
		r.TrustClientIpHeadersChoice = &CreateSpecType_DisableTrustClientIpHeaders{DisableTrustClientIpHeaders: of.DisableTrustClientIpHeaders}

	case *GlobalSpecType_EnableTrustClientIpHeaders:
		r.TrustClientIpHeadersChoice = &CreateSpecType_EnableTrustClientIpHeaders{EnableTrustClientIpHeaders: of.EnableTrustClientIpHeaders}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetUserIdChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.UserIdChoice.(type) {
	case nil:
		o.UserIdChoice = nil

	case *CreateSpecType_UserIdClientIp:
		o.UserIdChoice = &GlobalSpecType_UserIdClientIp{UserIdClientIp: of.UserIdClientIp}

	case *CreateSpecType_UserIdentification:
		o.UserIdChoice = &GlobalSpecType_UserIdentification{UserIdentification: of.UserIdentification}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetUserIdChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.UserIdChoice.(type) {
	case nil:
		r.UserIdChoice = nil

	case *GlobalSpecType_UserIdClientIp:
		r.UserIdChoice = &CreateSpecType_UserIdClientIp{UserIdClientIp: of.UserIdClientIp}

	case *GlobalSpecType_UserIdentification:
		r.UserIdChoice = &CreateSpecType_UserIdentification{UserIdentification: of.UserIdentification}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetWafChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WafChoice.(type) {
	case nil:
		o.WafChoice = nil

	case *CreateSpecType_AppFirewall:
		o.WafChoice = &GlobalSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *CreateSpecType_DisableWaf:
		o.WafChoice = &GlobalSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetWafChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WafChoice.(type) {
	case nil:
		r.WafChoice = nil

	case *GlobalSpecType_AppFirewall:
		r.WafChoice = &CreateSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *GlobalSpecType_DisableWaf:
		r.WafChoice = &CreateSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AddLocation = f.GetAddLocation()
	m.GetAdvertiseChoiceFromGlobalSpecType(f)
	m.GetApiDefinitionChoiceFromGlobalSpecType(f)
	m.GetApiDiscoveryChoiceFromGlobalSpecType(f)
	m.ApiProtectionRules = f.GetApiProtectionRules()
	m.ApiRateLimitLegacy = f.GetApiRateLimitLegacy()
	m.BlockedClients = f.GetBlockedClients()
	m.GetBotDefenseChoiceFromGlobalSpecType(f)
	m.GetChallengeTypeFromGlobalSpecType(f)
	m.GetClientSideDefenseChoiceFromGlobalSpecType(f)
	m.CorsPolicy = f.GetCorsPolicy()
	m.CsrfPolicy = f.GetCsrfPolicy()
	m.DataGuardRules = f.GetDataGuardRules()
	m.DdosMitigationRules = f.GetDdosMitigationRules()
	m.DefaultRoutePools = f.GetDefaultRoutePools()
	m.Domains = f.GetDomains()
	m.GraphqlRules = f.GetGraphqlRules()
	m.GetHashPolicyChoiceFromGlobalSpecType(f)
	m.GetIpReputationChoiceFromGlobalSpecType(f)
	m.JwtValidation = f.GetJwtValidation()
	m.GetL7DdosAutoMitigationActionFromGlobalSpecType(f)
	m.GetLoadbalancerTypeFromGlobalSpecType(f)
	m.GetMaliciousUserDetectionChoiceFromGlobalSpecType(f)
	m.MaliciousUserMitigation = f.GetMaliciousUserMitigation()
	m.GetMlConfigChoiceFromGlobalSpecType(f)
	m.MoreOption = f.GetMoreOption()
	m.GetOriginPoolChoiceFromGlobalSpecType(f)
	m.OriginServerSubsetRuleList = f.GetOriginServerSubsetRuleList()
	m.ProtectedCookies = f.GetProtectedCookies()
	m.GetRateLimitChoiceFromGlobalSpecType(f)
	m.Routes = f.GetRoutes()
	m.SensitiveDataDisclosureRules = f.GetSensitiveDataDisclosureRules()
	m.GetSensitiveDataPolicyChoiceFromGlobalSpecType(f)
	m.GetServicePolicyChoiceFromGlobalSpecType(f)
	m.GetSlowDdosMitigationChoiceFromGlobalSpecType(f)
	m.GetThreatMeshChoiceFromGlobalSpecType(f)
	m.GetTrustClientIpHeadersChoiceFromGlobalSpecType(f)
	m.TrustedClients = f.GetTrustedClients()
	m.GetUserIdChoiceFromGlobalSpecType(f)
	m.GetWafChoiceFromGlobalSpecType(f)
	m.WafExclusionRules = f.GetWafExclusionRules()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AddLocation = m1.AddLocation
	m1.SetAdvertiseChoiceToGlobalSpecType(f)
	m1.SetApiDefinitionChoiceToGlobalSpecType(f)
	m1.SetApiDiscoveryChoiceToGlobalSpecType(f)
	f.ApiProtectionRules = m1.ApiProtectionRules
	f.ApiRateLimitLegacy = m1.ApiRateLimitLegacy
	f.BlockedClients = m1.BlockedClients
	m1.SetBotDefenseChoiceToGlobalSpecType(f)
	m1.SetChallengeTypeToGlobalSpecType(f)
	m1.SetClientSideDefenseChoiceToGlobalSpecType(f)
	f.CorsPolicy = m1.CorsPolicy
	f.CsrfPolicy = m1.CsrfPolicy
	f.DataGuardRules = m1.DataGuardRules
	f.DdosMitigationRules = m1.DdosMitigationRules
	f.DefaultRoutePools = m1.DefaultRoutePools
	f.Domains = m1.Domains
	f.GraphqlRules = m1.GraphqlRules
	m1.SetHashPolicyChoiceToGlobalSpecType(f)
	m1.SetIpReputationChoiceToGlobalSpecType(f)
	f.JwtValidation = m1.JwtValidation
	m1.SetL7DdosAutoMitigationActionToGlobalSpecType(f)
	m1.SetLoadbalancerTypeToGlobalSpecType(f)
	m1.SetMaliciousUserDetectionChoiceToGlobalSpecType(f)
	f.MaliciousUserMitigation = m1.MaliciousUserMitigation
	m1.SetMlConfigChoiceToGlobalSpecType(f)
	f.MoreOption = m1.MoreOption
	m1.SetOriginPoolChoiceToGlobalSpecType(f)
	f.OriginServerSubsetRuleList = m1.OriginServerSubsetRuleList
	f.ProtectedCookies = m1.ProtectedCookies
	m1.SetRateLimitChoiceToGlobalSpecType(f)
	f.Routes = m1.Routes
	f.SensitiveDataDisclosureRules = m1.SensitiveDataDisclosureRules
	m1.SetSensitiveDataPolicyChoiceToGlobalSpecType(f)
	m1.SetServicePolicyChoiceToGlobalSpecType(f)
	m1.SetSlowDdosMitigationChoiceToGlobalSpecType(f)
	m1.SetThreatMeshChoiceToGlobalSpecType(f)
	m1.SetTrustClientIpHeadersChoiceToGlobalSpecType(f)
	f.TrustedClients = m1.TrustedClients
	m1.SetUserIdChoiceToGlobalSpecType(f)
	m1.SetWafChoiceToGlobalSpecType(f)
	f.WafExclusionRules = m1.WafExclusionRules
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetAdvertiseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AdvertiseChoice.(type) {
	case nil:
		o.AdvertiseChoice = nil

	case *GetSpecType_AdvertiseCustom:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *GetSpecType_AdvertiseOnPublic:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *GetSpecType_AdvertiseOnPublicDefaultVip:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *GetSpecType_DoNotAdvertise:
		o.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetAdvertiseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AdvertiseChoice.(type) {
	case nil:
		r.AdvertiseChoice = nil

	case *GlobalSpecType_AdvertiseCustom:
		r.AdvertiseChoice = &GetSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *GlobalSpecType_AdvertiseOnPublic:
		r.AdvertiseChoice = &GetSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		r.AdvertiseChoice = &GetSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *GlobalSpecType_DoNotAdvertise:
		r.AdvertiseChoice = &GetSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetApiDefinitionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ApiDefinitionChoice.(type) {
	case nil:
		o.ApiDefinitionChoice = nil

	case *GetSpecType_ApiDefinition:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *GetSpecType_ApiDefinitions:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiDefinitions{ApiDefinitions: of.ApiDefinitions}

	case *GetSpecType_ApiSpecification:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiSpecification{ApiSpecification: of.ApiSpecification}

	case *GetSpecType_DisableApiDefinition:
		o.ApiDefinitionChoice = &GlobalSpecType_DisableApiDefinition{DisableApiDefinition: of.DisableApiDefinition}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetApiDefinitionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ApiDefinitionChoice.(type) {
	case nil:
		r.ApiDefinitionChoice = nil

	case *GlobalSpecType_ApiDefinition:
		r.ApiDefinitionChoice = &GetSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *GlobalSpecType_ApiDefinitions:
		r.ApiDefinitionChoice = &GetSpecType_ApiDefinitions{ApiDefinitions: of.ApiDefinitions}

	case *GlobalSpecType_ApiSpecification:
		r.ApiDefinitionChoice = &GetSpecType_ApiSpecification{ApiSpecification: of.ApiSpecification}

	case *GlobalSpecType_DisableApiDefinition:
		r.ApiDefinitionChoice = &GetSpecType_DisableApiDefinition{DisableApiDefinition: of.DisableApiDefinition}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetApiDiscoveryChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ApiDiscoveryChoice.(type) {
	case nil:
		o.ApiDiscoveryChoice = nil

	case *GetSpecType_DisableApiDiscovery:
		o.ApiDiscoveryChoice = &GlobalSpecType_DisableApiDiscovery{DisableApiDiscovery: of.DisableApiDiscovery}

	case *GetSpecType_EnableApiDiscovery:
		o.ApiDiscoveryChoice = &GlobalSpecType_EnableApiDiscovery{EnableApiDiscovery: of.EnableApiDiscovery}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetApiDiscoveryChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ApiDiscoveryChoice.(type) {
	case nil:
		r.ApiDiscoveryChoice = nil

	case *GlobalSpecType_DisableApiDiscovery:
		r.ApiDiscoveryChoice = &GetSpecType_DisableApiDiscovery{DisableApiDiscovery: of.DisableApiDiscovery}

	case *GlobalSpecType_EnableApiDiscovery:
		r.ApiDiscoveryChoice = &GetSpecType_EnableApiDiscovery{EnableApiDiscovery: of.EnableApiDiscovery}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetBotDefenseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BotDefenseChoice.(type) {
	case nil:
		o.BotDefenseChoice = nil

	case *GetSpecType_BotDefense:
		o.BotDefenseChoice = &GlobalSpecType_BotDefense{BotDefense: of.BotDefense}

	case *GetSpecType_BotDefenseAdvanced:
		o.BotDefenseChoice = &GlobalSpecType_BotDefenseAdvanced{BotDefenseAdvanced: of.BotDefenseAdvanced}

	case *GetSpecType_DisableBotDefense:
		o.BotDefenseChoice = &GlobalSpecType_DisableBotDefense{DisableBotDefense: of.DisableBotDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetBotDefenseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BotDefenseChoice.(type) {
	case nil:
		r.BotDefenseChoice = nil

	case *GlobalSpecType_BotDefense:
		r.BotDefenseChoice = &GetSpecType_BotDefense{BotDefense: of.BotDefense}

	case *GlobalSpecType_BotDefenseAdvanced:
		r.BotDefenseChoice = &GetSpecType_BotDefenseAdvanced{BotDefenseAdvanced: of.BotDefenseAdvanced}

	case *GlobalSpecType_DisableBotDefense:
		r.BotDefenseChoice = &GetSpecType_DisableBotDefense{DisableBotDefense: of.DisableBotDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetChallengeTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ChallengeType.(type) {
	case nil:
		o.ChallengeType = nil

	case *GetSpecType_CaptchaChallenge:
		o.ChallengeType = &GlobalSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *GetSpecType_EnableChallenge:
		o.ChallengeType = &GlobalSpecType_EnableChallenge{EnableChallenge: of.EnableChallenge}

	case *GetSpecType_JsChallenge:
		o.ChallengeType = &GlobalSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *GetSpecType_NoChallenge:
		o.ChallengeType = &GlobalSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *GetSpecType_PolicyBasedChallenge:
		o.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetChallengeTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ChallengeType.(type) {
	case nil:
		r.ChallengeType = nil

	case *GlobalSpecType_CaptchaChallenge:
		r.ChallengeType = &GetSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *GlobalSpecType_EnableChallenge:
		r.ChallengeType = &GetSpecType_EnableChallenge{EnableChallenge: of.EnableChallenge}

	case *GlobalSpecType_JsChallenge:
		r.ChallengeType = &GetSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *GlobalSpecType_NoChallenge:
		r.ChallengeType = &GetSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *GlobalSpecType_PolicyBasedChallenge:
		r.ChallengeType = &GetSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetClientSideDefenseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClientSideDefenseChoice.(type) {
	case nil:
		o.ClientSideDefenseChoice = nil

	case *GetSpecType_ClientSideDefense:
		o.ClientSideDefenseChoice = &GlobalSpecType_ClientSideDefense{ClientSideDefense: of.ClientSideDefense}

	case *GetSpecType_DisableClientSideDefense:
		o.ClientSideDefenseChoice = &GlobalSpecType_DisableClientSideDefense{DisableClientSideDefense: of.DisableClientSideDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetClientSideDefenseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClientSideDefenseChoice.(type) {
	case nil:
		r.ClientSideDefenseChoice = nil

	case *GlobalSpecType_ClientSideDefense:
		r.ClientSideDefenseChoice = &GetSpecType_ClientSideDefense{ClientSideDefense: of.ClientSideDefense}

	case *GlobalSpecType_DisableClientSideDefense:
		r.ClientSideDefenseChoice = &GetSpecType_DisableClientSideDefense{DisableClientSideDefense: of.DisableClientSideDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetHashPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HashPolicyChoice.(type) {
	case nil:
		o.HashPolicyChoice = nil

	case *GetSpecType_CookieStickiness:
		o.HashPolicyChoice = &GlobalSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *GetSpecType_LeastActive:
		o.HashPolicyChoice = &GlobalSpecType_LeastActive{LeastActive: of.LeastActive}

	case *GetSpecType_Random:
		o.HashPolicyChoice = &GlobalSpecType_Random{Random: of.Random}

	case *GetSpecType_RingHash:
		o.HashPolicyChoice = &GlobalSpecType_RingHash{RingHash: of.RingHash}

	case *GetSpecType_RoundRobin:
		o.HashPolicyChoice = &GlobalSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *GetSpecType_SourceIpStickiness:
		o.HashPolicyChoice = &GlobalSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetHashPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HashPolicyChoice.(type) {
	case nil:
		r.HashPolicyChoice = nil

	case *GlobalSpecType_CookieStickiness:
		r.HashPolicyChoice = &GetSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *GlobalSpecType_LeastActive:
		r.HashPolicyChoice = &GetSpecType_LeastActive{LeastActive: of.LeastActive}

	case *GlobalSpecType_Random:
		r.HashPolicyChoice = &GetSpecType_Random{Random: of.Random}

	case *GlobalSpecType_RingHash:
		r.HashPolicyChoice = &GetSpecType_RingHash{RingHash: of.RingHash}

	case *GlobalSpecType_RoundRobin:
		r.HashPolicyChoice = &GetSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *GlobalSpecType_SourceIpStickiness:
		r.HashPolicyChoice = &GetSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetIpReputationChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IpReputationChoice.(type) {
	case nil:
		o.IpReputationChoice = nil

	case *GetSpecType_DisableIpReputation:
		o.IpReputationChoice = &GlobalSpecType_DisableIpReputation{DisableIpReputation: of.DisableIpReputation}

	case *GetSpecType_EnableIpReputation:
		o.IpReputationChoice = &GlobalSpecType_EnableIpReputation{EnableIpReputation: of.EnableIpReputation}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetIpReputationChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IpReputationChoice.(type) {
	case nil:
		r.IpReputationChoice = nil

	case *GlobalSpecType_DisableIpReputation:
		r.IpReputationChoice = &GetSpecType_DisableIpReputation{DisableIpReputation: of.DisableIpReputation}

	case *GlobalSpecType_EnableIpReputation:
		r.IpReputationChoice = &GetSpecType_EnableIpReputation{EnableIpReputation: of.EnableIpReputation}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetL7DdosAutoMitigationActionToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.L7DdosAutoMitigationAction.(type) {
	case nil:
		o.L7DdosAutoMitigationAction = nil

	case *GetSpecType_L7DdosActionBlock:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionBlock{L7DdosActionBlock: of.L7DdosActionBlock}

	case *GetSpecType_L7DdosActionDefault:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionDefault{L7DdosActionDefault: of.L7DdosActionDefault}

	case *GetSpecType_L7DdosActionJsChallenge:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionJsChallenge{L7DdosActionJsChallenge: of.L7DdosActionJsChallenge}

	case *GetSpecType_L7DdosActionNone:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionNone{L7DdosActionNone: of.L7DdosActionNone}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetL7DdosAutoMitigationActionFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.L7DdosAutoMitigationAction.(type) {
	case nil:
		r.L7DdosAutoMitigationAction = nil

	case *GlobalSpecType_L7DdosActionBlock:
		r.L7DdosAutoMitigationAction = &GetSpecType_L7DdosActionBlock{L7DdosActionBlock: of.L7DdosActionBlock}

	case *GlobalSpecType_L7DdosActionDefault:
		r.L7DdosAutoMitigationAction = &GetSpecType_L7DdosActionDefault{L7DdosActionDefault: of.L7DdosActionDefault}

	case *GlobalSpecType_L7DdosActionJsChallenge:
		r.L7DdosAutoMitigationAction = &GetSpecType_L7DdosActionJsChallenge{L7DdosActionJsChallenge: of.L7DdosActionJsChallenge}

	case *GlobalSpecType_L7DdosActionNone:
		r.L7DdosAutoMitigationAction = &GetSpecType_L7DdosActionNone{L7DdosActionNone: of.L7DdosActionNone}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetLoadbalancerTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LoadbalancerType.(type) {
	case nil:
		o.LoadbalancerType = nil

	case *GetSpecType_Http:
		o.LoadbalancerType = &GlobalSpecType_Http{Http: of.Http}

	case *GetSpecType_Https:
		o.LoadbalancerType = &GlobalSpecType_Https{Https: of.Https}

	case *GetSpecType_HttpsAutoCert:
		o.LoadbalancerType = &GlobalSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetLoadbalancerTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LoadbalancerType.(type) {
	case nil:
		r.LoadbalancerType = nil

	case *GlobalSpecType_Http:
		r.LoadbalancerType = &GetSpecType_Http{Http: of.Http}

	case *GlobalSpecType_Https:
		r.LoadbalancerType = &GetSpecType_Https{Https: of.Https}

	case *GlobalSpecType_HttpsAutoCert:
		r.LoadbalancerType = &GetSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetMaliciousUserDetectionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.MaliciousUserDetectionChoice.(type) {
	case nil:
		o.MaliciousUserDetectionChoice = nil

	case *GetSpecType_DisableMaliciousUserDetection:
		o.MaliciousUserDetectionChoice = &GlobalSpecType_DisableMaliciousUserDetection{DisableMaliciousUserDetection: of.DisableMaliciousUserDetection}

	case *GetSpecType_EnableMaliciousUserDetection:
		o.MaliciousUserDetectionChoice = &GlobalSpecType_EnableMaliciousUserDetection{EnableMaliciousUserDetection: of.EnableMaliciousUserDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetMaliciousUserDetectionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.MaliciousUserDetectionChoice.(type) {
	case nil:
		r.MaliciousUserDetectionChoice = nil

	case *GlobalSpecType_DisableMaliciousUserDetection:
		r.MaliciousUserDetectionChoice = &GetSpecType_DisableMaliciousUserDetection{DisableMaliciousUserDetection: of.DisableMaliciousUserDetection}

	case *GlobalSpecType_EnableMaliciousUserDetection:
		r.MaliciousUserDetectionChoice = &GetSpecType_EnableMaliciousUserDetection{EnableMaliciousUserDetection: of.EnableMaliciousUserDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetMlConfigChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.MlConfigChoice.(type) {
	case nil:
		o.MlConfigChoice = nil

	case *GetSpecType_MultiLbApp:
		o.MlConfigChoice = &GlobalSpecType_MultiLbApp{MultiLbApp: of.MultiLbApp}

	case *GetSpecType_SingleLbApp:
		o.MlConfigChoice = &GlobalSpecType_SingleLbApp{SingleLbApp: of.SingleLbApp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetMlConfigChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.MlConfigChoice.(type) {
	case nil:
		r.MlConfigChoice = nil

	case *GlobalSpecType_MultiLbApp:
		r.MlConfigChoice = &GetSpecType_MultiLbApp{MultiLbApp: of.MultiLbApp}

	case *GlobalSpecType_SingleLbApp:
		r.MlConfigChoice = &GetSpecType_SingleLbApp{SingleLbApp: of.SingleLbApp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetOriginPoolChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.OriginPoolChoice.(type) {
	case nil:
		o.OriginPoolChoice = nil

	case *GetSpecType_DefaultPool:
		o.OriginPoolChoice = &GlobalSpecType_DefaultPool{DefaultPool: of.DefaultPool}

	case *GetSpecType_DefaultPoolList:
		o.OriginPoolChoice = &GlobalSpecType_DefaultPoolList{DefaultPoolList: of.DefaultPoolList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetOriginPoolChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.OriginPoolChoice.(type) {
	case nil:
		r.OriginPoolChoice = nil

	case *GlobalSpecType_DefaultPool:
		r.OriginPoolChoice = &GetSpecType_DefaultPool{DefaultPool: of.DefaultPool}

	case *GlobalSpecType_DefaultPoolList:
		r.OriginPoolChoice = &GetSpecType_DefaultPoolList{DefaultPoolList: of.DefaultPoolList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetRateLimitChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RateLimitChoice.(type) {
	case nil:
		o.RateLimitChoice = nil

	case *GetSpecType_ApiRateLimit:
		o.RateLimitChoice = &GlobalSpecType_ApiRateLimit{ApiRateLimit: of.ApiRateLimit}

	case *GetSpecType_DisableRateLimit:
		o.RateLimitChoice = &GlobalSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *GetSpecType_RateLimit:
		o.RateLimitChoice = &GlobalSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetRateLimitChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RateLimitChoice.(type) {
	case nil:
		r.RateLimitChoice = nil

	case *GlobalSpecType_ApiRateLimit:
		r.RateLimitChoice = &GetSpecType_ApiRateLimit{ApiRateLimit: of.ApiRateLimit}

	case *GlobalSpecType_DisableRateLimit:
		r.RateLimitChoice = &GetSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *GlobalSpecType_RateLimit:
		r.RateLimitChoice = &GetSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetSensitiveDataPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SensitiveDataPolicyChoice.(type) {
	case nil:
		o.SensitiveDataPolicyChoice = nil

	case *GetSpecType_DefaultSensitiveDataPolicy:
		o.SensitiveDataPolicyChoice = &GlobalSpecType_DefaultSensitiveDataPolicy{DefaultSensitiveDataPolicy: of.DefaultSensitiveDataPolicy}

	case *GetSpecType_SensitiveDataPolicy:
		o.SensitiveDataPolicyChoice = &GlobalSpecType_SensitiveDataPolicy{SensitiveDataPolicy: of.SensitiveDataPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetSensitiveDataPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SensitiveDataPolicyChoice.(type) {
	case nil:
		r.SensitiveDataPolicyChoice = nil

	case *GlobalSpecType_DefaultSensitiveDataPolicy:
		r.SensitiveDataPolicyChoice = &GetSpecType_DefaultSensitiveDataPolicy{DefaultSensitiveDataPolicy: of.DefaultSensitiveDataPolicy}

	case *GlobalSpecType_SensitiveDataPolicy:
		r.SensitiveDataPolicyChoice = &GetSpecType_SensitiveDataPolicy{SensitiveDataPolicy: of.SensitiveDataPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetServicePolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServicePolicyChoice.(type) {
	case nil:
		o.ServicePolicyChoice = nil

	case *GetSpecType_ActiveServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *GetSpecType_NoServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *GetSpecType_ServicePoliciesFromNamespace:
		o.ServicePolicyChoice = &GlobalSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetServicePolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServicePolicyChoice.(type) {
	case nil:
		r.ServicePolicyChoice = nil

	case *GlobalSpecType_ActiveServicePolicies:
		r.ServicePolicyChoice = &GetSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *GlobalSpecType_NoServicePolicies:
		r.ServicePolicyChoice = &GetSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *GlobalSpecType_ServicePoliciesFromNamespace:
		r.ServicePolicyChoice = &GetSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetSlowDdosMitigationChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SlowDdosMitigationChoice.(type) {
	case nil:
		o.SlowDdosMitigationChoice = nil

	case *GetSpecType_SlowDdosMitigation:
		o.SlowDdosMitigationChoice = &GlobalSpecType_SlowDdosMitigation{SlowDdosMitigation: of.SlowDdosMitigation}

	case *GetSpecType_SystemDefaultTimeouts:
		o.SlowDdosMitigationChoice = &GlobalSpecType_SystemDefaultTimeouts{SystemDefaultTimeouts: of.SystemDefaultTimeouts}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetSlowDdosMitigationChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SlowDdosMitigationChoice.(type) {
	case nil:
		r.SlowDdosMitigationChoice = nil

	case *GlobalSpecType_SlowDdosMitigation:
		r.SlowDdosMitigationChoice = &GetSpecType_SlowDdosMitigation{SlowDdosMitigation: of.SlowDdosMitigation}

	case *GlobalSpecType_SystemDefaultTimeouts:
		r.SlowDdosMitigationChoice = &GetSpecType_SystemDefaultTimeouts{SystemDefaultTimeouts: of.SystemDefaultTimeouts}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetThreatMeshChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ThreatMeshChoice.(type) {
	case nil:
		o.ThreatMeshChoice = nil

	case *GetSpecType_DisableThreatMesh:
		o.ThreatMeshChoice = &GlobalSpecType_DisableThreatMesh{DisableThreatMesh: of.DisableThreatMesh}

	case *GetSpecType_EnableThreatMesh:
		o.ThreatMeshChoice = &GlobalSpecType_EnableThreatMesh{EnableThreatMesh: of.EnableThreatMesh}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetThreatMeshChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ThreatMeshChoice.(type) {
	case nil:
		r.ThreatMeshChoice = nil

	case *GlobalSpecType_DisableThreatMesh:
		r.ThreatMeshChoice = &GetSpecType_DisableThreatMesh{DisableThreatMesh: of.DisableThreatMesh}

	case *GlobalSpecType_EnableThreatMesh:
		r.ThreatMeshChoice = &GetSpecType_EnableThreatMesh{EnableThreatMesh: of.EnableThreatMesh}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetTrustClientIpHeadersChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.TrustClientIpHeadersChoice.(type) {
	case nil:
		o.TrustClientIpHeadersChoice = nil

	case *GetSpecType_DisableTrustClientIpHeaders:
		o.TrustClientIpHeadersChoice = &GlobalSpecType_DisableTrustClientIpHeaders{DisableTrustClientIpHeaders: of.DisableTrustClientIpHeaders}

	case *GetSpecType_EnableTrustClientIpHeaders:
		o.TrustClientIpHeadersChoice = &GlobalSpecType_EnableTrustClientIpHeaders{EnableTrustClientIpHeaders: of.EnableTrustClientIpHeaders}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetTrustClientIpHeadersChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.TrustClientIpHeadersChoice.(type) {
	case nil:
		r.TrustClientIpHeadersChoice = nil

	case *GlobalSpecType_DisableTrustClientIpHeaders:
		r.TrustClientIpHeadersChoice = &GetSpecType_DisableTrustClientIpHeaders{DisableTrustClientIpHeaders: of.DisableTrustClientIpHeaders}

	case *GlobalSpecType_EnableTrustClientIpHeaders:
		r.TrustClientIpHeadersChoice = &GetSpecType_EnableTrustClientIpHeaders{EnableTrustClientIpHeaders: of.EnableTrustClientIpHeaders}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetUserIdChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.UserIdChoice.(type) {
	case nil:
		o.UserIdChoice = nil

	case *GetSpecType_UserIdClientIp:
		o.UserIdChoice = &GlobalSpecType_UserIdClientIp{UserIdClientIp: of.UserIdClientIp}

	case *GetSpecType_UserIdentification:
		o.UserIdChoice = &GlobalSpecType_UserIdentification{UserIdentification: of.UserIdentification}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetUserIdChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.UserIdChoice.(type) {
	case nil:
		r.UserIdChoice = nil

	case *GlobalSpecType_UserIdClientIp:
		r.UserIdChoice = &GetSpecType_UserIdClientIp{UserIdClientIp: of.UserIdClientIp}

	case *GlobalSpecType_UserIdentification:
		r.UserIdChoice = &GetSpecType_UserIdentification{UserIdentification: of.UserIdentification}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetWafChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WafChoice.(type) {
	case nil:
		o.WafChoice = nil

	case *GetSpecType_AppFirewall:
		o.WafChoice = &GlobalSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *GetSpecType_DisableWaf:
		o.WafChoice = &GlobalSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetWafChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WafChoice.(type) {
	case nil:
		r.WafChoice = nil

	case *GlobalSpecType_AppFirewall:
		r.WafChoice = &GetSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *GlobalSpecType_DisableWaf:
		r.WafChoice = &GetSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AddLocation = f.GetAddLocation()
	m.GetAdvertiseChoiceFromGlobalSpecType(f)
	m.GetApiDefinitionChoiceFromGlobalSpecType(f)
	m.GetApiDiscoveryChoiceFromGlobalSpecType(f)
	m.ApiProtectionRules = f.GetApiProtectionRules()
	m.ApiRateLimitLegacy = f.GetApiRateLimitLegacy()
	m.AutoCertInfo = f.GetAutoCertInfo()
	m.BlockedClients = f.GetBlockedClients()
	m.GetBotDefenseChoiceFromGlobalSpecType(f)
	m.CertState = f.GetCertState()
	m.GetChallengeTypeFromGlobalSpecType(f)
	m.GetClientSideDefenseChoiceFromGlobalSpecType(f)
	m.CorsPolicy = f.GetCorsPolicy()
	m.CsrfPolicy = f.GetCsrfPolicy()
	m.DataGuardRules = f.GetDataGuardRules()
	m.DdosMitigationRules = f.GetDdosMitigationRules()
	m.DefaultRoutePools = f.GetDefaultRoutePools()
	m.DnsInfo = f.GetDnsInfo()
	m.Domains = f.GetDomains()
	m.DownstreamTlsCertificateExpirationTimestamps = f.GetDownstreamTlsCertificateExpirationTimestamps()
	m.GraphqlRules = f.GetGraphqlRules()
	m.GetHashPolicyChoiceFromGlobalSpecType(f)
	m.HostName = f.GetHostName()
	m.InternetVipInfo = f.GetInternetVipInfo()
	m.GetIpReputationChoiceFromGlobalSpecType(f)
	m.JwtValidation = f.GetJwtValidation()
	m.GetL7DdosAutoMitigationActionFromGlobalSpecType(f)
	m.GetLoadbalancerTypeFromGlobalSpecType(f)
	m.GetMaliciousUserDetectionChoiceFromGlobalSpecType(f)
	m.MaliciousUserMitigation = f.GetMaliciousUserMitigation()
	m.GetMlConfigChoiceFromGlobalSpecType(f)
	m.MoreOption = f.GetMoreOption()
	m.GetOriginPoolChoiceFromGlobalSpecType(f)
	m.OriginServerSubsetRuleList = f.GetOriginServerSubsetRuleList()
	m.ProtectedCookies = f.GetProtectedCookies()
	m.GetRateLimitChoiceFromGlobalSpecType(f)
	m.Routes = f.GetRoutes()
	m.SensitiveDataDisclosureRules = f.GetSensitiveDataDisclosureRules()
	m.GetSensitiveDataPolicyChoiceFromGlobalSpecType(f)
	m.GetServicePolicyChoiceFromGlobalSpecType(f)
	m.GetSlowDdosMitigationChoiceFromGlobalSpecType(f)
	m.State = f.GetState()
	m.GetThreatMeshChoiceFromGlobalSpecType(f)
	m.GetTrustClientIpHeadersChoiceFromGlobalSpecType(f)
	m.TrustedClients = f.GetTrustedClients()
	m.GetUserIdChoiceFromGlobalSpecType(f)
	m.GetWafChoiceFromGlobalSpecType(f)
	m.WafExclusionRules = f.GetWafExclusionRules()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AddLocation = m1.AddLocation
	m1.SetAdvertiseChoiceToGlobalSpecType(f)
	m1.SetApiDefinitionChoiceToGlobalSpecType(f)
	m1.SetApiDiscoveryChoiceToGlobalSpecType(f)
	f.ApiProtectionRules = m1.ApiProtectionRules
	f.ApiRateLimitLegacy = m1.ApiRateLimitLegacy
	f.AutoCertInfo = m1.AutoCertInfo
	f.BlockedClients = m1.BlockedClients
	m1.SetBotDefenseChoiceToGlobalSpecType(f)
	f.CertState = m1.CertState
	m1.SetChallengeTypeToGlobalSpecType(f)
	m1.SetClientSideDefenseChoiceToGlobalSpecType(f)
	f.CorsPolicy = m1.CorsPolicy
	f.CsrfPolicy = m1.CsrfPolicy
	f.DataGuardRules = m1.DataGuardRules
	f.DdosMitigationRules = m1.DdosMitigationRules
	f.DefaultRoutePools = m1.DefaultRoutePools
	f.DnsInfo = m1.DnsInfo
	f.Domains = m1.Domains
	f.DownstreamTlsCertificateExpirationTimestamps = m1.DownstreamTlsCertificateExpirationTimestamps
	f.GraphqlRules = m1.GraphqlRules
	m1.SetHashPolicyChoiceToGlobalSpecType(f)
	f.HostName = m1.HostName
	f.InternetVipInfo = m1.InternetVipInfo
	m1.SetIpReputationChoiceToGlobalSpecType(f)
	f.JwtValidation = m1.JwtValidation
	m1.SetL7DdosAutoMitigationActionToGlobalSpecType(f)
	m1.SetLoadbalancerTypeToGlobalSpecType(f)
	m1.SetMaliciousUserDetectionChoiceToGlobalSpecType(f)
	f.MaliciousUserMitigation = m1.MaliciousUserMitigation
	m1.SetMlConfigChoiceToGlobalSpecType(f)
	f.MoreOption = m1.MoreOption
	m1.SetOriginPoolChoiceToGlobalSpecType(f)
	f.OriginServerSubsetRuleList = m1.OriginServerSubsetRuleList
	f.ProtectedCookies = m1.ProtectedCookies
	m1.SetRateLimitChoiceToGlobalSpecType(f)
	f.Routes = m1.Routes
	f.SensitiveDataDisclosureRules = m1.SensitiveDataDisclosureRules
	m1.SetSensitiveDataPolicyChoiceToGlobalSpecType(f)
	m1.SetServicePolicyChoiceToGlobalSpecType(f)
	m1.SetSlowDdosMitigationChoiceToGlobalSpecType(f)
	f.State = m1.State
	m1.SetThreatMeshChoiceToGlobalSpecType(f)
	m1.SetTrustClientIpHeadersChoiceToGlobalSpecType(f)
	f.TrustedClients = m1.TrustedClients
	m1.SetUserIdChoiceToGlobalSpecType(f)
	m1.SetWafChoiceToGlobalSpecType(f)
	f.WafExclusionRules = m1.WafExclusionRules
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetAdvertiseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AdvertiseChoice.(type) {
	case nil:
		o.AdvertiseChoice = nil

	case *ReplaceSpecType_AdvertiseCustom:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *ReplaceSpecType_AdvertiseOnPublic:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *ReplaceSpecType_DoNotAdvertise:
		o.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetAdvertiseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AdvertiseChoice.(type) {
	case nil:
		r.AdvertiseChoice = nil

	case *GlobalSpecType_AdvertiseCustom:
		r.AdvertiseChoice = &ReplaceSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *GlobalSpecType_AdvertiseOnPublic:
		r.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		r.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *GlobalSpecType_DoNotAdvertise:
		r.AdvertiseChoice = &ReplaceSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetApiDefinitionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ApiDefinitionChoice.(type) {
	case nil:
		o.ApiDefinitionChoice = nil

	case *ReplaceSpecType_ApiDefinition:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *ReplaceSpecType_ApiDefinitions:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiDefinitions{ApiDefinitions: of.ApiDefinitions}

	case *ReplaceSpecType_ApiSpecification:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiSpecification{ApiSpecification: of.ApiSpecification}

	case *ReplaceSpecType_DisableApiDefinition:
		o.ApiDefinitionChoice = &GlobalSpecType_DisableApiDefinition{DisableApiDefinition: of.DisableApiDefinition}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetApiDefinitionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ApiDefinitionChoice.(type) {
	case nil:
		r.ApiDefinitionChoice = nil

	case *GlobalSpecType_ApiDefinition:
		r.ApiDefinitionChoice = &ReplaceSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *GlobalSpecType_ApiDefinitions:
		r.ApiDefinitionChoice = &ReplaceSpecType_ApiDefinitions{ApiDefinitions: of.ApiDefinitions}

	case *GlobalSpecType_ApiSpecification:
		r.ApiDefinitionChoice = &ReplaceSpecType_ApiSpecification{ApiSpecification: of.ApiSpecification}

	case *GlobalSpecType_DisableApiDefinition:
		r.ApiDefinitionChoice = &ReplaceSpecType_DisableApiDefinition{DisableApiDefinition: of.DisableApiDefinition}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetApiDiscoveryChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ApiDiscoveryChoice.(type) {
	case nil:
		o.ApiDiscoveryChoice = nil

	case *ReplaceSpecType_DisableApiDiscovery:
		o.ApiDiscoveryChoice = &GlobalSpecType_DisableApiDiscovery{DisableApiDiscovery: of.DisableApiDiscovery}

	case *ReplaceSpecType_EnableApiDiscovery:
		o.ApiDiscoveryChoice = &GlobalSpecType_EnableApiDiscovery{EnableApiDiscovery: of.EnableApiDiscovery}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetApiDiscoveryChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ApiDiscoveryChoice.(type) {
	case nil:
		r.ApiDiscoveryChoice = nil

	case *GlobalSpecType_DisableApiDiscovery:
		r.ApiDiscoveryChoice = &ReplaceSpecType_DisableApiDiscovery{DisableApiDiscovery: of.DisableApiDiscovery}

	case *GlobalSpecType_EnableApiDiscovery:
		r.ApiDiscoveryChoice = &ReplaceSpecType_EnableApiDiscovery{EnableApiDiscovery: of.EnableApiDiscovery}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetBotDefenseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BotDefenseChoice.(type) {
	case nil:
		o.BotDefenseChoice = nil

	case *ReplaceSpecType_BotDefense:
		o.BotDefenseChoice = &GlobalSpecType_BotDefense{BotDefense: of.BotDefense}

	case *ReplaceSpecType_BotDefenseAdvanced:
		o.BotDefenseChoice = &GlobalSpecType_BotDefenseAdvanced{BotDefenseAdvanced: of.BotDefenseAdvanced}

	case *ReplaceSpecType_DisableBotDefense:
		o.BotDefenseChoice = &GlobalSpecType_DisableBotDefense{DisableBotDefense: of.DisableBotDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetBotDefenseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BotDefenseChoice.(type) {
	case nil:
		r.BotDefenseChoice = nil

	case *GlobalSpecType_BotDefense:
		r.BotDefenseChoice = &ReplaceSpecType_BotDefense{BotDefense: of.BotDefense}

	case *GlobalSpecType_BotDefenseAdvanced:
		r.BotDefenseChoice = &ReplaceSpecType_BotDefenseAdvanced{BotDefenseAdvanced: of.BotDefenseAdvanced}

	case *GlobalSpecType_DisableBotDefense:
		r.BotDefenseChoice = &ReplaceSpecType_DisableBotDefense{DisableBotDefense: of.DisableBotDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetChallengeTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ChallengeType.(type) {
	case nil:
		o.ChallengeType = nil

	case *ReplaceSpecType_CaptchaChallenge:
		o.ChallengeType = &GlobalSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *ReplaceSpecType_EnableChallenge:
		o.ChallengeType = &GlobalSpecType_EnableChallenge{EnableChallenge: of.EnableChallenge}

	case *ReplaceSpecType_JsChallenge:
		o.ChallengeType = &GlobalSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *ReplaceSpecType_NoChallenge:
		o.ChallengeType = &GlobalSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *ReplaceSpecType_PolicyBasedChallenge:
		o.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetChallengeTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ChallengeType.(type) {
	case nil:
		r.ChallengeType = nil

	case *GlobalSpecType_CaptchaChallenge:
		r.ChallengeType = &ReplaceSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *GlobalSpecType_EnableChallenge:
		r.ChallengeType = &ReplaceSpecType_EnableChallenge{EnableChallenge: of.EnableChallenge}

	case *GlobalSpecType_JsChallenge:
		r.ChallengeType = &ReplaceSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *GlobalSpecType_NoChallenge:
		r.ChallengeType = &ReplaceSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *GlobalSpecType_PolicyBasedChallenge:
		r.ChallengeType = &ReplaceSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetClientSideDefenseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClientSideDefenseChoice.(type) {
	case nil:
		o.ClientSideDefenseChoice = nil

	case *ReplaceSpecType_ClientSideDefense:
		o.ClientSideDefenseChoice = &GlobalSpecType_ClientSideDefense{ClientSideDefense: of.ClientSideDefense}

	case *ReplaceSpecType_DisableClientSideDefense:
		o.ClientSideDefenseChoice = &GlobalSpecType_DisableClientSideDefense{DisableClientSideDefense: of.DisableClientSideDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetClientSideDefenseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClientSideDefenseChoice.(type) {
	case nil:
		r.ClientSideDefenseChoice = nil

	case *GlobalSpecType_ClientSideDefense:
		r.ClientSideDefenseChoice = &ReplaceSpecType_ClientSideDefense{ClientSideDefense: of.ClientSideDefense}

	case *GlobalSpecType_DisableClientSideDefense:
		r.ClientSideDefenseChoice = &ReplaceSpecType_DisableClientSideDefense{DisableClientSideDefense: of.DisableClientSideDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetHashPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HashPolicyChoice.(type) {
	case nil:
		o.HashPolicyChoice = nil

	case *ReplaceSpecType_CookieStickiness:
		o.HashPolicyChoice = &GlobalSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *ReplaceSpecType_LeastActive:
		o.HashPolicyChoice = &GlobalSpecType_LeastActive{LeastActive: of.LeastActive}

	case *ReplaceSpecType_Random:
		o.HashPolicyChoice = &GlobalSpecType_Random{Random: of.Random}

	case *ReplaceSpecType_RingHash:
		o.HashPolicyChoice = &GlobalSpecType_RingHash{RingHash: of.RingHash}

	case *ReplaceSpecType_RoundRobin:
		o.HashPolicyChoice = &GlobalSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *ReplaceSpecType_SourceIpStickiness:
		o.HashPolicyChoice = &GlobalSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetHashPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HashPolicyChoice.(type) {
	case nil:
		r.HashPolicyChoice = nil

	case *GlobalSpecType_CookieStickiness:
		r.HashPolicyChoice = &ReplaceSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *GlobalSpecType_LeastActive:
		r.HashPolicyChoice = &ReplaceSpecType_LeastActive{LeastActive: of.LeastActive}

	case *GlobalSpecType_Random:
		r.HashPolicyChoice = &ReplaceSpecType_Random{Random: of.Random}

	case *GlobalSpecType_RingHash:
		r.HashPolicyChoice = &ReplaceSpecType_RingHash{RingHash: of.RingHash}

	case *GlobalSpecType_RoundRobin:
		r.HashPolicyChoice = &ReplaceSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *GlobalSpecType_SourceIpStickiness:
		r.HashPolicyChoice = &ReplaceSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetIpReputationChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IpReputationChoice.(type) {
	case nil:
		o.IpReputationChoice = nil

	case *ReplaceSpecType_DisableIpReputation:
		o.IpReputationChoice = &GlobalSpecType_DisableIpReputation{DisableIpReputation: of.DisableIpReputation}

	case *ReplaceSpecType_EnableIpReputation:
		o.IpReputationChoice = &GlobalSpecType_EnableIpReputation{EnableIpReputation: of.EnableIpReputation}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetIpReputationChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IpReputationChoice.(type) {
	case nil:
		r.IpReputationChoice = nil

	case *GlobalSpecType_DisableIpReputation:
		r.IpReputationChoice = &ReplaceSpecType_DisableIpReputation{DisableIpReputation: of.DisableIpReputation}

	case *GlobalSpecType_EnableIpReputation:
		r.IpReputationChoice = &ReplaceSpecType_EnableIpReputation{EnableIpReputation: of.EnableIpReputation}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetL7DdosAutoMitigationActionToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.L7DdosAutoMitigationAction.(type) {
	case nil:
		o.L7DdosAutoMitigationAction = nil

	case *ReplaceSpecType_L7DdosActionBlock:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionBlock{L7DdosActionBlock: of.L7DdosActionBlock}

	case *ReplaceSpecType_L7DdosActionDefault:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionDefault{L7DdosActionDefault: of.L7DdosActionDefault}

	case *ReplaceSpecType_L7DdosActionJsChallenge:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionJsChallenge{L7DdosActionJsChallenge: of.L7DdosActionJsChallenge}

	case *ReplaceSpecType_L7DdosActionNone:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionNone{L7DdosActionNone: of.L7DdosActionNone}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetL7DdosAutoMitigationActionFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.L7DdosAutoMitigationAction.(type) {
	case nil:
		r.L7DdosAutoMitigationAction = nil

	case *GlobalSpecType_L7DdosActionBlock:
		r.L7DdosAutoMitigationAction = &ReplaceSpecType_L7DdosActionBlock{L7DdosActionBlock: of.L7DdosActionBlock}

	case *GlobalSpecType_L7DdosActionDefault:
		r.L7DdosAutoMitigationAction = &ReplaceSpecType_L7DdosActionDefault{L7DdosActionDefault: of.L7DdosActionDefault}

	case *GlobalSpecType_L7DdosActionJsChallenge:
		r.L7DdosAutoMitigationAction = &ReplaceSpecType_L7DdosActionJsChallenge{L7DdosActionJsChallenge: of.L7DdosActionJsChallenge}

	case *GlobalSpecType_L7DdosActionNone:
		r.L7DdosAutoMitigationAction = &ReplaceSpecType_L7DdosActionNone{L7DdosActionNone: of.L7DdosActionNone}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetLoadbalancerTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LoadbalancerType.(type) {
	case nil:
		o.LoadbalancerType = nil

	case *ReplaceSpecType_Http:
		o.LoadbalancerType = &GlobalSpecType_Http{Http: of.Http}

	case *ReplaceSpecType_Https:
		o.LoadbalancerType = &GlobalSpecType_Https{Https: of.Https}

	case *ReplaceSpecType_HttpsAutoCert:
		o.LoadbalancerType = &GlobalSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetLoadbalancerTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LoadbalancerType.(type) {
	case nil:
		r.LoadbalancerType = nil

	case *GlobalSpecType_Http:
		r.LoadbalancerType = &ReplaceSpecType_Http{Http: of.Http}

	case *GlobalSpecType_Https:
		r.LoadbalancerType = &ReplaceSpecType_Https{Https: of.Https}

	case *GlobalSpecType_HttpsAutoCert:
		r.LoadbalancerType = &ReplaceSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetMaliciousUserDetectionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.MaliciousUserDetectionChoice.(type) {
	case nil:
		o.MaliciousUserDetectionChoice = nil

	case *ReplaceSpecType_DisableMaliciousUserDetection:
		o.MaliciousUserDetectionChoice = &GlobalSpecType_DisableMaliciousUserDetection{DisableMaliciousUserDetection: of.DisableMaliciousUserDetection}

	case *ReplaceSpecType_EnableMaliciousUserDetection:
		o.MaliciousUserDetectionChoice = &GlobalSpecType_EnableMaliciousUserDetection{EnableMaliciousUserDetection: of.EnableMaliciousUserDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetMaliciousUserDetectionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.MaliciousUserDetectionChoice.(type) {
	case nil:
		r.MaliciousUserDetectionChoice = nil

	case *GlobalSpecType_DisableMaliciousUserDetection:
		r.MaliciousUserDetectionChoice = &ReplaceSpecType_DisableMaliciousUserDetection{DisableMaliciousUserDetection: of.DisableMaliciousUserDetection}

	case *GlobalSpecType_EnableMaliciousUserDetection:
		r.MaliciousUserDetectionChoice = &ReplaceSpecType_EnableMaliciousUserDetection{EnableMaliciousUserDetection: of.EnableMaliciousUserDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetMlConfigChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.MlConfigChoice.(type) {
	case nil:
		o.MlConfigChoice = nil

	case *ReplaceSpecType_MultiLbApp:
		o.MlConfigChoice = &GlobalSpecType_MultiLbApp{MultiLbApp: of.MultiLbApp}

	case *ReplaceSpecType_SingleLbApp:
		o.MlConfigChoice = &GlobalSpecType_SingleLbApp{SingleLbApp: of.SingleLbApp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetMlConfigChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.MlConfigChoice.(type) {
	case nil:
		r.MlConfigChoice = nil

	case *GlobalSpecType_MultiLbApp:
		r.MlConfigChoice = &ReplaceSpecType_MultiLbApp{MultiLbApp: of.MultiLbApp}

	case *GlobalSpecType_SingleLbApp:
		r.MlConfigChoice = &ReplaceSpecType_SingleLbApp{SingleLbApp: of.SingleLbApp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetOriginPoolChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.OriginPoolChoice.(type) {
	case nil:
		o.OriginPoolChoice = nil

	case *ReplaceSpecType_DefaultPool:
		o.OriginPoolChoice = &GlobalSpecType_DefaultPool{DefaultPool: of.DefaultPool}

	case *ReplaceSpecType_DefaultPoolList:
		o.OriginPoolChoice = &GlobalSpecType_DefaultPoolList{DefaultPoolList: of.DefaultPoolList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetOriginPoolChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.OriginPoolChoice.(type) {
	case nil:
		r.OriginPoolChoice = nil

	case *GlobalSpecType_DefaultPool:
		r.OriginPoolChoice = &ReplaceSpecType_DefaultPool{DefaultPool: of.DefaultPool}

	case *GlobalSpecType_DefaultPoolList:
		r.OriginPoolChoice = &ReplaceSpecType_DefaultPoolList{DefaultPoolList: of.DefaultPoolList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetRateLimitChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RateLimitChoice.(type) {
	case nil:
		o.RateLimitChoice = nil

	case *ReplaceSpecType_ApiRateLimit:
		o.RateLimitChoice = &GlobalSpecType_ApiRateLimit{ApiRateLimit: of.ApiRateLimit}

	case *ReplaceSpecType_DisableRateLimit:
		o.RateLimitChoice = &GlobalSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *ReplaceSpecType_RateLimit:
		o.RateLimitChoice = &GlobalSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetRateLimitChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RateLimitChoice.(type) {
	case nil:
		r.RateLimitChoice = nil

	case *GlobalSpecType_ApiRateLimit:
		r.RateLimitChoice = &ReplaceSpecType_ApiRateLimit{ApiRateLimit: of.ApiRateLimit}

	case *GlobalSpecType_DisableRateLimit:
		r.RateLimitChoice = &ReplaceSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *GlobalSpecType_RateLimit:
		r.RateLimitChoice = &ReplaceSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetSensitiveDataPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SensitiveDataPolicyChoice.(type) {
	case nil:
		o.SensitiveDataPolicyChoice = nil

	case *ReplaceSpecType_DefaultSensitiveDataPolicy:
		o.SensitiveDataPolicyChoice = &GlobalSpecType_DefaultSensitiveDataPolicy{DefaultSensitiveDataPolicy: of.DefaultSensitiveDataPolicy}

	case *ReplaceSpecType_SensitiveDataPolicy:
		o.SensitiveDataPolicyChoice = &GlobalSpecType_SensitiveDataPolicy{SensitiveDataPolicy: of.SensitiveDataPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetSensitiveDataPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SensitiveDataPolicyChoice.(type) {
	case nil:
		r.SensitiveDataPolicyChoice = nil

	case *GlobalSpecType_DefaultSensitiveDataPolicy:
		r.SensitiveDataPolicyChoice = &ReplaceSpecType_DefaultSensitiveDataPolicy{DefaultSensitiveDataPolicy: of.DefaultSensitiveDataPolicy}

	case *GlobalSpecType_SensitiveDataPolicy:
		r.SensitiveDataPolicyChoice = &ReplaceSpecType_SensitiveDataPolicy{SensitiveDataPolicy: of.SensitiveDataPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetServicePolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServicePolicyChoice.(type) {
	case nil:
		o.ServicePolicyChoice = nil

	case *ReplaceSpecType_ActiveServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *ReplaceSpecType_NoServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *ReplaceSpecType_ServicePoliciesFromNamespace:
		o.ServicePolicyChoice = &GlobalSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetServicePolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServicePolicyChoice.(type) {
	case nil:
		r.ServicePolicyChoice = nil

	case *GlobalSpecType_ActiveServicePolicies:
		r.ServicePolicyChoice = &ReplaceSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *GlobalSpecType_NoServicePolicies:
		r.ServicePolicyChoice = &ReplaceSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *GlobalSpecType_ServicePoliciesFromNamespace:
		r.ServicePolicyChoice = &ReplaceSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetSlowDdosMitigationChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SlowDdosMitigationChoice.(type) {
	case nil:
		o.SlowDdosMitigationChoice = nil

	case *ReplaceSpecType_SlowDdosMitigation:
		o.SlowDdosMitigationChoice = &GlobalSpecType_SlowDdosMitigation{SlowDdosMitigation: of.SlowDdosMitigation}

	case *ReplaceSpecType_SystemDefaultTimeouts:
		o.SlowDdosMitigationChoice = &GlobalSpecType_SystemDefaultTimeouts{SystemDefaultTimeouts: of.SystemDefaultTimeouts}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetSlowDdosMitigationChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SlowDdosMitigationChoice.(type) {
	case nil:
		r.SlowDdosMitigationChoice = nil

	case *GlobalSpecType_SlowDdosMitigation:
		r.SlowDdosMitigationChoice = &ReplaceSpecType_SlowDdosMitigation{SlowDdosMitigation: of.SlowDdosMitigation}

	case *GlobalSpecType_SystemDefaultTimeouts:
		r.SlowDdosMitigationChoice = &ReplaceSpecType_SystemDefaultTimeouts{SystemDefaultTimeouts: of.SystemDefaultTimeouts}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetThreatMeshChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ThreatMeshChoice.(type) {
	case nil:
		o.ThreatMeshChoice = nil

	case *ReplaceSpecType_DisableThreatMesh:
		o.ThreatMeshChoice = &GlobalSpecType_DisableThreatMesh{DisableThreatMesh: of.DisableThreatMesh}

	case *ReplaceSpecType_EnableThreatMesh:
		o.ThreatMeshChoice = &GlobalSpecType_EnableThreatMesh{EnableThreatMesh: of.EnableThreatMesh}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetThreatMeshChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ThreatMeshChoice.(type) {
	case nil:
		r.ThreatMeshChoice = nil

	case *GlobalSpecType_DisableThreatMesh:
		r.ThreatMeshChoice = &ReplaceSpecType_DisableThreatMesh{DisableThreatMesh: of.DisableThreatMesh}

	case *GlobalSpecType_EnableThreatMesh:
		r.ThreatMeshChoice = &ReplaceSpecType_EnableThreatMesh{EnableThreatMesh: of.EnableThreatMesh}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetTrustClientIpHeadersChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.TrustClientIpHeadersChoice.(type) {
	case nil:
		o.TrustClientIpHeadersChoice = nil

	case *ReplaceSpecType_DisableTrustClientIpHeaders:
		o.TrustClientIpHeadersChoice = &GlobalSpecType_DisableTrustClientIpHeaders{DisableTrustClientIpHeaders: of.DisableTrustClientIpHeaders}

	case *ReplaceSpecType_EnableTrustClientIpHeaders:
		o.TrustClientIpHeadersChoice = &GlobalSpecType_EnableTrustClientIpHeaders{EnableTrustClientIpHeaders: of.EnableTrustClientIpHeaders}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetTrustClientIpHeadersChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.TrustClientIpHeadersChoice.(type) {
	case nil:
		r.TrustClientIpHeadersChoice = nil

	case *GlobalSpecType_DisableTrustClientIpHeaders:
		r.TrustClientIpHeadersChoice = &ReplaceSpecType_DisableTrustClientIpHeaders{DisableTrustClientIpHeaders: of.DisableTrustClientIpHeaders}

	case *GlobalSpecType_EnableTrustClientIpHeaders:
		r.TrustClientIpHeadersChoice = &ReplaceSpecType_EnableTrustClientIpHeaders{EnableTrustClientIpHeaders: of.EnableTrustClientIpHeaders}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetUserIdChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.UserIdChoice.(type) {
	case nil:
		o.UserIdChoice = nil

	case *ReplaceSpecType_UserIdClientIp:
		o.UserIdChoice = &GlobalSpecType_UserIdClientIp{UserIdClientIp: of.UserIdClientIp}

	case *ReplaceSpecType_UserIdentification:
		o.UserIdChoice = &GlobalSpecType_UserIdentification{UserIdentification: of.UserIdentification}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetUserIdChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.UserIdChoice.(type) {
	case nil:
		r.UserIdChoice = nil

	case *GlobalSpecType_UserIdClientIp:
		r.UserIdChoice = &ReplaceSpecType_UserIdClientIp{UserIdClientIp: of.UserIdClientIp}

	case *GlobalSpecType_UserIdentification:
		r.UserIdChoice = &ReplaceSpecType_UserIdentification{UserIdentification: of.UserIdentification}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetWafChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WafChoice.(type) {
	case nil:
		o.WafChoice = nil

	case *ReplaceSpecType_AppFirewall:
		o.WafChoice = &GlobalSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *ReplaceSpecType_DisableWaf:
		o.WafChoice = &GlobalSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetWafChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WafChoice.(type) {
	case nil:
		r.WafChoice = nil

	case *GlobalSpecType_AppFirewall:
		r.WafChoice = &ReplaceSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *GlobalSpecType_DisableWaf:
		r.WafChoice = &ReplaceSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AddLocation = f.GetAddLocation()
	m.GetAdvertiseChoiceFromGlobalSpecType(f)
	m.GetApiDefinitionChoiceFromGlobalSpecType(f)
	m.GetApiDiscoveryChoiceFromGlobalSpecType(f)
	m.ApiProtectionRules = f.GetApiProtectionRules()
	m.ApiRateLimitLegacy = f.GetApiRateLimitLegacy()
	m.BlockedClients = f.GetBlockedClients()
	m.GetBotDefenseChoiceFromGlobalSpecType(f)
	m.GetChallengeTypeFromGlobalSpecType(f)
	m.GetClientSideDefenseChoiceFromGlobalSpecType(f)
	m.CorsPolicy = f.GetCorsPolicy()
	m.CsrfPolicy = f.GetCsrfPolicy()
	m.DataGuardRules = f.GetDataGuardRules()
	m.DdosMitigationRules = f.GetDdosMitigationRules()
	m.DefaultRoutePools = f.GetDefaultRoutePools()
	m.Domains = f.GetDomains()
	m.GraphqlRules = f.GetGraphqlRules()
	m.GetHashPolicyChoiceFromGlobalSpecType(f)
	m.GetIpReputationChoiceFromGlobalSpecType(f)
	m.JwtValidation = f.GetJwtValidation()
	m.GetL7DdosAutoMitigationActionFromGlobalSpecType(f)
	m.GetLoadbalancerTypeFromGlobalSpecType(f)
	m.GetMaliciousUserDetectionChoiceFromGlobalSpecType(f)
	m.MaliciousUserMitigation = f.GetMaliciousUserMitigation()
	m.GetMlConfigChoiceFromGlobalSpecType(f)
	m.MoreOption = f.GetMoreOption()
	m.GetOriginPoolChoiceFromGlobalSpecType(f)
	m.OriginServerSubsetRuleList = f.GetOriginServerSubsetRuleList()
	m.ProtectedCookies = f.GetProtectedCookies()
	m.GetRateLimitChoiceFromGlobalSpecType(f)
	m.Routes = f.GetRoutes()
	m.SensitiveDataDisclosureRules = f.GetSensitiveDataDisclosureRules()
	m.GetSensitiveDataPolicyChoiceFromGlobalSpecType(f)
	m.GetServicePolicyChoiceFromGlobalSpecType(f)
	m.GetSlowDdosMitigationChoiceFromGlobalSpecType(f)
	m.GetThreatMeshChoiceFromGlobalSpecType(f)
	m.GetTrustClientIpHeadersChoiceFromGlobalSpecType(f)
	m.TrustedClients = f.GetTrustedClients()
	m.GetUserIdChoiceFromGlobalSpecType(f)
	m.GetWafChoiceFromGlobalSpecType(f)
	m.WafExclusionRules = f.GetWafExclusionRules()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AddLocation = m1.AddLocation
	m1.SetAdvertiseChoiceToGlobalSpecType(f)
	m1.SetApiDefinitionChoiceToGlobalSpecType(f)
	m1.SetApiDiscoveryChoiceToGlobalSpecType(f)
	f.ApiProtectionRules = m1.ApiProtectionRules
	f.ApiRateLimitLegacy = m1.ApiRateLimitLegacy
	f.BlockedClients = m1.BlockedClients
	m1.SetBotDefenseChoiceToGlobalSpecType(f)
	m1.SetChallengeTypeToGlobalSpecType(f)
	m1.SetClientSideDefenseChoiceToGlobalSpecType(f)
	f.CorsPolicy = m1.CorsPolicy
	f.CsrfPolicy = m1.CsrfPolicy
	f.DataGuardRules = m1.DataGuardRules
	f.DdosMitigationRules = m1.DdosMitigationRules
	f.DefaultRoutePools = m1.DefaultRoutePools
	f.Domains = m1.Domains
	f.GraphqlRules = m1.GraphqlRules
	m1.SetHashPolicyChoiceToGlobalSpecType(f)
	m1.SetIpReputationChoiceToGlobalSpecType(f)
	f.JwtValidation = m1.JwtValidation
	m1.SetL7DdosAutoMitigationActionToGlobalSpecType(f)
	m1.SetLoadbalancerTypeToGlobalSpecType(f)
	m1.SetMaliciousUserDetectionChoiceToGlobalSpecType(f)
	f.MaliciousUserMitigation = m1.MaliciousUserMitigation
	m1.SetMlConfigChoiceToGlobalSpecType(f)
	f.MoreOption = m1.MoreOption
	m1.SetOriginPoolChoiceToGlobalSpecType(f)
	f.OriginServerSubsetRuleList = m1.OriginServerSubsetRuleList
	f.ProtectedCookies = m1.ProtectedCookies
	m1.SetRateLimitChoiceToGlobalSpecType(f)
	f.Routes = m1.Routes
	f.SensitiveDataDisclosureRules = m1.SensitiveDataDisclosureRules
	m1.SetSensitiveDataPolicyChoiceToGlobalSpecType(f)
	m1.SetServicePolicyChoiceToGlobalSpecType(f)
	m1.SetSlowDdosMitigationChoiceToGlobalSpecType(f)
	m1.SetThreatMeshChoiceToGlobalSpecType(f)
	m1.SetTrustClientIpHeadersChoiceToGlobalSpecType(f)
	f.TrustedClients = m1.TrustedClients
	m1.SetUserIdChoiceToGlobalSpecType(f)
	m1.SetWafChoiceToGlobalSpecType(f)
	f.WafExclusionRules = m1.WafExclusionRules
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

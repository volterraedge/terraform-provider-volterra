// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package http_loadbalancer

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_app_type "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_rate_limiter "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter"
	ves_io_schema_route "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/route"
	ves_io_schema_service_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_views_origin_pool "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/origin_pool"
	ves_io_schema_views_rate_limiter_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy"
	ves_io_schema_virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
	ves_io_schema_virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *APIEndpointProtectionRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIEndpointProtectionRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIEndpointProtectionRule) DeepCopy() *APIEndpointProtectionRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIEndpointProtectionRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIEndpointProtectionRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIEndpointProtectionRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIEndpointProtectionRuleValidator().Validate(ctx, m, opts...)
}

func (m *APIEndpointProtectionRule) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetClientMatcherDRefInfo()

}

// GetDRefInfo for the field's type
func (m *APIEndpointProtectionRule) GetClientMatcherDRefInfo() ([]db.DRefInfo, error) {
	if m.GetClientMatcher() == nil {
		return nil, nil
	}

	drInfos, err := m.GetClientMatcher().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetClientMatcher().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "client_matcher." + dri.DRField
	}
	return drInfos, err

}

type ValidateAPIEndpointProtectionRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIEndpointProtectionRule) DomainChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAPIEndpointProtectionRule) DomainChoiceSpecificDomainValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_SpecificDomain, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for specific_domain")
	}
	return oValidatorFn_SpecificDomain, nil
}

func (v *ValidateAPIEndpointProtectionRule) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointProtectionRule) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for action")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := APIProtectionRuleActionValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointProtectionRule) ApiEndpointPathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_endpoint_path")
	}

	return validatorFn, nil
}

func (v *ValidateAPIEndpointProtectionRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIEndpointProtectionRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIEndpointProtectionRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_endpoint_method"]; exists {

		vOpts := append(opts, db.WithValidateField("api_endpoint_method"))
		if err := fv(ctx, m.GetApiEndpointMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_endpoint_path"]; exists {

		vOpts := append(opts, db.WithValidateField("api_endpoint_path"))
		if err := fv(ctx, m.GetApiEndpointPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["client_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("client_matcher"))
		if err := fv(ctx, m.GetClientMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_choice"]; exists {
		val := m.GetDomainChoice()
		vOpts := append(opts,
			db.WithValidateField("domain_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDomainChoice().(type) {
	case *APIEndpointProtectionRule_AnyDomain:
		if fv, exists := v.FldValidators["domain_choice.any_domain"]; exists {
			val := m.GetDomainChoice().(*APIEndpointProtectionRule_AnyDomain).AnyDomain
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("any_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *APIEndpointProtectionRule_SpecificDomain:
		if fv, exists := v.FldValidators["domain_choice.specific_domain"]; exists {
			val := m.GetDomainChoice().(*APIEndpointProtectionRule_SpecificDomain).SpecificDomain
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("specific_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("request_matcher"))
		if err := fv(ctx, m.GetRequestMatcher(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIEndpointProtectionRuleValidator = func() *ValidateAPIEndpointProtectionRule {
	v := &ValidateAPIEndpointProtectionRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomainChoice := v.DomainChoiceValidationRuleHandler
	rulesDomainChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDomainChoice(rulesDomainChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointProtectionRule.domain_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_choice"] = vFn

	vrhDomainChoiceSpecificDomain := v.DomainChoiceSpecificDomainValidationRuleHandler
	rulesDomainChoiceSpecificDomain := map[string]string{
		"ves.io.schema.rules.string.max_len":   "128",
		"ves.io.schema.rules.string.vh_domain": "true",
	}
	vFnMap["domain_choice.specific_domain"], err = vrhDomainChoiceSpecificDomain(rulesDomainChoiceSpecificDomain)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field APIEndpointProtectionRule.domain_choice_specific_domain: %s", err)
		panic(errMsg)
	}

	v.FldValidators["domain_choice.specific_domain"] = vFnMap["domain_choice.specific_domain"]

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointProtectionRule.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointProtectionRule.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	vrhApiEndpointPath := v.ApiEndpointPathValidationRuleHandler
	rulesApiEndpointPath := map[string]string{
		"ves.io.schema.rules.message.required":           "true",
		"ves.io.schema.rules.string.max_len":             "1024",
		"ves.io.schema.rules.string.templated_http_path": "true",
	}
	vFn, err = vrhApiEndpointPath(rulesApiEndpointPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIEndpointProtectionRule.api_endpoint_path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_endpoint_path"] = vFn

	v.FldValidators["api_endpoint_method"] = ves_io_schema_policy.HttpMethodMatcherTypeValidator().Validate

	v.FldValidators["request_matcher"] = ves_io_schema_policy.RequestMatcherValidator().Validate

	v.FldValidators["client_matcher"] = ves_io_schema_policy.ClientMatcherValidator().Validate

	return v
}()

func APIEndpointProtectionRuleValidator() db.Validator {
	return DefaultAPIEndpointProtectionRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *APIGroupProtectionRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIGroupProtectionRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIGroupProtectionRule) DeepCopy() *APIGroupProtectionRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIGroupProtectionRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIGroupProtectionRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIGroupProtectionRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIGroupProtectionRuleValidator().Validate(ctx, m, opts...)
}

func (m *APIGroupProtectionRule) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetClientMatcherDRefInfo()

}

// GetDRefInfo for the field's type
func (m *APIGroupProtectionRule) GetClientMatcherDRefInfo() ([]db.DRefInfo, error) {
	if m.GetClientMatcher() == nil {
		return nil, nil
	}

	drInfos, err := m.GetClientMatcher().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetClientMatcher().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "client_matcher." + dri.DRField
	}
	return drInfos, err

}

type ValidateAPIGroupProtectionRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIGroupProtectionRule) DomainChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAPIGroupProtectionRule) DomainChoiceSpecificDomainValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_SpecificDomain, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for specific_domain")
	}
	return oValidatorFn_SpecificDomain, nil
}

func (v *ValidateAPIGroupProtectionRule) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIGroupProtectionRule) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for action")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := APIProtectionRuleActionValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIGroupProtectionRule) ApiGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_group")
	}

	return validatorFn, nil
}

func (v *ValidateAPIGroupProtectionRule) BasePathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for base_path")
	}

	return validatorFn, nil
}

func (v *ValidateAPIGroupProtectionRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIGroupProtectionRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIGroupProtectionRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_group"]; exists {

		vOpts := append(opts, db.WithValidateField("api_group"))
		if err := fv(ctx, m.GetApiGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["base_path"]; exists {

		vOpts := append(opts, db.WithValidateField("base_path"))
		if err := fv(ctx, m.GetBasePath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["client_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("client_matcher"))
		if err := fv(ctx, m.GetClientMatcher(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_choice"]; exists {
		val := m.GetDomainChoice()
		vOpts := append(opts,
			db.WithValidateField("domain_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDomainChoice().(type) {
	case *APIGroupProtectionRule_AnyDomain:
		if fv, exists := v.FldValidators["domain_choice.any_domain"]; exists {
			val := m.GetDomainChoice().(*APIGroupProtectionRule_AnyDomain).AnyDomain
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("any_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *APIGroupProtectionRule_SpecificDomain:
		if fv, exists := v.FldValidators["domain_choice.specific_domain"]; exists {
			val := m.GetDomainChoice().(*APIGroupProtectionRule_SpecificDomain).SpecificDomain
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("specific_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("request_matcher"))
		if err := fv(ctx, m.GetRequestMatcher(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIGroupProtectionRuleValidator = func() *ValidateAPIGroupProtectionRule {
	v := &ValidateAPIGroupProtectionRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomainChoice := v.DomainChoiceValidationRuleHandler
	rulesDomainChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDomainChoice(rulesDomainChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIGroupProtectionRule.domain_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_choice"] = vFn

	vrhDomainChoiceSpecificDomain := v.DomainChoiceSpecificDomainValidationRuleHandler
	rulesDomainChoiceSpecificDomain := map[string]string{
		"ves.io.schema.rules.string.max_len":   "128",
		"ves.io.schema.rules.string.vh_domain": "true",
	}
	vFnMap["domain_choice.specific_domain"], err = vrhDomainChoiceSpecificDomain(rulesDomainChoiceSpecificDomain)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field APIGroupProtectionRule.domain_choice_specific_domain: %s", err)
		panic(errMsg)
	}

	v.FldValidators["domain_choice.specific_domain"] = vFnMap["domain_choice.specific_domain"]

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIGroupProtectionRule.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIGroupProtectionRule.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	vrhApiGroup := v.ApiGroupValidationRuleHandler
	rulesApiGroup := map[string]string{
		"ves.io.schema.rules.string.max_len": "128",
	}
	vFn, err = vrhApiGroup(rulesApiGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIGroupProtectionRule.api_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_group"] = vFn

	vrhBasePath := v.BasePathValidationRuleHandler
	rulesBasePath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.http_path": "true",
		"ves.io.schema.rules.string.max_len":   "128",
	}
	vFn, err = vrhBasePath(rulesBasePath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIGroupProtectionRule.base_path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["base_path"] = vFn

	v.FldValidators["request_matcher"] = ves_io_schema_policy.RequestMatcherValidator().Validate

	v.FldValidators["client_matcher"] = ves_io_schema_policy.ClientMatcherValidator().Validate

	return v
}()

func APIGroupProtectionRuleValidator() db.Validator {
	return DefaultAPIGroupProtectionRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *APIGroups) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIGroups) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIGroups) DeepCopy() *APIGroups {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIGroups{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIGroups) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIGroups) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIGroupsValidator().Validate(ctx, m, opts...)
}

type ValidateAPIGroups struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIGroups) ApiGroupsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for api_groups")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_groups")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_groups")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_groups")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIGroups) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIGroups)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIGroups got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_groups"]; exists {
		vOpts := append(opts, db.WithValidateField("api_groups"))
		if err := fv(ctx, m.GetApiGroups(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIGroupsValidator = func() *ValidateAPIGroups {
	v := &ValidateAPIGroups{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiGroups := v.ApiGroupsValidationRuleHandler
	rulesApiGroups := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.not_empty": "true",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhApiGroups(rulesApiGroups)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIGroups.api_groups: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_groups"] = vFn

	return v
}()

func APIGroupsValidator() db.Validator {
	return DefaultAPIGroupsValidator
}

// augmented methods on protoc/std generated struct

func (m *APIProtectionRuleAction) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIProtectionRuleAction) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIProtectionRuleAction) DeepCopy() *APIProtectionRuleAction {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIProtectionRuleAction{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIProtectionRuleAction) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIProtectionRuleAction) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIProtectionRuleActionValidator().Validate(ctx, m, opts...)
}

type ValidateAPIProtectionRuleAction struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIProtectionRuleAction) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action")
	}
	return validatorFn, nil
}

func (v *ValidateAPIProtectionRuleAction) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIProtectionRuleAction)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIProtectionRuleAction got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {
		val := m.GetAction()
		vOpts := append(opts,
			db.WithValidateField("action"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAction().(type) {
	case *APIProtectionRuleAction_Allow:
		if fv, exists := v.FldValidators["action.allow"]; exists {
			val := m.GetAction().(*APIProtectionRuleAction_Allow).Allow
			vOpts := append(opts,
				db.WithValidateField("action"),
				db.WithValidateField("allow"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *APIProtectionRuleAction_Deny:
		if fv, exists := v.FldValidators["action.deny"]; exists {
			val := m.GetAction().(*APIProtectionRuleAction_Deny).Deny
			vOpts := append(opts,
				db.WithValidateField("action"),
				db.WithValidateField("deny"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIProtectionRuleActionValidator = func() *ValidateAPIProtectionRuleAction {
	v := &ValidateAPIProtectionRuleAction{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIProtectionRuleAction.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	return v
}()

func APIProtectionRuleActionValidator() db.Validator {
	return DefaultAPIProtectionRuleActionValidator
}

// augmented methods on protoc/std generated struct

func (m *APIProtectionRules) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIProtectionRules) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIProtectionRules) DeepCopy() *APIProtectionRules {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIProtectionRules{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIProtectionRules) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIProtectionRules) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIProtectionRulesValidator().Validate(ctx, m, opts...)
}

func (m *APIProtectionRules) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetApiEndpointRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiEndpointRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiGroupsRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiGroupsRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *APIProtectionRules) GetApiEndpointRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiEndpointRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetApiEndpointRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiEndpointRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("api_endpoint_rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *APIProtectionRules) GetApiGroupsRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiGroupsRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetApiGroupsRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiGroupsRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("api_groups_rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateAPIProtectionRules struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIProtectionRules) ApiEndpointRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for api_endpoint_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*APIEndpointProtectionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := APIEndpointProtectionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_endpoint_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*APIEndpointProtectionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*APIEndpointProtectionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_endpoint_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_endpoint_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIProtectionRules) ApiGroupsRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for api_groups_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*APIGroupProtectionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := APIGroupProtectionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_groups_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*APIGroupProtectionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*APIGroupProtectionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_groups_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_groups_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIProtectionRules) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIProtectionRules)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIProtectionRules got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_endpoint_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("api_endpoint_rules"))
		if err := fv(ctx, m.GetApiEndpointRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_groups_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("api_groups_rules"))
		if err := fv(ctx, m.GetApiGroupsRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIProtectionRulesValidator = func() *ValidateAPIProtectionRules {
	v := &ValidateAPIProtectionRules{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiEndpointRules := v.ApiEndpointRulesValidationRuleHandler
	rulesApiEndpointRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "20",
	}
	vFn, err = vrhApiEndpointRules(rulesApiEndpointRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIProtectionRules.api_endpoint_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_endpoint_rules"] = vFn

	vrhApiGroupsRules := v.ApiGroupsRulesValidationRuleHandler
	rulesApiGroupsRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "20",
	}
	vFn, err = vrhApiGroupsRules(rulesApiGroupsRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIProtectionRules.api_groups_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_groups_rules"] = vFn

	return v
}()

func APIProtectionRulesValidator() db.Validator {
	return DefaultAPIProtectionRulesValidator
}

// augmented methods on protoc/std generated struct

func (m *APIRateLimit) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIRateLimit) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIRateLimit) DeepCopy() *APIRateLimit {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIRateLimit{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIRateLimit) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIRateLimit) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIRateLimitValidator().Validate(ctx, m, opts...)
}

func (m *APIRateLimit) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetApiEndpointRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiEndpointRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetIpAllowedListChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetIpAllowedListChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServerUrlRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetServerUrlRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *APIRateLimit) GetApiEndpointRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiEndpointRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetApiEndpointRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiEndpointRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("api_endpoint_rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *APIRateLimit) GetIpAllowedListChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetIpAllowedListChoice() == nil {
		return nil, nil
	}
	switch m.GetIpAllowedListChoice().(type) {
	case *APIRateLimit_NoIpAllowedList:

		return nil, nil

	case *APIRateLimit_IpAllowedList:

		return nil, nil

	case *APIRateLimit_CustomIpAllowedList:
		drInfos, err := m.GetCustomIpAllowedList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomIpAllowedList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "custom_ip_allowed_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *APIRateLimit) GetServerUrlRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServerUrlRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetServerUrlRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetServerUrlRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("server_url_rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateAPIRateLimit struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIRateLimit) IpAllowedListChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_allowed_list_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAPIRateLimit) ServerUrlRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for server_url_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ServerUrlRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ServerUrlRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for server_url_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ServerUrlRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ServerUrlRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated server_url_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items server_url_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIRateLimit) ApiEndpointRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for api_endpoint_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ApiEndpointRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ApiEndpointRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_endpoint_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ApiEndpointRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ApiEndpointRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_endpoint_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_endpoint_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPIRateLimit) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIRateLimit)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIRateLimit got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_endpoint_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("api_endpoint_rules"))
		if err := fv(ctx, m.GetApiEndpointRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ip_allowed_list_choice"]; exists {
		val := m.GetIpAllowedListChoice()
		vOpts := append(opts,
			db.WithValidateField("ip_allowed_list_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIpAllowedListChoice().(type) {
	case *APIRateLimit_NoIpAllowedList:
		if fv, exists := v.FldValidators["ip_allowed_list_choice.no_ip_allowed_list"]; exists {
			val := m.GetIpAllowedListChoice().(*APIRateLimit_NoIpAllowedList).NoIpAllowedList
			vOpts := append(opts,
				db.WithValidateField("ip_allowed_list_choice"),
				db.WithValidateField("no_ip_allowed_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *APIRateLimit_IpAllowedList:
		if fv, exists := v.FldValidators["ip_allowed_list_choice.ip_allowed_list"]; exists {
			val := m.GetIpAllowedListChoice().(*APIRateLimit_IpAllowedList).IpAllowedList
			vOpts := append(opts,
				db.WithValidateField("ip_allowed_list_choice"),
				db.WithValidateField("ip_allowed_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *APIRateLimit_CustomIpAllowedList:
		if fv, exists := v.FldValidators["ip_allowed_list_choice.custom_ip_allowed_list"]; exists {
			val := m.GetIpAllowedListChoice().(*APIRateLimit_CustomIpAllowedList).CustomIpAllowedList
			vOpts := append(opts,
				db.WithValidateField("ip_allowed_list_choice"),
				db.WithValidateField("custom_ip_allowed_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["server_url_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("server_url_rules"))
		if err := fv(ctx, m.GetServerUrlRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIRateLimitValidator = func() *ValidateAPIRateLimit {
	v := &ValidateAPIRateLimit{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIpAllowedListChoice := v.IpAllowedListChoiceValidationRuleHandler
	rulesIpAllowedListChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIpAllowedListChoice(rulesIpAllowedListChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIRateLimit.ip_allowed_list_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_allowed_list_choice"] = vFn

	vrhServerUrlRules := v.ServerUrlRulesValidationRuleHandler
	rulesServerUrlRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "20",
	}
	vFn, err = vrhServerUrlRules(rulesServerUrlRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIRateLimit.server_url_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_url_rules"] = vFn

	vrhApiEndpointRules := v.ApiEndpointRulesValidationRuleHandler
	rulesApiEndpointRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "20",
	}
	vFn, err = vrhApiEndpointRules(rulesApiEndpointRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APIRateLimit.api_endpoint_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_endpoint_rules"] = vFn

	v.FldValidators["ip_allowed_list_choice.ip_allowed_list"] = ves_io_schema_views.PrefixStringListTypeValidator().Validate
	v.FldValidators["ip_allowed_list_choice.custom_ip_allowed_list"] = CustomIpAllowedListValidator().Validate

	return v
}()

func APIRateLimitValidator() db.Validator {
	return DefaultAPIRateLimitValidator
}

// augmented methods on protoc/std generated struct

func (m *APISpecificationSettings) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APISpecificationSettings) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APISpecificationSettings) DeepCopy() *APISpecificationSettings {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APISpecificationSettings{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APISpecificationSettings) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APISpecificationSettings) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APISpecificationSettingsValidator().Validate(ctx, m, opts...)
}

func (m *APISpecificationSettings) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetApiDefinitionDRefInfo()

}

func (m *APISpecificationSettings) GetApiDefinitionDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetApiDefinition()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("api_definition.Object")
	dri := db.DRefInfo{
		RefdType:   "api_definition.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "api_definition",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetApiDefinitionDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *APISpecificationSettings) GetApiDefinitionDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "api_definition.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: api_definition")
	}

	vref := m.GetApiDefinition()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "api_definition.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateAPISpecificationSettings struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPISpecificationSettings) ValidationTargetChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for validation_target_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAPISpecificationSettings) ApiDefinitionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for api_definition")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPISpecificationSettings) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APISpecificationSettings)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APISpecificationSettings got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_definition"]; exists {

		vOpts := append(opts, db.WithValidateField("api_definition"))
		if err := fv(ctx, m.GetApiDefinition(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["validation_target_choice"]; exists {
		val := m.GetValidationTargetChoice()
		vOpts := append(opts,
			db.WithValidateField("validation_target_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetValidationTargetChoice().(type) {
	case *APISpecificationSettings_ValidationDisabled:
		if fv, exists := v.FldValidators["validation_target_choice.validation_disabled"]; exists {
			val := m.GetValidationTargetChoice().(*APISpecificationSettings_ValidationDisabled).ValidationDisabled
			vOpts := append(opts,
				db.WithValidateField("validation_target_choice"),
				db.WithValidateField("validation_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *APISpecificationSettings_ValidationAllSpecEndpoints:
		if fv, exists := v.FldValidators["validation_target_choice.validation_all_spec_endpoints"]; exists {
			val := m.GetValidationTargetChoice().(*APISpecificationSettings_ValidationAllSpecEndpoints).ValidationAllSpecEndpoints
			vOpts := append(opts,
				db.WithValidateField("validation_target_choice"),
				db.WithValidateField("validation_all_spec_endpoints"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *APISpecificationSettings_ValidationCustomList:
		if fv, exists := v.FldValidators["validation_target_choice.validation_custom_list"]; exists {
			val := m.GetValidationTargetChoice().(*APISpecificationSettings_ValidationCustomList).ValidationCustomList
			vOpts := append(opts,
				db.WithValidateField("validation_target_choice"),
				db.WithValidateField("validation_custom_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPISpecificationSettingsValidator = func() *ValidateAPISpecificationSettings {
	v := &ValidateAPISpecificationSettings{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhValidationTargetChoice := v.ValidationTargetChoiceValidationRuleHandler
	rulesValidationTargetChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhValidationTargetChoice(rulesValidationTargetChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APISpecificationSettings.validation_target_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["validation_target_choice"] = vFn

	vrhApiDefinition := v.ApiDefinitionValidationRuleHandler
	rulesApiDefinition := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhApiDefinition(rulesApiDefinition)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APISpecificationSettings.api_definition: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_definition"] = vFn

	v.FldValidators["validation_target_choice.validation_all_spec_endpoints"] = OpenApiValidationAllSpecEndpointsSettingsValidator().Validate
	v.FldValidators["validation_target_choice.validation_custom_list"] = ValidateApiBySpecRuleValidator().Validate

	return v
}()

func APISpecificationSettingsValidator() db.Validator {
	return DefaultAPISpecificationSettingsValidator
}

// augmented methods on protoc/std generated struct

func (m *AdvancedOptionsType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AdvancedOptionsType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *AdvancedOptionsType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetRequestHeadersToAdd() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting AdvancedOptionsType.request_headers_to_add idx %v", idx)
		}
	}

	for idx, e := range m.GetResponseHeadersToAdd() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting AdvancedOptionsType.response_headers_to_add idx %v", idx)
		}
	}

	return nil
}

func (m *AdvancedOptionsType) DeepCopy() *AdvancedOptionsType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AdvancedOptionsType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AdvancedOptionsType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AdvancedOptionsType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AdvancedOptionsTypeValidator().Validate(ctx, m, opts...)
}

func (m *AdvancedOptionsType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetJwtDRefInfo()

}

func (m *AdvancedOptionsType) GetJwtDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetJwt()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("AdvancedOptionsType.jwt[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("jwt.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "jwt.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "jwt",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetJwtDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AdvancedOptionsType) GetJwtDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "jwt.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: jwt")
	}
	for i, vref := range m.GetJwt() {
		if vref == nil {
			return nil, fmt.Errorf("AdvancedOptionsType.jwt[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "jwt.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateAdvancedOptionsType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAdvancedOptionsType) RequestHeadersToAddValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for request_headers_to_add")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.HeaderManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for request_headers_to_add")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated request_headers_to_add")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items request_headers_to_add")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) RequestHeadersToRemoveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for request_headers_to_remove")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for request_headers_to_remove")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated request_headers_to_remove")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items request_headers_to_remove")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) ResponseHeadersToAddValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for response_headers_to_add")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.HeaderManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for response_headers_to_add")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated response_headers_to_add")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items response_headers_to_add")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) ResponseHeadersToRemoveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for response_headers_to_remove")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for response_headers_to_remove")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated response_headers_to_remove")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items response_headers_to_remove")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) MaxRequestHeaderSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for max_request_header_size")
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) CustomErrorsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapUint32KeyRules(rules)
	itemKeyFn, err := db.NewUint32ValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for custom_errors")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for custom_errors")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[uint32]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for custom_errors")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[uint32]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ uint32 ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map custom_errors")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items custom_errors")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) JwtValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for jwt")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for jwt")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated jwt")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items jwt")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) IdleTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for idle_timeout")
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) CookiesToModifyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for cookies_to_modify")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.CookieManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.CookieManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for cookies_to_modify")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.CookieManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.CookieManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated cookies_to_modify")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items cookies_to_modify")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAdvancedOptionsType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AdvancedOptionsType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AdvancedOptionsType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["buffer_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("buffer_policy"))
		if err := fv(ctx, m.GetBufferPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["compression_params"]; exists {

		vOpts := append(opts, db.WithValidateField("compression_params"))
		if err := fv(ctx, m.GetCompressionParams(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cookies_to_modify"]; exists {
		vOpts := append(opts, db.WithValidateField("cookies_to_modify"))
		if err := fv(ctx, m.GetCookiesToModify(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["custom_errors"]; exists {
		vOpts := append(opts, db.WithValidateField("custom_errors"))
		if err := fv(ctx, m.GetCustomErrors(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disable_default_error_pages"]; exists {

		vOpts := append(opts, db.WithValidateField("disable_default_error_pages"))
		if err := fv(ctx, m.GetDisableDefaultErrorPages(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["idle_timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("idle_timeout"))
		if err := fv(ctx, m.GetIdleTimeout(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["javascript_info"]; exists {

		vOpts := append(opts, db.WithValidateField("javascript_info"))
		if err := fv(ctx, m.GetJavascriptInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["jwt"]; exists {
		vOpts := append(opts, db.WithValidateField("jwt"))
		if err := fv(ctx, m.GetJwt(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["max_request_header_size"]; exists {

		vOpts := append(opts, db.WithValidateField("max_request_header_size"))
		if err := fv(ctx, m.GetMaxRequestHeaderSize(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetPathNormalizeChoice().(type) {
	case *AdvancedOptionsType_EnablePathNormalize:
		if fv, exists := v.FldValidators["path_normalize_choice.enable_path_normalize"]; exists {
			val := m.GetPathNormalizeChoice().(*AdvancedOptionsType_EnablePathNormalize).EnablePathNormalize
			vOpts := append(opts,
				db.WithValidateField("path_normalize_choice"),
				db.WithValidateField("enable_path_normalize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AdvancedOptionsType_DisablePathNormalize:
		if fv, exists := v.FldValidators["path_normalize_choice.disable_path_normalize"]; exists {
			val := m.GetPathNormalizeChoice().(*AdvancedOptionsType_DisablePathNormalize).DisablePathNormalize
			vOpts := append(opts,
				db.WithValidateField("path_normalize_choice"),
				db.WithValidateField("disable_path_normalize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["request_headers_to_add"]; exists {
		vOpts := append(opts, db.WithValidateField("request_headers_to_add"))
		if err := fv(ctx, m.GetRequestHeadersToAdd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_headers_to_remove"]; exists {
		vOpts := append(opts, db.WithValidateField("request_headers_to_remove"))
		if err := fv(ctx, m.GetRequestHeadersToRemove(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_headers_to_add"]; exists {
		vOpts := append(opts, db.WithValidateField("response_headers_to_add"))
		if err := fv(ctx, m.GetResponseHeadersToAdd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_headers_to_remove"]; exists {
		vOpts := append(opts, db.WithValidateField("response_headers_to_remove"))
		if err := fv(ctx, m.GetResponseHeadersToRemove(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetStrictSniHostHeaderCheckChoice().(type) {
	case *AdvancedOptionsType_EnableStrictSniHostHeaderCheck:
		if fv, exists := v.FldValidators["strict_sni_host_header_check_choice.enable_strict_sni_host_header_check"]; exists {
			val := m.GetStrictSniHostHeaderCheckChoice().(*AdvancedOptionsType_EnableStrictSniHostHeaderCheck).EnableStrictSniHostHeaderCheck
			vOpts := append(opts,
				db.WithValidateField("strict_sni_host_header_check_choice"),
				db.WithValidateField("enable_strict_sni_host_header_check"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AdvancedOptionsType_AdditionalDomains:
		if fv, exists := v.FldValidators["strict_sni_host_header_check_choice.additional_domains"]; exists {
			val := m.GetStrictSniHostHeaderCheckChoice().(*AdvancedOptionsType_AdditionalDomains).AdditionalDomains
			vOpts := append(opts,
				db.WithValidateField("strict_sni_host_header_check_choice"),
				db.WithValidateField("additional_domains"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAdvancedOptionsTypeValidator = func() *ValidateAdvancedOptionsType {
	v := &ValidateAdvancedOptionsType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRequestHeadersToAdd := v.RequestHeadersToAddValidationRuleHandler
	rulesRequestHeadersToAdd := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRequestHeadersToAdd(rulesRequestHeadersToAdd)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.request_headers_to_add: %s", err)
		panic(errMsg)
	}
	v.FldValidators["request_headers_to_add"] = vFn

	vrhRequestHeadersToRemove := v.RequestHeadersToRemoveValidationRuleHandler
	rulesRequestHeadersToRemove := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.min_bytes": "1",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhRequestHeadersToRemove(rulesRequestHeadersToRemove)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.request_headers_to_remove: %s", err)
		panic(errMsg)
	}
	v.FldValidators["request_headers_to_remove"] = vFn

	vrhResponseHeadersToAdd := v.ResponseHeadersToAddValidationRuleHandler
	rulesResponseHeadersToAdd := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhResponseHeadersToAdd(rulesResponseHeadersToAdd)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.response_headers_to_add: %s", err)
		panic(errMsg)
	}
	v.FldValidators["response_headers_to_add"] = vFn

	vrhResponseHeadersToRemove := v.ResponseHeadersToRemoveValidationRuleHandler
	rulesResponseHeadersToRemove := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.min_bytes": "1",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhResponseHeadersToRemove(rulesResponseHeadersToRemove)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.response_headers_to_remove: %s", err)
		panic(errMsg)
	}
	v.FldValidators["response_headers_to_remove"] = vFn

	vrhMaxRequestHeaderSize := v.MaxRequestHeaderSizeValidationRuleHandler
	rulesMaxRequestHeaderSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "96",
	}
	vFn, err = vrhMaxRequestHeaderSize(rulesMaxRequestHeaderSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.max_request_header_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["max_request_header_size"] = vFn

	vrhCustomErrors := v.CustomErrorsValidationRuleHandler
	rulesCustomErrors := map[string]string{
		"ves.io.schema.rules.map.keys.uint32.ranges":    "3,4,5,300-599",
		"ves.io.schema.rules.map.max_pairs":             "16",
		"ves.io.schema.rules.map.values.string.max_len": "65536",
		"ves.io.schema.rules.map.values.string.uri_ref": "true",
	}
	vFn, err = vrhCustomErrors(rulesCustomErrors)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.custom_errors: %s", err)
		panic(errMsg)
	}
	v.FldValidators["custom_errors"] = vFn

	vrhJwt := v.JwtValidationRuleHandler
	rulesJwt := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhJwt(rulesJwt)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.jwt: %s", err)
		panic(errMsg)
	}
	v.FldValidators["jwt"] = vFn

	vrhIdleTimeout := v.IdleTimeoutValidationRuleHandler
	rulesIdleTimeout := map[string]string{
		"ves.io.schema.rules.uint32.lte": "3600000",
	}
	vFn, err = vrhIdleTimeout(rulesIdleTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.idle_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["idle_timeout"] = vFn

	vrhCookiesToModify := v.CookiesToModifyValidationRuleHandler
	rulesCookiesToModify := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.min_bytes": "1",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhCookiesToModify(rulesCookiesToModify)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AdvancedOptionsType.cookies_to_modify: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cookies_to_modify"] = vFn

	v.FldValidators["strict_sni_host_header_check_choice.additional_domains"] = ves_io_schema.DomainNameListValidator().Validate

	v.FldValidators["buffer_policy"] = ves_io_schema.BufferConfigTypeValidator().Validate

	v.FldValidators["compression_params"] = ves_io_schema_virtual_host.CompressionTypeValidator().Validate

	return v
}()

func AdvancedOptionsTypeValidator() db.Validator {
	return DefaultAdvancedOptionsTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ApiDefinitionList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiDefinitionList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApiDefinitionList) DeepCopy() *ApiDefinitionList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiDefinitionList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiDefinitionList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiDefinitionList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiDefinitionListValidator().Validate(ctx, m, opts...)
}

func (m *ApiDefinitionList) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetApiDefinitionsDRefInfo()

}

func (m *ApiDefinitionList) GetApiDefinitionsDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetApiDefinitions()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("ApiDefinitionList.api_definitions[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("api_definition.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "api_definition.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "api_definitions",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetApiDefinitionsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ApiDefinitionList) GetApiDefinitionsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "api_definition.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: api_definition")
	}
	for i, vref := range m.GetApiDefinitions() {
		if vref == nil {
			return nil, fmt.Errorf("ApiDefinitionList.api_definitions[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "api_definition.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateApiDefinitionList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiDefinitionList) ApiDefinitionsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for api_definitions")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_definitions")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_definitions")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_definitions")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateApiDefinitionList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiDefinitionList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiDefinitionList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_definitions"]; exists {
		vOpts := append(opts, db.WithValidateField("api_definitions"))
		if err := fv(ctx, m.GetApiDefinitions(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiDefinitionListValidator = func() *ValidateApiDefinitionList {
	v := &ValidateApiDefinitionList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiDefinitions := v.ApiDefinitionsValidationRuleHandler
	rulesApiDefinitions := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhApiDefinitions(rulesApiDefinitions)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiDefinitionList.api_definitions: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_definitions"] = vFn

	return v
}()

func ApiDefinitionListValidator() db.Validator {
	return DefaultApiDefinitionListValidator
}

// augmented methods on protoc/std generated struct

func (m *ApiDiscoverySetting) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiDiscoverySetting) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApiDiscoverySetting) DeepCopy() *ApiDiscoverySetting {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiDiscoverySetting{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiDiscoverySetting) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiDiscoverySetting) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiDiscoverySettingValidator().Validate(ctx, m, opts...)
}

type ValidateApiDiscoverySetting struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiDiscoverySetting) LearnFromRedirectTrafficValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for learn_from_redirect_traffic")
	}
	return validatorFn, nil
}

func (v *ValidateApiDiscoverySetting) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiDiscoverySetting)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiDiscoverySetting got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["discovered_api_settings"]; exists {

		vOpts := append(opts, db.WithValidateField("discovered_api_settings"))
		if err := fv(ctx, m.GetDiscoveredApiSettings(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["learn_from_redirect_traffic"]; exists {
		val := m.GetLearnFromRedirectTraffic()
		vOpts := append(opts,
			db.WithValidateField("learn_from_redirect_traffic"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLearnFromRedirectTraffic().(type) {
	case *ApiDiscoverySetting_DisableLearnFromRedirectTraffic:
		if fv, exists := v.FldValidators["learn_from_redirect_traffic.disable_learn_from_redirect_traffic"]; exists {
			val := m.GetLearnFromRedirectTraffic().(*ApiDiscoverySetting_DisableLearnFromRedirectTraffic).DisableLearnFromRedirectTraffic
			vOpts := append(opts,
				db.WithValidateField("learn_from_redirect_traffic"),
				db.WithValidateField("disable_learn_from_redirect_traffic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ApiDiscoverySetting_EnableLearnFromRedirectTraffic:
		if fv, exists := v.FldValidators["learn_from_redirect_traffic.enable_learn_from_redirect_traffic"]; exists {
			val := m.GetLearnFromRedirectTraffic().(*ApiDiscoverySetting_EnableLearnFromRedirectTraffic).EnableLearnFromRedirectTraffic
			vOpts := append(opts,
				db.WithValidateField("learn_from_redirect_traffic"),
				db.WithValidateField("enable_learn_from_redirect_traffic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_detection_rules"]; exists {

		vOpts := append(opts, db.WithValidateField("sensitive_data_detection_rules"))
		if err := fv(ctx, m.GetSensitiveDataDetectionRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiDiscoverySettingValidator = func() *ValidateApiDiscoverySetting {
	v := &ValidateApiDiscoverySetting{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhLearnFromRedirectTraffic := v.LearnFromRedirectTrafficValidationRuleHandler
	rulesLearnFromRedirectTraffic := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLearnFromRedirectTraffic(rulesLearnFromRedirectTraffic)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiDiscoverySetting.learn_from_redirect_traffic: %s", err)
		panic(errMsg)
	}
	v.FldValidators["learn_from_redirect_traffic"] = vFn

	v.FldValidators["sensitive_data_detection_rules"] = ves_io_schema_app_type.SensitiveDataDetectionRulesValidator().Validate

	v.FldValidators["discovered_api_settings"] = ves_io_schema_app_type.DiscoveredAPISettingsValidator().Validate

	return v
}()

func ApiDiscoverySettingValidator() db.Validator {
	return DefaultApiDiscoverySettingValidator
}

// augmented methods on protoc/std generated struct

func (m *ApiEndpointDetails) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiEndpointDetails) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApiEndpointDetails) DeepCopy() *ApiEndpointDetails {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiEndpointDetails{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiEndpointDetails) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiEndpointDetails) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiEndpointDetailsValidator().Validate(ctx, m, opts...)
}

type ValidateApiEndpointDetails struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiEndpointDetails) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for path")
	}

	return validatorFn, nil
}

func (v *ValidateApiEndpointDetails) MethodsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.HttpMethod)
		return int32(i)
	}
	// ves_io_schema.HttpMethod_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.HttpMethod_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for methods")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.HttpMethod, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for methods")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.HttpMethod)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.HttpMethod, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated methods")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items methods")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateApiEndpointDetails) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiEndpointDetails)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiEndpointDetails got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["methods"]; exists {
		vOpts := append(opts, db.WithValidateField("methods"))
		if err := fv(ctx, m.GetMethods(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiEndpointDetailsValidator = func() *ValidateApiEndpointDetails {
	v := &ValidateApiEndpointDetails{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required":           "true",
		"ves.io.schema.rules.string.max_len":             "1024",
		"ves.io.schema.rules.string.templated_http_path": "true",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiEndpointDetails.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	vrhMethods := v.MethodsValidationRuleHandler
	rulesMethods := map[string]string{
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.max_items":               "16",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhMethods(rulesMethods)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiEndpointDetails.methods: %s", err)
		panic(errMsg)
	}
	v.FldValidators["methods"] = vFn

	return v
}()

func ApiEndpointDetailsValidator() db.Validator {
	return DefaultApiEndpointDetailsValidator
}

// augmented methods on protoc/std generated struct

func (m *ApiEndpointRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiEndpointRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApiEndpointRule) DeepCopy() *ApiEndpointRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiEndpointRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiEndpointRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiEndpointRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiEndpointRuleValidator().Validate(ctx, m, opts...)
}

func (m *ApiEndpointRule) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRateLimiterChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ApiEndpointRule) GetRateLimiterChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRateLimiterChoice() == nil {
		return nil, nil
	}
	switch m.GetRateLimiterChoice().(type) {
	case *ApiEndpointRule_InlineRateLimiter:
		drInfos, err := m.GetInlineRateLimiter().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInlineRateLimiter().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "inline_rate_limiter." + dri.DRField
		}
		return drInfos, err

	case *ApiEndpointRule_RefRateLimiter:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateApiEndpointRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiEndpointRule) DomainChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain_choice")
	}
	return validatorFn, nil
}

func (v *ValidateApiEndpointRule) DomainChoiceSpecificDomainValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_SpecificDomain, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for specific_domain")
	}
	return oValidatorFn_SpecificDomain, nil
}

func (v *ValidateApiEndpointRule) RateLimiterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rate_limiter_choice")
	}
	return validatorFn, nil
}

func (v *ValidateApiEndpointRule) ApiEndpointPathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_endpoint_path")
	}

	return validatorFn, nil
}

func (v *ValidateApiEndpointRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiEndpointRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiEndpointRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_endpoint_method"]; exists {

		vOpts := append(opts, db.WithValidateField("api_endpoint_method"))
		if err := fv(ctx, m.GetApiEndpointMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_endpoint_path"]; exists {

		vOpts := append(opts, db.WithValidateField("api_endpoint_path"))
		if err := fv(ctx, m.GetApiEndpointPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["base_path"]; exists {

		vOpts := append(opts, db.WithValidateField("base_path"))
		if err := fv(ctx, m.GetBasePath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_choice"]; exists {
		val := m.GetDomainChoice()
		vOpts := append(opts,
			db.WithValidateField("domain_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDomainChoice().(type) {
	case *ApiEndpointRule_AnyDomain:
		if fv, exists := v.FldValidators["domain_choice.any_domain"]; exists {
			val := m.GetDomainChoice().(*ApiEndpointRule_AnyDomain).AnyDomain
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("any_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ApiEndpointRule_SpecificDomain:
		if fv, exists := v.FldValidators["domain_choice.specific_domain"]; exists {
			val := m.GetDomainChoice().(*ApiEndpointRule_SpecificDomain).SpecificDomain
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("specific_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rate_limiter_choice"]; exists {
		val := m.GetRateLimiterChoice()
		vOpts := append(opts,
			db.WithValidateField("rate_limiter_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRateLimiterChoice().(type) {
	case *ApiEndpointRule_InlineRateLimiter:
		if fv, exists := v.FldValidators["rate_limiter_choice.inline_rate_limiter"]; exists {
			val := m.GetRateLimiterChoice().(*ApiEndpointRule_InlineRateLimiter).InlineRateLimiter
			vOpts := append(opts,
				db.WithValidateField("rate_limiter_choice"),
				db.WithValidateField("inline_rate_limiter"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ApiEndpointRule_RefRateLimiter:
		if fv, exists := v.FldValidators["rate_limiter_choice.ref_rate_limiter"]; exists {
			val := m.GetRateLimiterChoice().(*ApiEndpointRule_RefRateLimiter).RefRateLimiter
			vOpts := append(opts,
				db.WithValidateField("rate_limiter_choice"),
				db.WithValidateField("ref_rate_limiter"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiEndpointRuleValidator = func() *ValidateApiEndpointRule {
	v := &ValidateApiEndpointRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomainChoice := v.DomainChoiceValidationRuleHandler
	rulesDomainChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDomainChoice(rulesDomainChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiEndpointRule.domain_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_choice"] = vFn

	vrhDomainChoiceSpecificDomain := v.DomainChoiceSpecificDomainValidationRuleHandler
	rulesDomainChoiceSpecificDomain := map[string]string{
		"ves.io.schema.rules.string.max_len":   "128",
		"ves.io.schema.rules.string.vh_domain": "true",
	}
	vFnMap["domain_choice.specific_domain"], err = vrhDomainChoiceSpecificDomain(rulesDomainChoiceSpecificDomain)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ApiEndpointRule.domain_choice_specific_domain: %s", err)
		panic(errMsg)
	}

	v.FldValidators["domain_choice.specific_domain"] = vFnMap["domain_choice.specific_domain"]

	vrhRateLimiterChoice := v.RateLimiterChoiceValidationRuleHandler
	rulesRateLimiterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRateLimiterChoice(rulesRateLimiterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiEndpointRule.rate_limiter_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limiter_choice"] = vFn

	vrhApiEndpointPath := v.ApiEndpointPathValidationRuleHandler
	rulesApiEndpointPath := map[string]string{
		"ves.io.schema.rules.message.required":           "true",
		"ves.io.schema.rules.string.max_len":             "1024",
		"ves.io.schema.rules.string.templated_http_path": "true",
	}
	vFn, err = vrhApiEndpointPath(rulesApiEndpointPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiEndpointRule.api_endpoint_path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_endpoint_path"] = vFn

	v.FldValidators["rate_limiter_choice.inline_rate_limiter"] = InlineRateLimiterValidator().Validate
	v.FldValidators["rate_limiter_choice.ref_rate_limiter"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_endpoint_method"] = ves_io_schema_policy.HttpMethodMatcherTypeValidator().Validate

	return v
}()

func ApiEndpointRuleValidator() db.Validator {
	return DefaultApiEndpointRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *AppEndpointType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AppEndpointType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AppEndpointType) DeepCopy() *AppEndpointType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AppEndpointType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AppEndpointType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AppEndpointType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AppEndpointTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAppEndpointType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAppEndpointType) AppTrafficTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for app_traffic_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAppEndpointType) GoodbotChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for goodbot_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAppEndpointType) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAppEndpointType) HttpMethodsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.BotHttpMethod)
		return int32(i)
	}
	// ves_io_schema.BotHttpMethod_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.BotHttpMethod_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for http_methods")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.BotHttpMethod, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for http_methods")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.BotHttpMethod)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.BotHttpMethod, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated http_methods")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items http_methods")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAppEndpointType) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for path")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.PathMatcherTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAppEndpointType) MitigationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for mitigation")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAppEndpointType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AppEndpointType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AppEndpointType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["app_traffic_type_choice"]; exists {
		val := m.GetAppTrafficTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("app_traffic_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAppTrafficTypeChoice().(type) {
	case *AppEndpointType_Web:
		if fv, exists := v.FldValidators["app_traffic_type_choice.web"]; exists {
			val := m.GetAppTrafficTypeChoice().(*AppEndpointType_Web).Web
			vOpts := append(opts,
				db.WithValidateField("app_traffic_type_choice"),
				db.WithValidateField("web"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AppEndpointType_Mobile:
		if fv, exists := v.FldValidators["app_traffic_type_choice.mobile"]; exists {
			val := m.GetAppTrafficTypeChoice().(*AppEndpointType_Mobile).Mobile
			vOpts := append(opts,
				db.WithValidateField("app_traffic_type_choice"),
				db.WithValidateField("mobile"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AppEndpointType_WebMobile:
		if fv, exists := v.FldValidators["app_traffic_type_choice.web_mobile"]; exists {
			val := m.GetAppTrafficTypeChoice().(*AppEndpointType_WebMobile).WebMobile
			vOpts := append(opts,
				db.WithValidateField("app_traffic_type_choice"),
				db.WithValidateField("web_mobile"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetDomainMatcherChoice().(type) {
	case *AppEndpointType_AnyDomain:
		if fv, exists := v.FldValidators["domain_matcher_choice.any_domain"]; exists {
			val := m.GetDomainMatcherChoice().(*AppEndpointType_AnyDomain).AnyDomain
			vOpts := append(opts,
				db.WithValidateField("domain_matcher_choice"),
				db.WithValidateField("any_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AppEndpointType_Domain:
		if fv, exists := v.FldValidators["domain_matcher_choice.domain"]; exists {
			val := m.GetDomainMatcherChoice().(*AppEndpointType_Domain).Domain
			vOpts := append(opts,
				db.WithValidateField("domain_matcher_choice"),
				db.WithValidateField("domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetFlowLabelChoice().(type) {
	case *AppEndpointType_UndefinedFlowLabel:
		if fv, exists := v.FldValidators["flow_label_choice.undefined_flow_label"]; exists {
			val := m.GetFlowLabelChoice().(*AppEndpointType_UndefinedFlowLabel).UndefinedFlowLabel
			vOpts := append(opts,
				db.WithValidateField("flow_label_choice"),
				db.WithValidateField("undefined_flow_label"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AppEndpointType_FlowLabel:
		if fv, exists := v.FldValidators["flow_label_choice.flow_label"]; exists {
			val := m.GetFlowLabelChoice().(*AppEndpointType_FlowLabel).FlowLabel
			vOpts := append(opts,
				db.WithValidateField("flow_label_choice"),
				db.WithValidateField("flow_label"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["goodbot_choice"]; exists {
		val := m.GetGoodbotChoice()
		vOpts := append(opts,
			db.WithValidateField("goodbot_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGoodbotChoice().(type) {
	case *AppEndpointType_MitigateGoodBots:
		if fv, exists := v.FldValidators["goodbot_choice.mitigate_good_bots"]; exists {
			val := m.GetGoodbotChoice().(*AppEndpointType_MitigateGoodBots).MitigateGoodBots
			vOpts := append(opts,
				db.WithValidateField("goodbot_choice"),
				db.WithValidateField("mitigate_good_bots"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AppEndpointType_AllowGoodBots:
		if fv, exists := v.FldValidators["goodbot_choice.allow_good_bots"]; exists {
			val := m.GetGoodbotChoice().(*AppEndpointType_AllowGoodBots).AllowGoodBots
			vOpts := append(opts,
				db.WithValidateField("goodbot_choice"),
				db.WithValidateField("allow_good_bots"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["http_methods"]; exists {
		vOpts := append(opts, db.WithValidateField("http_methods"))
		if err := fv(ctx, m.GetHttpMethods(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mitigation"]; exists {

		vOpts := append(opts, db.WithValidateField("mitigation"))
		if err := fv(ctx, m.GetMitigation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protocol"]; exists {

		vOpts := append(opts, db.WithValidateField("protocol"))
		if err := fv(ctx, m.GetProtocol(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAppEndpointTypeValidator = func() *ValidateAppEndpointType {
	v := &ValidateAppEndpointType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAppTrafficTypeChoice := v.AppTrafficTypeChoiceValidationRuleHandler
	rulesAppTrafficTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAppTrafficTypeChoice(rulesAppTrafficTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AppEndpointType.app_traffic_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["app_traffic_type_choice"] = vFn

	vrhGoodbotChoice := v.GoodbotChoiceValidationRuleHandler
	rulesGoodbotChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGoodbotChoice(rulesGoodbotChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AppEndpointType.goodbot_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["goodbot_choice"] = vFn

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AppEndpointType.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhHttpMethods := v.HttpMethodsValidationRuleHandler
	rulesHttpMethods := map[string]string{
		"ves.io.schema.rules.message.required":                 "true",
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.items.enum.in":           "[0,1,3,4,10]",
		"ves.io.schema.rules.repeated.max_items":               "5",
		"ves.io.schema.rules.repeated.min_items":               "1",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhHttpMethods(rulesHttpMethods)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AppEndpointType.http_methods: %s", err)
		panic(errMsg)
	}
	v.FldValidators["http_methods"] = vFn

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AppEndpointType.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	vrhMitigation := v.MitigationValidationRuleHandler
	rulesMitigation := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMitigation(rulesMitigation)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AppEndpointType.mitigation: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mitigation"] = vFn

	v.FldValidators["app_traffic_type_choice.web_mobile"] = WebMobileTrafficTypeValidator().Validate

	v.FldValidators["domain_matcher_choice.domain"] = ves_io_schema.DomainTypeValidator().Validate

	v.FldValidators["flow_label_choice.flow_label"] = ves_io_schema.BotDefenseFlowLabelCategoriesChoiceTypeValidator().Validate

	return v
}()

func AppEndpointTypeValidator() db.Validator {
	return DefaultAppEndpointTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Audiences) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Audiences) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Audiences) DeepCopy() *Audiences {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Audiences{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Audiences) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Audiences) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AudiencesValidator().Validate(ctx, m, opts...)
}

type ValidateAudiences struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAudiences) AudiencesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for audiences")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for audiences")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated audiences")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items audiences")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAudiences) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Audiences)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Audiences got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["audiences"]; exists {
		vOpts := append(opts, db.WithValidateField("audiences"))
		if err := fv(ctx, m.GetAudiences(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAudiencesValidator = func() *ValidateAudiences {
	v := &ValidateAudiences{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAudiences := v.AudiencesValidationRuleHandler
	rulesAudiences := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhAudiences(rulesAudiences)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Audiences.audiences: %s", err)
		panic(errMsg)
	}
	v.FldValidators["audiences"] = vFn

	return v
}()

func AudiencesValidator() db.Validator {
	return DefaultAudiencesValidator
}

// augmented methods on protoc/std generated struct

func (m *AutoMitigationAction) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AutoMitigationAction) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AutoMitigationAction) DeepCopy() *AutoMitigationAction {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AutoMitigationAction{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AutoMitigationAction) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AutoMitigationAction) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AutoMitigationActionValidator().Validate(ctx, m, opts...)
}

type ValidateAutoMitigationAction struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAutoMitigationAction) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action")
	}
	return validatorFn, nil
}

func (v *ValidateAutoMitigationAction) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AutoMitigationAction)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AutoMitigationAction got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {
		val := m.GetAction()
		vOpts := append(opts,
			db.WithValidateField("action"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAction().(type) {
	case *AutoMitigationAction_Block:
		if fv, exists := v.FldValidators["action.block"]; exists {
			val := m.GetAction().(*AutoMitigationAction_Block).Block
			vOpts := append(opts,
				db.WithValidateField("action"),
				db.WithValidateField("block"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AutoMitigationAction_JsChallenge:
		if fv, exists := v.FldValidators["action.js_challenge"]; exists {
			val := m.GetAction().(*AutoMitigationAction_JsChallenge).JsChallenge
			vOpts := append(opts,
				db.WithValidateField("action"),
				db.WithValidateField("js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAutoMitigationActionValidator = func() *ValidateAutoMitigationAction {
	v := &ValidateAutoMitigationAction{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AutoMitigationAction.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	v.FldValidators["action.js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate

	return v
}()

func AutoMitigationActionValidator() db.Validator {
	return DefaultAutoMitigationActionValidator
}

// augmented methods on protoc/std generated struct

func (m *BasePathsType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BasePathsType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BasePathsType) DeepCopy() *BasePathsType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BasePathsType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BasePathsType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BasePathsType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BasePathsTypeValidator().Validate(ctx, m, opts...)
}

type ValidateBasePathsType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBasePathsType) BasePathsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for base_paths")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for base_paths")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated base_paths")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items base_paths")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateBasePathsType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BasePathsType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BasePathsType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["base_paths"]; exists {
		vOpts := append(opts, db.WithValidateField("base_paths"))
		if err := fv(ctx, m.GetBasePaths(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBasePathsTypeValidator = func() *ValidateBasePathsType {
	v := &ValidateBasePathsType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBasePaths := v.BasePathsValidationRuleHandler
	rulesBasePaths := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.http_path": "true",
		"ves.io.schema.rules.repeated.items.string.not_empty": "true",
		"ves.io.schema.rules.repeated.max_items":              "16",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhBasePaths(rulesBasePaths)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BasePathsType.base_paths: %s", err)
		panic(errMsg)
	}
	v.FldValidators["base_paths"] = vFn

	return v
}()

func BasePathsTypeValidator() db.Validator {
	return DefaultBasePathsTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *BotAdvancedMobileSDKConfigType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BotAdvancedMobileSDKConfigType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BotAdvancedMobileSDKConfigType) DeepCopy() *BotAdvancedMobileSDKConfigType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BotAdvancedMobileSDKConfigType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BotAdvancedMobileSDKConfigType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BotAdvancedMobileSDKConfigType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BotAdvancedMobileSDKConfigTypeValidator().Validate(ctx, m, opts...)
}

type ValidateBotAdvancedMobileSDKConfigType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBotAdvancedMobileSDKConfigType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BotAdvancedMobileSDKConfigType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BotAdvancedMobileSDKConfigType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["mobile_identifier"]; exists {

		vOpts := append(opts, db.WithValidateField("mobile_identifier"))
		if err := fv(ctx, m.GetMobileIdentifier(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBotAdvancedMobileSDKConfigTypeValidator = func() *ValidateBotAdvancedMobileSDKConfigType {
	v := &ValidateBotAdvancedMobileSDKConfigType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["mobile_identifier"] = MobileTrafficIdentifierTypeValidator().Validate

	return v
}()

func BotAdvancedMobileSDKConfigTypeValidator() db.Validator {
	return DefaultBotAdvancedMobileSDKConfigTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *BotDefenseAdvancedPolicyType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BotDefenseAdvancedPolicyType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BotDefenseAdvancedPolicyType) DeepCopy() *BotDefenseAdvancedPolicyType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BotDefenseAdvancedPolicyType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BotDefenseAdvancedPolicyType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BotDefenseAdvancedPolicyType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BotDefenseAdvancedPolicyTypeValidator().Validate(ctx, m, opts...)
}

type ValidateBotDefenseAdvancedPolicyType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBotDefenseAdvancedPolicyType) MobileSdkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mobile_sdk_choice")
	}
	return validatorFn, nil
}

func (v *ValidateBotDefenseAdvancedPolicyType) ProtectedAppEndpointsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for protected_app_endpoints")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ProtectedAppEndpointType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ProtectedAppEndpointTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for protected_app_endpoints")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ProtectedAppEndpointType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ProtectedAppEndpointType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated protected_app_endpoints")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items protected_app_endpoints")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateBotDefenseAdvancedPolicyType) JsDownloadPathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for js_download_path")
	}

	return validatorFn, nil
}

func (v *ValidateBotDefenseAdvancedPolicyType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BotDefenseAdvancedPolicyType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BotDefenseAdvancedPolicyType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["js_download_path"]; exists {

		vOpts := append(opts, db.WithValidateField("js_download_path"))
		if err := fv(ctx, m.GetJsDownloadPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mobile_sdk_choice"]; exists {
		val := m.GetMobileSdkChoice()
		vOpts := append(opts,
			db.WithValidateField("mobile_sdk_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMobileSdkChoice().(type) {
	case *BotDefenseAdvancedPolicyType_DisableMobileSdk:
		if fv, exists := v.FldValidators["mobile_sdk_choice.disable_mobile_sdk"]; exists {
			val := m.GetMobileSdkChoice().(*BotDefenseAdvancedPolicyType_DisableMobileSdk).DisableMobileSdk
			vOpts := append(opts,
				db.WithValidateField("mobile_sdk_choice"),
				db.WithValidateField("disable_mobile_sdk"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *BotDefenseAdvancedPolicyType_MobileSdkConfig:
		if fv, exists := v.FldValidators["mobile_sdk_choice.mobile_sdk_config"]; exists {
			val := m.GetMobileSdkChoice().(*BotDefenseAdvancedPolicyType_MobileSdkConfig).MobileSdkConfig
			vOpts := append(opts,
				db.WithValidateField("mobile_sdk_choice"),
				db.WithValidateField("mobile_sdk_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["protected_app_endpoints"]; exists {
		vOpts := append(opts, db.WithValidateField("protected_app_endpoints"))
		if err := fv(ctx, m.GetProtectedAppEndpoints(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBotDefenseAdvancedPolicyTypeValidator = func() *ValidateBotDefenseAdvancedPolicyType {
	v := &ValidateBotDefenseAdvancedPolicyType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMobileSdkChoice := v.MobileSdkChoiceValidationRuleHandler
	rulesMobileSdkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMobileSdkChoice(rulesMobileSdkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BotDefenseAdvancedPolicyType.mobile_sdk_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mobile_sdk_choice"] = vFn

	vrhProtectedAppEndpoints := v.ProtectedAppEndpointsValidationRuleHandler
	rulesProtectedAppEndpoints := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhProtectedAppEndpoints(rulesProtectedAppEndpoints)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BotDefenseAdvancedPolicyType.protected_app_endpoints: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protected_app_endpoints"] = vFn

	vrhJsDownloadPath := v.JsDownloadPathValidationRuleHandler
	rulesJsDownloadPath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.http_path": "true",
	}
	vFn, err = vrhJsDownloadPath(rulesJsDownloadPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BotDefenseAdvancedPolicyType.js_download_path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["js_download_path"] = vFn

	v.FldValidators["mobile_sdk_choice.mobile_sdk_config"] = BotAdvancedMobileSDKConfigTypeValidator().Validate

	return v
}()

func BotDefenseAdvancedPolicyTypeValidator() db.Validator {
	return DefaultBotDefenseAdvancedPolicyTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *BotDefenseAdvancedType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *BotDefenseAdvancedType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *BotDefenseAdvancedType) DeepCopy() *BotDefenseAdvancedType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &BotDefenseAdvancedType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *BotDefenseAdvancedType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *BotDefenseAdvancedType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return BotDefenseAdvancedTypeValidator().Validate(ctx, m, opts...)
}

func (m *BotDefenseAdvancedType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetMobileDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMobileDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWebDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetWebDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *BotDefenseAdvancedType) GetMobileDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetMobile()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("bot_defense_app_infrastructure.Object")
	dri := db.DRefInfo{
		RefdType:   "bot_defense_app_infrastructure.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "mobile",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetMobileDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *BotDefenseAdvancedType) GetMobileDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "bot_defense_app_infrastructure.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: bot_defense_app_infrastructure")
	}

	vref := m.GetMobile()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "bot_defense_app_infrastructure.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *BotDefenseAdvancedType) GetWebDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetWeb()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("bot_defense_app_infrastructure.Object")
	dri := db.DRefInfo{
		RefdType:   "bot_defense_app_infrastructure.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "web",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetWebDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *BotDefenseAdvancedType) GetWebDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "bot_defense_app_infrastructure.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: bot_defense_app_infrastructure")
	}

	vref := m.GetWeb()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "bot_defense_app_infrastructure.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateBotDefenseAdvancedType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateBotDefenseAdvancedType) PolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for policy")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := BotDefenseAdvancedPolicyTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateBotDefenseAdvancedType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*BotDefenseAdvancedType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *BotDefenseAdvancedType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["mobile"]; exists {

		vOpts := append(opts, db.WithValidateField("mobile"))
		if err := fv(ctx, m.GetMobile(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["policy"]; exists {

		vOpts := append(opts, db.WithValidateField("policy"))
		if err := fv(ctx, m.GetPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["web"]; exists {

		vOpts := append(opts, db.WithValidateField("web"))
		if err := fv(ctx, m.GetWeb(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultBotDefenseAdvancedTypeValidator = func() *ValidateBotDefenseAdvancedType {
	v := &ValidateBotDefenseAdvancedType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPolicy := v.PolicyValidationRuleHandler
	rulesPolicy := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPolicy(rulesPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for BotDefenseAdvancedType.policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["policy"] = vFn

	v.FldValidators["web"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["mobile"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func BotDefenseAdvancedTypeValidator() db.Validator {
	return DefaultBotDefenseAdvancedTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CSDJavaScriptInsertAllWithExceptionsType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CSDJavaScriptInsertAllWithExceptionsType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CSDJavaScriptInsertAllWithExceptionsType) DeepCopy() *CSDJavaScriptInsertAllWithExceptionsType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CSDJavaScriptInsertAllWithExceptionsType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CSDJavaScriptInsertAllWithExceptionsType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CSDJavaScriptInsertAllWithExceptionsType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CSDJavaScriptInsertAllWithExceptionsTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCSDJavaScriptInsertAllWithExceptionsType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCSDJavaScriptInsertAllWithExceptionsType) ExcludeListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for exclude_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ShapeJavaScriptExclusionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ShapeJavaScriptExclusionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for exclude_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ShapeJavaScriptExclusionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ShapeJavaScriptExclusionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated exclude_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items exclude_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCSDJavaScriptInsertAllWithExceptionsType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CSDJavaScriptInsertAllWithExceptionsType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CSDJavaScriptInsertAllWithExceptionsType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["exclude_list"]; exists {
		vOpts := append(opts, db.WithValidateField("exclude_list"))
		if err := fv(ctx, m.GetExcludeList(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCSDJavaScriptInsertAllWithExceptionsTypeValidator = func() *ValidateCSDJavaScriptInsertAllWithExceptionsType {
	v := &ValidateCSDJavaScriptInsertAllWithExceptionsType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhExcludeList := v.ExcludeListValidationRuleHandler
	rulesExcludeList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhExcludeList(rulesExcludeList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CSDJavaScriptInsertAllWithExceptionsType.exclude_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["exclude_list"] = vFn

	return v
}()

func CSDJavaScriptInsertAllWithExceptionsTypeValidator() db.Validator {
	return DefaultCSDJavaScriptInsertAllWithExceptionsTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CSDJavaScriptInsertType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CSDJavaScriptInsertType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CSDJavaScriptInsertType) DeepCopy() *CSDJavaScriptInsertType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CSDJavaScriptInsertType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CSDJavaScriptInsertType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CSDJavaScriptInsertType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CSDJavaScriptInsertTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCSDJavaScriptInsertType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCSDJavaScriptInsertType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*CSDJavaScriptInsertionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := CSDJavaScriptInsertionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*CSDJavaScriptInsertionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*CSDJavaScriptInsertionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCSDJavaScriptInsertType) ExcludeListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for exclude_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ShapeJavaScriptExclusionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ShapeJavaScriptExclusionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for exclude_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ShapeJavaScriptExclusionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ShapeJavaScriptExclusionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated exclude_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items exclude_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCSDJavaScriptInsertType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CSDJavaScriptInsertType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CSDJavaScriptInsertType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["exclude_list"]; exists {
		vOpts := append(opts, db.WithValidateField("exclude_list"))
		if err := fv(ctx, m.GetExcludeList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCSDJavaScriptInsertTypeValidator = func() *ValidateCSDJavaScriptInsertType {
	v := &ValidateCSDJavaScriptInsertType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CSDJavaScriptInsertType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	vrhExcludeList := v.ExcludeListValidationRuleHandler
	rulesExcludeList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhExcludeList(rulesExcludeList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CSDJavaScriptInsertType.exclude_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["exclude_list"] = vFn

	return v
}()

func CSDJavaScriptInsertTypeValidator() db.Validator {
	return DefaultCSDJavaScriptInsertTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CSDJavaScriptInsertionRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CSDJavaScriptInsertionRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CSDJavaScriptInsertionRule) DeepCopy() *CSDJavaScriptInsertionRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CSDJavaScriptInsertionRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CSDJavaScriptInsertionRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CSDJavaScriptInsertionRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CSDJavaScriptInsertionRuleValidator().Validate(ctx, m, opts...)
}

type ValidateCSDJavaScriptInsertionRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCSDJavaScriptInsertionRule) DomainMatcherChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain_matcher_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCSDJavaScriptInsertionRule) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCSDJavaScriptInsertionRule) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for path")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.PathMatcherTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCSDJavaScriptInsertionRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CSDJavaScriptInsertionRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CSDJavaScriptInsertionRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["domain_matcher_choice"]; exists {
		val := m.GetDomainMatcherChoice()
		vOpts := append(opts,
			db.WithValidateField("domain_matcher_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDomainMatcherChoice().(type) {
	case *CSDJavaScriptInsertionRule_AnyDomain:
		if fv, exists := v.FldValidators["domain_matcher_choice.any_domain"]; exists {
			val := m.GetDomainMatcherChoice().(*CSDJavaScriptInsertionRule_AnyDomain).AnyDomain
			vOpts := append(opts,
				db.WithValidateField("domain_matcher_choice"),
				db.WithValidateField("any_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CSDJavaScriptInsertionRule_Domain:
		if fv, exists := v.FldValidators["domain_matcher_choice.domain"]; exists {
			val := m.GetDomainMatcherChoice().(*CSDJavaScriptInsertionRule_Domain).Domain
			vOpts := append(opts,
				db.WithValidateField("domain_matcher_choice"),
				db.WithValidateField("domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCSDJavaScriptInsertionRuleValidator = func() *ValidateCSDJavaScriptInsertionRule {
	v := &ValidateCSDJavaScriptInsertionRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomainMatcherChoice := v.DomainMatcherChoiceValidationRuleHandler
	rulesDomainMatcherChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDomainMatcherChoice(rulesDomainMatcherChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CSDJavaScriptInsertionRule.domain_matcher_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_matcher_choice"] = vFn

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CSDJavaScriptInsertionRule.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CSDJavaScriptInsertionRule.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	v.FldValidators["domain_matcher_choice.domain"] = ves_io_schema.DomainTypeValidator().Validate

	return v
}()

func CSDJavaScriptInsertionRuleValidator() db.Validator {
	return DefaultCSDJavaScriptInsertionRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *ChallengeRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ChallengeRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ChallengeRule) DeepCopy() *ChallengeRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ChallengeRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ChallengeRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ChallengeRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ChallengeRuleValidator().Validate(ctx, m, opts...)
}

func (m *ChallengeRule) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetSpecDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ChallengeRule) GetSpecDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSpec() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSpec().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSpec().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "spec." + dri.DRField
	}
	return drInfos, err

}

type ValidateChallengeRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateChallengeRule) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateChallengeRule) SpecValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for spec")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_service_policy_rule.ChallengeRuleSpecValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateChallengeRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ChallengeRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ChallengeRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["spec"]; exists {

		vOpts := append(opts, db.WithValidateField("spec"))
		if err := fv(ctx, m.GetSpec(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultChallengeRuleValidator = func() *ValidateChallengeRule {
	v := &ValidateChallengeRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ChallengeRule.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhSpec := v.SpecValidationRuleHandler
	rulesSpec := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSpec(rulesSpec)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ChallengeRule.spec: %s", err)
		panic(errMsg)
	}
	v.FldValidators["spec"] = vFn

	return v
}()

func ChallengeRuleValidator() db.Validator {
	return DefaultChallengeRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *ChallengeRuleList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ChallengeRuleList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ChallengeRuleList) DeepCopy() *ChallengeRuleList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ChallengeRuleList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ChallengeRuleList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ChallengeRuleList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ChallengeRuleListValidator().Validate(ctx, m, opts...)
}

func (m *ChallengeRuleList) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRulesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ChallengeRuleList) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateChallengeRuleList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateChallengeRuleList) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ChallengeRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ChallengeRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ChallengeRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ChallengeRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateChallengeRuleList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ChallengeRuleList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ChallengeRuleList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultChallengeRuleListValidator = func() *ValidateChallengeRuleList {
	v := &ValidateChallengeRuleList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ChallengeRuleList.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	return v
}()

func ChallengeRuleListValidator() db.Validator {
	return DefaultChallengeRuleListValidator
}

// augmented methods on protoc/std generated struct

func (m *ClientSideDefensePolicyType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ClientSideDefensePolicyType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ClientSideDefensePolicyType) DeepCopy() *ClientSideDefensePolicyType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ClientSideDefensePolicyType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ClientSideDefensePolicyType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ClientSideDefensePolicyType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ClientSideDefensePolicyTypeValidator().Validate(ctx, m, opts...)
}

type ValidateClientSideDefensePolicyType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateClientSideDefensePolicyType) JavaScriptChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for java_script_choice")
	}
	return validatorFn, nil
}

func (v *ValidateClientSideDefensePolicyType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ClientSideDefensePolicyType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ClientSideDefensePolicyType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["java_script_choice"]; exists {
		val := m.GetJavaScriptChoice()
		vOpts := append(opts,
			db.WithValidateField("java_script_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetJavaScriptChoice().(type) {
	case *ClientSideDefensePolicyType_DisableJsInsert:
		if fv, exists := v.FldValidators["java_script_choice.disable_js_insert"]; exists {
			val := m.GetJavaScriptChoice().(*ClientSideDefensePolicyType_DisableJsInsert).DisableJsInsert
			vOpts := append(opts,
				db.WithValidateField("java_script_choice"),
				db.WithValidateField("disable_js_insert"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ClientSideDefensePolicyType_JsInsertAllPages:
		if fv, exists := v.FldValidators["java_script_choice.js_insert_all_pages"]; exists {
			val := m.GetJavaScriptChoice().(*ClientSideDefensePolicyType_JsInsertAllPages).JsInsertAllPages
			vOpts := append(opts,
				db.WithValidateField("java_script_choice"),
				db.WithValidateField("js_insert_all_pages"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ClientSideDefensePolicyType_JsInsertAllPagesExcept:
		if fv, exists := v.FldValidators["java_script_choice.js_insert_all_pages_except"]; exists {
			val := m.GetJavaScriptChoice().(*ClientSideDefensePolicyType_JsInsertAllPagesExcept).JsInsertAllPagesExcept
			vOpts := append(opts,
				db.WithValidateField("java_script_choice"),
				db.WithValidateField("js_insert_all_pages_except"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ClientSideDefensePolicyType_JsInsertionRules:
		if fv, exists := v.FldValidators["java_script_choice.js_insertion_rules"]; exists {
			val := m.GetJavaScriptChoice().(*ClientSideDefensePolicyType_JsInsertionRules).JsInsertionRules
			vOpts := append(opts,
				db.WithValidateField("java_script_choice"),
				db.WithValidateField("js_insertion_rules"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultClientSideDefensePolicyTypeValidator = func() *ValidateClientSideDefensePolicyType {
	v := &ValidateClientSideDefensePolicyType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhJavaScriptChoice := v.JavaScriptChoiceValidationRuleHandler
	rulesJavaScriptChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhJavaScriptChoice(rulesJavaScriptChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ClientSideDefensePolicyType.java_script_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["java_script_choice"] = vFn

	v.FldValidators["java_script_choice.js_insert_all_pages_except"] = CSDJavaScriptInsertAllWithExceptionsTypeValidator().Validate
	v.FldValidators["java_script_choice.js_insertion_rules"] = CSDJavaScriptInsertTypeValidator().Validate

	return v
}()

func ClientSideDefensePolicyTypeValidator() db.Validator {
	return DefaultClientSideDefensePolicyTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ClientSideDefenseType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ClientSideDefenseType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ClientSideDefenseType) DeepCopy() *ClientSideDefenseType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ClientSideDefenseType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ClientSideDefenseType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ClientSideDefenseType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ClientSideDefenseTypeValidator().Validate(ctx, m, opts...)
}

type ValidateClientSideDefenseType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateClientSideDefenseType) PolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for policy")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ClientSideDefensePolicyTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateClientSideDefenseType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ClientSideDefenseType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ClientSideDefenseType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["policy"]; exists {

		vOpts := append(opts, db.WithValidateField("policy"))
		if err := fv(ctx, m.GetPolicy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultClientSideDefenseTypeValidator = func() *ValidateClientSideDefenseType {
	v := &ValidateClientSideDefenseType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPolicy := v.PolicyValidationRuleHandler
	rulesPolicy := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPolicy(rulesPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ClientSideDefenseType.policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["policy"] = vFn

	return v
}()

func ClientSideDefenseTypeValidator() db.Validator {
	return DefaultClientSideDefenseTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttps().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.https")
	}

	for idx, e := range m.GetRoutes() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting CreateSpecType.routes idx %v", idx)
		}
	}

	if err := m.GetMoreOption().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.more_option")
	}

	if err := m.GetDefaultPool().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.default_pool")
	}

	if err := m.GetJwtValidation().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.jwt_validation")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvertiseChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAdvertiseChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiDefinitionChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDefinitionChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiProtectionRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiProtectionRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetBotDefenseChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetBotDefenseChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetChallengeTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetChallengeTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDefaultRoutePoolsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDefaultRoutePoolsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLoadbalancerTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLoadbalancerTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMaliciousUserMitigationDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMaliciousUserMitigationDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMoreOptionDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMoreOptionDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginPoolChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginServerSubsetRuleListDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginServerSubsetRuleListDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimitChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRateLimitChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRoutesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRoutesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServicePolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetServicePolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetUserIdChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetUserIdChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetWafChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetAdvertiseChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAdvertiseChoice() == nil {
		return nil, nil
	}
	switch m.GetAdvertiseChoice().(type) {
	case *CreateSpecType_AdvertiseOnPublic:
		drInfos, err := m.GetAdvertiseOnPublic().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAdvertiseOnPublic().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "advertise_on_public." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_AdvertiseCustom:
		drInfos, err := m.GetAdvertiseCustom().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAdvertiseCustom().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "advertise_custom." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_DoNotAdvertise:

		return nil, nil

	case *CreateSpecType_AdvertiseOnPublicDefaultVip:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetApiDefinitionChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDefinitionChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDefinitionChoice().(type) {
	case *CreateSpecType_ApiDefinitions:
		drInfos, err := m.GetApiDefinitions().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiDefinitions().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_definitions." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_ApiSpecification:
		drInfos, err := m.GetApiSpecification().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiSpecification().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_specification." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_DisableApiDefinition:

		return nil, nil

	case *CreateSpecType_ApiDefinition:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetApiProtectionRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiProtectionRules() == nil {
		return nil, nil
	}

	drInfos, err := m.GetApiProtectionRules().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetApiProtectionRules().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "api_protection_rules." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetBotDefenseChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetBotDefenseChoice() == nil {
		return nil, nil
	}
	switch m.GetBotDefenseChoice().(type) {
	case *CreateSpecType_DisableBotDefense:

		return nil, nil

	case *CreateSpecType_BotDefense:

		return nil, nil

	case *CreateSpecType_BotDefenseAdvanced:
		drInfos, err := m.GetBotDefenseAdvanced().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetBotDefenseAdvanced().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "bot_defense_advanced." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetChallengeTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetChallengeType() == nil {
		return nil, nil
	}
	switch m.GetChallengeType().(type) {
	case *CreateSpecType_JsChallenge:

		return nil, nil

	case *CreateSpecType_CaptchaChallenge:

		return nil, nil

	case *CreateSpecType_NoChallenge:

		return nil, nil

	case *CreateSpecType_PolicyBasedChallenge:
		drInfos, err := m.GetPolicyBasedChallenge().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPolicyBasedChallenge().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "policy_based_challenge." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_EnableChallenge:
		drInfos, err := m.GetEnableChallenge().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableChallenge().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_challenge." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetDefaultRoutePoolsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDefaultRoutePools() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetDefaultRoutePools() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultRoutePools() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("default_route_pools[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetLoadbalancerTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLoadbalancerType() == nil {
		return nil, nil
	}
	switch m.GetLoadbalancerType().(type) {
	case *CreateSpecType_Http:

		return nil, nil

	case *CreateSpecType_Https:
		drInfos, err := m.GetHttps().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttps().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_HttpsAutoCert:
		drInfos, err := m.GetHttpsAutoCert().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpsAutoCert().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https_auto_cert." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *CreateSpecType) GetMaliciousUserMitigationDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("malicious_user_mitigation.Object")
	dri := db.DRefInfo{
		RefdType:   "malicious_user_mitigation.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "malicious_user_mitigation",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetMaliciousUserMitigationDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetMaliciousUserMitigationDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "malicious_user_mitigation.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: malicious_user_mitigation")
	}

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "malicious_user_mitigation.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetMoreOptionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMoreOption() == nil {
		return nil, nil
	}

	drInfos, err := m.GetMoreOption().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetMoreOption().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "more_option." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetOriginPoolChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginPoolChoice() == nil {
		return nil, nil
	}
	switch m.GetOriginPoolChoice().(type) {
	case *CreateSpecType_DefaultPool:
		drInfos, err := m.GetDefaultPool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultPool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "default_pool." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_DefaultPoolList:
		drInfos, err := m.GetDefaultPoolList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultPoolList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "default_pool_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetOriginServerSubsetRuleListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginServerSubsetRuleList() == nil {
		return nil, nil
	}

	drInfos, err := m.GetOriginServerSubsetRuleList().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetOriginServerSubsetRuleList().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "origin_server_subset_rule_list." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetRateLimitChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRateLimitChoice() == nil {
		return nil, nil
	}
	switch m.GetRateLimitChoice().(type) {
	case *CreateSpecType_DisableRateLimit:

		return nil, nil

	case *CreateSpecType_RateLimit:
		drInfos, err := m.GetRateLimit().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRateLimit().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rate_limit." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_ApiRateLimit:
		drInfos, err := m.GetApiRateLimit().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiRateLimit().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_rate_limit." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetRoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRoutes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRoutes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetServicePolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServicePolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetServicePolicyChoice().(type) {
	case *CreateSpecType_ServicePoliciesFromNamespace:

		return nil, nil

	case *CreateSpecType_NoServicePolicies:

		return nil, nil

	case *CreateSpecType_ActiveServicePolicies:
		drInfos, err := m.GetActiveServicePolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveServicePolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_service_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *CreateSpecType) GetUserIdChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetUserIdChoice().(type) {
	case *CreateSpecType_UserIdentification:

		vref := m.GetUserIdentification()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("user_identification.Object")
		dri := db.DRefInfo{
			RefdType:   "user_identification.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "user_identification",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *CreateSpecType_UserIdClientIp:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetUserIdChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetUserIdChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetUserIdChoice().(type) {
	case *CreateSpecType_UserIdentification:
		refdType, err := d.TypeForEntryKind("", "", "user_identification.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: user_identification")
		}

		vref := m.GetUserIdentification()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "user_identification.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *CreateSpecType_UserIdClientIp:

	}

	return entries, nil
}

func (m *CreateSpecType) GetWafChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetWafChoice().(type) {
	case *CreateSpecType_DisableWaf:

		return nil, nil

	case *CreateSpecType_AppFirewall:

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("app_firewall.Object")
		dri := db.DRefInfo{
			RefdType:   "app_firewall.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "app_firewall",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetWafChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetWafChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetWafChoice().(type) {
	case *CreateSpecType_DisableWaf:

	case *CreateSpecType_AppFirewall:
		refdType, err := d.TypeForEntryKind("", "", "app_firewall.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: app_firewall")
		}

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "app_firewall.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) AdvertiseChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for advertise_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ApiDefinitionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_definition_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ApiDiscoveryChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_discovery_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ChallengeTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_type")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DdosDetectionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ddos_detection_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) L7DdosAutoMitigationActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for l7_ddos_auto_mitigation_action")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) LoadbalancerTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for loadbalancer_type")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) MaliciousUserDetectionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for malicious_user_detection_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) RateLimitChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rate_limit_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ServicePolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) TrustClientIpHeadersChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for trust_client_ip_headers_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) UserIdChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for user_id_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) WafChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for waf_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DefaultRoutePoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for default_route_pools")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_route_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_route_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_route_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RouteType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RouteTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RouteType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RouteType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) WafExclusionRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for waf_exclusion_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleWafExclusionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.SimpleWafExclusionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for waf_exclusion_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleWafExclusionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleWafExclusionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated waf_exclusion_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items waf_exclusion_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) BlockedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for blocked_clients")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for blocked_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated blocked_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items blocked_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) TrustedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for trusted_clients")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for trusted_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated trusted_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items trusted_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DdosMitigationRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ddos_mitigation_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*DDoSMitigationRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := DDoSMitigationRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ddos_mitigation_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DDoSMitigationRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DDoSMitigationRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ddos_mitigation_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ddos_mitigation_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DataGuardRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for data_guard_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleDataGuardRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.SimpleDataGuardRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for data_guard_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleDataGuardRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleDataGuardRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated data_guard_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items data_guard_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) GraphqlRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for graphql_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.GraphQLRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.GraphQLRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for graphql_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.GraphQLRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.GraphQLRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated graphql_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items graphql_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ProtectedCookiesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for protected_cookies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.CookieManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.CookieManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for protected_cookies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.CookieManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.CookieManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated protected_cookies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items protected_cookies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_location"]; exists {

		vOpts := append(opts, db.WithValidateField("add_location"))
		if err := fv(ctx, m.GetAddLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["advertise_choice"]; exists {
		val := m.GetAdvertiseChoice()
		vOpts := append(opts,
			db.WithValidateField("advertise_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdvertiseChoice().(type) {
	case *CreateSpecType_AdvertiseOnPublic:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public"]; exists {
			val := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublic).AdvertiseOnPublic
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AdvertiseCustom:
		if fv, exists := v.FldValidators["advertise_choice.advertise_custom"]; exists {
			val := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseCustom).AdvertiseCustom
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DoNotAdvertise:
		if fv, exists := v.FldValidators["advertise_choice.do_not_advertise"]; exists {
			val := m.GetAdvertiseChoice().(*CreateSpecType_DoNotAdvertise).DoNotAdvertise
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("do_not_advertise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AdvertiseOnPublicDefaultVip:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public_default_vip"]; exists {
			val := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublicDefaultVip).AdvertiseOnPublicDefaultVip
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public_default_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_definition_choice"]; exists {
		val := m.GetApiDefinitionChoice()
		vOpts := append(opts,
			db.WithValidateField("api_definition_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDefinitionChoice().(type) {
	case *CreateSpecType_ApiDefinitions:
		if fv, exists := v.FldValidators["api_definition_choice.api_definitions"]; exists {
			val := m.GetApiDefinitionChoice().(*CreateSpecType_ApiDefinitions).ApiDefinitions
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_definitions"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ApiSpecification:
		if fv, exists := v.FldValidators["api_definition_choice.api_specification"]; exists {
			val := m.GetApiDefinitionChoice().(*CreateSpecType_ApiSpecification).ApiSpecification
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_specification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DisableApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.disable_api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*CreateSpecType_DisableApiDefinition).DisableApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("disable_api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*CreateSpecType_ApiDefinition).ApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_discovery_choice"]; exists {
		val := m.GetApiDiscoveryChoice()
		vOpts := append(opts,
			db.WithValidateField("api_discovery_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDiscoveryChoice().(type) {
	case *CreateSpecType_EnableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.enable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*CreateSpecType_EnableApiDiscovery).EnableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("enable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DisableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.disable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*CreateSpecType_DisableApiDiscovery).DisableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("disable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_protection_rules"]; exists {

		vOpts := append(opts, db.WithValidateField("api_protection_rules"))
		if err := fv(ctx, m.GetApiProtectionRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("blocked_clients"))
		if err := fv(ctx, m.GetBlockedClients(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetBotDefenseChoice().(type) {
	case *CreateSpecType_DisableBotDefense:
		if fv, exists := v.FldValidators["bot_defense_choice.disable_bot_defense"]; exists {
			val := m.GetBotDefenseChoice().(*CreateSpecType_DisableBotDefense).DisableBotDefense
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("disable_bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_BotDefense:
		if fv, exists := v.FldValidators["bot_defense_choice.bot_defense"]; exists {
			val := m.GetBotDefenseChoice().(*CreateSpecType_BotDefense).BotDefense
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_BotDefenseAdvanced:
		if fv, exists := v.FldValidators["bot_defense_choice.bot_defense_advanced"]; exists {
			val := m.GetBotDefenseChoice().(*CreateSpecType_BotDefenseAdvanced).BotDefenseAdvanced
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("bot_defense_advanced"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["challenge_type"]; exists {
		val := m.GetChallengeType()
		vOpts := append(opts,
			db.WithValidateField("challenge_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChallengeType().(type) {
	case *CreateSpecType_JsChallenge:
		if fv, exists := v.FldValidators["challenge_type.js_challenge"]; exists {
			val := m.GetChallengeType().(*CreateSpecType_JsChallenge).JsChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_CaptchaChallenge:
		if fv, exists := v.FldValidators["challenge_type.captcha_challenge"]; exists {
			val := m.GetChallengeType().(*CreateSpecType_CaptchaChallenge).CaptchaChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("captcha_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NoChallenge:
		if fv, exists := v.FldValidators["challenge_type.no_challenge"]; exists {
			val := m.GetChallengeType().(*CreateSpecType_NoChallenge).NoChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("no_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_PolicyBasedChallenge:
		if fv, exists := v.FldValidators["challenge_type.policy_based_challenge"]; exists {
			val := m.GetChallengeType().(*CreateSpecType_PolicyBasedChallenge).PolicyBasedChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("policy_based_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EnableChallenge:
		if fv, exists := v.FldValidators["challenge_type.enable_challenge"]; exists {
			val := m.GetChallengeType().(*CreateSpecType_EnableChallenge).EnableChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("enable_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetClientSideDefenseChoice().(type) {
	case *CreateSpecType_DisableClientSideDefense:
		if fv, exists := v.FldValidators["client_side_defense_choice.disable_client_side_defense"]; exists {
			val := m.GetClientSideDefenseChoice().(*CreateSpecType_DisableClientSideDefense).DisableClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("client_side_defense_choice"),
				db.WithValidateField("disable_client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ClientSideDefense:
		if fv, exists := v.FldValidators["client_side_defense_choice.client_side_defense"]; exists {
			val := m.GetClientSideDefenseChoice().(*CreateSpecType_ClientSideDefense).ClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("client_side_defense_choice"),
				db.WithValidateField("client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cors_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("cors_policy"))
		if err := fv(ctx, m.GetCorsPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["csrf_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("csrf_policy"))
		if err := fv(ctx, m.GetCsrfPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["data_guard_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("data_guard_rules"))
		if err := fv(ctx, m.GetDataGuardRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ddos_detection_choice"]; exists {
		val := m.GetDdosDetectionChoice()
		vOpts := append(opts,
			db.WithValidateField("ddos_detection_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDdosDetectionChoice().(type) {
	case *CreateSpecType_EnableDdosDetection:
		if fv, exists := v.FldValidators["ddos_detection_choice.enable_ddos_detection"]; exists {
			val := m.GetDdosDetectionChoice().(*CreateSpecType_EnableDdosDetection).EnableDdosDetection
			vOpts := append(opts,
				db.WithValidateField("ddos_detection_choice"),
				db.WithValidateField("enable_ddos_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DisableDdosDetection:
		if fv, exists := v.FldValidators["ddos_detection_choice.disable_ddos_detection"]; exists {
			val := m.GetDdosDetectionChoice().(*CreateSpecType_DisableDdosDetection).DisableDdosDetection
			vOpts := append(opts,
				db.WithValidateField("ddos_detection_choice"),
				db.WithValidateField("disable_ddos_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ddos_mitigation_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("ddos_mitigation_rules"))
		if err := fv(ctx, m.GetDdosMitigationRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_route_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("default_route_pools"))
		if err := fv(ctx, m.GetDefaultRoutePools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["graphql_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("graphql_rules"))
		if err := fv(ctx, m.GetGraphqlRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *CreateSpecType_RoundRobin:
		if fv, exists := v.FldValidators["hash_policy_choice.round_robin"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_RoundRobin).RoundRobin
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("round_robin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_LeastActive:
		if fv, exists := v.FldValidators["hash_policy_choice.least_active"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_LeastActive).LeastActive
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("least_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Random:
		if fv, exists := v.FldValidators["hash_policy_choice.random"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_Random).Random
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("random"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SourceIpStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.source_ip_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_SourceIpStickiness).SourceIpStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("source_ip_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_CookieStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.cookie_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_CookieStickiness).CookieStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("cookie_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_RingHash:
		if fv, exists := v.FldValidators["hash_policy_choice.ring_hash"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_RingHash).RingHash
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("ring_hash"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetIpReputationChoice().(type) {
	case *CreateSpecType_DisableIpReputation:
		if fv, exists := v.FldValidators["ip_reputation_choice.disable_ip_reputation"]; exists {
			val := m.GetIpReputationChoice().(*CreateSpecType_DisableIpReputation).DisableIpReputation
			vOpts := append(opts,
				db.WithValidateField("ip_reputation_choice"),
				db.WithValidateField("disable_ip_reputation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EnableIpReputation:
		if fv, exists := v.FldValidators["ip_reputation_choice.enable_ip_reputation"]; exists {
			val := m.GetIpReputationChoice().(*CreateSpecType_EnableIpReputation).EnableIpReputation
			vOpts := append(opts,
				db.WithValidateField("ip_reputation_choice"),
				db.WithValidateField("enable_ip_reputation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["jwt_validation"]; exists {

		vOpts := append(opts, db.WithValidateField("jwt_validation"))
		if err := fv(ctx, m.GetJwtValidation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action"]; exists {
		val := m.GetL7DdosAutoMitigationAction()
		vOpts := append(opts,
			db.WithValidateField("l7_ddos_auto_mitigation_action"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetL7DdosAutoMitigationAction().(type) {
	case *CreateSpecType_L7DdosActionDefault:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_default"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*CreateSpecType_L7DdosActionDefault).L7DdosActionDefault
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_L7DdosActionBlock:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_block"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*CreateSpecType_L7DdosActionBlock).L7DdosActionBlock
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_block"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_L7DdosActionJsChallenge:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_js_challenge"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*CreateSpecType_L7DdosActionJsChallenge).L7DdosActionJsChallenge
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_L7DdosActionNone:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_none"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*CreateSpecType_L7DdosActionNone).L7DdosActionNone
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["loadbalancer_type"]; exists {
		val := m.GetLoadbalancerType()
		vOpts := append(opts,
			db.WithValidateField("loadbalancer_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLoadbalancerType().(type) {
	case *CreateSpecType_Http:
		if fv, exists := v.FldValidators["loadbalancer_type.http"]; exists {
			val := m.GetLoadbalancerType().(*CreateSpecType_Http).Http
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("http"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_Https:
		if fv, exists := v.FldValidators["loadbalancer_type.https"]; exists {
			val := m.GetLoadbalancerType().(*CreateSpecType_Https).Https
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_HttpsAutoCert:
		if fv, exists := v.FldValidators["loadbalancer_type.https_auto_cert"]; exists {
			val := m.GetLoadbalancerType().(*CreateSpecType_HttpsAutoCert).HttpsAutoCert
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https_auto_cert"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_detection_choice"]; exists {
		val := m.GetMaliciousUserDetectionChoice()
		vOpts := append(opts,
			db.WithValidateField("malicious_user_detection_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMaliciousUserDetectionChoice().(type) {
	case *CreateSpecType_EnableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.enable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*CreateSpecType_EnableMaliciousUserDetection).EnableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("enable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DisableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.disable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*CreateSpecType_DisableMaliciousUserDetection).DisableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("disable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_mitigation"]; exists {

		vOpts := append(opts, db.WithValidateField("malicious_user_mitigation"))
		if err := fv(ctx, m.GetMaliciousUserMitigation(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetMlConfigChoice().(type) {
	case *CreateSpecType_SingleLbApp:
		if fv, exists := v.FldValidators["ml_config_choice.single_lb_app"]; exists {
			val := m.GetMlConfigChoice().(*CreateSpecType_SingleLbApp).SingleLbApp
			vOpts := append(opts,
				db.WithValidateField("ml_config_choice"),
				db.WithValidateField("single_lb_app"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_MultiLbApp:
		if fv, exists := v.FldValidators["ml_config_choice.multi_lb_app"]; exists {
			val := m.GetMlConfigChoice().(*CreateSpecType_MultiLbApp).MultiLbApp
			vOpts := append(opts,
				db.WithValidateField("ml_config_choice"),
				db.WithValidateField("multi_lb_app"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["more_option"]; exists {

		vOpts := append(opts, db.WithValidateField("more_option"))
		if err := fv(ctx, m.GetMoreOption(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetOriginPoolChoice().(type) {
	case *CreateSpecType_DefaultPool:
		if fv, exists := v.FldValidators["origin_pool_choice.default_pool"]; exists {
			val := m.GetOriginPoolChoice().(*CreateSpecType_DefaultPool).DefaultPool
			vOpts := append(opts,
				db.WithValidateField("origin_pool_choice"),
				db.WithValidateField("default_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DefaultPoolList:
		if fv, exists := v.FldValidators["origin_pool_choice.default_pool_list"]; exists {
			val := m.GetOriginPoolChoice().(*CreateSpecType_DefaultPoolList).DefaultPoolList
			vOpts := append(opts,
				db.WithValidateField("origin_pool_choice"),
				db.WithValidateField("default_pool_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["origin_server_subset_rule_list"]; exists {

		vOpts := append(opts, db.WithValidateField("origin_server_subset_rule_list"))
		if err := fv(ctx, m.GetOriginServerSubsetRuleList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protected_cookies"]; exists {
		vOpts := append(opts, db.WithValidateField("protected_cookies"))
		if err := fv(ctx, m.GetProtectedCookies(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limit_choice"]; exists {
		val := m.GetRateLimitChoice()
		vOpts := append(opts,
			db.WithValidateField("rate_limit_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRateLimitChoice().(type) {
	case *CreateSpecType_DisableRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.disable_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*CreateSpecType_DisableRateLimit).DisableRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("disable_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_RateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*CreateSpecType_RateLimit).RateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ApiRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.api_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*CreateSpecType_ApiRateLimit).ApiRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("api_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["routes"]; exists {
		vOpts := append(opts, db.WithValidateField("routes"))
		if err := fv(ctx, m.GetRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service_policy_choice"]; exists {
		val := m.GetServicePolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("service_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServicePolicyChoice().(type) {
	case *CreateSpecType_ServicePoliciesFromNamespace:
		if fv, exists := v.FldValidators["service_policy_choice.service_policies_from_namespace"]; exists {
			val := m.GetServicePolicyChoice().(*CreateSpecType_ServicePoliciesFromNamespace).ServicePoliciesFromNamespace
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("service_policies_from_namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NoServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.no_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*CreateSpecType_NoServicePolicies).NoServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("no_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ActiveServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.active_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*CreateSpecType_ActiveServicePolicies).ActiveServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("active_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetSlowDdosMitigationChoice().(type) {
	case *CreateSpecType_SlowDdosMitigation:
		if fv, exists := v.FldValidators["slow_ddos_mitigation_choice.slow_ddos_mitigation"]; exists {
			val := m.GetSlowDdosMitigationChoice().(*CreateSpecType_SlowDdosMitigation).SlowDdosMitigation
			vOpts := append(opts,
				db.WithValidateField("slow_ddos_mitigation_choice"),
				db.WithValidateField("slow_ddos_mitigation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_SystemDefaultTimeouts:
		if fv, exists := v.FldValidators["slow_ddos_mitigation_choice.system_default_timeouts"]; exists {
			val := m.GetSlowDdosMitigationChoice().(*CreateSpecType_SystemDefaultTimeouts).SystemDefaultTimeouts
			vOpts := append(opts,
				db.WithValidateField("slow_ddos_mitigation_choice"),
				db.WithValidateField("system_default_timeouts"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["trust_client_ip_headers_choice"]; exists {
		val := m.GetTrustClientIpHeadersChoice()
		vOpts := append(opts,
			db.WithValidateField("trust_client_ip_headers_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTrustClientIpHeadersChoice().(type) {
	case *CreateSpecType_DisableTrustClientIpHeaders:
		if fv, exists := v.FldValidators["trust_client_ip_headers_choice.disable_trust_client_ip_headers"]; exists {
			val := m.GetTrustClientIpHeadersChoice().(*CreateSpecType_DisableTrustClientIpHeaders).DisableTrustClientIpHeaders
			vOpts := append(opts,
				db.WithValidateField("trust_client_ip_headers_choice"),
				db.WithValidateField("disable_trust_client_ip_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_EnableTrustClientIpHeaders:
		if fv, exists := v.FldValidators["trust_client_ip_headers_choice.enable_trust_client_ip_headers"]; exists {
			val := m.GetTrustClientIpHeadersChoice().(*CreateSpecType_EnableTrustClientIpHeaders).EnableTrustClientIpHeaders
			vOpts := append(opts,
				db.WithValidateField("trust_client_ip_headers_choice"),
				db.WithValidateField("enable_trust_client_ip_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["trusted_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("trusted_clients"))
		if err := fv(ctx, m.GetTrustedClients(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_id_choice"]; exists {
		val := m.GetUserIdChoice()
		vOpts := append(opts,
			db.WithValidateField("user_id_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetUserIdChoice().(type) {
	case *CreateSpecType_UserIdentification:
		if fv, exists := v.FldValidators["user_id_choice.user_identification"]; exists {
			val := m.GetUserIdChoice().(*CreateSpecType_UserIdentification).UserIdentification
			vOpts := append(opts,
				db.WithValidateField("user_id_choice"),
				db.WithValidateField("user_identification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_UserIdClientIp:
		if fv, exists := v.FldValidators["user_id_choice.user_id_client_ip"]; exists {
			val := m.GetUserIdChoice().(*CreateSpecType_UserIdClientIp).UserIdClientIp
			vOpts := append(opts,
				db.WithValidateField("user_id_choice"),
				db.WithValidateField("user_id_client_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_choice"]; exists {
		val := m.GetWafChoice()
		vOpts := append(opts,
			db.WithValidateField("waf_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWafChoice().(type) {
	case *CreateSpecType_DisableWaf:
		if fv, exists := v.FldValidators["waf_choice.disable_waf"]; exists {
			val := m.GetWafChoice().(*CreateSpecType_DisableWaf).DisableWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("disable_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AppFirewall:
		if fv, exists := v.FldValidators["waf_choice.app_firewall"]; exists {
			val := m.GetWafChoice().(*CreateSpecType_AppFirewall).AppFirewall
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("app_firewall"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_exclusion_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("waf_exclusion_rules"))
		if err := fv(ctx, m.GetWafExclusionRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdvertiseChoice := v.AdvertiseChoiceValidationRuleHandler
	rulesAdvertiseChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdvertiseChoice(rulesAdvertiseChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.advertise_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["advertise_choice"] = vFn

	vrhApiDefinitionChoice := v.ApiDefinitionChoiceValidationRuleHandler
	rulesApiDefinitionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDefinitionChoice(rulesApiDefinitionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.api_definition_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_definition_choice"] = vFn

	vrhApiDiscoveryChoice := v.ApiDiscoveryChoiceValidationRuleHandler
	rulesApiDiscoveryChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDiscoveryChoice(rulesApiDiscoveryChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.api_discovery_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_discovery_choice"] = vFn

	vrhChallengeType := v.ChallengeTypeValidationRuleHandler
	rulesChallengeType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChallengeType(rulesChallengeType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.challenge_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_type"] = vFn

	vrhDdosDetectionChoice := v.DdosDetectionChoiceValidationRuleHandler
	rulesDdosDetectionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDdosDetectionChoice(rulesDdosDetectionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.ddos_detection_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ddos_detection_choice"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhL7DdosAutoMitigationAction := v.L7DdosAutoMitigationActionValidationRuleHandler
	rulesL7DdosAutoMitigationAction := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhL7DdosAutoMitigationAction(rulesL7DdosAutoMitigationAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.l7_ddos_auto_mitigation_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["l7_ddos_auto_mitigation_action"] = vFn

	vrhLoadbalancerType := v.LoadbalancerTypeValidationRuleHandler
	rulesLoadbalancerType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLoadbalancerType(rulesLoadbalancerType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.loadbalancer_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_type"] = vFn

	vrhMaliciousUserDetectionChoice := v.MaliciousUserDetectionChoiceValidationRuleHandler
	rulesMaliciousUserDetectionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMaliciousUserDetectionChoice(rulesMaliciousUserDetectionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.malicious_user_detection_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["malicious_user_detection_choice"] = vFn

	vrhRateLimitChoice := v.RateLimitChoiceValidationRuleHandler
	rulesRateLimitChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRateLimitChoice(rulesRateLimitChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.rate_limit_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limit_choice"] = vFn

	vrhServicePolicyChoice := v.ServicePolicyChoiceValidationRuleHandler
	rulesServicePolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServicePolicyChoice(rulesServicePolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.service_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_policy_choice"] = vFn

	vrhTrustClientIpHeadersChoice := v.TrustClientIpHeadersChoiceValidationRuleHandler
	rulesTrustClientIpHeadersChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTrustClientIpHeadersChoice(rulesTrustClientIpHeadersChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.trust_client_ip_headers_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trust_client_ip_headers_choice"] = vFn

	vrhUserIdChoice := v.UserIdChoiceValidationRuleHandler
	rulesUserIdChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhUserIdChoice(rulesUserIdChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.user_id_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user_id_choice"] = vFn

	vrhWafChoice := v.WafChoiceValidationRuleHandler
	rulesWafChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWafChoice(rulesWafChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.waf_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhDefaultRoutePools := v.DefaultRoutePoolsValidationRuleHandler
	rulesDefaultRoutePools := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDefaultRoutePools(rulesDefaultRoutePools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.default_route_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_route_pools"] = vFn

	vrhRoutes := v.RoutesValidationRuleHandler
	rulesRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRoutes(rulesRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routes"] = vFn

	vrhWafExclusionRules := v.WafExclusionRulesValidationRuleHandler
	rulesWafExclusionRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhWafExclusionRules(rulesWafExclusionRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.waf_exclusion_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_exclusion_rules"] = vFn

	vrhBlockedClients := v.BlockedClientsValidationRuleHandler
	rulesBlockedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhBlockedClients(rulesBlockedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.blocked_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_clients"] = vFn

	vrhTrustedClients := v.TrustedClientsValidationRuleHandler
	rulesTrustedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhTrustedClients(rulesTrustedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.trusted_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trusted_clients"] = vFn

	vrhDdosMitigationRules := v.DdosMitigationRulesValidationRuleHandler
	rulesDdosMitigationRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDdosMitigationRules(rulesDdosMitigationRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.ddos_mitigation_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ddos_mitigation_rules"] = vFn

	vrhDataGuardRules := v.DataGuardRulesValidationRuleHandler
	rulesDataGuardRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDataGuardRules(rulesDataGuardRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.data_guard_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["data_guard_rules"] = vFn

	vrhGraphqlRules := v.GraphqlRulesValidationRuleHandler
	rulesGraphqlRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhGraphqlRules(rulesGraphqlRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.graphql_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["graphql_rules"] = vFn

	vrhProtectedCookies := v.ProtectedCookiesValidationRuleHandler
	rulesProtectedCookies := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhProtectedCookies(rulesProtectedCookies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.protected_cookies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protected_cookies"] = vFn

	v.FldValidators["advertise_choice.advertise_on_public"] = ves_io_schema_views.AdvertisePublicValidator().Validate
	v.FldValidators["advertise_choice.advertise_custom"] = ves_io_schema_views.AdvertiseCustomValidator().Validate

	v.FldValidators["api_definition_choice.api_definitions"] = ApiDefinitionListValidator().Validate
	v.FldValidators["api_definition_choice.api_specification"] = APISpecificationSettingsValidator().Validate
	v.FldValidators["api_definition_choice.api_definition"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_discovery_choice.enable_api_discovery"] = ApiDiscoverySettingValidator().Validate

	v.FldValidators["bot_defense_choice.bot_defense"] = ShapeBotDefenseTypeValidator().Validate
	v.FldValidators["bot_defense_choice.bot_defense_advanced"] = BotDefenseAdvancedTypeValidator().Validate

	v.FldValidators["challenge_type.js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.captcha_challenge"] = ves_io_schema_virtual_host.CaptchaChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.policy_based_challenge"] = PolicyBasedChallengeValidator().Validate
	v.FldValidators["challenge_type.enable_challenge"] = EnableChallengeValidator().Validate

	v.FldValidators["client_side_defense_choice.client_side_defense"] = ClientSideDefenseTypeValidator().Validate

	v.FldValidators["ddos_detection_choice.enable_ddos_detection"] = EnableDDoSDetectionSettingValidator().Validate

	v.FldValidators["hash_policy_choice.cookie_stickiness"] = ves_io_schema_route.CookieForHashingValidator().Validate
	v.FldValidators["hash_policy_choice.ring_hash"] = HashPolicyListTypeValidator().Validate

	v.FldValidators["ip_reputation_choice.enable_ip_reputation"] = IPThreatCategoryListTypeValidator().Validate

	v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate

	v.FldValidators["loadbalancer_type.http"] = ProxyTypeHttpValidator().Validate
	v.FldValidators["loadbalancer_type.https"] = ProxyTypeHttpsValidator().Validate
	v.FldValidators["loadbalancer_type.https_auto_cert"] = ProxyTypeHttpsAutoCertsValidator().Validate

	v.FldValidators["ml_config_choice.single_lb_app"] = SingleLoadBalancerAppSettingValidator().Validate

	v.FldValidators["origin_pool_choice.default_pool"] = ves_io_schema_views_origin_pool.GlobalSpecTypeValidator().Validate
	v.FldValidators["origin_pool_choice.default_pool_list"] = ves_io_schema_views.OriginPoolListTypeValidator().Validate

	v.FldValidators["rate_limit_choice.rate_limit"] = RateLimitConfigTypeValidator().Validate
	v.FldValidators["rate_limit_choice.api_rate_limit"] = APIRateLimitValidator().Validate

	v.FldValidators["service_policy_choice.active_service_policies"] = ServicePolicyListValidator().Validate

	v.FldValidators["slow_ddos_mitigation_choice.slow_ddos_mitigation"] = ves_io_schema_virtual_host.SlowDDoSMitigationValidator().Validate

	v.FldValidators["trust_client_ip_headers_choice.enable_trust_client_ip_headers"] = ves_io_schema_virtual_host.ClientIPHeadersValidator().Validate

	v.FldValidators["user_id_choice.user_identification"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["waf_choice.app_firewall"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cors_policy"] = ves_io_schema.CorsPolicyValidator().Validate

	v.FldValidators["more_option"] = AdvancedOptionsTypeValidator().Validate

	v.FldValidators["malicious_user_mitigation"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_protection_rules"] = APIProtectionRulesValidator().Validate

	v.FldValidators["csrf_policy"] = ves_io_schema.CsrfPolicyValidator().Validate

	v.FldValidators["jwt_validation"] = JWTValidationValidator().Validate

	v.FldValidators["origin_server_subset_rule_list"] = OriginServerSubsetRuleListTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CustomFallThroughMode) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CustomFallThroughMode) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CustomFallThroughMode) DeepCopy() *CustomFallThroughMode {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CustomFallThroughMode{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CustomFallThroughMode) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CustomFallThroughMode) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CustomFallThroughModeValidator().Validate(ctx, m, opts...)
}

type ValidateCustomFallThroughMode struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCustomFallThroughMode) OpenApiValidationRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for open_api_validation_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*FallThroughRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := FallThroughRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for open_api_validation_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*FallThroughRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*FallThroughRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated open_api_validation_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items open_api_validation_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCustomFallThroughMode) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CustomFallThroughMode)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CustomFallThroughMode got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["open_api_validation_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("open_api_validation_rules"))
		if err := fv(ctx, m.GetOpenApiValidationRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCustomFallThroughModeValidator = func() *ValidateCustomFallThroughMode {
	v := &ValidateCustomFallThroughMode{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhOpenApiValidationRules := v.OpenApiValidationRulesValidationRuleHandler
	rulesOpenApiValidationRules := map[string]string{
		"ves.io.schema.rules.message.required":              "true",
		"ves.io.schema.rules.repeated.max_items":            "15",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhOpenApiValidationRules(rulesOpenApiValidationRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CustomFallThroughMode.open_api_validation_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["open_api_validation_rules"] = vFn

	return v
}()

func CustomFallThroughModeValidator() db.Validator {
	return DefaultCustomFallThroughModeValidator
}

// augmented methods on protoc/std generated struct

func (m *CustomIpAllowedList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CustomIpAllowedList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CustomIpAllowedList) DeepCopy() *CustomIpAllowedList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CustomIpAllowedList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CustomIpAllowedList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CustomIpAllowedList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CustomIpAllowedListValidator().Validate(ctx, m, opts...)
}

func (m *CustomIpAllowedList) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRateLimiterAllowedPrefixesDRefInfo()

}

func (m *CustomIpAllowedList) GetRateLimiterAllowedPrefixesDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetRateLimiterAllowedPrefixes()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("CustomIpAllowedList.rate_limiter_allowed_prefixes[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("ip_prefix_set.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "ip_prefix_set.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "rate_limiter_allowed_prefixes",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetRateLimiterAllowedPrefixesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CustomIpAllowedList) GetRateLimiterAllowedPrefixesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "ip_prefix_set.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: ip_prefix_set")
	}
	for i, vref := range m.GetRateLimiterAllowedPrefixes() {
		if vref == nil {
			return nil, fmt.Errorf("CustomIpAllowedList.rate_limiter_allowed_prefixes[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "ip_prefix_set.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateCustomIpAllowedList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCustomIpAllowedList) RateLimiterAllowedPrefixesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rate_limiter_allowed_prefixes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rate_limiter_allowed_prefixes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rate_limiter_allowed_prefixes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rate_limiter_allowed_prefixes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCustomIpAllowedList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CustomIpAllowedList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CustomIpAllowedList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["rate_limiter_allowed_prefixes"]; exists {
		vOpts := append(opts, db.WithValidateField("rate_limiter_allowed_prefixes"))
		if err := fv(ctx, m.GetRateLimiterAllowedPrefixes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCustomIpAllowedListValidator = func() *ValidateCustomIpAllowedList {
	v := &ValidateCustomIpAllowedList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRateLimiterAllowedPrefixes := v.RateLimiterAllowedPrefixesValidationRuleHandler
	rulesRateLimiterAllowedPrefixes := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "4",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhRateLimiterAllowedPrefixes(rulesRateLimiterAllowedPrefixes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CustomIpAllowedList.rate_limiter_allowed_prefixes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limiter_allowed_prefixes"] = vFn

	return v
}()

func CustomIpAllowedListValidator() db.Validator {
	return DefaultCustomIpAllowedListValidator
}

// augmented methods on protoc/std generated struct

func (m *DDoSClientSource) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DDoSClientSource) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DDoSClientSource) DeepCopy() *DDoSClientSource {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DDoSClientSource{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DDoSClientSource) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DDoSClientSource) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DDoSClientSourceValidator().Validate(ctx, m, opts...)
}

type ValidateDDoSClientSource struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDDoSClientSource) CountryListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.CountryCode)
		return int32(i)
	}
	// ves_io_schema_policy.CountryCode_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_policy.CountryCode_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for country_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_policy.CountryCode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for country_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_policy.CountryCode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_policy.CountryCode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated country_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items country_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDDoSClientSource) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DDoSClientSource)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DDoSClientSource got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["asn_list"]; exists {

		vOpts := append(opts, db.WithValidateField("asn_list"))
		if err := fv(ctx, m.GetAsnList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["country_list"]; exists {
		vOpts := append(opts, db.WithValidateField("country_list"))
		if err := fv(ctx, m.GetCountryList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_fingerprint_matcher"]; exists {

		vOpts := append(opts, db.WithValidateField("tls_fingerprint_matcher"))
		if err := fv(ctx, m.GetTlsFingerprintMatcher(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDDoSClientSourceValidator = func() *ValidateDDoSClientSource {
	v := &ValidateDDoSClientSource{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCountryList := v.CountryListValidationRuleHandler
	rulesCountryList := map[string]string{
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.items.enum.not_in":       "[0]",
		"ves.io.schema.rules.repeated.max_items":               "64",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhCountryList(rulesCountryList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DDoSClientSource.country_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["country_list"] = vFn

	v.FldValidators["asn_list"] = ves_io_schema_policy.AsnMatchListValidator().Validate

	v.FldValidators["tls_fingerprint_matcher"] = ves_io_schema_policy.TlsFingerprintMatcherTypeValidator().Validate

	return v
}()

func DDoSClientSourceValidator() db.Validator {
	return DefaultDDoSClientSourceValidator
}

// augmented methods on protoc/std generated struct

func (m *DDoSMitigationRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DDoSMitigationRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DDoSMitigationRule) DeepCopy() *DDoSMitigationRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DDoSMitigationRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DDoSMitigationRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DDoSMitigationRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DDoSMitigationRuleValidator().Validate(ctx, m, opts...)
}

type ValidateDDoSMitigationRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDDoSMitigationRule) MitigationActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mitigation_action")
	}
	return validatorFn, nil
}

func (v *ValidateDDoSMitigationRule) MitigationChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mitigation_choice")
	}
	return validatorFn, nil
}

func (v *ValidateDDoSMitigationRule) MitigationChoiceDdosClientSourceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return DDoSClientSourceValidator().Validate, nil
}

func (v *ValidateDDoSMitigationRule) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDDoSMitigationRule) ExpirationTimestampValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var (
		reqdValidatorFn db.ValidatorFunc
		err             error
	)

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if reqdValidatorFn != nil {
			if err = reqdValidatorFn(ctx, val, opts...); err != nil {
				return err
			}
		}
		// TODO: lookup configured third-party type validators
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDDoSMitigationRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DDoSMitigationRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DDoSMitigationRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["expiration_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("expiration_timestamp"))
		if err := fv(ctx, m.GetExpirationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mitigation_action"]; exists {
		val := m.GetMitigationAction()
		vOpts := append(opts,
			db.WithValidateField("mitigation_action"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMitigationAction().(type) {
	case *DDoSMitigationRule_Block:
		if fv, exists := v.FldValidators["mitigation_action.block"]; exists {
			val := m.GetMitigationAction().(*DDoSMitigationRule_Block).Block
			vOpts := append(opts,
				db.WithValidateField("mitigation_action"),
				db.WithValidateField("block"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["mitigation_choice"]; exists {
		val := m.GetMitigationChoice()
		vOpts := append(opts,
			db.WithValidateField("mitigation_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMitigationChoice().(type) {
	case *DDoSMitigationRule_DdosClientSource:
		if fv, exists := v.FldValidators["mitigation_choice.ddos_client_source"]; exists {
			val := m.GetMitigationChoice().(*DDoSMitigationRule_DdosClientSource).DdosClientSource
			vOpts := append(opts,
				db.WithValidateField("mitigation_choice"),
				db.WithValidateField("ddos_client_source"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *DDoSMitigationRule_IpPrefixList:
		if fv, exists := v.FldValidators["mitigation_choice.ip_prefix_list"]; exists {
			val := m.GetMitigationChoice().(*DDoSMitigationRule_IpPrefixList).IpPrefixList
			vOpts := append(opts,
				db.WithValidateField("mitigation_choice"),
				db.WithValidateField("ip_prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDDoSMitigationRuleValidator = func() *ValidateDDoSMitigationRule {
	v := &ValidateDDoSMitigationRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMitigationAction := v.MitigationActionValidationRuleHandler
	rulesMitigationAction := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMitigationAction(rulesMitigationAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DDoSMitigationRule.mitigation_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mitigation_action"] = vFn

	vrhMitigationChoice := v.MitigationChoiceValidationRuleHandler
	rulesMitigationChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMitigationChoice(rulesMitigationChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DDoSMitigationRule.mitigation_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mitigation_choice"] = vFn

	vrhMitigationChoiceDdosClientSource := v.MitigationChoiceDdosClientSourceValidationRuleHandler
	rulesMitigationChoiceDdosClientSource := map[string]string{
		"ves.io.schema.rules.message.required_one_nonzero_field": "true",
	}
	vFnMap["mitigation_choice.ddos_client_source"], err = vrhMitigationChoiceDdosClientSource(rulesMitigationChoiceDdosClientSource)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field DDoSMitigationRule.mitigation_choice_ddos_client_source: %s", err)
		panic(errMsg)
	}

	v.FldValidators["mitigation_choice.ddos_client_source"] = vFnMap["mitigation_choice.ddos_client_source"]

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DDoSMitigationRule.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhExpirationTimestamp := v.ExpirationTimestampValidationRuleHandler
	rulesExpirationTimestamp := map[string]string{
		"ves.io.schema.rules.timestamp.within.seconds": "31536000",
	}
	vFn, err = vrhExpirationTimestamp(rulesExpirationTimestamp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DDoSMitigationRule.expiration_timestamp: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expiration_timestamp"] = vFn

	v.FldValidators["mitigation_choice.ip_prefix_list"] = ves_io_schema_policy.PrefixMatchListValidator().Validate

	return v
}()

func DDoSMitigationRuleValidator() db.Validator {
	return DefaultDDoSMitigationRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *EnableChallenge) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EnableChallenge) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EnableChallenge) DeepCopy() *EnableChallenge {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EnableChallenge{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EnableChallenge) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EnableChallenge) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EnableChallengeValidator().Validate(ctx, m, opts...)
}

func (m *EnableChallenge) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetMaliciousUserMitigationChoiceDRefInfo()

}

func (m *EnableChallenge) GetMaliciousUserMitigationChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetMaliciousUserMitigationChoice().(type) {
	case *EnableChallenge_DefaultMitigationSettings:

		return nil, nil

	case *EnableChallenge_MaliciousUserMitigation:

		vref := m.GetMaliciousUserMitigation()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("malicious_user_mitigation.Object")
		dri := db.DRefInfo{
			RefdType:   "malicious_user_mitigation.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "malicious_user_mitigation",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetMaliciousUserMitigationChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *EnableChallenge) GetMaliciousUserMitigationChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetMaliciousUserMitigationChoice().(type) {
	case *EnableChallenge_DefaultMitigationSettings:

	case *EnableChallenge_MaliciousUserMitigation:
		refdType, err := d.TypeForEntryKind("", "", "malicious_user_mitigation.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: malicious_user_mitigation")
		}

		vref := m.GetMaliciousUserMitigation()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "malicious_user_mitigation.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateEnableChallenge struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEnableChallenge) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EnableChallenge)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EnableChallenge got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetCaptchaChallengeParametersChoice().(type) {
	case *EnableChallenge_DefaultCaptchaChallengeParameters:
		if fv, exists := v.FldValidators["captcha_challenge_parameters_choice.default_captcha_challenge_parameters"]; exists {
			val := m.GetCaptchaChallengeParametersChoice().(*EnableChallenge_DefaultCaptchaChallengeParameters).DefaultCaptchaChallengeParameters
			vOpts := append(opts,
				db.WithValidateField("captcha_challenge_parameters_choice"),
				db.WithValidateField("default_captcha_challenge_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnableChallenge_CaptchaChallengeParameters:
		if fv, exists := v.FldValidators["captcha_challenge_parameters_choice.captcha_challenge_parameters"]; exists {
			val := m.GetCaptchaChallengeParametersChoice().(*EnableChallenge_CaptchaChallengeParameters).CaptchaChallengeParameters
			vOpts := append(opts,
				db.WithValidateField("captcha_challenge_parameters_choice"),
				db.WithValidateField("captcha_challenge_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetJsChallengeParametersChoice().(type) {
	case *EnableChallenge_DefaultJsChallengeParameters:
		if fv, exists := v.FldValidators["js_challenge_parameters_choice.default_js_challenge_parameters"]; exists {
			val := m.GetJsChallengeParametersChoice().(*EnableChallenge_DefaultJsChallengeParameters).DefaultJsChallengeParameters
			vOpts := append(opts,
				db.WithValidateField("js_challenge_parameters_choice"),
				db.WithValidateField("default_js_challenge_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnableChallenge_JsChallengeParameters:
		if fv, exists := v.FldValidators["js_challenge_parameters_choice.js_challenge_parameters"]; exists {
			val := m.GetJsChallengeParametersChoice().(*EnableChallenge_JsChallengeParameters).JsChallengeParameters
			vOpts := append(opts,
				db.WithValidateField("js_challenge_parameters_choice"),
				db.WithValidateField("js_challenge_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetMaliciousUserMitigationChoice().(type) {
	case *EnableChallenge_DefaultMitigationSettings:
		if fv, exists := v.FldValidators["malicious_user_mitigation_choice.default_mitigation_settings"]; exists {
			val := m.GetMaliciousUserMitigationChoice().(*EnableChallenge_DefaultMitigationSettings).DefaultMitigationSettings
			vOpts := append(opts,
				db.WithValidateField("malicious_user_mitigation_choice"),
				db.WithValidateField("default_mitigation_settings"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnableChallenge_MaliciousUserMitigation:
		if fv, exists := v.FldValidators["malicious_user_mitigation_choice.malicious_user_mitigation"]; exists {
			val := m.GetMaliciousUserMitigationChoice().(*EnableChallenge_MaliciousUserMitigation).MaliciousUserMitigation
			vOpts := append(opts,
				db.WithValidateField("malicious_user_mitigation_choice"),
				db.WithValidateField("malicious_user_mitigation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEnableChallengeValidator = func() *ValidateEnableChallenge {
	v := &ValidateEnableChallenge{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["captcha_challenge_parameters_choice.captcha_challenge_parameters"] = ves_io_schema_virtual_host.CaptchaChallengeTypeValidator().Validate

	v.FldValidators["js_challenge_parameters_choice.js_challenge_parameters"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate

	v.FldValidators["malicious_user_mitigation_choice.malicious_user_mitigation"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func EnableChallengeValidator() db.Validator {
	return DefaultEnableChallengeValidator
}

// augmented methods on protoc/std generated struct

func (m *EnableDDoSDetectionSetting) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EnableDDoSDetectionSetting) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EnableDDoSDetectionSetting) DeepCopy() *EnableDDoSDetectionSetting {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EnableDDoSDetectionSetting{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EnableDDoSDetectionSetting) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EnableDDoSDetectionSetting) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EnableDDoSDetectionSettingValidator().Validate(ctx, m, opts...)
}

type ValidateEnableDDoSDetectionSetting struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEnableDDoSDetectionSetting) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EnableDDoSDetectionSetting)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EnableDDoSDetectionSetting got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetAutoMitigationChoice().(type) {
	case *EnableDDoSDetectionSetting_EnableAutoMitigation:
		if fv, exists := v.FldValidators["auto_mitigation_choice.enable_auto_mitigation"]; exists {
			val := m.GetAutoMitigationChoice().(*EnableDDoSDetectionSetting_EnableAutoMitigation).EnableAutoMitigation
			vOpts := append(opts,
				db.WithValidateField("auto_mitigation_choice"),
				db.WithValidateField("enable_auto_mitigation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *EnableDDoSDetectionSetting_DisableAutoMitigation:
		if fv, exists := v.FldValidators["auto_mitigation_choice.disable_auto_mitigation"]; exists {
			val := m.GetAutoMitigationChoice().(*EnableDDoSDetectionSetting_DisableAutoMitigation).DisableAutoMitigation
			vOpts := append(opts,
				db.WithValidateField("auto_mitigation_choice"),
				db.WithValidateField("disable_auto_mitigation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEnableDDoSDetectionSettingValidator = func() *ValidateEnableDDoSDetectionSetting {
	v := &ValidateEnableDDoSDetectionSetting{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["auto_mitigation_choice.enable_auto_mitigation"] = AutoMitigationActionValidator().Validate

	return v
}()

func EnableDDoSDetectionSettingValidator() db.Validator {
	return DefaultEnableDDoSDetectionSettingValidator
}

// augmented methods on protoc/std generated struct

func (m *FallThroughRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *FallThroughRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *FallThroughRule) DeepCopy() *FallThroughRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &FallThroughRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *FallThroughRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *FallThroughRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return FallThroughRuleValidator().Validate(ctx, m, opts...)
}

type ValidateFallThroughRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateFallThroughRule) ActionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action_choice")
	}
	return validatorFn, nil
}

func (v *ValidateFallThroughRule) ConditionTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for condition_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateFallThroughRule) ConditionTypeChoiceBasePathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_BasePath, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for base_path")
	}
	return oValidatorFn_BasePath, nil
}
func (v *ValidateFallThroughRule) ConditionTypeChoiceApiGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ApiGroup, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_group")
	}
	return oValidatorFn_ApiGroup, nil
}

func (v *ValidateFallThroughRule) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateFallThroughRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*FallThroughRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *FallThroughRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action_choice"]; exists {
		val := m.GetActionChoice()
		vOpts := append(opts,
			db.WithValidateField("action_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetActionChoice().(type) {
	case *FallThroughRule_ActionSkip:
		if fv, exists := v.FldValidators["action_choice.action_skip"]; exists {
			val := m.GetActionChoice().(*FallThroughRule_ActionSkip).ActionSkip
			vOpts := append(opts,
				db.WithValidateField("action_choice"),
				db.WithValidateField("action_skip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FallThroughRule_ActionReport:
		if fv, exists := v.FldValidators["action_choice.action_report"]; exists {
			val := m.GetActionChoice().(*FallThroughRule_ActionReport).ActionReport
			vOpts := append(opts,
				db.WithValidateField("action_choice"),
				db.WithValidateField("action_report"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FallThroughRule_ActionBlock:
		if fv, exists := v.FldValidators["action_choice.action_block"]; exists {
			val := m.GetActionChoice().(*FallThroughRule_ActionBlock).ActionBlock
			vOpts := append(opts,
				db.WithValidateField("action_choice"),
				db.WithValidateField("action_block"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["condition_type_choice"]; exists {
		val := m.GetConditionTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("condition_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetConditionTypeChoice().(type) {
	case *FallThroughRule_BasePath:
		if fv, exists := v.FldValidators["condition_type_choice.base_path"]; exists {
			val := m.GetConditionTypeChoice().(*FallThroughRule_BasePath).BasePath
			vOpts := append(opts,
				db.WithValidateField("condition_type_choice"),
				db.WithValidateField("base_path"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FallThroughRule_ApiGroup:
		if fv, exists := v.FldValidators["condition_type_choice.api_group"]; exists {
			val := m.GetConditionTypeChoice().(*FallThroughRule_ApiGroup).ApiGroup
			vOpts := append(opts,
				db.WithValidateField("condition_type_choice"),
				db.WithValidateField("api_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *FallThroughRule_ApiEndpoint:
		if fv, exists := v.FldValidators["condition_type_choice.api_endpoint"]; exists {
			val := m.GetConditionTypeChoice().(*FallThroughRule_ApiEndpoint).ApiEndpoint
			vOpts := append(opts,
				db.WithValidateField("condition_type_choice"),
				db.WithValidateField("api_endpoint"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultFallThroughRuleValidator = func() *ValidateFallThroughRule {
	v := &ValidateFallThroughRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhActionChoice := v.ActionChoiceValidationRuleHandler
	rulesActionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhActionChoice(rulesActionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FallThroughRule.action_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action_choice"] = vFn

	vrhConditionTypeChoice := v.ConditionTypeChoiceValidationRuleHandler
	rulesConditionTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhConditionTypeChoice(rulesConditionTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FallThroughRule.condition_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["condition_type_choice"] = vFn

	vrhConditionTypeChoiceBasePath := v.ConditionTypeChoiceBasePathValidationRuleHandler
	rulesConditionTypeChoiceBasePath := map[string]string{
		"ves.io.schema.rules.string.http_path": "true",
		"ves.io.schema.rules.string.max_len":   "128",
	}
	vFnMap["condition_type_choice.base_path"], err = vrhConditionTypeChoiceBasePath(rulesConditionTypeChoiceBasePath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field FallThroughRule.condition_type_choice_base_path: %s", err)
		panic(errMsg)
	}
	vrhConditionTypeChoiceApiGroup := v.ConditionTypeChoiceApiGroupValidationRuleHandler
	rulesConditionTypeChoiceApiGroup := map[string]string{
		"ves.io.schema.rules.string.max_len": "128",
	}
	vFnMap["condition_type_choice.api_group"], err = vrhConditionTypeChoiceApiGroup(rulesConditionTypeChoiceApiGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field FallThroughRule.condition_type_choice_api_group: %s", err)
		panic(errMsg)
	}

	v.FldValidators["condition_type_choice.base_path"] = vFnMap["condition_type_choice.base_path"]
	v.FldValidators["condition_type_choice.api_group"] = vFnMap["condition_type_choice.api_group"]

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for FallThroughRule.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	v.FldValidators["condition_type_choice.api_endpoint"] = ApiEndpointDetailsValidator().Validate

	return v
}()

func FallThroughRuleValidator() db.Validator {
	return DefaultFallThroughRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttps().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.https")
	}

	for idx, e := range m.GetRoutes() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting GetSpecType.routes idx %v", idx)
		}
	}

	if err := m.GetMoreOption().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.more_option")
	}

	if err := m.GetDefaultPool().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.default_pool")
	}

	if err := m.GetJwtValidation().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.jwt_validation")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvertiseChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAdvertiseChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiDefinitionChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDefinitionChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiProtectionRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiProtectionRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetBotDefenseChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetBotDefenseChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetChallengeTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetChallengeTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDefaultRoutePoolsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDefaultRoutePoolsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLoadbalancerTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLoadbalancerTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMaliciousUserMitigationDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMaliciousUserMitigationDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMoreOptionDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMoreOptionDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginPoolChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginServerSubsetRuleListDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginServerSubsetRuleListDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimitChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRateLimitChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRoutesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRoutesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServicePolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetServicePolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetUserIdChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetUserIdChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetWafChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetAdvertiseChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAdvertiseChoice() == nil {
		return nil, nil
	}
	switch m.GetAdvertiseChoice().(type) {
	case *GetSpecType_AdvertiseOnPublic:
		drInfos, err := m.GetAdvertiseOnPublic().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAdvertiseOnPublic().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "advertise_on_public." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_AdvertiseCustom:
		drInfos, err := m.GetAdvertiseCustom().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAdvertiseCustom().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "advertise_custom." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_DoNotAdvertise:

		return nil, nil

	case *GetSpecType_AdvertiseOnPublicDefaultVip:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetApiDefinitionChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDefinitionChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDefinitionChoice().(type) {
	case *GetSpecType_ApiDefinitions:
		drInfos, err := m.GetApiDefinitions().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiDefinitions().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_definitions." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_ApiSpecification:
		drInfos, err := m.GetApiSpecification().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiSpecification().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_specification." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_DisableApiDefinition:

		return nil, nil

	case *GetSpecType_ApiDefinition:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetApiProtectionRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiProtectionRules() == nil {
		return nil, nil
	}

	drInfos, err := m.GetApiProtectionRules().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetApiProtectionRules().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "api_protection_rules." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetBotDefenseChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetBotDefenseChoice() == nil {
		return nil, nil
	}
	switch m.GetBotDefenseChoice().(type) {
	case *GetSpecType_DisableBotDefense:

		return nil, nil

	case *GetSpecType_BotDefense:

		return nil, nil

	case *GetSpecType_BotDefenseAdvanced:
		drInfos, err := m.GetBotDefenseAdvanced().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetBotDefenseAdvanced().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "bot_defense_advanced." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetChallengeTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetChallengeType() == nil {
		return nil, nil
	}
	switch m.GetChallengeType().(type) {
	case *GetSpecType_JsChallenge:

		return nil, nil

	case *GetSpecType_CaptchaChallenge:

		return nil, nil

	case *GetSpecType_NoChallenge:

		return nil, nil

	case *GetSpecType_PolicyBasedChallenge:
		drInfos, err := m.GetPolicyBasedChallenge().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPolicyBasedChallenge().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "policy_based_challenge." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_EnableChallenge:
		drInfos, err := m.GetEnableChallenge().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableChallenge().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_challenge." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetDefaultRoutePoolsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDefaultRoutePools() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetDefaultRoutePools() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultRoutePools() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("default_route_pools[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetLoadbalancerTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLoadbalancerType() == nil {
		return nil, nil
	}
	switch m.GetLoadbalancerType().(type) {
	case *GetSpecType_Http:

		return nil, nil

	case *GetSpecType_Https:
		drInfos, err := m.GetHttps().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttps().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_HttpsAutoCert:
		drInfos, err := m.GetHttpsAutoCert().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpsAutoCert().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https_auto_cert." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GetSpecType) GetMaliciousUserMitigationDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("malicious_user_mitigation.Object")
	dri := db.DRefInfo{
		RefdType:   "malicious_user_mitigation.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "malicious_user_mitigation",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetMaliciousUserMitigationDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetMaliciousUserMitigationDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "malicious_user_mitigation.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: malicious_user_mitigation")
	}

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "malicious_user_mitigation.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetMoreOptionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMoreOption() == nil {
		return nil, nil
	}

	drInfos, err := m.GetMoreOption().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetMoreOption().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "more_option." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetOriginPoolChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginPoolChoice() == nil {
		return nil, nil
	}
	switch m.GetOriginPoolChoice().(type) {
	case *GetSpecType_DefaultPool:
		drInfos, err := m.GetDefaultPool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultPool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "default_pool." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_DefaultPoolList:
		drInfos, err := m.GetDefaultPoolList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultPoolList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "default_pool_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetOriginServerSubsetRuleListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginServerSubsetRuleList() == nil {
		return nil, nil
	}

	drInfos, err := m.GetOriginServerSubsetRuleList().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetOriginServerSubsetRuleList().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "origin_server_subset_rule_list." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetRateLimitChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRateLimitChoice() == nil {
		return nil, nil
	}
	switch m.GetRateLimitChoice().(type) {
	case *GetSpecType_DisableRateLimit:

		return nil, nil

	case *GetSpecType_RateLimit:
		drInfos, err := m.GetRateLimit().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRateLimit().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rate_limit." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_ApiRateLimit:
		drInfos, err := m.GetApiRateLimit().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiRateLimit().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_rate_limit." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetRoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRoutes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRoutes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetServicePolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServicePolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetServicePolicyChoice().(type) {
	case *GetSpecType_ServicePoliciesFromNamespace:

		return nil, nil

	case *GetSpecType_NoServicePolicies:

		return nil, nil

	case *GetSpecType_ActiveServicePolicies:
		drInfos, err := m.GetActiveServicePolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveServicePolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_service_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GetSpecType) GetUserIdChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetUserIdChoice().(type) {
	case *GetSpecType_UserIdentification:

		vref := m.GetUserIdentification()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("user_identification.Object")
		dri := db.DRefInfo{
			RefdType:   "user_identification.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "user_identification",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *GetSpecType_UserIdClientIp:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetUserIdChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetUserIdChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetUserIdChoice().(type) {
	case *GetSpecType_UserIdentification:
		refdType, err := d.TypeForEntryKind("", "", "user_identification.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: user_identification")
		}

		vref := m.GetUserIdentification()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "user_identification.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GetSpecType_UserIdClientIp:

	}

	return entries, nil
}

func (m *GetSpecType) GetWafChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetWafChoice().(type) {
	case *GetSpecType_DisableWaf:

		return nil, nil

	case *GetSpecType_AppFirewall:

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("app_firewall.Object")
		dri := db.DRefInfo{
			RefdType:   "app_firewall.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "app_firewall",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetWafChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetWafChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetWafChoice().(type) {
	case *GetSpecType_DisableWaf:

	case *GetSpecType_AppFirewall:
		refdType, err := d.TypeForEntryKind("", "", "app_firewall.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: app_firewall")
		}

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "app_firewall.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) AdvertiseChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for advertise_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ApiDefinitionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_definition_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ApiDiscoveryChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_discovery_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ChallengeTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_type")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) DdosDetectionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ddos_detection_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) L7DdosAutoMitigationActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for l7_ddos_auto_mitigation_action")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) LoadbalancerTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for loadbalancer_type")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) MaliciousUserDetectionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for malicious_user_detection_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) RateLimitChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rate_limit_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ServicePolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) TrustClientIpHeadersChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for trust_client_ip_headers_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) UserIdChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for user_id_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) WafChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for waf_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DefaultRoutePoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for default_route_pools")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_route_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_route_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_route_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RouteType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RouteTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RouteType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RouteType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) WafExclusionRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for waf_exclusion_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleWafExclusionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.SimpleWafExclusionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for waf_exclusion_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleWafExclusionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleWafExclusionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated waf_exclusion_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items waf_exclusion_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) BlockedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for blocked_clients")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for blocked_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated blocked_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items blocked_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) TrustedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for trusted_clients")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for trusted_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated trusted_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items trusted_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DdosMitigationRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ddos_mitigation_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*DDoSMitigationRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := DDoSMitigationRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ddos_mitigation_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DDoSMitigationRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DDoSMitigationRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ddos_mitigation_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ddos_mitigation_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) DataGuardRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for data_guard_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleDataGuardRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.SimpleDataGuardRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for data_guard_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleDataGuardRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleDataGuardRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated data_guard_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items data_guard_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) GraphqlRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for graphql_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.GraphQLRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.GraphQLRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for graphql_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.GraphQLRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.GraphQLRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated graphql_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items graphql_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) ProtectedCookiesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for protected_cookies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.CookieManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.CookieManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for protected_cookies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.CookieManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.CookieManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated protected_cookies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items protected_cookies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_location"]; exists {

		vOpts := append(opts, db.WithValidateField("add_location"))
		if err := fv(ctx, m.GetAddLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["advertise_choice"]; exists {
		val := m.GetAdvertiseChoice()
		vOpts := append(opts,
			db.WithValidateField("advertise_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdvertiseChoice().(type) {
	case *GetSpecType_AdvertiseOnPublic:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public"]; exists {
			val := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublic).AdvertiseOnPublic
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AdvertiseCustom:
		if fv, exists := v.FldValidators["advertise_choice.advertise_custom"]; exists {
			val := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseCustom).AdvertiseCustom
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DoNotAdvertise:
		if fv, exists := v.FldValidators["advertise_choice.do_not_advertise"]; exists {
			val := m.GetAdvertiseChoice().(*GetSpecType_DoNotAdvertise).DoNotAdvertise
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("do_not_advertise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AdvertiseOnPublicDefaultVip:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public_default_vip"]; exists {
			val := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublicDefaultVip).AdvertiseOnPublicDefaultVip
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public_default_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_definition_choice"]; exists {
		val := m.GetApiDefinitionChoice()
		vOpts := append(opts,
			db.WithValidateField("api_definition_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDefinitionChoice().(type) {
	case *GetSpecType_ApiDefinitions:
		if fv, exists := v.FldValidators["api_definition_choice.api_definitions"]; exists {
			val := m.GetApiDefinitionChoice().(*GetSpecType_ApiDefinitions).ApiDefinitions
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_definitions"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ApiSpecification:
		if fv, exists := v.FldValidators["api_definition_choice.api_specification"]; exists {
			val := m.GetApiDefinitionChoice().(*GetSpecType_ApiSpecification).ApiSpecification
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_specification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DisableApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.disable_api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*GetSpecType_DisableApiDefinition).DisableApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("disable_api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*GetSpecType_ApiDefinition).ApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_discovery_choice"]; exists {
		val := m.GetApiDiscoveryChoice()
		vOpts := append(opts,
			db.WithValidateField("api_discovery_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDiscoveryChoice().(type) {
	case *GetSpecType_EnableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.enable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*GetSpecType_EnableApiDiscovery).EnableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("enable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DisableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.disable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*GetSpecType_DisableApiDiscovery).DisableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("disable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_protection_rules"]; exists {

		vOpts := append(opts, db.WithValidateField("api_protection_rules"))
		if err := fv(ctx, m.GetApiProtectionRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["auto_cert_info"]; exists {

		vOpts := append(opts, db.WithValidateField("auto_cert_info"))
		if err := fv(ctx, m.GetAutoCertInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("blocked_clients"))
		if err := fv(ctx, m.GetBlockedClients(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetBotDefenseChoice().(type) {
	case *GetSpecType_DisableBotDefense:
		if fv, exists := v.FldValidators["bot_defense_choice.disable_bot_defense"]; exists {
			val := m.GetBotDefenseChoice().(*GetSpecType_DisableBotDefense).DisableBotDefense
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("disable_bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_BotDefense:
		if fv, exists := v.FldValidators["bot_defense_choice.bot_defense"]; exists {
			val := m.GetBotDefenseChoice().(*GetSpecType_BotDefense).BotDefense
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_BotDefenseAdvanced:
		if fv, exists := v.FldValidators["bot_defense_choice.bot_defense_advanced"]; exists {
			val := m.GetBotDefenseChoice().(*GetSpecType_BotDefenseAdvanced).BotDefenseAdvanced
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("bot_defense_advanced"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["challenge_type"]; exists {
		val := m.GetChallengeType()
		vOpts := append(opts,
			db.WithValidateField("challenge_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChallengeType().(type) {
	case *GetSpecType_JsChallenge:
		if fv, exists := v.FldValidators["challenge_type.js_challenge"]; exists {
			val := m.GetChallengeType().(*GetSpecType_JsChallenge).JsChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_CaptchaChallenge:
		if fv, exists := v.FldValidators["challenge_type.captcha_challenge"]; exists {
			val := m.GetChallengeType().(*GetSpecType_CaptchaChallenge).CaptchaChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("captcha_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NoChallenge:
		if fv, exists := v.FldValidators["challenge_type.no_challenge"]; exists {
			val := m.GetChallengeType().(*GetSpecType_NoChallenge).NoChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("no_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_PolicyBasedChallenge:
		if fv, exists := v.FldValidators["challenge_type.policy_based_challenge"]; exists {
			val := m.GetChallengeType().(*GetSpecType_PolicyBasedChallenge).PolicyBasedChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("policy_based_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EnableChallenge:
		if fv, exists := v.FldValidators["challenge_type.enable_challenge"]; exists {
			val := m.GetChallengeType().(*GetSpecType_EnableChallenge).EnableChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("enable_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetClientSideDefenseChoice().(type) {
	case *GetSpecType_DisableClientSideDefense:
		if fv, exists := v.FldValidators["client_side_defense_choice.disable_client_side_defense"]; exists {
			val := m.GetClientSideDefenseChoice().(*GetSpecType_DisableClientSideDefense).DisableClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("client_side_defense_choice"),
				db.WithValidateField("disable_client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ClientSideDefense:
		if fv, exists := v.FldValidators["client_side_defense_choice.client_side_defense"]; exists {
			val := m.GetClientSideDefenseChoice().(*GetSpecType_ClientSideDefense).ClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("client_side_defense_choice"),
				db.WithValidateField("client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cors_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("cors_policy"))
		if err := fv(ctx, m.GetCorsPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["csrf_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("csrf_policy"))
		if err := fv(ctx, m.GetCsrfPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["data_guard_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("data_guard_rules"))
		if err := fv(ctx, m.GetDataGuardRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ddos_detection_choice"]; exists {
		val := m.GetDdosDetectionChoice()
		vOpts := append(opts,
			db.WithValidateField("ddos_detection_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDdosDetectionChoice().(type) {
	case *GetSpecType_EnableDdosDetection:
		if fv, exists := v.FldValidators["ddos_detection_choice.enable_ddos_detection"]; exists {
			val := m.GetDdosDetectionChoice().(*GetSpecType_EnableDdosDetection).EnableDdosDetection
			vOpts := append(opts,
				db.WithValidateField("ddos_detection_choice"),
				db.WithValidateField("enable_ddos_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DisableDdosDetection:
		if fv, exists := v.FldValidators["ddos_detection_choice.disable_ddos_detection"]; exists {
			val := m.GetDdosDetectionChoice().(*GetSpecType_DisableDdosDetection).DisableDdosDetection
			vOpts := append(opts,
				db.WithValidateField("ddos_detection_choice"),
				db.WithValidateField("disable_ddos_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ddos_mitigation_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("ddos_mitigation_rules"))
		if err := fv(ctx, m.GetDdosMitigationRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_route_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("default_route_pools"))
		if err := fv(ctx, m.GetDefaultRoutePools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dns_info"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_info"))
		for idx, item := range m.GetDnsInfo() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["downstream_tls_certificate_expiration_timestamps"]; exists {

		vOpts := append(opts, db.WithValidateField("downstream_tls_certificate_expiration_timestamps"))
		for idx, item := range m.GetDownstreamTlsCertificateExpirationTimestamps() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["graphql_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("graphql_rules"))
		if err := fv(ctx, m.GetGraphqlRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *GetSpecType_RoundRobin:
		if fv, exists := v.FldValidators["hash_policy_choice.round_robin"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_RoundRobin).RoundRobin
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("round_robin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LeastActive:
		if fv, exists := v.FldValidators["hash_policy_choice.least_active"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_LeastActive).LeastActive
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("least_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Random:
		if fv, exists := v.FldValidators["hash_policy_choice.random"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_Random).Random
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("random"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SourceIpStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.source_ip_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_SourceIpStickiness).SourceIpStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("source_ip_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_CookieStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.cookie_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_CookieStickiness).CookieStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("cookie_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_RingHash:
		if fv, exists := v.FldValidators["hash_policy_choice.ring_hash"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_RingHash).RingHash
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("ring_hash"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["host_name"]; exists {

		vOpts := append(opts, db.WithValidateField("host_name"))
		if err := fv(ctx, m.GetHostName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["internet_vip_info"]; exists {

		vOpts := append(opts, db.WithValidateField("internet_vip_info"))
		for idx, item := range m.GetInternetVipInfo() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetIpReputationChoice().(type) {
	case *GetSpecType_DisableIpReputation:
		if fv, exists := v.FldValidators["ip_reputation_choice.disable_ip_reputation"]; exists {
			val := m.GetIpReputationChoice().(*GetSpecType_DisableIpReputation).DisableIpReputation
			vOpts := append(opts,
				db.WithValidateField("ip_reputation_choice"),
				db.WithValidateField("disable_ip_reputation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EnableIpReputation:
		if fv, exists := v.FldValidators["ip_reputation_choice.enable_ip_reputation"]; exists {
			val := m.GetIpReputationChoice().(*GetSpecType_EnableIpReputation).EnableIpReputation
			vOpts := append(opts,
				db.WithValidateField("ip_reputation_choice"),
				db.WithValidateField("enable_ip_reputation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["jwt_validation"]; exists {

		vOpts := append(opts, db.WithValidateField("jwt_validation"))
		if err := fv(ctx, m.GetJwtValidation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action"]; exists {
		val := m.GetL7DdosAutoMitigationAction()
		vOpts := append(opts,
			db.WithValidateField("l7_ddos_auto_mitigation_action"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetL7DdosAutoMitigationAction().(type) {
	case *GetSpecType_L7DdosActionDefault:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_default"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*GetSpecType_L7DdosActionDefault).L7DdosActionDefault
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_L7DdosActionBlock:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_block"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*GetSpecType_L7DdosActionBlock).L7DdosActionBlock
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_block"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_L7DdosActionJsChallenge:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_js_challenge"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*GetSpecType_L7DdosActionJsChallenge).L7DdosActionJsChallenge
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_L7DdosActionNone:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_none"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*GetSpecType_L7DdosActionNone).L7DdosActionNone
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["loadbalancer_type"]; exists {
		val := m.GetLoadbalancerType()
		vOpts := append(opts,
			db.WithValidateField("loadbalancer_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLoadbalancerType().(type) {
	case *GetSpecType_Http:
		if fv, exists := v.FldValidators["loadbalancer_type.http"]; exists {
			val := m.GetLoadbalancerType().(*GetSpecType_Http).Http
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("http"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_Https:
		if fv, exists := v.FldValidators["loadbalancer_type.https"]; exists {
			val := m.GetLoadbalancerType().(*GetSpecType_Https).Https
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_HttpsAutoCert:
		if fv, exists := v.FldValidators["loadbalancer_type.https_auto_cert"]; exists {
			val := m.GetLoadbalancerType().(*GetSpecType_HttpsAutoCert).HttpsAutoCert
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https_auto_cert"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_detection_choice"]; exists {
		val := m.GetMaliciousUserDetectionChoice()
		vOpts := append(opts,
			db.WithValidateField("malicious_user_detection_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMaliciousUserDetectionChoice().(type) {
	case *GetSpecType_EnableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.enable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*GetSpecType_EnableMaliciousUserDetection).EnableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("enable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DisableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.disable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*GetSpecType_DisableMaliciousUserDetection).DisableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("disable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_mitigation"]; exists {

		vOpts := append(opts, db.WithValidateField("malicious_user_mitigation"))
		if err := fv(ctx, m.GetMaliciousUserMitigation(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetMlConfigChoice().(type) {
	case *GetSpecType_SingleLbApp:
		if fv, exists := v.FldValidators["ml_config_choice.single_lb_app"]; exists {
			val := m.GetMlConfigChoice().(*GetSpecType_SingleLbApp).SingleLbApp
			vOpts := append(opts,
				db.WithValidateField("ml_config_choice"),
				db.WithValidateField("single_lb_app"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_MultiLbApp:
		if fv, exists := v.FldValidators["ml_config_choice.multi_lb_app"]; exists {
			val := m.GetMlConfigChoice().(*GetSpecType_MultiLbApp).MultiLbApp
			vOpts := append(opts,
				db.WithValidateField("ml_config_choice"),
				db.WithValidateField("multi_lb_app"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["more_option"]; exists {

		vOpts := append(opts, db.WithValidateField("more_option"))
		if err := fv(ctx, m.GetMoreOption(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetOriginPoolChoice().(type) {
	case *GetSpecType_DefaultPool:
		if fv, exists := v.FldValidators["origin_pool_choice.default_pool"]; exists {
			val := m.GetOriginPoolChoice().(*GetSpecType_DefaultPool).DefaultPool
			vOpts := append(opts,
				db.WithValidateField("origin_pool_choice"),
				db.WithValidateField("default_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DefaultPoolList:
		if fv, exists := v.FldValidators["origin_pool_choice.default_pool_list"]; exists {
			val := m.GetOriginPoolChoice().(*GetSpecType_DefaultPoolList).DefaultPoolList
			vOpts := append(opts,
				db.WithValidateField("origin_pool_choice"),
				db.WithValidateField("default_pool_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["origin_server_subset_rule_list"]; exists {

		vOpts := append(opts, db.WithValidateField("origin_server_subset_rule_list"))
		if err := fv(ctx, m.GetOriginServerSubsetRuleList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protected_cookies"]; exists {
		vOpts := append(opts, db.WithValidateField("protected_cookies"))
		if err := fv(ctx, m.GetProtectedCookies(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limit_choice"]; exists {
		val := m.GetRateLimitChoice()
		vOpts := append(opts,
			db.WithValidateField("rate_limit_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRateLimitChoice().(type) {
	case *GetSpecType_DisableRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.disable_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*GetSpecType_DisableRateLimit).DisableRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("disable_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_RateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*GetSpecType_RateLimit).RateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ApiRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.api_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*GetSpecType_ApiRateLimit).ApiRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("api_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["routes"]; exists {
		vOpts := append(opts, db.WithValidateField("routes"))
		if err := fv(ctx, m.GetRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service_policy_choice"]; exists {
		val := m.GetServicePolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("service_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServicePolicyChoice().(type) {
	case *GetSpecType_ServicePoliciesFromNamespace:
		if fv, exists := v.FldValidators["service_policy_choice.service_policies_from_namespace"]; exists {
			val := m.GetServicePolicyChoice().(*GetSpecType_ServicePoliciesFromNamespace).ServicePoliciesFromNamespace
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("service_policies_from_namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NoServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.no_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*GetSpecType_NoServicePolicies).NoServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("no_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ActiveServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.active_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*GetSpecType_ActiveServicePolicies).ActiveServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("active_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetSlowDdosMitigationChoice().(type) {
	case *GetSpecType_SlowDdosMitigation:
		if fv, exists := v.FldValidators["slow_ddos_mitigation_choice.slow_ddos_mitigation"]; exists {
			val := m.GetSlowDdosMitigationChoice().(*GetSpecType_SlowDdosMitigation).SlowDdosMitigation
			vOpts := append(opts,
				db.WithValidateField("slow_ddos_mitigation_choice"),
				db.WithValidateField("slow_ddos_mitigation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SystemDefaultTimeouts:
		if fv, exists := v.FldValidators["slow_ddos_mitigation_choice.system_default_timeouts"]; exists {
			val := m.GetSlowDdosMitigationChoice().(*GetSpecType_SystemDefaultTimeouts).SystemDefaultTimeouts
			vOpts := append(opts,
				db.WithValidateField("slow_ddos_mitigation_choice"),
				db.WithValidateField("system_default_timeouts"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["state"]; exists {

		vOpts := append(opts, db.WithValidateField("state"))
		if err := fv(ctx, m.GetState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["trust_client_ip_headers_choice"]; exists {
		val := m.GetTrustClientIpHeadersChoice()
		vOpts := append(opts,
			db.WithValidateField("trust_client_ip_headers_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTrustClientIpHeadersChoice().(type) {
	case *GetSpecType_DisableTrustClientIpHeaders:
		if fv, exists := v.FldValidators["trust_client_ip_headers_choice.disable_trust_client_ip_headers"]; exists {
			val := m.GetTrustClientIpHeadersChoice().(*GetSpecType_DisableTrustClientIpHeaders).DisableTrustClientIpHeaders
			vOpts := append(opts,
				db.WithValidateField("trust_client_ip_headers_choice"),
				db.WithValidateField("disable_trust_client_ip_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EnableTrustClientIpHeaders:
		if fv, exists := v.FldValidators["trust_client_ip_headers_choice.enable_trust_client_ip_headers"]; exists {
			val := m.GetTrustClientIpHeadersChoice().(*GetSpecType_EnableTrustClientIpHeaders).EnableTrustClientIpHeaders
			vOpts := append(opts,
				db.WithValidateField("trust_client_ip_headers_choice"),
				db.WithValidateField("enable_trust_client_ip_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["trusted_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("trusted_clients"))
		if err := fv(ctx, m.GetTrustedClients(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_id_choice"]; exists {
		val := m.GetUserIdChoice()
		vOpts := append(opts,
			db.WithValidateField("user_id_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetUserIdChoice().(type) {
	case *GetSpecType_UserIdentification:
		if fv, exists := v.FldValidators["user_id_choice.user_identification"]; exists {
			val := m.GetUserIdChoice().(*GetSpecType_UserIdentification).UserIdentification
			vOpts := append(opts,
				db.WithValidateField("user_id_choice"),
				db.WithValidateField("user_identification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_UserIdClientIp:
		if fv, exists := v.FldValidators["user_id_choice.user_id_client_ip"]; exists {
			val := m.GetUserIdChoice().(*GetSpecType_UserIdClientIp).UserIdClientIp
			vOpts := append(opts,
				db.WithValidateField("user_id_choice"),
				db.WithValidateField("user_id_client_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_choice"]; exists {
		val := m.GetWafChoice()
		vOpts := append(opts,
			db.WithValidateField("waf_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWafChoice().(type) {
	case *GetSpecType_DisableWaf:
		if fv, exists := v.FldValidators["waf_choice.disable_waf"]; exists {
			val := m.GetWafChoice().(*GetSpecType_DisableWaf).DisableWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("disable_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AppFirewall:
		if fv, exists := v.FldValidators["waf_choice.app_firewall"]; exists {
			val := m.GetWafChoice().(*GetSpecType_AppFirewall).AppFirewall
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("app_firewall"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_exclusion_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("waf_exclusion_rules"))
		if err := fv(ctx, m.GetWafExclusionRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdvertiseChoice := v.AdvertiseChoiceValidationRuleHandler
	rulesAdvertiseChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdvertiseChoice(rulesAdvertiseChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.advertise_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["advertise_choice"] = vFn

	vrhApiDefinitionChoice := v.ApiDefinitionChoiceValidationRuleHandler
	rulesApiDefinitionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDefinitionChoice(rulesApiDefinitionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.api_definition_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_definition_choice"] = vFn

	vrhApiDiscoveryChoice := v.ApiDiscoveryChoiceValidationRuleHandler
	rulesApiDiscoveryChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDiscoveryChoice(rulesApiDiscoveryChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.api_discovery_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_discovery_choice"] = vFn

	vrhChallengeType := v.ChallengeTypeValidationRuleHandler
	rulesChallengeType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChallengeType(rulesChallengeType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.challenge_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_type"] = vFn

	vrhDdosDetectionChoice := v.DdosDetectionChoiceValidationRuleHandler
	rulesDdosDetectionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDdosDetectionChoice(rulesDdosDetectionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.ddos_detection_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ddos_detection_choice"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhL7DdosAutoMitigationAction := v.L7DdosAutoMitigationActionValidationRuleHandler
	rulesL7DdosAutoMitigationAction := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhL7DdosAutoMitigationAction(rulesL7DdosAutoMitigationAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.l7_ddos_auto_mitigation_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["l7_ddos_auto_mitigation_action"] = vFn

	vrhLoadbalancerType := v.LoadbalancerTypeValidationRuleHandler
	rulesLoadbalancerType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLoadbalancerType(rulesLoadbalancerType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.loadbalancer_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_type"] = vFn

	vrhMaliciousUserDetectionChoice := v.MaliciousUserDetectionChoiceValidationRuleHandler
	rulesMaliciousUserDetectionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMaliciousUserDetectionChoice(rulesMaliciousUserDetectionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.malicious_user_detection_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["malicious_user_detection_choice"] = vFn

	vrhRateLimitChoice := v.RateLimitChoiceValidationRuleHandler
	rulesRateLimitChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRateLimitChoice(rulesRateLimitChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.rate_limit_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limit_choice"] = vFn

	vrhServicePolicyChoice := v.ServicePolicyChoiceValidationRuleHandler
	rulesServicePolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServicePolicyChoice(rulesServicePolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.service_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_policy_choice"] = vFn

	vrhTrustClientIpHeadersChoice := v.TrustClientIpHeadersChoiceValidationRuleHandler
	rulesTrustClientIpHeadersChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTrustClientIpHeadersChoice(rulesTrustClientIpHeadersChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.trust_client_ip_headers_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trust_client_ip_headers_choice"] = vFn

	vrhUserIdChoice := v.UserIdChoiceValidationRuleHandler
	rulesUserIdChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhUserIdChoice(rulesUserIdChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.user_id_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user_id_choice"] = vFn

	vrhWafChoice := v.WafChoiceValidationRuleHandler
	rulesWafChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWafChoice(rulesWafChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.waf_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhDefaultRoutePools := v.DefaultRoutePoolsValidationRuleHandler
	rulesDefaultRoutePools := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDefaultRoutePools(rulesDefaultRoutePools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.default_route_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_route_pools"] = vFn

	vrhRoutes := v.RoutesValidationRuleHandler
	rulesRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRoutes(rulesRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routes"] = vFn

	vrhWafExclusionRules := v.WafExclusionRulesValidationRuleHandler
	rulesWafExclusionRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhWafExclusionRules(rulesWafExclusionRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.waf_exclusion_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_exclusion_rules"] = vFn

	vrhBlockedClients := v.BlockedClientsValidationRuleHandler
	rulesBlockedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhBlockedClients(rulesBlockedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.blocked_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_clients"] = vFn

	vrhTrustedClients := v.TrustedClientsValidationRuleHandler
	rulesTrustedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhTrustedClients(rulesTrustedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.trusted_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trusted_clients"] = vFn

	vrhDdosMitigationRules := v.DdosMitigationRulesValidationRuleHandler
	rulesDdosMitigationRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDdosMitigationRules(rulesDdosMitigationRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.ddos_mitigation_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ddos_mitigation_rules"] = vFn

	vrhDataGuardRules := v.DataGuardRulesValidationRuleHandler
	rulesDataGuardRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDataGuardRules(rulesDataGuardRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.data_guard_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["data_guard_rules"] = vFn

	vrhGraphqlRules := v.GraphqlRulesValidationRuleHandler
	rulesGraphqlRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhGraphqlRules(rulesGraphqlRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.graphql_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["graphql_rules"] = vFn

	vrhProtectedCookies := v.ProtectedCookiesValidationRuleHandler
	rulesProtectedCookies := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhProtectedCookies(rulesProtectedCookies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.protected_cookies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protected_cookies"] = vFn

	v.FldValidators["advertise_choice.advertise_on_public"] = ves_io_schema_views.AdvertisePublicValidator().Validate
	v.FldValidators["advertise_choice.advertise_custom"] = ves_io_schema_views.AdvertiseCustomValidator().Validate

	v.FldValidators["api_definition_choice.api_definitions"] = ApiDefinitionListValidator().Validate
	v.FldValidators["api_definition_choice.api_specification"] = APISpecificationSettingsValidator().Validate
	v.FldValidators["api_definition_choice.api_definition"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_discovery_choice.enable_api_discovery"] = ApiDiscoverySettingValidator().Validate

	v.FldValidators["bot_defense_choice.bot_defense"] = ShapeBotDefenseTypeValidator().Validate
	v.FldValidators["bot_defense_choice.bot_defense_advanced"] = BotDefenseAdvancedTypeValidator().Validate

	v.FldValidators["challenge_type.js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.captcha_challenge"] = ves_io_schema_virtual_host.CaptchaChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.policy_based_challenge"] = PolicyBasedChallengeValidator().Validate
	v.FldValidators["challenge_type.enable_challenge"] = EnableChallengeValidator().Validate

	v.FldValidators["client_side_defense_choice.client_side_defense"] = ClientSideDefenseTypeValidator().Validate

	v.FldValidators["ddos_detection_choice.enable_ddos_detection"] = EnableDDoSDetectionSettingValidator().Validate

	v.FldValidators["hash_policy_choice.cookie_stickiness"] = ves_io_schema_route.CookieForHashingValidator().Validate
	v.FldValidators["hash_policy_choice.ring_hash"] = HashPolicyListTypeValidator().Validate

	v.FldValidators["ip_reputation_choice.enable_ip_reputation"] = IPThreatCategoryListTypeValidator().Validate

	v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate

	v.FldValidators["loadbalancer_type.http"] = ProxyTypeHttpValidator().Validate
	v.FldValidators["loadbalancer_type.https"] = ProxyTypeHttpsValidator().Validate
	v.FldValidators["loadbalancer_type.https_auto_cert"] = ProxyTypeHttpsAutoCertsValidator().Validate

	v.FldValidators["ml_config_choice.single_lb_app"] = SingleLoadBalancerAppSettingValidator().Validate

	v.FldValidators["origin_pool_choice.default_pool"] = ves_io_schema_views_origin_pool.GlobalSpecTypeValidator().Validate
	v.FldValidators["origin_pool_choice.default_pool_list"] = ves_io_schema_views.OriginPoolListTypeValidator().Validate

	v.FldValidators["rate_limit_choice.rate_limit"] = RateLimitConfigTypeValidator().Validate
	v.FldValidators["rate_limit_choice.api_rate_limit"] = APIRateLimitValidator().Validate

	v.FldValidators["service_policy_choice.active_service_policies"] = ServicePolicyListValidator().Validate

	v.FldValidators["slow_ddos_mitigation_choice.slow_ddos_mitigation"] = ves_io_schema_virtual_host.SlowDDoSMitigationValidator().Validate

	v.FldValidators["trust_client_ip_headers_choice.enable_trust_client_ip_headers"] = ves_io_schema_virtual_host.ClientIPHeadersValidator().Validate

	v.FldValidators["user_id_choice.user_identification"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["waf_choice.app_firewall"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cors_policy"] = ves_io_schema.CorsPolicyValidator().Validate

	v.FldValidators["more_option"] = AdvancedOptionsTypeValidator().Validate

	v.FldValidators["malicious_user_mitigation"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_protection_rules"] = APIProtectionRulesValidator().Validate

	v.FldValidators["csrf_policy"] = ves_io_schema.CsrfPolicyValidator().Validate

	v.FldValidators["jwt_validation"] = JWTValidationValidator().Validate

	v.FldValidators["origin_server_subset_rule_list"] = OriginServerSubsetRuleListTypeValidator().Validate

	v.FldValidators["dns_info"] = ves_io_schema_virtual_host_dns_info.DnsInfoValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttps().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.https")
	}

	for idx, e := range m.GetRoutes() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting GlobalSpecType.routes idx %v", idx)
		}
	}

	if err := m.GetMoreOption().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.more_option")
	}

	if err := m.GetDefaultPool().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.default_pool")
	}

	if err := m.GetJwtValidation().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.jwt_validation")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvertiseChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAdvertiseChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiDefinitionChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDefinitionChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiProtectionRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiProtectionRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetBotDefenseChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetBotDefenseChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetChallengeTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetChallengeTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDefaultRoutePoolsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDefaultRoutePoolsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLoadbalancerTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLoadbalancerTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMaliciousUserMitigationDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMaliciousUserMitigationDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMoreOptionDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMoreOptionDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginPoolChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginServerSubsetRuleListDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginServerSubsetRuleListDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimitChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRateLimitChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRoutesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRoutesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServicePolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetServicePolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetUserIdChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetUserIdChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetWafChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetAdvertiseChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAdvertiseChoice() == nil {
		return nil, nil
	}
	switch m.GetAdvertiseChoice().(type) {
	case *GlobalSpecType_AdvertiseOnPublic:
		drInfos, err := m.GetAdvertiseOnPublic().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAdvertiseOnPublic().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "advertise_on_public." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_AdvertiseCustom:
		drInfos, err := m.GetAdvertiseCustom().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAdvertiseCustom().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "advertise_custom." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_DoNotAdvertise:

		return nil, nil

	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetApiDefinitionChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDefinitionChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDefinitionChoice().(type) {
	case *GlobalSpecType_ApiDefinitions:
		drInfos, err := m.GetApiDefinitions().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiDefinitions().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_definitions." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_ApiSpecification:
		drInfos, err := m.GetApiSpecification().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiSpecification().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_specification." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_DisableApiDefinition:

		return nil, nil

	case *GlobalSpecType_ApiDefinition:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetApiProtectionRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiProtectionRules() == nil {
		return nil, nil
	}

	drInfos, err := m.GetApiProtectionRules().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetApiProtectionRules().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "api_protection_rules." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetBotDefenseChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetBotDefenseChoice() == nil {
		return nil, nil
	}
	switch m.GetBotDefenseChoice().(type) {
	case *GlobalSpecType_DisableBotDefense:

		return nil, nil

	case *GlobalSpecType_BotDefense:

		return nil, nil

	case *GlobalSpecType_BotDefenseAdvanced:
		drInfos, err := m.GetBotDefenseAdvanced().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetBotDefenseAdvanced().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "bot_defense_advanced." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetChallengeTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetChallengeType() == nil {
		return nil, nil
	}
	switch m.GetChallengeType().(type) {
	case *GlobalSpecType_JsChallenge:

		return nil, nil

	case *GlobalSpecType_CaptchaChallenge:

		return nil, nil

	case *GlobalSpecType_NoChallenge:

		return nil, nil

	case *GlobalSpecType_PolicyBasedChallenge:
		drInfos, err := m.GetPolicyBasedChallenge().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPolicyBasedChallenge().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "policy_based_challenge." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_EnableChallenge:
		drInfos, err := m.GetEnableChallenge().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableChallenge().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_challenge." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetDefaultRoutePoolsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDefaultRoutePools() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetDefaultRoutePools() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultRoutePools() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("default_route_pools[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetLoadbalancerTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLoadbalancerType() == nil {
		return nil, nil
	}
	switch m.GetLoadbalancerType().(type) {
	case *GlobalSpecType_Http:

		return nil, nil

	case *GlobalSpecType_Https:
		drInfos, err := m.GetHttps().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttps().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_HttpsAutoCert:
		drInfos, err := m.GetHttpsAutoCert().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpsAutoCert().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https_auto_cert." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetMaliciousUserMitigationDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("malicious_user_mitigation.Object")
	dri := db.DRefInfo{
		RefdType:   "malicious_user_mitigation.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "malicious_user_mitigation",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetMaliciousUserMitigationDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetMaliciousUserMitigationDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "malicious_user_mitigation.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: malicious_user_mitigation")
	}

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "malicious_user_mitigation.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetMoreOptionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMoreOption() == nil {
		return nil, nil
	}

	drInfos, err := m.GetMoreOption().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetMoreOption().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "more_option." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetOriginPoolChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginPoolChoice() == nil {
		return nil, nil
	}
	switch m.GetOriginPoolChoice().(type) {
	case *GlobalSpecType_DefaultPool:
		drInfos, err := m.GetDefaultPool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultPool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "default_pool." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_DefaultPoolList:
		drInfos, err := m.GetDefaultPoolList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultPoolList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "default_pool_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetOriginServerSubsetRuleListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginServerSubsetRuleList() == nil {
		return nil, nil
	}

	drInfos, err := m.GetOriginServerSubsetRuleList().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetOriginServerSubsetRuleList().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "origin_server_subset_rule_list." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetRateLimitChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRateLimitChoice() == nil {
		return nil, nil
	}
	switch m.GetRateLimitChoice().(type) {
	case *GlobalSpecType_DisableRateLimit:

		return nil, nil

	case *GlobalSpecType_RateLimit:
		drInfos, err := m.GetRateLimit().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRateLimit().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rate_limit." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_ApiRateLimit:
		drInfos, err := m.GetApiRateLimit().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiRateLimit().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_rate_limit." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetRoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRoutes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRoutes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetServicePolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServicePolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetServicePolicyChoice().(type) {
	case *GlobalSpecType_ServicePoliciesFromNamespace:

		return nil, nil

	case *GlobalSpecType_NoServicePolicies:

		return nil, nil

	case *GlobalSpecType_ActiveServicePolicies:
		drInfos, err := m.GetActiveServicePolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveServicePolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_service_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetUserIdChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetUserIdChoice().(type) {
	case *GlobalSpecType_UserIdentification:

		vref := m.GetUserIdentification()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("user_identification.Object")
		dri := db.DRefInfo{
			RefdType:   "user_identification.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "user_identification",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *GlobalSpecType_UserIdClientIp:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetUserIdChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetUserIdChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetUserIdChoice().(type) {
	case *GlobalSpecType_UserIdentification:
		refdType, err := d.TypeForEntryKind("", "", "user_identification.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: user_identification")
		}

		vref := m.GetUserIdentification()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "user_identification.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GlobalSpecType_UserIdClientIp:

	}

	return entries, nil
}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *GlobalSpecType) GetWafChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetWafChoice().(type) {
	case *GlobalSpecType_DisableWaf:

		return nil, nil

	case *GlobalSpecType_AppFirewall:

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("app_firewall.Object")
		dri := db.DRefInfo{
			RefdType:   "app_firewall.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "app_firewall",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetWafChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetWafChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetWafChoice().(type) {
	case *GlobalSpecType_DisableWaf:

	case *GlobalSpecType_AppFirewall:
		refdType, err := d.TypeForEntryKind("", "", "app_firewall.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: app_firewall")
		}

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "app_firewall.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) AdvertiseChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for advertise_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ApiDefinitionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_definition_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ApiDiscoveryChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_discovery_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ChallengeTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_type")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DdosDetectionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ddos_detection_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) HostRewriteParamsHostRewriteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_HostRewrite, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_rewrite")
	}
	return oValidatorFn_HostRewrite, nil
}

func (v *ValidateGlobalSpecType) L7DdosAutoMitigationActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for l7_ddos_auto_mitigation_action")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) LoadbalancerTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for loadbalancer_type")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) MaliciousUserDetectionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for malicious_user_detection_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RateLimitChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rate_limit_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ServicePolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TrustClientIpHeadersChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for trust_client_ip_headers_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) UserIdChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for user_id_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) WafChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for waf_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DefaultRoutePoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for default_route_pools")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_route_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_route_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_route_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RouteType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RouteTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RouteType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RouteType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) WafExclusionRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for waf_exclusion_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleWafExclusionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.SimpleWafExclusionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for waf_exclusion_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleWafExclusionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleWafExclusionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated waf_exclusion_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items waf_exclusion_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) BlockedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for blocked_clients")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for blocked_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated blocked_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items blocked_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TrustedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for trusted_clients")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for trusted_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated trusted_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items trusted_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DdosMitigationRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ddos_mitigation_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*DDoSMitigationRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := DDoSMitigationRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ddos_mitigation_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DDoSMitigationRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DDoSMitigationRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ddos_mitigation_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ddos_mitigation_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DataGuardRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for data_guard_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleDataGuardRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.SimpleDataGuardRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for data_guard_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleDataGuardRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleDataGuardRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated data_guard_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items data_guard_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) GraphqlRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for graphql_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.GraphQLRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.GraphQLRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for graphql_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.GraphQLRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.GraphQLRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated graphql_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items graphql_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ProtectedCookiesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for protected_cookies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.CookieManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.CookieManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for protected_cookies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.CookieManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.CookieManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated protected_cookies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items protected_cookies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_location"]; exists {

		vOpts := append(opts, db.WithValidateField("add_location"))
		if err := fv(ctx, m.GetAddLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["advertise_choice"]; exists {
		val := m.GetAdvertiseChoice()
		vOpts := append(opts,
			db.WithValidateField("advertise_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdvertiseChoice().(type) {
	case *GlobalSpecType_AdvertiseOnPublic:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public"]; exists {
			val := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublic).AdvertiseOnPublic
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AdvertiseCustom:
		if fv, exists := v.FldValidators["advertise_choice.advertise_custom"]; exists {
			val := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseCustom).AdvertiseCustom
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DoNotAdvertise:
		if fv, exists := v.FldValidators["advertise_choice.do_not_advertise"]; exists {
			val := m.GetAdvertiseChoice().(*GlobalSpecType_DoNotAdvertise).DoNotAdvertise
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("do_not_advertise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public_default_vip"]; exists {
			val := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublicDefaultVip).AdvertiseOnPublicDefaultVip
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public_default_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_definition_choice"]; exists {
		val := m.GetApiDefinitionChoice()
		vOpts := append(opts,
			db.WithValidateField("api_definition_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDefinitionChoice().(type) {
	case *GlobalSpecType_ApiDefinitions:
		if fv, exists := v.FldValidators["api_definition_choice.api_definitions"]; exists {
			val := m.GetApiDefinitionChoice().(*GlobalSpecType_ApiDefinitions).ApiDefinitions
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_definitions"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ApiSpecification:
		if fv, exists := v.FldValidators["api_definition_choice.api_specification"]; exists {
			val := m.GetApiDefinitionChoice().(*GlobalSpecType_ApiSpecification).ApiSpecification
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_specification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DisableApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.disable_api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*GlobalSpecType_DisableApiDefinition).DisableApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("disable_api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*GlobalSpecType_ApiDefinition).ApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_discovery_choice"]; exists {
		val := m.GetApiDiscoveryChoice()
		vOpts := append(opts,
			db.WithValidateField("api_discovery_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDiscoveryChoice().(type) {
	case *GlobalSpecType_EnableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.enable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*GlobalSpecType_EnableApiDiscovery).EnableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("enable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DisableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.disable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*GlobalSpecType_DisableApiDiscovery).DisableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("disable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_protection_rules"]; exists {

		vOpts := append(opts, db.WithValidateField("api_protection_rules"))
		if err := fv(ctx, m.GetApiProtectionRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["auto_cert_info"]; exists {

		vOpts := append(opts, db.WithValidateField("auto_cert_info"))
		if err := fv(ctx, m.GetAutoCertInfo(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["auto_cert_state"]; exists {

		vOpts := append(opts, db.WithValidateField("auto_cert_state"))
		if err := fv(ctx, m.GetAutoCertState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("blocked_clients"))
		if err := fv(ctx, m.GetBlockedClients(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetBotDefenseChoice().(type) {
	case *GlobalSpecType_DisableBotDefense:
		if fv, exists := v.FldValidators["bot_defense_choice.disable_bot_defense"]; exists {
			val := m.GetBotDefenseChoice().(*GlobalSpecType_DisableBotDefense).DisableBotDefense
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("disable_bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_BotDefense:
		if fv, exists := v.FldValidators["bot_defense_choice.bot_defense"]; exists {
			val := m.GetBotDefenseChoice().(*GlobalSpecType_BotDefense).BotDefense
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_BotDefenseAdvanced:
		if fv, exists := v.FldValidators["bot_defense_choice.bot_defense_advanced"]; exists {
			val := m.GetBotDefenseChoice().(*GlobalSpecType_BotDefenseAdvanced).BotDefenseAdvanced
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("bot_defense_advanced"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["challenge_type"]; exists {
		val := m.GetChallengeType()
		vOpts := append(opts,
			db.WithValidateField("challenge_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChallengeType().(type) {
	case *GlobalSpecType_JsChallenge:
		if fv, exists := v.FldValidators["challenge_type.js_challenge"]; exists {
			val := m.GetChallengeType().(*GlobalSpecType_JsChallenge).JsChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_CaptchaChallenge:
		if fv, exists := v.FldValidators["challenge_type.captcha_challenge"]; exists {
			val := m.GetChallengeType().(*GlobalSpecType_CaptchaChallenge).CaptchaChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("captcha_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NoChallenge:
		if fv, exists := v.FldValidators["challenge_type.no_challenge"]; exists {
			val := m.GetChallengeType().(*GlobalSpecType_NoChallenge).NoChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("no_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_PolicyBasedChallenge:
		if fv, exists := v.FldValidators["challenge_type.policy_based_challenge"]; exists {
			val := m.GetChallengeType().(*GlobalSpecType_PolicyBasedChallenge).PolicyBasedChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("policy_based_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EnableChallenge:
		if fv, exists := v.FldValidators["challenge_type.enable_challenge"]; exists {
			val := m.GetChallengeType().(*GlobalSpecType_EnableChallenge).EnableChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("enable_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetClientSideDefenseChoice().(type) {
	case *GlobalSpecType_DisableClientSideDefense:
		if fv, exists := v.FldValidators["client_side_defense_choice.disable_client_side_defense"]; exists {
			val := m.GetClientSideDefenseChoice().(*GlobalSpecType_DisableClientSideDefense).DisableClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("client_side_defense_choice"),
				db.WithValidateField("disable_client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ClientSideDefense:
		if fv, exists := v.FldValidators["client_side_defense_choice.client_side_defense"]; exists {
			val := m.GetClientSideDefenseChoice().(*GlobalSpecType_ClientSideDefense).ClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("client_side_defense_choice"),
				db.WithValidateField("client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cors_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("cors_policy"))
		if err := fv(ctx, m.GetCorsPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["csrf_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("csrf_policy"))
		if err := fv(ctx, m.GetCsrfPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["data_guard_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("data_guard_rules"))
		if err := fv(ctx, m.GetDataGuardRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ddos_detection_choice"]; exists {
		val := m.GetDdosDetectionChoice()
		vOpts := append(opts,
			db.WithValidateField("ddos_detection_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDdosDetectionChoice().(type) {
	case *GlobalSpecType_EnableDdosDetection:
		if fv, exists := v.FldValidators["ddos_detection_choice.enable_ddos_detection"]; exists {
			val := m.GetDdosDetectionChoice().(*GlobalSpecType_EnableDdosDetection).EnableDdosDetection
			vOpts := append(opts,
				db.WithValidateField("ddos_detection_choice"),
				db.WithValidateField("enable_ddos_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DisableDdosDetection:
		if fv, exists := v.FldValidators["ddos_detection_choice.disable_ddos_detection"]; exists {
			val := m.GetDdosDetectionChoice().(*GlobalSpecType_DisableDdosDetection).DisableDdosDetection
			vOpts := append(opts,
				db.WithValidateField("ddos_detection_choice"),
				db.WithValidateField("disable_ddos_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ddos_mitigation_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("ddos_mitigation_rules"))
		if err := fv(ctx, m.GetDdosMitigationRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_route_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("default_route_pools"))
		if err := fv(ctx, m.GetDefaultRoutePools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["dns_info"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_info"))
		for idx, item := range m.GetDnsInfo() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["downstream_tls_certificate_expiration_timestamps"]; exists {

		vOpts := append(opts, db.WithValidateField("downstream_tls_certificate_expiration_timestamps"))
		for idx, item := range m.GetDownstreamTlsCertificateExpirationTimestamps() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["graphql_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("graphql_rules"))
		if err := fv(ctx, m.GetGraphqlRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *GlobalSpecType_RoundRobin:
		if fv, exists := v.FldValidators["hash_policy_choice.round_robin"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_RoundRobin).RoundRobin
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("round_robin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LeastActive:
		if fv, exists := v.FldValidators["hash_policy_choice.least_active"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_LeastActive).LeastActive
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("least_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Random:
		if fv, exists := v.FldValidators["hash_policy_choice.random"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_Random).Random
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("random"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SourceIpStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.source_ip_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_SourceIpStickiness).SourceIpStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("source_ip_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_CookieStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.cookie_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_CookieStickiness).CookieStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("cookie_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_RingHash:
		if fv, exists := v.FldValidators["hash_policy_choice.ring_hash"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_RingHash).RingHash
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("ring_hash"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["host_name"]; exists {

		vOpts := append(opts, db.WithValidateField("host_name"))
		if err := fv(ctx, m.GetHostName(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetHostRewriteParams().(type) {
	case *GlobalSpecType_AutoHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.auto_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*GlobalSpecType_AutoHostRewrite).AutoHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("auto_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_HostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*GlobalSpecType_HostRewrite).HostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DisableHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.disable_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*GlobalSpecType_DisableHostRewrite).DisableHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("disable_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["internet_vip_info"]; exists {

		vOpts := append(opts, db.WithValidateField("internet_vip_info"))
		for idx, item := range m.GetInternetVipInfo() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetIpReputationChoice().(type) {
	case *GlobalSpecType_DisableIpReputation:
		if fv, exists := v.FldValidators["ip_reputation_choice.disable_ip_reputation"]; exists {
			val := m.GetIpReputationChoice().(*GlobalSpecType_DisableIpReputation).DisableIpReputation
			vOpts := append(opts,
				db.WithValidateField("ip_reputation_choice"),
				db.WithValidateField("disable_ip_reputation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EnableIpReputation:
		if fv, exists := v.FldValidators["ip_reputation_choice.enable_ip_reputation"]; exists {
			val := m.GetIpReputationChoice().(*GlobalSpecType_EnableIpReputation).EnableIpReputation
			vOpts := append(opts,
				db.WithValidateField("ip_reputation_choice"),
				db.WithValidateField("enable_ip_reputation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["jwt_validation"]; exists {

		vOpts := append(opts, db.WithValidateField("jwt_validation"))
		if err := fv(ctx, m.GetJwtValidation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action"]; exists {
		val := m.GetL7DdosAutoMitigationAction()
		vOpts := append(opts,
			db.WithValidateField("l7_ddos_auto_mitigation_action"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetL7DdosAutoMitigationAction().(type) {
	case *GlobalSpecType_L7DdosActionDefault:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_default"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionDefault).L7DdosActionDefault
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_L7DdosActionBlock:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_block"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionBlock).L7DdosActionBlock
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_block"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_L7DdosActionJsChallenge:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_js_challenge"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionJsChallenge).L7DdosActionJsChallenge
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_L7DdosActionNone:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_none"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*GlobalSpecType_L7DdosActionNone).L7DdosActionNone
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["loadbalancer_type"]; exists {
		val := m.GetLoadbalancerType()
		vOpts := append(opts,
			db.WithValidateField("loadbalancer_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLoadbalancerType().(type) {
	case *GlobalSpecType_Http:
		if fv, exists := v.FldValidators["loadbalancer_type.http"]; exists {
			val := m.GetLoadbalancerType().(*GlobalSpecType_Http).Http
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("http"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_Https:
		if fv, exists := v.FldValidators["loadbalancer_type.https"]; exists {
			val := m.GetLoadbalancerType().(*GlobalSpecType_Https).Https
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_HttpsAutoCert:
		if fv, exists := v.FldValidators["loadbalancer_type.https_auto_cert"]; exists {
			val := m.GetLoadbalancerType().(*GlobalSpecType_HttpsAutoCert).HttpsAutoCert
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https_auto_cert"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_detection_choice"]; exists {
		val := m.GetMaliciousUserDetectionChoice()
		vOpts := append(opts,
			db.WithValidateField("malicious_user_detection_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMaliciousUserDetectionChoice().(type) {
	case *GlobalSpecType_EnableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.enable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*GlobalSpecType_EnableMaliciousUserDetection).EnableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("enable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DisableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.disable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*GlobalSpecType_DisableMaliciousUserDetection).DisableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("disable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_mitigation"]; exists {

		vOpts := append(opts, db.WithValidateField("malicious_user_mitigation"))
		if err := fv(ctx, m.GetMaliciousUserMitigation(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetMlConfigChoice().(type) {
	case *GlobalSpecType_SingleLbApp:
		if fv, exists := v.FldValidators["ml_config_choice.single_lb_app"]; exists {
			val := m.GetMlConfigChoice().(*GlobalSpecType_SingleLbApp).SingleLbApp
			vOpts := append(opts,
				db.WithValidateField("ml_config_choice"),
				db.WithValidateField("single_lb_app"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_MultiLbApp:
		if fv, exists := v.FldValidators["ml_config_choice.multi_lb_app"]; exists {
			val := m.GetMlConfigChoice().(*GlobalSpecType_MultiLbApp).MultiLbApp
			vOpts := append(opts,
				db.WithValidateField("ml_config_choice"),
				db.WithValidateField("multi_lb_app"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["more_option"]; exists {

		vOpts := append(opts, db.WithValidateField("more_option"))
		if err := fv(ctx, m.GetMoreOption(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetOriginPoolChoice().(type) {
	case *GlobalSpecType_DefaultPool:
		if fv, exists := v.FldValidators["origin_pool_choice.default_pool"]; exists {
			val := m.GetOriginPoolChoice().(*GlobalSpecType_DefaultPool).DefaultPool
			vOpts := append(opts,
				db.WithValidateField("origin_pool_choice"),
				db.WithValidateField("default_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DefaultPoolList:
		if fv, exists := v.FldValidators["origin_pool_choice.default_pool_list"]; exists {
			val := m.GetOriginPoolChoice().(*GlobalSpecType_DefaultPoolList).DefaultPoolList
			vOpts := append(opts,
				db.WithValidateField("origin_pool_choice"),
				db.WithValidateField("default_pool_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["origin_server_subset_rule_list"]; exists {

		vOpts := append(opts, db.WithValidateField("origin_server_subset_rule_list"))
		if err := fv(ctx, m.GetOriginServerSubsetRuleList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protected_cookies"]; exists {
		vOpts := append(opts, db.WithValidateField("protected_cookies"))
		if err := fv(ctx, m.GetProtectedCookies(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limit_choice"]; exists {
		val := m.GetRateLimitChoice()
		vOpts := append(opts,
			db.WithValidateField("rate_limit_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRateLimitChoice().(type) {
	case *GlobalSpecType_DisableRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.disable_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*GlobalSpecType_DisableRateLimit).DisableRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("disable_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_RateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*GlobalSpecType_RateLimit).RateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ApiRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.api_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*GlobalSpecType_ApiRateLimit).ApiRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("api_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["routes"]; exists {
		vOpts := append(opts, db.WithValidateField("routes"))
		if err := fv(ctx, m.GetRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service_policy_choice"]; exists {
		val := m.GetServicePolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("service_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServicePolicyChoice().(type) {
	case *GlobalSpecType_ServicePoliciesFromNamespace:
		if fv, exists := v.FldValidators["service_policy_choice.service_policies_from_namespace"]; exists {
			val := m.GetServicePolicyChoice().(*GlobalSpecType_ServicePoliciesFromNamespace).ServicePoliciesFromNamespace
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("service_policies_from_namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NoServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.no_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*GlobalSpecType_NoServicePolicies).NoServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("no_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ActiveServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.active_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*GlobalSpecType_ActiveServicePolicies).ActiveServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("active_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetSlowDdosMitigationChoice().(type) {
	case *GlobalSpecType_SlowDdosMitigation:
		if fv, exists := v.FldValidators["slow_ddos_mitigation_choice.slow_ddos_mitigation"]; exists {
			val := m.GetSlowDdosMitigationChoice().(*GlobalSpecType_SlowDdosMitigation).SlowDdosMitigation
			vOpts := append(opts,
				db.WithValidateField("slow_ddos_mitigation_choice"),
				db.WithValidateField("slow_ddos_mitigation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SystemDefaultTimeouts:
		if fv, exists := v.FldValidators["slow_ddos_mitigation_choice.system_default_timeouts"]; exists {
			val := m.GetSlowDdosMitigationChoice().(*GlobalSpecType_SystemDefaultTimeouts).SystemDefaultTimeouts
			vOpts := append(opts,
				db.WithValidateField("slow_ddos_mitigation_choice"),
				db.WithValidateField("system_default_timeouts"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["state"]; exists {

		vOpts := append(opts, db.WithValidateField("state"))
		if err := fv(ctx, m.GetState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["trust_client_ip_headers_choice"]; exists {
		val := m.GetTrustClientIpHeadersChoice()
		vOpts := append(opts,
			db.WithValidateField("trust_client_ip_headers_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTrustClientIpHeadersChoice().(type) {
	case *GlobalSpecType_DisableTrustClientIpHeaders:
		if fv, exists := v.FldValidators["trust_client_ip_headers_choice.disable_trust_client_ip_headers"]; exists {
			val := m.GetTrustClientIpHeadersChoice().(*GlobalSpecType_DisableTrustClientIpHeaders).DisableTrustClientIpHeaders
			vOpts := append(opts,
				db.WithValidateField("trust_client_ip_headers_choice"),
				db.WithValidateField("disable_trust_client_ip_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EnableTrustClientIpHeaders:
		if fv, exists := v.FldValidators["trust_client_ip_headers_choice.enable_trust_client_ip_headers"]; exists {
			val := m.GetTrustClientIpHeadersChoice().(*GlobalSpecType_EnableTrustClientIpHeaders).EnableTrustClientIpHeaders
			vOpts := append(opts,
				db.WithValidateField("trust_client_ip_headers_choice"),
				db.WithValidateField("enable_trust_client_ip_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["trusted_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("trusted_clients"))
		if err := fv(ctx, m.GetTrustedClients(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_id_choice"]; exists {
		val := m.GetUserIdChoice()
		vOpts := append(opts,
			db.WithValidateField("user_id_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetUserIdChoice().(type) {
	case *GlobalSpecType_UserIdentification:
		if fv, exists := v.FldValidators["user_id_choice.user_identification"]; exists {
			val := m.GetUserIdChoice().(*GlobalSpecType_UserIdentification).UserIdentification
			vOpts := append(opts,
				db.WithValidateField("user_id_choice"),
				db.WithValidateField("user_identification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_UserIdClientIp:
		if fv, exists := v.FldValidators["user_id_choice.user_id_client_ip"]; exists {
			val := m.GetUserIdChoice().(*GlobalSpecType_UserIdClientIp).UserIdClientIp
			vOpts := append(opts,
				db.WithValidateField("user_id_choice"),
				db.WithValidateField("user_id_client_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["waf_choice"]; exists {
		val := m.GetWafChoice()
		vOpts := append(opts,
			db.WithValidateField("waf_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWafChoice().(type) {
	case *GlobalSpecType_DisableWaf:
		if fv, exists := v.FldValidators["waf_choice.disable_waf"]; exists {
			val := m.GetWafChoice().(*GlobalSpecType_DisableWaf).DisableWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("disable_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AppFirewall:
		if fv, exists := v.FldValidators["waf_choice.app_firewall"]; exists {
			val := m.GetWafChoice().(*GlobalSpecType_AppFirewall).AppFirewall
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("app_firewall"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_exclusion_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("waf_exclusion_rules"))
		if err := fv(ctx, m.GetWafExclusionRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdvertiseChoice := v.AdvertiseChoiceValidationRuleHandler
	rulesAdvertiseChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdvertiseChoice(rulesAdvertiseChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.advertise_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["advertise_choice"] = vFn

	vrhApiDefinitionChoice := v.ApiDefinitionChoiceValidationRuleHandler
	rulesApiDefinitionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDefinitionChoice(rulesApiDefinitionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.api_definition_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_definition_choice"] = vFn

	vrhApiDiscoveryChoice := v.ApiDiscoveryChoiceValidationRuleHandler
	rulesApiDiscoveryChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDiscoveryChoice(rulesApiDiscoveryChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.api_discovery_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_discovery_choice"] = vFn

	vrhChallengeType := v.ChallengeTypeValidationRuleHandler
	rulesChallengeType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChallengeType(rulesChallengeType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.challenge_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_type"] = vFn

	vrhDdosDetectionChoice := v.DdosDetectionChoiceValidationRuleHandler
	rulesDdosDetectionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDdosDetectionChoice(rulesDdosDetectionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ddos_detection_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ddos_detection_choice"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhHostRewriteParamsHostRewrite := v.HostRewriteParamsHostRewriteValidationRuleHandler
	rulesHostRewriteParamsHostRewrite := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
	}
	vFnMap["host_rewrite_params.host_rewrite"], err = vrhHostRewriteParamsHostRewrite(rulesHostRewriteParamsHostRewrite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field GlobalSpecType.host_rewrite_params_host_rewrite: %s", err)
		panic(errMsg)
	}

	v.FldValidators["host_rewrite_params.host_rewrite"] = vFnMap["host_rewrite_params.host_rewrite"]

	vrhL7DdosAutoMitigationAction := v.L7DdosAutoMitigationActionValidationRuleHandler
	rulesL7DdosAutoMitigationAction := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhL7DdosAutoMitigationAction(rulesL7DdosAutoMitigationAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.l7_ddos_auto_mitigation_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["l7_ddos_auto_mitigation_action"] = vFn

	vrhLoadbalancerType := v.LoadbalancerTypeValidationRuleHandler
	rulesLoadbalancerType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLoadbalancerType(rulesLoadbalancerType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.loadbalancer_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_type"] = vFn

	vrhMaliciousUserDetectionChoice := v.MaliciousUserDetectionChoiceValidationRuleHandler
	rulesMaliciousUserDetectionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMaliciousUserDetectionChoice(rulesMaliciousUserDetectionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.malicious_user_detection_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["malicious_user_detection_choice"] = vFn

	vrhRateLimitChoice := v.RateLimitChoiceValidationRuleHandler
	rulesRateLimitChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRateLimitChoice(rulesRateLimitChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.rate_limit_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limit_choice"] = vFn

	vrhServicePolicyChoice := v.ServicePolicyChoiceValidationRuleHandler
	rulesServicePolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServicePolicyChoice(rulesServicePolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.service_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_policy_choice"] = vFn

	vrhTrustClientIpHeadersChoice := v.TrustClientIpHeadersChoiceValidationRuleHandler
	rulesTrustClientIpHeadersChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTrustClientIpHeadersChoice(rulesTrustClientIpHeadersChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.trust_client_ip_headers_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trust_client_ip_headers_choice"] = vFn

	vrhUserIdChoice := v.UserIdChoiceValidationRuleHandler
	rulesUserIdChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhUserIdChoice(rulesUserIdChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.user_id_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user_id_choice"] = vFn

	vrhWafChoice := v.WafChoiceValidationRuleHandler
	rulesWafChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWafChoice(rulesWafChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.waf_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhDefaultRoutePools := v.DefaultRoutePoolsValidationRuleHandler
	rulesDefaultRoutePools := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDefaultRoutePools(rulesDefaultRoutePools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.default_route_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_route_pools"] = vFn

	vrhRoutes := v.RoutesValidationRuleHandler
	rulesRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRoutes(rulesRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routes"] = vFn

	vrhWafExclusionRules := v.WafExclusionRulesValidationRuleHandler
	rulesWafExclusionRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhWafExclusionRules(rulesWafExclusionRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.waf_exclusion_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_exclusion_rules"] = vFn

	vrhBlockedClients := v.BlockedClientsValidationRuleHandler
	rulesBlockedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhBlockedClients(rulesBlockedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.blocked_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_clients"] = vFn

	vrhTrustedClients := v.TrustedClientsValidationRuleHandler
	rulesTrustedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhTrustedClients(rulesTrustedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.trusted_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trusted_clients"] = vFn

	vrhDdosMitigationRules := v.DdosMitigationRulesValidationRuleHandler
	rulesDdosMitigationRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDdosMitigationRules(rulesDdosMitigationRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.ddos_mitigation_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ddos_mitigation_rules"] = vFn

	vrhDataGuardRules := v.DataGuardRulesValidationRuleHandler
	rulesDataGuardRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDataGuardRules(rulesDataGuardRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.data_guard_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["data_guard_rules"] = vFn

	vrhGraphqlRules := v.GraphqlRulesValidationRuleHandler
	rulesGraphqlRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhGraphqlRules(rulesGraphqlRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.graphql_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["graphql_rules"] = vFn

	vrhProtectedCookies := v.ProtectedCookiesValidationRuleHandler
	rulesProtectedCookies := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhProtectedCookies(rulesProtectedCookies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.protected_cookies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protected_cookies"] = vFn

	v.FldValidators["advertise_choice.advertise_on_public"] = ves_io_schema_views.AdvertisePublicValidator().Validate
	v.FldValidators["advertise_choice.advertise_custom"] = ves_io_schema_views.AdvertiseCustomValidator().Validate

	v.FldValidators["api_definition_choice.api_definitions"] = ApiDefinitionListValidator().Validate
	v.FldValidators["api_definition_choice.api_specification"] = APISpecificationSettingsValidator().Validate
	v.FldValidators["api_definition_choice.api_definition"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_discovery_choice.enable_api_discovery"] = ApiDiscoverySettingValidator().Validate

	v.FldValidators["bot_defense_choice.bot_defense"] = ShapeBotDefenseTypeValidator().Validate
	v.FldValidators["bot_defense_choice.bot_defense_advanced"] = BotDefenseAdvancedTypeValidator().Validate

	v.FldValidators["challenge_type.js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.captcha_challenge"] = ves_io_schema_virtual_host.CaptchaChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.policy_based_challenge"] = PolicyBasedChallengeValidator().Validate
	v.FldValidators["challenge_type.enable_challenge"] = EnableChallengeValidator().Validate

	v.FldValidators["client_side_defense_choice.client_side_defense"] = ClientSideDefenseTypeValidator().Validate

	v.FldValidators["ddos_detection_choice.enable_ddos_detection"] = EnableDDoSDetectionSettingValidator().Validate

	v.FldValidators["hash_policy_choice.cookie_stickiness"] = ves_io_schema_route.CookieForHashingValidator().Validate
	v.FldValidators["hash_policy_choice.ring_hash"] = HashPolicyListTypeValidator().Validate

	v.FldValidators["ip_reputation_choice.enable_ip_reputation"] = IPThreatCategoryListTypeValidator().Validate

	v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate

	v.FldValidators["loadbalancer_type.http"] = ProxyTypeHttpValidator().Validate
	v.FldValidators["loadbalancer_type.https"] = ProxyTypeHttpsValidator().Validate
	v.FldValidators["loadbalancer_type.https_auto_cert"] = ProxyTypeHttpsAutoCertsValidator().Validate

	v.FldValidators["ml_config_choice.single_lb_app"] = SingleLoadBalancerAppSettingValidator().Validate

	v.FldValidators["origin_pool_choice.default_pool"] = ves_io_schema_views_origin_pool.GlobalSpecTypeValidator().Validate
	v.FldValidators["origin_pool_choice.default_pool_list"] = ves_io_schema_views.OriginPoolListTypeValidator().Validate

	v.FldValidators["rate_limit_choice.rate_limit"] = RateLimitConfigTypeValidator().Validate
	v.FldValidators["rate_limit_choice.api_rate_limit"] = APIRateLimitValidator().Validate

	v.FldValidators["service_policy_choice.active_service_policies"] = ServicePolicyListValidator().Validate

	v.FldValidators["slow_ddos_mitigation_choice.slow_ddos_mitigation"] = ves_io_schema_virtual_host.SlowDDoSMitigationValidator().Validate

	v.FldValidators["trust_client_ip_headers_choice.enable_trust_client_ip_headers"] = ves_io_schema_virtual_host.ClientIPHeadersValidator().Validate

	v.FldValidators["user_id_choice.user_identification"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["waf_choice.app_firewall"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cors_policy"] = ves_io_schema.CorsPolicyValidator().Validate

	v.FldValidators["more_option"] = AdvancedOptionsTypeValidator().Validate

	v.FldValidators["malicious_user_mitigation"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_protection_rules"] = APIProtectionRulesValidator().Validate

	v.FldValidators["csrf_policy"] = ves_io_schema.CsrfPolicyValidator().Validate

	v.FldValidators["jwt_validation"] = JWTValidationValidator().Validate

	v.FldValidators["origin_server_subset_rule_list"] = OriginServerSubsetRuleListTypeValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["dns_info"] = ves_io_schema_virtual_host_dns_info.DnsInfoValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *HashPolicyListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HashPolicyListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *HashPolicyListType) DeepCopy() *HashPolicyListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HashPolicyListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HashPolicyListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HashPolicyListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HashPolicyListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateHashPolicyListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHashPolicyListType) HashPolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for hash_policy")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_route.HashPolicyType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_route.HashPolicyTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for hash_policy")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_route.HashPolicyType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_route.HashPolicyType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated hash_policy")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items hash_policy")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHashPolicyListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HashPolicyListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HashPolicyListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["hash_policy"]; exists {
		vOpts := append(opts, db.WithValidateField("hash_policy"))
		if err := fv(ctx, m.GetHashPolicy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHashPolicyListTypeValidator = func() *ValidateHashPolicyListType {
	v := &ValidateHashPolicyListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHashPolicy := v.HashPolicyValidationRuleHandler
	rulesHashPolicy := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhHashPolicy(rulesHashPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HashPolicyListType.hash_policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy"] = vFn

	return v
}()

func HashPolicyListTypeValidator() db.Validator {
	return DefaultHashPolicyListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *HttpHeaderMatcherList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *HttpHeaderMatcherList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *HttpHeaderMatcherList) DeepCopy() *HttpHeaderMatcherList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &HttpHeaderMatcherList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *HttpHeaderMatcherList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *HttpHeaderMatcherList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return HttpHeaderMatcherListValidator().Validate(ctx, m, opts...)
}

type ValidateHttpHeaderMatcherList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateHttpHeaderMatcherList) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for headers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.HeaderMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateHttpHeaderMatcherList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*HttpHeaderMatcherList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *HttpHeaderMatcherList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultHttpHeaderMatcherListValidator = func() *ValidateHttpHeaderMatcherList {
	v := &ValidateHttpHeaderMatcherList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for HttpHeaderMatcherList.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	return v
}()

func HttpHeaderMatcherListValidator() db.Validator {
	return DefaultHttpHeaderMatcherListValidator
}

// augmented methods on protoc/std generated struct

func (m *IPThreatCategoryListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *IPThreatCategoryListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *IPThreatCategoryListType) DeepCopy() *IPThreatCategoryListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &IPThreatCategoryListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *IPThreatCategoryListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *IPThreatCategoryListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return IPThreatCategoryListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateIPThreatCategoryListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateIPThreatCategoryListType) IpThreatCategoriesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.IPThreatCategory)
		return int32(i)
	}
	// ves_io_schema_policy.IPThreatCategory_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_policy.IPThreatCategory_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_threat_categories")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_policy.IPThreatCategory, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ip_threat_categories")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_policy.IPThreatCategory)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_policy.IPThreatCategory, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ip_threat_categories")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ip_threat_categories")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateIPThreatCategoryListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*IPThreatCategoryListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *IPThreatCategoryListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ip_threat_categories"]; exists {
		vOpts := append(opts, db.WithValidateField("ip_threat_categories"))
		if err := fv(ctx, m.GetIpThreatCategories(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultIPThreatCategoryListTypeValidator = func() *ValidateIPThreatCategoryListType {
	v := &ValidateIPThreatCategoryListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIpThreatCategories := v.IpThreatCategoriesValidationRuleHandler
	rulesIpThreatCategories := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhIpThreatCategories(rulesIpThreatCategories)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for IPThreatCategoryListType.ip_threat_categories: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_threat_categories"] = vFn

	return v
}()

func IPThreatCategoryListTypeValidator() db.Validator {
	return DefaultIPThreatCategoryListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *InlineRateLimiter) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *InlineRateLimiter) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *InlineRateLimiter) DeepCopy() *InlineRateLimiter {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &InlineRateLimiter{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *InlineRateLimiter) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *InlineRateLimiter) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return InlineRateLimiterValidator().Validate(ctx, m, opts...)
}

func (m *InlineRateLimiter) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetCountByChoiceDRefInfo()

}

func (m *InlineRateLimiter) GetCountByChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetCountByChoice().(type) {
	case *InlineRateLimiter_UseHttpLbUserId:

		return nil, nil

	case *InlineRateLimiter_RefUserId:

		vref := m.GetRefUserId()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("user_identification.Object")
		dri := db.DRefInfo{
			RefdType:   "user_identification.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "ref_user_id",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetCountByChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *InlineRateLimiter) GetCountByChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetCountByChoice().(type) {
	case *InlineRateLimiter_UseHttpLbUserId:

	case *InlineRateLimiter_RefUserId:
		refdType, err := d.TypeForEntryKind("", "", "user_identification.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: user_identification")
		}

		vref := m.GetRefUserId()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "user_identification.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateInlineRateLimiter struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateInlineRateLimiter) CountByChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for count_by_choice")
	}
	return validatorFn, nil
}

func (v *ValidateInlineRateLimiter) ThresholdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for threshold")
	}

	return validatorFn, nil
}

func (v *ValidateInlineRateLimiter) UnitValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_rate_limiter.RateLimitPeriodUnit)
		return int32(i)
	}
	// ves_io_schema_rate_limiter.RateLimitPeriodUnit_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_rate_limiter.RateLimitPeriodUnit_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for unit")
	}

	return validatorFn, nil
}

func (v *ValidateInlineRateLimiter) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*InlineRateLimiter)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *InlineRateLimiter got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["count_by_choice"]; exists {
		val := m.GetCountByChoice()
		vOpts := append(opts,
			db.WithValidateField("count_by_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCountByChoice().(type) {
	case *InlineRateLimiter_UseHttpLbUserId:
		if fv, exists := v.FldValidators["count_by_choice.use_http_lb_user_id"]; exists {
			val := m.GetCountByChoice().(*InlineRateLimiter_UseHttpLbUserId).UseHttpLbUserId
			vOpts := append(opts,
				db.WithValidateField("count_by_choice"),
				db.WithValidateField("use_http_lb_user_id"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *InlineRateLimiter_RefUserId:
		if fv, exists := v.FldValidators["count_by_choice.ref_user_id"]; exists {
			val := m.GetCountByChoice().(*InlineRateLimiter_RefUserId).RefUserId
			vOpts := append(opts,
				db.WithValidateField("count_by_choice"),
				db.WithValidateField("ref_user_id"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["threshold"]; exists {

		vOpts := append(opts, db.WithValidateField("threshold"))
		if err := fv(ctx, m.GetThreshold(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["unit"]; exists {

		vOpts := append(opts, db.WithValidateField("unit"))
		if err := fv(ctx, m.GetUnit(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultInlineRateLimiterValidator = func() *ValidateInlineRateLimiter {
	v := &ValidateInlineRateLimiter{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCountByChoice := v.CountByChoiceValidationRuleHandler
	rulesCountByChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCountByChoice(rulesCountByChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for InlineRateLimiter.count_by_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["count_by_choice"] = vFn

	vrhThreshold := v.ThresholdValidationRuleHandler
	rulesThreshold := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.uint32.gt":        "0",
		"ves.io.schema.rules.uint32.lte":       "8192",
	}
	vFn, err = vrhThreshold(rulesThreshold)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for InlineRateLimiter.threshold: %s", err)
		panic(errMsg)
	}
	v.FldValidators["threshold"] = vFn

	vrhUnit := v.UnitValidationRuleHandler
	rulesUnit := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhUnit(rulesUnit)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for InlineRateLimiter.unit: %s", err)
		panic(errMsg)
	}
	v.FldValidators["unit"] = vFn

	v.FldValidators["count_by_choice.ref_user_id"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func InlineRateLimiterValidator() db.Validator {
	return DefaultInlineRateLimiterValidator
}

// augmented methods on protoc/std generated struct

func (m *JWKS) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *JWKS) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *JWKS) String() string {
	if m == nil {
		return ""
	}
	copy := m.DeepCopy()
	copy.Cleartext = ""

	return copy.string()
}

func (m *JWKS) GoString() string {
	copy := m.DeepCopy()
	copy.Cleartext = ""

	return copy.goString()
}

// Redact squashes sensitive info in m (in-place)
func (m *JWKS) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	m.Cleartext = ""

	return nil
}

func (m *JWKS) DeepCopy() *JWKS {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &JWKS{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *JWKS) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *JWKS) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return JWKSValidator().Validate(ctx, m, opts...)
}

type ValidateJWKS struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateJWKS) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*JWKS)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *JWKS got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cleartext"]; exists {

		vOpts := append(opts, db.WithValidateField("cleartext"))
		if err := fv(ctx, m.GetCleartext(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultJWKSValidator = func() *ValidateJWKS {
	v := &ValidateJWKS{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func JWKSValidator() db.Validator {
	return DefaultJWKSValidator
}

// augmented methods on protoc/std generated struct

func (m *JWTValidation) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *JWTValidation) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *JWTValidation) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetJwksConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting JWTValidation.jwks_config")
	}

	return nil
}

func (m *JWTValidation) DeepCopy() *JWTValidation {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &JWTValidation{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *JWTValidation) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *JWTValidation) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return JWTValidationValidator().Validate(ctx, m, opts...)
}

type ValidateJWTValidation struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateJWTValidation) JwksConfigurationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for jwks_configuration")
	}
	return validatorFn, nil
}

func (v *ValidateJWTValidation) TargetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for target")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := TargetValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateJWTValidation) TokenLocationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for token_location")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := TokenLocationValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateJWTValidation) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for action")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.ActionValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateJWTValidation) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*JWTValidation)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *JWTValidation got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["jwks_configuration"]; exists {
		val := m.GetJwksConfiguration()
		vOpts := append(opts,
			db.WithValidateField("jwks_configuration"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetJwksConfiguration().(type) {
	case *JWTValidation_AuthServerUri:
		if fv, exists := v.FldValidators["jwks_configuration.auth_server_uri"]; exists {
			val := m.GetJwksConfiguration().(*JWTValidation_AuthServerUri).AuthServerUri
			vOpts := append(opts,
				db.WithValidateField("jwks_configuration"),
				db.WithValidateField("auth_server_uri"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *JWTValidation_Jwks:
		if fv, exists := v.FldValidators["jwks_configuration.jwks"]; exists {
			val := m.GetJwksConfiguration().(*JWTValidation_Jwks).Jwks
			vOpts := append(opts,
				db.WithValidateField("jwks_configuration"),
				db.WithValidateField("jwks"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *JWTValidation_JwksConfig:
		if fv, exists := v.FldValidators["jwks_configuration.jwks_config"]; exists {
			val := m.GetJwksConfiguration().(*JWTValidation_JwksConfig).JwksConfig
			vOpts := append(opts,
				db.WithValidateField("jwks_configuration"),
				db.WithValidateField("jwks_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["mandatory_claims"]; exists {

		vOpts := append(opts, db.WithValidateField("mandatory_claims"))
		if err := fv(ctx, m.GetMandatoryClaims(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["reserved_claims"]; exists {

		vOpts := append(opts, db.WithValidateField("reserved_claims"))
		if err := fv(ctx, m.GetReservedClaims(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["target"]; exists {

		vOpts := append(opts, db.WithValidateField("target"))
		if err := fv(ctx, m.GetTarget(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["token_location"]; exists {

		vOpts := append(opts, db.WithValidateField("token_location"))
		if err := fv(ctx, m.GetTokenLocation(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultJWTValidationValidator = func() *ValidateJWTValidation {
	v := &ValidateJWTValidation{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhJwksConfiguration := v.JwksConfigurationValidationRuleHandler
	rulesJwksConfiguration := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhJwksConfiguration(rulesJwksConfiguration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for JWTValidation.jwks_configuration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["jwks_configuration"] = vFn

	vrhTarget := v.TargetValidationRuleHandler
	rulesTarget := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhTarget(rulesTarget)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for JWTValidation.target: %s", err)
		panic(errMsg)
	}
	v.FldValidators["target"] = vFn

	vrhTokenLocation := v.TokenLocationValidationRuleHandler
	rulesTokenLocation := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhTokenLocation(rulesTokenLocation)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for JWTValidation.token_location: %s", err)
		panic(errMsg)
	}
	v.FldValidators["token_location"] = vFn

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for JWTValidation.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	v.FldValidators["reserved_claims"] = ReservedClaimsValidator().Validate

	v.FldValidators["mandatory_claims"] = MandatoryClaimsValidator().Validate

	return v
}()

func JWTValidationValidator() db.Validator {
	return DefaultJWTValidationValidator
}

// augmented methods on protoc/std generated struct

func (m *MandatoryClaims) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MandatoryClaims) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MandatoryClaims) DeepCopy() *MandatoryClaims {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MandatoryClaims{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MandatoryClaims) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MandatoryClaims) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MandatoryClaimsValidator().Validate(ctx, m, opts...)
}

type ValidateMandatoryClaims struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMandatoryClaims) ClaimNamesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for claim_names")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for claim_names")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated claim_names")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items claim_names")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateMandatoryClaims) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MandatoryClaims)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MandatoryClaims got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["claim_names"]; exists {
		vOpts := append(opts, db.WithValidateField("claim_names"))
		if err := fv(ctx, m.GetClaimNames(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMandatoryClaimsValidator = func() *ValidateMandatoryClaims {
	v := &ValidateMandatoryClaims{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhClaimNames := v.ClaimNamesValidationRuleHandler
	rulesClaimNames := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhClaimNames(rulesClaimNames)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MandatoryClaims.claim_names: %s", err)
		panic(errMsg)
	}
	v.FldValidators["claim_names"] = vFn

	return v
}()

func MandatoryClaimsValidator() db.Validator {
	return DefaultMandatoryClaimsValidator
}

// augmented methods on protoc/std generated struct

func (m *MirrorPolicyType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MirrorPolicyType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MirrorPolicyType) DeepCopy() *MirrorPolicyType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MirrorPolicyType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MirrorPolicyType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MirrorPolicyType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MirrorPolicyTypeValidator().Validate(ctx, m, opts...)
}

func (m *MirrorPolicyType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetOriginPoolDRefInfo()

}

func (m *MirrorPolicyType) GetOriginPoolDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetOriginPool()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("origin_pool.Object")
	dri := db.DRefInfo{
		RefdType:   "origin_pool.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "origin_pool",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetOriginPoolDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *MirrorPolicyType) GetOriginPoolDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "origin_pool.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: origin_pool")
	}

	vref := m.GetOriginPool()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "origin_pool.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateMirrorPolicyType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMirrorPolicyType) OriginPoolValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for origin_pool")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateMirrorPolicyType) PercentValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for percent")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.FractionalPercentValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateMirrorPolicyType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MirrorPolicyType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MirrorPolicyType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["origin_pool"]; exists {

		vOpts := append(opts, db.WithValidateField("origin_pool"))
		if err := fv(ctx, m.GetOriginPool(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["percent"]; exists {

		vOpts := append(opts, db.WithValidateField("percent"))
		if err := fv(ctx, m.GetPercent(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMirrorPolicyTypeValidator = func() *ValidateMirrorPolicyType {
	v := &ValidateMirrorPolicyType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhOriginPool := v.OriginPoolValidationRuleHandler
	rulesOriginPool := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhOriginPool(rulesOriginPool)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MirrorPolicyType.origin_pool: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_pool"] = vFn

	vrhPercent := v.PercentValidationRuleHandler
	rulesPercent := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPercent(rulesPercent)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MirrorPolicyType.percent: %s", err)
		panic(errMsg)
	}
	v.FldValidators["percent"] = vFn

	return v
}()

func MirrorPolicyTypeValidator() db.Validator {
	return DefaultMirrorPolicyTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *MobileSDKConfigType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MobileSDKConfigType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MobileSDKConfigType) DeepCopy() *MobileSDKConfigType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MobileSDKConfigType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MobileSDKConfigType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MobileSDKConfigType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MobileSDKConfigTypeValidator().Validate(ctx, m, opts...)
}

type ValidateMobileSDKConfigType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMobileSDKConfigType) ReloadHeaderNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for reload_header_name")
	}

	return validatorFn, nil
}

func (v *ValidateMobileSDKConfigType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MobileSDKConfigType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MobileSDKConfigType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["mobile_identifier"]; exists {

		vOpts := append(opts, db.WithValidateField("mobile_identifier"))
		if err := fv(ctx, m.GetMobileIdentifier(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["reload_header_name"]; exists {

		vOpts := append(opts, db.WithValidateField("reload_header_name"))
		if err := fv(ctx, m.GetReloadHeaderName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMobileSDKConfigTypeValidator = func() *ValidateMobileSDKConfigType {
	v := &ValidateMobileSDKConfigType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhReloadHeaderName := v.ReloadHeaderNameValidationRuleHandler
	rulesReloadHeaderName := map[string]string{
		"ves.io.schema.rules.message.required":         "true",
		"ves.io.schema.rules.string.http_header_field": "true",
		"ves.io.schema.rules.string.max_bytes":         "256",
	}
	vFn, err = vrhReloadHeaderName(rulesReloadHeaderName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MobileSDKConfigType.reload_header_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["reload_header_name"] = vFn

	v.FldValidators["mobile_identifier"] = MobileTrafficIdentifierTypeValidator().Validate

	return v
}()

func MobileSDKConfigTypeValidator() db.Validator {
	return DefaultMobileSDKConfigTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *MobileTrafficIdentifierType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MobileTrafficIdentifierType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MobileTrafficIdentifierType) DeepCopy() *MobileTrafficIdentifierType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MobileTrafficIdentifierType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MobileTrafficIdentifierType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MobileTrafficIdentifierType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MobileTrafficIdentifierTypeValidator().Validate(ctx, m, opts...)
}

type ValidateMobileTrafficIdentifierType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMobileTrafficIdentifierType) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for headers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.HeaderMatcherTypeBasic, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.HeaderMatcherTypeBasicValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.HeaderMatcherTypeBasic)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.HeaderMatcherTypeBasic, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateMobileTrafficIdentifierType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MobileTrafficIdentifierType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MobileTrafficIdentifierType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMobileTrafficIdentifierTypeValidator = func() *ValidateMobileTrafficIdentifierType {
	v := &ValidateMobileTrafficIdentifierType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for MobileTrafficIdentifierType.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	return v
}()

func MobileTrafficIdentifierTypeValidator() db.Validator {
	return DefaultMobileTrafficIdentifierTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *OpenApiFallThroughMode) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OpenApiFallThroughMode) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OpenApiFallThroughMode) DeepCopy() *OpenApiFallThroughMode {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OpenApiFallThroughMode{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OpenApiFallThroughMode) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OpenApiFallThroughMode) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OpenApiFallThroughModeValidator().Validate(ctx, m, opts...)
}

type ValidateOpenApiFallThroughMode struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOpenApiFallThroughMode) FallThroughModeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for fall_through_mode_choice")
	}
	return validatorFn, nil
}

func (v *ValidateOpenApiFallThroughMode) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OpenApiFallThroughMode)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OpenApiFallThroughMode got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["fall_through_mode_choice"]; exists {
		val := m.GetFallThroughModeChoice()
		vOpts := append(opts,
			db.WithValidateField("fall_through_mode_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFallThroughModeChoice().(type) {
	case *OpenApiFallThroughMode_FallThroughModeAllow:
		if fv, exists := v.FldValidators["fall_through_mode_choice.fall_through_mode_allow"]; exists {
			val := m.GetFallThroughModeChoice().(*OpenApiFallThroughMode_FallThroughModeAllow).FallThroughModeAllow
			vOpts := append(opts,
				db.WithValidateField("fall_through_mode_choice"),
				db.WithValidateField("fall_through_mode_allow"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *OpenApiFallThroughMode_FallThroughModeCustom:
		if fv, exists := v.FldValidators["fall_through_mode_choice.fall_through_mode_custom"]; exists {
			val := m.GetFallThroughModeChoice().(*OpenApiFallThroughMode_FallThroughModeCustom).FallThroughModeCustom
			vOpts := append(opts,
				db.WithValidateField("fall_through_mode_choice"),
				db.WithValidateField("fall_through_mode_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOpenApiFallThroughModeValidator = func() *ValidateOpenApiFallThroughMode {
	v := &ValidateOpenApiFallThroughMode{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFallThroughModeChoice := v.FallThroughModeChoiceValidationRuleHandler
	rulesFallThroughModeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFallThroughModeChoice(rulesFallThroughModeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpenApiFallThroughMode.fall_through_mode_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["fall_through_mode_choice"] = vFn

	v.FldValidators["fall_through_mode_choice.fall_through_mode_custom"] = CustomFallThroughModeValidator().Validate

	return v
}()

func OpenApiFallThroughModeValidator() db.Validator {
	return DefaultOpenApiFallThroughModeValidator
}

// augmented methods on protoc/std generated struct

func (m *OpenApiValidationAllSpecEndpointsSettings) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OpenApiValidationAllSpecEndpointsSettings) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OpenApiValidationAllSpecEndpointsSettings) DeepCopy() *OpenApiValidationAllSpecEndpointsSettings {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OpenApiValidationAllSpecEndpointsSettings{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OpenApiValidationAllSpecEndpointsSettings) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OpenApiValidationAllSpecEndpointsSettings) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OpenApiValidationAllSpecEndpointsSettingsValidator().Validate(ctx, m, opts...)
}

type ValidateOpenApiValidationAllSpecEndpointsSettings struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOpenApiValidationAllSpecEndpointsSettings) ValidationModeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for validation_mode")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := OpenApiValidationModeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateOpenApiValidationAllSpecEndpointsSettings) FallThroughModeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for fall_through_mode")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := OpenApiFallThroughModeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateOpenApiValidationAllSpecEndpointsSettings) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OpenApiValidationAllSpecEndpointsSettings)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OpenApiValidationAllSpecEndpointsSettings got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["fall_through_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("fall_through_mode"))
		if err := fv(ctx, m.GetFallThroughMode(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetOversizedBodyChoice().(type) {
	case *OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation:
		if fv, exists := v.FldValidators["oversized_body_choice.oversized_body_skip_validation"]; exists {
			val := m.GetOversizedBodyChoice().(*OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation).OversizedBodySkipValidation
			vOpts := append(opts,
				db.WithValidateField("oversized_body_choice"),
				db.WithValidateField("oversized_body_skip_validation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation:
		if fv, exists := v.FldValidators["oversized_body_choice.oversized_body_fail_validation"]; exists {
			val := m.GetOversizedBodyChoice().(*OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation).OversizedBodyFailValidation
			vOpts := append(opts,
				db.WithValidateField("oversized_body_choice"),
				db.WithValidateField("oversized_body_fail_validation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["settings"]; exists {

		vOpts := append(opts, db.WithValidateField("settings"))
		if err := fv(ctx, m.GetSettings(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["validation_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("validation_mode"))
		if err := fv(ctx, m.GetValidationMode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOpenApiValidationAllSpecEndpointsSettingsValidator = func() *ValidateOpenApiValidationAllSpecEndpointsSettings {
	v := &ValidateOpenApiValidationAllSpecEndpointsSettings{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhValidationMode := v.ValidationModeValidationRuleHandler
	rulesValidationMode := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhValidationMode(rulesValidationMode)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpenApiValidationAllSpecEndpointsSettings.validation_mode: %s", err)
		panic(errMsg)
	}
	v.FldValidators["validation_mode"] = vFn

	vrhFallThroughMode := v.FallThroughModeValidationRuleHandler
	rulesFallThroughMode := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhFallThroughMode(rulesFallThroughMode)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpenApiValidationAllSpecEndpointsSettings.fall_through_mode: %s", err)
		panic(errMsg)
	}
	v.FldValidators["fall_through_mode"] = vFn

	v.FldValidators["settings"] = OpenApiValidationCommonSettingsValidator().Validate

	return v
}()

func OpenApiValidationAllSpecEndpointsSettingsValidator() db.Validator {
	return DefaultOpenApiValidationAllSpecEndpointsSettingsValidator
}

// augmented methods on protoc/std generated struct

func (m *OpenApiValidationCommonSettings) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OpenApiValidationCommonSettings) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OpenApiValidationCommonSettings) DeepCopy() *OpenApiValidationCommonSettings {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OpenApiValidationCommonSettings{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OpenApiValidationCommonSettings) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OpenApiValidationCommonSettings) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OpenApiValidationCommonSettingsValidator().Validate(ctx, m, opts...)
}

type ValidateOpenApiValidationCommonSettings struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOpenApiValidationCommonSettings) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OpenApiValidationCommonSettings)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OpenApiValidationCommonSettings got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetOversizedBodyChoice().(type) {
	case *OpenApiValidationCommonSettings_OversizedBodySkipValidation:
		if fv, exists := v.FldValidators["oversized_body_choice.oversized_body_skip_validation"]; exists {
			val := m.GetOversizedBodyChoice().(*OpenApiValidationCommonSettings_OversizedBodySkipValidation).OversizedBodySkipValidation
			vOpts := append(opts,
				db.WithValidateField("oversized_body_choice"),
				db.WithValidateField("oversized_body_skip_validation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *OpenApiValidationCommonSettings_OversizedBodyFailValidation:
		if fv, exists := v.FldValidators["oversized_body_choice.oversized_body_fail_validation"]; exists {
			val := m.GetOversizedBodyChoice().(*OpenApiValidationCommonSettings_OversizedBodyFailValidation).OversizedBodyFailValidation
			vOpts := append(opts,
				db.WithValidateField("oversized_body_choice"),
				db.WithValidateField("oversized_body_fail_validation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetPropertyValidationSettingsChoice().(type) {
	case *OpenApiValidationCommonSettings_PropertyValidationSettingsDefault:
		if fv, exists := v.FldValidators["property_validation_settings_choice.property_validation_settings_default"]; exists {
			val := m.GetPropertyValidationSettingsChoice().(*OpenApiValidationCommonSettings_PropertyValidationSettingsDefault).PropertyValidationSettingsDefault
			vOpts := append(opts,
				db.WithValidateField("property_validation_settings_choice"),
				db.WithValidateField("property_validation_settings_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *OpenApiValidationCommonSettings_PropertyValidationSettingsCustom:
		if fv, exists := v.FldValidators["property_validation_settings_choice.property_validation_settings_custom"]; exists {
			val := m.GetPropertyValidationSettingsChoice().(*OpenApiValidationCommonSettings_PropertyValidationSettingsCustom).PropertyValidationSettingsCustom
			vOpts := append(opts,
				db.WithValidateField("property_validation_settings_choice"),
				db.WithValidateField("property_validation_settings_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOpenApiValidationCommonSettingsValidator = func() *ValidateOpenApiValidationCommonSettings {
	v := &ValidateOpenApiValidationCommonSettings{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["property_validation_settings_choice.property_validation_settings_custom"] = ValidationPropertySettingValidator().Validate

	return v
}()

func OpenApiValidationCommonSettingsValidator() db.Validator {
	return DefaultOpenApiValidationCommonSettingsValidator
}

// augmented methods on protoc/std generated struct

func (m *OpenApiValidationMode) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OpenApiValidationMode) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OpenApiValidationMode) DeepCopy() *OpenApiValidationMode {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OpenApiValidationMode{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OpenApiValidationMode) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OpenApiValidationMode) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OpenApiValidationModeValidator().Validate(ctx, m, opts...)
}

type ValidateOpenApiValidationMode struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOpenApiValidationMode) ResponseValidationModeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for response_validation_mode_choice")
	}
	return validatorFn, nil
}

func (v *ValidateOpenApiValidationMode) ValidationModeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for validation_mode_choice")
	}
	return validatorFn, nil
}

func (v *ValidateOpenApiValidationMode) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OpenApiValidationMode)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OpenApiValidationMode got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["response_validation_mode_choice"]; exists {
		val := m.GetResponseValidationModeChoice()
		vOpts := append(opts,
			db.WithValidateField("response_validation_mode_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetResponseValidationModeChoice().(type) {
	case *OpenApiValidationMode_SkipResponseValidation:
		if fv, exists := v.FldValidators["response_validation_mode_choice.skip_response_validation"]; exists {
			val := m.GetResponseValidationModeChoice().(*OpenApiValidationMode_SkipResponseValidation).SkipResponseValidation
			vOpts := append(opts,
				db.WithValidateField("response_validation_mode_choice"),
				db.WithValidateField("skip_response_validation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *OpenApiValidationMode_ResponseValidationModeActive:
		if fv, exists := v.FldValidators["response_validation_mode_choice.response_validation_mode_active"]; exists {
			val := m.GetResponseValidationModeChoice().(*OpenApiValidationMode_ResponseValidationModeActive).ResponseValidationModeActive
			vOpts := append(opts,
				db.WithValidateField("response_validation_mode_choice"),
				db.WithValidateField("response_validation_mode_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["validation_mode_choice"]; exists {
		val := m.GetValidationModeChoice()
		vOpts := append(opts,
			db.WithValidateField("validation_mode_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetValidationModeChoice().(type) {
	case *OpenApiValidationMode_ValidationModeActive:
		if fv, exists := v.FldValidators["validation_mode_choice.validation_mode_active"]; exists {
			val := m.GetValidationModeChoice().(*OpenApiValidationMode_ValidationModeActive).ValidationModeActive
			vOpts := append(opts,
				db.WithValidateField("validation_mode_choice"),
				db.WithValidateField("validation_mode_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *OpenApiValidationMode_SkipValidation:
		if fv, exists := v.FldValidators["validation_mode_choice.skip_validation"]; exists {
			val := m.GetValidationModeChoice().(*OpenApiValidationMode_SkipValidation).SkipValidation
			vOpts := append(opts,
				db.WithValidateField("validation_mode_choice"),
				db.WithValidateField("skip_validation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOpenApiValidationModeValidator = func() *ValidateOpenApiValidationMode {
	v := &ValidateOpenApiValidationMode{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhResponseValidationModeChoice := v.ResponseValidationModeChoiceValidationRuleHandler
	rulesResponseValidationModeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhResponseValidationModeChoice(rulesResponseValidationModeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpenApiValidationMode.response_validation_mode_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["response_validation_mode_choice"] = vFn

	vrhValidationModeChoice := v.ValidationModeChoiceValidationRuleHandler
	rulesValidationModeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhValidationModeChoice(rulesValidationModeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpenApiValidationMode.validation_mode_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["validation_mode_choice"] = vFn

	v.FldValidators["response_validation_mode_choice.response_validation_mode_active"] = OpenApiValidationModeActiveResponseValidator().Validate

	v.FldValidators["validation_mode_choice.validation_mode_active"] = OpenApiValidationModeActiveValidator().Validate

	return v
}()

func OpenApiValidationModeValidator() db.Validator {
	return DefaultOpenApiValidationModeValidator
}

// augmented methods on protoc/std generated struct

func (m *OpenApiValidationModeActive) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OpenApiValidationModeActive) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OpenApiValidationModeActive) DeepCopy() *OpenApiValidationModeActive {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OpenApiValidationModeActive{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OpenApiValidationModeActive) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OpenApiValidationModeActive) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OpenApiValidationModeActiveValidator().Validate(ctx, m, opts...)
}

type ValidateOpenApiValidationModeActive struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOpenApiValidationModeActive) ValidationEnforcementTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for validation_enforcement_type")
	}
	return validatorFn, nil
}

func (v *ValidateOpenApiValidationModeActive) RequestValidationPropertiesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.OpenApiValidationProperties)
		return int32(i)
	}
	// ves_io_schema.OpenApiValidationProperties_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.OpenApiValidationProperties_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for request_validation_properties")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.OpenApiValidationProperties, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for request_validation_properties")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.OpenApiValidationProperties)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.OpenApiValidationProperties, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated request_validation_properties")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items request_validation_properties")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateOpenApiValidationModeActive) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OpenApiValidationModeActive)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OpenApiValidationModeActive got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["request_validation_properties"]; exists {
		vOpts := append(opts, db.WithValidateField("request_validation_properties"))
		if err := fv(ctx, m.GetRequestValidationProperties(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["validation_enforcement_type"]; exists {
		val := m.GetValidationEnforcementType()
		vOpts := append(opts,
			db.WithValidateField("validation_enforcement_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetValidationEnforcementType().(type) {
	case *OpenApiValidationModeActive_EnforcementReport:
		if fv, exists := v.FldValidators["validation_enforcement_type.enforcement_report"]; exists {
			val := m.GetValidationEnforcementType().(*OpenApiValidationModeActive_EnforcementReport).EnforcementReport
			vOpts := append(opts,
				db.WithValidateField("validation_enforcement_type"),
				db.WithValidateField("enforcement_report"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *OpenApiValidationModeActive_EnforcementBlock:
		if fv, exists := v.FldValidators["validation_enforcement_type.enforcement_block"]; exists {
			val := m.GetValidationEnforcementType().(*OpenApiValidationModeActive_EnforcementBlock).EnforcementBlock
			vOpts := append(opts,
				db.WithValidateField("validation_enforcement_type"),
				db.WithValidateField("enforcement_block"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOpenApiValidationModeActiveValidator = func() *ValidateOpenApiValidationModeActive {
	v := &ValidateOpenApiValidationModeActive{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhValidationEnforcementType := v.ValidationEnforcementTypeValidationRuleHandler
	rulesValidationEnforcementType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhValidationEnforcementType(rulesValidationEnforcementType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpenApiValidationModeActive.validation_enforcement_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["validation_enforcement_type"] = vFn

	vrhRequestValidationProperties := v.RequestValidationPropertiesValidationRuleHandler
	rulesRequestValidationProperties := map[string]string{
		"ves.io.schema.rules.message.required":                 "true",
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.items.enum.not_in":       "[7]",
		"ves.io.schema.rules.repeated.min_items":               "1",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhRequestValidationProperties(rulesRequestValidationProperties)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpenApiValidationModeActive.request_validation_properties: %s", err)
		panic(errMsg)
	}
	v.FldValidators["request_validation_properties"] = vFn

	return v
}()

func OpenApiValidationModeActiveValidator() db.Validator {
	return DefaultOpenApiValidationModeActiveValidator
}

// augmented methods on protoc/std generated struct

func (m *OpenApiValidationModeActiveResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OpenApiValidationModeActiveResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OpenApiValidationModeActiveResponse) DeepCopy() *OpenApiValidationModeActiveResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OpenApiValidationModeActiveResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OpenApiValidationModeActiveResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OpenApiValidationModeActiveResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OpenApiValidationModeActiveResponseValidator().Validate(ctx, m, opts...)
}

type ValidateOpenApiValidationModeActiveResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOpenApiValidationModeActiveResponse) ValidationEnforcementTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for validation_enforcement_type")
	}
	return validatorFn, nil
}

func (v *ValidateOpenApiValidationModeActiveResponse) ResponseValidationPropertiesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.OpenApiValidationProperties)
		return int32(i)
	}
	// ves_io_schema.OpenApiValidationProperties_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.OpenApiValidationProperties_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for response_validation_properties")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.OpenApiValidationProperties, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for response_validation_properties")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.OpenApiValidationProperties)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.OpenApiValidationProperties, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated response_validation_properties")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items response_validation_properties")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateOpenApiValidationModeActiveResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OpenApiValidationModeActiveResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OpenApiValidationModeActiveResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["response_validation_properties"]; exists {
		vOpts := append(opts, db.WithValidateField("response_validation_properties"))
		if err := fv(ctx, m.GetResponseValidationProperties(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["validation_enforcement_type"]; exists {
		val := m.GetValidationEnforcementType()
		vOpts := append(opts,
			db.WithValidateField("validation_enforcement_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetValidationEnforcementType().(type) {
	case *OpenApiValidationModeActiveResponse_EnforcementReport:
		if fv, exists := v.FldValidators["validation_enforcement_type.enforcement_report"]; exists {
			val := m.GetValidationEnforcementType().(*OpenApiValidationModeActiveResponse_EnforcementReport).EnforcementReport
			vOpts := append(opts,
				db.WithValidateField("validation_enforcement_type"),
				db.WithValidateField("enforcement_report"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *OpenApiValidationModeActiveResponse_EnforcementBlock:
		if fv, exists := v.FldValidators["validation_enforcement_type.enforcement_block"]; exists {
			val := m.GetValidationEnforcementType().(*OpenApiValidationModeActiveResponse_EnforcementBlock).EnforcementBlock
			vOpts := append(opts,
				db.WithValidateField("validation_enforcement_type"),
				db.WithValidateField("enforcement_block"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOpenApiValidationModeActiveResponseValidator = func() *ValidateOpenApiValidationModeActiveResponse {
	v := &ValidateOpenApiValidationModeActiveResponse{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhValidationEnforcementType := v.ValidationEnforcementTypeValidationRuleHandler
	rulesValidationEnforcementType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhValidationEnforcementType(rulesValidationEnforcementType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpenApiValidationModeActiveResponse.validation_enforcement_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["validation_enforcement_type"] = vFn

	vrhResponseValidationProperties := v.ResponseValidationPropertiesValidationRuleHandler
	rulesResponseValidationProperties := map[string]string{
		"ves.io.schema.rules.message.required":                 "true",
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.items.enum.in":           "[2,4,5,7]",
		"ves.io.schema.rules.repeated.min_items":               "1",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhResponseValidationProperties(rulesResponseValidationProperties)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpenApiValidationModeActiveResponse.response_validation_properties: %s", err)
		panic(errMsg)
	}
	v.FldValidators["response_validation_properties"] = vFn

	return v
}()

func OpenApiValidationModeActiveResponseValidator() db.Validator {
	return DefaultOpenApiValidationModeActiveResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *OpenApiValidationRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OpenApiValidationRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OpenApiValidationRule) DeepCopy() *OpenApiValidationRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OpenApiValidationRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OpenApiValidationRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OpenApiValidationRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OpenApiValidationRuleValidator().Validate(ctx, m, opts...)
}

type ValidateOpenApiValidationRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOpenApiValidationRule) ConditionTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for condition_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateOpenApiValidationRule) ConditionTypeChoiceBasePathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_BasePath, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for base_path")
	}
	return oValidatorFn_BasePath, nil
}
func (v *ValidateOpenApiValidationRule) ConditionTypeChoiceApiGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ApiGroup, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_group")
	}
	return oValidatorFn_ApiGroup, nil
}

func (v *ValidateOpenApiValidationRule) DomainChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain_choice")
	}
	return validatorFn, nil
}

func (v *ValidateOpenApiValidationRule) DomainChoiceSpecificDomainValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_SpecificDomain, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for specific_domain")
	}
	return oValidatorFn_SpecificDomain, nil
}

func (v *ValidateOpenApiValidationRule) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateOpenApiValidationRule) ValidationModeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for validation_mode")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := OpenApiValidationModeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateOpenApiValidationRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OpenApiValidationRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OpenApiValidationRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["condition_type_choice"]; exists {
		val := m.GetConditionTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("condition_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetConditionTypeChoice().(type) {
	case *OpenApiValidationRule_BasePath:
		if fv, exists := v.FldValidators["condition_type_choice.base_path"]; exists {
			val := m.GetConditionTypeChoice().(*OpenApiValidationRule_BasePath).BasePath
			vOpts := append(opts,
				db.WithValidateField("condition_type_choice"),
				db.WithValidateField("base_path"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *OpenApiValidationRule_ApiGroup:
		if fv, exists := v.FldValidators["condition_type_choice.api_group"]; exists {
			val := m.GetConditionTypeChoice().(*OpenApiValidationRule_ApiGroup).ApiGroup
			vOpts := append(opts,
				db.WithValidateField("condition_type_choice"),
				db.WithValidateField("api_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *OpenApiValidationRule_ApiEndpoint:
		if fv, exists := v.FldValidators["condition_type_choice.api_endpoint"]; exists {
			val := m.GetConditionTypeChoice().(*OpenApiValidationRule_ApiEndpoint).ApiEndpoint
			vOpts := append(opts,
				db.WithValidateField("condition_type_choice"),
				db.WithValidateField("api_endpoint"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["domain_choice"]; exists {
		val := m.GetDomainChoice()
		vOpts := append(opts,
			db.WithValidateField("domain_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDomainChoice().(type) {
	case *OpenApiValidationRule_AnyDomain:
		if fv, exists := v.FldValidators["domain_choice.any_domain"]; exists {
			val := m.GetDomainChoice().(*OpenApiValidationRule_AnyDomain).AnyDomain
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("any_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *OpenApiValidationRule_SpecificDomain:
		if fv, exists := v.FldValidators["domain_choice.specific_domain"]; exists {
			val := m.GetDomainChoice().(*OpenApiValidationRule_SpecificDomain).SpecificDomain
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("specific_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["validation_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("validation_mode"))
		if err := fv(ctx, m.GetValidationMode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOpenApiValidationRuleValidator = func() *ValidateOpenApiValidationRule {
	v := &ValidateOpenApiValidationRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhConditionTypeChoice := v.ConditionTypeChoiceValidationRuleHandler
	rulesConditionTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhConditionTypeChoice(rulesConditionTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpenApiValidationRule.condition_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["condition_type_choice"] = vFn

	vrhConditionTypeChoiceBasePath := v.ConditionTypeChoiceBasePathValidationRuleHandler
	rulesConditionTypeChoiceBasePath := map[string]string{
		"ves.io.schema.rules.string.http_path": "true",
		"ves.io.schema.rules.string.max_len":   "128",
	}
	vFnMap["condition_type_choice.base_path"], err = vrhConditionTypeChoiceBasePath(rulesConditionTypeChoiceBasePath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field OpenApiValidationRule.condition_type_choice_base_path: %s", err)
		panic(errMsg)
	}
	vrhConditionTypeChoiceApiGroup := v.ConditionTypeChoiceApiGroupValidationRuleHandler
	rulesConditionTypeChoiceApiGroup := map[string]string{
		"ves.io.schema.rules.string.max_len": "128",
	}
	vFnMap["condition_type_choice.api_group"], err = vrhConditionTypeChoiceApiGroup(rulesConditionTypeChoiceApiGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field OpenApiValidationRule.condition_type_choice_api_group: %s", err)
		panic(errMsg)
	}

	v.FldValidators["condition_type_choice.base_path"] = vFnMap["condition_type_choice.base_path"]
	v.FldValidators["condition_type_choice.api_group"] = vFnMap["condition_type_choice.api_group"]

	vrhDomainChoice := v.DomainChoiceValidationRuleHandler
	rulesDomainChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDomainChoice(rulesDomainChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpenApiValidationRule.domain_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_choice"] = vFn

	vrhDomainChoiceSpecificDomain := v.DomainChoiceSpecificDomainValidationRuleHandler
	rulesDomainChoiceSpecificDomain := map[string]string{
		"ves.io.schema.rules.string.max_len":   "128",
		"ves.io.schema.rules.string.vh_domain": "true",
	}
	vFnMap["domain_choice.specific_domain"], err = vrhDomainChoiceSpecificDomain(rulesDomainChoiceSpecificDomain)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field OpenApiValidationRule.domain_choice_specific_domain: %s", err)
		panic(errMsg)
	}

	v.FldValidators["domain_choice.specific_domain"] = vFnMap["domain_choice.specific_domain"]

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpenApiValidationRule.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhValidationMode := v.ValidationModeValidationRuleHandler
	rulesValidationMode := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhValidationMode(rulesValidationMode)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OpenApiValidationRule.validation_mode: %s", err)
		panic(errMsg)
	}
	v.FldValidators["validation_mode"] = vFn

	v.FldValidators["condition_type_choice.api_endpoint"] = ApiEndpointDetailsValidator().Validate

	return v
}()

func OpenApiValidationRuleValidator() db.Validator {
	return DefaultOpenApiValidationRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *OriginServerSubsetRuleListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *OriginServerSubsetRuleListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *OriginServerSubsetRuleListType) DeepCopy() *OriginServerSubsetRuleListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &OriginServerSubsetRuleListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *OriginServerSubsetRuleListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *OriginServerSubsetRuleListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return OriginServerSubsetRuleListTypeValidator().Validate(ctx, m, opts...)
}

func (m *OriginServerSubsetRuleListType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetOriginServerSubsetRulesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *OriginServerSubsetRuleListType) GetOriginServerSubsetRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginServerSubsetRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetOriginServerSubsetRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOriginServerSubsetRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("origin_server_subset_rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateOriginServerSubsetRuleListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateOriginServerSubsetRuleListType) OriginServerSubsetRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for origin_server_subset_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.OriginServerSubsetRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.OriginServerSubsetRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for origin_server_subset_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.OriginServerSubsetRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.OriginServerSubsetRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated origin_server_subset_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items origin_server_subset_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateOriginServerSubsetRuleListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*OriginServerSubsetRuleListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *OriginServerSubsetRuleListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["origin_server_subset_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("origin_server_subset_rules"))
		if err := fv(ctx, m.GetOriginServerSubsetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultOriginServerSubsetRuleListTypeValidator = func() *ValidateOriginServerSubsetRuleListType {
	v := &ValidateOriginServerSubsetRuleListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhOriginServerSubsetRules := v.OriginServerSubsetRulesValidationRuleHandler
	rulesOriginServerSubsetRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhOriginServerSubsetRules(rulesOriginServerSubsetRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for OriginServerSubsetRuleListType.origin_server_subset_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_server_subset_rules"] = vFn

	return v
}()

func OriginServerSubsetRuleListTypeValidator() db.Validator {
	return DefaultOriginServerSubsetRuleListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *PolicyBasedChallenge) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PolicyBasedChallenge) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PolicyBasedChallenge) DeepCopy() *PolicyBasedChallenge {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PolicyBasedChallenge{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PolicyBasedChallenge) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PolicyBasedChallenge) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PolicyBasedChallengeValidator().Validate(ctx, m, opts...)
}

func (m *PolicyBasedChallenge) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetMaliciousUserMitigationChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMaliciousUserMitigationChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRuleListDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRuleListDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *PolicyBasedChallenge) GetMaliciousUserMitigationChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetMaliciousUserMitigationChoice().(type) {
	case *PolicyBasedChallenge_DefaultMitigationSettings:

		return nil, nil

	case *PolicyBasedChallenge_MaliciousUserMitigation:

		vref := m.GetMaliciousUserMitigation()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("malicious_user_mitigation.Object")
		dri := db.DRefInfo{
			RefdType:   "malicious_user_mitigation.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "malicious_user_mitigation",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetMaliciousUserMitigationChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *PolicyBasedChallenge) GetMaliciousUserMitigationChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetMaliciousUserMitigationChoice().(type) {
	case *PolicyBasedChallenge_DefaultMitigationSettings:

	case *PolicyBasedChallenge_MaliciousUserMitigation:
		refdType, err := d.TypeForEntryKind("", "", "malicious_user_mitigation.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: malicious_user_mitigation")
		}

		vref := m.GetMaliciousUserMitigation()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "malicious_user_mitigation.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *PolicyBasedChallenge) GetRuleListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRuleList() == nil {
		return nil, nil
	}

	drInfos, err := m.GetRuleList().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetRuleList().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "rule_list." + dri.DRField
	}
	return drInfos, err

}

type ValidatePolicyBasedChallenge struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePolicyBasedChallenge) ChallengeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_choice")
	}
	return validatorFn, nil
}

func (v *ValidatePolicyBasedChallenge) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PolicyBasedChallenge)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PolicyBasedChallenge got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetCaptchaChallengeParametersChoice().(type) {
	case *PolicyBasedChallenge_DefaultCaptchaChallengeParameters:
		if fv, exists := v.FldValidators["captcha_challenge_parameters_choice.default_captcha_challenge_parameters"]; exists {
			val := m.GetCaptchaChallengeParametersChoice().(*PolicyBasedChallenge_DefaultCaptchaChallengeParameters).DefaultCaptchaChallengeParameters
			vOpts := append(opts,
				db.WithValidateField("captcha_challenge_parameters_choice"),
				db.WithValidateField("default_captcha_challenge_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PolicyBasedChallenge_CaptchaChallengeParameters:
		if fv, exists := v.FldValidators["captcha_challenge_parameters_choice.captcha_challenge_parameters"]; exists {
			val := m.GetCaptchaChallengeParametersChoice().(*PolicyBasedChallenge_CaptchaChallengeParameters).CaptchaChallengeParameters
			vOpts := append(opts,
				db.WithValidateField("captcha_challenge_parameters_choice"),
				db.WithValidateField("captcha_challenge_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["challenge_choice"]; exists {
		val := m.GetChallengeChoice()
		vOpts := append(opts,
			db.WithValidateField("challenge_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChallengeChoice().(type) {
	case *PolicyBasedChallenge_NoChallenge:
		if fv, exists := v.FldValidators["challenge_choice.no_challenge"]; exists {
			val := m.GetChallengeChoice().(*PolicyBasedChallenge_NoChallenge).NoChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_choice"),
				db.WithValidateField("no_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PolicyBasedChallenge_AlwaysEnableJsChallenge:
		if fv, exists := v.FldValidators["challenge_choice.always_enable_js_challenge"]; exists {
			val := m.GetChallengeChoice().(*PolicyBasedChallenge_AlwaysEnableJsChallenge).AlwaysEnableJsChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_choice"),
				db.WithValidateField("always_enable_js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge:
		if fv, exists := v.FldValidators["challenge_choice.always_enable_captcha_challenge"]; exists {
			val := m.GetChallengeChoice().(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge).AlwaysEnableCaptchaChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_choice"),
				db.WithValidateField("always_enable_captcha_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetJsChallengeParametersChoice().(type) {
	case *PolicyBasedChallenge_DefaultJsChallengeParameters:
		if fv, exists := v.FldValidators["js_challenge_parameters_choice.default_js_challenge_parameters"]; exists {
			val := m.GetJsChallengeParametersChoice().(*PolicyBasedChallenge_DefaultJsChallengeParameters).DefaultJsChallengeParameters
			vOpts := append(opts,
				db.WithValidateField("js_challenge_parameters_choice"),
				db.WithValidateField("default_js_challenge_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PolicyBasedChallenge_JsChallengeParameters:
		if fv, exists := v.FldValidators["js_challenge_parameters_choice.js_challenge_parameters"]; exists {
			val := m.GetJsChallengeParametersChoice().(*PolicyBasedChallenge_JsChallengeParameters).JsChallengeParameters
			vOpts := append(opts,
				db.WithValidateField("js_challenge_parameters_choice"),
				db.WithValidateField("js_challenge_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetMaliciousUserMitigationChoice().(type) {
	case *PolicyBasedChallenge_DefaultMitigationSettings:
		if fv, exists := v.FldValidators["malicious_user_mitigation_choice.default_mitigation_settings"]; exists {
			val := m.GetMaliciousUserMitigationChoice().(*PolicyBasedChallenge_DefaultMitigationSettings).DefaultMitigationSettings
			vOpts := append(opts,
				db.WithValidateField("malicious_user_mitigation_choice"),
				db.WithValidateField("default_mitigation_settings"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PolicyBasedChallenge_MaliciousUserMitigation:
		if fv, exists := v.FldValidators["malicious_user_mitigation_choice.malicious_user_mitigation"]; exists {
			val := m.GetMaliciousUserMitigationChoice().(*PolicyBasedChallenge_MaliciousUserMitigation).MaliciousUserMitigation
			vOpts := append(opts,
				db.WithValidateField("malicious_user_mitigation_choice"),
				db.WithValidateField("malicious_user_mitigation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rule_list"]; exists {

		vOpts := append(opts, db.WithValidateField("rule_list"))
		if err := fv(ctx, m.GetRuleList(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetTemporaryBlockingParametersChoice().(type) {
	case *PolicyBasedChallenge_DefaultTemporaryBlockingParameters:
		if fv, exists := v.FldValidators["temporary_blocking_parameters_choice.default_temporary_blocking_parameters"]; exists {
			val := m.GetTemporaryBlockingParametersChoice().(*PolicyBasedChallenge_DefaultTemporaryBlockingParameters).DefaultTemporaryBlockingParameters
			vOpts := append(opts,
				db.WithValidateField("temporary_blocking_parameters_choice"),
				db.WithValidateField("default_temporary_blocking_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *PolicyBasedChallenge_TemporaryUserBlocking:
		if fv, exists := v.FldValidators["temporary_blocking_parameters_choice.temporary_user_blocking"]; exists {
			val := m.GetTemporaryBlockingParametersChoice().(*PolicyBasedChallenge_TemporaryUserBlocking).TemporaryUserBlocking
			vOpts := append(opts,
				db.WithValidateField("temporary_blocking_parameters_choice"),
				db.WithValidateField("temporary_user_blocking"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPolicyBasedChallengeValidator = func() *ValidatePolicyBasedChallenge {
	v := &ValidatePolicyBasedChallenge{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhChallengeChoice := v.ChallengeChoiceValidationRuleHandler
	rulesChallengeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChallengeChoice(rulesChallengeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PolicyBasedChallenge.challenge_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_choice"] = vFn

	v.FldValidators["captcha_challenge_parameters_choice.captcha_challenge_parameters"] = ves_io_schema_virtual_host.CaptchaChallengeTypeValidator().Validate

	v.FldValidators["js_challenge_parameters_choice.js_challenge_parameters"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate

	v.FldValidators["malicious_user_mitigation_choice.malicious_user_mitigation"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["temporary_blocking_parameters_choice.temporary_user_blocking"] = ves_io_schema_virtual_host.TemporaryUserBlockingTypeValidator().Validate

	v.FldValidators["rule_list"] = ChallengeRuleListValidator().Validate

	return v
}()

func PolicyBasedChallengeValidator() db.Validator {
	return DefaultPolicyBasedChallengeValidator
}

// augmented methods on protoc/std generated struct

func (m *ProtectedAppEndpointType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ProtectedAppEndpointType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ProtectedAppEndpointType) DeepCopy() *ProtectedAppEndpointType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ProtectedAppEndpointType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ProtectedAppEndpointType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ProtectedAppEndpointType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ProtectedAppEndpointTypeValidator().Validate(ctx, m, opts...)
}

type ValidateProtectedAppEndpointType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateProtectedAppEndpointType) AppTrafficTypeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for app_traffic_type_choice")
	}
	return validatorFn, nil
}

func (v *ValidateProtectedAppEndpointType) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateProtectedAppEndpointType) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for path")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.PathMatcherTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateProtectedAppEndpointType) HttpMethodsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.BotHttpMethod)
		return int32(i)
	}
	// ves_io_schema.BotHttpMethod_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema.BotHttpMethod_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for http_methods")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema.BotHttpMethod, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for http_methods")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema.BotHttpMethod)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema.BotHttpMethod, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated http_methods")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items http_methods")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateProtectedAppEndpointType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ProtectedAppEndpointType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ProtectedAppEndpointType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["app_traffic_type_choice"]; exists {
		val := m.GetAppTrafficTypeChoice()
		vOpts := append(opts,
			db.WithValidateField("app_traffic_type_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAppTrafficTypeChoice().(type) {
	case *ProtectedAppEndpointType_WebClient:
		if fv, exists := v.FldValidators["app_traffic_type_choice.web_client"]; exists {
			val := m.GetAppTrafficTypeChoice().(*ProtectedAppEndpointType_WebClient).WebClient
			vOpts := append(opts,
				db.WithValidateField("app_traffic_type_choice"),
				db.WithValidateField("web_client"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProtectedAppEndpointType_MobileClient:
		if fv, exists := v.FldValidators["app_traffic_type_choice.mobile_client"]; exists {
			val := m.GetAppTrafficTypeChoice().(*ProtectedAppEndpointType_MobileClient).MobileClient
			vOpts := append(opts,
				db.WithValidateField("app_traffic_type_choice"),
				db.WithValidateField("mobile_client"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProtectedAppEndpointType_WebMobileClient:
		if fv, exists := v.FldValidators["app_traffic_type_choice.web_mobile_client"]; exists {
			val := m.GetAppTrafficTypeChoice().(*ProtectedAppEndpointType_WebMobileClient).WebMobileClient
			vOpts := append(opts,
				db.WithValidateField("app_traffic_type_choice"),
				db.WithValidateField("web_mobile_client"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetDomainMatcherChoice().(type) {
	case *ProtectedAppEndpointType_AnyDomain:
		if fv, exists := v.FldValidators["domain_matcher_choice.any_domain"]; exists {
			val := m.GetDomainMatcherChoice().(*ProtectedAppEndpointType_AnyDomain).AnyDomain
			vOpts := append(opts,
				db.WithValidateField("domain_matcher_choice"),
				db.WithValidateField("any_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProtectedAppEndpointType_Domain:
		if fv, exists := v.FldValidators["domain_matcher_choice.domain"]; exists {
			val := m.GetDomainMatcherChoice().(*ProtectedAppEndpointType_Domain).Domain
			vOpts := append(opts,
				db.WithValidateField("domain_matcher_choice"),
				db.WithValidateField("domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetFlowLabelChoice().(type) {
	case *ProtectedAppEndpointType_UndefinedFlowLabel:
		if fv, exists := v.FldValidators["flow_label_choice.undefined_flow_label"]; exists {
			val := m.GetFlowLabelChoice().(*ProtectedAppEndpointType_UndefinedFlowLabel).UndefinedFlowLabel
			vOpts := append(opts,
				db.WithValidateField("flow_label_choice"),
				db.WithValidateField("undefined_flow_label"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProtectedAppEndpointType_FlowLabel:
		if fv, exists := v.FldValidators["flow_label_choice.flow_label"]; exists {
			val := m.GetFlowLabelChoice().(*ProtectedAppEndpointType_FlowLabel).FlowLabel
			vOpts := append(opts,
				db.WithValidateField("flow_label_choice"),
				db.WithValidateField("flow_label"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["http_methods"]; exists {
		vOpts := append(opts, db.WithValidateField("http_methods"))
		if err := fv(ctx, m.GetHttpMethods(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["query"]; exists {

		vOpts := append(opts, db.WithValidateField("query"))
		for idx, item := range m.GetQuery() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["request_body"]; exists {

		vOpts := append(opts, db.WithValidateField("request_body"))
		for idx, item := range m.GetRequestBody() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultProtectedAppEndpointTypeValidator = func() *ValidateProtectedAppEndpointType {
	v := &ValidateProtectedAppEndpointType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAppTrafficTypeChoice := v.AppTrafficTypeChoiceValidationRuleHandler
	rulesAppTrafficTypeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAppTrafficTypeChoice(rulesAppTrafficTypeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProtectedAppEndpointType.app_traffic_type_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["app_traffic_type_choice"] = vFn

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProtectedAppEndpointType.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProtectedAppEndpointType.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	vrhHttpMethods := v.HttpMethodsValidationRuleHandler
	rulesHttpMethods := map[string]string{
		"ves.io.schema.rules.message.required":                 "true",
		"ves.io.schema.rules.repeated.items.enum.defined_only": "true",
		"ves.io.schema.rules.repeated.items.enum.in":           "[0,1,3,4,5,6]",
		"ves.io.schema.rules.repeated.max_items":               "6",
		"ves.io.schema.rules.repeated.min_items":               "1",
		"ves.io.schema.rules.repeated.unique":                  "true",
	}
	vFn, err = vrhHttpMethods(rulesHttpMethods)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProtectedAppEndpointType.http_methods: %s", err)
		panic(errMsg)
	}
	v.FldValidators["http_methods"] = vFn

	v.FldValidators["app_traffic_type_choice.web_mobile_client"] = WebMobileTrafficTypeValidator().Validate

	v.FldValidators["domain_matcher_choice.domain"] = ves_io_schema.DomainTypeValidator().Validate

	v.FldValidators["flow_label_choice.flow_label"] = ves_io_schema.BotDefenseFlowLabelCategoriesChoiceTypeValidator().Validate

	v.FldValidators["query"] = QueryValidator().Validate

	v.FldValidators["request_body"] = RequestBodyValidator().Validate

	return v
}()

func ProtectedAppEndpointTypeValidator() db.Validator {
	return DefaultProtectedAppEndpointTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ProxyTypeHttp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ProxyTypeHttp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ProxyTypeHttp) DeepCopy() *ProxyTypeHttp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ProxyTypeHttp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ProxyTypeHttp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ProxyTypeHttp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ProxyTypeHttpValidator().Validate(ctx, m, opts...)
}

type ValidateProxyTypeHttp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateProxyTypeHttp) PortChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port_choice")
	}
	return validatorFn, nil
}

func (v *ValidateProxyTypeHttp) PortChoicePortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Port, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}
	return oValidatorFn_Port, nil
}
func (v *ValidateProxyTypeHttp) PortChoicePortRangesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_PortRanges, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port_ranges")
	}
	return oValidatorFn_PortRanges, nil
}

func (v *ValidateProxyTypeHttp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ProxyTypeHttp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ProxyTypeHttp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dns_volterra_managed"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_volterra_managed"))
		if err := fv(ctx, m.GetDnsVolterraManaged(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["port_choice"]; exists {
		val := m.GetPortChoice()
		vOpts := append(opts,
			db.WithValidateField("port_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPortChoice().(type) {
	case *ProxyTypeHttp_Port:
		if fv, exists := v.FldValidators["port_choice.port"]; exists {
			val := m.GetPortChoice().(*ProxyTypeHttp_Port).Port
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttp_PortRanges:
		if fv, exists := v.FldValidators["port_choice.port_ranges"]; exists {
			val := m.GetPortChoice().(*ProxyTypeHttp_PortRanges).PortRanges
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port_ranges"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultProxyTypeHttpValidator = func() *ValidateProxyTypeHttp {
	v := &ValidateProxyTypeHttp{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPortChoice := v.PortChoiceValidationRuleHandler
	rulesPortChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPortChoice(rulesPortChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProxyTypeHttp.port_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port_choice"] = vFn

	vrhPortChoicePort := v.PortChoicePortValidationRuleHandler
	rulesPortChoicePort := map[string]string{
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFnMap["port_choice.port"], err = vrhPortChoicePort(rulesPortChoicePort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttp.port_choice_port: %s", err)
		panic(errMsg)
	}
	vrhPortChoicePortRanges := v.PortChoicePortRangesValidationRuleHandler
	rulesPortChoicePortRanges := map[string]string{
		"ves.io.schema.rules.string.max_len":                "512",
		"ves.io.schema.rules.string.max_ports":              "64",
		"ves.io.schema.rules.string.min_len":                "1",
		"ves.io.schema.rules.string.unique_port_range_list": "true",
	}
	vFnMap["port_choice.port_ranges"], err = vrhPortChoicePortRanges(rulesPortChoicePortRanges)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttp.port_choice_port_ranges: %s", err)
		panic(errMsg)
	}

	v.FldValidators["port_choice.port"] = vFnMap["port_choice.port"]
	v.FldValidators["port_choice.port_ranges"] = vFnMap["port_choice.port_ranges"]

	return v
}()

func ProxyTypeHttpValidator() db.Validator {
	return DefaultProxyTypeHttpValidator
}

// augmented methods on protoc/std generated struct

func (m *ProxyTypeHttps) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ProxyTypeHttps) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ProxyTypeHttps) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetTlsParameters().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ProxyTypeHttps.tls_parameters")
	}

	return nil
}

func (m *ProxyTypeHttps) DeepCopy() *ProxyTypeHttps {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ProxyTypeHttps{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ProxyTypeHttps) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ProxyTypeHttps) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ProxyTypeHttpsValidator().Validate(ctx, m, opts...)
}

func (m *ProxyTypeHttps) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetTlsCertificatesChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ProxyTypeHttps) GetTlsCertificatesChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetTlsCertificatesChoice() == nil {
		return nil, nil
	}
	switch m.GetTlsCertificatesChoice().(type) {
	case *ProxyTypeHttps_TlsParameters:
		drInfos, err := m.GetTlsParameters().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetTlsParameters().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "tls_parameters." + dri.DRField
		}
		return drInfos, err

	case *ProxyTypeHttps_TlsCertParams:
		drInfos, err := m.GetTlsCertParams().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetTlsCertParams().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "tls_cert_params." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateProxyTypeHttps struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateProxyTypeHttps) PathNormalizeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for path_normalize_choice")
	}
	return validatorFn, nil
}

func (v *ValidateProxyTypeHttps) PortChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port_choice")
	}
	return validatorFn, nil
}

func (v *ValidateProxyTypeHttps) PortChoicePortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Port, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}
	return oValidatorFn_Port, nil
}
func (v *ValidateProxyTypeHttps) PortChoicePortRangesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_PortRanges, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port_ranges")
	}
	return oValidatorFn_PortRanges, nil
}

func (v *ValidateProxyTypeHttps) ServerHeaderChoiceServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}
	return oValidatorFn_ServerName, nil
}
func (v *ValidateProxyTypeHttps) ServerHeaderChoiceAppendServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AppendServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for append_server_name")
	}
	return oValidatorFn_AppendServerName, nil
}

func (v *ValidateProxyTypeHttps) ConnectionIdleTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for connection_idle_timeout")
	}

	return validatorFn, nil
}

func (v *ValidateProxyTypeHttps) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ProxyTypeHttps)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ProxyTypeHttps got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_hsts"]; exists {

		vOpts := append(opts, db.WithValidateField("add_hsts"))
		if err := fv(ctx, m.GetAddHsts(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_idle_timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("connection_idle_timeout"))
		if err := fv(ctx, m.GetConnectionIdleTimeout(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetDefaultLbChoice().(type) {
	case *ProxyTypeHttps_NonDefaultLoadbalancer:
		if fv, exists := v.FldValidators["default_lb_choice.non_default_loadbalancer"]; exists {
			val := m.GetDefaultLbChoice().(*ProxyTypeHttps_NonDefaultLoadbalancer).NonDefaultLoadbalancer
			vOpts := append(opts,
				db.WithValidateField("default_lb_choice"),
				db.WithValidateField("non_default_loadbalancer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_DefaultLoadbalancer:
		if fv, exists := v.FldValidators["default_lb_choice.default_loadbalancer"]; exists {
			val := m.GetDefaultLbChoice().(*ProxyTypeHttps_DefaultLoadbalancer).DefaultLoadbalancer
			vOpts := append(opts,
				db.WithValidateField("default_lb_choice"),
				db.WithValidateField("default_loadbalancer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["header_transformation_type"]; exists {

		vOpts := append(opts, db.WithValidateField("header_transformation_type"))
		if err := fv(ctx, m.GetHeaderTransformationType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_protocol_options"]; exists {

		vOpts := append(opts, db.WithValidateField("http_protocol_options"))
		if err := fv(ctx, m.GetHttpProtocolOptions(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_redirect"]; exists {

		vOpts := append(opts, db.WithValidateField("http_redirect"))
		if err := fv(ctx, m.GetHttpRedirect(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path_normalize_choice"]; exists {
		val := m.GetPathNormalizeChoice()
		vOpts := append(opts,
			db.WithValidateField("path_normalize_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPathNormalizeChoice().(type) {
	case *ProxyTypeHttps_EnablePathNormalize:
		if fv, exists := v.FldValidators["path_normalize_choice.enable_path_normalize"]; exists {
			val := m.GetPathNormalizeChoice().(*ProxyTypeHttps_EnablePathNormalize).EnablePathNormalize
			vOpts := append(opts,
				db.WithValidateField("path_normalize_choice"),
				db.WithValidateField("enable_path_normalize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_DisablePathNormalize:
		if fv, exists := v.FldValidators["path_normalize_choice.disable_path_normalize"]; exists {
			val := m.GetPathNormalizeChoice().(*ProxyTypeHttps_DisablePathNormalize).DisablePathNormalize
			vOpts := append(opts,
				db.WithValidateField("path_normalize_choice"),
				db.WithValidateField("disable_path_normalize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["port_choice"]; exists {
		val := m.GetPortChoice()
		vOpts := append(opts,
			db.WithValidateField("port_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPortChoice().(type) {
	case *ProxyTypeHttps_Port:
		if fv, exists := v.FldValidators["port_choice.port"]; exists {
			val := m.GetPortChoice().(*ProxyTypeHttps_Port).Port
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_PortRanges:
		if fv, exists := v.FldValidators["port_choice.port_ranges"]; exists {
			val := m.GetPortChoice().(*ProxyTypeHttps_PortRanges).PortRanges
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port_ranges"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetServerHeaderChoice().(type) {
	case *ProxyTypeHttps_DefaultHeader:
		if fv, exists := v.FldValidators["server_header_choice.default_header"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttps_DefaultHeader).DefaultHeader
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("default_header"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_ServerName:
		if fv, exists := v.FldValidators["server_header_choice.server_name"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttps_ServerName).ServerName
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_AppendServerName:
		if fv, exists := v.FldValidators["server_header_choice.append_server_name"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttps_AppendServerName).AppendServerName
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("append_server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_PassThrough:
		if fv, exists := v.FldValidators["server_header_choice.pass_through"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttps_PassThrough).PassThrough
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("pass_through"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetTlsCertificatesChoice().(type) {
	case *ProxyTypeHttps_TlsParameters:
		if fv, exists := v.FldValidators["tls_certificates_choice.tls_parameters"]; exists {
			val := m.GetTlsCertificatesChoice().(*ProxyTypeHttps_TlsParameters).TlsParameters
			vOpts := append(opts,
				db.WithValidateField("tls_certificates_choice"),
				db.WithValidateField("tls_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttps_TlsCertParams:
		if fv, exists := v.FldValidators["tls_certificates_choice.tls_cert_params"]; exists {
			val := m.GetTlsCertificatesChoice().(*ProxyTypeHttps_TlsCertParams).TlsCertParams
			vOpts := append(opts,
				db.WithValidateField("tls_certificates_choice"),
				db.WithValidateField("tls_cert_params"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultProxyTypeHttpsValidator = func() *ValidateProxyTypeHttps {
	v := &ValidateProxyTypeHttps{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPathNormalizeChoice := v.PathNormalizeChoiceValidationRuleHandler
	rulesPathNormalizeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPathNormalizeChoice(rulesPathNormalizeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProxyTypeHttps.path_normalize_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path_normalize_choice"] = vFn

	vrhPortChoice := v.PortChoiceValidationRuleHandler
	rulesPortChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPortChoice(rulesPortChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProxyTypeHttps.port_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["port_choice"] = vFn

	vrhPortChoicePort := v.PortChoicePortValidationRuleHandler
	rulesPortChoicePort := map[string]string{
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFnMap["port_choice.port"], err = vrhPortChoicePort(rulesPortChoicePort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttps.port_choice_port: %s", err)
		panic(errMsg)
	}
	vrhPortChoicePortRanges := v.PortChoicePortRangesValidationRuleHandler
	rulesPortChoicePortRanges := map[string]string{
		"ves.io.schema.rules.string.max_len":                "512",
		"ves.io.schema.rules.string.max_ports":              "64",
		"ves.io.schema.rules.string.min_len":                "1",
		"ves.io.schema.rules.string.unique_port_range_list": "true",
	}
	vFnMap["port_choice.port_ranges"], err = vrhPortChoicePortRanges(rulesPortChoicePortRanges)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttps.port_choice_port_ranges: %s", err)
		panic(errMsg)
	}

	v.FldValidators["port_choice.port"] = vFnMap["port_choice.port"]
	v.FldValidators["port_choice.port_ranges"] = vFnMap["port_choice.port_ranges"]

	vrhServerHeaderChoiceServerName := v.ServerHeaderChoiceServerNameValidationRuleHandler
	rulesServerHeaderChoiceServerName := map[string]string{
		"ves.io.schema.rules.string.max_len": "8096",
	}
	vFnMap["server_header_choice.server_name"], err = vrhServerHeaderChoiceServerName(rulesServerHeaderChoiceServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttps.server_header_choice_server_name: %s", err)
		panic(errMsg)
	}
	vrhServerHeaderChoiceAppendServerName := v.ServerHeaderChoiceAppendServerNameValidationRuleHandler
	rulesServerHeaderChoiceAppendServerName := map[string]string{
		"ves.io.schema.rules.string.max_len": "8096",
	}
	vFnMap["server_header_choice.append_server_name"], err = vrhServerHeaderChoiceAppendServerName(rulesServerHeaderChoiceAppendServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttps.server_header_choice_append_server_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["server_header_choice.server_name"] = vFnMap["server_header_choice.server_name"]
	v.FldValidators["server_header_choice.append_server_name"] = vFnMap["server_header_choice.append_server_name"]

	vrhConnectionIdleTimeout := v.ConnectionIdleTimeoutValidationRuleHandler
	rulesConnectionIdleTimeout := map[string]string{
		"ves.io.schema.rules.uint32.lte": "600000",
	}
	vFn, err = vrhConnectionIdleTimeout(rulesConnectionIdleTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProxyTypeHttps.connection_idle_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connection_idle_timeout"] = vFn

	v.FldValidators["tls_certificates_choice.tls_parameters"] = ves_io_schema_views.DownstreamTlsParamsTypeValidator().Validate
	v.FldValidators["tls_certificates_choice.tls_cert_params"] = ves_io_schema_views.DownstreamTLSCertsParamsValidator().Validate

	v.FldValidators["header_transformation_type"] = ves_io_schema.HeaderTransformationTypeValidator().Validate

	v.FldValidators["http_protocol_options"] = ves_io_schema_virtual_host.HttpProtocolOptionsValidator().Validate

	return v
}()

func ProxyTypeHttpsValidator() db.Validator {
	return DefaultProxyTypeHttpsValidator
}

// augmented methods on protoc/std generated struct

func (m *ProxyTypeHttpsAutoCerts) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ProxyTypeHttpsAutoCerts) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ProxyTypeHttpsAutoCerts) DeepCopy() *ProxyTypeHttpsAutoCerts {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ProxyTypeHttpsAutoCerts{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ProxyTypeHttpsAutoCerts) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ProxyTypeHttpsAutoCerts) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ProxyTypeHttpsAutoCertsValidator().Validate(ctx, m, opts...)
}

func (m *ProxyTypeHttpsAutoCerts) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetMtlsChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ProxyTypeHttpsAutoCerts) GetMtlsChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMtlsChoice() == nil {
		return nil, nil
	}
	switch m.GetMtlsChoice().(type) {
	case *ProxyTypeHttpsAutoCerts_NoMtls:

		return nil, nil

	case *ProxyTypeHttpsAutoCerts_UseMtls:
		drInfos, err := m.GetUseMtls().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetUseMtls().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "use_mtls." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateProxyTypeHttpsAutoCerts struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateProxyTypeHttpsAutoCerts) MtlsChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mtls_choice")
	}
	return validatorFn, nil
}

func (v *ValidateProxyTypeHttpsAutoCerts) PathNormalizeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for path_normalize_choice")
	}
	return validatorFn, nil
}

func (v *ValidateProxyTypeHttpsAutoCerts) PortChoicePortValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Port, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port")
	}
	return oValidatorFn_Port, nil
}
func (v *ValidateProxyTypeHttpsAutoCerts) PortChoicePortRangesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_PortRanges, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for port_ranges")
	}
	return oValidatorFn_PortRanges, nil
}

func (v *ValidateProxyTypeHttpsAutoCerts) ServerHeaderChoiceServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}
	return oValidatorFn_ServerName, nil
}
func (v *ValidateProxyTypeHttpsAutoCerts) ServerHeaderChoiceAppendServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AppendServerName, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for append_server_name")
	}
	return oValidatorFn_AppendServerName, nil
}

func (v *ValidateProxyTypeHttpsAutoCerts) ConnectionIdleTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for connection_idle_timeout")
	}

	return validatorFn, nil
}

func (v *ValidateProxyTypeHttpsAutoCerts) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ProxyTypeHttpsAutoCerts)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ProxyTypeHttpsAutoCerts got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_hsts"]; exists {

		vOpts := append(opts, db.WithValidateField("add_hsts"))
		if err := fv(ctx, m.GetAddHsts(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["connection_idle_timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("connection_idle_timeout"))
		if err := fv(ctx, m.GetConnectionIdleTimeout(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetDefaultLbChoice().(type) {
	case *ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer:
		if fv, exists := v.FldValidators["default_lb_choice.non_default_loadbalancer"]; exists {
			val := m.GetDefaultLbChoice().(*ProxyTypeHttpsAutoCerts_NonDefaultLoadbalancer).NonDefaultLoadbalancer
			vOpts := append(opts,
				db.WithValidateField("default_lb_choice"),
				db.WithValidateField("non_default_loadbalancer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_DefaultLoadbalancer:
		if fv, exists := v.FldValidators["default_lb_choice.default_loadbalancer"]; exists {
			val := m.GetDefaultLbChoice().(*ProxyTypeHttpsAutoCerts_DefaultLoadbalancer).DefaultLoadbalancer
			vOpts := append(opts,
				db.WithValidateField("default_lb_choice"),
				db.WithValidateField("default_loadbalancer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["header_transformation_type"]; exists {

		vOpts := append(opts, db.WithValidateField("header_transformation_type"))
		if err := fv(ctx, m.GetHeaderTransformationType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_protocol_options"]; exists {

		vOpts := append(opts, db.WithValidateField("http_protocol_options"))
		if err := fv(ctx, m.GetHttpProtocolOptions(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_redirect"]; exists {

		vOpts := append(opts, db.WithValidateField("http_redirect"))
		if err := fv(ctx, m.GetHttpRedirect(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mtls_choice"]; exists {
		val := m.GetMtlsChoice()
		vOpts := append(opts,
			db.WithValidateField("mtls_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMtlsChoice().(type) {
	case *ProxyTypeHttpsAutoCerts_NoMtls:
		if fv, exists := v.FldValidators["mtls_choice.no_mtls"]; exists {
			val := m.GetMtlsChoice().(*ProxyTypeHttpsAutoCerts_NoMtls).NoMtls
			vOpts := append(opts,
				db.WithValidateField("mtls_choice"),
				db.WithValidateField("no_mtls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_UseMtls:
		if fv, exists := v.FldValidators["mtls_choice.use_mtls"]; exists {
			val := m.GetMtlsChoice().(*ProxyTypeHttpsAutoCerts_UseMtls).UseMtls
			vOpts := append(opts,
				db.WithValidateField("mtls_choice"),
				db.WithValidateField("use_mtls"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["path_normalize_choice"]; exists {
		val := m.GetPathNormalizeChoice()
		vOpts := append(opts,
			db.WithValidateField("path_normalize_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPathNormalizeChoice().(type) {
	case *ProxyTypeHttpsAutoCerts_EnablePathNormalize:
		if fv, exists := v.FldValidators["path_normalize_choice.enable_path_normalize"]; exists {
			val := m.GetPathNormalizeChoice().(*ProxyTypeHttpsAutoCerts_EnablePathNormalize).EnablePathNormalize
			vOpts := append(opts,
				db.WithValidateField("path_normalize_choice"),
				db.WithValidateField("enable_path_normalize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_DisablePathNormalize:
		if fv, exists := v.FldValidators["path_normalize_choice.disable_path_normalize"]; exists {
			val := m.GetPathNormalizeChoice().(*ProxyTypeHttpsAutoCerts_DisablePathNormalize).DisablePathNormalize
			vOpts := append(opts,
				db.WithValidateField("path_normalize_choice"),
				db.WithValidateField("disable_path_normalize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetPortChoice().(type) {
	case *ProxyTypeHttpsAutoCerts_Port:
		if fv, exists := v.FldValidators["port_choice.port"]; exists {
			val := m.GetPortChoice().(*ProxyTypeHttpsAutoCerts_Port).Port
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_PortRanges:
		if fv, exists := v.FldValidators["port_choice.port_ranges"]; exists {
			val := m.GetPortChoice().(*ProxyTypeHttpsAutoCerts_PortRanges).PortRanges
			vOpts := append(opts,
				db.WithValidateField("port_choice"),
				db.WithValidateField("port_ranges"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetServerHeaderChoice().(type) {
	case *ProxyTypeHttpsAutoCerts_DefaultHeader:
		if fv, exists := v.FldValidators["server_header_choice.default_header"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_DefaultHeader).DefaultHeader
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("default_header"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_ServerName:
		if fv, exists := v.FldValidators["server_header_choice.server_name"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_ServerName).ServerName
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_AppendServerName:
		if fv, exists := v.FldValidators["server_header_choice.append_server_name"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_AppendServerName).AppendServerName
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("append_server_name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ProxyTypeHttpsAutoCerts_PassThrough:
		if fv, exists := v.FldValidators["server_header_choice.pass_through"]; exists {
			val := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_PassThrough).PassThrough
			vOpts := append(opts,
				db.WithValidateField("server_header_choice"),
				db.WithValidateField("pass_through"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tls_config"]; exists {

		vOpts := append(opts, db.WithValidateField("tls_config"))
		if err := fv(ctx, m.GetTlsConfig(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultProxyTypeHttpsAutoCertsValidator = func() *ValidateProxyTypeHttpsAutoCerts {
	v := &ValidateProxyTypeHttpsAutoCerts{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMtlsChoice := v.MtlsChoiceValidationRuleHandler
	rulesMtlsChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMtlsChoice(rulesMtlsChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProxyTypeHttpsAutoCerts.mtls_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mtls_choice"] = vFn

	vrhPathNormalizeChoice := v.PathNormalizeChoiceValidationRuleHandler
	rulesPathNormalizeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPathNormalizeChoice(rulesPathNormalizeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProxyTypeHttpsAutoCerts.path_normalize_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path_normalize_choice"] = vFn

	vrhPortChoicePort := v.PortChoicePortValidationRuleHandler
	rulesPortChoicePort := map[string]string{
		"ves.io.schema.rules.uint32.lte": "65535",
	}
	vFnMap["port_choice.port"], err = vrhPortChoicePort(rulesPortChoicePort)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttpsAutoCerts.port_choice_port: %s", err)
		panic(errMsg)
	}
	vrhPortChoicePortRanges := v.PortChoicePortRangesValidationRuleHandler
	rulesPortChoicePortRanges := map[string]string{
		"ves.io.schema.rules.string.max_len":                "512",
		"ves.io.schema.rules.string.max_ports":              "64",
		"ves.io.schema.rules.string.min_len":                "1",
		"ves.io.schema.rules.string.unique_port_range_list": "true",
	}
	vFnMap["port_choice.port_ranges"], err = vrhPortChoicePortRanges(rulesPortChoicePortRanges)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttpsAutoCerts.port_choice_port_ranges: %s", err)
		panic(errMsg)
	}

	v.FldValidators["port_choice.port"] = vFnMap["port_choice.port"]
	v.FldValidators["port_choice.port_ranges"] = vFnMap["port_choice.port_ranges"]

	vrhServerHeaderChoiceServerName := v.ServerHeaderChoiceServerNameValidationRuleHandler
	rulesServerHeaderChoiceServerName := map[string]string{
		"ves.io.schema.rules.string.max_len": "8096",
	}
	vFnMap["server_header_choice.server_name"], err = vrhServerHeaderChoiceServerName(rulesServerHeaderChoiceServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttpsAutoCerts.server_header_choice_server_name: %s", err)
		panic(errMsg)
	}
	vrhServerHeaderChoiceAppendServerName := v.ServerHeaderChoiceAppendServerNameValidationRuleHandler
	rulesServerHeaderChoiceAppendServerName := map[string]string{
		"ves.io.schema.rules.string.max_len": "8096",
	}
	vFnMap["server_header_choice.append_server_name"], err = vrhServerHeaderChoiceAppendServerName(rulesServerHeaderChoiceAppendServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ProxyTypeHttpsAutoCerts.server_header_choice_append_server_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["server_header_choice.server_name"] = vFnMap["server_header_choice.server_name"]
	v.FldValidators["server_header_choice.append_server_name"] = vFnMap["server_header_choice.append_server_name"]

	vrhConnectionIdleTimeout := v.ConnectionIdleTimeoutValidationRuleHandler
	rulesConnectionIdleTimeout := map[string]string{
		"ves.io.schema.rules.uint32.lte": "600000",
	}
	vFn, err = vrhConnectionIdleTimeout(rulesConnectionIdleTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ProxyTypeHttpsAutoCerts.connection_idle_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["connection_idle_timeout"] = vFn

	v.FldValidators["mtls_choice.use_mtls"] = ves_io_schema_views.DownstreamTlsValidationContextValidator().Validate

	v.FldValidators["tls_config"] = ves_io_schema_views.TlsConfigValidator().Validate

	v.FldValidators["header_transformation_type"] = ves_io_schema.HeaderTransformationTypeValidator().Validate

	v.FldValidators["http_protocol_options"] = ves_io_schema_virtual_host.HttpProtocolOptionsValidator().Validate

	return v
}()

func ProxyTypeHttpsAutoCertsValidator() db.Validator {
	return DefaultProxyTypeHttpsAutoCertsValidator
}

// augmented methods on protoc/std generated struct

func (m *Query) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Query) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Query) DeepCopy() *Query {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Query{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Query) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Query) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return QueryValidator().Validate(ctx, m, opts...)
}

type ValidateQuery struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateQuery) ValueTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for value_type")
	}
	return validatorFn, nil
}

func (v *ValidateQuery) ValueTypeExactValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ExactValue, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for exact_value")
	}
	return oValidatorFn_ExactValue, nil
}
func (v *ValidateQuery) ValueTypeRegexValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_RegexValue, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for regex_value")
	}
	return oValidatorFn_RegexValue, nil
}

func (v *ValidateQuery) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Query)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Query got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["value_type"]; exists {
		val := m.GetValueType()
		vOpts := append(opts,
			db.WithValidateField("value_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetValueType().(type) {
	case *Query_ExactValue:
		if fv, exists := v.FldValidators["value_type.exact_value"]; exists {
			val := m.GetValueType().(*Query_ExactValue).ExactValue
			vOpts := append(opts,
				db.WithValidateField("value_type"),
				db.WithValidateField("exact_value"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Query_RegexValue:
		if fv, exists := v.FldValidators["value_type.regex_value"]; exists {
			val := m.GetValueType().(*Query_RegexValue).RegexValue
			vOpts := append(opts,
				db.WithValidateField("value_type"),
				db.WithValidateField("regex_value"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Query_CheckPresence:
		if fv, exists := v.FldValidators["value_type.check_presence"]; exists {
			val := m.GetValueType().(*Query_CheckPresence).CheckPresence
			vOpts := append(opts,
				db.WithValidateField("value_type"),
				db.WithValidateField("check_presence"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultQueryValidator = func() *ValidateQuery {
	v := &ValidateQuery{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhValueType := v.ValueTypeValidationRuleHandler
	rulesValueType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhValueType(rulesValueType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Query.value_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["value_type"] = vFn

	vrhValueTypeExactValue := v.ValueTypeExactValueValidationRuleHandler
	rulesValueTypeExactValue := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
		"ves.io.schema.rules.string.min_len": "1",
	}
	vFnMap["value_type.exact_value"], err = vrhValueTypeExactValue(rulesValueTypeExactValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field Query.value_type_exact_value: %s", err)
		panic(errMsg)
	}
	vrhValueTypeRegexValue := v.ValueTypeRegexValueValidationRuleHandler
	rulesValueTypeRegexValue := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
		"ves.io.schema.rules.string.min_len": "1",
		"ves.io.schema.rules.string.regex":   "true",
	}
	vFnMap["value_type.regex_value"], err = vrhValueTypeRegexValue(rulesValueTypeRegexValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field Query.value_type_regex_value: %s", err)
		panic(errMsg)
	}

	v.FldValidators["value_type.exact_value"] = vFnMap["value_type.exact_value"]
	v.FldValidators["value_type.regex_value"] = vFnMap["value_type.regex_value"]

	return v
}()

func QueryValidator() db.Validator {
	return DefaultQueryValidator
}

// augmented methods on protoc/std generated struct

func (m *RateLimitConfigType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RateLimitConfigType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RateLimitConfigType) DeepCopy() *RateLimitConfigType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RateLimitConfigType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RateLimitConfigType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RateLimitConfigType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RateLimitConfigTypeValidator().Validate(ctx, m, opts...)
}

func (m *RateLimitConfigType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetIpAllowedListChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetIpAllowedListChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *RateLimitConfigType) GetIpAllowedListChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetIpAllowedListChoice() == nil {
		return nil, nil
	}
	switch m.GetIpAllowedListChoice().(type) {
	case *RateLimitConfigType_NoIpAllowedList:

		return nil, nil

	case *RateLimitConfigType_IpAllowedList:

		return nil, nil

	case *RateLimitConfigType_CustomIpAllowedList:
		drInfos, err := m.GetCustomIpAllowedList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomIpAllowedList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "custom_ip_allowed_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *RateLimitConfigType) GetPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetPolicyChoice().(type) {
	case *RateLimitConfigType_NoPolicies:

		return nil, nil

	case *RateLimitConfigType_Policies:
		drInfos, err := m.GetPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateRateLimitConfigType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRateLimitConfigType) IpAllowedListChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_allowed_list_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRateLimitConfigType) PolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRateLimitConfigType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RateLimitConfigType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RateLimitConfigType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ip_allowed_list_choice"]; exists {
		val := m.GetIpAllowedListChoice()
		vOpts := append(opts,
			db.WithValidateField("ip_allowed_list_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIpAllowedListChoice().(type) {
	case *RateLimitConfigType_NoIpAllowedList:
		if fv, exists := v.FldValidators["ip_allowed_list_choice.no_ip_allowed_list"]; exists {
			val := m.GetIpAllowedListChoice().(*RateLimitConfigType_NoIpAllowedList).NoIpAllowedList
			vOpts := append(opts,
				db.WithValidateField("ip_allowed_list_choice"),
				db.WithValidateField("no_ip_allowed_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RateLimitConfigType_IpAllowedList:
		if fv, exists := v.FldValidators["ip_allowed_list_choice.ip_allowed_list"]; exists {
			val := m.GetIpAllowedListChoice().(*RateLimitConfigType_IpAllowedList).IpAllowedList
			vOpts := append(opts,
				db.WithValidateField("ip_allowed_list_choice"),
				db.WithValidateField("ip_allowed_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RateLimitConfigType_CustomIpAllowedList:
		if fv, exists := v.FldValidators["ip_allowed_list_choice.custom_ip_allowed_list"]; exists {
			val := m.GetIpAllowedListChoice().(*RateLimitConfigType_CustomIpAllowedList).CustomIpAllowedList
			vOpts := append(opts,
				db.WithValidateField("ip_allowed_list_choice"),
				db.WithValidateField("custom_ip_allowed_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["policy_choice"]; exists {
		val := m.GetPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPolicyChoice().(type) {
	case *RateLimitConfigType_NoPolicies:
		if fv, exists := v.FldValidators["policy_choice.no_policies"]; exists {
			val := m.GetPolicyChoice().(*RateLimitConfigType_NoPolicies).NoPolicies
			vOpts := append(opts,
				db.WithValidateField("policy_choice"),
				db.WithValidateField("no_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RateLimitConfigType_Policies:
		if fv, exists := v.FldValidators["policy_choice.policies"]; exists {
			val := m.GetPolicyChoice().(*RateLimitConfigType_Policies).Policies
			vOpts := append(opts,
				db.WithValidateField("policy_choice"),
				db.WithValidateField("policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rate_limiter"]; exists {

		vOpts := append(opts, db.WithValidateField("rate_limiter"))
		if err := fv(ctx, m.GetRateLimiter(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRateLimitConfigTypeValidator = func() *ValidateRateLimitConfigType {
	v := &ValidateRateLimitConfigType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhIpAllowedListChoice := v.IpAllowedListChoiceValidationRuleHandler
	rulesIpAllowedListChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIpAllowedListChoice(rulesIpAllowedListChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RateLimitConfigType.ip_allowed_list_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ip_allowed_list_choice"] = vFn

	vrhPolicyChoice := v.PolicyChoiceValidationRuleHandler
	rulesPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPolicyChoice(rulesPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RateLimitConfigType.policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["policy_choice"] = vFn

	v.FldValidators["ip_allowed_list_choice.ip_allowed_list"] = ves_io_schema_views.PrefixStringListTypeValidator().Validate
	v.FldValidators["ip_allowed_list_choice.custom_ip_allowed_list"] = CustomIpAllowedListValidator().Validate

	v.FldValidators["policy_choice.policies"] = ves_io_schema_views_rate_limiter_policy.PolicyListValidator().Validate

	v.FldValidators["rate_limiter"] = ves_io_schema_rate_limiter.RateLimitValueValidator().Validate

	return v
}()

func RateLimitConfigTypeValidator() db.Validator {
	return DefaultRateLimitConfigTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetHttps().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.https")
	}

	for idx, e := range m.GetRoutes() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting ReplaceSpecType.routes idx %v", idx)
		}
	}

	if err := m.GetMoreOption().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.more_option")
	}

	if err := m.GetDefaultPool().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.default_pool")
	}

	if err := m.GetJwtValidation().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.jwt_validation")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvertiseChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAdvertiseChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiDefinitionChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDefinitionChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiProtectionRulesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiProtectionRulesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetBotDefenseChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetBotDefenseChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetChallengeTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetChallengeTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDefaultRoutePoolsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDefaultRoutePoolsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetLoadbalancerTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLoadbalancerTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMaliciousUserMitigationDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMaliciousUserMitigationDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetMoreOptionDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMoreOptionDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginPoolChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginServerSubsetRuleListDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginServerSubsetRuleListDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRateLimitChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRateLimitChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRoutesDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRoutesDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServicePolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetServicePolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetUserIdChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetUserIdChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetWafChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetAdvertiseChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAdvertiseChoice() == nil {
		return nil, nil
	}
	switch m.GetAdvertiseChoice().(type) {
	case *ReplaceSpecType_AdvertiseOnPublic:
		drInfos, err := m.GetAdvertiseOnPublic().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAdvertiseOnPublic().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "advertise_on_public." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_AdvertiseCustom:
		drInfos, err := m.GetAdvertiseCustom().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetAdvertiseCustom().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "advertise_custom." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_DoNotAdvertise:

		return nil, nil

	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetApiDefinitionChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDefinitionChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDefinitionChoice().(type) {
	case *ReplaceSpecType_ApiDefinitions:
		drInfos, err := m.GetApiDefinitions().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiDefinitions().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_definitions." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_ApiSpecification:
		drInfos, err := m.GetApiSpecification().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiSpecification().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_specification." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_DisableApiDefinition:

		return nil, nil

	case *ReplaceSpecType_ApiDefinition:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetApiProtectionRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiProtectionRules() == nil {
		return nil, nil
	}

	drInfos, err := m.GetApiProtectionRules().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetApiProtectionRules().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "api_protection_rules." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetBotDefenseChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetBotDefenseChoice() == nil {
		return nil, nil
	}
	switch m.GetBotDefenseChoice().(type) {
	case *ReplaceSpecType_DisableBotDefense:

		return nil, nil

	case *ReplaceSpecType_BotDefense:

		return nil, nil

	case *ReplaceSpecType_BotDefenseAdvanced:
		drInfos, err := m.GetBotDefenseAdvanced().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetBotDefenseAdvanced().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "bot_defense_advanced." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetChallengeTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetChallengeType() == nil {
		return nil, nil
	}
	switch m.GetChallengeType().(type) {
	case *ReplaceSpecType_JsChallenge:

		return nil, nil

	case *ReplaceSpecType_CaptchaChallenge:

		return nil, nil

	case *ReplaceSpecType_NoChallenge:

		return nil, nil

	case *ReplaceSpecType_PolicyBasedChallenge:
		drInfos, err := m.GetPolicyBasedChallenge().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPolicyBasedChallenge().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "policy_based_challenge." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_EnableChallenge:
		drInfos, err := m.GetEnableChallenge().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableChallenge().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_challenge." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetDefaultRoutePoolsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetDefaultRoutePools() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetDefaultRoutePools() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultRoutePools() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("default_route_pools[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetLoadbalancerTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetLoadbalancerType() == nil {
		return nil, nil
	}
	switch m.GetLoadbalancerType().(type) {
	case *ReplaceSpecType_Http:

		return nil, nil

	case *ReplaceSpecType_Https:
		drInfos, err := m.GetHttps().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttps().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_HttpsAutoCert:
		drInfos, err := m.GetHttpsAutoCert().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpsAutoCert().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "https_auto_cert." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *ReplaceSpecType) GetMaliciousUserMitigationDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("malicious_user_mitigation.Object")
	dri := db.DRefInfo{
		RefdType:   "malicious_user_mitigation.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "malicious_user_mitigation",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetMaliciousUserMitigationDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetMaliciousUserMitigationDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "malicious_user_mitigation.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: malicious_user_mitigation")
	}

	vref := m.GetMaliciousUserMitigation()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "malicious_user_mitigation.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetMoreOptionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMoreOption() == nil {
		return nil, nil
	}

	drInfos, err := m.GetMoreOption().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetMoreOption().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "more_option." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetOriginPoolChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginPoolChoice() == nil {
		return nil, nil
	}
	switch m.GetOriginPoolChoice().(type) {
	case *ReplaceSpecType_DefaultPool:
		drInfos, err := m.GetDefaultPool().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultPool().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "default_pool." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_DefaultPoolList:
		drInfos, err := m.GetDefaultPoolList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetDefaultPoolList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "default_pool_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetOriginServerSubsetRuleListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginServerSubsetRuleList() == nil {
		return nil, nil
	}

	drInfos, err := m.GetOriginServerSubsetRuleList().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetOriginServerSubsetRuleList().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "origin_server_subset_rule_list." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetRateLimitChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRateLimitChoice() == nil {
		return nil, nil
	}
	switch m.GetRateLimitChoice().(type) {
	case *ReplaceSpecType_DisableRateLimit:

		return nil, nil

	case *ReplaceSpecType_RateLimit:
		drInfos, err := m.GetRateLimit().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRateLimit().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rate_limit." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_ApiRateLimit:
		drInfos, err := m.GetApiRateLimit().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiRateLimit().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_rate_limit." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetRoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRoutes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRoutes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetServicePolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetServicePolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetServicePolicyChoice().(type) {
	case *ReplaceSpecType_ServicePoliciesFromNamespace:

		return nil, nil

	case *ReplaceSpecType_NoServicePolicies:

		return nil, nil

	case *ReplaceSpecType_ActiveServicePolicies:
		drInfos, err := m.GetActiveServicePolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveServicePolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_service_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *ReplaceSpecType) GetUserIdChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetUserIdChoice().(type) {
	case *ReplaceSpecType_UserIdentification:

		vref := m.GetUserIdentification()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("user_identification.Object")
		dri := db.DRefInfo{
			RefdType:   "user_identification.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "user_identification",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *ReplaceSpecType_UserIdClientIp:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetUserIdChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetUserIdChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetUserIdChoice().(type) {
	case *ReplaceSpecType_UserIdentification:
		refdType, err := d.TypeForEntryKind("", "", "user_identification.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: user_identification")
		}

		vref := m.GetUserIdentification()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "user_identification.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *ReplaceSpecType_UserIdClientIp:

	}

	return entries, nil
}

func (m *ReplaceSpecType) GetWafChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetWafChoice().(type) {
	case *ReplaceSpecType_DisableWaf:

		return nil, nil

	case *ReplaceSpecType_AppFirewall:

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("app_firewall.Object")
		dri := db.DRefInfo{
			RefdType:   "app_firewall.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "app_firewall",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetWafChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetWafChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetWafChoice().(type) {
	case *ReplaceSpecType_DisableWaf:

	case *ReplaceSpecType_AppFirewall:
		refdType, err := d.TypeForEntryKind("", "", "app_firewall.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: app_firewall")
		}

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "app_firewall.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) AdvertiseChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for advertise_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ApiDefinitionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_definition_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ApiDiscoveryChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_discovery_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ChallengeTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for challenge_type")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DdosDetectionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ddos_detection_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) L7DdosAutoMitigationActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for l7_ddos_auto_mitigation_action")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) LoadbalancerTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for loadbalancer_type")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) MaliciousUserDetectionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for malicious_user_detection_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) RateLimitChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rate_limit_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ServicePolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) TrustClientIpHeadersChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for trust_client_ip_headers_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) UserIdChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for user_id_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) WafChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for waf_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DefaultRoutePoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for default_route_pools")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for default_route_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated default_route_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items default_route_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) RoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*RouteType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := RouteTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*RouteType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*RouteType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) WafExclusionRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for waf_exclusion_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleWafExclusionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.SimpleWafExclusionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for waf_exclusion_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleWafExclusionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleWafExclusionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated waf_exclusion_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items waf_exclusion_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) BlockedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for blocked_clients")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for blocked_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated blocked_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items blocked_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) TrustedClientsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for trusted_clients")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*SimpleClientSrcRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := SimpleClientSrcRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for trusted_clients")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SimpleClientSrcRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SimpleClientSrcRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated trusted_clients")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items trusted_clients")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DdosMitigationRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for ddos_mitigation_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*DDoSMitigationRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := DDoSMitigationRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for ddos_mitigation_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DDoSMitigationRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DDoSMitigationRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated ddos_mitigation_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items ddos_mitigation_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DataGuardRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for data_guard_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.SimpleDataGuardRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.SimpleDataGuardRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for data_guard_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.SimpleDataGuardRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.SimpleDataGuardRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated data_guard_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items data_guard_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) GraphqlRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for graphql_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_policy.GraphQLRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_policy.GraphQLRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for graphql_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_policy.GraphQLRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_policy.GraphQLRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated graphql_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items graphql_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ProtectedCookiesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for protected_cookies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.CookieManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.CookieManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for protected_cookies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.CookieManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.CookieManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated protected_cookies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items protected_cookies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["add_location"]; exists {

		vOpts := append(opts, db.WithValidateField("add_location"))
		if err := fv(ctx, m.GetAddLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["advertise_choice"]; exists {
		val := m.GetAdvertiseChoice()
		vOpts := append(opts,
			db.WithValidateField("advertise_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdvertiseChoice().(type) {
	case *ReplaceSpecType_AdvertiseOnPublic:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public"]; exists {
			val := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublic).AdvertiseOnPublic
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AdvertiseCustom:
		if fv, exists := v.FldValidators["advertise_choice.advertise_custom"]; exists {
			val := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseCustom).AdvertiseCustom
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DoNotAdvertise:
		if fv, exists := v.FldValidators["advertise_choice.do_not_advertise"]; exists {
			val := m.GetAdvertiseChoice().(*ReplaceSpecType_DoNotAdvertise).DoNotAdvertise
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("do_not_advertise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public_default_vip"]; exists {
			val := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublicDefaultVip).AdvertiseOnPublicDefaultVip
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public_default_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_definition_choice"]; exists {
		val := m.GetApiDefinitionChoice()
		vOpts := append(opts,
			db.WithValidateField("api_definition_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDefinitionChoice().(type) {
	case *ReplaceSpecType_ApiDefinitions:
		if fv, exists := v.FldValidators["api_definition_choice.api_definitions"]; exists {
			val := m.GetApiDefinitionChoice().(*ReplaceSpecType_ApiDefinitions).ApiDefinitions
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_definitions"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ApiSpecification:
		if fv, exists := v.FldValidators["api_definition_choice.api_specification"]; exists {
			val := m.GetApiDefinitionChoice().(*ReplaceSpecType_ApiSpecification).ApiSpecification
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_specification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DisableApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.disable_api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*ReplaceSpecType_DisableApiDefinition).DisableApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("disable_api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*ReplaceSpecType_ApiDefinition).ApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_discovery_choice"]; exists {
		val := m.GetApiDiscoveryChoice()
		vOpts := append(opts,
			db.WithValidateField("api_discovery_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDiscoveryChoice().(type) {
	case *ReplaceSpecType_EnableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.enable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*ReplaceSpecType_EnableApiDiscovery).EnableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("enable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DisableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.disable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*ReplaceSpecType_DisableApiDiscovery).DisableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("disable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_protection_rules"]; exists {

		vOpts := append(opts, db.WithValidateField("api_protection_rules"))
		if err := fv(ctx, m.GetApiProtectionRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("blocked_clients"))
		if err := fv(ctx, m.GetBlockedClients(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetBotDefenseChoice().(type) {
	case *ReplaceSpecType_DisableBotDefense:
		if fv, exists := v.FldValidators["bot_defense_choice.disable_bot_defense"]; exists {
			val := m.GetBotDefenseChoice().(*ReplaceSpecType_DisableBotDefense).DisableBotDefense
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("disable_bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_BotDefense:
		if fv, exists := v.FldValidators["bot_defense_choice.bot_defense"]; exists {
			val := m.GetBotDefenseChoice().(*ReplaceSpecType_BotDefense).BotDefense
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("bot_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_BotDefenseAdvanced:
		if fv, exists := v.FldValidators["bot_defense_choice.bot_defense_advanced"]; exists {
			val := m.GetBotDefenseChoice().(*ReplaceSpecType_BotDefenseAdvanced).BotDefenseAdvanced
			vOpts := append(opts,
				db.WithValidateField("bot_defense_choice"),
				db.WithValidateField("bot_defense_advanced"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["challenge_type"]; exists {
		val := m.GetChallengeType()
		vOpts := append(opts,
			db.WithValidateField("challenge_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChallengeType().(type) {
	case *ReplaceSpecType_JsChallenge:
		if fv, exists := v.FldValidators["challenge_type.js_challenge"]; exists {
			val := m.GetChallengeType().(*ReplaceSpecType_JsChallenge).JsChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_CaptchaChallenge:
		if fv, exists := v.FldValidators["challenge_type.captcha_challenge"]; exists {
			val := m.GetChallengeType().(*ReplaceSpecType_CaptchaChallenge).CaptchaChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("captcha_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NoChallenge:
		if fv, exists := v.FldValidators["challenge_type.no_challenge"]; exists {
			val := m.GetChallengeType().(*ReplaceSpecType_NoChallenge).NoChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("no_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_PolicyBasedChallenge:
		if fv, exists := v.FldValidators["challenge_type.policy_based_challenge"]; exists {
			val := m.GetChallengeType().(*ReplaceSpecType_PolicyBasedChallenge).PolicyBasedChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("policy_based_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_EnableChallenge:
		if fv, exists := v.FldValidators["challenge_type.enable_challenge"]; exists {
			val := m.GetChallengeType().(*ReplaceSpecType_EnableChallenge).EnableChallenge
			vOpts := append(opts,
				db.WithValidateField("challenge_type"),
				db.WithValidateField("enable_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetClientSideDefenseChoice().(type) {
	case *ReplaceSpecType_DisableClientSideDefense:
		if fv, exists := v.FldValidators["client_side_defense_choice.disable_client_side_defense"]; exists {
			val := m.GetClientSideDefenseChoice().(*ReplaceSpecType_DisableClientSideDefense).DisableClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("client_side_defense_choice"),
				db.WithValidateField("disable_client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ClientSideDefense:
		if fv, exists := v.FldValidators["client_side_defense_choice.client_side_defense"]; exists {
			val := m.GetClientSideDefenseChoice().(*ReplaceSpecType_ClientSideDefense).ClientSideDefense
			vOpts := append(opts,
				db.WithValidateField("client_side_defense_choice"),
				db.WithValidateField("client_side_defense"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cors_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("cors_policy"))
		if err := fv(ctx, m.GetCorsPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["csrf_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("csrf_policy"))
		if err := fv(ctx, m.GetCsrfPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["data_guard_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("data_guard_rules"))
		if err := fv(ctx, m.GetDataGuardRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ddos_detection_choice"]; exists {
		val := m.GetDdosDetectionChoice()
		vOpts := append(opts,
			db.WithValidateField("ddos_detection_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDdosDetectionChoice().(type) {
	case *ReplaceSpecType_EnableDdosDetection:
		if fv, exists := v.FldValidators["ddos_detection_choice.enable_ddos_detection"]; exists {
			val := m.GetDdosDetectionChoice().(*ReplaceSpecType_EnableDdosDetection).EnableDdosDetection
			vOpts := append(opts,
				db.WithValidateField("ddos_detection_choice"),
				db.WithValidateField("enable_ddos_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DisableDdosDetection:
		if fv, exists := v.FldValidators["ddos_detection_choice.disable_ddos_detection"]; exists {
			val := m.GetDdosDetectionChoice().(*ReplaceSpecType_DisableDdosDetection).DisableDdosDetection
			vOpts := append(opts,
				db.WithValidateField("ddos_detection_choice"),
				db.WithValidateField("disable_ddos_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["ddos_mitigation_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("ddos_mitigation_rules"))
		if err := fv(ctx, m.GetDdosMitigationRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_route_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("default_route_pools"))
		if err := fv(ctx, m.GetDefaultRoutePools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["graphql_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("graphql_rules"))
		if err := fv(ctx, m.GetGraphqlRules(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *ReplaceSpecType_RoundRobin:
		if fv, exists := v.FldValidators["hash_policy_choice.round_robin"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_RoundRobin).RoundRobin
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("round_robin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LeastActive:
		if fv, exists := v.FldValidators["hash_policy_choice.least_active"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_LeastActive).LeastActive
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("least_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Random:
		if fv, exists := v.FldValidators["hash_policy_choice.random"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_Random).Random
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("random"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SourceIpStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.source_ip_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_SourceIpStickiness).SourceIpStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("source_ip_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_CookieStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.cookie_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_CookieStickiness).CookieStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("cookie_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_RingHash:
		if fv, exists := v.FldValidators["hash_policy_choice.ring_hash"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_RingHash).RingHash
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("ring_hash"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetIpReputationChoice().(type) {
	case *ReplaceSpecType_DisableIpReputation:
		if fv, exists := v.FldValidators["ip_reputation_choice.disable_ip_reputation"]; exists {
			val := m.GetIpReputationChoice().(*ReplaceSpecType_DisableIpReputation).DisableIpReputation
			vOpts := append(opts,
				db.WithValidateField("ip_reputation_choice"),
				db.WithValidateField("disable_ip_reputation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_EnableIpReputation:
		if fv, exists := v.FldValidators["ip_reputation_choice.enable_ip_reputation"]; exists {
			val := m.GetIpReputationChoice().(*ReplaceSpecType_EnableIpReputation).EnableIpReputation
			vOpts := append(opts,
				db.WithValidateField("ip_reputation_choice"),
				db.WithValidateField("enable_ip_reputation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["jwt_validation"]; exists {

		vOpts := append(opts, db.WithValidateField("jwt_validation"))
		if err := fv(ctx, m.GetJwtValidation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action"]; exists {
		val := m.GetL7DdosAutoMitigationAction()
		vOpts := append(opts,
			db.WithValidateField("l7_ddos_auto_mitigation_action"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetL7DdosAutoMitigationAction().(type) {
	case *ReplaceSpecType_L7DdosActionDefault:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_default"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*ReplaceSpecType_L7DdosActionDefault).L7DdosActionDefault
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_L7DdosActionBlock:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_block"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*ReplaceSpecType_L7DdosActionBlock).L7DdosActionBlock
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_block"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_L7DdosActionJsChallenge:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_js_challenge"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*ReplaceSpecType_L7DdosActionJsChallenge).L7DdosActionJsChallenge
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_js_challenge"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_L7DdosActionNone:
		if fv, exists := v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_none"]; exists {
			val := m.GetL7DdosAutoMitigationAction().(*ReplaceSpecType_L7DdosActionNone).L7DdosActionNone
			vOpts := append(opts,
				db.WithValidateField("l7_ddos_auto_mitigation_action"),
				db.WithValidateField("l7_ddos_action_none"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["loadbalancer_type"]; exists {
		val := m.GetLoadbalancerType()
		vOpts := append(opts,
			db.WithValidateField("loadbalancer_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLoadbalancerType().(type) {
	case *ReplaceSpecType_Http:
		if fv, exists := v.FldValidators["loadbalancer_type.http"]; exists {
			val := m.GetLoadbalancerType().(*ReplaceSpecType_Http).Http
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("http"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_Https:
		if fv, exists := v.FldValidators["loadbalancer_type.https"]; exists {
			val := m.GetLoadbalancerType().(*ReplaceSpecType_Https).Https
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_HttpsAutoCert:
		if fv, exists := v.FldValidators["loadbalancer_type.https_auto_cert"]; exists {
			val := m.GetLoadbalancerType().(*ReplaceSpecType_HttpsAutoCert).HttpsAutoCert
			vOpts := append(opts,
				db.WithValidateField("loadbalancer_type"),
				db.WithValidateField("https_auto_cert"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_detection_choice"]; exists {
		val := m.GetMaliciousUserDetectionChoice()
		vOpts := append(opts,
			db.WithValidateField("malicious_user_detection_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMaliciousUserDetectionChoice().(type) {
	case *ReplaceSpecType_EnableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.enable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*ReplaceSpecType_EnableMaliciousUserDetection).EnableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("enable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DisableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.disable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*ReplaceSpecType_DisableMaliciousUserDetection).DisableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("disable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_mitigation"]; exists {

		vOpts := append(opts, db.WithValidateField("malicious_user_mitigation"))
		if err := fv(ctx, m.GetMaliciousUserMitigation(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetMlConfigChoice().(type) {
	case *ReplaceSpecType_SingleLbApp:
		if fv, exists := v.FldValidators["ml_config_choice.single_lb_app"]; exists {
			val := m.GetMlConfigChoice().(*ReplaceSpecType_SingleLbApp).SingleLbApp
			vOpts := append(opts,
				db.WithValidateField("ml_config_choice"),
				db.WithValidateField("single_lb_app"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_MultiLbApp:
		if fv, exists := v.FldValidators["ml_config_choice.multi_lb_app"]; exists {
			val := m.GetMlConfigChoice().(*ReplaceSpecType_MultiLbApp).MultiLbApp
			vOpts := append(opts,
				db.WithValidateField("ml_config_choice"),
				db.WithValidateField("multi_lb_app"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["more_option"]; exists {

		vOpts := append(opts, db.WithValidateField("more_option"))
		if err := fv(ctx, m.GetMoreOption(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetOriginPoolChoice().(type) {
	case *ReplaceSpecType_DefaultPool:
		if fv, exists := v.FldValidators["origin_pool_choice.default_pool"]; exists {
			val := m.GetOriginPoolChoice().(*ReplaceSpecType_DefaultPool).DefaultPool
			vOpts := append(opts,
				db.WithValidateField("origin_pool_choice"),
				db.WithValidateField("default_pool"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DefaultPoolList:
		if fv, exists := v.FldValidators["origin_pool_choice.default_pool_list"]; exists {
			val := m.GetOriginPoolChoice().(*ReplaceSpecType_DefaultPoolList).DefaultPoolList
			vOpts := append(opts,
				db.WithValidateField("origin_pool_choice"),
				db.WithValidateField("default_pool_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["origin_server_subset_rule_list"]; exists {

		vOpts := append(opts, db.WithValidateField("origin_server_subset_rule_list"))
		if err := fv(ctx, m.GetOriginServerSubsetRuleList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["protected_cookies"]; exists {
		vOpts := append(opts, db.WithValidateField("protected_cookies"))
		if err := fv(ctx, m.GetProtectedCookies(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rate_limit_choice"]; exists {
		val := m.GetRateLimitChoice()
		vOpts := append(opts,
			db.WithValidateField("rate_limit_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRateLimitChoice().(type) {
	case *ReplaceSpecType_DisableRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.disable_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*ReplaceSpecType_DisableRateLimit).DisableRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("disable_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_RateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*ReplaceSpecType_RateLimit).RateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ApiRateLimit:
		if fv, exists := v.FldValidators["rate_limit_choice.api_rate_limit"]; exists {
			val := m.GetRateLimitChoice().(*ReplaceSpecType_ApiRateLimit).ApiRateLimit
			vOpts := append(opts,
				db.WithValidateField("rate_limit_choice"),
				db.WithValidateField("api_rate_limit"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["routes"]; exists {
		vOpts := append(opts, db.WithValidateField("routes"))
		if err := fv(ctx, m.GetRoutes(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service_policy_choice"]; exists {
		val := m.GetServicePolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("service_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServicePolicyChoice().(type) {
	case *ReplaceSpecType_ServicePoliciesFromNamespace:
		if fv, exists := v.FldValidators["service_policy_choice.service_policies_from_namespace"]; exists {
			val := m.GetServicePolicyChoice().(*ReplaceSpecType_ServicePoliciesFromNamespace).ServicePoliciesFromNamespace
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("service_policies_from_namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NoServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.no_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*ReplaceSpecType_NoServicePolicies).NoServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("no_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ActiveServicePolicies:
		if fv, exists := v.FldValidators["service_policy_choice.active_service_policies"]; exists {
			val := m.GetServicePolicyChoice().(*ReplaceSpecType_ActiveServicePolicies).ActiveServicePolicies
			vOpts := append(opts,
				db.WithValidateField("service_policy_choice"),
				db.WithValidateField("active_service_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetSlowDdosMitigationChoice().(type) {
	case *ReplaceSpecType_SlowDdosMitigation:
		if fv, exists := v.FldValidators["slow_ddos_mitigation_choice.slow_ddos_mitigation"]; exists {
			val := m.GetSlowDdosMitigationChoice().(*ReplaceSpecType_SlowDdosMitigation).SlowDdosMitigation
			vOpts := append(opts,
				db.WithValidateField("slow_ddos_mitigation_choice"),
				db.WithValidateField("slow_ddos_mitigation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SystemDefaultTimeouts:
		if fv, exists := v.FldValidators["slow_ddos_mitigation_choice.system_default_timeouts"]; exists {
			val := m.GetSlowDdosMitigationChoice().(*ReplaceSpecType_SystemDefaultTimeouts).SystemDefaultTimeouts
			vOpts := append(opts,
				db.WithValidateField("slow_ddos_mitigation_choice"),
				db.WithValidateField("system_default_timeouts"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["trust_client_ip_headers_choice"]; exists {
		val := m.GetTrustClientIpHeadersChoice()
		vOpts := append(opts,
			db.WithValidateField("trust_client_ip_headers_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTrustClientIpHeadersChoice().(type) {
	case *ReplaceSpecType_DisableTrustClientIpHeaders:
		if fv, exists := v.FldValidators["trust_client_ip_headers_choice.disable_trust_client_ip_headers"]; exists {
			val := m.GetTrustClientIpHeadersChoice().(*ReplaceSpecType_DisableTrustClientIpHeaders).DisableTrustClientIpHeaders
			vOpts := append(opts,
				db.WithValidateField("trust_client_ip_headers_choice"),
				db.WithValidateField("disable_trust_client_ip_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_EnableTrustClientIpHeaders:
		if fv, exists := v.FldValidators["trust_client_ip_headers_choice.enable_trust_client_ip_headers"]; exists {
			val := m.GetTrustClientIpHeadersChoice().(*ReplaceSpecType_EnableTrustClientIpHeaders).EnableTrustClientIpHeaders
			vOpts := append(opts,
				db.WithValidateField("trust_client_ip_headers_choice"),
				db.WithValidateField("enable_trust_client_ip_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["trusted_clients"]; exists {
		vOpts := append(opts, db.WithValidateField("trusted_clients"))
		if err := fv(ctx, m.GetTrustedClients(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["user_id_choice"]; exists {
		val := m.GetUserIdChoice()
		vOpts := append(opts,
			db.WithValidateField("user_id_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetUserIdChoice().(type) {
	case *ReplaceSpecType_UserIdentification:
		if fv, exists := v.FldValidators["user_id_choice.user_identification"]; exists {
			val := m.GetUserIdChoice().(*ReplaceSpecType_UserIdentification).UserIdentification
			vOpts := append(opts,
				db.WithValidateField("user_id_choice"),
				db.WithValidateField("user_identification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_UserIdClientIp:
		if fv, exists := v.FldValidators["user_id_choice.user_id_client_ip"]; exists {
			val := m.GetUserIdChoice().(*ReplaceSpecType_UserIdClientIp).UserIdClientIp
			vOpts := append(opts,
				db.WithValidateField("user_id_choice"),
				db.WithValidateField("user_id_client_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_choice"]; exists {
		val := m.GetWafChoice()
		vOpts := append(opts,
			db.WithValidateField("waf_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWafChoice().(type) {
	case *ReplaceSpecType_DisableWaf:
		if fv, exists := v.FldValidators["waf_choice.disable_waf"]; exists {
			val := m.GetWafChoice().(*ReplaceSpecType_DisableWaf).DisableWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("disable_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AppFirewall:
		if fv, exists := v.FldValidators["waf_choice.app_firewall"]; exists {
			val := m.GetWafChoice().(*ReplaceSpecType_AppFirewall).AppFirewall
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("app_firewall"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["waf_exclusion_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("waf_exclusion_rules"))
		if err := fv(ctx, m.GetWafExclusionRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdvertiseChoice := v.AdvertiseChoiceValidationRuleHandler
	rulesAdvertiseChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdvertiseChoice(rulesAdvertiseChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.advertise_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["advertise_choice"] = vFn

	vrhApiDefinitionChoice := v.ApiDefinitionChoiceValidationRuleHandler
	rulesApiDefinitionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDefinitionChoice(rulesApiDefinitionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.api_definition_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_definition_choice"] = vFn

	vrhApiDiscoveryChoice := v.ApiDiscoveryChoiceValidationRuleHandler
	rulesApiDiscoveryChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDiscoveryChoice(rulesApiDiscoveryChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.api_discovery_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_discovery_choice"] = vFn

	vrhChallengeType := v.ChallengeTypeValidationRuleHandler
	rulesChallengeType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChallengeType(rulesChallengeType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.challenge_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["challenge_type"] = vFn

	vrhDdosDetectionChoice := v.DdosDetectionChoiceValidationRuleHandler
	rulesDdosDetectionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDdosDetectionChoice(rulesDdosDetectionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.ddos_detection_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ddos_detection_choice"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhL7DdosAutoMitigationAction := v.L7DdosAutoMitigationActionValidationRuleHandler
	rulesL7DdosAutoMitigationAction := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhL7DdosAutoMitigationAction(rulesL7DdosAutoMitigationAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.l7_ddos_auto_mitigation_action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["l7_ddos_auto_mitigation_action"] = vFn

	vrhLoadbalancerType := v.LoadbalancerTypeValidationRuleHandler
	rulesLoadbalancerType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLoadbalancerType(rulesLoadbalancerType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.loadbalancer_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["loadbalancer_type"] = vFn

	vrhMaliciousUserDetectionChoice := v.MaliciousUserDetectionChoiceValidationRuleHandler
	rulesMaliciousUserDetectionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMaliciousUserDetectionChoice(rulesMaliciousUserDetectionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.malicious_user_detection_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["malicious_user_detection_choice"] = vFn

	vrhRateLimitChoice := v.RateLimitChoiceValidationRuleHandler
	rulesRateLimitChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRateLimitChoice(rulesRateLimitChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.rate_limit_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limit_choice"] = vFn

	vrhServicePolicyChoice := v.ServicePolicyChoiceValidationRuleHandler
	rulesServicePolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServicePolicyChoice(rulesServicePolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.service_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_policy_choice"] = vFn

	vrhTrustClientIpHeadersChoice := v.TrustClientIpHeadersChoiceValidationRuleHandler
	rulesTrustClientIpHeadersChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTrustClientIpHeadersChoice(rulesTrustClientIpHeadersChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.trust_client_ip_headers_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trust_client_ip_headers_choice"] = vFn

	vrhUserIdChoice := v.UserIdChoiceValidationRuleHandler
	rulesUserIdChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhUserIdChoice(rulesUserIdChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.user_id_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["user_id_choice"] = vFn

	vrhWafChoice := v.WafChoiceValidationRuleHandler
	rulesWafChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWafChoice(rulesWafChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.waf_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.message.required":                "true",
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.min_items":              "1",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhDefaultRoutePools := v.DefaultRoutePoolsValidationRuleHandler
	rulesDefaultRoutePools := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "8",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDefaultRoutePools(rulesDefaultRoutePools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.default_route_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_route_pools"] = vFn

	vrhRoutes := v.RoutesValidationRuleHandler
	rulesRoutes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "256",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRoutes(rulesRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["routes"] = vFn

	vrhWafExclusionRules := v.WafExclusionRulesValidationRuleHandler
	rulesWafExclusionRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhWafExclusionRules(rulesWafExclusionRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.waf_exclusion_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["waf_exclusion_rules"] = vFn

	vrhBlockedClients := v.BlockedClientsValidationRuleHandler
	rulesBlockedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhBlockedClients(rulesBlockedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.blocked_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_clients"] = vFn

	vrhTrustedClients := v.TrustedClientsValidationRuleHandler
	rulesTrustedClients := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhTrustedClients(rulesTrustedClients)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.trusted_clients: %s", err)
		panic(errMsg)
	}
	v.FldValidators["trusted_clients"] = vFn

	vrhDdosMitigationRules := v.DdosMitigationRulesValidationRuleHandler
	rulesDdosMitigationRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "256",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDdosMitigationRules(rulesDdosMitigationRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.ddos_mitigation_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ddos_mitigation_rules"] = vFn

	vrhDataGuardRules := v.DataGuardRulesValidationRuleHandler
	rulesDataGuardRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhDataGuardRules(rulesDataGuardRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.data_guard_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["data_guard_rules"] = vFn

	vrhGraphqlRules := v.GraphqlRulesValidationRuleHandler
	rulesGraphqlRules := map[string]string{
		"ves.io.schema.rules.repeated.max_items":            "64",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhGraphqlRules(rulesGraphqlRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.graphql_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["graphql_rules"] = vFn

	vrhProtectedCookies := v.ProtectedCookiesValidationRuleHandler
	rulesProtectedCookies := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhProtectedCookies(rulesProtectedCookies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.protected_cookies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protected_cookies"] = vFn

	v.FldValidators["advertise_choice.advertise_on_public"] = ves_io_schema_views.AdvertisePublicValidator().Validate
	v.FldValidators["advertise_choice.advertise_custom"] = ves_io_schema_views.AdvertiseCustomValidator().Validate

	v.FldValidators["api_definition_choice.api_definitions"] = ApiDefinitionListValidator().Validate
	v.FldValidators["api_definition_choice.api_specification"] = APISpecificationSettingsValidator().Validate
	v.FldValidators["api_definition_choice.api_definition"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_discovery_choice.enable_api_discovery"] = ApiDiscoverySettingValidator().Validate

	v.FldValidators["bot_defense_choice.bot_defense"] = ShapeBotDefenseTypeValidator().Validate
	v.FldValidators["bot_defense_choice.bot_defense_advanced"] = BotDefenseAdvancedTypeValidator().Validate

	v.FldValidators["challenge_type.js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.captcha_challenge"] = ves_io_schema_virtual_host.CaptchaChallengeTypeValidator().Validate
	v.FldValidators["challenge_type.policy_based_challenge"] = PolicyBasedChallengeValidator().Validate
	v.FldValidators["challenge_type.enable_challenge"] = EnableChallengeValidator().Validate

	v.FldValidators["client_side_defense_choice.client_side_defense"] = ClientSideDefenseTypeValidator().Validate

	v.FldValidators["ddos_detection_choice.enable_ddos_detection"] = EnableDDoSDetectionSettingValidator().Validate

	v.FldValidators["hash_policy_choice.cookie_stickiness"] = ves_io_schema_route.CookieForHashingValidator().Validate
	v.FldValidators["hash_policy_choice.ring_hash"] = HashPolicyListTypeValidator().Validate

	v.FldValidators["ip_reputation_choice.enable_ip_reputation"] = IPThreatCategoryListTypeValidator().Validate

	v.FldValidators["l7_ddos_auto_mitigation_action.l7_ddos_action_js_challenge"] = ves_io_schema_virtual_host.JavascriptChallengeTypeValidator().Validate

	v.FldValidators["loadbalancer_type.http"] = ProxyTypeHttpValidator().Validate
	v.FldValidators["loadbalancer_type.https"] = ProxyTypeHttpsValidator().Validate
	v.FldValidators["loadbalancer_type.https_auto_cert"] = ProxyTypeHttpsAutoCertsValidator().Validate

	v.FldValidators["ml_config_choice.single_lb_app"] = SingleLoadBalancerAppSettingValidator().Validate

	v.FldValidators["origin_pool_choice.default_pool"] = ves_io_schema_views_origin_pool.GlobalSpecTypeValidator().Validate
	v.FldValidators["origin_pool_choice.default_pool_list"] = ves_io_schema_views.OriginPoolListTypeValidator().Validate

	v.FldValidators["rate_limit_choice.rate_limit"] = RateLimitConfigTypeValidator().Validate
	v.FldValidators["rate_limit_choice.api_rate_limit"] = APIRateLimitValidator().Validate

	v.FldValidators["service_policy_choice.active_service_policies"] = ServicePolicyListValidator().Validate

	v.FldValidators["slow_ddos_mitigation_choice.slow_ddos_mitigation"] = ves_io_schema_virtual_host.SlowDDoSMitigationValidator().Validate

	v.FldValidators["trust_client_ip_headers_choice.enable_trust_client_ip_headers"] = ves_io_schema_virtual_host.ClientIPHeadersValidator().Validate

	v.FldValidators["user_id_choice.user_identification"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["waf_choice.app_firewall"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cors_policy"] = ves_io_schema.CorsPolicyValidator().Validate

	v.FldValidators["more_option"] = AdvancedOptionsTypeValidator().Validate

	v.FldValidators["malicious_user_mitigation"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_protection_rules"] = APIProtectionRulesValidator().Validate

	v.FldValidators["csrf_policy"] = ves_io_schema.CsrfPolicyValidator().Validate

	v.FldValidators["jwt_validation"] = JWTValidationValidator().Validate

	v.FldValidators["origin_server_subset_rule_list"] = OriginServerSubsetRuleListTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *RequestBody) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RequestBody) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RequestBody) DeepCopy() *RequestBody {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RequestBody{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RequestBody) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RequestBody) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RequestBodyValidator().Validate(ctx, m, opts...)
}

type ValidateRequestBody struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRequestBody) ValueTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for value_type")
	}
	return validatorFn, nil
}

func (v *ValidateRequestBody) ValueTypeExactValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ExactValue, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for exact_value")
	}
	return oValidatorFn_ExactValue, nil
}
func (v *ValidateRequestBody) ValueTypeRegexValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_RegexValue, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for regex_value")
	}
	return oValidatorFn_RegexValue, nil
}

func (v *ValidateRequestBody) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RequestBody)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RequestBody got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["value_type"]; exists {
		val := m.GetValueType()
		vOpts := append(opts,
			db.WithValidateField("value_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetValueType().(type) {
	case *RequestBody_ExactValue:
		if fv, exists := v.FldValidators["value_type.exact_value"]; exists {
			val := m.GetValueType().(*RequestBody_ExactValue).ExactValue
			vOpts := append(opts,
				db.WithValidateField("value_type"),
				db.WithValidateField("exact_value"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RequestBody_RegexValue:
		if fv, exists := v.FldValidators["value_type.regex_value"]; exists {
			val := m.GetValueType().(*RequestBody_RegexValue).RegexValue
			vOpts := append(opts,
				db.WithValidateField("value_type"),
				db.WithValidateField("regex_value"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRequestBodyValidator = func() *ValidateRequestBody {
	v := &ValidateRequestBody{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhValueType := v.ValueTypeValidationRuleHandler
	rulesValueType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhValueType(rulesValueType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RequestBody.value_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["value_type"] = vFn

	vrhValueTypeExactValue := v.ValueTypeExactValueValidationRuleHandler
	rulesValueTypeExactValue := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
		"ves.io.schema.rules.string.min_len": "1",
	}
	vFnMap["value_type.exact_value"], err = vrhValueTypeExactValue(rulesValueTypeExactValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field RequestBody.value_type_exact_value: %s", err)
		panic(errMsg)
	}
	vrhValueTypeRegexValue := v.ValueTypeRegexValueValidationRuleHandler
	rulesValueTypeRegexValue := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
		"ves.io.schema.rules.string.min_len": "1",
		"ves.io.schema.rules.string.regex":   "true",
	}
	vFnMap["value_type.regex_value"], err = vrhValueTypeRegexValue(rulesValueTypeRegexValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field RequestBody.value_type_regex_value: %s", err)
		panic(errMsg)
	}

	v.FldValidators["value_type.exact_value"] = vFnMap["value_type.exact_value"]
	v.FldValidators["value_type.regex_value"] = vFnMap["value_type.regex_value"]

	return v
}()

func RequestBodyValidator() db.Validator {
	return DefaultRequestBodyValidator
}

// augmented methods on protoc/std generated struct

func (m *ReservedClaims) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReservedClaims) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReservedClaims) DeepCopy() *ReservedClaims {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReservedClaims{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReservedClaims) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReservedClaims) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReservedClaimsValidator().Validate(ctx, m, opts...)
}

type ValidateReservedClaims struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReservedClaims) AudienceValidationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for audience_validation")
	}
	return validatorFn, nil
}

func (v *ValidateReservedClaims) IssuerValidationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for issuer_validation")
	}
	return validatorFn, nil
}

func (v *ValidateReservedClaims) ValidatePeriodValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for validate_period")
	}
	return validatorFn, nil
}

func (v *ValidateReservedClaims) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReservedClaims)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReservedClaims got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["audience_validation"]; exists {
		val := m.GetAudienceValidation()
		vOpts := append(opts,
			db.WithValidateField("audience_validation"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAudienceValidation().(type) {
	case *ReservedClaims_AudienceDisable:
		if fv, exists := v.FldValidators["audience_validation.audience_disable"]; exists {
			val := m.GetAudienceValidation().(*ReservedClaims_AudienceDisable).AudienceDisable
			vOpts := append(opts,
				db.WithValidateField("audience_validation"),
				db.WithValidateField("audience_disable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReservedClaims_Audience:
		if fv, exists := v.FldValidators["audience_validation.audience"]; exists {
			val := m.GetAudienceValidation().(*ReservedClaims_Audience).Audience
			vOpts := append(opts,
				db.WithValidateField("audience_validation"),
				db.WithValidateField("audience"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["issuer_validation"]; exists {
		val := m.GetIssuerValidation()
		vOpts := append(opts,
			db.WithValidateField("issuer_validation"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetIssuerValidation().(type) {
	case *ReservedClaims_IssuerDisable:
		if fv, exists := v.FldValidators["issuer_validation.issuer_disable"]; exists {
			val := m.GetIssuerValidation().(*ReservedClaims_IssuerDisable).IssuerDisable
			vOpts := append(opts,
				db.WithValidateField("issuer_validation"),
				db.WithValidateField("issuer_disable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReservedClaims_Issuer:
		if fv, exists := v.FldValidators["issuer_validation.issuer"]; exists {
			val := m.GetIssuerValidation().(*ReservedClaims_Issuer).Issuer
			vOpts := append(opts,
				db.WithValidateField("issuer_validation"),
				db.WithValidateField("issuer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["validate_period"]; exists {
		val := m.GetValidatePeriod()
		vOpts := append(opts,
			db.WithValidateField("validate_period"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetValidatePeriod().(type) {
	case *ReservedClaims_ValidatePeriodDisable:
		if fv, exists := v.FldValidators["validate_period.validate_period_disable"]; exists {
			val := m.GetValidatePeriod().(*ReservedClaims_ValidatePeriodDisable).ValidatePeriodDisable
			vOpts := append(opts,
				db.WithValidateField("validate_period"),
				db.WithValidateField("validate_period_disable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReservedClaims_ValidatePeriodEnable:
		if fv, exists := v.FldValidators["validate_period.validate_period_enable"]; exists {
			val := m.GetValidatePeriod().(*ReservedClaims_ValidatePeriodEnable).ValidatePeriodEnable
			vOpts := append(opts,
				db.WithValidateField("validate_period"),
				db.WithValidateField("validate_period_enable"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReservedClaimsValidator = func() *ValidateReservedClaims {
	v := &ValidateReservedClaims{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAudienceValidation := v.AudienceValidationValidationRuleHandler
	rulesAudienceValidation := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAudienceValidation(rulesAudienceValidation)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReservedClaims.audience_validation: %s", err)
		panic(errMsg)
	}
	v.FldValidators["audience_validation"] = vFn

	vrhIssuerValidation := v.IssuerValidationValidationRuleHandler
	rulesIssuerValidation := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhIssuerValidation(rulesIssuerValidation)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReservedClaims.issuer_validation: %s", err)
		panic(errMsg)
	}
	v.FldValidators["issuer_validation"] = vFn

	vrhValidatePeriod := v.ValidatePeriodValidationRuleHandler
	rulesValidatePeriod := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhValidatePeriod(rulesValidatePeriod)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReservedClaims.validate_period: %s", err)
		panic(errMsg)
	}
	v.FldValidators["validate_period"] = vFn

	v.FldValidators["audience_validation.audience"] = AudiencesValidator().Validate

	return v
}()

func ReservedClaimsValidator() db.Validator {
	return DefaultReservedClaimsValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteSimpleAdvancedOptions) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteSimpleAdvancedOptions) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *RouteSimpleAdvancedOptions) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	for idx, e := range m.GetRequestHeadersToAdd() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting RouteSimpleAdvancedOptions.request_headers_to_add idx %v", idx)
		}
	}

	for idx, e := range m.GetResponseHeadersToAdd() {
		if err := e.Redact(ctx); err != nil {
			return errors.Wrapf(err, "Redacting RouteSimpleAdvancedOptions.response_headers_to_add idx %v", idx)
		}
	}

	return nil
}

func (m *RouteSimpleAdvancedOptions) DeepCopy() *RouteSimpleAdvancedOptions {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteSimpleAdvancedOptions{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteSimpleAdvancedOptions) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteSimpleAdvancedOptions) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteSimpleAdvancedOptionsValidator().Validate(ctx, m, opts...)
}

func (m *RouteSimpleAdvancedOptions) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetMirroringChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetMirroringChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetWafChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetWafChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *RouteSimpleAdvancedOptions) GetMirroringChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetMirroringChoice() == nil {
		return nil, nil
	}
	switch m.GetMirroringChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisableMirroring:

		return nil, nil

	case *RouteSimpleAdvancedOptions_MirrorPolicy:
		drInfos, err := m.GetMirrorPolicy().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetMirrorPolicy().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "mirror_policy." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *RouteSimpleAdvancedOptions) GetWafChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetWafChoice().(type) {
	case *RouteSimpleAdvancedOptions_InheritedWaf:

		return nil, nil

	case *RouteSimpleAdvancedOptions_DisableWaf:

		return nil, nil

	case *RouteSimpleAdvancedOptions_AppFirewall:

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("app_firewall.Object")
		dri := db.DRefInfo{
			RefdType:   "app_firewall.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "app_firewall",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetWafChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *RouteSimpleAdvancedOptions) GetWafChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetWafChoice().(type) {
	case *RouteSimpleAdvancedOptions_InheritedWaf:

	case *RouteSimpleAdvancedOptions_DisableWaf:

	case *RouteSimpleAdvancedOptions_AppFirewall:
		refdType, err := d.TypeForEntryKind("", "", "app_firewall.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: app_firewall")
		}

		vref := m.GetAppFirewall()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "app_firewall.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateRouteSimpleAdvancedOptions struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteSimpleAdvancedOptions) BufferChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for buffer_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) ClusterRetractChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_retract_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) MirroringChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mirroring_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) RetryPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for retry_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) RewriteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rewrite_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) RewriteChoicePrefixRewriteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_PrefixRewrite, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for prefix_rewrite")
	}
	return oValidatorFn_PrefixRewrite, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) SpdyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for spdy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) WebsocketChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for websocket_choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) EndpointSubsetsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for endpoint_subsets")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for endpoint_subsets")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for endpoint_subsets")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map endpoint_subsets")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items endpoint_subsets")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) RequestHeadersToAddValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for request_headers_to_add")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.HeaderManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for request_headers_to_add")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated request_headers_to_add")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items request_headers_to_add")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) RequestHeadersToRemoveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for request_headers_to_remove")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for request_headers_to_remove")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated request_headers_to_remove")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items request_headers_to_remove")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) ResponseHeadersToAddValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for response_headers_to_add")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderManipulationOptionType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.HeaderManipulationOptionTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for response_headers_to_add")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderManipulationOptionType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderManipulationOptionType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated response_headers_to_add")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items response_headers_to_add")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) ResponseHeadersToRemoveValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for response_headers_to_remove")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for response_headers_to_remove")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated response_headers_to_remove")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items response_headers_to_remove")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) TimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for timeout")
	}

	return validatorFn, nil
}

func (v *ValidateRouteSimpleAdvancedOptions) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteSimpleAdvancedOptions)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteSimpleAdvancedOptions got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetBotDefenseJavascriptInjectionChoice().(type) {
	case *RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection:
		if fv, exists := v.FldValidators["bot_defense_javascript_injection_choice.inherited_bot_defense_javascript_injection"]; exists {
			val := m.GetBotDefenseJavascriptInjectionChoice().(*RouteSimpleAdvancedOptions_InheritedBotDefenseJavascriptInjection).InheritedBotDefenseJavascriptInjection
			vOpts := append(opts,
				db.WithValidateField("bot_defense_javascript_injection_choice"),
				db.WithValidateField("inherited_bot_defense_javascript_injection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection:
		if fv, exists := v.FldValidators["bot_defense_javascript_injection_choice.bot_defense_javascript_injection"]; exists {
			val := m.GetBotDefenseJavascriptInjectionChoice().(*RouteSimpleAdvancedOptions_BotDefenseJavascriptInjection).BotDefenseJavascriptInjection
			vOpts := append(opts,
				db.WithValidateField("bot_defense_javascript_injection_choice"),
				db.WithValidateField("bot_defense_javascript_injection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["buffer_choice"]; exists {
		val := m.GetBufferChoice()
		vOpts := append(opts,
			db.WithValidateField("buffer_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBufferChoice().(type) {
	case *RouteSimpleAdvancedOptions_CommonBuffering:
		if fv, exists := v.FldValidators["buffer_choice.common_buffering"]; exists {
			val := m.GetBufferChoice().(*RouteSimpleAdvancedOptions_CommonBuffering).CommonBuffering
			vOpts := append(opts,
				db.WithValidateField("buffer_choice"),
				db.WithValidateField("common_buffering"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_BufferPolicy:
		if fv, exists := v.FldValidators["buffer_choice.buffer_policy"]; exists {
			val := m.GetBufferChoice().(*RouteSimpleAdvancedOptions_BufferPolicy).BufferPolicy
			vOpts := append(opts,
				db.WithValidateField("buffer_choice"),
				db.WithValidateField("buffer_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_retract_choice"]; exists {
		val := m.GetClusterRetractChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_retract_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterRetractChoice().(type) {
	case *RouteSimpleAdvancedOptions_RetractCluster:
		if fv, exists := v.FldValidators["cluster_retract_choice.retract_cluster"]; exists {
			val := m.GetClusterRetractChoice().(*RouteSimpleAdvancedOptions_RetractCluster).RetractCluster
			vOpts := append(opts,
				db.WithValidateField("cluster_retract_choice"),
				db.WithValidateField("retract_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_DoNotRetractCluster:
		if fv, exists := v.FldValidators["cluster_retract_choice.do_not_retract_cluster"]; exists {
			val := m.GetClusterRetractChoice().(*RouteSimpleAdvancedOptions_DoNotRetractCluster).DoNotRetractCluster
			vOpts := append(opts,
				db.WithValidateField("cluster_retract_choice"),
				db.WithValidateField("do_not_retract_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cors_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("cors_policy"))
		if err := fv(ctx, m.GetCorsPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["csrf_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("csrf_policy"))
		if err := fv(ctx, m.GetCsrfPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disable_location_add"]; exists {

		vOpts := append(opts, db.WithValidateField("disable_location_add"))
		if err := fv(ctx, m.GetDisableLocationAdd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["endpoint_subsets"]; exists {
		vOpts := append(opts, db.WithValidateField("endpoint_subsets"))
		if err := fv(ctx, m.GetEndpointSubsets(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *RouteSimpleAdvancedOptions_CommonHashPolicy:
		if fv, exists := v.FldValidators["hash_policy_choice.common_hash_policy"]; exists {
			val := m.GetHashPolicyChoice().(*RouteSimpleAdvancedOptions_CommonHashPolicy).CommonHashPolicy
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("common_hash_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_SpecificHashPolicy:
		if fv, exists := v.FldValidators["hash_policy_choice.specific_hash_policy"]; exists {
			val := m.GetHashPolicyChoice().(*RouteSimpleAdvancedOptions_SpecificHashPolicy).SpecificHashPolicy
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("specific_hash_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["mirroring_choice"]; exists {
		val := m.GetMirroringChoice()
		vOpts := append(opts,
			db.WithValidateField("mirroring_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMirroringChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisableMirroring:
		if fv, exists := v.FldValidators["mirroring_choice.disable_mirroring"]; exists {
			val := m.GetMirroringChoice().(*RouteSimpleAdvancedOptions_DisableMirroring).DisableMirroring
			vOpts := append(opts,
				db.WithValidateField("mirroring_choice"),
				db.WithValidateField("disable_mirroring"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_MirrorPolicy:
		if fv, exists := v.FldValidators["mirroring_choice.mirror_policy"]; exists {
			val := m.GetMirroringChoice().(*RouteSimpleAdvancedOptions_MirrorPolicy).MirrorPolicy
			vOpts := append(opts,
				db.WithValidateField("mirroring_choice"),
				db.WithValidateField("mirror_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["priority"]; exists {

		vOpts := append(opts, db.WithValidateField("priority"))
		if err := fv(ctx, m.GetPriority(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_headers_to_add"]; exists {
		vOpts := append(opts, db.WithValidateField("request_headers_to_add"))
		if err := fv(ctx, m.GetRequestHeadersToAdd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["request_headers_to_remove"]; exists {
		vOpts := append(opts, db.WithValidateField("request_headers_to_remove"))
		if err := fv(ctx, m.GetRequestHeadersToRemove(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_headers_to_add"]; exists {
		vOpts := append(opts, db.WithValidateField("response_headers_to_add"))
		if err := fv(ctx, m.GetResponseHeadersToAdd(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["response_headers_to_remove"]; exists {
		vOpts := append(opts, db.WithValidateField("response_headers_to_remove"))
		if err := fv(ctx, m.GetResponseHeadersToRemove(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["retry_policy_choice"]; exists {
		val := m.GetRetryPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("retry_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRetryPolicyChoice().(type) {
	case *RouteSimpleAdvancedOptions_DefaultRetryPolicy:
		if fv, exists := v.FldValidators["retry_policy_choice.default_retry_policy"]; exists {
			val := m.GetRetryPolicyChoice().(*RouteSimpleAdvancedOptions_DefaultRetryPolicy).DefaultRetryPolicy
			vOpts := append(opts,
				db.WithValidateField("retry_policy_choice"),
				db.WithValidateField("default_retry_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_RetryPolicy:
		if fv, exists := v.FldValidators["retry_policy_choice.retry_policy"]; exists {
			val := m.GetRetryPolicyChoice().(*RouteSimpleAdvancedOptions_RetryPolicy).RetryPolicy
			vOpts := append(opts,
				db.WithValidateField("retry_policy_choice"),
				db.WithValidateField("retry_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_NoRetryPolicy:
		if fv, exists := v.FldValidators["retry_policy_choice.no_retry_policy"]; exists {
			val := m.GetRetryPolicyChoice().(*RouteSimpleAdvancedOptions_NoRetryPolicy).NoRetryPolicy
			vOpts := append(opts,
				db.WithValidateField("retry_policy_choice"),
				db.WithValidateField("no_retry_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rewrite_choice"]; exists {
		val := m.GetRewriteChoice()
		vOpts := append(opts,
			db.WithValidateField("rewrite_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRewriteChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisablePrefixRewrite:
		if fv, exists := v.FldValidators["rewrite_choice.disable_prefix_rewrite"]; exists {
			val := m.GetRewriteChoice().(*RouteSimpleAdvancedOptions_DisablePrefixRewrite).DisablePrefixRewrite
			vOpts := append(opts,
				db.WithValidateField("rewrite_choice"),
				db.WithValidateField("disable_prefix_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_PrefixRewrite:
		if fv, exists := v.FldValidators["rewrite_choice.prefix_rewrite"]; exists {
			val := m.GetRewriteChoice().(*RouteSimpleAdvancedOptions_PrefixRewrite).PrefixRewrite
			vOpts := append(opts,
				db.WithValidateField("rewrite_choice"),
				db.WithValidateField("prefix_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["spdy_choice"]; exists {
		val := m.GetSpdyChoice()
		vOpts := append(opts,
			db.WithValidateField("spdy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSpdyChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisableSpdy:
		if fv, exists := v.FldValidators["spdy_choice.disable_spdy"]; exists {
			val := m.GetSpdyChoice().(*RouteSimpleAdvancedOptions_DisableSpdy).DisableSpdy
			vOpts := append(opts,
				db.WithValidateField("spdy_choice"),
				db.WithValidateField("disable_spdy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_EnableSpdy:
		if fv, exists := v.FldValidators["spdy_choice.enable_spdy"]; exists {
			val := m.GetSpdyChoice().(*RouteSimpleAdvancedOptions_EnableSpdy).EnableSpdy
			vOpts := append(opts,
				db.WithValidateField("spdy_choice"),
				db.WithValidateField("enable_spdy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("timeout"))
		if err := fv(ctx, m.GetTimeout(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetWafChoice().(type) {
	case *RouteSimpleAdvancedOptions_InheritedWaf:
		if fv, exists := v.FldValidators["waf_choice.inherited_waf"]; exists {
			val := m.GetWafChoice().(*RouteSimpleAdvancedOptions_InheritedWaf).InheritedWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("inherited_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_DisableWaf:
		if fv, exists := v.FldValidators["waf_choice.disable_waf"]; exists {
			val := m.GetWafChoice().(*RouteSimpleAdvancedOptions_DisableWaf).DisableWaf
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("disable_waf"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_AppFirewall:
		if fv, exists := v.FldValidators["waf_choice.app_firewall"]; exists {
			val := m.GetWafChoice().(*RouteSimpleAdvancedOptions_AppFirewall).AppFirewall
			vOpts := append(opts,
				db.WithValidateField("waf_choice"),
				db.WithValidateField("app_firewall"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["websocket_choice"]; exists {
		val := m.GetWebsocketChoice()
		vOpts := append(opts,
			db.WithValidateField("websocket_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetWebsocketChoice().(type) {
	case *RouteSimpleAdvancedOptions_DisableWebSocketConfig:
		if fv, exists := v.FldValidators["websocket_choice.disable_web_socket_config"]; exists {
			val := m.GetWebsocketChoice().(*RouteSimpleAdvancedOptions_DisableWebSocketConfig).DisableWebSocketConfig
			vOpts := append(opts,
				db.WithValidateField("websocket_choice"),
				db.WithValidateField("disable_web_socket_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteSimpleAdvancedOptions_WebSocketConfig:
		if fv, exists := v.FldValidators["websocket_choice.web_socket_config"]; exists {
			val := m.GetWebsocketChoice().(*RouteSimpleAdvancedOptions_WebSocketConfig).WebSocketConfig
			vOpts := append(opts,
				db.WithValidateField("websocket_choice"),
				db.WithValidateField("web_socket_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteSimpleAdvancedOptionsValidator = func() *ValidateRouteSimpleAdvancedOptions {
	v := &ValidateRouteSimpleAdvancedOptions{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBufferChoice := v.BufferChoiceValidationRuleHandler
	rulesBufferChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBufferChoice(rulesBufferChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.buffer_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["buffer_choice"] = vFn

	vrhClusterRetractChoice := v.ClusterRetractChoiceValidationRuleHandler
	rulesClusterRetractChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterRetractChoice(rulesClusterRetractChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.cluster_retract_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_retract_choice"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhMirroringChoice := v.MirroringChoiceValidationRuleHandler
	rulesMirroringChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMirroringChoice(rulesMirroringChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.mirroring_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mirroring_choice"] = vFn

	vrhRetryPolicyChoice := v.RetryPolicyChoiceValidationRuleHandler
	rulesRetryPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRetryPolicyChoice(rulesRetryPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.retry_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["retry_policy_choice"] = vFn

	vrhRewriteChoice := v.RewriteChoiceValidationRuleHandler
	rulesRewriteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRewriteChoice(rulesRewriteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.rewrite_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rewrite_choice"] = vFn

	vrhRewriteChoicePrefixRewrite := v.RewriteChoicePrefixRewriteValidationRuleHandler
	rulesRewriteChoicePrefixRewrite := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFnMap["rewrite_choice.prefix_rewrite"], err = vrhRewriteChoicePrefixRewrite(rulesRewriteChoicePrefixRewrite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field RouteSimpleAdvancedOptions.rewrite_choice_prefix_rewrite: %s", err)
		panic(errMsg)
	}

	v.FldValidators["rewrite_choice.prefix_rewrite"] = vFnMap["rewrite_choice.prefix_rewrite"]

	vrhSpdyChoice := v.SpdyChoiceValidationRuleHandler
	rulesSpdyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSpdyChoice(rulesSpdyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.spdy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["spdy_choice"] = vFn

	vrhWebsocketChoice := v.WebsocketChoiceValidationRuleHandler
	rulesWebsocketChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhWebsocketChoice(rulesWebsocketChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.websocket_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["websocket_choice"] = vFn

	vrhEndpointSubsets := v.EndpointSubsetsValidationRuleHandler
	rulesEndpointSubsets := map[string]string{
		"ves.io.schema.rules.map.max_pairs": "16",
	}
	vFn, err = vrhEndpointSubsets(rulesEndpointSubsets)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.endpoint_subsets: %s", err)
		panic(errMsg)
	}
	v.FldValidators["endpoint_subsets"] = vFn

	vrhRequestHeadersToAdd := v.RequestHeadersToAddValidationRuleHandler
	rulesRequestHeadersToAdd := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRequestHeadersToAdd(rulesRequestHeadersToAdd)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.request_headers_to_add: %s", err)
		panic(errMsg)
	}
	v.FldValidators["request_headers_to_add"] = vFn

	vrhRequestHeadersToRemove := v.RequestHeadersToRemoveValidationRuleHandler
	rulesRequestHeadersToRemove := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.min_bytes": "1",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhRequestHeadersToRemove(rulesRequestHeadersToRemove)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.request_headers_to_remove: %s", err)
		panic(errMsg)
	}
	v.FldValidators["request_headers_to_remove"] = vFn

	vrhResponseHeadersToAdd := v.ResponseHeadersToAddValidationRuleHandler
	rulesResponseHeadersToAdd := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "32",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhResponseHeadersToAdd(rulesResponseHeadersToAdd)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.response_headers_to_add: %s", err)
		panic(errMsg)
	}
	v.FldValidators["response_headers_to_add"] = vFn

	vrhResponseHeadersToRemove := v.ResponseHeadersToRemoveValidationRuleHandler
	rulesResponseHeadersToRemove := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "256",
		"ves.io.schema.rules.repeated.items.string.min_bytes": "1",
		"ves.io.schema.rules.repeated.max_items":              "32",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhResponseHeadersToRemove(rulesResponseHeadersToRemove)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.response_headers_to_remove: %s", err)
		panic(errMsg)
	}
	v.FldValidators["response_headers_to_remove"] = vFn

	vrhTimeout := v.TimeoutValidationRuleHandler
	rulesTimeout := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "600000",
	}
	vFn, err = vrhTimeout(rulesTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteSimpleAdvancedOptions.timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["timeout"] = vFn

	v.FldValidators["bot_defense_javascript_injection_choice.bot_defense_javascript_injection"] = ves_io_schema_route.BotDefenseJavascriptInjectionTypeValidator().Validate

	v.FldValidators["buffer_choice.buffer_policy"] = ves_io_schema.BufferConfigTypeValidator().Validate

	v.FldValidators["hash_policy_choice.specific_hash_policy"] = HashPolicyListTypeValidator().Validate

	v.FldValidators["mirroring_choice.mirror_policy"] = MirrorPolicyTypeValidator().Validate

	v.FldValidators["retry_policy_choice.retry_policy"] = ves_io_schema.RetryPolicyTypeValidator().Validate

	v.FldValidators["waf_choice.app_firewall"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["cors_policy"] = ves_io_schema.CorsPolicyValidator().Validate

	v.FldValidators["csrf_policy"] = ves_io_schema.CsrfPolicyValidator().Validate

	return v
}()

func RouteSimpleAdvancedOptionsValidator() db.Validator {
	return DefaultRouteSimpleAdvancedOptionsValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *RouteType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetSimpleRoute().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting RouteType.simple_route")
	}

	return nil
}

func (m *RouteType) DeepCopy() *RouteType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeValidator().Validate(ctx, m, opts...)
}

func (m *RouteType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *RouteType) GetChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetChoice() == nil {
		return nil, nil
	}
	switch m.GetChoice().(type) {
	case *RouteType_SimpleRoute:
		drInfos, err := m.GetSimpleRoute().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSimpleRoute().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "simple_route." + dri.DRField
		}
		return drInfos, err

	case *RouteType_RedirectRoute:

		return nil, nil

	case *RouteType_DirectResponseRoute:

		return nil, nil

	case *RouteType_CustomRouteObject:
		drInfos, err := m.GetCustomRouteObject().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomRouteObject().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "custom_route_object." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateRouteType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteType) ChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for choice")
	}
	return validatorFn, nil
}

func (v *ValidateRouteType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["choice"]; exists {
		val := m.GetChoice()
		vOpts := append(opts,
			db.WithValidateField("choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChoice().(type) {
	case *RouteType_SimpleRoute:
		if fv, exists := v.FldValidators["choice.simple_route"]; exists {
			val := m.GetChoice().(*RouteType_SimpleRoute).SimpleRoute
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("simple_route"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteType_RedirectRoute:
		if fv, exists := v.FldValidators["choice.redirect_route"]; exists {
			val := m.GetChoice().(*RouteType_RedirectRoute).RedirectRoute
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("redirect_route"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteType_DirectResponseRoute:
		if fv, exists := v.FldValidators["choice.direct_response_route"]; exists {
			val := m.GetChoice().(*RouteType_DirectResponseRoute).DirectResponseRoute
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("direct_response_route"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteType_CustomRouteObject:
		if fv, exists := v.FldValidators["choice.custom_route_object"]; exists {
			val := m.GetChoice().(*RouteType_CustomRouteObject).CustomRouteObject
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("custom_route_object"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeValidator = func() *ValidateRouteType {
	v := &ValidateRouteType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhChoice := v.ChoiceValidationRuleHandler
	rulesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChoice(rulesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteType.choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["choice"] = vFn

	v.FldValidators["choice.simple_route"] = RouteTypeSimpleValidator().Validate
	v.FldValidators["choice.redirect_route"] = RouteTypeRedirectValidator().Validate
	v.FldValidators["choice.direct_response_route"] = RouteTypeDirectResponseValidator().Validate
	v.FldValidators["choice.custom_route_object"] = RouteTypeCustomRouteValidator().Validate

	return v
}()

func RouteTypeValidator() db.Validator {
	return DefaultRouteTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTypeCustomRoute) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTypeCustomRoute) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTypeCustomRoute) DeepCopy() *RouteTypeCustomRoute {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTypeCustomRoute{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTypeCustomRoute) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTypeCustomRoute) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeCustomRouteValidator().Validate(ctx, m, opts...)
}

func (m *RouteTypeCustomRoute) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRouteRefDRefInfo()

}

func (m *RouteTypeCustomRoute) GetRouteRefDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetRouteRef()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("route.Object")
	dri := db.DRefInfo{
		RefdType:   "route.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "route_ref",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetRouteRefDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *RouteTypeCustomRoute) GetRouteRefDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "route.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: route")
	}

	vref := m.GetRouteRef()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "route.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateRouteTypeCustomRoute struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTypeCustomRoute) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTypeCustomRoute)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTypeCustomRoute got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["route_ref"]; exists {

		vOpts := append(opts, db.WithValidateField("route_ref"))
		if err := fv(ctx, m.GetRouteRef(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeCustomRouteValidator = func() *ValidateRouteTypeCustomRoute {
	v := &ValidateRouteTypeCustomRoute{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["route_ref"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func RouteTypeCustomRouteValidator() db.Validator {
	return DefaultRouteTypeCustomRouteValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTypeDirectResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTypeDirectResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTypeDirectResponse) DeepCopy() *RouteTypeDirectResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTypeDirectResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTypeDirectResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTypeDirectResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeDirectResponseValidator().Validate(ctx, m, opts...)
}

type ValidateRouteTypeDirectResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTypeDirectResponse) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for path")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.PathMatcherTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeDirectResponse) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for headers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.HeaderMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeDirectResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTypeDirectResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTypeDirectResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["incoming_port"]; exists {

		vOpts := append(opts, db.WithValidateField("incoming_port"))
		if err := fv(ctx, m.GetIncomingPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["route_direct_response"]; exists {

		vOpts := append(opts, db.WithValidateField("route_direct_response"))
		if err := fv(ctx, m.GetRouteDirectResponse(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeDirectResponseValidator = func() *ValidateRouteTypeDirectResponse {
	v := &ValidateRouteTypeDirectResponse{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeDirectResponse.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeDirectResponse.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	v.FldValidators["route_direct_response"] = ves_io_schema_route.RouteDirectResponseValidator().Validate

	v.FldValidators["incoming_port"] = ves_io_schema.PortMatcherTypeValidator().Validate

	return v
}()

func RouteTypeDirectResponseValidator() db.Validator {
	return DefaultRouteTypeDirectResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTypeRedirect) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTypeRedirect) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTypeRedirect) DeepCopy() *RouteTypeRedirect {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTypeRedirect{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTypeRedirect) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTypeRedirect) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeRedirectValidator().Validate(ctx, m, opts...)
}

type ValidateRouteTypeRedirect struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTypeRedirect) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for path")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.PathMatcherTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeRedirect) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for headers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.HeaderMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeRedirect) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTypeRedirect)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTypeRedirect got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["incoming_port"]; exists {

		vOpts := append(opts, db.WithValidateField("incoming_port"))
		if err := fv(ctx, m.GetIncomingPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["route_redirect"]; exists {

		vOpts := append(opts, db.WithValidateField("route_redirect"))
		if err := fv(ctx, m.GetRouteRedirect(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeRedirectValidator = func() *ValidateRouteTypeRedirect {
	v := &ValidateRouteTypeRedirect{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeRedirect.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeRedirect.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	v.FldValidators["route_redirect"] = ves_io_schema_route.RouteRedirectValidator().Validate

	v.FldValidators["incoming_port"] = ves_io_schema.PortMatcherTypeValidator().Validate

	return v
}()

func RouteTypeRedirectValidator() db.Validator {
	return DefaultRouteTypeRedirectValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTypeSimple) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTypeSimple) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *RouteTypeSimple) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetAdvancedOptions().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting RouteTypeSimple.advanced_options")
	}

	return nil
}

func (m *RouteTypeSimple) DeepCopy() *RouteTypeSimple {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTypeSimple{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTypeSimple) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTypeSimple) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeSimpleValidator().Validate(ctx, m, opts...)
}

func (m *RouteTypeSimple) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvancedOptionsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAdvancedOptionsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetOriginPoolsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *RouteTypeSimple) GetAdvancedOptionsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAdvancedOptions() == nil {
		return nil, nil
	}

	drInfos, err := m.GetAdvancedOptions().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetAdvancedOptions().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "advanced_options." + dri.DRField
	}
	return drInfos, err

}

// GetDRefInfo for the field's type
func (m *RouteTypeSimple) GetOriginPoolsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetOriginPools() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetOriginPools() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetOriginPools() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("origin_pools[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateRouteTypeSimple struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTypeSimple) HostRewriteParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_rewrite_params")
	}
	return validatorFn, nil
}

func (v *ValidateRouteTypeSimple) HostRewriteParamsHostRewriteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_HostRewrite, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_rewrite")
	}
	return oValidatorFn_HostRewrite, nil
}

func (v *ValidateRouteTypeSimple) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for path")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.PathMatcherTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeSimple) OriginPoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for origin_pools")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for origin_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated origin_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items origin_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeSimple) HeadersValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for headers")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.HeaderMatcherType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.HeaderMatcherTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for headers")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.HeaderMatcherType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.HeaderMatcherType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated headers")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items headers")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeSimple) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTypeSimple)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTypeSimple got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["advanced_options"]; exists {

		vOpts := append(opts, db.WithValidateField("advanced_options"))
		if err := fv(ctx, m.GetAdvancedOptions(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["headers"]; exists {
		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["host_rewrite_params"]; exists {
		val := m.GetHostRewriteParams()
		vOpts := append(opts,
			db.WithValidateField("host_rewrite_params"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHostRewriteParams().(type) {
	case *RouteTypeSimple_AutoHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.auto_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimple_AutoHostRewrite).AutoHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("auto_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteTypeSimple_HostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimple_HostRewrite).HostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteTypeSimple_DisableHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.disable_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimple_DisableHostRewrite).DisableHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("disable_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["incoming_port"]; exists {

		vOpts := append(opts, db.WithValidateField("incoming_port"))
		if err := fv(ctx, m.GetIncomingPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["origin_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("origin_pools"))
		if err := fv(ctx, m.GetOriginPools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeSimpleValidator = func() *ValidateRouteTypeSimple {
	v := &ValidateRouteTypeSimple{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHostRewriteParams := v.HostRewriteParamsValidationRuleHandler
	rulesHostRewriteParams := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHostRewriteParams(rulesHostRewriteParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeSimple.host_rewrite_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["host_rewrite_params"] = vFn

	vrhHostRewriteParamsHostRewrite := v.HostRewriteParamsHostRewriteValidationRuleHandler
	rulesHostRewriteParamsHostRewrite := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
	}
	vFnMap["host_rewrite_params.host_rewrite"], err = vrhHostRewriteParamsHostRewrite(rulesHostRewriteParamsHostRewrite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field RouteTypeSimple.host_rewrite_params_host_rewrite: %s", err)
		panic(errMsg)
	}

	v.FldValidators["host_rewrite_params.host_rewrite"] = vFnMap["host_rewrite_params.host_rewrite"]

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeSimple.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	vrhOriginPools := v.OriginPoolsValidationRuleHandler
	rulesOriginPools := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhOriginPools(rulesOriginPools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeSimple.origin_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_pools"] = vFn

	vrhHeaders := v.HeadersValidationRuleHandler
	rulesHeaders := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhHeaders(rulesHeaders)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeSimple.headers: %s", err)
		panic(errMsg)
	}
	v.FldValidators["headers"] = vFn

	v.FldValidators["advanced_options"] = RouteSimpleAdvancedOptionsValidator().Validate

	v.FldValidators["incoming_port"] = ves_io_schema.PortMatcherTypeValidator().Validate

	return v
}()

func RouteTypeSimpleValidator() db.Validator {
	return DefaultRouteTypeSimpleValidator
}

// augmented methods on protoc/std generated struct

func (m *RouteTypeSimpleWithDefaultOriginPool) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *RouteTypeSimpleWithDefaultOriginPool) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *RouteTypeSimpleWithDefaultOriginPool) DeepCopy() *RouteTypeSimpleWithDefaultOriginPool {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &RouteTypeSimpleWithDefaultOriginPool{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *RouteTypeSimpleWithDefaultOriginPool) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *RouteTypeSimpleWithDefaultOriginPool) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return RouteTypeSimpleWithDefaultOriginPoolValidator().Validate(ctx, m, opts...)
}

type ValidateRouteTypeSimpleWithDefaultOriginPool struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateRouteTypeSimpleWithDefaultOriginPool) HostRewriteParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_rewrite_params")
	}
	return validatorFn, nil
}

func (v *ValidateRouteTypeSimpleWithDefaultOriginPool) HostRewriteParamsHostRewriteValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_HostRewrite, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for host_rewrite")
	}
	return oValidatorFn_HostRewrite, nil
}

func (v *ValidateRouteTypeSimpleWithDefaultOriginPool) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for path")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.PathMatcherTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateRouteTypeSimpleWithDefaultOriginPool) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*RouteTypeSimpleWithDefaultOriginPool)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *RouteTypeSimpleWithDefaultOriginPool got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["host_rewrite_params"]; exists {
		val := m.GetHostRewriteParams()
		vOpts := append(opts,
			db.WithValidateField("host_rewrite_params"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHostRewriteParams().(type) {
	case *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.auto_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite).AutoHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("auto_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteTypeSimpleWithDefaultOriginPool_HostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_HostRewrite).HostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite:
		if fv, exists := v.FldValidators["host_rewrite_params.disable_host_rewrite"]; exists {
			val := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite).DisableHostRewrite
			vOpts := append(opts,
				db.WithValidateField("host_rewrite_params"),
				db.WithValidateField("disable_host_rewrite"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["http_method"]; exists {

		vOpts := append(opts, db.WithValidateField("http_method"))
		if err := fv(ctx, m.GetHttpMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultRouteTypeSimpleWithDefaultOriginPoolValidator = func() *ValidateRouteTypeSimpleWithDefaultOriginPool {
	v := &ValidateRouteTypeSimpleWithDefaultOriginPool{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHostRewriteParams := v.HostRewriteParamsValidationRuleHandler
	rulesHostRewriteParams := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHostRewriteParams(rulesHostRewriteParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeSimpleWithDefaultOriginPool.host_rewrite_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["host_rewrite_params"] = vFn

	vrhHostRewriteParamsHostRewrite := v.HostRewriteParamsHostRewriteValidationRuleHandler
	rulesHostRewriteParamsHostRewrite := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
	}
	vFnMap["host_rewrite_params.host_rewrite"], err = vrhHostRewriteParamsHostRewrite(rulesHostRewriteParamsHostRewrite)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field RouteTypeSimpleWithDefaultOriginPool.host_rewrite_params_host_rewrite: %s", err)
		panic(errMsg)
	}

	v.FldValidators["host_rewrite_params.host_rewrite"] = vFnMap["host_rewrite_params.host_rewrite"]

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for RouteTypeSimpleWithDefaultOriginPool.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	return v
}()

func RouteTypeSimpleWithDefaultOriginPoolValidator() db.Validator {
	return DefaultRouteTypeSimpleWithDefaultOriginPoolValidator
}

// augmented methods on protoc/std generated struct

func (m *ServerUrlRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ServerUrlRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ServerUrlRule) DeepCopy() *ServerUrlRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ServerUrlRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ServerUrlRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ServerUrlRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ServerUrlRuleValidator().Validate(ctx, m, opts...)
}

func (m *ServerUrlRule) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRateLimiterChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ServerUrlRule) GetRateLimiterChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRateLimiterChoice() == nil {
		return nil, nil
	}
	switch m.GetRateLimiterChoice().(type) {
	case *ServerUrlRule_InlineRateLimiter:
		drInfos, err := m.GetInlineRateLimiter().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInlineRateLimiter().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "inline_rate_limiter." + dri.DRField
		}
		return drInfos, err

	case *ServerUrlRule_RefRateLimiter:

		return nil, nil

	default:
		return nil, nil
	}

}

type ValidateServerUrlRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateServerUrlRule) DomainChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain_choice")
	}
	return validatorFn, nil
}

func (v *ValidateServerUrlRule) DomainChoiceSpecificDomainValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_SpecificDomain, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for specific_domain")
	}
	return oValidatorFn_SpecificDomain, nil
}

func (v *ValidateServerUrlRule) RateLimiterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rate_limiter_choice")
	}
	return validatorFn, nil
}

func (v *ValidateServerUrlRule) BasePathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for base_path")
	}

	return validatorFn, nil
}

func (v *ValidateServerUrlRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ServerUrlRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ServerUrlRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["base_path"]; exists {

		vOpts := append(opts, db.WithValidateField("base_path"))
		if err := fv(ctx, m.GetBasePath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domain_choice"]; exists {
		val := m.GetDomainChoice()
		vOpts := append(opts,
			db.WithValidateField("domain_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDomainChoice().(type) {
	case *ServerUrlRule_AnyDomain:
		if fv, exists := v.FldValidators["domain_choice.any_domain"]; exists {
			val := m.GetDomainChoice().(*ServerUrlRule_AnyDomain).AnyDomain
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("any_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServerUrlRule_SpecificDomain:
		if fv, exists := v.FldValidators["domain_choice.specific_domain"]; exists {
			val := m.GetDomainChoice().(*ServerUrlRule_SpecificDomain).SpecificDomain
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("specific_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rate_limiter_choice"]; exists {
		val := m.GetRateLimiterChoice()
		vOpts := append(opts,
			db.WithValidateField("rate_limiter_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRateLimiterChoice().(type) {
	case *ServerUrlRule_InlineRateLimiter:
		if fv, exists := v.FldValidators["rate_limiter_choice.inline_rate_limiter"]; exists {
			val := m.GetRateLimiterChoice().(*ServerUrlRule_InlineRateLimiter).InlineRateLimiter
			vOpts := append(opts,
				db.WithValidateField("rate_limiter_choice"),
				db.WithValidateField("inline_rate_limiter"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ServerUrlRule_RefRateLimiter:
		if fv, exists := v.FldValidators["rate_limiter_choice.ref_rate_limiter"]; exists {
			val := m.GetRateLimiterChoice().(*ServerUrlRule_RefRateLimiter).RefRateLimiter
			vOpts := append(opts,
				db.WithValidateField("rate_limiter_choice"),
				db.WithValidateField("ref_rate_limiter"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultServerUrlRuleValidator = func() *ValidateServerUrlRule {
	v := &ValidateServerUrlRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomainChoice := v.DomainChoiceValidationRuleHandler
	rulesDomainChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDomainChoice(rulesDomainChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ServerUrlRule.domain_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_choice"] = vFn

	vrhDomainChoiceSpecificDomain := v.DomainChoiceSpecificDomainValidationRuleHandler
	rulesDomainChoiceSpecificDomain := map[string]string{
		"ves.io.schema.rules.string.max_len":   "128",
		"ves.io.schema.rules.string.vh_domain": "true",
	}
	vFnMap["domain_choice.specific_domain"], err = vrhDomainChoiceSpecificDomain(rulesDomainChoiceSpecificDomain)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field ServerUrlRule.domain_choice_specific_domain: %s", err)
		panic(errMsg)
	}

	v.FldValidators["domain_choice.specific_domain"] = vFnMap["domain_choice.specific_domain"]

	vrhRateLimiterChoice := v.RateLimiterChoiceValidationRuleHandler
	rulesRateLimiterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRateLimiterChoice(rulesRateLimiterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ServerUrlRule.rate_limiter_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rate_limiter_choice"] = vFn

	vrhBasePath := v.BasePathValidationRuleHandler
	rulesBasePath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.http_path": "true",
		"ves.io.schema.rules.string.max_len":   "128",
	}
	vFn, err = vrhBasePath(rulesBasePath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ServerUrlRule.base_path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["base_path"] = vFn

	v.FldValidators["rate_limiter_choice.inline_rate_limiter"] = InlineRateLimiterValidator().Validate
	v.FldValidators["rate_limiter_choice.ref_rate_limiter"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func ServerUrlRuleValidator() db.Validator {
	return DefaultServerUrlRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *ServicePolicyList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ServicePolicyList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ServicePolicyList) DeepCopy() *ServicePolicyList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ServicePolicyList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ServicePolicyList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ServicePolicyList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ServicePolicyListValidator().Validate(ctx, m, opts...)
}

func (m *ServicePolicyList) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetPoliciesDRefInfo()

}

func (m *ServicePolicyList) GetPoliciesDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetPolicies()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("ServicePolicyList.policies[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("service_policy.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "service_policy.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "policies",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetPoliciesDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ServicePolicyList) GetPoliciesDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "service_policy.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: service_policy")
	}
	for i, vref := range m.GetPolicies() {
		if vref == nil {
			return nil, fmt.Errorf("ServicePolicyList.policies[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "service_policy.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateServicePolicyList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateServicePolicyList) PoliciesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for policies")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for policies")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated policies")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items policies")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateServicePolicyList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ServicePolicyList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ServicePolicyList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["policies"]; exists {
		vOpts := append(opts, db.WithValidateField("policies"))
		if err := fv(ctx, m.GetPolicies(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultServicePolicyListValidator = func() *ValidateServicePolicyList {
	v := &ValidateServicePolicyList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPolicies := v.PoliciesValidationRuleHandler
	rulesPolicies := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhPolicies(rulesPolicies)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ServicePolicyList.policies: %s", err)
		panic(errMsg)
	}
	v.FldValidators["policies"] = vFn

	return v
}()

func ServicePolicyListValidator() db.Validator {
	return DefaultServicePolicyListValidator
}

// augmented methods on protoc/std generated struct

func (m *ShapeBotDefensePolicyType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ShapeBotDefensePolicyType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ShapeBotDefensePolicyType) DeepCopy() *ShapeBotDefensePolicyType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ShapeBotDefensePolicyType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ShapeBotDefensePolicyType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ShapeBotDefensePolicyType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ShapeBotDefensePolicyTypeValidator().Validate(ctx, m, opts...)
}

type ValidateShapeBotDefensePolicyType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateShapeBotDefensePolicyType) JavaScriptChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for java_script_choice")
	}
	return validatorFn, nil
}

func (v *ValidateShapeBotDefensePolicyType) MobileSdkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mobile_sdk_choice")
	}
	return validatorFn, nil
}

func (v *ValidateShapeBotDefensePolicyType) ProtectedAppEndpointsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for protected_app_endpoints")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*AppEndpointType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := AppEndpointTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for protected_app_endpoints")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*AppEndpointType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*AppEndpointType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated protected_app_endpoints")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items protected_app_endpoints")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateShapeBotDefensePolicyType) JsDownloadPathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for js_download_path")
	}

	return validatorFn, nil
}

func (v *ValidateShapeBotDefensePolicyType) JavascriptModeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.JavaScriptMode)
		return int32(i)
	}
	// ves_io_schema.JavaScriptMode_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.JavaScriptMode_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for javascript_mode")
	}

	return validatorFn, nil
}

func (v *ValidateShapeBotDefensePolicyType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ShapeBotDefensePolicyType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ShapeBotDefensePolicyType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["java_script_choice"]; exists {
		val := m.GetJavaScriptChoice()
		vOpts := append(opts,
			db.WithValidateField("java_script_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetJavaScriptChoice().(type) {
	case *ShapeBotDefensePolicyType_DisableJsInsert:
		if fv, exists := v.FldValidators["java_script_choice.disable_js_insert"]; exists {
			val := m.GetJavaScriptChoice().(*ShapeBotDefensePolicyType_DisableJsInsert).DisableJsInsert
			vOpts := append(opts,
				db.WithValidateField("java_script_choice"),
				db.WithValidateField("disable_js_insert"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ShapeBotDefensePolicyType_JsInsertAllPages:
		if fv, exists := v.FldValidators["java_script_choice.js_insert_all_pages"]; exists {
			val := m.GetJavaScriptChoice().(*ShapeBotDefensePolicyType_JsInsertAllPages).JsInsertAllPages
			vOpts := append(opts,
				db.WithValidateField("java_script_choice"),
				db.WithValidateField("js_insert_all_pages"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ShapeBotDefensePolicyType_JsInsertAllPagesExcept:
		if fv, exists := v.FldValidators["java_script_choice.js_insert_all_pages_except"]; exists {
			val := m.GetJavaScriptChoice().(*ShapeBotDefensePolicyType_JsInsertAllPagesExcept).JsInsertAllPagesExcept
			vOpts := append(opts,
				db.WithValidateField("java_script_choice"),
				db.WithValidateField("js_insert_all_pages_except"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ShapeBotDefensePolicyType_JsInsertionRules:
		if fv, exists := v.FldValidators["java_script_choice.js_insertion_rules"]; exists {
			val := m.GetJavaScriptChoice().(*ShapeBotDefensePolicyType_JsInsertionRules).JsInsertionRules
			vOpts := append(opts,
				db.WithValidateField("java_script_choice"),
				db.WithValidateField("js_insertion_rules"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["javascript_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("javascript_mode"))
		if err := fv(ctx, m.GetJavascriptMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["js_download_path"]; exists {

		vOpts := append(opts, db.WithValidateField("js_download_path"))
		if err := fv(ctx, m.GetJsDownloadPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["mobile_sdk_choice"]; exists {
		val := m.GetMobileSdkChoice()
		vOpts := append(opts,
			db.WithValidateField("mobile_sdk_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMobileSdkChoice().(type) {
	case *ShapeBotDefensePolicyType_DisableMobileSdk:
		if fv, exists := v.FldValidators["mobile_sdk_choice.disable_mobile_sdk"]; exists {
			val := m.GetMobileSdkChoice().(*ShapeBotDefensePolicyType_DisableMobileSdk).DisableMobileSdk
			vOpts := append(opts,
				db.WithValidateField("mobile_sdk_choice"),
				db.WithValidateField("disable_mobile_sdk"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ShapeBotDefensePolicyType_MobileSdkConfig:
		if fv, exists := v.FldValidators["mobile_sdk_choice.mobile_sdk_config"]; exists {
			val := m.GetMobileSdkChoice().(*ShapeBotDefensePolicyType_MobileSdkConfig).MobileSdkConfig
			vOpts := append(opts,
				db.WithValidateField("mobile_sdk_choice"),
				db.WithValidateField("mobile_sdk_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["protected_app_endpoints"]; exists {
		vOpts := append(opts, db.WithValidateField("protected_app_endpoints"))
		if err := fv(ctx, m.GetProtectedAppEndpoints(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultShapeBotDefensePolicyTypeValidator = func() *ValidateShapeBotDefensePolicyType {
	v := &ValidateShapeBotDefensePolicyType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhJavaScriptChoice := v.JavaScriptChoiceValidationRuleHandler
	rulesJavaScriptChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhJavaScriptChoice(rulesJavaScriptChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeBotDefensePolicyType.java_script_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["java_script_choice"] = vFn

	vrhMobileSdkChoice := v.MobileSdkChoiceValidationRuleHandler
	rulesMobileSdkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMobileSdkChoice(rulesMobileSdkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeBotDefensePolicyType.mobile_sdk_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mobile_sdk_choice"] = vFn

	vrhProtectedAppEndpoints := v.ProtectedAppEndpointsValidationRuleHandler
	rulesProtectedAppEndpoints := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhProtectedAppEndpoints(rulesProtectedAppEndpoints)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeBotDefensePolicyType.protected_app_endpoints: %s", err)
		panic(errMsg)
	}
	v.FldValidators["protected_app_endpoints"] = vFn

	vrhJsDownloadPath := v.JsDownloadPathValidationRuleHandler
	rulesJsDownloadPath := map[string]string{
		"ves.io.schema.rules.string.http_path": "true",
	}
	vFn, err = vrhJsDownloadPath(rulesJsDownloadPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeBotDefensePolicyType.js_download_path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["js_download_path"] = vFn

	vrhJavascriptMode := v.JavascriptModeValidationRuleHandler
	rulesJavascriptMode := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhJavascriptMode(rulesJavascriptMode)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeBotDefensePolicyType.javascript_mode: %s", err)
		panic(errMsg)
	}
	v.FldValidators["javascript_mode"] = vFn

	v.FldValidators["java_script_choice.js_insert_all_pages_except"] = ShapeJavaScriptInsertAllWithExceptionsTypeValidator().Validate
	v.FldValidators["java_script_choice.js_insertion_rules"] = ShapeJavaScriptInsertTypeValidator().Validate

	v.FldValidators["mobile_sdk_choice.mobile_sdk_config"] = MobileSDKConfigTypeValidator().Validate

	return v
}()

func ShapeBotDefensePolicyTypeValidator() db.Validator {
	return DefaultShapeBotDefensePolicyTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ShapeBotDefenseType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ShapeBotDefenseType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ShapeBotDefenseType) DeepCopy() *ShapeBotDefenseType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ShapeBotDefenseType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ShapeBotDefenseType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ShapeBotDefenseType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ShapeBotDefenseTypeValidator().Validate(ctx, m, opts...)
}

type ValidateShapeBotDefenseType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateShapeBotDefenseType) CorsSupportChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cors_support_choice")
	}
	return validatorFn, nil
}

func (v *ValidateShapeBotDefenseType) RegionalEndpointValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ShapeBotDefenseRegion)
		return int32(i)
	}
	// ShapeBotDefenseRegion_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ShapeBotDefenseRegion_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for regional_endpoint")
	}

	return validatorFn, nil
}

func (v *ValidateShapeBotDefenseType) PolicyValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for policy")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ShapeBotDefensePolicyTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateShapeBotDefenseType) TimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for timeout")
	}

	return validatorFn, nil
}

func (v *ValidateShapeBotDefenseType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ShapeBotDefenseType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ShapeBotDefenseType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["cors_support_choice"]; exists {
		val := m.GetCorsSupportChoice()
		vOpts := append(opts,
			db.WithValidateField("cors_support_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCorsSupportChoice().(type) {
	case *ShapeBotDefenseType_EnableCorsSupport:
		if fv, exists := v.FldValidators["cors_support_choice.enable_cors_support"]; exists {
			val := m.GetCorsSupportChoice().(*ShapeBotDefenseType_EnableCorsSupport).EnableCorsSupport
			vOpts := append(opts,
				db.WithValidateField("cors_support_choice"),
				db.WithValidateField("enable_cors_support"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ShapeBotDefenseType_DisableCorsSupport:
		if fv, exists := v.FldValidators["cors_support_choice.disable_cors_support"]; exists {
			val := m.GetCorsSupportChoice().(*ShapeBotDefenseType_DisableCorsSupport).DisableCorsSupport
			vOpts := append(opts,
				db.WithValidateField("cors_support_choice"),
				db.WithValidateField("disable_cors_support"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["policy"]; exists {

		vOpts := append(opts, db.WithValidateField("policy"))
		if err := fv(ctx, m.GetPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["regional_endpoint"]; exists {

		vOpts := append(opts, db.WithValidateField("regional_endpoint"))
		if err := fv(ctx, m.GetRegionalEndpoint(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("timeout"))
		if err := fv(ctx, m.GetTimeout(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultShapeBotDefenseTypeValidator = func() *ValidateShapeBotDefenseType {
	v := &ValidateShapeBotDefenseType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCorsSupportChoice := v.CorsSupportChoiceValidationRuleHandler
	rulesCorsSupportChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCorsSupportChoice(rulesCorsSupportChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeBotDefenseType.cors_support_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cors_support_choice"] = vFn

	vrhRegionalEndpoint := v.RegionalEndpointValidationRuleHandler
	rulesRegionalEndpoint := map[string]string{
		"ves.io.schema.rules.enum.defined_only": "true",
		"ves.io.schema.rules.message.required":  "true",
	}
	vFn, err = vrhRegionalEndpoint(rulesRegionalEndpoint)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeBotDefenseType.regional_endpoint: %s", err)
		panic(errMsg)
	}
	v.FldValidators["regional_endpoint"] = vFn

	vrhPolicy := v.PolicyValidationRuleHandler
	rulesPolicy := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPolicy(rulesPolicy)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeBotDefenseType.policy: %s", err)
		panic(errMsg)
	}
	v.FldValidators["policy"] = vFn

	vrhTimeout := v.TimeoutValidationRuleHandler
	rulesTimeout := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "60000",
	}
	vFn, err = vrhTimeout(rulesTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeBotDefenseType.timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["timeout"] = vFn

	return v
}()

func ShapeBotDefenseTypeValidator() db.Validator {
	return DefaultShapeBotDefenseTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ShapeJavaScriptExclusionRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ShapeJavaScriptExclusionRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ShapeJavaScriptExclusionRule) DeepCopy() *ShapeJavaScriptExclusionRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ShapeJavaScriptExclusionRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ShapeJavaScriptExclusionRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ShapeJavaScriptExclusionRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ShapeJavaScriptExclusionRuleValidator().Validate(ctx, m, opts...)
}

type ValidateShapeJavaScriptExclusionRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateShapeJavaScriptExclusionRule) DomainMatcherChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain_matcher_choice")
	}
	return validatorFn, nil
}

func (v *ValidateShapeJavaScriptExclusionRule) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateShapeJavaScriptExclusionRule) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for path")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.PathMatcherTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateShapeJavaScriptExclusionRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ShapeJavaScriptExclusionRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ShapeJavaScriptExclusionRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["domain_matcher_choice"]; exists {
		val := m.GetDomainMatcherChoice()
		vOpts := append(opts,
			db.WithValidateField("domain_matcher_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDomainMatcherChoice().(type) {
	case *ShapeJavaScriptExclusionRule_AnyDomain:
		if fv, exists := v.FldValidators["domain_matcher_choice.any_domain"]; exists {
			val := m.GetDomainMatcherChoice().(*ShapeJavaScriptExclusionRule_AnyDomain).AnyDomain
			vOpts := append(opts,
				db.WithValidateField("domain_matcher_choice"),
				db.WithValidateField("any_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ShapeJavaScriptExclusionRule_Domain:
		if fv, exists := v.FldValidators["domain_matcher_choice.domain"]; exists {
			val := m.GetDomainMatcherChoice().(*ShapeJavaScriptExclusionRule_Domain).Domain
			vOpts := append(opts,
				db.WithValidateField("domain_matcher_choice"),
				db.WithValidateField("domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultShapeJavaScriptExclusionRuleValidator = func() *ValidateShapeJavaScriptExclusionRule {
	v := &ValidateShapeJavaScriptExclusionRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomainMatcherChoice := v.DomainMatcherChoiceValidationRuleHandler
	rulesDomainMatcherChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDomainMatcherChoice(rulesDomainMatcherChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeJavaScriptExclusionRule.domain_matcher_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_matcher_choice"] = vFn

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeJavaScriptExclusionRule.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeJavaScriptExclusionRule.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	v.FldValidators["domain_matcher_choice.domain"] = ves_io_schema.DomainTypeValidator().Validate

	return v
}()

func ShapeJavaScriptExclusionRuleValidator() db.Validator {
	return DefaultShapeJavaScriptExclusionRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *ShapeJavaScriptInsertAllType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ShapeJavaScriptInsertAllType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ShapeJavaScriptInsertAllType) DeepCopy() *ShapeJavaScriptInsertAllType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ShapeJavaScriptInsertAllType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ShapeJavaScriptInsertAllType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ShapeJavaScriptInsertAllType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ShapeJavaScriptInsertAllTypeValidator().Validate(ctx, m, opts...)
}

type ValidateShapeJavaScriptInsertAllType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateShapeJavaScriptInsertAllType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ShapeJavaScriptInsertAllType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ShapeJavaScriptInsertAllType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["javascript_location"]; exists {

		vOpts := append(opts, db.WithValidateField("javascript_location"))
		if err := fv(ctx, m.GetJavascriptLocation(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultShapeJavaScriptInsertAllTypeValidator = func() *ValidateShapeJavaScriptInsertAllType {
	v := &ValidateShapeJavaScriptInsertAllType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ShapeJavaScriptInsertAllTypeValidator() db.Validator {
	return DefaultShapeJavaScriptInsertAllTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ShapeJavaScriptInsertAllWithExceptionsType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ShapeJavaScriptInsertAllWithExceptionsType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ShapeJavaScriptInsertAllWithExceptionsType) DeepCopy() *ShapeJavaScriptInsertAllWithExceptionsType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ShapeJavaScriptInsertAllWithExceptionsType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ShapeJavaScriptInsertAllWithExceptionsType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ShapeJavaScriptInsertAllWithExceptionsType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ShapeJavaScriptInsertAllWithExceptionsTypeValidator().Validate(ctx, m, opts...)
}

type ValidateShapeJavaScriptInsertAllWithExceptionsType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateShapeJavaScriptInsertAllWithExceptionsType) ExcludeListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for exclude_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ShapeJavaScriptExclusionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ShapeJavaScriptExclusionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for exclude_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ShapeJavaScriptExclusionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ShapeJavaScriptExclusionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated exclude_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items exclude_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateShapeJavaScriptInsertAllWithExceptionsType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ShapeJavaScriptInsertAllWithExceptionsType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ShapeJavaScriptInsertAllWithExceptionsType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["exclude_list"]; exists {
		vOpts := append(opts, db.WithValidateField("exclude_list"))
		if err := fv(ctx, m.GetExcludeList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["javascript_location"]; exists {

		vOpts := append(opts, db.WithValidateField("javascript_location"))
		if err := fv(ctx, m.GetJavascriptLocation(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultShapeJavaScriptInsertAllWithExceptionsTypeValidator = func() *ValidateShapeJavaScriptInsertAllWithExceptionsType {
	v := &ValidateShapeJavaScriptInsertAllWithExceptionsType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhExcludeList := v.ExcludeListValidationRuleHandler
	rulesExcludeList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhExcludeList(rulesExcludeList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeJavaScriptInsertAllWithExceptionsType.exclude_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["exclude_list"] = vFn

	return v
}()

func ShapeJavaScriptInsertAllWithExceptionsTypeValidator() db.Validator {
	return DefaultShapeJavaScriptInsertAllWithExceptionsTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ShapeJavaScriptInsertType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ShapeJavaScriptInsertType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ShapeJavaScriptInsertType) DeepCopy() *ShapeJavaScriptInsertType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ShapeJavaScriptInsertType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ShapeJavaScriptInsertType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ShapeJavaScriptInsertType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ShapeJavaScriptInsertTypeValidator().Validate(ctx, m, opts...)
}

type ValidateShapeJavaScriptInsertType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateShapeJavaScriptInsertType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ShapeJavaScriptInsertionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ShapeJavaScriptInsertionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ShapeJavaScriptInsertionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ShapeJavaScriptInsertionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateShapeJavaScriptInsertType) ExcludeListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for exclude_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ShapeJavaScriptExclusionRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ShapeJavaScriptExclusionRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for exclude_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ShapeJavaScriptExclusionRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ShapeJavaScriptExclusionRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated exclude_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items exclude_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateShapeJavaScriptInsertType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ShapeJavaScriptInsertType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ShapeJavaScriptInsertType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["exclude_list"]; exists {
		vOpts := append(opts, db.WithValidateField("exclude_list"))
		if err := fv(ctx, m.GetExcludeList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultShapeJavaScriptInsertTypeValidator = func() *ValidateShapeJavaScriptInsertType {
	v := &ValidateShapeJavaScriptInsertType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeJavaScriptInsertType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	vrhExcludeList := v.ExcludeListValidationRuleHandler
	rulesExcludeList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhExcludeList(rulesExcludeList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeJavaScriptInsertType.exclude_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["exclude_list"] = vFn

	return v
}()

func ShapeJavaScriptInsertTypeValidator() db.Validator {
	return DefaultShapeJavaScriptInsertTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ShapeJavaScriptInsertionRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ShapeJavaScriptInsertionRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ShapeJavaScriptInsertionRule) DeepCopy() *ShapeJavaScriptInsertionRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ShapeJavaScriptInsertionRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ShapeJavaScriptInsertionRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ShapeJavaScriptInsertionRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ShapeJavaScriptInsertionRuleValidator().Validate(ctx, m, opts...)
}

type ValidateShapeJavaScriptInsertionRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateShapeJavaScriptInsertionRule) DomainMatcherChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain_matcher_choice")
	}
	return validatorFn, nil
}

func (v *ValidateShapeJavaScriptInsertionRule) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateShapeJavaScriptInsertionRule) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for path")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.PathMatcherTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateShapeJavaScriptInsertionRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ShapeJavaScriptInsertionRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ShapeJavaScriptInsertionRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["domain_matcher_choice"]; exists {
		val := m.GetDomainMatcherChoice()
		vOpts := append(opts,
			db.WithValidateField("domain_matcher_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDomainMatcherChoice().(type) {
	case *ShapeJavaScriptInsertionRule_AnyDomain:
		if fv, exists := v.FldValidators["domain_matcher_choice.any_domain"]; exists {
			val := m.GetDomainMatcherChoice().(*ShapeJavaScriptInsertionRule_AnyDomain).AnyDomain
			vOpts := append(opts,
				db.WithValidateField("domain_matcher_choice"),
				db.WithValidateField("any_domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ShapeJavaScriptInsertionRule_Domain:
		if fv, exists := v.FldValidators["domain_matcher_choice.domain"]; exists {
			val := m.GetDomainMatcherChoice().(*ShapeJavaScriptInsertionRule_Domain).Domain
			vOpts := append(opts,
				db.WithValidateField("domain_matcher_choice"),
				db.WithValidateField("domain"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["javascript_location"]; exists {

		vOpts := append(opts, db.WithValidateField("javascript_location"))
		if err := fv(ctx, m.GetJavascriptLocation(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultShapeJavaScriptInsertionRuleValidator = func() *ValidateShapeJavaScriptInsertionRule {
	v := &ValidateShapeJavaScriptInsertionRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomainMatcherChoice := v.DomainMatcherChoiceValidationRuleHandler
	rulesDomainMatcherChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDomainMatcherChoice(rulesDomainMatcherChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeJavaScriptInsertionRule.domain_matcher_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_matcher_choice"] = vFn

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeJavaScriptInsertionRule.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ShapeJavaScriptInsertionRule.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	v.FldValidators["domain_matcher_choice.domain"] = ves_io_schema.DomainTypeValidator().Validate

	return v
}()

func ShapeJavaScriptInsertionRuleValidator() db.Validator {
	return DefaultShapeJavaScriptInsertionRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *SimpleClientSrcRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SimpleClientSrcRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SimpleClientSrcRule) DeepCopy() *SimpleClientSrcRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SimpleClientSrcRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SimpleClientSrcRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SimpleClientSrcRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SimpleClientSrcRuleValidator().Validate(ctx, m, opts...)
}

type ValidateSimpleClientSrcRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSimpleClientSrcRule) ClientSourceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for client_source_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSimpleClientSrcRule) ClientSourceChoiceIpPrefixValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_IpPrefix, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ip_prefix")
	}
	return oValidatorFn_IpPrefix, nil
}
func (v *ValidateSimpleClientSrcRule) ClientSourceChoiceAsNumberValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_AsNumber, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for as_number")
	}
	return oValidatorFn_AsNumber, nil
}
func (v *ValidateSimpleClientSrcRule) ClientSourceChoiceUserIdentifierValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_UserIdentifier, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for user_identifier")
	}
	return oValidatorFn_UserIdentifier, nil
}

func (v *ValidateSimpleClientSrcRule) ExpirationTimestampValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var (
		reqdValidatorFn db.ValidatorFunc
		err             error
	)

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if reqdValidatorFn != nil {
			if err = reqdValidatorFn(ctx, val, opts...); err != nil {
				return err
			}
		}
		// TODO: lookup configured third-party type validators
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSimpleClientSrcRule) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSimpleClientSrcRule) ActionsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ClientSrcRuleAction)
		return int32(i)
	}
	// ClientSrcRuleAction_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ClientSrcRuleAction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for actions")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ClientSrcRuleAction, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for actions")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ClientSrcRuleAction)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ClientSrcRuleAction, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated actions")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items actions")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateSimpleClientSrcRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SimpleClientSrcRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SimpleClientSrcRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetActionChoice().(type) {
	case *SimpleClientSrcRule_SkipProcessing:
		if fv, exists := v.FldValidators["action_choice.skip_processing"]; exists {
			val := m.GetActionChoice().(*SimpleClientSrcRule_SkipProcessing).SkipProcessing
			vOpts := append(opts,
				db.WithValidateField("action_choice"),
				db.WithValidateField("skip_processing"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SimpleClientSrcRule_WafSkipProcessing:
		if fv, exists := v.FldValidators["action_choice.waf_skip_processing"]; exists {
			val := m.GetActionChoice().(*SimpleClientSrcRule_WafSkipProcessing).WafSkipProcessing
			vOpts := append(opts,
				db.WithValidateField("action_choice"),
				db.WithValidateField("waf_skip_processing"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SimpleClientSrcRule_BotSkipProcessing:
		if fv, exists := v.FldValidators["action_choice.bot_skip_processing"]; exists {
			val := m.GetActionChoice().(*SimpleClientSrcRule_BotSkipProcessing).BotSkipProcessing
			vOpts := append(opts,
				db.WithValidateField("action_choice"),
				db.WithValidateField("bot_skip_processing"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["actions"]; exists {
		vOpts := append(opts, db.WithValidateField("actions"))
		if err := fv(ctx, m.GetActions(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["client_source_choice"]; exists {
		val := m.GetClientSourceChoice()
		vOpts := append(opts,
			db.WithValidateField("client_source_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClientSourceChoice().(type) {
	case *SimpleClientSrcRule_IpPrefix:
		if fv, exists := v.FldValidators["client_source_choice.ip_prefix"]; exists {
			val := m.GetClientSourceChoice().(*SimpleClientSrcRule_IpPrefix).IpPrefix
			vOpts := append(opts,
				db.WithValidateField("client_source_choice"),
				db.WithValidateField("ip_prefix"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SimpleClientSrcRule_AsNumber:
		if fv, exists := v.FldValidators["client_source_choice.as_number"]; exists {
			val := m.GetClientSourceChoice().(*SimpleClientSrcRule_AsNumber).AsNumber
			vOpts := append(opts,
				db.WithValidateField("client_source_choice"),
				db.WithValidateField("as_number"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SimpleClientSrcRule_HttpHeader:
		if fv, exists := v.FldValidators["client_source_choice.http_header"]; exists {
			val := m.GetClientSourceChoice().(*SimpleClientSrcRule_HttpHeader).HttpHeader
			vOpts := append(opts,
				db.WithValidateField("client_source_choice"),
				db.WithValidateField("http_header"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SimpleClientSrcRule_UserIdentifier:
		if fv, exists := v.FldValidators["client_source_choice.user_identifier"]; exists {
			val := m.GetClientSourceChoice().(*SimpleClientSrcRule_UserIdentifier).UserIdentifier
			vOpts := append(opts,
				db.WithValidateField("client_source_choice"),
				db.WithValidateField("user_identifier"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["expiration_timestamp"]; exists {

		vOpts := append(opts, db.WithValidateField("expiration_timestamp"))
		if err := fv(ctx, m.GetExpirationTimestamp(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSimpleClientSrcRuleValidator = func() *ValidateSimpleClientSrcRule {
	v := &ValidateSimpleClientSrcRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhClientSourceChoice := v.ClientSourceChoiceValidationRuleHandler
	rulesClientSourceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClientSourceChoice(rulesClientSourceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleClientSrcRule.client_source_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["client_source_choice"] = vFn

	vrhClientSourceChoiceIpPrefix := v.ClientSourceChoiceIpPrefixValidationRuleHandler
	rulesClientSourceChoiceIpPrefix := map[string]string{
		"ves.io.schema.rules.string.ipv4_prefix": "true",
	}
	vFnMap["client_source_choice.ip_prefix"], err = vrhClientSourceChoiceIpPrefix(rulesClientSourceChoiceIpPrefix)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field SimpleClientSrcRule.client_source_choice_ip_prefix: %s", err)
		panic(errMsg)
	}
	vrhClientSourceChoiceAsNumber := v.ClientSourceChoiceAsNumberValidationRuleHandler
	rulesClientSourceChoiceAsNumber := map[string]string{
		"ves.io.schema.rules.uint32.gte": "1",
		"ves.io.schema.rules.uint32.lte": "401308",
	}
	vFnMap["client_source_choice.as_number"], err = vrhClientSourceChoiceAsNumber(rulesClientSourceChoiceAsNumber)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field SimpleClientSrcRule.client_source_choice_as_number: %s", err)
		panic(errMsg)
	}
	vrhClientSourceChoiceUserIdentifier := v.ClientSourceChoiceUserIdentifierValidationRuleHandler
	rulesClientSourceChoiceUserIdentifier := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFnMap["client_source_choice.user_identifier"], err = vrhClientSourceChoiceUserIdentifier(rulesClientSourceChoiceUserIdentifier)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field SimpleClientSrcRule.client_source_choice_user_identifier: %s", err)
		panic(errMsg)
	}

	v.FldValidators["client_source_choice.ip_prefix"] = vFnMap["client_source_choice.ip_prefix"]
	v.FldValidators["client_source_choice.as_number"] = vFnMap["client_source_choice.as_number"]
	v.FldValidators["client_source_choice.user_identifier"] = vFnMap["client_source_choice.user_identifier"]

	vrhExpirationTimestamp := v.ExpirationTimestampValidationRuleHandler
	rulesExpirationTimestamp := map[string]string{
		"ves.io.schema.rules.timestamp.within.seconds": "31536000",
	}
	vFn, err = vrhExpirationTimestamp(rulesExpirationTimestamp)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleClientSrcRule.expiration_timestamp: %s", err)
		panic(errMsg)
	}
	v.FldValidators["expiration_timestamp"] = vFn

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleClientSrcRule.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	vrhActions := v.ActionsValidationRuleHandler
	rulesActions := map[string]string{
		"ves.io.schema.rules.enum.defined_only":  "true",
		"ves.io.schema.rules.repeated.max_items": "10",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhActions(rulesActions)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SimpleClientSrcRule.actions: %s", err)
		panic(errMsg)
	}
	v.FldValidators["actions"] = vFn

	v.FldValidators["client_source_choice.http_header"] = HttpHeaderMatcherListValidator().Validate

	return v
}()

func SimpleClientSrcRuleValidator() db.Validator {
	return DefaultSimpleClientSrcRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *SingleLoadBalancerAppSetting) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SingleLoadBalancerAppSetting) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SingleLoadBalancerAppSetting) DeepCopy() *SingleLoadBalancerAppSetting {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SingleLoadBalancerAppSetting{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SingleLoadBalancerAppSetting) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SingleLoadBalancerAppSetting) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SingleLoadBalancerAppSettingValidator().Validate(ctx, m, opts...)
}

type ValidateSingleLoadBalancerAppSetting struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSingleLoadBalancerAppSetting) ApiDiscoveryChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_discovery_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSingleLoadBalancerAppSetting) MaliciousUserDetectionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for malicious_user_detection_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSingleLoadBalancerAppSetting) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SingleLoadBalancerAppSetting)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SingleLoadBalancerAppSetting got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_discovery_choice"]; exists {
		val := m.GetApiDiscoveryChoice()
		vOpts := append(opts,
			db.WithValidateField("api_discovery_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDiscoveryChoice().(type) {
	case *SingleLoadBalancerAppSetting_EnableDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.enable_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*SingleLoadBalancerAppSetting_EnableDiscovery).EnableDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("enable_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SingleLoadBalancerAppSetting_DisableDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.disable_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*SingleLoadBalancerAppSetting_DisableDiscovery).DisableDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("disable_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetDdosDetectionChoice().(type) {
	case *SingleLoadBalancerAppSetting_EnableDdosDetection:
		if fv, exists := v.FldValidators["ddos_detection_choice.enable_ddos_detection"]; exists {
			val := m.GetDdosDetectionChoice().(*SingleLoadBalancerAppSetting_EnableDdosDetection).EnableDdosDetection
			vOpts := append(opts,
				db.WithValidateField("ddos_detection_choice"),
				db.WithValidateField("enable_ddos_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SingleLoadBalancerAppSetting_DisableDdosDetection:
		if fv, exists := v.FldValidators["ddos_detection_choice.disable_ddos_detection"]; exists {
			val := m.GetDdosDetectionChoice().(*SingleLoadBalancerAppSetting_DisableDdosDetection).DisableDdosDetection
			vOpts := append(opts,
				db.WithValidateField("ddos_detection_choice"),
				db.WithValidateField("disable_ddos_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["malicious_user_detection_choice"]; exists {
		val := m.GetMaliciousUserDetectionChoice()
		vOpts := append(opts,
			db.WithValidateField("malicious_user_detection_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetMaliciousUserDetectionChoice().(type) {
	case *SingleLoadBalancerAppSetting_EnableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.enable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*SingleLoadBalancerAppSetting_EnableMaliciousUserDetection).EnableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("enable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SingleLoadBalancerAppSetting_DisableMaliciousUserDetection:
		if fv, exists := v.FldValidators["malicious_user_detection_choice.disable_malicious_user_detection"]; exists {
			val := m.GetMaliciousUserDetectionChoice().(*SingleLoadBalancerAppSetting_DisableMaliciousUserDetection).DisableMaliciousUserDetection
			vOpts := append(opts,
				db.WithValidateField("malicious_user_detection_choice"),
				db.WithValidateField("disable_malicious_user_detection"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSingleLoadBalancerAppSettingValidator = func() *ValidateSingleLoadBalancerAppSetting {
	v := &ValidateSingleLoadBalancerAppSetting{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiDiscoveryChoice := v.ApiDiscoveryChoiceValidationRuleHandler
	rulesApiDiscoveryChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDiscoveryChoice(rulesApiDiscoveryChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SingleLoadBalancerAppSetting.api_discovery_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_discovery_choice"] = vFn

	vrhMaliciousUserDetectionChoice := v.MaliciousUserDetectionChoiceValidationRuleHandler
	rulesMaliciousUserDetectionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhMaliciousUserDetectionChoice(rulesMaliciousUserDetectionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SingleLoadBalancerAppSetting.malicious_user_detection_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["malicious_user_detection_choice"] = vFn

	v.FldValidators["api_discovery_choice.enable_discovery"] = ApiDiscoverySettingValidator().Validate

	v.FldValidators["ddos_detection_choice.enable_ddos_detection"] = EnableDDoSDetectionSettingValidator().Validate

	return v
}()

func SingleLoadBalancerAppSettingValidator() db.Validator {
	return DefaultSingleLoadBalancerAppSettingValidator
}

// augmented methods on protoc/std generated struct

func (m *Target) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Target) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Target) DeepCopy() *Target {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Target{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Target) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Target) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TargetValidator().Validate(ctx, m, opts...)
}

type ValidateTarget struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTarget) TargetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for target")
	}
	return validatorFn, nil
}

func (v *ValidateTarget) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Target)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Target got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["target"]; exists {
		val := m.GetTarget()
		vOpts := append(opts,
			db.WithValidateField("target"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTarget().(type) {
	case *Target_AllEndpoint:
		if fv, exists := v.FldValidators["target.all_endpoint"]; exists {
			val := m.GetTarget().(*Target_AllEndpoint).AllEndpoint
			vOpts := append(opts,
				db.WithValidateField("target"),
				db.WithValidateField("all_endpoint"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Target_ApiGroups:
		if fv, exists := v.FldValidators["target.api_groups"]; exists {
			val := m.GetTarget().(*Target_ApiGroups).ApiGroups
			vOpts := append(opts,
				db.WithValidateField("target"),
				db.WithValidateField("api_groups"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Target_BasePaths:
		if fv, exists := v.FldValidators["target.base_paths"]; exists {
			val := m.GetTarget().(*Target_BasePaths).BasePaths
			vOpts := append(opts,
				db.WithValidateField("target"),
				db.WithValidateField("base_paths"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTargetValidator = func() *ValidateTarget {
	v := &ValidateTarget{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTarget := v.TargetValidationRuleHandler
	rulesTarget := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTarget(rulesTarget)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Target.target: %s", err)
		panic(errMsg)
	}
	v.FldValidators["target"] = vFn

	v.FldValidators["target.api_groups"] = APIGroupsValidator().Validate
	v.FldValidators["target.base_paths"] = BasePathsTypeValidator().Validate

	return v
}()

func TargetValidator() db.Validator {
	return DefaultTargetValidator
}

// augmented methods on protoc/std generated struct

func (m *TokenLocation) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *TokenLocation) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *TokenLocation) DeepCopy() *TokenLocation {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &TokenLocation{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *TokenLocation) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *TokenLocation) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return TokenLocationValidator().Validate(ctx, m, opts...)
}

type ValidateTokenLocation struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateTokenLocation) TokenLocationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for token_location")
	}
	return validatorFn, nil
}

func (v *ValidateTokenLocation) TokenLocationCookieValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Cookie, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cookie")
	}
	return oValidatorFn_Cookie, nil
}
func (v *ValidateTokenLocation) TokenLocationHeaderValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Header, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for header")
	}
	return oValidatorFn_Header, nil
}
func (v *ValidateTokenLocation) TokenLocationQueryParamValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_QueryParam, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for query_param")
	}
	return oValidatorFn_QueryParam, nil
}

func (v *ValidateTokenLocation) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*TokenLocation)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *TokenLocation got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["token_location"]; exists {
		val := m.GetTokenLocation()
		vOpts := append(opts,
			db.WithValidateField("token_location"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetTokenLocation().(type) {
	case *TokenLocation_BearerToken:
		if fv, exists := v.FldValidators["token_location.bearer_token"]; exists {
			val := m.GetTokenLocation().(*TokenLocation_BearerToken).BearerToken
			vOpts := append(opts,
				db.WithValidateField("token_location"),
				db.WithValidateField("bearer_token"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *TokenLocation_Cookie:
		if fv, exists := v.FldValidators["token_location.cookie"]; exists {
			val := m.GetTokenLocation().(*TokenLocation_Cookie).Cookie
			vOpts := append(opts,
				db.WithValidateField("token_location"),
				db.WithValidateField("cookie"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *TokenLocation_Header:
		if fv, exists := v.FldValidators["token_location.header"]; exists {
			val := m.GetTokenLocation().(*TokenLocation_Header).Header
			vOpts := append(opts,
				db.WithValidateField("token_location"),
				db.WithValidateField("header"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *TokenLocation_QueryParam:
		if fv, exists := v.FldValidators["token_location.query_param"]; exists {
			val := m.GetTokenLocation().(*TokenLocation_QueryParam).QueryParam
			vOpts := append(opts,
				db.WithValidateField("token_location"),
				db.WithValidateField("query_param"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultTokenLocationValidator = func() *ValidateTokenLocation {
	v := &ValidateTokenLocation{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTokenLocation := v.TokenLocationValidationRuleHandler
	rulesTokenLocation := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhTokenLocation(rulesTokenLocation)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for TokenLocation.token_location: %s", err)
		panic(errMsg)
	}
	v.FldValidators["token_location"] = vFn

	vrhTokenLocationCookie := v.TokenLocationCookieValidationRuleHandler
	rulesTokenLocationCookie := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
		"ves.io.schema.rules.string.min_bytes": "1",
	}
	vFnMap["token_location.cookie"], err = vrhTokenLocationCookie(rulesTokenLocationCookie)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field TokenLocation.token_location_cookie: %s", err)
		panic(errMsg)
	}
	vrhTokenLocationHeader := v.TokenLocationHeaderValidationRuleHandler
	rulesTokenLocationHeader := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
		"ves.io.schema.rules.string.min_bytes": "1",
	}
	vFnMap["token_location.header"], err = vrhTokenLocationHeader(rulesTokenLocationHeader)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field TokenLocation.token_location_header: %s", err)
		panic(errMsg)
	}
	vrhTokenLocationQueryParam := v.TokenLocationQueryParamValidationRuleHandler
	rulesTokenLocationQueryParam := map[string]string{
		"ves.io.schema.rules.string.max_bytes": "256",
		"ves.io.schema.rules.string.min_bytes": "1",
	}
	vFnMap["token_location.query_param"], err = vrhTokenLocationQueryParam(rulesTokenLocationQueryParam)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field TokenLocation.token_location_query_param: %s", err)
		panic(errMsg)
	}

	v.FldValidators["token_location.cookie"] = vFnMap["token_location.cookie"]
	v.FldValidators["token_location.header"] = vFnMap["token_location.header"]
	v.FldValidators["token_location.query_param"] = vFnMap["token_location.query_param"]

	return v
}()

func TokenLocationValidator() db.Validator {
	return DefaultTokenLocationValidator
}

// augmented methods on protoc/std generated struct

func (m *ValidateApiBySpecRule) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ValidateApiBySpecRule) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ValidateApiBySpecRule) DeepCopy() *ValidateApiBySpecRule {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ValidateApiBySpecRule{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ValidateApiBySpecRule) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ValidateApiBySpecRule) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ValidateApiBySpecRuleValidator().Validate(ctx, m, opts...)
}

type ValidateValidateApiBySpecRule struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateValidateApiBySpecRule) OpenApiValidationRulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for open_api_validation_rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*OpenApiValidationRule, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := OpenApiValidationRuleValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for open_api_validation_rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*OpenApiValidationRule)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*OpenApiValidationRule, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated open_api_validation_rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items open_api_validation_rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateValidateApiBySpecRule) FallThroughModeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for fall_through_mode")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := OpenApiFallThroughModeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateValidateApiBySpecRule) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ValidateApiBySpecRule)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ValidateApiBySpecRule got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["fall_through_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("fall_through_mode"))
		if err := fv(ctx, m.GetFallThroughMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["open_api_validation_rules"]; exists {
		vOpts := append(opts, db.WithValidateField("open_api_validation_rules"))
		if err := fv(ctx, m.GetOpenApiValidationRules(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetOversizedBodyChoice().(type) {
	case *ValidateApiBySpecRule_OversizedBodySkipValidation:
		if fv, exists := v.FldValidators["oversized_body_choice.oversized_body_skip_validation"]; exists {
			val := m.GetOversizedBodyChoice().(*ValidateApiBySpecRule_OversizedBodySkipValidation).OversizedBodySkipValidation
			vOpts := append(opts,
				db.WithValidateField("oversized_body_choice"),
				db.WithValidateField("oversized_body_skip_validation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ValidateApiBySpecRule_OversizedBodyFailValidation:
		if fv, exists := v.FldValidators["oversized_body_choice.oversized_body_fail_validation"]; exists {
			val := m.GetOversizedBodyChoice().(*ValidateApiBySpecRule_OversizedBodyFailValidation).OversizedBodyFailValidation
			vOpts := append(opts,
				db.WithValidateField("oversized_body_choice"),
				db.WithValidateField("oversized_body_fail_validation"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["settings"]; exists {

		vOpts := append(opts, db.WithValidateField("settings"))
		if err := fv(ctx, m.GetSettings(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultValidateApiBySpecRuleValidator = func() *ValidateValidateApiBySpecRule {
	v := &ValidateValidateApiBySpecRule{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhOpenApiValidationRules := v.OpenApiValidationRulesValidationRuleHandler
	rulesOpenApiValidationRules := map[string]string{
		"ves.io.schema.rules.message.required":              "true",
		"ves.io.schema.rules.repeated.max_items":            "15",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhOpenApiValidationRules(rulesOpenApiValidationRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ValidateApiBySpecRule.open_api_validation_rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["open_api_validation_rules"] = vFn

	vrhFallThroughMode := v.FallThroughModeValidationRuleHandler
	rulesFallThroughMode := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhFallThroughMode(rulesFallThroughMode)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ValidateApiBySpecRule.fall_through_mode: %s", err)
		panic(errMsg)
	}
	v.FldValidators["fall_through_mode"] = vFn

	v.FldValidators["settings"] = OpenApiValidationCommonSettingsValidator().Validate

	return v
}()

func ValidateApiBySpecRuleValidator() db.Validator {
	return DefaultValidateApiBySpecRuleValidator
}

// augmented methods on protoc/std generated struct

func (m *ValidationPropertySetting) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ValidationPropertySetting) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ValidationPropertySetting) DeepCopy() *ValidationPropertySetting {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ValidationPropertySetting{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ValidationPropertySetting) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ValidationPropertySetting) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ValidationPropertySettingValidator().Validate(ctx, m, opts...)
}

type ValidateValidationPropertySetting struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateValidationPropertySetting) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ValidationPropertySetting)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ValidationPropertySetting got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["headers"]; exists {

		vOpts := append(opts, db.WithValidateField("headers"))
		if err := fv(ctx, m.GetHeaders(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["queryParameters"]; exists {

		vOpts := append(opts, db.WithValidateField("queryParameters"))
		if err := fv(ctx, m.GetQueryParameters(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultValidationPropertySettingValidator = func() *ValidateValidationPropertySetting {
	v := &ValidateValidationPropertySetting{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["queryParameters"] = ValidationSettingForQueryParametersValidator().Validate

	v.FldValidators["headers"] = ValidationSettingForHeadersValidator().Validate

	return v
}()

func ValidationPropertySettingValidator() db.Validator {
	return DefaultValidationPropertySettingValidator
}

// augmented methods on protoc/std generated struct

func (m *ValidationSettingForHeaders) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ValidationSettingForHeaders) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ValidationSettingForHeaders) DeepCopy() *ValidationSettingForHeaders {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ValidationSettingForHeaders{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ValidationSettingForHeaders) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ValidationSettingForHeaders) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ValidationSettingForHeadersValidator().Validate(ctx, m, opts...)
}

type ValidateValidationSettingForHeaders struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateValidationSettingForHeaders) AdditionalHeadersChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for additional_headers_choice")
	}
	return validatorFn, nil
}

func (v *ValidateValidationSettingForHeaders) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ValidationSettingForHeaders)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ValidationSettingForHeaders got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["additional_headers_choice"]; exists {
		val := m.GetAdditionalHeadersChoice()
		vOpts := append(opts,
			db.WithValidateField("additional_headers_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdditionalHeadersChoice().(type) {
	case *ValidationSettingForHeaders_AllowAdditionalHeaders:
		if fv, exists := v.FldValidators["additional_headers_choice.allow_additional_headers"]; exists {
			val := m.GetAdditionalHeadersChoice().(*ValidationSettingForHeaders_AllowAdditionalHeaders).AllowAdditionalHeaders
			vOpts := append(opts,
				db.WithValidateField("additional_headers_choice"),
				db.WithValidateField("allow_additional_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ValidationSettingForHeaders_DisallowAdditionalHeaders:
		if fv, exists := v.FldValidators["additional_headers_choice.disallow_additional_headers"]; exists {
			val := m.GetAdditionalHeadersChoice().(*ValidationSettingForHeaders_DisallowAdditionalHeaders).DisallowAdditionalHeaders
			vOpts := append(opts,
				db.WithValidateField("additional_headers_choice"),
				db.WithValidateField("disallow_additional_headers"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultValidationSettingForHeadersValidator = func() *ValidateValidationSettingForHeaders {
	v := &ValidateValidationSettingForHeaders{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdditionalHeadersChoice := v.AdditionalHeadersChoiceValidationRuleHandler
	rulesAdditionalHeadersChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdditionalHeadersChoice(rulesAdditionalHeadersChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ValidationSettingForHeaders.additional_headers_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["additional_headers_choice"] = vFn

	return v
}()

func ValidationSettingForHeadersValidator() db.Validator {
	return DefaultValidationSettingForHeadersValidator
}

// augmented methods on protoc/std generated struct

func (m *ValidationSettingForQueryParameters) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ValidationSettingForQueryParameters) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ValidationSettingForQueryParameters) DeepCopy() *ValidationSettingForQueryParameters {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ValidationSettingForQueryParameters{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ValidationSettingForQueryParameters) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ValidationSettingForQueryParameters) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ValidationSettingForQueryParametersValidator().Validate(ctx, m, opts...)
}

type ValidateValidationSettingForQueryParameters struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateValidationSettingForQueryParameters) AdditionalParametersChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for additional_parameters_choice")
	}
	return validatorFn, nil
}

func (v *ValidateValidationSettingForQueryParameters) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ValidationSettingForQueryParameters)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ValidationSettingForQueryParameters got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["additional_parameters_choice"]; exists {
		val := m.GetAdditionalParametersChoice()
		vOpts := append(opts,
			db.WithValidateField("additional_parameters_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdditionalParametersChoice().(type) {
	case *ValidationSettingForQueryParameters_AllowAdditionalParameters:
		if fv, exists := v.FldValidators["additional_parameters_choice.allow_additional_parameters"]; exists {
			val := m.GetAdditionalParametersChoice().(*ValidationSettingForQueryParameters_AllowAdditionalParameters).AllowAdditionalParameters
			vOpts := append(opts,
				db.WithValidateField("additional_parameters_choice"),
				db.WithValidateField("allow_additional_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ValidationSettingForQueryParameters_DisallowAdditionalParameters:
		if fv, exists := v.FldValidators["additional_parameters_choice.disallow_additional_parameters"]; exists {
			val := m.GetAdditionalParametersChoice().(*ValidationSettingForQueryParameters_DisallowAdditionalParameters).DisallowAdditionalParameters
			vOpts := append(opts,
				db.WithValidateField("additional_parameters_choice"),
				db.WithValidateField("disallow_additional_parameters"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultValidationSettingForQueryParametersValidator = func() *ValidateValidationSettingForQueryParameters {
	v := &ValidateValidationSettingForQueryParameters{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdditionalParametersChoice := v.AdditionalParametersChoiceValidationRuleHandler
	rulesAdditionalParametersChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdditionalParametersChoice(rulesAdditionalParametersChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ValidationSettingForQueryParameters.additional_parameters_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["additional_parameters_choice"] = vFn

	return v
}()

func ValidationSettingForQueryParametersValidator() db.Validator {
	return DefaultValidationSettingForQueryParametersValidator
}

// augmented methods on protoc/std generated struct

func (m *WebMobileTrafficType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *WebMobileTrafficType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *WebMobileTrafficType) DeepCopy() *WebMobileTrafficType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &WebMobileTrafficType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *WebMobileTrafficType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *WebMobileTrafficType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return WebMobileTrafficTypeValidator().Validate(ctx, m, opts...)
}

type ValidateWebMobileTrafficType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateWebMobileTrafficType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*WebMobileTrafficType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *WebMobileTrafficType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["header"]; exists {

		vOpts := append(opts, db.WithValidateField("header"))
		if err := fv(ctx, m.GetHeader(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["headers"]; exists {

		vOpts := append(opts, db.WithValidateField("headers"))
		for idx, item := range m.GetHeaders() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["mobile_identifier"]; exists {

		vOpts := append(opts, db.WithValidateField("mobile_identifier"))
		if err := fv(ctx, m.GetMobileIdentifier(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultWebMobileTrafficTypeValidator = func() *ValidateWebMobileTrafficType {
	v := &ValidateWebMobileTrafficType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["header"] = ves_io_schema_policy.HeaderMatcherTypeBasicValidator().Validate

	v.FldValidators["headers"] = ves_io_schema_policy.HeaderMatcherTypeBasicValidator().Validate

	return v
}()

func WebMobileTrafficTypeValidator() db.Validator {
	return DefaultWebMobileTrafficTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetAdvertiseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AdvertiseChoice.(type) {
	case nil:
		o.AdvertiseChoice = nil

	case *CreateSpecType_AdvertiseCustom:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *CreateSpecType_AdvertiseOnPublic:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *CreateSpecType_AdvertiseOnPublicDefaultVip:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *CreateSpecType_DoNotAdvertise:
		o.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetAdvertiseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AdvertiseChoice.(type) {
	case nil:
		r.AdvertiseChoice = nil

	case *GlobalSpecType_AdvertiseCustom:
		r.AdvertiseChoice = &CreateSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *GlobalSpecType_AdvertiseOnPublic:
		r.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		r.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *GlobalSpecType_DoNotAdvertise:
		r.AdvertiseChoice = &CreateSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetApiDefinitionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ApiDefinitionChoice.(type) {
	case nil:
		o.ApiDefinitionChoice = nil

	case *CreateSpecType_ApiDefinition:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *CreateSpecType_ApiDefinitions:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiDefinitions{ApiDefinitions: of.ApiDefinitions}

	case *CreateSpecType_ApiSpecification:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiSpecification{ApiSpecification: of.ApiSpecification}

	case *CreateSpecType_DisableApiDefinition:
		o.ApiDefinitionChoice = &GlobalSpecType_DisableApiDefinition{DisableApiDefinition: of.DisableApiDefinition}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetApiDefinitionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ApiDefinitionChoice.(type) {
	case nil:
		r.ApiDefinitionChoice = nil

	case *GlobalSpecType_ApiDefinition:
		r.ApiDefinitionChoice = &CreateSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *GlobalSpecType_ApiDefinitions:
		r.ApiDefinitionChoice = &CreateSpecType_ApiDefinitions{ApiDefinitions: of.ApiDefinitions}

	case *GlobalSpecType_ApiSpecification:
		r.ApiDefinitionChoice = &CreateSpecType_ApiSpecification{ApiSpecification: of.ApiSpecification}

	case *GlobalSpecType_DisableApiDefinition:
		r.ApiDefinitionChoice = &CreateSpecType_DisableApiDefinition{DisableApiDefinition: of.DisableApiDefinition}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetApiDiscoveryChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ApiDiscoveryChoice.(type) {
	case nil:
		o.ApiDiscoveryChoice = nil

	case *CreateSpecType_DisableApiDiscovery:
		o.ApiDiscoveryChoice = &GlobalSpecType_DisableApiDiscovery{DisableApiDiscovery: of.DisableApiDiscovery}

	case *CreateSpecType_EnableApiDiscovery:
		o.ApiDiscoveryChoice = &GlobalSpecType_EnableApiDiscovery{EnableApiDiscovery: of.EnableApiDiscovery}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetApiDiscoveryChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ApiDiscoveryChoice.(type) {
	case nil:
		r.ApiDiscoveryChoice = nil

	case *GlobalSpecType_DisableApiDiscovery:
		r.ApiDiscoveryChoice = &CreateSpecType_DisableApiDiscovery{DisableApiDiscovery: of.DisableApiDiscovery}

	case *GlobalSpecType_EnableApiDiscovery:
		r.ApiDiscoveryChoice = &CreateSpecType_EnableApiDiscovery{EnableApiDiscovery: of.EnableApiDiscovery}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetBotDefenseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BotDefenseChoice.(type) {
	case nil:
		o.BotDefenseChoice = nil

	case *CreateSpecType_BotDefense:
		o.BotDefenseChoice = &GlobalSpecType_BotDefense{BotDefense: of.BotDefense}

	case *CreateSpecType_BotDefenseAdvanced:
		o.BotDefenseChoice = &GlobalSpecType_BotDefenseAdvanced{BotDefenseAdvanced: of.BotDefenseAdvanced}

	case *CreateSpecType_DisableBotDefense:
		o.BotDefenseChoice = &GlobalSpecType_DisableBotDefense{DisableBotDefense: of.DisableBotDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetBotDefenseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BotDefenseChoice.(type) {
	case nil:
		r.BotDefenseChoice = nil

	case *GlobalSpecType_BotDefense:
		r.BotDefenseChoice = &CreateSpecType_BotDefense{BotDefense: of.BotDefense}

	case *GlobalSpecType_BotDefenseAdvanced:
		r.BotDefenseChoice = &CreateSpecType_BotDefenseAdvanced{BotDefenseAdvanced: of.BotDefenseAdvanced}

	case *GlobalSpecType_DisableBotDefense:
		r.BotDefenseChoice = &CreateSpecType_DisableBotDefense{DisableBotDefense: of.DisableBotDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetChallengeTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ChallengeType.(type) {
	case nil:
		o.ChallengeType = nil

	case *CreateSpecType_CaptchaChallenge:
		o.ChallengeType = &GlobalSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *CreateSpecType_EnableChallenge:
		o.ChallengeType = &GlobalSpecType_EnableChallenge{EnableChallenge: of.EnableChallenge}

	case *CreateSpecType_JsChallenge:
		o.ChallengeType = &GlobalSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *CreateSpecType_NoChallenge:
		o.ChallengeType = &GlobalSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *CreateSpecType_PolicyBasedChallenge:
		o.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetChallengeTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ChallengeType.(type) {
	case nil:
		r.ChallengeType = nil

	case *GlobalSpecType_CaptchaChallenge:
		r.ChallengeType = &CreateSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *GlobalSpecType_EnableChallenge:
		r.ChallengeType = &CreateSpecType_EnableChallenge{EnableChallenge: of.EnableChallenge}

	case *GlobalSpecType_JsChallenge:
		r.ChallengeType = &CreateSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *GlobalSpecType_NoChallenge:
		r.ChallengeType = &CreateSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *GlobalSpecType_PolicyBasedChallenge:
		r.ChallengeType = &CreateSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetClientSideDefenseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClientSideDefenseChoice.(type) {
	case nil:
		o.ClientSideDefenseChoice = nil

	case *CreateSpecType_ClientSideDefense:
		o.ClientSideDefenseChoice = &GlobalSpecType_ClientSideDefense{ClientSideDefense: of.ClientSideDefense}

	case *CreateSpecType_DisableClientSideDefense:
		o.ClientSideDefenseChoice = &GlobalSpecType_DisableClientSideDefense{DisableClientSideDefense: of.DisableClientSideDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetClientSideDefenseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClientSideDefenseChoice.(type) {
	case nil:
		r.ClientSideDefenseChoice = nil

	case *GlobalSpecType_ClientSideDefense:
		r.ClientSideDefenseChoice = &CreateSpecType_ClientSideDefense{ClientSideDefense: of.ClientSideDefense}

	case *GlobalSpecType_DisableClientSideDefense:
		r.ClientSideDefenseChoice = &CreateSpecType_DisableClientSideDefense{DisableClientSideDefense: of.DisableClientSideDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetDdosDetectionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DdosDetectionChoice.(type) {
	case nil:
		o.DdosDetectionChoice = nil

	case *CreateSpecType_DisableDdosDetection:
		o.DdosDetectionChoice = &GlobalSpecType_DisableDdosDetection{DisableDdosDetection: of.DisableDdosDetection}

	case *CreateSpecType_EnableDdosDetection:
		o.DdosDetectionChoice = &GlobalSpecType_EnableDdosDetection{EnableDdosDetection: of.EnableDdosDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetDdosDetectionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DdosDetectionChoice.(type) {
	case nil:
		r.DdosDetectionChoice = nil

	case *GlobalSpecType_DisableDdosDetection:
		r.DdosDetectionChoice = &CreateSpecType_DisableDdosDetection{DisableDdosDetection: of.DisableDdosDetection}

	case *GlobalSpecType_EnableDdosDetection:
		r.DdosDetectionChoice = &CreateSpecType_EnableDdosDetection{EnableDdosDetection: of.EnableDdosDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetHashPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HashPolicyChoice.(type) {
	case nil:
		o.HashPolicyChoice = nil

	case *CreateSpecType_CookieStickiness:
		o.HashPolicyChoice = &GlobalSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *CreateSpecType_LeastActive:
		o.HashPolicyChoice = &GlobalSpecType_LeastActive{LeastActive: of.LeastActive}

	case *CreateSpecType_Random:
		o.HashPolicyChoice = &GlobalSpecType_Random{Random: of.Random}

	case *CreateSpecType_RingHash:
		o.HashPolicyChoice = &GlobalSpecType_RingHash{RingHash: of.RingHash}

	case *CreateSpecType_RoundRobin:
		o.HashPolicyChoice = &GlobalSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *CreateSpecType_SourceIpStickiness:
		o.HashPolicyChoice = &GlobalSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetHashPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HashPolicyChoice.(type) {
	case nil:
		r.HashPolicyChoice = nil

	case *GlobalSpecType_CookieStickiness:
		r.HashPolicyChoice = &CreateSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *GlobalSpecType_LeastActive:
		r.HashPolicyChoice = &CreateSpecType_LeastActive{LeastActive: of.LeastActive}

	case *GlobalSpecType_Random:
		r.HashPolicyChoice = &CreateSpecType_Random{Random: of.Random}

	case *GlobalSpecType_RingHash:
		r.HashPolicyChoice = &CreateSpecType_RingHash{RingHash: of.RingHash}

	case *GlobalSpecType_RoundRobin:
		r.HashPolicyChoice = &CreateSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *GlobalSpecType_SourceIpStickiness:
		r.HashPolicyChoice = &CreateSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetIpReputationChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IpReputationChoice.(type) {
	case nil:
		o.IpReputationChoice = nil

	case *CreateSpecType_DisableIpReputation:
		o.IpReputationChoice = &GlobalSpecType_DisableIpReputation{DisableIpReputation: of.DisableIpReputation}

	case *CreateSpecType_EnableIpReputation:
		o.IpReputationChoice = &GlobalSpecType_EnableIpReputation{EnableIpReputation: of.EnableIpReputation}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetIpReputationChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IpReputationChoice.(type) {
	case nil:
		r.IpReputationChoice = nil

	case *GlobalSpecType_DisableIpReputation:
		r.IpReputationChoice = &CreateSpecType_DisableIpReputation{DisableIpReputation: of.DisableIpReputation}

	case *GlobalSpecType_EnableIpReputation:
		r.IpReputationChoice = &CreateSpecType_EnableIpReputation{EnableIpReputation: of.EnableIpReputation}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetL7DdosAutoMitigationActionToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.L7DdosAutoMitigationAction.(type) {
	case nil:
		o.L7DdosAutoMitigationAction = nil

	case *CreateSpecType_L7DdosActionBlock:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionBlock{L7DdosActionBlock: of.L7DdosActionBlock}

	case *CreateSpecType_L7DdosActionDefault:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionDefault{L7DdosActionDefault: of.L7DdosActionDefault}

	case *CreateSpecType_L7DdosActionJsChallenge:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionJsChallenge{L7DdosActionJsChallenge: of.L7DdosActionJsChallenge}

	case *CreateSpecType_L7DdosActionNone:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionNone{L7DdosActionNone: of.L7DdosActionNone}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetL7DdosAutoMitigationActionFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.L7DdosAutoMitigationAction.(type) {
	case nil:
		r.L7DdosAutoMitigationAction = nil

	case *GlobalSpecType_L7DdosActionBlock:
		r.L7DdosAutoMitigationAction = &CreateSpecType_L7DdosActionBlock{L7DdosActionBlock: of.L7DdosActionBlock}

	case *GlobalSpecType_L7DdosActionDefault:
		r.L7DdosAutoMitigationAction = &CreateSpecType_L7DdosActionDefault{L7DdosActionDefault: of.L7DdosActionDefault}

	case *GlobalSpecType_L7DdosActionJsChallenge:
		r.L7DdosAutoMitigationAction = &CreateSpecType_L7DdosActionJsChallenge{L7DdosActionJsChallenge: of.L7DdosActionJsChallenge}

	case *GlobalSpecType_L7DdosActionNone:
		r.L7DdosAutoMitigationAction = &CreateSpecType_L7DdosActionNone{L7DdosActionNone: of.L7DdosActionNone}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetLoadbalancerTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LoadbalancerType.(type) {
	case nil:
		o.LoadbalancerType = nil

	case *CreateSpecType_Http:
		o.LoadbalancerType = &GlobalSpecType_Http{Http: of.Http}

	case *CreateSpecType_Https:
		o.LoadbalancerType = &GlobalSpecType_Https{Https: of.Https}

	case *CreateSpecType_HttpsAutoCert:
		o.LoadbalancerType = &GlobalSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetLoadbalancerTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LoadbalancerType.(type) {
	case nil:
		r.LoadbalancerType = nil

	case *GlobalSpecType_Http:
		r.LoadbalancerType = &CreateSpecType_Http{Http: of.Http}

	case *GlobalSpecType_Https:
		r.LoadbalancerType = &CreateSpecType_Https{Https: of.Https}

	case *GlobalSpecType_HttpsAutoCert:
		r.LoadbalancerType = &CreateSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetMaliciousUserDetectionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.MaliciousUserDetectionChoice.(type) {
	case nil:
		o.MaliciousUserDetectionChoice = nil

	case *CreateSpecType_DisableMaliciousUserDetection:
		o.MaliciousUserDetectionChoice = &GlobalSpecType_DisableMaliciousUserDetection{DisableMaliciousUserDetection: of.DisableMaliciousUserDetection}

	case *CreateSpecType_EnableMaliciousUserDetection:
		o.MaliciousUserDetectionChoice = &GlobalSpecType_EnableMaliciousUserDetection{EnableMaliciousUserDetection: of.EnableMaliciousUserDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetMaliciousUserDetectionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.MaliciousUserDetectionChoice.(type) {
	case nil:
		r.MaliciousUserDetectionChoice = nil

	case *GlobalSpecType_DisableMaliciousUserDetection:
		r.MaliciousUserDetectionChoice = &CreateSpecType_DisableMaliciousUserDetection{DisableMaliciousUserDetection: of.DisableMaliciousUserDetection}

	case *GlobalSpecType_EnableMaliciousUserDetection:
		r.MaliciousUserDetectionChoice = &CreateSpecType_EnableMaliciousUserDetection{EnableMaliciousUserDetection: of.EnableMaliciousUserDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetMlConfigChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.MlConfigChoice.(type) {
	case nil:
		o.MlConfigChoice = nil

	case *CreateSpecType_MultiLbApp:
		o.MlConfigChoice = &GlobalSpecType_MultiLbApp{MultiLbApp: of.MultiLbApp}

	case *CreateSpecType_SingleLbApp:
		o.MlConfigChoice = &GlobalSpecType_SingleLbApp{SingleLbApp: of.SingleLbApp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetMlConfigChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.MlConfigChoice.(type) {
	case nil:
		r.MlConfigChoice = nil

	case *GlobalSpecType_MultiLbApp:
		r.MlConfigChoice = &CreateSpecType_MultiLbApp{MultiLbApp: of.MultiLbApp}

	case *GlobalSpecType_SingleLbApp:
		r.MlConfigChoice = &CreateSpecType_SingleLbApp{SingleLbApp: of.SingleLbApp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetOriginPoolChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.OriginPoolChoice.(type) {
	case nil:
		o.OriginPoolChoice = nil

	case *CreateSpecType_DefaultPool:
		o.OriginPoolChoice = &GlobalSpecType_DefaultPool{DefaultPool: of.DefaultPool}

	case *CreateSpecType_DefaultPoolList:
		o.OriginPoolChoice = &GlobalSpecType_DefaultPoolList{DefaultPoolList: of.DefaultPoolList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetOriginPoolChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.OriginPoolChoice.(type) {
	case nil:
		r.OriginPoolChoice = nil

	case *GlobalSpecType_DefaultPool:
		r.OriginPoolChoice = &CreateSpecType_DefaultPool{DefaultPool: of.DefaultPool}

	case *GlobalSpecType_DefaultPoolList:
		r.OriginPoolChoice = &CreateSpecType_DefaultPoolList{DefaultPoolList: of.DefaultPoolList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetRateLimitChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RateLimitChoice.(type) {
	case nil:
		o.RateLimitChoice = nil

	case *CreateSpecType_ApiRateLimit:
		o.RateLimitChoice = &GlobalSpecType_ApiRateLimit{ApiRateLimit: of.ApiRateLimit}

	case *CreateSpecType_DisableRateLimit:
		o.RateLimitChoice = &GlobalSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *CreateSpecType_RateLimit:
		o.RateLimitChoice = &GlobalSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetRateLimitChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RateLimitChoice.(type) {
	case nil:
		r.RateLimitChoice = nil

	case *GlobalSpecType_ApiRateLimit:
		r.RateLimitChoice = &CreateSpecType_ApiRateLimit{ApiRateLimit: of.ApiRateLimit}

	case *GlobalSpecType_DisableRateLimit:
		r.RateLimitChoice = &CreateSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *GlobalSpecType_RateLimit:
		r.RateLimitChoice = &CreateSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetServicePolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServicePolicyChoice.(type) {
	case nil:
		o.ServicePolicyChoice = nil

	case *CreateSpecType_ActiveServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *CreateSpecType_NoServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *CreateSpecType_ServicePoliciesFromNamespace:
		o.ServicePolicyChoice = &GlobalSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetServicePolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServicePolicyChoice.(type) {
	case nil:
		r.ServicePolicyChoice = nil

	case *GlobalSpecType_ActiveServicePolicies:
		r.ServicePolicyChoice = &CreateSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *GlobalSpecType_NoServicePolicies:
		r.ServicePolicyChoice = &CreateSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *GlobalSpecType_ServicePoliciesFromNamespace:
		r.ServicePolicyChoice = &CreateSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetSlowDdosMitigationChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SlowDdosMitigationChoice.(type) {
	case nil:
		o.SlowDdosMitigationChoice = nil

	case *CreateSpecType_SlowDdosMitigation:
		o.SlowDdosMitigationChoice = &GlobalSpecType_SlowDdosMitigation{SlowDdosMitigation: of.SlowDdosMitigation}

	case *CreateSpecType_SystemDefaultTimeouts:
		o.SlowDdosMitigationChoice = &GlobalSpecType_SystemDefaultTimeouts{SystemDefaultTimeouts: of.SystemDefaultTimeouts}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetSlowDdosMitigationChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SlowDdosMitigationChoice.(type) {
	case nil:
		r.SlowDdosMitigationChoice = nil

	case *GlobalSpecType_SlowDdosMitigation:
		r.SlowDdosMitigationChoice = &CreateSpecType_SlowDdosMitigation{SlowDdosMitigation: of.SlowDdosMitigation}

	case *GlobalSpecType_SystemDefaultTimeouts:
		r.SlowDdosMitigationChoice = &CreateSpecType_SystemDefaultTimeouts{SystemDefaultTimeouts: of.SystemDefaultTimeouts}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetTrustClientIpHeadersChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.TrustClientIpHeadersChoice.(type) {
	case nil:
		o.TrustClientIpHeadersChoice = nil

	case *CreateSpecType_DisableTrustClientIpHeaders:
		o.TrustClientIpHeadersChoice = &GlobalSpecType_DisableTrustClientIpHeaders{DisableTrustClientIpHeaders: of.DisableTrustClientIpHeaders}

	case *CreateSpecType_EnableTrustClientIpHeaders:
		o.TrustClientIpHeadersChoice = &GlobalSpecType_EnableTrustClientIpHeaders{EnableTrustClientIpHeaders: of.EnableTrustClientIpHeaders}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetTrustClientIpHeadersChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.TrustClientIpHeadersChoice.(type) {
	case nil:
		r.TrustClientIpHeadersChoice = nil

	case *GlobalSpecType_DisableTrustClientIpHeaders:
		r.TrustClientIpHeadersChoice = &CreateSpecType_DisableTrustClientIpHeaders{DisableTrustClientIpHeaders: of.DisableTrustClientIpHeaders}

	case *GlobalSpecType_EnableTrustClientIpHeaders:
		r.TrustClientIpHeadersChoice = &CreateSpecType_EnableTrustClientIpHeaders{EnableTrustClientIpHeaders: of.EnableTrustClientIpHeaders}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetUserIdChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.UserIdChoice.(type) {
	case nil:
		o.UserIdChoice = nil

	case *CreateSpecType_UserIdClientIp:
		o.UserIdChoice = &GlobalSpecType_UserIdClientIp{UserIdClientIp: of.UserIdClientIp}

	case *CreateSpecType_UserIdentification:
		o.UserIdChoice = &GlobalSpecType_UserIdentification{UserIdentification: of.UserIdentification}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetUserIdChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.UserIdChoice.(type) {
	case nil:
		r.UserIdChoice = nil

	case *GlobalSpecType_UserIdClientIp:
		r.UserIdChoice = &CreateSpecType_UserIdClientIp{UserIdClientIp: of.UserIdClientIp}

	case *GlobalSpecType_UserIdentification:
		r.UserIdChoice = &CreateSpecType_UserIdentification{UserIdentification: of.UserIdentification}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetWafChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WafChoice.(type) {
	case nil:
		o.WafChoice = nil

	case *CreateSpecType_AppFirewall:
		o.WafChoice = &GlobalSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *CreateSpecType_DisableWaf:
		o.WafChoice = &GlobalSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetWafChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WafChoice.(type) {
	case nil:
		r.WafChoice = nil

	case *GlobalSpecType_AppFirewall:
		r.WafChoice = &CreateSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *GlobalSpecType_DisableWaf:
		r.WafChoice = &CreateSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AddLocation = f.GetAddLocation()
	m.GetAdvertiseChoiceFromGlobalSpecType(f)
	m.GetApiDefinitionChoiceFromGlobalSpecType(f)
	m.GetApiDiscoveryChoiceFromGlobalSpecType(f)
	m.ApiProtectionRules = f.GetApiProtectionRules()
	m.BlockedClients = f.GetBlockedClients()
	m.GetBotDefenseChoiceFromGlobalSpecType(f)
	m.GetChallengeTypeFromGlobalSpecType(f)
	m.GetClientSideDefenseChoiceFromGlobalSpecType(f)
	m.CorsPolicy = f.GetCorsPolicy()
	m.CsrfPolicy = f.GetCsrfPolicy()
	m.DataGuardRules = f.GetDataGuardRules()
	m.GetDdosDetectionChoiceFromGlobalSpecType(f)
	m.DdosMitigationRules = f.GetDdosMitigationRules()
	m.DefaultRoutePools = f.GetDefaultRoutePools()
	m.Domains = f.GetDomains()
	m.GraphqlRules = f.GetGraphqlRules()
	m.GetHashPolicyChoiceFromGlobalSpecType(f)
	m.GetIpReputationChoiceFromGlobalSpecType(f)
	m.JwtValidation = f.GetJwtValidation()
	m.GetL7DdosAutoMitigationActionFromGlobalSpecType(f)
	m.GetLoadbalancerTypeFromGlobalSpecType(f)
	m.GetMaliciousUserDetectionChoiceFromGlobalSpecType(f)
	m.MaliciousUserMitigation = f.GetMaliciousUserMitigation()
	m.GetMlConfigChoiceFromGlobalSpecType(f)
	m.MoreOption = f.GetMoreOption()
	m.GetOriginPoolChoiceFromGlobalSpecType(f)
	m.OriginServerSubsetRuleList = f.GetOriginServerSubsetRuleList()
	m.ProtectedCookies = f.GetProtectedCookies()
	m.GetRateLimitChoiceFromGlobalSpecType(f)
	m.Routes = f.GetRoutes()
	m.GetServicePolicyChoiceFromGlobalSpecType(f)
	m.GetSlowDdosMitigationChoiceFromGlobalSpecType(f)
	m.GetTrustClientIpHeadersChoiceFromGlobalSpecType(f)
	m.TrustedClients = f.GetTrustedClients()
	m.GetUserIdChoiceFromGlobalSpecType(f)
	m.GetWafChoiceFromGlobalSpecType(f)
	m.WafExclusionRules = f.GetWafExclusionRules()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AddLocation = m1.AddLocation
	m1.SetAdvertiseChoiceToGlobalSpecType(f)
	m1.SetApiDefinitionChoiceToGlobalSpecType(f)
	m1.SetApiDiscoveryChoiceToGlobalSpecType(f)
	f.ApiProtectionRules = m1.ApiProtectionRules
	f.BlockedClients = m1.BlockedClients
	m1.SetBotDefenseChoiceToGlobalSpecType(f)
	m1.SetChallengeTypeToGlobalSpecType(f)
	m1.SetClientSideDefenseChoiceToGlobalSpecType(f)
	f.CorsPolicy = m1.CorsPolicy
	f.CsrfPolicy = m1.CsrfPolicy
	f.DataGuardRules = m1.DataGuardRules
	m1.SetDdosDetectionChoiceToGlobalSpecType(f)
	f.DdosMitigationRules = m1.DdosMitigationRules
	f.DefaultRoutePools = m1.DefaultRoutePools
	f.Domains = m1.Domains
	f.GraphqlRules = m1.GraphqlRules
	m1.SetHashPolicyChoiceToGlobalSpecType(f)
	m1.SetIpReputationChoiceToGlobalSpecType(f)
	f.JwtValidation = m1.JwtValidation
	m1.SetL7DdosAutoMitigationActionToGlobalSpecType(f)
	m1.SetLoadbalancerTypeToGlobalSpecType(f)
	m1.SetMaliciousUserDetectionChoiceToGlobalSpecType(f)
	f.MaliciousUserMitigation = m1.MaliciousUserMitigation
	m1.SetMlConfigChoiceToGlobalSpecType(f)
	f.MoreOption = m1.MoreOption
	m1.SetOriginPoolChoiceToGlobalSpecType(f)
	f.OriginServerSubsetRuleList = m1.OriginServerSubsetRuleList
	f.ProtectedCookies = m1.ProtectedCookies
	m1.SetRateLimitChoiceToGlobalSpecType(f)
	f.Routes = m1.Routes
	m1.SetServicePolicyChoiceToGlobalSpecType(f)
	m1.SetSlowDdosMitigationChoiceToGlobalSpecType(f)
	m1.SetTrustClientIpHeadersChoiceToGlobalSpecType(f)
	f.TrustedClients = m1.TrustedClients
	m1.SetUserIdChoiceToGlobalSpecType(f)
	m1.SetWafChoiceToGlobalSpecType(f)
	f.WafExclusionRules = m1.WafExclusionRules
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetAdvertiseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AdvertiseChoice.(type) {
	case nil:
		o.AdvertiseChoice = nil

	case *GetSpecType_AdvertiseCustom:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *GetSpecType_AdvertiseOnPublic:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *GetSpecType_AdvertiseOnPublicDefaultVip:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *GetSpecType_DoNotAdvertise:
		o.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetAdvertiseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AdvertiseChoice.(type) {
	case nil:
		r.AdvertiseChoice = nil

	case *GlobalSpecType_AdvertiseCustom:
		r.AdvertiseChoice = &GetSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *GlobalSpecType_AdvertiseOnPublic:
		r.AdvertiseChoice = &GetSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		r.AdvertiseChoice = &GetSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *GlobalSpecType_DoNotAdvertise:
		r.AdvertiseChoice = &GetSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetApiDefinitionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ApiDefinitionChoice.(type) {
	case nil:
		o.ApiDefinitionChoice = nil

	case *GetSpecType_ApiDefinition:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *GetSpecType_ApiDefinitions:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiDefinitions{ApiDefinitions: of.ApiDefinitions}

	case *GetSpecType_ApiSpecification:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiSpecification{ApiSpecification: of.ApiSpecification}

	case *GetSpecType_DisableApiDefinition:
		o.ApiDefinitionChoice = &GlobalSpecType_DisableApiDefinition{DisableApiDefinition: of.DisableApiDefinition}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetApiDefinitionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ApiDefinitionChoice.(type) {
	case nil:
		r.ApiDefinitionChoice = nil

	case *GlobalSpecType_ApiDefinition:
		r.ApiDefinitionChoice = &GetSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *GlobalSpecType_ApiDefinitions:
		r.ApiDefinitionChoice = &GetSpecType_ApiDefinitions{ApiDefinitions: of.ApiDefinitions}

	case *GlobalSpecType_ApiSpecification:
		r.ApiDefinitionChoice = &GetSpecType_ApiSpecification{ApiSpecification: of.ApiSpecification}

	case *GlobalSpecType_DisableApiDefinition:
		r.ApiDefinitionChoice = &GetSpecType_DisableApiDefinition{DisableApiDefinition: of.DisableApiDefinition}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetApiDiscoveryChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ApiDiscoveryChoice.(type) {
	case nil:
		o.ApiDiscoveryChoice = nil

	case *GetSpecType_DisableApiDiscovery:
		o.ApiDiscoveryChoice = &GlobalSpecType_DisableApiDiscovery{DisableApiDiscovery: of.DisableApiDiscovery}

	case *GetSpecType_EnableApiDiscovery:
		o.ApiDiscoveryChoice = &GlobalSpecType_EnableApiDiscovery{EnableApiDiscovery: of.EnableApiDiscovery}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetApiDiscoveryChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ApiDiscoveryChoice.(type) {
	case nil:
		r.ApiDiscoveryChoice = nil

	case *GlobalSpecType_DisableApiDiscovery:
		r.ApiDiscoveryChoice = &GetSpecType_DisableApiDiscovery{DisableApiDiscovery: of.DisableApiDiscovery}

	case *GlobalSpecType_EnableApiDiscovery:
		r.ApiDiscoveryChoice = &GetSpecType_EnableApiDiscovery{EnableApiDiscovery: of.EnableApiDiscovery}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetBotDefenseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BotDefenseChoice.(type) {
	case nil:
		o.BotDefenseChoice = nil

	case *GetSpecType_BotDefense:
		o.BotDefenseChoice = &GlobalSpecType_BotDefense{BotDefense: of.BotDefense}

	case *GetSpecType_BotDefenseAdvanced:
		o.BotDefenseChoice = &GlobalSpecType_BotDefenseAdvanced{BotDefenseAdvanced: of.BotDefenseAdvanced}

	case *GetSpecType_DisableBotDefense:
		o.BotDefenseChoice = &GlobalSpecType_DisableBotDefense{DisableBotDefense: of.DisableBotDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetBotDefenseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BotDefenseChoice.(type) {
	case nil:
		r.BotDefenseChoice = nil

	case *GlobalSpecType_BotDefense:
		r.BotDefenseChoice = &GetSpecType_BotDefense{BotDefense: of.BotDefense}

	case *GlobalSpecType_BotDefenseAdvanced:
		r.BotDefenseChoice = &GetSpecType_BotDefenseAdvanced{BotDefenseAdvanced: of.BotDefenseAdvanced}

	case *GlobalSpecType_DisableBotDefense:
		r.BotDefenseChoice = &GetSpecType_DisableBotDefense{DisableBotDefense: of.DisableBotDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetChallengeTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ChallengeType.(type) {
	case nil:
		o.ChallengeType = nil

	case *GetSpecType_CaptchaChallenge:
		o.ChallengeType = &GlobalSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *GetSpecType_EnableChallenge:
		o.ChallengeType = &GlobalSpecType_EnableChallenge{EnableChallenge: of.EnableChallenge}

	case *GetSpecType_JsChallenge:
		o.ChallengeType = &GlobalSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *GetSpecType_NoChallenge:
		o.ChallengeType = &GlobalSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *GetSpecType_PolicyBasedChallenge:
		o.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetChallengeTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ChallengeType.(type) {
	case nil:
		r.ChallengeType = nil

	case *GlobalSpecType_CaptchaChallenge:
		r.ChallengeType = &GetSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *GlobalSpecType_EnableChallenge:
		r.ChallengeType = &GetSpecType_EnableChallenge{EnableChallenge: of.EnableChallenge}

	case *GlobalSpecType_JsChallenge:
		r.ChallengeType = &GetSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *GlobalSpecType_NoChallenge:
		r.ChallengeType = &GetSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *GlobalSpecType_PolicyBasedChallenge:
		r.ChallengeType = &GetSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetClientSideDefenseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClientSideDefenseChoice.(type) {
	case nil:
		o.ClientSideDefenseChoice = nil

	case *GetSpecType_ClientSideDefense:
		o.ClientSideDefenseChoice = &GlobalSpecType_ClientSideDefense{ClientSideDefense: of.ClientSideDefense}

	case *GetSpecType_DisableClientSideDefense:
		o.ClientSideDefenseChoice = &GlobalSpecType_DisableClientSideDefense{DisableClientSideDefense: of.DisableClientSideDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetClientSideDefenseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClientSideDefenseChoice.(type) {
	case nil:
		r.ClientSideDefenseChoice = nil

	case *GlobalSpecType_ClientSideDefense:
		r.ClientSideDefenseChoice = &GetSpecType_ClientSideDefense{ClientSideDefense: of.ClientSideDefense}

	case *GlobalSpecType_DisableClientSideDefense:
		r.ClientSideDefenseChoice = &GetSpecType_DisableClientSideDefense{DisableClientSideDefense: of.DisableClientSideDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetDdosDetectionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DdosDetectionChoice.(type) {
	case nil:
		o.DdosDetectionChoice = nil

	case *GetSpecType_DisableDdosDetection:
		o.DdosDetectionChoice = &GlobalSpecType_DisableDdosDetection{DisableDdosDetection: of.DisableDdosDetection}

	case *GetSpecType_EnableDdosDetection:
		o.DdosDetectionChoice = &GlobalSpecType_EnableDdosDetection{EnableDdosDetection: of.EnableDdosDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetDdosDetectionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DdosDetectionChoice.(type) {
	case nil:
		r.DdosDetectionChoice = nil

	case *GlobalSpecType_DisableDdosDetection:
		r.DdosDetectionChoice = &GetSpecType_DisableDdosDetection{DisableDdosDetection: of.DisableDdosDetection}

	case *GlobalSpecType_EnableDdosDetection:
		r.DdosDetectionChoice = &GetSpecType_EnableDdosDetection{EnableDdosDetection: of.EnableDdosDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetHashPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HashPolicyChoice.(type) {
	case nil:
		o.HashPolicyChoice = nil

	case *GetSpecType_CookieStickiness:
		o.HashPolicyChoice = &GlobalSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *GetSpecType_LeastActive:
		o.HashPolicyChoice = &GlobalSpecType_LeastActive{LeastActive: of.LeastActive}

	case *GetSpecType_Random:
		o.HashPolicyChoice = &GlobalSpecType_Random{Random: of.Random}

	case *GetSpecType_RingHash:
		o.HashPolicyChoice = &GlobalSpecType_RingHash{RingHash: of.RingHash}

	case *GetSpecType_RoundRobin:
		o.HashPolicyChoice = &GlobalSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *GetSpecType_SourceIpStickiness:
		o.HashPolicyChoice = &GlobalSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetHashPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HashPolicyChoice.(type) {
	case nil:
		r.HashPolicyChoice = nil

	case *GlobalSpecType_CookieStickiness:
		r.HashPolicyChoice = &GetSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *GlobalSpecType_LeastActive:
		r.HashPolicyChoice = &GetSpecType_LeastActive{LeastActive: of.LeastActive}

	case *GlobalSpecType_Random:
		r.HashPolicyChoice = &GetSpecType_Random{Random: of.Random}

	case *GlobalSpecType_RingHash:
		r.HashPolicyChoice = &GetSpecType_RingHash{RingHash: of.RingHash}

	case *GlobalSpecType_RoundRobin:
		r.HashPolicyChoice = &GetSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *GlobalSpecType_SourceIpStickiness:
		r.HashPolicyChoice = &GetSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetIpReputationChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IpReputationChoice.(type) {
	case nil:
		o.IpReputationChoice = nil

	case *GetSpecType_DisableIpReputation:
		o.IpReputationChoice = &GlobalSpecType_DisableIpReputation{DisableIpReputation: of.DisableIpReputation}

	case *GetSpecType_EnableIpReputation:
		o.IpReputationChoice = &GlobalSpecType_EnableIpReputation{EnableIpReputation: of.EnableIpReputation}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetIpReputationChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IpReputationChoice.(type) {
	case nil:
		r.IpReputationChoice = nil

	case *GlobalSpecType_DisableIpReputation:
		r.IpReputationChoice = &GetSpecType_DisableIpReputation{DisableIpReputation: of.DisableIpReputation}

	case *GlobalSpecType_EnableIpReputation:
		r.IpReputationChoice = &GetSpecType_EnableIpReputation{EnableIpReputation: of.EnableIpReputation}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetL7DdosAutoMitigationActionToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.L7DdosAutoMitigationAction.(type) {
	case nil:
		o.L7DdosAutoMitigationAction = nil

	case *GetSpecType_L7DdosActionBlock:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionBlock{L7DdosActionBlock: of.L7DdosActionBlock}

	case *GetSpecType_L7DdosActionDefault:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionDefault{L7DdosActionDefault: of.L7DdosActionDefault}

	case *GetSpecType_L7DdosActionJsChallenge:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionJsChallenge{L7DdosActionJsChallenge: of.L7DdosActionJsChallenge}

	case *GetSpecType_L7DdosActionNone:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionNone{L7DdosActionNone: of.L7DdosActionNone}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetL7DdosAutoMitigationActionFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.L7DdosAutoMitigationAction.(type) {
	case nil:
		r.L7DdosAutoMitigationAction = nil

	case *GlobalSpecType_L7DdosActionBlock:
		r.L7DdosAutoMitigationAction = &GetSpecType_L7DdosActionBlock{L7DdosActionBlock: of.L7DdosActionBlock}

	case *GlobalSpecType_L7DdosActionDefault:
		r.L7DdosAutoMitigationAction = &GetSpecType_L7DdosActionDefault{L7DdosActionDefault: of.L7DdosActionDefault}

	case *GlobalSpecType_L7DdosActionJsChallenge:
		r.L7DdosAutoMitigationAction = &GetSpecType_L7DdosActionJsChallenge{L7DdosActionJsChallenge: of.L7DdosActionJsChallenge}

	case *GlobalSpecType_L7DdosActionNone:
		r.L7DdosAutoMitigationAction = &GetSpecType_L7DdosActionNone{L7DdosActionNone: of.L7DdosActionNone}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetLoadbalancerTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LoadbalancerType.(type) {
	case nil:
		o.LoadbalancerType = nil

	case *GetSpecType_Http:
		o.LoadbalancerType = &GlobalSpecType_Http{Http: of.Http}

	case *GetSpecType_Https:
		o.LoadbalancerType = &GlobalSpecType_Https{Https: of.Https}

	case *GetSpecType_HttpsAutoCert:
		o.LoadbalancerType = &GlobalSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetLoadbalancerTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LoadbalancerType.(type) {
	case nil:
		r.LoadbalancerType = nil

	case *GlobalSpecType_Http:
		r.LoadbalancerType = &GetSpecType_Http{Http: of.Http}

	case *GlobalSpecType_Https:
		r.LoadbalancerType = &GetSpecType_Https{Https: of.Https}

	case *GlobalSpecType_HttpsAutoCert:
		r.LoadbalancerType = &GetSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetMaliciousUserDetectionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.MaliciousUserDetectionChoice.(type) {
	case nil:
		o.MaliciousUserDetectionChoice = nil

	case *GetSpecType_DisableMaliciousUserDetection:
		o.MaliciousUserDetectionChoice = &GlobalSpecType_DisableMaliciousUserDetection{DisableMaliciousUserDetection: of.DisableMaliciousUserDetection}

	case *GetSpecType_EnableMaliciousUserDetection:
		o.MaliciousUserDetectionChoice = &GlobalSpecType_EnableMaliciousUserDetection{EnableMaliciousUserDetection: of.EnableMaliciousUserDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetMaliciousUserDetectionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.MaliciousUserDetectionChoice.(type) {
	case nil:
		r.MaliciousUserDetectionChoice = nil

	case *GlobalSpecType_DisableMaliciousUserDetection:
		r.MaliciousUserDetectionChoice = &GetSpecType_DisableMaliciousUserDetection{DisableMaliciousUserDetection: of.DisableMaliciousUserDetection}

	case *GlobalSpecType_EnableMaliciousUserDetection:
		r.MaliciousUserDetectionChoice = &GetSpecType_EnableMaliciousUserDetection{EnableMaliciousUserDetection: of.EnableMaliciousUserDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetMlConfigChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.MlConfigChoice.(type) {
	case nil:
		o.MlConfigChoice = nil

	case *GetSpecType_MultiLbApp:
		o.MlConfigChoice = &GlobalSpecType_MultiLbApp{MultiLbApp: of.MultiLbApp}

	case *GetSpecType_SingleLbApp:
		o.MlConfigChoice = &GlobalSpecType_SingleLbApp{SingleLbApp: of.SingleLbApp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetMlConfigChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.MlConfigChoice.(type) {
	case nil:
		r.MlConfigChoice = nil

	case *GlobalSpecType_MultiLbApp:
		r.MlConfigChoice = &GetSpecType_MultiLbApp{MultiLbApp: of.MultiLbApp}

	case *GlobalSpecType_SingleLbApp:
		r.MlConfigChoice = &GetSpecType_SingleLbApp{SingleLbApp: of.SingleLbApp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetOriginPoolChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.OriginPoolChoice.(type) {
	case nil:
		o.OriginPoolChoice = nil

	case *GetSpecType_DefaultPool:
		o.OriginPoolChoice = &GlobalSpecType_DefaultPool{DefaultPool: of.DefaultPool}

	case *GetSpecType_DefaultPoolList:
		o.OriginPoolChoice = &GlobalSpecType_DefaultPoolList{DefaultPoolList: of.DefaultPoolList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetOriginPoolChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.OriginPoolChoice.(type) {
	case nil:
		r.OriginPoolChoice = nil

	case *GlobalSpecType_DefaultPool:
		r.OriginPoolChoice = &GetSpecType_DefaultPool{DefaultPool: of.DefaultPool}

	case *GlobalSpecType_DefaultPoolList:
		r.OriginPoolChoice = &GetSpecType_DefaultPoolList{DefaultPoolList: of.DefaultPoolList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetRateLimitChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RateLimitChoice.(type) {
	case nil:
		o.RateLimitChoice = nil

	case *GetSpecType_ApiRateLimit:
		o.RateLimitChoice = &GlobalSpecType_ApiRateLimit{ApiRateLimit: of.ApiRateLimit}

	case *GetSpecType_DisableRateLimit:
		o.RateLimitChoice = &GlobalSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *GetSpecType_RateLimit:
		o.RateLimitChoice = &GlobalSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetRateLimitChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RateLimitChoice.(type) {
	case nil:
		r.RateLimitChoice = nil

	case *GlobalSpecType_ApiRateLimit:
		r.RateLimitChoice = &GetSpecType_ApiRateLimit{ApiRateLimit: of.ApiRateLimit}

	case *GlobalSpecType_DisableRateLimit:
		r.RateLimitChoice = &GetSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *GlobalSpecType_RateLimit:
		r.RateLimitChoice = &GetSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetServicePolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServicePolicyChoice.(type) {
	case nil:
		o.ServicePolicyChoice = nil

	case *GetSpecType_ActiveServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *GetSpecType_NoServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *GetSpecType_ServicePoliciesFromNamespace:
		o.ServicePolicyChoice = &GlobalSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetServicePolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServicePolicyChoice.(type) {
	case nil:
		r.ServicePolicyChoice = nil

	case *GlobalSpecType_ActiveServicePolicies:
		r.ServicePolicyChoice = &GetSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *GlobalSpecType_NoServicePolicies:
		r.ServicePolicyChoice = &GetSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *GlobalSpecType_ServicePoliciesFromNamespace:
		r.ServicePolicyChoice = &GetSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetSlowDdosMitigationChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SlowDdosMitigationChoice.(type) {
	case nil:
		o.SlowDdosMitigationChoice = nil

	case *GetSpecType_SlowDdosMitigation:
		o.SlowDdosMitigationChoice = &GlobalSpecType_SlowDdosMitigation{SlowDdosMitigation: of.SlowDdosMitigation}

	case *GetSpecType_SystemDefaultTimeouts:
		o.SlowDdosMitigationChoice = &GlobalSpecType_SystemDefaultTimeouts{SystemDefaultTimeouts: of.SystemDefaultTimeouts}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetSlowDdosMitigationChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SlowDdosMitigationChoice.(type) {
	case nil:
		r.SlowDdosMitigationChoice = nil

	case *GlobalSpecType_SlowDdosMitigation:
		r.SlowDdosMitigationChoice = &GetSpecType_SlowDdosMitigation{SlowDdosMitigation: of.SlowDdosMitigation}

	case *GlobalSpecType_SystemDefaultTimeouts:
		r.SlowDdosMitigationChoice = &GetSpecType_SystemDefaultTimeouts{SystemDefaultTimeouts: of.SystemDefaultTimeouts}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetTrustClientIpHeadersChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.TrustClientIpHeadersChoice.(type) {
	case nil:
		o.TrustClientIpHeadersChoice = nil

	case *GetSpecType_DisableTrustClientIpHeaders:
		o.TrustClientIpHeadersChoice = &GlobalSpecType_DisableTrustClientIpHeaders{DisableTrustClientIpHeaders: of.DisableTrustClientIpHeaders}

	case *GetSpecType_EnableTrustClientIpHeaders:
		o.TrustClientIpHeadersChoice = &GlobalSpecType_EnableTrustClientIpHeaders{EnableTrustClientIpHeaders: of.EnableTrustClientIpHeaders}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetTrustClientIpHeadersChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.TrustClientIpHeadersChoice.(type) {
	case nil:
		r.TrustClientIpHeadersChoice = nil

	case *GlobalSpecType_DisableTrustClientIpHeaders:
		r.TrustClientIpHeadersChoice = &GetSpecType_DisableTrustClientIpHeaders{DisableTrustClientIpHeaders: of.DisableTrustClientIpHeaders}

	case *GlobalSpecType_EnableTrustClientIpHeaders:
		r.TrustClientIpHeadersChoice = &GetSpecType_EnableTrustClientIpHeaders{EnableTrustClientIpHeaders: of.EnableTrustClientIpHeaders}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetUserIdChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.UserIdChoice.(type) {
	case nil:
		o.UserIdChoice = nil

	case *GetSpecType_UserIdClientIp:
		o.UserIdChoice = &GlobalSpecType_UserIdClientIp{UserIdClientIp: of.UserIdClientIp}

	case *GetSpecType_UserIdentification:
		o.UserIdChoice = &GlobalSpecType_UserIdentification{UserIdentification: of.UserIdentification}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetUserIdChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.UserIdChoice.(type) {
	case nil:
		r.UserIdChoice = nil

	case *GlobalSpecType_UserIdClientIp:
		r.UserIdChoice = &GetSpecType_UserIdClientIp{UserIdClientIp: of.UserIdClientIp}

	case *GlobalSpecType_UserIdentification:
		r.UserIdChoice = &GetSpecType_UserIdentification{UserIdentification: of.UserIdentification}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetWafChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WafChoice.(type) {
	case nil:
		o.WafChoice = nil

	case *GetSpecType_AppFirewall:
		o.WafChoice = &GlobalSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *GetSpecType_DisableWaf:
		o.WafChoice = &GlobalSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetWafChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WafChoice.(type) {
	case nil:
		r.WafChoice = nil

	case *GlobalSpecType_AppFirewall:
		r.WafChoice = &GetSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *GlobalSpecType_DisableWaf:
		r.WafChoice = &GetSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AddLocation = f.GetAddLocation()
	m.GetAdvertiseChoiceFromGlobalSpecType(f)
	m.GetApiDefinitionChoiceFromGlobalSpecType(f)
	m.GetApiDiscoveryChoiceFromGlobalSpecType(f)
	m.ApiProtectionRules = f.GetApiProtectionRules()
	m.AutoCertInfo = f.GetAutoCertInfo()
	m.BlockedClients = f.GetBlockedClients()
	m.GetBotDefenseChoiceFromGlobalSpecType(f)
	m.GetChallengeTypeFromGlobalSpecType(f)
	m.GetClientSideDefenseChoiceFromGlobalSpecType(f)
	m.CorsPolicy = f.GetCorsPolicy()
	m.CsrfPolicy = f.GetCsrfPolicy()
	m.DataGuardRules = f.GetDataGuardRules()
	m.GetDdosDetectionChoiceFromGlobalSpecType(f)
	m.DdosMitigationRules = f.GetDdosMitigationRules()
	m.DefaultRoutePools = f.GetDefaultRoutePools()
	m.DnsInfo = f.GetDnsInfo()
	m.Domains = f.GetDomains()
	m.DownstreamTlsCertificateExpirationTimestamps = f.GetDownstreamTlsCertificateExpirationTimestamps()
	m.GraphqlRules = f.GetGraphqlRules()
	m.GetHashPolicyChoiceFromGlobalSpecType(f)
	m.HostName = f.GetHostName()
	m.InternetVipInfo = f.GetInternetVipInfo()
	m.GetIpReputationChoiceFromGlobalSpecType(f)
	m.JwtValidation = f.GetJwtValidation()
	m.GetL7DdosAutoMitigationActionFromGlobalSpecType(f)
	m.GetLoadbalancerTypeFromGlobalSpecType(f)
	m.GetMaliciousUserDetectionChoiceFromGlobalSpecType(f)
	m.MaliciousUserMitigation = f.GetMaliciousUserMitigation()
	m.GetMlConfigChoiceFromGlobalSpecType(f)
	m.MoreOption = f.GetMoreOption()
	m.GetOriginPoolChoiceFromGlobalSpecType(f)
	m.OriginServerSubsetRuleList = f.GetOriginServerSubsetRuleList()
	m.ProtectedCookies = f.GetProtectedCookies()
	m.GetRateLimitChoiceFromGlobalSpecType(f)
	m.Routes = f.GetRoutes()
	m.GetServicePolicyChoiceFromGlobalSpecType(f)
	m.GetSlowDdosMitigationChoiceFromGlobalSpecType(f)
	m.State = f.GetState()
	m.GetTrustClientIpHeadersChoiceFromGlobalSpecType(f)
	m.TrustedClients = f.GetTrustedClients()
	m.GetUserIdChoiceFromGlobalSpecType(f)
	m.GetWafChoiceFromGlobalSpecType(f)
	m.WafExclusionRules = f.GetWafExclusionRules()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AddLocation = m1.AddLocation
	m1.SetAdvertiseChoiceToGlobalSpecType(f)
	m1.SetApiDefinitionChoiceToGlobalSpecType(f)
	m1.SetApiDiscoveryChoiceToGlobalSpecType(f)
	f.ApiProtectionRules = m1.ApiProtectionRules
	f.AutoCertInfo = m1.AutoCertInfo
	f.BlockedClients = m1.BlockedClients
	m1.SetBotDefenseChoiceToGlobalSpecType(f)
	m1.SetChallengeTypeToGlobalSpecType(f)
	m1.SetClientSideDefenseChoiceToGlobalSpecType(f)
	f.CorsPolicy = m1.CorsPolicy
	f.CsrfPolicy = m1.CsrfPolicy
	f.DataGuardRules = m1.DataGuardRules
	m1.SetDdosDetectionChoiceToGlobalSpecType(f)
	f.DdosMitigationRules = m1.DdosMitigationRules
	f.DefaultRoutePools = m1.DefaultRoutePools
	f.DnsInfo = m1.DnsInfo
	f.Domains = m1.Domains
	f.DownstreamTlsCertificateExpirationTimestamps = m1.DownstreamTlsCertificateExpirationTimestamps
	f.GraphqlRules = m1.GraphqlRules
	m1.SetHashPolicyChoiceToGlobalSpecType(f)
	f.HostName = m1.HostName
	f.InternetVipInfo = m1.InternetVipInfo
	m1.SetIpReputationChoiceToGlobalSpecType(f)
	f.JwtValidation = m1.JwtValidation
	m1.SetL7DdosAutoMitigationActionToGlobalSpecType(f)
	m1.SetLoadbalancerTypeToGlobalSpecType(f)
	m1.SetMaliciousUserDetectionChoiceToGlobalSpecType(f)
	f.MaliciousUserMitigation = m1.MaliciousUserMitigation
	m1.SetMlConfigChoiceToGlobalSpecType(f)
	f.MoreOption = m1.MoreOption
	m1.SetOriginPoolChoiceToGlobalSpecType(f)
	f.OriginServerSubsetRuleList = m1.OriginServerSubsetRuleList
	f.ProtectedCookies = m1.ProtectedCookies
	m1.SetRateLimitChoiceToGlobalSpecType(f)
	f.Routes = m1.Routes
	m1.SetServicePolicyChoiceToGlobalSpecType(f)
	m1.SetSlowDdosMitigationChoiceToGlobalSpecType(f)
	f.State = m1.State
	m1.SetTrustClientIpHeadersChoiceToGlobalSpecType(f)
	f.TrustedClients = m1.TrustedClients
	m1.SetUserIdChoiceToGlobalSpecType(f)
	m1.SetWafChoiceToGlobalSpecType(f)
	f.WafExclusionRules = m1.WafExclusionRules
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetAdvertiseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AdvertiseChoice.(type) {
	case nil:
		o.AdvertiseChoice = nil

	case *ReplaceSpecType_AdvertiseCustom:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *ReplaceSpecType_AdvertiseOnPublic:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *ReplaceSpecType_DoNotAdvertise:
		o.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetAdvertiseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AdvertiseChoice.(type) {
	case nil:
		r.AdvertiseChoice = nil

	case *GlobalSpecType_AdvertiseCustom:
		r.AdvertiseChoice = &ReplaceSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *GlobalSpecType_AdvertiseOnPublic:
		r.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		r.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *GlobalSpecType_DoNotAdvertise:
		r.AdvertiseChoice = &ReplaceSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetApiDefinitionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ApiDefinitionChoice.(type) {
	case nil:
		o.ApiDefinitionChoice = nil

	case *ReplaceSpecType_ApiDefinition:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *ReplaceSpecType_ApiDefinitions:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiDefinitions{ApiDefinitions: of.ApiDefinitions}

	case *ReplaceSpecType_ApiSpecification:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiSpecification{ApiSpecification: of.ApiSpecification}

	case *ReplaceSpecType_DisableApiDefinition:
		o.ApiDefinitionChoice = &GlobalSpecType_DisableApiDefinition{DisableApiDefinition: of.DisableApiDefinition}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetApiDefinitionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ApiDefinitionChoice.(type) {
	case nil:
		r.ApiDefinitionChoice = nil

	case *GlobalSpecType_ApiDefinition:
		r.ApiDefinitionChoice = &ReplaceSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *GlobalSpecType_ApiDefinitions:
		r.ApiDefinitionChoice = &ReplaceSpecType_ApiDefinitions{ApiDefinitions: of.ApiDefinitions}

	case *GlobalSpecType_ApiSpecification:
		r.ApiDefinitionChoice = &ReplaceSpecType_ApiSpecification{ApiSpecification: of.ApiSpecification}

	case *GlobalSpecType_DisableApiDefinition:
		r.ApiDefinitionChoice = &ReplaceSpecType_DisableApiDefinition{DisableApiDefinition: of.DisableApiDefinition}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetApiDiscoveryChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ApiDiscoveryChoice.(type) {
	case nil:
		o.ApiDiscoveryChoice = nil

	case *ReplaceSpecType_DisableApiDiscovery:
		o.ApiDiscoveryChoice = &GlobalSpecType_DisableApiDiscovery{DisableApiDiscovery: of.DisableApiDiscovery}

	case *ReplaceSpecType_EnableApiDiscovery:
		o.ApiDiscoveryChoice = &GlobalSpecType_EnableApiDiscovery{EnableApiDiscovery: of.EnableApiDiscovery}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetApiDiscoveryChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ApiDiscoveryChoice.(type) {
	case nil:
		r.ApiDiscoveryChoice = nil

	case *GlobalSpecType_DisableApiDiscovery:
		r.ApiDiscoveryChoice = &ReplaceSpecType_DisableApiDiscovery{DisableApiDiscovery: of.DisableApiDiscovery}

	case *GlobalSpecType_EnableApiDiscovery:
		r.ApiDiscoveryChoice = &ReplaceSpecType_EnableApiDiscovery{EnableApiDiscovery: of.EnableApiDiscovery}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetBotDefenseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BotDefenseChoice.(type) {
	case nil:
		o.BotDefenseChoice = nil

	case *ReplaceSpecType_BotDefense:
		o.BotDefenseChoice = &GlobalSpecType_BotDefense{BotDefense: of.BotDefense}

	case *ReplaceSpecType_BotDefenseAdvanced:
		o.BotDefenseChoice = &GlobalSpecType_BotDefenseAdvanced{BotDefenseAdvanced: of.BotDefenseAdvanced}

	case *ReplaceSpecType_DisableBotDefense:
		o.BotDefenseChoice = &GlobalSpecType_DisableBotDefense{DisableBotDefense: of.DisableBotDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetBotDefenseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BotDefenseChoice.(type) {
	case nil:
		r.BotDefenseChoice = nil

	case *GlobalSpecType_BotDefense:
		r.BotDefenseChoice = &ReplaceSpecType_BotDefense{BotDefense: of.BotDefense}

	case *GlobalSpecType_BotDefenseAdvanced:
		r.BotDefenseChoice = &ReplaceSpecType_BotDefenseAdvanced{BotDefenseAdvanced: of.BotDefenseAdvanced}

	case *GlobalSpecType_DisableBotDefense:
		r.BotDefenseChoice = &ReplaceSpecType_DisableBotDefense{DisableBotDefense: of.DisableBotDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetChallengeTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ChallengeType.(type) {
	case nil:
		o.ChallengeType = nil

	case *ReplaceSpecType_CaptchaChallenge:
		o.ChallengeType = &GlobalSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *ReplaceSpecType_EnableChallenge:
		o.ChallengeType = &GlobalSpecType_EnableChallenge{EnableChallenge: of.EnableChallenge}

	case *ReplaceSpecType_JsChallenge:
		o.ChallengeType = &GlobalSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *ReplaceSpecType_NoChallenge:
		o.ChallengeType = &GlobalSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *ReplaceSpecType_PolicyBasedChallenge:
		o.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetChallengeTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ChallengeType.(type) {
	case nil:
		r.ChallengeType = nil

	case *GlobalSpecType_CaptchaChallenge:
		r.ChallengeType = &ReplaceSpecType_CaptchaChallenge{CaptchaChallenge: of.CaptchaChallenge}

	case *GlobalSpecType_EnableChallenge:
		r.ChallengeType = &ReplaceSpecType_EnableChallenge{EnableChallenge: of.EnableChallenge}

	case *GlobalSpecType_JsChallenge:
		r.ChallengeType = &ReplaceSpecType_JsChallenge{JsChallenge: of.JsChallenge}

	case *GlobalSpecType_NoChallenge:
		r.ChallengeType = &ReplaceSpecType_NoChallenge{NoChallenge: of.NoChallenge}

	case *GlobalSpecType_PolicyBasedChallenge:
		r.ChallengeType = &ReplaceSpecType_PolicyBasedChallenge{PolicyBasedChallenge: of.PolicyBasedChallenge}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetClientSideDefenseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClientSideDefenseChoice.(type) {
	case nil:
		o.ClientSideDefenseChoice = nil

	case *ReplaceSpecType_ClientSideDefense:
		o.ClientSideDefenseChoice = &GlobalSpecType_ClientSideDefense{ClientSideDefense: of.ClientSideDefense}

	case *ReplaceSpecType_DisableClientSideDefense:
		o.ClientSideDefenseChoice = &GlobalSpecType_DisableClientSideDefense{DisableClientSideDefense: of.DisableClientSideDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetClientSideDefenseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClientSideDefenseChoice.(type) {
	case nil:
		r.ClientSideDefenseChoice = nil

	case *GlobalSpecType_ClientSideDefense:
		r.ClientSideDefenseChoice = &ReplaceSpecType_ClientSideDefense{ClientSideDefense: of.ClientSideDefense}

	case *GlobalSpecType_DisableClientSideDefense:
		r.ClientSideDefenseChoice = &ReplaceSpecType_DisableClientSideDefense{DisableClientSideDefense: of.DisableClientSideDefense}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetDdosDetectionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.DdosDetectionChoice.(type) {
	case nil:
		o.DdosDetectionChoice = nil

	case *ReplaceSpecType_DisableDdosDetection:
		o.DdosDetectionChoice = &GlobalSpecType_DisableDdosDetection{DisableDdosDetection: of.DisableDdosDetection}

	case *ReplaceSpecType_EnableDdosDetection:
		o.DdosDetectionChoice = &GlobalSpecType_EnableDdosDetection{EnableDdosDetection: of.EnableDdosDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetDdosDetectionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.DdosDetectionChoice.(type) {
	case nil:
		r.DdosDetectionChoice = nil

	case *GlobalSpecType_DisableDdosDetection:
		r.DdosDetectionChoice = &ReplaceSpecType_DisableDdosDetection{DisableDdosDetection: of.DisableDdosDetection}

	case *GlobalSpecType_EnableDdosDetection:
		r.DdosDetectionChoice = &ReplaceSpecType_EnableDdosDetection{EnableDdosDetection: of.EnableDdosDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetHashPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HashPolicyChoice.(type) {
	case nil:
		o.HashPolicyChoice = nil

	case *ReplaceSpecType_CookieStickiness:
		o.HashPolicyChoice = &GlobalSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *ReplaceSpecType_LeastActive:
		o.HashPolicyChoice = &GlobalSpecType_LeastActive{LeastActive: of.LeastActive}

	case *ReplaceSpecType_Random:
		o.HashPolicyChoice = &GlobalSpecType_Random{Random: of.Random}

	case *ReplaceSpecType_RingHash:
		o.HashPolicyChoice = &GlobalSpecType_RingHash{RingHash: of.RingHash}

	case *ReplaceSpecType_RoundRobin:
		o.HashPolicyChoice = &GlobalSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *ReplaceSpecType_SourceIpStickiness:
		o.HashPolicyChoice = &GlobalSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetHashPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HashPolicyChoice.(type) {
	case nil:
		r.HashPolicyChoice = nil

	case *GlobalSpecType_CookieStickiness:
		r.HashPolicyChoice = &ReplaceSpecType_CookieStickiness{CookieStickiness: of.CookieStickiness}

	case *GlobalSpecType_LeastActive:
		r.HashPolicyChoice = &ReplaceSpecType_LeastActive{LeastActive: of.LeastActive}

	case *GlobalSpecType_Random:
		r.HashPolicyChoice = &ReplaceSpecType_Random{Random: of.Random}

	case *GlobalSpecType_RingHash:
		r.HashPolicyChoice = &ReplaceSpecType_RingHash{RingHash: of.RingHash}

	case *GlobalSpecType_RoundRobin:
		r.HashPolicyChoice = &ReplaceSpecType_RoundRobin{RoundRobin: of.RoundRobin}

	case *GlobalSpecType_SourceIpStickiness:
		r.HashPolicyChoice = &ReplaceSpecType_SourceIpStickiness{SourceIpStickiness: of.SourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetIpReputationChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.IpReputationChoice.(type) {
	case nil:
		o.IpReputationChoice = nil

	case *ReplaceSpecType_DisableIpReputation:
		o.IpReputationChoice = &GlobalSpecType_DisableIpReputation{DisableIpReputation: of.DisableIpReputation}

	case *ReplaceSpecType_EnableIpReputation:
		o.IpReputationChoice = &GlobalSpecType_EnableIpReputation{EnableIpReputation: of.EnableIpReputation}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetIpReputationChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.IpReputationChoice.(type) {
	case nil:
		r.IpReputationChoice = nil

	case *GlobalSpecType_DisableIpReputation:
		r.IpReputationChoice = &ReplaceSpecType_DisableIpReputation{DisableIpReputation: of.DisableIpReputation}

	case *GlobalSpecType_EnableIpReputation:
		r.IpReputationChoice = &ReplaceSpecType_EnableIpReputation{EnableIpReputation: of.EnableIpReputation}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetL7DdosAutoMitigationActionToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.L7DdosAutoMitigationAction.(type) {
	case nil:
		o.L7DdosAutoMitigationAction = nil

	case *ReplaceSpecType_L7DdosActionBlock:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionBlock{L7DdosActionBlock: of.L7DdosActionBlock}

	case *ReplaceSpecType_L7DdosActionDefault:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionDefault{L7DdosActionDefault: of.L7DdosActionDefault}

	case *ReplaceSpecType_L7DdosActionJsChallenge:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionJsChallenge{L7DdosActionJsChallenge: of.L7DdosActionJsChallenge}

	case *ReplaceSpecType_L7DdosActionNone:
		o.L7DdosAutoMitigationAction = &GlobalSpecType_L7DdosActionNone{L7DdosActionNone: of.L7DdosActionNone}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetL7DdosAutoMitigationActionFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.L7DdosAutoMitigationAction.(type) {
	case nil:
		r.L7DdosAutoMitigationAction = nil

	case *GlobalSpecType_L7DdosActionBlock:
		r.L7DdosAutoMitigationAction = &ReplaceSpecType_L7DdosActionBlock{L7DdosActionBlock: of.L7DdosActionBlock}

	case *GlobalSpecType_L7DdosActionDefault:
		r.L7DdosAutoMitigationAction = &ReplaceSpecType_L7DdosActionDefault{L7DdosActionDefault: of.L7DdosActionDefault}

	case *GlobalSpecType_L7DdosActionJsChallenge:
		r.L7DdosAutoMitigationAction = &ReplaceSpecType_L7DdosActionJsChallenge{L7DdosActionJsChallenge: of.L7DdosActionJsChallenge}

	case *GlobalSpecType_L7DdosActionNone:
		r.L7DdosAutoMitigationAction = &ReplaceSpecType_L7DdosActionNone{L7DdosActionNone: of.L7DdosActionNone}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetLoadbalancerTypeToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LoadbalancerType.(type) {
	case nil:
		o.LoadbalancerType = nil

	case *ReplaceSpecType_Http:
		o.LoadbalancerType = &GlobalSpecType_Http{Http: of.Http}

	case *ReplaceSpecType_Https:
		o.LoadbalancerType = &GlobalSpecType_Https{Https: of.Https}

	case *ReplaceSpecType_HttpsAutoCert:
		o.LoadbalancerType = &GlobalSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetLoadbalancerTypeFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LoadbalancerType.(type) {
	case nil:
		r.LoadbalancerType = nil

	case *GlobalSpecType_Http:
		r.LoadbalancerType = &ReplaceSpecType_Http{Http: of.Http}

	case *GlobalSpecType_Https:
		r.LoadbalancerType = &ReplaceSpecType_Https{Https: of.Https}

	case *GlobalSpecType_HttpsAutoCert:
		r.LoadbalancerType = &ReplaceSpecType_HttpsAutoCert{HttpsAutoCert: of.HttpsAutoCert}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetMaliciousUserDetectionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.MaliciousUserDetectionChoice.(type) {
	case nil:
		o.MaliciousUserDetectionChoice = nil

	case *ReplaceSpecType_DisableMaliciousUserDetection:
		o.MaliciousUserDetectionChoice = &GlobalSpecType_DisableMaliciousUserDetection{DisableMaliciousUserDetection: of.DisableMaliciousUserDetection}

	case *ReplaceSpecType_EnableMaliciousUserDetection:
		o.MaliciousUserDetectionChoice = &GlobalSpecType_EnableMaliciousUserDetection{EnableMaliciousUserDetection: of.EnableMaliciousUserDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetMaliciousUserDetectionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.MaliciousUserDetectionChoice.(type) {
	case nil:
		r.MaliciousUserDetectionChoice = nil

	case *GlobalSpecType_DisableMaliciousUserDetection:
		r.MaliciousUserDetectionChoice = &ReplaceSpecType_DisableMaliciousUserDetection{DisableMaliciousUserDetection: of.DisableMaliciousUserDetection}

	case *GlobalSpecType_EnableMaliciousUserDetection:
		r.MaliciousUserDetectionChoice = &ReplaceSpecType_EnableMaliciousUserDetection{EnableMaliciousUserDetection: of.EnableMaliciousUserDetection}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetMlConfigChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.MlConfigChoice.(type) {
	case nil:
		o.MlConfigChoice = nil

	case *ReplaceSpecType_MultiLbApp:
		o.MlConfigChoice = &GlobalSpecType_MultiLbApp{MultiLbApp: of.MultiLbApp}

	case *ReplaceSpecType_SingleLbApp:
		o.MlConfigChoice = &GlobalSpecType_SingleLbApp{SingleLbApp: of.SingleLbApp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetMlConfigChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.MlConfigChoice.(type) {
	case nil:
		r.MlConfigChoice = nil

	case *GlobalSpecType_MultiLbApp:
		r.MlConfigChoice = &ReplaceSpecType_MultiLbApp{MultiLbApp: of.MultiLbApp}

	case *GlobalSpecType_SingleLbApp:
		r.MlConfigChoice = &ReplaceSpecType_SingleLbApp{SingleLbApp: of.SingleLbApp}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetOriginPoolChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.OriginPoolChoice.(type) {
	case nil:
		o.OriginPoolChoice = nil

	case *ReplaceSpecType_DefaultPool:
		o.OriginPoolChoice = &GlobalSpecType_DefaultPool{DefaultPool: of.DefaultPool}

	case *ReplaceSpecType_DefaultPoolList:
		o.OriginPoolChoice = &GlobalSpecType_DefaultPoolList{DefaultPoolList: of.DefaultPoolList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetOriginPoolChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.OriginPoolChoice.(type) {
	case nil:
		r.OriginPoolChoice = nil

	case *GlobalSpecType_DefaultPool:
		r.OriginPoolChoice = &ReplaceSpecType_DefaultPool{DefaultPool: of.DefaultPool}

	case *GlobalSpecType_DefaultPoolList:
		r.OriginPoolChoice = &ReplaceSpecType_DefaultPoolList{DefaultPoolList: of.DefaultPoolList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetRateLimitChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RateLimitChoice.(type) {
	case nil:
		o.RateLimitChoice = nil

	case *ReplaceSpecType_ApiRateLimit:
		o.RateLimitChoice = &GlobalSpecType_ApiRateLimit{ApiRateLimit: of.ApiRateLimit}

	case *ReplaceSpecType_DisableRateLimit:
		o.RateLimitChoice = &GlobalSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *ReplaceSpecType_RateLimit:
		o.RateLimitChoice = &GlobalSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetRateLimitChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RateLimitChoice.(type) {
	case nil:
		r.RateLimitChoice = nil

	case *GlobalSpecType_ApiRateLimit:
		r.RateLimitChoice = &ReplaceSpecType_ApiRateLimit{ApiRateLimit: of.ApiRateLimit}

	case *GlobalSpecType_DisableRateLimit:
		r.RateLimitChoice = &ReplaceSpecType_DisableRateLimit{DisableRateLimit: of.DisableRateLimit}

	case *GlobalSpecType_RateLimit:
		r.RateLimitChoice = &ReplaceSpecType_RateLimit{RateLimit: of.RateLimit}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetServicePolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ServicePolicyChoice.(type) {
	case nil:
		o.ServicePolicyChoice = nil

	case *ReplaceSpecType_ActiveServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *ReplaceSpecType_NoServicePolicies:
		o.ServicePolicyChoice = &GlobalSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *ReplaceSpecType_ServicePoliciesFromNamespace:
		o.ServicePolicyChoice = &GlobalSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetServicePolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ServicePolicyChoice.(type) {
	case nil:
		r.ServicePolicyChoice = nil

	case *GlobalSpecType_ActiveServicePolicies:
		r.ServicePolicyChoice = &ReplaceSpecType_ActiveServicePolicies{ActiveServicePolicies: of.ActiveServicePolicies}

	case *GlobalSpecType_NoServicePolicies:
		r.ServicePolicyChoice = &ReplaceSpecType_NoServicePolicies{NoServicePolicies: of.NoServicePolicies}

	case *GlobalSpecType_ServicePoliciesFromNamespace:
		r.ServicePolicyChoice = &ReplaceSpecType_ServicePoliciesFromNamespace{ServicePoliciesFromNamespace: of.ServicePoliciesFromNamespace}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetSlowDdosMitigationChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SlowDdosMitigationChoice.(type) {
	case nil:
		o.SlowDdosMitigationChoice = nil

	case *ReplaceSpecType_SlowDdosMitigation:
		o.SlowDdosMitigationChoice = &GlobalSpecType_SlowDdosMitigation{SlowDdosMitigation: of.SlowDdosMitigation}

	case *ReplaceSpecType_SystemDefaultTimeouts:
		o.SlowDdosMitigationChoice = &GlobalSpecType_SystemDefaultTimeouts{SystemDefaultTimeouts: of.SystemDefaultTimeouts}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetSlowDdosMitigationChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SlowDdosMitigationChoice.(type) {
	case nil:
		r.SlowDdosMitigationChoice = nil

	case *GlobalSpecType_SlowDdosMitigation:
		r.SlowDdosMitigationChoice = &ReplaceSpecType_SlowDdosMitigation{SlowDdosMitigation: of.SlowDdosMitigation}

	case *GlobalSpecType_SystemDefaultTimeouts:
		r.SlowDdosMitigationChoice = &ReplaceSpecType_SystemDefaultTimeouts{SystemDefaultTimeouts: of.SystemDefaultTimeouts}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetTrustClientIpHeadersChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.TrustClientIpHeadersChoice.(type) {
	case nil:
		o.TrustClientIpHeadersChoice = nil

	case *ReplaceSpecType_DisableTrustClientIpHeaders:
		o.TrustClientIpHeadersChoice = &GlobalSpecType_DisableTrustClientIpHeaders{DisableTrustClientIpHeaders: of.DisableTrustClientIpHeaders}

	case *ReplaceSpecType_EnableTrustClientIpHeaders:
		o.TrustClientIpHeadersChoice = &GlobalSpecType_EnableTrustClientIpHeaders{EnableTrustClientIpHeaders: of.EnableTrustClientIpHeaders}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetTrustClientIpHeadersChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.TrustClientIpHeadersChoice.(type) {
	case nil:
		r.TrustClientIpHeadersChoice = nil

	case *GlobalSpecType_DisableTrustClientIpHeaders:
		r.TrustClientIpHeadersChoice = &ReplaceSpecType_DisableTrustClientIpHeaders{DisableTrustClientIpHeaders: of.DisableTrustClientIpHeaders}

	case *GlobalSpecType_EnableTrustClientIpHeaders:
		r.TrustClientIpHeadersChoice = &ReplaceSpecType_EnableTrustClientIpHeaders{EnableTrustClientIpHeaders: of.EnableTrustClientIpHeaders}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetUserIdChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.UserIdChoice.(type) {
	case nil:
		o.UserIdChoice = nil

	case *ReplaceSpecType_UserIdClientIp:
		o.UserIdChoice = &GlobalSpecType_UserIdClientIp{UserIdClientIp: of.UserIdClientIp}

	case *ReplaceSpecType_UserIdentification:
		o.UserIdChoice = &GlobalSpecType_UserIdentification{UserIdentification: of.UserIdentification}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetUserIdChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.UserIdChoice.(type) {
	case nil:
		r.UserIdChoice = nil

	case *GlobalSpecType_UserIdClientIp:
		r.UserIdChoice = &ReplaceSpecType_UserIdClientIp{UserIdClientIp: of.UserIdClientIp}

	case *GlobalSpecType_UserIdentification:
		r.UserIdChoice = &ReplaceSpecType_UserIdentification{UserIdentification: of.UserIdentification}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetWafChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.WafChoice.(type) {
	case nil:
		o.WafChoice = nil

	case *ReplaceSpecType_AppFirewall:
		o.WafChoice = &GlobalSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *ReplaceSpecType_DisableWaf:
		o.WafChoice = &GlobalSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetWafChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.WafChoice.(type) {
	case nil:
		r.WafChoice = nil

	case *GlobalSpecType_AppFirewall:
		r.WafChoice = &ReplaceSpecType_AppFirewall{AppFirewall: of.AppFirewall}

	case *GlobalSpecType_DisableWaf:
		r.WafChoice = &ReplaceSpecType_DisableWaf{DisableWaf: of.DisableWaf}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.AddLocation = f.GetAddLocation()
	m.GetAdvertiseChoiceFromGlobalSpecType(f)
	m.GetApiDefinitionChoiceFromGlobalSpecType(f)
	m.GetApiDiscoveryChoiceFromGlobalSpecType(f)
	m.ApiProtectionRules = f.GetApiProtectionRules()
	m.BlockedClients = f.GetBlockedClients()
	m.GetBotDefenseChoiceFromGlobalSpecType(f)
	m.GetChallengeTypeFromGlobalSpecType(f)
	m.GetClientSideDefenseChoiceFromGlobalSpecType(f)
	m.CorsPolicy = f.GetCorsPolicy()
	m.CsrfPolicy = f.GetCsrfPolicy()
	m.DataGuardRules = f.GetDataGuardRules()
	m.GetDdosDetectionChoiceFromGlobalSpecType(f)
	m.DdosMitigationRules = f.GetDdosMitigationRules()
	m.DefaultRoutePools = f.GetDefaultRoutePools()
	m.Domains = f.GetDomains()
	m.GraphqlRules = f.GetGraphqlRules()
	m.GetHashPolicyChoiceFromGlobalSpecType(f)
	m.GetIpReputationChoiceFromGlobalSpecType(f)
	m.JwtValidation = f.GetJwtValidation()
	m.GetL7DdosAutoMitigationActionFromGlobalSpecType(f)
	m.GetLoadbalancerTypeFromGlobalSpecType(f)
	m.GetMaliciousUserDetectionChoiceFromGlobalSpecType(f)
	m.MaliciousUserMitigation = f.GetMaliciousUserMitigation()
	m.GetMlConfigChoiceFromGlobalSpecType(f)
	m.MoreOption = f.GetMoreOption()
	m.GetOriginPoolChoiceFromGlobalSpecType(f)
	m.OriginServerSubsetRuleList = f.GetOriginServerSubsetRuleList()
	m.ProtectedCookies = f.GetProtectedCookies()
	m.GetRateLimitChoiceFromGlobalSpecType(f)
	m.Routes = f.GetRoutes()
	m.GetServicePolicyChoiceFromGlobalSpecType(f)
	m.GetSlowDdosMitigationChoiceFromGlobalSpecType(f)
	m.GetTrustClientIpHeadersChoiceFromGlobalSpecType(f)
	m.TrustedClients = f.GetTrustedClients()
	m.GetUserIdChoiceFromGlobalSpecType(f)
	m.GetWafChoiceFromGlobalSpecType(f)
	m.WafExclusionRules = f.GetWafExclusionRules()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.AddLocation = m1.AddLocation
	m1.SetAdvertiseChoiceToGlobalSpecType(f)
	m1.SetApiDefinitionChoiceToGlobalSpecType(f)
	m1.SetApiDiscoveryChoiceToGlobalSpecType(f)
	f.ApiProtectionRules = m1.ApiProtectionRules
	f.BlockedClients = m1.BlockedClients
	m1.SetBotDefenseChoiceToGlobalSpecType(f)
	m1.SetChallengeTypeToGlobalSpecType(f)
	m1.SetClientSideDefenseChoiceToGlobalSpecType(f)
	f.CorsPolicy = m1.CorsPolicy
	f.CsrfPolicy = m1.CsrfPolicy
	f.DataGuardRules = m1.DataGuardRules
	m1.SetDdosDetectionChoiceToGlobalSpecType(f)
	f.DdosMitigationRules = m1.DdosMitigationRules
	f.DefaultRoutePools = m1.DefaultRoutePools
	f.Domains = m1.Domains
	f.GraphqlRules = m1.GraphqlRules
	m1.SetHashPolicyChoiceToGlobalSpecType(f)
	m1.SetIpReputationChoiceToGlobalSpecType(f)
	f.JwtValidation = m1.JwtValidation
	m1.SetL7DdosAutoMitigationActionToGlobalSpecType(f)
	m1.SetLoadbalancerTypeToGlobalSpecType(f)
	m1.SetMaliciousUserDetectionChoiceToGlobalSpecType(f)
	f.MaliciousUserMitigation = m1.MaliciousUserMitigation
	m1.SetMlConfigChoiceToGlobalSpecType(f)
	f.MoreOption = m1.MoreOption
	m1.SetOriginPoolChoiceToGlobalSpecType(f)
	f.OriginServerSubsetRuleList = m1.OriginServerSubsetRuleList
	f.ProtectedCookies = m1.ProtectedCookies
	m1.SetRateLimitChoiceToGlobalSpecType(f)
	f.Routes = m1.Routes
	m1.SetServicePolicyChoiceToGlobalSpecType(f)
	m1.SetSlowDdosMitigationChoiceToGlobalSpecType(f)
	m1.SetTrustClientIpHeadersChoiceToGlobalSpecType(f)
	f.TrustedClients = m1.TrustedClients
	m1.SetUserIdChoiceToGlobalSpecType(f)
	m1.SetWafChoiceToGlobalSpecType(f)
	f.WafExclusionRules = m1.WafExclusionRules
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

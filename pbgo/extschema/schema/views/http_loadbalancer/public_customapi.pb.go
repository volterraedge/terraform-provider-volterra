// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/http_loadbalancer/public_customapi.proto

// HTTP Load Balancer
//
// x-displayName: "Configure HTTP Load Balancer"
// HTTP Load Balancer view defines a required parameters that can be used in CRUD, to create and manage HTTP Load Balancer.
// It can be used to create HTTP Load Balancer and HTTPS Load Balancer.

package http_loadbalancer

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	dos_mitigation "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/dos_mitigation"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Get DNS info Request
//
// x-displayName: "Get DNS Info Request"
// Request message for get-dns-info API
type GetDnsInfoRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// Namespace for the HTTP load balancer
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "value"
	// Name of the HTTP load balancer
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetDnsInfoRequest) Reset()      { *m = GetDnsInfoRequest{} }
func (*GetDnsInfoRequest) ProtoMessage() {}
func (*GetDnsInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f78b47e1ecaa96, []int{0}
}
func (m *GetDnsInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDnsInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDnsInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDnsInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDnsInfoRequest.Merge(m, src)
}
func (m *GetDnsInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDnsInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDnsInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDnsInfoRequest proto.InternalMessageInfo

func (m *GetDnsInfoRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetDnsInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// GetDnsInfoResponse
//
// x-displayName: "Get DNS Info Response"
// Response for get-dns-info API
type GetDnsInfoResponse struct {
	// DNS information
	//
	// x-displayName: "DNS information"
	// DNS information object for this HTTP load balancer
	DnsInfo *virtual_host_dns_info.GlobalSpecType `protobuf:"bytes,1,opt,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`
}

func (m *GetDnsInfoResponse) Reset()      { *m = GetDnsInfoResponse{} }
func (*GetDnsInfoResponse) ProtoMessage() {}
func (*GetDnsInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f78b47e1ecaa96, []int{1}
}
func (m *GetDnsInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDnsInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDnsInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDnsInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDnsInfoResponse.Merge(m, src)
}
func (m *GetDnsInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDnsInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDnsInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDnsInfoResponse proto.InternalMessageInfo

func (m *GetDnsInfoResponse) GetDnsInfo() *virtual_host_dns_info.GlobalSpecType {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

// Get Security Config request
//
// x-displayName: "Get Security Config Request"
// Request of GET Security Config Spec API
type GetSecurityConfigReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the HTTP Load Balancer for current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Get loadbalancer
	//
	// x-displayName: "Load Balancer Choice"
	// Fetch Security Config of All Load Balancers or list of LBs
	//
	// Types that are valid to be assigned to LoadbalancerChoice:
	//	*GetSecurityConfigReq_AllHttpLoadbalancers
	//	*GetSecurityConfigReq_HttpLoadbalancersList
	LoadbalancerChoice isGetSecurityConfigReq_LoadbalancerChoice `protobuf_oneof:"loadbalancer_choice"`
}

func (m *GetSecurityConfigReq) Reset()      { *m = GetSecurityConfigReq{} }
func (*GetSecurityConfigReq) ProtoMessage() {}
func (*GetSecurityConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f78b47e1ecaa96, []int{2}
}
func (m *GetSecurityConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSecurityConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSecurityConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSecurityConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSecurityConfigReq.Merge(m, src)
}
func (m *GetSecurityConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSecurityConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSecurityConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSecurityConfigReq proto.InternalMessageInfo

type isGetSecurityConfigReq_LoadbalancerChoice interface {
	isGetSecurityConfigReq_LoadbalancerChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSecurityConfigReq_AllHttpLoadbalancers struct {
	AllHttpLoadbalancers *schema.Empty `protobuf:"bytes,3,opt,name=all_http_loadbalancers,json=allHttpLoadbalancers,proto3,oneof" json:"all_http_loadbalancers,omitempty"`
}
type GetSecurityConfigReq_HttpLoadbalancersList struct {
	HttpLoadbalancersList *HTTPLoadBalancerList `protobuf:"bytes,4,opt,name=http_loadbalancers_list,json=httpLoadbalancersList,proto3,oneof" json:"http_loadbalancers_list,omitempty"`
}

func (*GetSecurityConfigReq_AllHttpLoadbalancers) isGetSecurityConfigReq_LoadbalancerChoice()  {}
func (*GetSecurityConfigReq_HttpLoadbalancersList) isGetSecurityConfigReq_LoadbalancerChoice() {}

func (m *GetSecurityConfigReq) GetLoadbalancerChoice() isGetSecurityConfigReq_LoadbalancerChoice {
	if m != nil {
		return m.LoadbalancerChoice
	}
	return nil
}

func (m *GetSecurityConfigReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetSecurityConfigReq) GetAllHttpLoadbalancers() *schema.Empty {
	if x, ok := m.GetLoadbalancerChoice().(*GetSecurityConfigReq_AllHttpLoadbalancers); ok {
		return x.AllHttpLoadbalancers
	}
	return nil
}

func (m *GetSecurityConfigReq) GetHttpLoadbalancersList() *HTTPLoadBalancerList {
	if x, ok := m.GetLoadbalancerChoice().(*GetSecurityConfigReq_HttpLoadbalancersList); ok {
		return x.HttpLoadbalancersList
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSecurityConfigReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSecurityConfigReq_AllHttpLoadbalancers)(nil),
		(*GetSecurityConfigReq_HttpLoadbalancersList)(nil),
	}
}

// Get Security Config Response
//
// x-displayName: "Get Security Config Response"
type GetSecurityConfigRsp struct {
	// App Firewall Configured
	//
	// x-displayName: "App Firewall Configured"
	AppFirewall []string `protobuf:"bytes,1,rep,name=app_firewall,json=appFirewall,proto3" json:"app_firewall,omitempty"`
	// Bot Defense Configured
	//
	// x-displayName: "Bot Defense Configured"
	BotDefense []string `protobuf:"bytes,2,rep,name=bot_defense,json=botDefense,proto3" json:"bot_defense,omitempty"`
	// DDOS Detection Configured
	//
	// x-displayName: "DDOS Detection Configured"
	DdosDetection []string `protobuf:"bytes,3,rep,name=ddos_detection,json=ddosDetection,proto3" json:"ddos_detection,omitempty"`
	// API Protection Configured
	//
	// x-displayName: "API Protection Configured"
	ApiProtection []string `protobuf:"bytes,4,rep,name=api_protection,json=apiProtection,proto3" json:"api_protection,omitempty"`
	// Protected LoadBalancers Configured
	//
	// x-displayName: "List of Load Balancers Secured"
	Protected []string `protobuf:"bytes,5,rep,name=protected,proto3" json:"protected,omitempty"`
	// App Firewall Configured Per Route
	//
	// x-displayName: "List of Load Balancers Where App Firewall is Configured Per Route"
	AppFirewallPerRoute []string `protobuf:"bytes,6,rep,name=app_firewall_per_route,json=appFirewallPerRoute,proto3" json:"app_firewall_per_route,omitempty"`
}

func (m *GetSecurityConfigRsp) Reset()      { *m = GetSecurityConfigRsp{} }
func (*GetSecurityConfigRsp) ProtoMessage() {}
func (*GetSecurityConfigRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f78b47e1ecaa96, []int{3}
}
func (m *GetSecurityConfigRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSecurityConfigRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSecurityConfigRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSecurityConfigRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSecurityConfigRsp.Merge(m, src)
}
func (m *GetSecurityConfigRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetSecurityConfigRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSecurityConfigRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSecurityConfigRsp proto.InternalMessageInfo

func (m *GetSecurityConfigRsp) GetAppFirewall() []string {
	if m != nil {
		return m.AppFirewall
	}
	return nil
}

func (m *GetSecurityConfigRsp) GetBotDefense() []string {
	if m != nil {
		return m.BotDefense
	}
	return nil
}

func (m *GetSecurityConfigRsp) GetDdosDetection() []string {
	if m != nil {
		return m.DdosDetection
	}
	return nil
}

func (m *GetSecurityConfigRsp) GetApiProtection() []string {
	if m != nil {
		return m.ApiProtection
	}
	return nil
}

func (m *GetSecurityConfigRsp) GetProtected() []string {
	if m != nil {
		return m.Protected
	}
	return nil
}

func (m *GetSecurityConfigRsp) GetAppFirewallPerRoute() []string {
	if m != nil {
		return m.AppFirewallPerRoute
	}
	return nil
}

// List of http load balancers
//
// x-displayName: "List of HTTP Load Balancers"
type HTTPLoadBalancerList struct {
	// HTTP LoadBalancer
	//
	// x-displayName: "HTTP LoadBalancer"
	// x-example: "[blogging-app]"
	// x-required
	HttpLoadbalancer []string `protobuf:"bytes,1,rep,name=http_loadbalancer,json=httpLoadbalancer,proto3" json:"http_loadbalancer,omitempty"`
}

func (m *HTTPLoadBalancerList) Reset()      { *m = HTTPLoadBalancerList{} }
func (*HTTPLoadBalancerList) ProtoMessage() {}
func (*HTTPLoadBalancerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f78b47e1ecaa96, []int{4}
}
func (m *HTTPLoadBalancerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPLoadBalancerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HTTPLoadBalancerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HTTPLoadBalancerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPLoadBalancerList.Merge(m, src)
}
func (m *HTTPLoadBalancerList) XXX_Size() int {
	return m.Size()
}
func (m *HTTPLoadBalancerList) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPLoadBalancerList.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPLoadBalancerList proto.InternalMessageInfo

func (m *HTTPLoadBalancerList) GetHttpLoadbalancer() []string {
	if m != nil {
		return m.HttpLoadbalancer
	}
	return nil
}

// Get DoS Auto-Mitigation Rules request
//
// x-displayName: "Get DoS Auto-Mitigation Rules Request"
// Request of GET DoS Auto-Mitigation Rules API
type GetDoSAutoMitigationRulesReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the HTTP Load Balancer
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "blogging-app"
	// Name of the HTTP Load Balancer
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetDoSAutoMitigationRulesReq) Reset()      { *m = GetDoSAutoMitigationRulesReq{} }
func (*GetDoSAutoMitigationRulesReq) ProtoMessage() {}
func (*GetDoSAutoMitigationRulesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f78b47e1ecaa96, []int{5}
}
func (m *GetDoSAutoMitigationRulesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDoSAutoMitigationRulesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDoSAutoMitigationRulesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDoSAutoMitigationRulesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDoSAutoMitigationRulesReq.Merge(m, src)
}
func (m *GetDoSAutoMitigationRulesReq) XXX_Size() int {
	return m.Size()
}
func (m *GetDoSAutoMitigationRulesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDoSAutoMitigationRulesReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDoSAutoMitigationRulesReq proto.InternalMessageInfo

func (m *GetDoSAutoMitigationRulesReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetDoSAutoMitigationRulesReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Get DoS Auto-Mitigation Rules response
//
// x-displayName: "Get DDoS Auto-Mitigation Rules Response"
// Response of GET DDoS Auto-Mitigation Rules API
type GetDoSAutoMitigationRulesRsp struct {
	// DoS Auto-Mitigation Rules
	//
	// x-displayName: "DoS Auto-Mitigation Rules"
	DosAutomitigationRules []*dos_mitigation.DoSMitigationRuleInfo `protobuf:"bytes,2,rep,name=dos_automitigation_rules,json=dosAutomitigationRules,proto3" json:"dos_automitigation_rules,omitempty"`
}

func (m *GetDoSAutoMitigationRulesRsp) Reset()      { *m = GetDoSAutoMitigationRulesRsp{} }
func (*GetDoSAutoMitigationRulesRsp) ProtoMessage() {}
func (*GetDoSAutoMitigationRulesRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f78b47e1ecaa96, []int{6}
}
func (m *GetDoSAutoMitigationRulesRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDoSAutoMitigationRulesRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDoSAutoMitigationRulesRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDoSAutoMitigationRulesRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDoSAutoMitigationRulesRsp.Merge(m, src)
}
func (m *GetDoSAutoMitigationRulesRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetDoSAutoMitigationRulesRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDoSAutoMitigationRulesRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetDoSAutoMitigationRulesRsp proto.InternalMessageInfo

func (m *GetDoSAutoMitigationRulesRsp) GetDosAutomitigationRules() []*dos_mitigation.DoSMitigationRuleInfo {
	if m != nil {
		return m.DosAutomitigationRules
	}
	return nil
}

// Delete DoS Auto-Mitigation Rule request
//
// x-displayName: "Delete DoS Auto-Mitigation Rule request"
// Request of Delete DoS Auto-Mitigation Rule API
type DeleteDoSAutoMitigationRuleReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the HTTP Load Balancer
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "blogging-app"
	// Name of the HTTP Load Balancer
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DoS Mitigation Rule Name
	//
	// x-displayName: "DoS Mitigation Rule Name"
	// x-example: "dos-auto-mitigation-ves-io-http-loadbalancer-ce22"
	// Name of the DoS Mitigation Rule
	DosAutomitigationRuleName string `protobuf:"bytes,3,opt,name=dos_automitigation_rule_name,json=dosAutomitigationRuleName,proto3" json:"dos_automitigation_rule_name,omitempty"`
}

func (m *DeleteDoSAutoMitigationRuleReq) Reset()      { *m = DeleteDoSAutoMitigationRuleReq{} }
func (*DeleteDoSAutoMitigationRuleReq) ProtoMessage() {}
func (*DeleteDoSAutoMitigationRuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f78b47e1ecaa96, []int{7}
}
func (m *DeleteDoSAutoMitigationRuleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteDoSAutoMitigationRuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteDoSAutoMitigationRuleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteDoSAutoMitigationRuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDoSAutoMitigationRuleReq.Merge(m, src)
}
func (m *DeleteDoSAutoMitigationRuleReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteDoSAutoMitigationRuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDoSAutoMitigationRuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDoSAutoMitigationRuleReq proto.InternalMessageInfo

func (m *DeleteDoSAutoMitigationRuleReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteDoSAutoMitigationRuleReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteDoSAutoMitigationRuleReq) GetDosAutomitigationRuleName() string {
	if m != nil {
		return m.DosAutomitigationRuleName
	}
	return ""
}

// Delete DoS Auto-Mitigation Rule response
//
// x-displayName: "Delete DoS Auto-Mitigation Rule response"
// Response of Delete DoS Auto-Mitigation Rule API
type DeleteDoSAutoMitigationRuleRsp struct {
	// DoS Auto-Mitigation Rule Name
	//
	// x-displayName: "DoS Auto-Mitigation Rule Name"
	// x-example: "dos-auto-mitigation-ves-io-http-loadbalancer-ce22"
	// Name of the deleted DoS Auto-Mitigation HTTP Rule
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteDoSAutoMitigationRuleRsp) Reset()      { *m = DeleteDoSAutoMitigationRuleRsp{} }
func (*DeleteDoSAutoMitigationRuleRsp) ProtoMessage() {}
func (*DeleteDoSAutoMitigationRuleRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f78b47e1ecaa96, []int{8}
}
func (m *DeleteDoSAutoMitigationRuleRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteDoSAutoMitigationRuleRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteDoSAutoMitigationRuleRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteDoSAutoMitigationRuleRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDoSAutoMitigationRuleRsp.Merge(m, src)
}
func (m *DeleteDoSAutoMitigationRuleRsp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteDoSAutoMitigationRuleRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDoSAutoMitigationRuleRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDoSAutoMitigationRuleRsp proto.InternalMessageInfo

func (m *DeleteDoSAutoMitigationRuleRsp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// List Available API Definitions Request
//
// x-displayName: "List Available API Definitions Request"
// Request form for List Available API Definitions
type ListAvailableAPIDefinitionsReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the HTTP Load Balancer
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "blogging-app"
	// Name of the HTTP Load Balancer
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ListAvailableAPIDefinitionsReq) Reset()      { *m = ListAvailableAPIDefinitionsReq{} }
func (*ListAvailableAPIDefinitionsReq) ProtoMessage() {}
func (*ListAvailableAPIDefinitionsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f78b47e1ecaa96, []int{9}
}
func (m *ListAvailableAPIDefinitionsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAvailableAPIDefinitionsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAvailableAPIDefinitionsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAvailableAPIDefinitionsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAvailableAPIDefinitionsReq.Merge(m, src)
}
func (m *ListAvailableAPIDefinitionsReq) XXX_Size() int {
	return m.Size()
}
func (m *ListAvailableAPIDefinitionsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAvailableAPIDefinitionsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListAvailableAPIDefinitionsReq proto.InternalMessageInfo

func (m *ListAvailableAPIDefinitionsReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListAvailableAPIDefinitionsReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListAvailableAPIDefinitionsResp struct {
	// Available API Definitions
	//
	// x-displayName: "Available API Definitions"
	// The list of references to available API Definition objects.
	AvailableApiDefinitions []*views.ObjectRefType `protobuf:"bytes,1,rep,name=available_api_definitions,json=availableApiDefinitions,proto3" json:"available_api_definitions,omitempty"`
}

func (m *ListAvailableAPIDefinitionsResp) Reset()      { *m = ListAvailableAPIDefinitionsResp{} }
func (*ListAvailableAPIDefinitionsResp) ProtoMessage() {}
func (*ListAvailableAPIDefinitionsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f78b47e1ecaa96, []int{10}
}
func (m *ListAvailableAPIDefinitionsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAvailableAPIDefinitionsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAvailableAPIDefinitionsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAvailableAPIDefinitionsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAvailableAPIDefinitionsResp.Merge(m, src)
}
func (m *ListAvailableAPIDefinitionsResp) XXX_Size() int {
	return m.Size()
}
func (m *ListAvailableAPIDefinitionsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAvailableAPIDefinitionsResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListAvailableAPIDefinitionsResp proto.InternalMessageInfo

func (m *ListAvailableAPIDefinitionsResp) GetAvailableApiDefinitions() []*views.ObjectRefType {
	if m != nil {
		return m.AvailableApiDefinitions
	}
	return nil
}

// Assign API Definition Request
//
// x-displayName: "Assign API Definition Request"
// Request form for Assign API Definition
type AssignAPIDefinitionReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the HTTP Load Balancer
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "blogging-app"
	// Name of the HTTP Load Balancer
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// API Definition
	//
	// x-displayName: "API Definition"
	// x-required
	// A reference to API Definition object.
	// The referenced object may not exists.
	ApiDefinition *views.ObjectRefType `protobuf:"bytes,3,opt,name=api_definition,json=apiDefinition,proto3" json:"api_definition,omitempty"`
	// Create if not exists
	//
	// x-displayName: "Create if not exists"
	// Create an empty API Definition object, if not exists
	CreateIfNotExists bool `protobuf:"varint,4,opt,name=create_if_not_exists,json=createIfNotExists,proto3" json:"create_if_not_exists,omitempty"`
}

func (m *AssignAPIDefinitionReq) Reset()      { *m = AssignAPIDefinitionReq{} }
func (*AssignAPIDefinitionReq) ProtoMessage() {}
func (*AssignAPIDefinitionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f78b47e1ecaa96, []int{11}
}
func (m *AssignAPIDefinitionReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignAPIDefinitionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignAPIDefinitionReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignAPIDefinitionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignAPIDefinitionReq.Merge(m, src)
}
func (m *AssignAPIDefinitionReq) XXX_Size() int {
	return m.Size()
}
func (m *AssignAPIDefinitionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignAPIDefinitionReq.DiscardUnknown(m)
}

var xxx_messageInfo_AssignAPIDefinitionReq proto.InternalMessageInfo

func (m *AssignAPIDefinitionReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *AssignAPIDefinitionReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AssignAPIDefinitionReq) GetApiDefinition() *views.ObjectRefType {
	if m != nil {
		return m.ApiDefinition
	}
	return nil
}

func (m *AssignAPIDefinitionReq) GetCreateIfNotExists() bool {
	if m != nil {
		return m.CreateIfNotExists
	}
	return false
}

// Assign API Definition Response
//
// x-displayName: "Assign API Definition Response"
// Response form for Assign API Definition
type AssignAPIDefinitionResp struct {
}

func (m *AssignAPIDefinitionResp) Reset()      { *m = AssignAPIDefinitionResp{} }
func (*AssignAPIDefinitionResp) ProtoMessage() {}
func (*AssignAPIDefinitionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f78b47e1ecaa96, []int{12}
}
func (m *AssignAPIDefinitionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignAPIDefinitionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignAPIDefinitionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignAPIDefinitionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignAPIDefinitionResp.Merge(m, src)
}
func (m *AssignAPIDefinitionResp) XXX_Size() int {
	return m.Size()
}
func (m *AssignAPIDefinitionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignAPIDefinitionResp.DiscardUnknown(m)
}

var xxx_messageInfo_AssignAPIDefinitionResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetDnsInfoRequest)(nil), "ves.io.schema.views.http_loadbalancer.GetDnsInfoRequest")
	golang_proto.RegisterType((*GetDnsInfoRequest)(nil), "ves.io.schema.views.http_loadbalancer.GetDnsInfoRequest")
	proto.RegisterType((*GetDnsInfoResponse)(nil), "ves.io.schema.views.http_loadbalancer.GetDnsInfoResponse")
	golang_proto.RegisterType((*GetDnsInfoResponse)(nil), "ves.io.schema.views.http_loadbalancer.GetDnsInfoResponse")
	proto.RegisterType((*GetSecurityConfigReq)(nil), "ves.io.schema.views.http_loadbalancer.GetSecurityConfigReq")
	golang_proto.RegisterType((*GetSecurityConfigReq)(nil), "ves.io.schema.views.http_loadbalancer.GetSecurityConfigReq")
	proto.RegisterType((*GetSecurityConfigRsp)(nil), "ves.io.schema.views.http_loadbalancer.GetSecurityConfigRsp")
	golang_proto.RegisterType((*GetSecurityConfigRsp)(nil), "ves.io.schema.views.http_loadbalancer.GetSecurityConfigRsp")
	proto.RegisterType((*HTTPLoadBalancerList)(nil), "ves.io.schema.views.http_loadbalancer.HTTPLoadBalancerList")
	golang_proto.RegisterType((*HTTPLoadBalancerList)(nil), "ves.io.schema.views.http_loadbalancer.HTTPLoadBalancerList")
	proto.RegisterType((*GetDoSAutoMitigationRulesReq)(nil), "ves.io.schema.views.http_loadbalancer.GetDoSAutoMitigationRulesReq")
	golang_proto.RegisterType((*GetDoSAutoMitigationRulesReq)(nil), "ves.io.schema.views.http_loadbalancer.GetDoSAutoMitigationRulesReq")
	proto.RegisterType((*GetDoSAutoMitigationRulesRsp)(nil), "ves.io.schema.views.http_loadbalancer.GetDoSAutoMitigationRulesRsp")
	golang_proto.RegisterType((*GetDoSAutoMitigationRulesRsp)(nil), "ves.io.schema.views.http_loadbalancer.GetDoSAutoMitigationRulesRsp")
	proto.RegisterType((*DeleteDoSAutoMitigationRuleReq)(nil), "ves.io.schema.views.http_loadbalancer.DeleteDoSAutoMitigationRuleReq")
	golang_proto.RegisterType((*DeleteDoSAutoMitigationRuleReq)(nil), "ves.io.schema.views.http_loadbalancer.DeleteDoSAutoMitigationRuleReq")
	proto.RegisterType((*DeleteDoSAutoMitigationRuleRsp)(nil), "ves.io.schema.views.http_loadbalancer.DeleteDoSAutoMitigationRuleRsp")
	golang_proto.RegisterType((*DeleteDoSAutoMitigationRuleRsp)(nil), "ves.io.schema.views.http_loadbalancer.DeleteDoSAutoMitigationRuleRsp")
	proto.RegisterType((*ListAvailableAPIDefinitionsReq)(nil), "ves.io.schema.views.http_loadbalancer.ListAvailableAPIDefinitionsReq")
	golang_proto.RegisterType((*ListAvailableAPIDefinitionsReq)(nil), "ves.io.schema.views.http_loadbalancer.ListAvailableAPIDefinitionsReq")
	proto.RegisterType((*ListAvailableAPIDefinitionsResp)(nil), "ves.io.schema.views.http_loadbalancer.ListAvailableAPIDefinitionsResp")
	golang_proto.RegisterType((*ListAvailableAPIDefinitionsResp)(nil), "ves.io.schema.views.http_loadbalancer.ListAvailableAPIDefinitionsResp")
	proto.RegisterType((*AssignAPIDefinitionReq)(nil), "ves.io.schema.views.http_loadbalancer.AssignAPIDefinitionReq")
	golang_proto.RegisterType((*AssignAPIDefinitionReq)(nil), "ves.io.schema.views.http_loadbalancer.AssignAPIDefinitionReq")
	proto.RegisterType((*AssignAPIDefinitionResp)(nil), "ves.io.schema.views.http_loadbalancer.AssignAPIDefinitionResp")
	golang_proto.RegisterType((*AssignAPIDefinitionResp)(nil), "ves.io.schema.views.http_loadbalancer.AssignAPIDefinitionResp")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/http_loadbalancer/public_customapi.proto", fileDescriptor_e0f78b47e1ecaa96)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/http_loadbalancer/public_customapi.proto", fileDescriptor_e0f78b47e1ecaa96)
}

var fileDescriptor_e0f78b47e1ecaa96 = []byte{
	// 1402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x6f, 0x1c, 0x35,
	0x14, 0x5f, 0xcf, 0x26, 0x6d, 0xe2, 0x40, 0x95, 0xb8, 0x21, 0xdd, 0x6c, 0xa3, 0x49, 0x18, 0xa9,
	0x52, 0x55, 0x75, 0x77, 0xa0, 0x05, 0x09, 0x5a, 0x3e, 0x94, 0x34, 0x69, 0x92, 0x2a, 0x6d, 0xc3,
	0x24, 0xe2, 0x50, 0x10, 0x23, 0xef, 0x8c, 0x77, 0x63, 0x98, 0x1d, 0xbb, 0x63, 0xef, 0x26, 0x51,
	0x15, 0xa9, 0xea, 0x5f, 0x80, 0x5a, 0xb8, 0x22, 0x6e, 0x20, 0x90, 0x7a, 0xe2, 0x50, 0x51, 0x0e,
	0xbd, 0x51, 0x09, 0x84, 0x22, 0x90, 0x50, 0xb9, 0xd1, 0x0d, 0x07, 0x10, 0x97, 0x9e, 0xe1, 0x82,
	0xec, 0xfd, 0xfe, 0xc8, 0x76, 0xd9, 0xe6, 0x66, 0xfb, 0x7d, 0xf8, 0xe7, 0xdf, 0x7b, 0x7e, 0xcf,
	0x33, 0xf0, 0x8d, 0x22, 0x11, 0x69, 0xca, 0x6c, 0xe1, 0x6d, 0x90, 0x3c, 0xb6, 0x8b, 0x94, 0x6c,
	0x0a, 0x7b, 0x43, 0x4a, 0xee, 0x06, 0x0c, 0xfb, 0x19, 0x1c, 0xe0, 0xd0, 0x23, 0x91, 0xcd, 0x0b,
	0x99, 0x80, 0x7a, 0xae, 0x57, 0x10, 0x92, 0xe5, 0x31, 0xa7, 0x69, 0x1e, 0x31, 0xc9, 0xd0, 0x89,
	0xb2, 0x75, 0xba, 0x6c, 0x9d, 0xd6, 0xd6, 0xe9, 0x36, 0xeb, 0x64, 0x2a, 0x47, 0xe5, 0x46, 0x21,
	0x93, 0xf6, 0x58, 0xde, 0xce, 0xb1, 0x1c, 0xb3, 0xb5, 0x75, 0xa6, 0x90, 0xd5, 0x33, 0x3d, 0xd1,
	0xa3, 0xb2, 0xd7, 0xe4, 0x54, 0x8e, 0xb1, 0x5c, 0x40, 0x6c, 0xcc, 0xa9, 0x8d, 0xc3, 0x90, 0x49,
	0x2c, 0x29, 0x0b, 0x45, 0x45, 0x7a, 0xb2, 0x19, 0xb1, 0xcf, 0x84, 0x9b, 0xa7, 0x92, 0xe6, 0xb4,
	0x92, 0x2d, 0xb7, 0x39, 0xa9, 0x6a, 0x1e, 0x6f, 0xd6, 0x64, 0xbc, 0xd1, 0xcd, 0x64, 0xb3, 0xb0,
	0xd1, 0x6e, 0xaa, 0x85, 0x13, 0x1c, 0x50, 0x1f, 0x4b, 0x52, 0x91, 0x5a, 0x2d, 0x52, 0x22, 0x48,
	0x58, 0x6c, 0x71, 0x3e, 0xd3, 0xce, 0xaa, 0xdb, 0xac, 0x31, 0xdd, 0x89, 0xf7, 0x46, 0x10, 0x2f,
	0xb5, 0x2a, 0x44, 0xb2, 0x80, 0x03, 0x77, 0x83, 0x09, 0xe9, 0xfa, 0xa1, 0x70, 0x69, 0x98, 0x65,
	0x36, 0xcb, 0x7c, 0x48, 0x3c, 0x59, 0xb6, 0xb0, 0x16, 0xe0, 0xd8, 0x22, 0x91, 0xf3, 0xa1, 0x58,
	0x0e, 0xb3, 0xcc, 0x21, 0xd7, 0x0b, 0x44, 0x48, 0x34, 0x05, 0x87, 0x43, 0x9c, 0x27, 0x82, 0x63,
	0x8f, 0x24, 0xc0, 0x0c, 0x38, 0x39, 0xec, 0xd4, 0x17, 0x10, 0x82, 0x03, 0x6a, 0x92, 0x30, 0xb4,
	0x40, 0x8f, 0x2d, 0x1f, 0xa2, 0x46, 0x37, 0x82, 0xb3, 0x50, 0x10, 0x74, 0x05, 0x0e, 0x55, 0x77,
	0xd5, 0x6e, 0x46, 0xce, 0x9c, 0x4d, 0xb7, 0x06, 0xbf, 0x03, 0xc2, 0xf4, 0x62, 0xc0, 0x32, 0x38,
	0x58, 0xe3, 0xc4, 0x5b, 0xdf, 0xe6, 0xc4, 0x39, 0xec, 0x97, 0xfd, 0x5a, 0x9f, 0x1b, 0x70, 0x7c,
	0x91, 0xc8, 0x35, 0xe2, 0x15, 0x22, 0x2a, 0xb7, 0x2f, 0xb0, 0x30, 0x4b, 0x73, 0x0e, 0xb9, 0xfe,
	0x14, 0xc0, 0x2b, 0x70, 0x02, 0x07, 0x81, 0xdb, 0x96, 0x62, 0x22, 0x11, 0xd7, 0xa0, 0xc6, 0x5b,
	0x40, 0x2d, 0xe4, 0xb9, 0xdc, 0x5e, 0x8a, 0x39, 0xe3, 0x38, 0x08, 0x96, 0xa4, 0xe4, 0x2b, 0x8d,
	0x36, 0xa8, 0x00, 0x8f, 0xb5, 0x7b, 0x72, 0x03, 0x2a, 0x64, 0x62, 0x40, 0xbb, 0x3b, 0x9f, 0xee,
	0x29, 0xc1, 0xd3, 0x4b, 0xeb, 0xeb, 0xab, 0xca, 0xf5, 0x5c, 0x65, 0x61, 0x85, 0x0a, 0xb9, 0x14,
	0x73, 0x5e, 0xd8, 0x68, 0xdd, 0x52, 0x09, 0xe6, 0xa6, 0xe1, 0xd1, 0x46, 0x6b, 0xd7, 0xdb, 0x60,
	0xd4, 0x23, 0x68, 0xe8, 0xc1, 0x7d, 0x10, 0xdf, 0xbd, 0x0f, 0x8c, 0x4b, 0x03, 0x43, 0xc6, 0x68,
	0xdc, 0xfa, 0x17, 0x74, 0xa2, 0x48, 0x70, 0xf4, 0x22, 0x7c, 0x0e, 0x73, 0xee, 0x66, 0x69, 0x44,
	0x36, 0x71, 0x10, 0x24, 0xc0, 0x4c, 0xfc, 0xe4, 0xb0, 0x33, 0x82, 0x39, 0xbf, 0x58, 0x59, 0x42,
	0xd3, 0x70, 0x24, 0xc3, 0xa4, 0xeb, 0x93, 0x2c, 0x09, 0x85, 0x8a, 0xaf, 0xd2, 0x80, 0x19, 0x26,
	0xe7, 0xcb, 0x2b, 0xe8, 0x04, 0x3c, 0xe2, 0xab, 0xab, 0xe3, 0x13, 0x49, 0x3c, 0x95, 0x98, 0x89,
	0xb8, 0xd6, 0x79, 0x5e, 0xad, 0xce, 0x57, 0x17, 0x95, 0x1a, 0xe6, 0xd4, 0x55, 0x09, 0x56, 0x51,
	0x1b, 0x28, 0xab, 0x61, 0x4e, 0x57, 0x6b, 0x8b, 0x2a, 0x68, 0x15, 0x15, 0xe2, 0x27, 0x06, 0xb5,
	0x46, 0x7d, 0x01, 0x9d, 0x85, 0x13, 0x8d, 0x78, 0x5d, 0x4e, 0x22, 0x37, 0x62, 0x05, 0x49, 0x12,
	0x87, 0xb4, 0xea, 0xd1, 0x06, 0xe4, 0xab, 0x24, 0x72, 0x94, 0xc8, 0x2a, 0xc2, 0xf1, 0x4e, 0xac,
	0xa2, 0x0f, 0xe0, 0x58, 0x1b, 0xff, 0x65, 0x06, 0xe6, 0x5e, 0xfe, 0xf6, 0xaf, 0x07, 0x71, 0x78,
	0x1b, 0x1c, 0xb6, 0x06, 0xa3, 0x78, 0xe2, 0xa6, 0xa1, 0xa6, 0xc3, 0xb7, 0xc1, 0x21, 0x6b, 0x20,
	0x32, 0x46, 0x81, 0x9a, 0x0d, 0xde, 0x06, 0xc6, 0xe8, 0x60, 0x75, 0x34, 0x04, 0x9c, 0xd1, 0xd6,
	0x08, 0x59, 0xab, 0x70, 0x4a, 0xa5, 0x3f, 0x5b, 0x9b, 0x2d, 0x48, 0x76, 0xb9, 0x56, 0x58, 0x9c,
	0x42, 0x40, 0xc4, 0xd3, 0xf3, 0xb3, 0xd3, 0x85, 0xba, 0x03, 0xba, 0xb9, 0x14, 0x1c, 0xe5, 0x61,
	0x42, 0x85, 0x02, 0x17, 0x24, 0xab, 0x57, 0x32, 0x37, 0x52, 0x62, 0x1d, 0xb9, 0xf6, 0xbb, 0xd6,
	0x5c, 0xf4, 0xd2, 0xf3, 0x6c, 0xad, 0xd9, 0xad, 0xbe, 0xba, 0x13, 0x3e, 0x13, 0xb3, 0x4d, 0x3e,
	0xf5, 0x8e, 0x97, 0x06, 0x86, 0xc0, 0xa8, 0xa1, 0x50, 0x99, 0xf3, 0x24, 0x20, 0x92, 0x74, 0x04,
	0xd6, 0xd7, 0x51, 0xd1, 0xdb, 0x70, 0x6a, 0x9f, 0x93, 0xb8, 0x5a, 0x37, 0xae, 0x75, 0x27, 0x3b,
	0x02, 0xbb, 0xa2, 0xb8, 0x7a, 0xa5, 0x3b, 0x28, 0xc1, 0x3b, 0x32, 0xec, 0x40, 0x53, 0xe5, 0xc6,
	0x6c, 0x11, 0xd3, 0x00, 0x67, 0x02, 0x32, 0xbb, 0xba, 0x3c, 0x4f, 0xb2, 0x34, 0xa4, 0xba, 0xe2,
	0xf6, 0x17, 0xb5, 0x4f, 0x00, 0x9c, 0xee, 0xea, 0x54, 0x70, 0x74, 0x1d, 0x4e, 0xe2, 0xaa, 0xd8,
	0x55, 0xf7, 0xc4, 0xaf, 0x2b, 0xe8, 0x9c, 0x1c, 0x39, 0x63, 0x75, 0xac, 0x20, 0x57, 0x75, 0xdd,
	0x76, 0x48, 0x56, 0x15, 0xc5, 0xb9, 0xb1, 0xaf, 0x76, 0x8e, 0x34, 0x5b, 0x3b, 0xc7, 0x6a, 0x7e,
	0x67, 0x39, 0x6d, 0xd8, 0xd6, 0xfa, 0x0d, 0xc0, 0x89, 0x59, 0x21, 0x68, 0x2e, 0x6c, 0xc2, 0xd3,
	0x5f, 0xb8, 0xde, 0x87, 0x2d, 0xfb, 0x56, 0xaa, 0x68, 0x9f, 0xa0, 0x55, 0x51, 0xa8, 0x43, 0x42,
	0x36, 0x1c, 0xf7, 0x22, 0x82, 0x25, 0x71, 0x69, 0xd6, 0x0d, 0x99, 0x74, 0xc9, 0x16, 0x15, 0x52,
	0xe8, 0xd2, 0x3a, 0xe4, 0x8c, 0x95, 0x65, 0xcb, 0xd9, 0x2b, 0x4c, 0x2e, 0x68, 0x81, 0x35, 0x09,
	0x8f, 0x75, 0x3c, 0x9a, 0xe0, 0x67, 0xee, 0x8d, 0xc2, 0xe1, 0x0b, 0xfa, 0xf1, 0x31, 0xbb, 0xba,
	0x8c, 0xbe, 0x36, 0x20, 0xac, 0xf7, 0x28, 0xf4, 0x5a, 0x8f, 0x55, 0xba, 0xad, 0x3b, 0x26, 0x5f,
	0xef, 0xc3, 0xb2, 0xdc, 0x10, 0xad, 0x2f, 0xc0, 0xc3, 0x7b, 0x06, 0x28, 0x7d, 0x9f, 0x70, 0xb2,
	0xaf, 0x6e, 0x79, 0x29, 0xa1, 0xaa, 0x34, 0xc9, 0x13, 0xb1, 0x91, 0xca, 0x60, 0x41, 0xbd, 0x54,
	0x9e, 0x85, 0x54, 0xb2, 0xe8, 0xf4, 0x4c, 0xab, 0x58, 0x48, 0x1c, 0xfa, 0x38, 0xf2, 0xeb, 0x1a,
	0x45, 0x22, 0x52, 0x94, 0xa5, 0x78, 0xc4, 0xb6, 0xb6, 0x53, 0x11, 0xc1, 0xfe, 0xad, 0x5f, 0xfe,
	0xb8, 0x63, 0x2c, 0xa2, 0x85, 0xca, 0xb3, 0xcb, 0xae, 0x45, 0x51, 0xd8, 0x37, 0x6a, 0xe3, 0x9d,
	0xf6, 0x67, 0x5a, 0x45, 0xbc, 0x63, 0xe7, 0x88, 0x4c, 0xf9, 0xa1, 0x48, 0xa9, 0x16, 0x8c, 0xee,
	0x1a, 0xfa, 0x61, 0xd0, 0xdc, 0x47, 0xd0, 0xf9, 0xde, 0x8f, 0xde, 0xd6, 0xa4, 0x93, 0xfd, 0x1b,
	0x0b, 0x6e, 0x7d, 0x56, 0x65, 0xee, 0xa2, 0xa6, 0x66, 0x13, 0x63, 0xde, 0x91, 0x33, 0x2d, 0xe8,
	0x95, 0xad, 0x4b, 0x56, 0x1f, 0x6c, 0xe5, 0x88, 0x74, 0x45, 0x05, 0x9f, 0xeb, 0x69, 0x80, 0xe7,
	0xc0, 0x29, 0xf4, 0xab, 0x01, 0x27, 0xf7, 0x2d, 0xd8, 0xe8, 0xc2, 0xff, 0xc8, 0x99, 0xfd, 0xba,
	0x48, 0xf2, 0xd9, 0x9d, 0x08, 0x6e, 0xdd, 0xad, 0x12, 0x79, 0xb9, 0x73, 0x0a, 0x16, 0x04, 0xe9,
	0x96, 0x7f, 0x65, 0x71, 0x13, 0x9d, 0x9b, 0x11, 0x95, 0x44, 0xf3, 0xb9, 0x86, 0xde, 0xe9, 0x3b,
	0xfb, 0xf6, 0x6b, 0x66, 0xe8, 0x1f, 0x03, 0x1e, 0xef, 0x52, 0xde, 0xd1, 0x42, 0x8f, 0xac, 0x74,
	0xef, 0x5b, 0xc9, 0x83, 0x70, 0x23, 0xb8, 0xf5, 0x63, 0x95, 0xde, 0x95, 0x83, 0xa2, 0xb7, 0x96,
	0xad, 0xd1, 0x29, 0x7e, 0xe0, 0xec, 0xda, 0x37, 0xba, 0xb5, 0xde, 0x1d, 0xf4, 0xb7, 0x01, 0x8f,
	0x77, 0x69, 0x68, 0x3d, 0x93, 0xdf, 0xbd, 0xd3, 0x26, 0x2f, 0x1e, 0x84, 0x1b, 0xc1, 0xad, 0xef,
	0xaa, 0xec, 0x5f, 0x7b, 0xd6, 0xfa, 0xda, 0x14, 0x82, 0xea, 0x75, 0xaf, 0xc7, 0x62, 0x1d, 0x39,
	0x7d, 0xc7, 0xa2, 0xa5, 0xe7, 0xdb, 0xb5, 0xae, 0x8d, 0x7e, 0x30, 0xe0, 0xd1, 0x0e, 0xcd, 0x0c,
	0xbd, 0xd9, 0x23, 0x3d, 0x9d, 0x7b, 0x7c, 0xf2, 0xad, 0x67, 0x31, 0x17, 0xdc, 0xfa, 0x46, 0x31,
	0xfa, 0xee, 0x41, 0xe5, 0x73, 0x8d, 0xcc, 0x7a, 0xdd, 0x58, 0xb7, 0xae, 0x1e, 0x1c, 0x9b, 0xfa,
	0x10, 0xe7, 0xc0, 0xa9, 0xe4, 0x39, 0xf5, 0x69, 0xf4, 0xf3, 0x7d, 0x70, 0xba, 0xb7, 0xd3, 0x97,
	0x5f, 0x2a, 0xb7, 0x7e, 0x4a, 0x18, 0xa3, 0x60, 0xee, 0x53, 0xb0, 0xfb, 0xd8, 0x8c, 0x3d, 0x7a,
	0x6c, 0xc6, 0x9e, 0x3c, 0x36, 0xc1, 0xcd, 0x92, 0x09, 0xbe, 0x2c, 0x99, 0xe0, 0x61, 0xc9, 0x04,
	0xbb, 0x25, 0x13, 0xfc, 0x5e, 0x32, 0xc1, 0x9f, 0x25, 0x33, 0xf6, 0xa4, 0x64, 0x82, 0x8f, 0xf7,
	0xcc, 0xd8, 0x83, 0x3d, 0x13, 0xec, 0xee, 0x99, 0xb1, 0x47, 0x7b, 0x66, 0xec, 0xda, 0x7b, 0x39,
	0xc6, 0x3f, 0xca, 0xa5, 0x8b, 0x2c, 0x90, 0x24, 0x8a, 0x70, 0xba, 0x20, 0x6c, 0x3d, 0xc8, 0xb2,
	0x28, 0xaf, 0x28, 0x28, 0x52, 0x9f, 0x44, 0xa9, 0xaa, 0xd8, 0xe6, 0x99, 0x1c, 0xb3, 0xc9, 0x96,
	0xac, 0x7c, 0xb2, 0x77, 0xff, 0xa5, 0x92, 0x39, 0xa4, 0xbf, 0xda, 0xcf, 0xfe, 0x17, 0x00, 0x00,
	0xff, 0xff, 0xde, 0x10, 0xb3, 0xd0, 0x82, 0x11, 0x00, 0x00,
}

func (this *GetDnsInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDnsInfoRequest)
	if !ok {
		that2, ok := that.(GetDnsInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetDnsInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDnsInfoResponse)
	if !ok {
		that2, ok := that.(GetDnsInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DnsInfo.Equal(that1.DnsInfo) {
		return false
	}
	return true
}
func (this *GetSecurityConfigReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSecurityConfigReq)
	if !ok {
		that2, ok := that.(GetSecurityConfigReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if that1.LoadbalancerChoice == nil {
		if this.LoadbalancerChoice != nil {
			return false
		}
	} else if this.LoadbalancerChoice == nil {
		return false
	} else if !this.LoadbalancerChoice.Equal(that1.LoadbalancerChoice) {
		return false
	}
	return true
}
func (this *GetSecurityConfigReq_AllHttpLoadbalancers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSecurityConfigReq_AllHttpLoadbalancers)
	if !ok {
		that2, ok := that.(GetSecurityConfigReq_AllHttpLoadbalancers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllHttpLoadbalancers.Equal(that1.AllHttpLoadbalancers) {
		return false
	}
	return true
}
func (this *GetSecurityConfigReq_HttpLoadbalancersList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSecurityConfigReq_HttpLoadbalancersList)
	if !ok {
		that2, ok := that.(GetSecurityConfigReq_HttpLoadbalancersList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpLoadbalancersList.Equal(that1.HttpLoadbalancersList) {
		return false
	}
	return true
}
func (this *GetSecurityConfigRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSecurityConfigRsp)
	if !ok {
		that2, ok := that.(GetSecurityConfigRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AppFirewall) != len(that1.AppFirewall) {
		return false
	}
	for i := range this.AppFirewall {
		if this.AppFirewall[i] != that1.AppFirewall[i] {
			return false
		}
	}
	if len(this.BotDefense) != len(that1.BotDefense) {
		return false
	}
	for i := range this.BotDefense {
		if this.BotDefense[i] != that1.BotDefense[i] {
			return false
		}
	}
	if len(this.DdosDetection) != len(that1.DdosDetection) {
		return false
	}
	for i := range this.DdosDetection {
		if this.DdosDetection[i] != that1.DdosDetection[i] {
			return false
		}
	}
	if len(this.ApiProtection) != len(that1.ApiProtection) {
		return false
	}
	for i := range this.ApiProtection {
		if this.ApiProtection[i] != that1.ApiProtection[i] {
			return false
		}
	}
	if len(this.Protected) != len(that1.Protected) {
		return false
	}
	for i := range this.Protected {
		if this.Protected[i] != that1.Protected[i] {
			return false
		}
	}
	if len(this.AppFirewallPerRoute) != len(that1.AppFirewallPerRoute) {
		return false
	}
	for i := range this.AppFirewallPerRoute {
		if this.AppFirewallPerRoute[i] != that1.AppFirewallPerRoute[i] {
			return false
		}
	}
	return true
}
func (this *HTTPLoadBalancerList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPLoadBalancerList)
	if !ok {
		that2, ok := that.(HTTPLoadBalancerList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HttpLoadbalancer) != len(that1.HttpLoadbalancer) {
		return false
	}
	for i := range this.HttpLoadbalancer {
		if this.HttpLoadbalancer[i] != that1.HttpLoadbalancer[i] {
			return false
		}
	}
	return true
}
func (this *GetDoSAutoMitigationRulesReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDoSAutoMitigationRulesReq)
	if !ok {
		that2, ok := that.(GetDoSAutoMitigationRulesReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetDoSAutoMitigationRulesRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDoSAutoMitigationRulesRsp)
	if !ok {
		that2, ok := that.(GetDoSAutoMitigationRulesRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DosAutomitigationRules) != len(that1.DosAutomitigationRules) {
		return false
	}
	for i := range this.DosAutomitigationRules {
		if !this.DosAutomitigationRules[i].Equal(that1.DosAutomitigationRules[i]) {
			return false
		}
	}
	return true
}
func (this *DeleteDoSAutoMitigationRuleReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteDoSAutoMitigationRuleReq)
	if !ok {
		that2, ok := that.(DeleteDoSAutoMitigationRuleReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.DosAutomitigationRuleName != that1.DosAutomitigationRuleName {
		return false
	}
	return true
}
func (this *DeleteDoSAutoMitigationRuleRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteDoSAutoMitigationRuleRsp)
	if !ok {
		that2, ok := that.(DeleteDoSAutoMitigationRuleRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ListAvailableAPIDefinitionsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListAvailableAPIDefinitionsReq)
	if !ok {
		that2, ok := that.(ListAvailableAPIDefinitionsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ListAvailableAPIDefinitionsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListAvailableAPIDefinitionsResp)
	if !ok {
		that2, ok := that.(ListAvailableAPIDefinitionsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AvailableApiDefinitions) != len(that1.AvailableApiDefinitions) {
		return false
	}
	for i := range this.AvailableApiDefinitions {
		if !this.AvailableApiDefinitions[i].Equal(that1.AvailableApiDefinitions[i]) {
			return false
		}
	}
	return true
}
func (this *AssignAPIDefinitionReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignAPIDefinitionReq)
	if !ok {
		that2, ok := that.(AssignAPIDefinitionReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	if this.CreateIfNotExists != that1.CreateIfNotExists {
		return false
	}
	return true
}
func (this *AssignAPIDefinitionResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignAPIDefinitionResp)
	if !ok {
		that2, ok := that.(AssignAPIDefinitionResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetDnsInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.GetDnsInfoRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDnsInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.GetDnsInfoResponse{")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSecurityConfigReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&http_loadbalancer.GetSecurityConfigReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.LoadbalancerChoice != nil {
		s = append(s, "LoadbalancerChoice: "+fmt.Sprintf("%#v", this.LoadbalancerChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSecurityConfigReq_AllHttpLoadbalancers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSecurityConfigReq_AllHttpLoadbalancers{` +
		`AllHttpLoadbalancers:` + fmt.Sprintf("%#v", this.AllHttpLoadbalancers) + `}`}, ", ")
	return s
}
func (this *GetSecurityConfigReq_HttpLoadbalancersList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSecurityConfigReq_HttpLoadbalancersList{` +
		`HttpLoadbalancersList:` + fmt.Sprintf("%#v", this.HttpLoadbalancersList) + `}`}, ", ")
	return s
}
func (this *GetSecurityConfigRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&http_loadbalancer.GetSecurityConfigRsp{")
	s = append(s, "AppFirewall: "+fmt.Sprintf("%#v", this.AppFirewall)+",\n")
	s = append(s, "BotDefense: "+fmt.Sprintf("%#v", this.BotDefense)+",\n")
	s = append(s, "DdosDetection: "+fmt.Sprintf("%#v", this.DdosDetection)+",\n")
	s = append(s, "ApiProtection: "+fmt.Sprintf("%#v", this.ApiProtection)+",\n")
	s = append(s, "Protected: "+fmt.Sprintf("%#v", this.Protected)+",\n")
	s = append(s, "AppFirewallPerRoute: "+fmt.Sprintf("%#v", this.AppFirewallPerRoute)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HTTPLoadBalancerList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.HTTPLoadBalancerList{")
	s = append(s, "HttpLoadbalancer: "+fmt.Sprintf("%#v", this.HttpLoadbalancer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDoSAutoMitigationRulesReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.GetDoSAutoMitigationRulesReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDoSAutoMitigationRulesRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.GetDoSAutoMitigationRulesRsp{")
	if this.DosAutomitigationRules != nil {
		s = append(s, "DosAutomitigationRules: "+fmt.Sprintf("%#v", this.DosAutomitigationRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteDoSAutoMitigationRuleReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&http_loadbalancer.DeleteDoSAutoMitigationRuleReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "DosAutomitigationRuleName: "+fmt.Sprintf("%#v", this.DosAutomitigationRuleName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteDoSAutoMitigationRuleRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.DeleteDoSAutoMitigationRuleRsp{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListAvailableAPIDefinitionsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.ListAvailableAPIDefinitionsReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListAvailableAPIDefinitionsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.ListAvailableAPIDefinitionsResp{")
	if this.AvailableApiDefinitions != nil {
		s = append(s, "AvailableApiDefinitions: "+fmt.Sprintf("%#v", this.AvailableApiDefinitions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssignAPIDefinitionReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&http_loadbalancer.AssignAPIDefinitionReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.ApiDefinition != nil {
		s = append(s, "ApiDefinition: "+fmt.Sprintf("%#v", this.ApiDefinition)+",\n")
	}
	s = append(s, "CreateIfNotExists: "+fmt.Sprintf("%#v", this.CreateIfNotExists)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssignAPIDefinitionResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&http_loadbalancer.AssignAPIDefinitionResp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// GetDnsInfo
	//
	// x-displayName: "Get DNS Info"
	// GetDnsInfo is an API to get DNS information for a given HTTP load balancer
	GetDnsInfo(ctx context.Context, in *GetDnsInfoRequest, opts ...grpc.CallOption) (*GetDnsInfoResponse, error)
	// Get Security Config for Http Load Balancers
	//
	// x-displayName: "Get Security Config for Http Load Balancer"
	// Fetch the corresponding Security Config for the given HTTP load balancers
	GetSecurityConfig(ctx context.Context, in *GetSecurityConfigReq, opts ...grpc.CallOption) (*GetSecurityConfigRsp, error)
	// Get DoS Auto-Mitigation Rules for Http Load Balancer
	//
	// x-displayName: "Get DoS Auto-Mitigation Rules for Http Load Balancer"
	// Get the corresponding DoS Auto-Mitigation Rules for the given HTTP load balancer
	GetDoSAutoMitigationRules(ctx context.Context, in *GetDoSAutoMitigationRulesReq, opts ...grpc.CallOption) (*GetDoSAutoMitigationRulesRsp, error)
	// Delete DoS Auto-Mitigation Rule for Http Load Balancer
	//
	// x-displayName: "Delete DoS Auto-Mitigation Rule for Http Load Balancer"
	// Delete the corresponding DoS Auto-Mitigation Rule for the given HTTP load balancer
	DeleteDoSAutoMitigationRule(ctx context.Context, in *DeleteDoSAutoMitigationRuleReq, opts ...grpc.CallOption) (*DeleteDoSAutoMitigationRuleRsp, error)
	// List Available API Definitions
	//
	// x-displayName: "List Available API Definitions"
	// List API definitions suitable for API Inventory management
	// API Definitions which are associated at most with one app type.
	ListAvailableAPIDefinitions(ctx context.Context, in *ListAvailableAPIDefinitionsReq, opts ...grpc.CallOption) (*ListAvailableAPIDefinitionsResp, error)
	// Assign API Definition
	//
	// x-displayName: "Assign API Definition"
	// Set a reference to the API Definition, with an option to create an empty one if not exists.
	AssignAPIDefinition(ctx context.Context, in *AssignAPIDefinitionReq, opts ...grpc.CallOption) (*AssignAPIDefinitionResp, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) GetDnsInfo(ctx context.Context, in *GetDnsInfoRequest, opts ...grpc.CallOption) (*GetDnsInfoResponse, error) {
	out := new(GetDnsInfoResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.http_loadbalancer.CustomAPI/GetDnsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetSecurityConfig(ctx context.Context, in *GetSecurityConfigReq, opts ...grpc.CallOption) (*GetSecurityConfigRsp, error) {
	out := new(GetSecurityConfigRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.http_loadbalancer.CustomAPI/GetSecurityConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetDoSAutoMitigationRules(ctx context.Context, in *GetDoSAutoMitigationRulesReq, opts ...grpc.CallOption) (*GetDoSAutoMitigationRulesRsp, error) {
	out := new(GetDoSAutoMitigationRulesRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.http_loadbalancer.CustomAPI/GetDoSAutoMitigationRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) DeleteDoSAutoMitigationRule(ctx context.Context, in *DeleteDoSAutoMitigationRuleReq, opts ...grpc.CallOption) (*DeleteDoSAutoMitigationRuleRsp, error) {
	out := new(DeleteDoSAutoMitigationRuleRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.http_loadbalancer.CustomAPI/DeleteDoSAutoMitigationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ListAvailableAPIDefinitions(ctx context.Context, in *ListAvailableAPIDefinitionsReq, opts ...grpc.CallOption) (*ListAvailableAPIDefinitionsResp, error) {
	out := new(ListAvailableAPIDefinitionsResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.http_loadbalancer.CustomAPI/ListAvailableAPIDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) AssignAPIDefinition(ctx context.Context, in *AssignAPIDefinitionReq, opts ...grpc.CallOption) (*AssignAPIDefinitionResp, error) {
	out := new(AssignAPIDefinitionResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.http_loadbalancer.CustomAPI/AssignAPIDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// GetDnsInfo
	//
	// x-displayName: "Get DNS Info"
	// GetDnsInfo is an API to get DNS information for a given HTTP load balancer
	GetDnsInfo(context.Context, *GetDnsInfoRequest) (*GetDnsInfoResponse, error)
	// Get Security Config for Http Load Balancers
	//
	// x-displayName: "Get Security Config for Http Load Balancer"
	// Fetch the corresponding Security Config for the given HTTP load balancers
	GetSecurityConfig(context.Context, *GetSecurityConfigReq) (*GetSecurityConfigRsp, error)
	// Get DoS Auto-Mitigation Rules for Http Load Balancer
	//
	// x-displayName: "Get DoS Auto-Mitigation Rules for Http Load Balancer"
	// Get the corresponding DoS Auto-Mitigation Rules for the given HTTP load balancer
	GetDoSAutoMitigationRules(context.Context, *GetDoSAutoMitigationRulesReq) (*GetDoSAutoMitigationRulesRsp, error)
	// Delete DoS Auto-Mitigation Rule for Http Load Balancer
	//
	// x-displayName: "Delete DoS Auto-Mitigation Rule for Http Load Balancer"
	// Delete the corresponding DoS Auto-Mitigation Rule for the given HTTP load balancer
	DeleteDoSAutoMitigationRule(context.Context, *DeleteDoSAutoMitigationRuleReq) (*DeleteDoSAutoMitigationRuleRsp, error)
	// List Available API Definitions
	//
	// x-displayName: "List Available API Definitions"
	// List API definitions suitable for API Inventory management
	// API Definitions which are associated at most with one app type.
	ListAvailableAPIDefinitions(context.Context, *ListAvailableAPIDefinitionsReq) (*ListAvailableAPIDefinitionsResp, error)
	// Assign API Definition
	//
	// x-displayName: "Assign API Definition"
	// Set a reference to the API Definition, with an option to create an empty one if not exists.
	AssignAPIDefinition(context.Context, *AssignAPIDefinitionReq) (*AssignAPIDefinitionResp, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) GetDnsInfo(ctx context.Context, req *GetDnsInfoRequest) (*GetDnsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDnsInfo not implemented")
}
func (*UnimplementedCustomAPIServer) GetSecurityConfig(ctx context.Context, req *GetSecurityConfigReq) (*GetSecurityConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityConfig not implemented")
}
func (*UnimplementedCustomAPIServer) GetDoSAutoMitigationRules(ctx context.Context, req *GetDoSAutoMitigationRulesReq) (*GetDoSAutoMitigationRulesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoSAutoMitigationRules not implemented")
}
func (*UnimplementedCustomAPIServer) DeleteDoSAutoMitigationRule(ctx context.Context, req *DeleteDoSAutoMitigationRuleReq) (*DeleteDoSAutoMitigationRuleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoSAutoMitigationRule not implemented")
}
func (*UnimplementedCustomAPIServer) ListAvailableAPIDefinitions(ctx context.Context, req *ListAvailableAPIDefinitionsReq) (*ListAvailableAPIDefinitionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableAPIDefinitions not implemented")
}
func (*UnimplementedCustomAPIServer) AssignAPIDefinition(ctx context.Context, req *AssignAPIDefinitionReq) (*AssignAPIDefinitionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignAPIDefinition not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_GetDnsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDnsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetDnsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.http_loadbalancer.CustomAPI/GetDnsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetDnsInfo(ctx, req.(*GetDnsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetSecurityConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetSecurityConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.http_loadbalancer.CustomAPI/GetSecurityConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetSecurityConfig(ctx, req.(*GetSecurityConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetDoSAutoMitigationRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoSAutoMitigationRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetDoSAutoMitigationRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.http_loadbalancer.CustomAPI/GetDoSAutoMitigationRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetDoSAutoMitigationRules(ctx, req.(*GetDoSAutoMitigationRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_DeleteDoSAutoMitigationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDoSAutoMitigationRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).DeleteDoSAutoMitigationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.http_loadbalancer.CustomAPI/DeleteDoSAutoMitigationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).DeleteDoSAutoMitigationRule(ctx, req.(*DeleteDoSAutoMitigationRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ListAvailableAPIDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableAPIDefinitionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ListAvailableAPIDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.http_loadbalancer.CustomAPI/ListAvailableAPIDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ListAvailableAPIDefinitions(ctx, req.(*ListAvailableAPIDefinitionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_AssignAPIDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignAPIDefinitionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).AssignAPIDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.http_loadbalancer.CustomAPI/AssignAPIDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).AssignAPIDefinition(ctx, req.(*AssignAPIDefinitionReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.http_loadbalancer.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDnsInfo",
			Handler:    _CustomAPI_GetDnsInfo_Handler,
		},
		{
			MethodName: "GetSecurityConfig",
			Handler:    _CustomAPI_GetSecurityConfig_Handler,
		},
		{
			MethodName: "GetDoSAutoMitigationRules",
			Handler:    _CustomAPI_GetDoSAutoMitigationRules_Handler,
		},
		{
			MethodName: "DeleteDoSAutoMitigationRule",
			Handler:    _CustomAPI_DeleteDoSAutoMitigationRule_Handler,
		},
		{
			MethodName: "ListAvailableAPIDefinitions",
			Handler:    _CustomAPI_ListAvailableAPIDefinitions_Handler,
		},
		{
			MethodName: "AssignAPIDefinition",
			Handler:    _CustomAPI_AssignAPIDefinition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/http_loadbalancer/public_customapi.proto",
}

func (m *GetDnsInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDnsInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDnsInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDnsInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDnsInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDnsInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DnsInfo != nil {
		{
			size, err := m.DnsInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSecurityConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSecurityConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSecurityConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoadbalancerChoice != nil {
		{
			size := m.LoadbalancerChoice.Size()
			i -= size
			if _, err := m.LoadbalancerChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSecurityConfigReq_AllHttpLoadbalancers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSecurityConfigReq_AllHttpLoadbalancers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllHttpLoadbalancers != nil {
		{
			size, err := m.AllHttpLoadbalancers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSecurityConfigReq_HttpLoadbalancersList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSecurityConfigReq_HttpLoadbalancersList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpLoadbalancersList != nil {
		{
			size, err := m.HttpLoadbalancersList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSecurityConfigRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSecurityConfigRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSecurityConfigRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppFirewallPerRoute) > 0 {
		for iNdEx := len(m.AppFirewallPerRoute) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AppFirewallPerRoute[iNdEx])
			copy(dAtA[i:], m.AppFirewallPerRoute[iNdEx])
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.AppFirewallPerRoute[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Protected) > 0 {
		for iNdEx := len(m.Protected) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Protected[iNdEx])
			copy(dAtA[i:], m.Protected[iNdEx])
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Protected[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ApiProtection) > 0 {
		for iNdEx := len(m.ApiProtection) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ApiProtection[iNdEx])
			copy(dAtA[i:], m.ApiProtection[iNdEx])
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ApiProtection[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DdosDetection) > 0 {
		for iNdEx := len(m.DdosDetection) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DdosDetection[iNdEx])
			copy(dAtA[i:], m.DdosDetection[iNdEx])
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.DdosDetection[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BotDefense) > 0 {
		for iNdEx := len(m.BotDefense) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BotDefense[iNdEx])
			copy(dAtA[i:], m.BotDefense[iNdEx])
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.BotDefense[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AppFirewall) > 0 {
		for iNdEx := len(m.AppFirewall) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AppFirewall[iNdEx])
			copy(dAtA[i:], m.AppFirewall[iNdEx])
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.AppFirewall[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HTTPLoadBalancerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPLoadBalancerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPLoadBalancerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HttpLoadbalancer) > 0 {
		for iNdEx := len(m.HttpLoadbalancer) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.HttpLoadbalancer[iNdEx])
			copy(dAtA[i:], m.HttpLoadbalancer[iNdEx])
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.HttpLoadbalancer[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetDoSAutoMitigationRulesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDoSAutoMitigationRulesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDoSAutoMitigationRulesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDoSAutoMitigationRulesRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDoSAutoMitigationRulesRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDoSAutoMitigationRulesRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DosAutomitigationRules) > 0 {
		for iNdEx := len(m.DosAutomitigationRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DosAutomitigationRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteDoSAutoMitigationRuleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDoSAutoMitigationRuleReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteDoSAutoMitigationRuleReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DosAutomitigationRuleName) > 0 {
		i -= len(m.DosAutomitigationRuleName)
		copy(dAtA[i:], m.DosAutomitigationRuleName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.DosAutomitigationRuleName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteDoSAutoMitigationRuleRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDoSAutoMitigationRuleRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteDoSAutoMitigationRuleRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ListAvailableAPIDefinitionsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAvailableAPIDefinitionsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAvailableAPIDefinitionsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAvailableAPIDefinitionsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAvailableAPIDefinitionsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAvailableAPIDefinitionsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvailableApiDefinitions) > 0 {
		for iNdEx := len(m.AvailableApiDefinitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AvailableApiDefinitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AssignAPIDefinitionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignAPIDefinitionReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignAPIDefinitionReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateIfNotExists {
		i--
		if m.CreateIfNotExists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssignAPIDefinitionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignAPIDefinitionResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignAPIDefinitionResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetDnsInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetDnsInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsInfo != nil {
		l = m.DnsInfo.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetSecurityConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.LoadbalancerChoice != nil {
		n += m.LoadbalancerChoice.Size()
	}
	return n
}

func (m *GetSecurityConfigReq_AllHttpLoadbalancers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllHttpLoadbalancers != nil {
		l = m.AllHttpLoadbalancers.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *GetSecurityConfigReq_HttpLoadbalancersList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpLoadbalancersList != nil {
		l = m.HttpLoadbalancersList.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}
func (m *GetSecurityConfigRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AppFirewall) > 0 {
		for _, s := range m.AppFirewall {
			l = len(s)
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.BotDefense) > 0 {
		for _, s := range m.BotDefense {
			l = len(s)
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.DdosDetection) > 0 {
		for _, s := range m.DdosDetection {
			l = len(s)
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.ApiProtection) > 0 {
		for _, s := range m.ApiProtection {
			l = len(s)
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.Protected) > 0 {
		for _, s := range m.Protected {
			l = len(s)
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if len(m.AppFirewallPerRoute) > 0 {
		for _, s := range m.AppFirewallPerRoute {
			l = len(s)
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *HTTPLoadBalancerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HttpLoadbalancer) > 0 {
		for _, s := range m.HttpLoadbalancer {
			l = len(s)
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *GetDoSAutoMitigationRulesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetDoSAutoMitigationRulesRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DosAutomitigationRules) > 0 {
		for _, e := range m.DosAutomitigationRules {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *DeleteDoSAutoMitigationRuleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.DosAutomitigationRuleName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *DeleteDoSAutoMitigationRuleRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListAvailableAPIDefinitionsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *ListAvailableAPIDefinitionsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AvailableApiDefinitions) > 0 {
		for _, e := range m.AvailableApiDefinitions {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *AssignAPIDefinitionReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.CreateIfNotExists {
		n += 2
	}
	return n
}

func (m *AssignAPIDefinitionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetDnsInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDnsInfoRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDnsInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDnsInfoResponse{`,
		`DnsInfo:` + strings.Replace(fmt.Sprintf("%v", this.DnsInfo), "GlobalSpecType", "virtual_host_dns_info.GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSecurityConfigReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSecurityConfigReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`LoadbalancerChoice:` + fmt.Sprintf("%v", this.LoadbalancerChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSecurityConfigReq_AllHttpLoadbalancers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSecurityConfigReq_AllHttpLoadbalancers{`,
		`AllHttpLoadbalancers:` + strings.Replace(fmt.Sprintf("%v", this.AllHttpLoadbalancers), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSecurityConfigReq_HttpLoadbalancersList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSecurityConfigReq_HttpLoadbalancersList{`,
		`HttpLoadbalancersList:` + strings.Replace(fmt.Sprintf("%v", this.HttpLoadbalancersList), "HTTPLoadBalancerList", "HTTPLoadBalancerList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSecurityConfigRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSecurityConfigRsp{`,
		`AppFirewall:` + fmt.Sprintf("%v", this.AppFirewall) + `,`,
		`BotDefense:` + fmt.Sprintf("%v", this.BotDefense) + `,`,
		`DdosDetection:` + fmt.Sprintf("%v", this.DdosDetection) + `,`,
		`ApiProtection:` + fmt.Sprintf("%v", this.ApiProtection) + `,`,
		`Protected:` + fmt.Sprintf("%v", this.Protected) + `,`,
		`AppFirewallPerRoute:` + fmt.Sprintf("%v", this.AppFirewallPerRoute) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPLoadBalancerList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPLoadBalancerList{`,
		`HttpLoadbalancer:` + fmt.Sprintf("%v", this.HttpLoadbalancer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDoSAutoMitigationRulesReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDoSAutoMitigationRulesReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDoSAutoMitigationRulesRsp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDosAutomitigationRules := "[]*DoSMitigationRuleInfo{"
	for _, f := range this.DosAutomitigationRules {
		repeatedStringForDosAutomitigationRules += strings.Replace(fmt.Sprintf("%v", f), "DoSMitigationRuleInfo", "dos_mitigation.DoSMitigationRuleInfo", 1) + ","
	}
	repeatedStringForDosAutomitigationRules += "}"
	s := strings.Join([]string{`&GetDoSAutoMitigationRulesRsp{`,
		`DosAutomitigationRules:` + repeatedStringForDosAutomitigationRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteDoSAutoMitigationRuleReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteDoSAutoMitigationRuleReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DosAutomitigationRuleName:` + fmt.Sprintf("%v", this.DosAutomitigationRuleName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteDoSAutoMitigationRuleRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteDoSAutoMitigationRuleRsp{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListAvailableAPIDefinitionsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListAvailableAPIDefinitionsReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListAvailableAPIDefinitionsResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAvailableApiDefinitions := "[]*ObjectRefType{"
	for _, f := range this.AvailableApiDefinitions {
		repeatedStringForAvailableApiDefinitions += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForAvailableApiDefinitions += "}"
	s := strings.Join([]string{`&ListAvailableAPIDefinitionsResp{`,
		`AvailableApiDefinitions:` + repeatedStringForAvailableApiDefinitions + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignAPIDefinitionReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignAPIDefinitionReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`CreateIfNotExists:` + fmt.Sprintf("%v", this.CreateIfNotExists) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignAPIDefinitionResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignAPIDefinitionResp{`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetDnsInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDnsInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDnsInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDnsInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDnsInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDnsInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnsInfo == nil {
				m.DnsInfo = &virtual_host_dns_info.GlobalSpecType{}
			}
			if err := m.DnsInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSecurityConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSecurityConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSecurityConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllHttpLoadbalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerChoice = &GetSecurityConfigReq_AllHttpLoadbalancers{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadbalancersList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HTTPLoadBalancerList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerChoice = &GetSecurityConfigReq_HttpLoadbalancersList{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSecurityConfigRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSecurityConfigRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSecurityConfigRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppFirewall = append(m.AppFirewall, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefense", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotDefense = append(m.BotDefense, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosDetection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdosDetection = append(m.DdosDetection, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiProtection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiProtection = append(m.ApiProtection, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protected", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protected = append(m.Protected, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewallPerRoute", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppFirewallPerRoute = append(m.AppFirewallPerRoute, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPLoadBalancerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPLoadBalancerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPLoadBalancerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadbalancer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpLoadbalancer = append(m.HttpLoadbalancer, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDoSAutoMitigationRulesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDoSAutoMitigationRulesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDoSAutoMitigationRulesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDoSAutoMitigationRulesRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDoSAutoMitigationRulesRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDoSAutoMitigationRulesRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DosAutomitigationRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DosAutomitigationRules = append(m.DosAutomitigationRules, &dos_mitigation.DoSMitigationRuleInfo{})
			if err := m.DosAutomitigationRules[len(m.DosAutomitigationRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDoSAutoMitigationRuleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDoSAutoMitigationRuleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDoSAutoMitigationRuleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DosAutomitigationRuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DosAutomitigationRuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDoSAutoMitigationRuleRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDoSAutoMitigationRuleRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDoSAutoMitigationRuleRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAvailableAPIDefinitionsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAvailableAPIDefinitionsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAvailableAPIDefinitionsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAvailableAPIDefinitionsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAvailableAPIDefinitionsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAvailableAPIDefinitionsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableApiDefinitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableApiDefinitions = append(m.AvailableApiDefinitions, &views.ObjectRefType{})
			if err := m.AvailableApiDefinitions[len(m.AvailableApiDefinitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignAPIDefinitionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignAPIDefinitionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignAPIDefinitionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDefinition == nil {
				m.ApiDefinition = &views.ObjectRefType{}
			}
			if err := m.ApiDefinition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateIfNotExists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateIfNotExists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignAPIDefinitionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignAPIDefinitionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignAPIDefinitionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

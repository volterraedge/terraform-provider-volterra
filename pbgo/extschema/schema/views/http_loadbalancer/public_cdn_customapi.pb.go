// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/http_loadbalancer/public_cdn_customapi.proto

// HTTP Load Balancer
//
// x-displayName: "Configure HTTP Load Balancer"
// HTTP Load Balancer view defines a required parameters that can be used in CRUD, to create and manage HTTP Load Balancer.
// It can be used to create HTTP Load Balancer and HTTPS Load Balancer.

package http_loadbalancer

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	common_cdn "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_cdn"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("ves.io/schema/views/http_loadbalancer/public_cdn_customapi.proto", fileDescriptor_e53fea2365fa2ad7)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/http_loadbalancer/public_cdn_customapi.proto", fileDescriptor_e53fea2365fa2ad7)
}

var fileDescriptor_e53fea2365fa2ad7 = []byte{
	// 614 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4f, 0x6b, 0x14, 0x4d,
	0x10, 0xc6, 0xb7, 0x37, 0xf0, 0xbe, 0xb0, 0x78, 0xda, 0x53, 0x5c, 0x43, 0x0b, 0x03, 0x41, 0x88,
	0xce, 0x34, 0x28, 0x8a, 0xc6, 0x8b, 0x66, 0x15, 0x23, 0x44, 0x13, 0x62, 0x4e, 0x7a, 0x08, 0x3d,
	0x3d, 0x95, 0xd9, 0x36, 0x33, 0x5d, 0x9d, 0xe9, 0x9e, 0x49, 0x82, 0x04, 0x24, 0x47, 0xf1, 0x20,
	0x88, 0xf8, 0x05, 0x3c, 0x78, 0xf0, 0x1b, 0xe4, 0x92, 0x5b, 0x3c, 0x49, 0xd0, 0x4b, 0x8e, 0x66,
	0xd6, 0x83, 0xc7, 0x7c, 0x04, 0x99, 0xd9, 0x4d, 0xcc, 0x9f, 0xc1, 0x24, 0x7b, 0xab, 0xe1, 0xa1,
	0x9e, 0x7e, 0xea, 0x37, 0x45, 0x35, 0xee, 0x65, 0x60, 0x3c, 0x89, 0xcc, 0x88, 0x0e, 0xc4, 0x9c,
	0x65, 0x12, 0x96, 0x0d, 0xeb, 0x58, 0xab, 0xe7, 0x23, 0xe4, 0x81, 0xcf, 0x23, 0xae, 0x04, 0x24,
	0x4c, 0xa7, 0x7e, 0x24, 0xc5, 0xbc, 0x08, 0xd4, 0xbc, 0x48, 0x8d, 0xc5, 0x98, 0x6b, 0xe9, 0xe9,
	0x04, 0x2d, 0x36, 0x47, 0x7b, 0x0e, 0x5e, 0xcf, 0xc1, 0x2b, 0x1d, 0xbc, 0x13, 0x0e, 0x2d, 0x37,
	0x94, 0xb6, 0x93, 0xfa, 0x9e, 0xc0, 0x98, 0x85, 0x18, 0x22, 0x2b, 0xbb, 0xfd, 0x74, 0xa1, 0xfc,
	0x2a, 0x3f, 0xca, 0xaa, 0xe7, 0xda, 0x1a, 0x09, 0x11, 0xc3, 0x08, 0x18, 0xd7, 0x92, 0x71, 0xa5,
	0xd0, 0x72, 0x2b, 0x51, 0x99, 0xbe, 0x7a, 0xe9, 0x68, 0x6a, 0xd4, 0x87, 0xc5, 0x8b, 0x47, 0x45,
	0xbb, 0xaa, 0x61, 0x5f, 0x1a, 0x39, 0x36, 0x2d, 0x8f, 0x64, 0xc0, 0x2d, 0xf4, 0x55, 0xe7, 0x98,
	0x0a, 0x06, 0x54, 0x76, 0xcc, 0x7c, 0xac, 0x8a, 0x97, 0xc0, 0x38, 0x46, 0x55, 0xd0, 0x39, 0xfc,
	0xda, 0xf5, 0x8d, 0xff, 0x1b, 0x17, 0xda, 0x0f, 0x9e, 0xb6, 0x4b, 0x60, 0xf7, 0x67, 0x1e, 0x37,
	0xbf, 0xd4, 0x1b, 0x57, 0xa6, 0xa4, 0xb1, 0xcf, 0x20, 0xc9, 0xa4, 0x80, 0x69, 0x0d, 0x49, 0x6f,
	0xac, 0xc9, 0xb9, 0xb9, 0x99, 0xa9, 0x89, 0x36, 0x17, 0x1d, 0x78, 0xa8, 0xb8, 0x1f, 0x41, 0xd0,
	0xbc, 0xed, 0x55, 0x71, 0xfd, 0xfb, 0x92, 0x57, 0x69, 0x34, 0x0b, 0x4b, 0xad, 0x01, 0x3b, 0x8d,
	0x76, 0xde, 0x92, 0x7c, 0x6b, 0xd8, 0x5b, 0xb8, 0xb9, 0x22, 0x5c, 0x81, 0xca, 0x82, 0xb2, 0x6e,
	0x00, 0x91, 0xcc, 0x20, 0x59, 0x75, 0x15, 0xd8, 0x65, 0x4c, 0x16, 0x5d, 0x1e, 0x64, 0xc5, 0x0f,
	0x0d, 0xdc, 0x18, 0x95, 0xb4, 0x98, 0xac, 0xff, 0xf8, 0xf5, 0xbe, 0x3e, 0xe7, 0x4c, 0xf7, 0x57,
	0x84, 0x29, 0x1e, 0x83, 0xd1, 0x5c, 0x80, 0x61, 0xaf, 0x0e, 0xea, 0xb5, 0x8a, 0x95, 0x8a, 0xa4,
	0xb1, 0xae, 0xe9, 0xc5, 0x70, 0xf1, 0x20, 0x87, 0x6b, 0x2c, 0xb7, 0xa9, 0x19, 0x27, 0x63, 0xcd,
	0x4f, 0xf5, 0xc6, 0xe8, 0x23, 0x38, 0x11, 0xb5, 0x02, 0xd6, 0xad, 0xd3, 0x46, 0xae, 0xb0, 0x29,
	0x50, 0x0d, 0xd4, 0x67, 0xb4, 0xf3, 0x66, 0x50, 0x50, 0xb3, 0xce, 0x93, 0x73, 0x83, 0x0a, 0xa1,
	0x82, 0xd3, 0x21, 0x4c, 0x1f, 0xeb, 0x8d, 0xcb, 0xc5, 0x9a, 0x15, 0x40, 0x66, 0xd2, 0x24, 0x84,
	0x0a, 0x40, 0x77, 0x4e, 0xdf, 0x89, 0x88, 0x8b, 0x23, 0x2e, 0xb3, 0xb0, 0x94, 0x82, 0xb1, 0xad,
	0xf1, 0x41, 0x5a, 0x8d, 0x46, 0x65, 0xc0, 0x59, 0xcb, 0xb7, 0x86, 0xaf, 0x9e, 0x11, 0x53, 0x6a,
	0xa0, 0xc7, 0x68, 0xd2, 0x69, 0x9f, 0x9b, 0x51, 0xa9, 0xae, 0x31, 0x51, 0x44, 0x70, 0x75, 0x91,
	0x61, 0x9c, 0x8c, 0xb5, 0xee, 0x6e, 0x6e, 0x90, 0xa1, 0xef, 0x1b, 0xe4, 0xda, 0x99, 0x4e, 0x94,
	0x37, 0xed, 0xbf, 0x04, 0x61, 0xd7, 0xbf, 0x0d, 0x0f, 0x6d, 0x12, 0x32, 0xf1, 0x81, 0x6c, 0xef,
	0xd2, 0xda, 0xce, 0x2e, 0xad, 0xed, 0xed, 0x52, 0xf2, 0x3a, 0xa7, 0xe4, 0x73, 0x4e, 0xc9, 0xd7,
	0x9c, 0x92, 0xed, 0x9c, 0x92, 0x9f, 0x39, 0x25, 0xbf, 0x73, 0x5a, 0xdb, 0xcb, 0x29, 0x79, 0xd7,
	0xa5, 0xb5, 0xcd, 0x2e, 0x25, 0xdb, 0x5d, 0x5a, 0xdb, 0xe9, 0xd2, 0xda, 0xf3, 0x17, 0x21, 0xea,
	0xc5, 0xd0, 0xcb, 0x30, 0xb2, 0x90, 0x24, 0xdc, 0x4b, 0x0d, 0x2b, 0x8b, 0x05, 0x4c, 0x62, 0x57,
	0x27, 0x98, 0xc9, 0x00, 0x12, 0x77, 0x5f, 0x66, 0xda, 0x0f, 0x91, 0xc1, 0x8a, 0xed, 0xdf, 0x94,
	0x7f, 0x9f, 0x62, 0xff, 0xbf, 0xf2, 0xb8, 0xdc, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0x37, 0x16,
	0x44, 0x13, 0xba, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CDNCustomAPIClient is the client API for CDNCustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CDNCustomAPIClient interface {
	// ListServiceOperations for HTTPLB when Caching Enabled
	//
	// x-displayName: "List of HTTPLB Operation Commands when Caching Enabled"
	// List of service operations for a given HTTP LB when Caching Enabled
	ListServiceOperationsHTTPLBCacheEnabled(ctx context.Context, in *common_cdn.ListServiceOperationsReq, opts ...grpc.CallOption) (*common_cdn.ListServiceOperationsRsp, error)
	// GetServiceOperation for HTTPLB when Caching Enabled
	//
	// x-displayName: "Get Service Operation Status for HTTPLB when Caching Enabled"
	// Get status of an operation command for a given HTTP LB when caching enabled.
	GetServiceOperationHTTPLBCacheEnabled(ctx context.Context, in *common_cdn.GetServiceOperationReq, opts ...grpc.CallOption) (*common_cdn.GetServiceOperationRsp, error)
	// CachePurge for HTTPLB when Cache Enabled
	//
	// x-displayName: "Purge the LB Cache"
	// Initiate Purge on the LB Cache
	CDNCachePurgeHTTPLBCacheEnabled(ctx context.Context, in *common_cdn.LilacCDNCachePurgeRequest, opts ...grpc.CallOption) (*common_cdn.LilacCDNCachePurgeResponse, error)
}

type cDNCustomAPIClient struct {
	cc *grpc.ClientConn
}

func NewCDNCustomAPIClient(cc *grpc.ClientConn) CDNCustomAPIClient {
	return &cDNCustomAPIClient{cc}
}

func (c *cDNCustomAPIClient) ListServiceOperationsHTTPLBCacheEnabled(ctx context.Context, in *common_cdn.ListServiceOperationsReq, opts ...grpc.CallOption) (*common_cdn.ListServiceOperationsRsp, error) {
	out := new(common_cdn.ListServiceOperationsRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.http_loadbalancer.CDNCustomAPI/ListServiceOperationsHTTPLBCacheEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDNCustomAPIClient) GetServiceOperationHTTPLBCacheEnabled(ctx context.Context, in *common_cdn.GetServiceOperationReq, opts ...grpc.CallOption) (*common_cdn.GetServiceOperationRsp, error) {
	out := new(common_cdn.GetServiceOperationRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.http_loadbalancer.CDNCustomAPI/GetServiceOperationHTTPLBCacheEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDNCustomAPIClient) CDNCachePurgeHTTPLBCacheEnabled(ctx context.Context, in *common_cdn.LilacCDNCachePurgeRequest, opts ...grpc.CallOption) (*common_cdn.LilacCDNCachePurgeResponse, error) {
	out := new(common_cdn.LilacCDNCachePurgeResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.http_loadbalancer.CDNCustomAPI/CDNCachePurgeHTTPLBCacheEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CDNCustomAPIServer is the server API for CDNCustomAPI service.
type CDNCustomAPIServer interface {
	// ListServiceOperations for HTTPLB when Caching Enabled
	//
	// x-displayName: "List of HTTPLB Operation Commands when Caching Enabled"
	// List of service operations for a given HTTP LB when Caching Enabled
	ListServiceOperationsHTTPLBCacheEnabled(context.Context, *common_cdn.ListServiceOperationsReq) (*common_cdn.ListServiceOperationsRsp, error)
	// GetServiceOperation for HTTPLB when Caching Enabled
	//
	// x-displayName: "Get Service Operation Status for HTTPLB when Caching Enabled"
	// Get status of an operation command for a given HTTP LB when caching enabled.
	GetServiceOperationHTTPLBCacheEnabled(context.Context, *common_cdn.GetServiceOperationReq) (*common_cdn.GetServiceOperationRsp, error)
	// CachePurge for HTTPLB when Cache Enabled
	//
	// x-displayName: "Purge the LB Cache"
	// Initiate Purge on the LB Cache
	CDNCachePurgeHTTPLBCacheEnabled(context.Context, *common_cdn.LilacCDNCachePurgeRequest) (*common_cdn.LilacCDNCachePurgeResponse, error)
}

// UnimplementedCDNCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCDNCustomAPIServer struct {
}

func (*UnimplementedCDNCustomAPIServer) ListServiceOperationsHTTPLBCacheEnabled(ctx context.Context, req *common_cdn.ListServiceOperationsReq) (*common_cdn.ListServiceOperationsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceOperationsHTTPLBCacheEnabled not implemented")
}
func (*UnimplementedCDNCustomAPIServer) GetServiceOperationHTTPLBCacheEnabled(ctx context.Context, req *common_cdn.GetServiceOperationReq) (*common_cdn.GetServiceOperationRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceOperationHTTPLBCacheEnabled not implemented")
}
func (*UnimplementedCDNCustomAPIServer) CDNCachePurgeHTTPLBCacheEnabled(ctx context.Context, req *common_cdn.LilacCDNCachePurgeRequest) (*common_cdn.LilacCDNCachePurgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CDNCachePurgeHTTPLBCacheEnabled not implemented")
}

func RegisterCDNCustomAPIServer(s *grpc.Server, srv CDNCustomAPIServer) {
	s.RegisterService(&_CDNCustomAPI_serviceDesc, srv)
}

func _CDNCustomAPI_ListServiceOperationsHTTPLBCacheEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common_cdn.ListServiceOperationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDNCustomAPIServer).ListServiceOperationsHTTPLBCacheEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.http_loadbalancer.CDNCustomAPI/ListServiceOperationsHTTPLBCacheEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDNCustomAPIServer).ListServiceOperationsHTTPLBCacheEnabled(ctx, req.(*common_cdn.ListServiceOperationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDNCustomAPI_GetServiceOperationHTTPLBCacheEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common_cdn.GetServiceOperationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDNCustomAPIServer).GetServiceOperationHTTPLBCacheEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.http_loadbalancer.CDNCustomAPI/GetServiceOperationHTTPLBCacheEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDNCustomAPIServer).GetServiceOperationHTTPLBCacheEnabled(ctx, req.(*common_cdn.GetServiceOperationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDNCustomAPI_CDNCachePurgeHTTPLBCacheEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common_cdn.LilacCDNCachePurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDNCustomAPIServer).CDNCachePurgeHTTPLBCacheEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.http_loadbalancer.CDNCustomAPI/CDNCachePurgeHTTPLBCacheEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDNCustomAPIServer).CDNCachePurgeHTTPLBCacheEnabled(ctx, req.(*common_cdn.LilacCDNCachePurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CDNCustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.http_loadbalancer.CDNCustomAPI",
	HandlerType: (*CDNCustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServiceOperationsHTTPLBCacheEnabled",
			Handler:    _CDNCustomAPI_ListServiceOperationsHTTPLBCacheEnabled_Handler,
		},
		{
			MethodName: "GetServiceOperationHTTPLBCacheEnabled",
			Handler:    _CDNCustomAPI_GetServiceOperationHTTPLBCacheEnabled_Handler,
		},
		{
			MethodName: "CDNCachePurgeHTTPLBCacheEnabled",
			Handler:    _CDNCustomAPI_CDNCachePurgeHTTPLBCacheEnabled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/http_loadbalancer/public_cdn_customapi.proto",
}

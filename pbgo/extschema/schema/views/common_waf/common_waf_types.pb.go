// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/common_waf/common_waf_types.proto

package common_waf

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	app_type "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/app_type"
	policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	rate_limiter "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy"
	service_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	rate_limiter_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy"
	virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// action
//
// x-displayName: "Action"
// Action that should be taken when client identifier matches the rule
type ClientSrcRuleAction int32

const (
	// x-displayName: "Skip WAF"
	SKIP_PROCESSING_WAF ClientSrcRuleAction = 0
	// x-displayName: "Skip Bot Defense"
	SKIP_PROCESSING_BOT ClientSrcRuleAction = 1
	// x-displayName: "Skip Malicious Users"
	SKIP_PROCESSING_MUM ClientSrcRuleAction = 2
	// x-displayName: "Skip IP Reputation"
	SKIP_PROCESSING_IP_REPUTATION ClientSrcRuleAction = 3
	// x-displayName: "Skip API Protection"
	SKIP_PROCESSING_API_PROTECTION ClientSrcRuleAction = 4
	// x-displayName: "Skip Open API Specification Validation"
	SKIP_PROCESSING_OAS_VALIDATION ClientSrcRuleAction = 5
	// x-displayName: "Skip DDoS Protection"
	SKIP_PROCESSING_DDOS_PROTECTION ClientSrcRuleAction = 6
	// x-displayName: "Skip Threat Mesh"
	SKIP_PROCESSING_THREAT_MESH ClientSrcRuleAction = 7
)

var ClientSrcRuleAction_name = map[int32]string{
	0: "SKIP_PROCESSING_WAF",
	1: "SKIP_PROCESSING_BOT",
	2: "SKIP_PROCESSING_MUM",
	3: "SKIP_PROCESSING_IP_REPUTATION",
	4: "SKIP_PROCESSING_API_PROTECTION",
	5: "SKIP_PROCESSING_OAS_VALIDATION",
	6: "SKIP_PROCESSING_DDOS_PROTECTION",
	7: "SKIP_PROCESSING_THREAT_MESH",
}

var ClientSrcRuleAction_value = map[string]int32{
	"SKIP_PROCESSING_WAF":             0,
	"SKIP_PROCESSING_BOT":             1,
	"SKIP_PROCESSING_MUM":             2,
	"SKIP_PROCESSING_IP_REPUTATION":   3,
	"SKIP_PROCESSING_API_PROTECTION":  4,
	"SKIP_PROCESSING_OAS_VALIDATION":  5,
	"SKIP_PROCESSING_DDOS_PROTECTION": 6,
	"SKIP_PROCESSING_THREAT_MESH":     7,
}

func (ClientSrcRuleAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{0}
}

// service policy list
//
// x-displayName: "Service Policy List"
// List of service policies.
type ServicePolicyList struct {
	// policies
	//
	// x-displayName: "Policies"
	// x-required
	// Service Policies is a sequential engine where policies (and rules within the policy) are evaluated one after the other. It's important to define the
	// correct order (policies evaluated from top to bottom in the list) for service policies, to get the intended result.
	// For each request, its characteristics are evaluated based on the match criteria in each service policy starting at the top. If there is a match in the
	// current policy, then the policy takes effect, and no more policies are evaluated. Otherwise, the next policy is evaluated.
	// If all policies are evaluated and none match, then the request will be denied by default.
	Policies []*views.ObjectRefType `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (m *ServicePolicyList) Reset()      { *m = ServicePolicyList{} }
func (*ServicePolicyList) ProtoMessage() {}
func (*ServicePolicyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{0}
}
func (m *ServicePolicyList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicePolicyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServicePolicyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicePolicyList.Merge(m, src)
}
func (m *ServicePolicyList) XXX_Size() int {
	return m.Size()
}
func (m *ServicePolicyList) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicePolicyList.DiscardUnknown(m)
}

var xxx_messageInfo_ServicePolicyList proto.InternalMessageInfo

func (m *ServicePolicyList) GetPolicies() []*views.ObjectRefType {
	if m != nil {
		return m.Policies
	}
	return nil
}

// enable challenge
//
// x-displayName: "Enable Malicious User Challenge"
// Configure auto mitigation i.e risk based challenges for malicious users
type EnableChallenge struct {
	// Malicious user mitigation choice
	//
	// x-displayName: "Malicious User Mitigation Settings"
	// Settings that specify the actions to be taken when malicious users are determined to be at different threat levels.
	// User's activity is monitored and continuously analyzed for malicious behavior. From this analysis, a threat-level
	// is assigned to each user. The settings defined in malicious user mitigation specify what mitigation actions to take
	// for user determined to be at different threat levels.
	//
	// Types that are valid to be assigned to MaliciousUserMitigationChoice:
	//	*EnableChallenge_DefaultMitigationSettings
	//	*EnableChallenge_MaliciousUserMitigation
	MaliciousUserMitigationChoice isEnableChallenge_MaliciousUserMitigationChoice `protobuf_oneof:"malicious_user_mitigation_choice"`
	// JavaScript challenge parameters choice
	//
	// x-displayName: "JavaScript Challenge Parameters"
	// Select Default or Custom Parameters
	//
	// Types that are valid to be assigned to JsChallengeParametersChoice:
	//	*EnableChallenge_DefaultJsChallengeParameters
	//	*EnableChallenge_JsChallengeParameters
	JsChallengeParametersChoice isEnableChallenge_JsChallengeParametersChoice `protobuf_oneof:"js_challenge_parameters_choice"`
	// Captcha challenge parameters choice
	//
	// x-displayName: "Captcha Challenge Parameters"
	// Select Default or Custom Parameters
	//
	// Types that are valid to be assigned to CaptchaChallengeParametersChoice:
	//	*EnableChallenge_DefaultCaptchaChallengeParameters
	//	*EnableChallenge_CaptchaChallengeParameters
	CaptchaChallengeParametersChoice isEnableChallenge_CaptchaChallengeParametersChoice `protobuf_oneof:"captcha_challenge_parameters_choice"`
}

func (m *EnableChallenge) Reset()      { *m = EnableChallenge{} }
func (*EnableChallenge) ProtoMessage() {}
func (*EnableChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{1}
}
func (m *EnableChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnableChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableChallenge.Merge(m, src)
}
func (m *EnableChallenge) XXX_Size() int {
	return m.Size()
}
func (m *EnableChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_EnableChallenge proto.InternalMessageInfo

type isEnableChallenge_MaliciousUserMitigationChoice interface {
	isEnableChallenge_MaliciousUserMitigationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isEnableChallenge_JsChallengeParametersChoice interface {
	isEnableChallenge_JsChallengeParametersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isEnableChallenge_CaptchaChallengeParametersChoice interface {
	isEnableChallenge_CaptchaChallengeParametersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EnableChallenge_DefaultMitigationSettings struct {
	DefaultMitigationSettings *schema.Empty `protobuf:"bytes,2,opt,name=default_mitigation_settings,json=defaultMitigationSettings,proto3,oneof" json:"default_mitigation_settings,omitempty"`
}
type EnableChallenge_MaliciousUserMitigation struct {
	MaliciousUserMitigation *views.ObjectRefType `protobuf:"bytes,3,opt,name=malicious_user_mitigation,json=maliciousUserMitigation,proto3,oneof" json:"malicious_user_mitigation,omitempty"`
}
type EnableChallenge_DefaultJsChallengeParameters struct {
	DefaultJsChallengeParameters *schema.Empty `protobuf:"bytes,5,opt,name=default_js_challenge_parameters,json=defaultJsChallengeParameters,proto3,oneof" json:"default_js_challenge_parameters,omitempty"`
}
type EnableChallenge_JsChallengeParameters struct {
	JsChallengeParameters *virtual_host.JavascriptChallengeType `protobuf:"bytes,6,opt,name=js_challenge_parameters,json=jsChallengeParameters,proto3,oneof" json:"js_challenge_parameters,omitempty"`
}
type EnableChallenge_DefaultCaptchaChallengeParameters struct {
	DefaultCaptchaChallengeParameters *schema.Empty `protobuf:"bytes,8,opt,name=default_captcha_challenge_parameters,json=defaultCaptchaChallengeParameters,proto3,oneof" json:"default_captcha_challenge_parameters,omitempty"`
}
type EnableChallenge_CaptchaChallengeParameters struct {
	CaptchaChallengeParameters *virtual_host.CaptchaChallengeType `protobuf:"bytes,9,opt,name=captcha_challenge_parameters,json=captchaChallengeParameters,proto3,oneof" json:"captcha_challenge_parameters,omitempty"`
}

func (*EnableChallenge_DefaultMitigationSettings) isEnableChallenge_MaliciousUserMitigationChoice() {}
func (*EnableChallenge_MaliciousUserMitigation) isEnableChallenge_MaliciousUserMitigationChoice()   {}
func (*EnableChallenge_DefaultJsChallengeParameters) isEnableChallenge_JsChallengeParametersChoice() {
}
func (*EnableChallenge_JsChallengeParameters) isEnableChallenge_JsChallengeParametersChoice() {}
func (*EnableChallenge_DefaultCaptchaChallengeParameters) isEnableChallenge_CaptchaChallengeParametersChoice() {
}
func (*EnableChallenge_CaptchaChallengeParameters) isEnableChallenge_CaptchaChallengeParametersChoice() {
}

func (m *EnableChallenge) GetMaliciousUserMitigationChoice() isEnableChallenge_MaliciousUserMitigationChoice {
	if m != nil {
		return m.MaliciousUserMitigationChoice
	}
	return nil
}
func (m *EnableChallenge) GetJsChallengeParametersChoice() isEnableChallenge_JsChallengeParametersChoice {
	if m != nil {
		return m.JsChallengeParametersChoice
	}
	return nil
}
func (m *EnableChallenge) GetCaptchaChallengeParametersChoice() isEnableChallenge_CaptchaChallengeParametersChoice {
	if m != nil {
		return m.CaptchaChallengeParametersChoice
	}
	return nil
}

func (m *EnableChallenge) GetDefaultMitigationSettings() *schema.Empty {
	if x, ok := m.GetMaliciousUserMitigationChoice().(*EnableChallenge_DefaultMitigationSettings); ok {
		return x.DefaultMitigationSettings
	}
	return nil
}

func (m *EnableChallenge) GetMaliciousUserMitigation() *views.ObjectRefType {
	if x, ok := m.GetMaliciousUserMitigationChoice().(*EnableChallenge_MaliciousUserMitigation); ok {
		return x.MaliciousUserMitigation
	}
	return nil
}

func (m *EnableChallenge) GetDefaultJsChallengeParameters() *schema.Empty {
	if x, ok := m.GetJsChallengeParametersChoice().(*EnableChallenge_DefaultJsChallengeParameters); ok {
		return x.DefaultJsChallengeParameters
	}
	return nil
}

func (m *EnableChallenge) GetJsChallengeParameters() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetJsChallengeParametersChoice().(*EnableChallenge_JsChallengeParameters); ok {
		return x.JsChallengeParameters
	}
	return nil
}

func (m *EnableChallenge) GetDefaultCaptchaChallengeParameters() *schema.Empty {
	if x, ok := m.GetCaptchaChallengeParametersChoice().(*EnableChallenge_DefaultCaptchaChallengeParameters); ok {
		return x.DefaultCaptchaChallengeParameters
	}
	return nil
}

func (m *EnableChallenge) GetCaptchaChallengeParameters() *virtual_host.CaptchaChallengeType {
	if x, ok := m.GetCaptchaChallengeParametersChoice().(*EnableChallenge_CaptchaChallengeParameters); ok {
		return x.CaptchaChallengeParameters
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EnableChallenge) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EnableChallenge_DefaultMitigationSettings)(nil),
		(*EnableChallenge_MaliciousUserMitigation)(nil),
		(*EnableChallenge_DefaultJsChallengeParameters)(nil),
		(*EnableChallenge_JsChallengeParameters)(nil),
		(*EnableChallenge_DefaultCaptchaChallengeParameters)(nil),
		(*EnableChallenge_CaptchaChallengeParameters)(nil),
	}
}

// policy based challenge
//
// x-displayName: "Policy Based Challenge"
// Specifies the settings for policy rule based challenge
type PolicyBasedChallenge struct {
	// JavaScript challenge parameters choice
	//
	// x-displayName: "JavaScript Challenge Parameters"
	// Select Default or Custom Parameters
	//
	// Types that are valid to be assigned to JsChallengeParametersChoice:
	//	*PolicyBasedChallenge_DefaultJsChallengeParameters
	//	*PolicyBasedChallenge_JsChallengeParameters
	JsChallengeParametersChoice isPolicyBasedChallenge_JsChallengeParametersChoice `protobuf_oneof:"js_challenge_parameters_choice"`
	// Captcha challenge parameters choice
	//
	// x-displayName: "Captcha Challenge Parameters"
	// Select Default or Custom Parameters
	//
	// Types that are valid to be assigned to CaptchaChallengeParametersChoice:
	//	*PolicyBasedChallenge_DefaultCaptchaChallengeParameters
	//	*PolicyBasedChallenge_CaptchaChallengeParameters
	CaptchaChallengeParametersChoice isPolicyBasedChallenge_CaptchaChallengeParametersChoice `protobuf_oneof:"captcha_challenge_parameters_choice"`
	// Temporary blocking parameters choice
	//
	// x-displayName: "Temporary Blocking Parameters"
	// Select Default or Custom Parameters
	//
	// Types that are valid to be assigned to TemporaryBlockingParametersChoice:
	//	*PolicyBasedChallenge_DefaultTemporaryBlockingParameters
	//	*PolicyBasedChallenge_TemporaryUserBlocking
	TemporaryBlockingParametersChoice isPolicyBasedChallenge_TemporaryBlockingParametersChoice `protobuf_oneof:"temporary_blocking_parameters_choice"`
	// Malicious user mitigation choice
	//
	// x-displayName: "Malicious User Mitigation Settings"
	// Settings that specify the actions to be taken when malicious users are determined to be at different threat levels.
	// User's activity is monitored and continuously analyzed for malicious behavior. From this analysis, a threat-level
	// is assigned to each user. The settings defined in malicious user mitigation specify what mitigation actions to take
	// for user determined to be at different threat levels.
	//
	// Types that are valid to be assigned to MaliciousUserMitigationChoice:
	//	*PolicyBasedChallenge_DefaultMitigationSettings
	//	*PolicyBasedChallenge_MaliciousUserMitigation
	MaliciousUserMitigationChoice isPolicyBasedChallenge_MaliciousUserMitigationChoice `protobuf_oneof:"malicious_user_mitigation_choice"`
	// challenge choice
	//
	// x-displayName: "Challenge Type"
	// x-required
	// Selection of different types of challenge.
	// Selecting javascript or captcha shallenge will enable it for all traffic served by this load balancer.
	// Policy based challenge can be used to define policy rules to enable or bypass challenge.
	//
	// Types that are valid to be assigned to ChallengeChoice:
	//	*PolicyBasedChallenge_NoChallenge
	//	*PolicyBasedChallenge_AlwaysEnableJsChallenge
	//	*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge
	ChallengeChoice isPolicyBasedChallenge_ChallengeChoice `protobuf_oneof:"challenge_choice"`
	// Challenge rule list
	//
	// x-displayName: "Challenge rule list"
	// list challenge rules to be used in policy based challenge
	RuleList *ChallengeRuleList `protobuf:"bytes,18,opt,name=rule_list,json=ruleList,proto3" json:"rule_list,omitempty"`
}

func (m *PolicyBasedChallenge) Reset()      { *m = PolicyBasedChallenge{} }
func (*PolicyBasedChallenge) ProtoMessage() {}
func (*PolicyBasedChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{2}
}
func (m *PolicyBasedChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyBasedChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PolicyBasedChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyBasedChallenge.Merge(m, src)
}
func (m *PolicyBasedChallenge) XXX_Size() int {
	return m.Size()
}
func (m *PolicyBasedChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyBasedChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyBasedChallenge proto.InternalMessageInfo

type isPolicyBasedChallenge_JsChallengeParametersChoice interface {
	isPolicyBasedChallenge_JsChallengeParametersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPolicyBasedChallenge_CaptchaChallengeParametersChoice interface {
	isPolicyBasedChallenge_CaptchaChallengeParametersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPolicyBasedChallenge_TemporaryBlockingParametersChoice interface {
	isPolicyBasedChallenge_TemporaryBlockingParametersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPolicyBasedChallenge_MaliciousUserMitigationChoice interface {
	isPolicyBasedChallenge_MaliciousUserMitigationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPolicyBasedChallenge_ChallengeChoice interface {
	isPolicyBasedChallenge_ChallengeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PolicyBasedChallenge_DefaultJsChallengeParameters struct {
	DefaultJsChallengeParameters *schema.Empty `protobuf:"bytes,2,opt,name=default_js_challenge_parameters,json=defaultJsChallengeParameters,proto3,oneof" json:"default_js_challenge_parameters,omitempty"`
}
type PolicyBasedChallenge_JsChallengeParameters struct {
	JsChallengeParameters *virtual_host.JavascriptChallengeType `protobuf:"bytes,3,opt,name=js_challenge_parameters,json=jsChallengeParameters,proto3,oneof" json:"js_challenge_parameters,omitempty"`
}
type PolicyBasedChallenge_DefaultCaptchaChallengeParameters struct {
	DefaultCaptchaChallengeParameters *schema.Empty `protobuf:"bytes,5,opt,name=default_captcha_challenge_parameters,json=defaultCaptchaChallengeParameters,proto3,oneof" json:"default_captcha_challenge_parameters,omitempty"`
}
type PolicyBasedChallenge_CaptchaChallengeParameters struct {
	CaptchaChallengeParameters *virtual_host.CaptchaChallengeType `protobuf:"bytes,6,opt,name=captcha_challenge_parameters,json=captchaChallengeParameters,proto3,oneof" json:"captcha_challenge_parameters,omitempty"`
}
type PolicyBasedChallenge_DefaultTemporaryBlockingParameters struct {
	DefaultTemporaryBlockingParameters *schema.Empty `protobuf:"bytes,8,opt,name=default_temporary_blocking_parameters,json=defaultTemporaryBlockingParameters,proto3,oneof" json:"default_temporary_blocking_parameters,omitempty"`
}
type PolicyBasedChallenge_TemporaryUserBlocking struct {
	TemporaryUserBlocking *virtual_host.TemporaryUserBlockingType `protobuf:"bytes,9,opt,name=temporary_user_blocking,json=temporaryUserBlocking,proto3,oneof" json:"temporary_user_blocking,omitempty"`
}
type PolicyBasedChallenge_DefaultMitigationSettings struct {
	DefaultMitigationSettings *schema.Empty `protobuf:"bytes,11,opt,name=default_mitigation_settings,json=defaultMitigationSettings,proto3,oneof" json:"default_mitigation_settings,omitempty"`
}
type PolicyBasedChallenge_MaliciousUserMitigation struct {
	MaliciousUserMitigation *views.ObjectRefType `protobuf:"bytes,12,opt,name=malicious_user_mitigation,json=maliciousUserMitigation,proto3,oneof" json:"malicious_user_mitigation,omitempty"`
}
type PolicyBasedChallenge_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,14,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type PolicyBasedChallenge_AlwaysEnableJsChallenge struct {
	AlwaysEnableJsChallenge *schema.Empty `protobuf:"bytes,15,opt,name=always_enable_js_challenge,json=alwaysEnableJsChallenge,proto3,oneof" json:"always_enable_js_challenge,omitempty"`
}
type PolicyBasedChallenge_AlwaysEnableCaptchaChallenge struct {
	AlwaysEnableCaptchaChallenge *schema.Empty `protobuf:"bytes,16,opt,name=always_enable_captcha_challenge,json=alwaysEnableCaptchaChallenge,proto3,oneof" json:"always_enable_captcha_challenge,omitempty"`
}

func (*PolicyBasedChallenge_DefaultJsChallengeParameters) isPolicyBasedChallenge_JsChallengeParametersChoice() {
}
func (*PolicyBasedChallenge_JsChallengeParameters) isPolicyBasedChallenge_JsChallengeParametersChoice() {
}
func (*PolicyBasedChallenge_DefaultCaptchaChallengeParameters) isPolicyBasedChallenge_CaptchaChallengeParametersChoice() {
}
func (*PolicyBasedChallenge_CaptchaChallengeParameters) isPolicyBasedChallenge_CaptchaChallengeParametersChoice() {
}
func (*PolicyBasedChallenge_DefaultTemporaryBlockingParameters) isPolicyBasedChallenge_TemporaryBlockingParametersChoice() {
}
func (*PolicyBasedChallenge_TemporaryUserBlocking) isPolicyBasedChallenge_TemporaryBlockingParametersChoice() {
}
func (*PolicyBasedChallenge_DefaultMitigationSettings) isPolicyBasedChallenge_MaliciousUserMitigationChoice() {
}
func (*PolicyBasedChallenge_MaliciousUserMitigation) isPolicyBasedChallenge_MaliciousUserMitigationChoice() {
}
func (*PolicyBasedChallenge_NoChallenge) isPolicyBasedChallenge_ChallengeChoice()                  {}
func (*PolicyBasedChallenge_AlwaysEnableJsChallenge) isPolicyBasedChallenge_ChallengeChoice()      {}
func (*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) isPolicyBasedChallenge_ChallengeChoice() {}

func (m *PolicyBasedChallenge) GetJsChallengeParametersChoice() isPolicyBasedChallenge_JsChallengeParametersChoice {
	if m != nil {
		return m.JsChallengeParametersChoice
	}
	return nil
}
func (m *PolicyBasedChallenge) GetCaptchaChallengeParametersChoice() isPolicyBasedChallenge_CaptchaChallengeParametersChoice {
	if m != nil {
		return m.CaptchaChallengeParametersChoice
	}
	return nil
}
func (m *PolicyBasedChallenge) GetTemporaryBlockingParametersChoice() isPolicyBasedChallenge_TemporaryBlockingParametersChoice {
	if m != nil {
		return m.TemporaryBlockingParametersChoice
	}
	return nil
}
func (m *PolicyBasedChallenge) GetMaliciousUserMitigationChoice() isPolicyBasedChallenge_MaliciousUserMitigationChoice {
	if m != nil {
		return m.MaliciousUserMitigationChoice
	}
	return nil
}
func (m *PolicyBasedChallenge) GetChallengeChoice() isPolicyBasedChallenge_ChallengeChoice {
	if m != nil {
		return m.ChallengeChoice
	}
	return nil
}

func (m *PolicyBasedChallenge) GetDefaultJsChallengeParameters() *schema.Empty {
	if x, ok := m.GetJsChallengeParametersChoice().(*PolicyBasedChallenge_DefaultJsChallengeParameters); ok {
		return x.DefaultJsChallengeParameters
	}
	return nil
}

func (m *PolicyBasedChallenge) GetJsChallengeParameters() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetJsChallengeParametersChoice().(*PolicyBasedChallenge_JsChallengeParameters); ok {
		return x.JsChallengeParameters
	}
	return nil
}

func (m *PolicyBasedChallenge) GetDefaultCaptchaChallengeParameters() *schema.Empty {
	if x, ok := m.GetCaptchaChallengeParametersChoice().(*PolicyBasedChallenge_DefaultCaptchaChallengeParameters); ok {
		return x.DefaultCaptchaChallengeParameters
	}
	return nil
}

func (m *PolicyBasedChallenge) GetCaptchaChallengeParameters() *virtual_host.CaptchaChallengeType {
	if x, ok := m.GetCaptchaChallengeParametersChoice().(*PolicyBasedChallenge_CaptchaChallengeParameters); ok {
		return x.CaptchaChallengeParameters
	}
	return nil
}

func (m *PolicyBasedChallenge) GetDefaultTemporaryBlockingParameters() *schema.Empty {
	if x, ok := m.GetTemporaryBlockingParametersChoice().(*PolicyBasedChallenge_DefaultTemporaryBlockingParameters); ok {
		return x.DefaultTemporaryBlockingParameters
	}
	return nil
}

func (m *PolicyBasedChallenge) GetTemporaryUserBlocking() *virtual_host.TemporaryUserBlockingType {
	if x, ok := m.GetTemporaryBlockingParametersChoice().(*PolicyBasedChallenge_TemporaryUserBlocking); ok {
		return x.TemporaryUserBlocking
	}
	return nil
}

func (m *PolicyBasedChallenge) GetDefaultMitigationSettings() *schema.Empty {
	if x, ok := m.GetMaliciousUserMitigationChoice().(*PolicyBasedChallenge_DefaultMitigationSettings); ok {
		return x.DefaultMitigationSettings
	}
	return nil
}

func (m *PolicyBasedChallenge) GetMaliciousUserMitigation() *views.ObjectRefType {
	if x, ok := m.GetMaliciousUserMitigationChoice().(*PolicyBasedChallenge_MaliciousUserMitigation); ok {
		return x.MaliciousUserMitigation
	}
	return nil
}

func (m *PolicyBasedChallenge) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeChoice().(*PolicyBasedChallenge_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetAlwaysEnableJsChallenge() *schema.Empty {
	if x, ok := m.GetChallengeChoice().(*PolicyBasedChallenge_AlwaysEnableJsChallenge); ok {
		return x.AlwaysEnableJsChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetAlwaysEnableCaptchaChallenge() *schema.Empty {
	if x, ok := m.GetChallengeChoice().(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge); ok {
		return x.AlwaysEnableCaptchaChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetRuleList() *ChallengeRuleList {
	if m != nil {
		return m.RuleList
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PolicyBasedChallenge) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PolicyBasedChallenge_DefaultJsChallengeParameters)(nil),
		(*PolicyBasedChallenge_JsChallengeParameters)(nil),
		(*PolicyBasedChallenge_DefaultCaptchaChallengeParameters)(nil),
		(*PolicyBasedChallenge_CaptchaChallengeParameters)(nil),
		(*PolicyBasedChallenge_DefaultTemporaryBlockingParameters)(nil),
		(*PolicyBasedChallenge_TemporaryUserBlocking)(nil),
		(*PolicyBasedChallenge_DefaultMitigationSettings)(nil),
		(*PolicyBasedChallenge_MaliciousUserMitigation)(nil),
		(*PolicyBasedChallenge_NoChallenge)(nil),
		(*PolicyBasedChallenge_AlwaysEnableJsChallenge)(nil),
		(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge)(nil),
	}
}

// Challenge Rule
//
// x-displayName: "Challenge Rule"
// Challenge rule
type ChallengeRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// spec
	//
	// x-displayName: "Challenge Rule Specification"
	// x-required
	// Specification for the rule including match predicates and actions.
	Spec *service_policy_rule.ChallengeRuleSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *ChallengeRule) Reset()      { *m = ChallengeRule{} }
func (*ChallengeRule) ProtoMessage() {}
func (*ChallengeRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{3}
}
func (m *ChallengeRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChallengeRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeRule.Merge(m, src)
}
func (m *ChallengeRule) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeRule.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeRule proto.InternalMessageInfo

func (m *ChallengeRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ChallengeRule) GetSpec() *service_policy_rule.ChallengeRuleSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// Challenge Rule List
//
// x-displayName: "Challenge Rule List"
// List of challenge rules to be used in policy based challenge
type ChallengeRuleList struct {
	// Rules
	//
	// x-displayName: "Rules"
	// Rules that specify the match conditions and challenge type to be launched.
	// When a challenge type is selected to be always enabled,
	// these rules can be used to disable challenge or launch a different challenge for requests that match the specified conditions
	Rules []*ChallengeRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *ChallengeRuleList) Reset()      { *m = ChallengeRuleList{} }
func (*ChallengeRuleList) ProtoMessage() {}
func (*ChallengeRuleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{4}
}
func (m *ChallengeRuleList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeRuleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChallengeRuleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeRuleList.Merge(m, src)
}
func (m *ChallengeRuleList) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeRuleList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeRuleList.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeRuleList proto.InternalMessageInfo

func (m *ChallengeRuleList) GetRules() []*ChallengeRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// IP Threat Category List Type
//
// x-displayName: "IP Threat Category List"
// List of ip threat categories
type IPThreatCategoryListType struct {
	// IP Threat Categories
	//
	// x-displayName: "List of IP Threat Categories to choose"
	// x-required
	// If the source IP matches on atleast one of the enabled IP threat categories, the request will be denied.
	IpThreatCategories []policy.IPThreatCategory `protobuf:"varint,1,rep,packed,name=ip_threat_categories,json=ipThreatCategories,proto3,enum=ves.io.schema.policy.IPThreatCategory" json:"ip_threat_categories,omitempty"`
}

func (m *IPThreatCategoryListType) Reset()      { *m = IPThreatCategoryListType{} }
func (*IPThreatCategoryListType) ProtoMessage() {}
func (*IPThreatCategoryListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{5}
}
func (m *IPThreatCategoryListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPThreatCategoryListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IPThreatCategoryListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPThreatCategoryListType.Merge(m, src)
}
func (m *IPThreatCategoryListType) XXX_Size() int {
	return m.Size()
}
func (m *IPThreatCategoryListType) XXX_DiscardUnknown() {
	xxx_messageInfo_IPThreatCategoryListType.DiscardUnknown(m)
}

var xxx_messageInfo_IPThreatCategoryListType proto.InternalMessageInfo

func (m *IPThreatCategoryListType) GetIpThreatCategories() []policy.IPThreatCategory {
	if m != nil {
		return m.IpThreatCategories
	}
	return nil
}

// HTTP Header
//
// x-displayName: "HTTP Header"
// Request header name and value pairs
type HttpHeaderMatcherList struct {
	// headers
	//
	// x-displayName: "HTTP Headers"
	// x-required
	// List of HTTP header name and value pairs
	Headers []*schema.HeaderMatcherType `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (m *HttpHeaderMatcherList) Reset()      { *m = HttpHeaderMatcherList{} }
func (*HttpHeaderMatcherList) ProtoMessage() {}
func (*HttpHeaderMatcherList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{6}
}
func (m *HttpHeaderMatcherList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpHeaderMatcherList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HttpHeaderMatcherList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpHeaderMatcherList.Merge(m, src)
}
func (m *HttpHeaderMatcherList) XXX_Size() int {
	return m.Size()
}
func (m *HttpHeaderMatcherList) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpHeaderMatcherList.DiscardUnknown(m)
}

var xxx_messageInfo_HttpHeaderMatcherList proto.InternalMessageInfo

func (m *HttpHeaderMatcherList) GetHeaders() []*schema.HeaderMatcherType {
	if m != nil {
		return m.Headers
	}
	return nil
}

// SimpleClientSrcRule
//
// x-displayName: "Client Rule"
// Simple client source rule specifies the sources to be blocked or trusted (skip WAF)
type SimpleClientSrcRule struct {
	// Client Identifier
	//
	// x-displayName: "Client Identifier"
	// x-required
	// Client identifier that should be used for the client rule
	//
	// Types that are valid to be assigned to ClientSourceChoice:
	//	*SimpleClientSrcRule_IpPrefix
	//	*SimpleClientSrcRule_AsNumber
	//	*SimpleClientSrcRule_HttpHeader
	//	*SimpleClientSrcRule_UserIdentifier
	ClientSourceChoice isSimpleClientSrcRule_ClientSourceChoice `protobuf_oneof:"client_source_choice"`
	// expiration timestamp
	//
	// x-displayName: "Expiration Timestamp"
	// x-example: "2019-12-31:44:34.171543432Z"
	// The expiration_timestamp is the RFC 3339 format timestamp at which the containing rule is considered to be logically expired. The rule continues to exist in
	// the configuration but is not applied anymore.
	ExpirationTimestamp *types.Timestamp `protobuf:"bytes,9,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// action
	//
	// x-displayName: "Action"
	// Action that should be taken when client identifier matches the rule
	//
	// Types that are valid to be assigned to ActionChoice:
	//	*SimpleClientSrcRule_SkipProcessing
	//	*SimpleClientSrcRule_WafSkipProcessing
	//	*SimpleClientSrcRule_BotSkipProcessing
	ActionChoice isSimpleClientSrcRule_ActionChoice `protobuf_oneof:"action_choice"`
	// actions
	//
	// x-displayName: "Actions"
	// Actions that should be taken when client identifier matches the rule
	Actions []ClientSrcRuleAction `protobuf:"varint,16,rep,packed,name=actions,proto3,enum=ves.io.schema.views.common_waf.ClientSrcRuleAction" json:"actions,omitempty"`
}

func (m *SimpleClientSrcRule) Reset()      { *m = SimpleClientSrcRule{} }
func (*SimpleClientSrcRule) ProtoMessage() {}
func (*SimpleClientSrcRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{7}
}
func (m *SimpleClientSrcRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleClientSrcRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SimpleClientSrcRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleClientSrcRule.Merge(m, src)
}
func (m *SimpleClientSrcRule) XXX_Size() int {
	return m.Size()
}
func (m *SimpleClientSrcRule) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleClientSrcRule.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleClientSrcRule proto.InternalMessageInfo

type isSimpleClientSrcRule_ClientSourceChoice interface {
	isSimpleClientSrcRule_ClientSourceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSimpleClientSrcRule_ActionChoice interface {
	isSimpleClientSrcRule_ActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SimpleClientSrcRule_IpPrefix struct {
	IpPrefix string `protobuf:"bytes,4,opt,name=ip_prefix,json=ipPrefix,proto3,oneof" json:"ip_prefix,omitempty"`
}
type SimpleClientSrcRule_AsNumber struct {
	AsNumber uint32 `protobuf:"varint,5,opt,name=as_number,json=asNumber,proto3,oneof" json:"as_number,omitempty"`
}
type SimpleClientSrcRule_HttpHeader struct {
	HttpHeader *HttpHeaderMatcherList `protobuf:"bytes,15,opt,name=http_header,json=httpHeader,proto3,oneof" json:"http_header,omitempty"`
}
type SimpleClientSrcRule_UserIdentifier struct {
	UserIdentifier string `protobuf:"bytes,17,opt,name=user_identifier,json=userIdentifier,proto3,oneof" json:"user_identifier,omitempty"`
}
type SimpleClientSrcRule_SkipProcessing struct {
	SkipProcessing *schema.Empty `protobuf:"bytes,12,opt,name=skip_processing,json=skipProcessing,proto3,oneof" json:"skip_processing,omitempty"`
}
type SimpleClientSrcRule_WafSkipProcessing struct {
	WafSkipProcessing *schema.Empty `protobuf:"bytes,13,opt,name=waf_skip_processing,json=wafSkipProcessing,proto3,oneof" json:"waf_skip_processing,omitempty"`
}
type SimpleClientSrcRule_BotSkipProcessing struct {
	BotSkipProcessing *schema.Empty `protobuf:"bytes,14,opt,name=bot_skip_processing,json=botSkipProcessing,proto3,oneof" json:"bot_skip_processing,omitempty"`
}

func (*SimpleClientSrcRule_IpPrefix) isSimpleClientSrcRule_ClientSourceChoice()       {}
func (*SimpleClientSrcRule_AsNumber) isSimpleClientSrcRule_ClientSourceChoice()       {}
func (*SimpleClientSrcRule_HttpHeader) isSimpleClientSrcRule_ClientSourceChoice()     {}
func (*SimpleClientSrcRule_UserIdentifier) isSimpleClientSrcRule_ClientSourceChoice() {}
func (*SimpleClientSrcRule_SkipProcessing) isSimpleClientSrcRule_ActionChoice()       {}
func (*SimpleClientSrcRule_WafSkipProcessing) isSimpleClientSrcRule_ActionChoice()    {}
func (*SimpleClientSrcRule_BotSkipProcessing) isSimpleClientSrcRule_ActionChoice()    {}

func (m *SimpleClientSrcRule) GetClientSourceChoice() isSimpleClientSrcRule_ClientSourceChoice {
	if m != nil {
		return m.ClientSourceChoice
	}
	return nil
}
func (m *SimpleClientSrcRule) GetActionChoice() isSimpleClientSrcRule_ActionChoice {
	if m != nil {
		return m.ActionChoice
	}
	return nil
}

func (m *SimpleClientSrcRule) GetIpPrefix() string {
	if x, ok := m.GetClientSourceChoice().(*SimpleClientSrcRule_IpPrefix); ok {
		return x.IpPrefix
	}
	return ""
}

func (m *SimpleClientSrcRule) GetAsNumber() uint32 {
	if x, ok := m.GetClientSourceChoice().(*SimpleClientSrcRule_AsNumber); ok {
		return x.AsNumber
	}
	return 0
}

func (m *SimpleClientSrcRule) GetHttpHeader() *HttpHeaderMatcherList {
	if x, ok := m.GetClientSourceChoice().(*SimpleClientSrcRule_HttpHeader); ok {
		return x.HttpHeader
	}
	return nil
}

func (m *SimpleClientSrcRule) GetUserIdentifier() string {
	if x, ok := m.GetClientSourceChoice().(*SimpleClientSrcRule_UserIdentifier); ok {
		return x.UserIdentifier
	}
	return ""
}

func (m *SimpleClientSrcRule) GetExpirationTimestamp() *types.Timestamp {
	if m != nil {
		return m.ExpirationTimestamp
	}
	return nil
}

func (m *SimpleClientSrcRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SimpleClientSrcRule) GetSkipProcessing() *schema.Empty {
	if x, ok := m.GetActionChoice().(*SimpleClientSrcRule_SkipProcessing); ok {
		return x.SkipProcessing
	}
	return nil
}

func (m *SimpleClientSrcRule) GetWafSkipProcessing() *schema.Empty {
	if x, ok := m.GetActionChoice().(*SimpleClientSrcRule_WafSkipProcessing); ok {
		return x.WafSkipProcessing
	}
	return nil
}

func (m *SimpleClientSrcRule) GetBotSkipProcessing() *schema.Empty {
	if x, ok := m.GetActionChoice().(*SimpleClientSrcRule_BotSkipProcessing); ok {
		return x.BotSkipProcessing
	}
	return nil
}

func (m *SimpleClientSrcRule) GetActions() []ClientSrcRuleAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SimpleClientSrcRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SimpleClientSrcRule_IpPrefix)(nil),
		(*SimpleClientSrcRule_AsNumber)(nil),
		(*SimpleClientSrcRule_HttpHeader)(nil),
		(*SimpleClientSrcRule_UserIdentifier)(nil),
		(*SimpleClientSrcRule_SkipProcessing)(nil),
		(*SimpleClientSrcRule_WafSkipProcessing)(nil),
		(*SimpleClientSrcRule_BotSkipProcessing)(nil),
	}
}

// RateLimitConfigType
//
// x-displayName: "RateLimitConfigType"
type RateLimitConfigType struct {
	// rate_limiter
	//
	// x-displayName: "Request Rate Limiter"
	// Requests to the virtual_host are rate limited based on the parameters specified in the rate_limiter.
	RateLimiter *rate_limiter.RateLimitValue `protobuf:"bytes,1,opt,name=rate_limiter,json=rateLimiter,proto3" json:"rate_limiter,omitempty"`
	// IP Allowed List
	//
	// x-displayName: "IP(s) Allowed without Rate Limiting"
	// x-required
	// Allowed List of IPs for which rate limiting will be disabled.
	//
	// Types that are valid to be assigned to IpAllowedListChoice:
	//	*RateLimitConfigType_NoIpAllowedList
	//	*RateLimitConfigType_IpAllowedList
	//	*RateLimitConfigType_CustomIpAllowedList
	IpAllowedListChoice isRateLimitConfigType_IpAllowedListChoice `protobuf_oneof:"ip_allowed_list_choice"`
	// policy choice
	//
	// x-displayName: "Rate Limiter Policies"
	// x-required
	// Manage rate limiter policies. Note that an implicit policy based on the IP Allowed List is always applied as the first policy.
	//
	// Types that are valid to be assigned to PolicyChoice:
	//	*RateLimitConfigType_NoPolicies
	//	*RateLimitConfigType_Policies
	PolicyChoice isRateLimitConfigType_PolicyChoice `protobuf_oneof:"policy_choice"`
}

func (m *RateLimitConfigType) Reset()      { *m = RateLimitConfigType{} }
func (*RateLimitConfigType) ProtoMessage() {}
func (*RateLimitConfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{8}
}
func (m *RateLimitConfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitConfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RateLimitConfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitConfigType.Merge(m, src)
}
func (m *RateLimitConfigType) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitConfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitConfigType.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitConfigType proto.InternalMessageInfo

type isRateLimitConfigType_IpAllowedListChoice interface {
	isRateLimitConfigType_IpAllowedListChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRateLimitConfigType_PolicyChoice interface {
	isRateLimitConfigType_PolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RateLimitConfigType_NoIpAllowedList struct {
	NoIpAllowedList *schema.Empty `protobuf:"bytes,3,opt,name=no_ip_allowed_list,json=noIpAllowedList,proto3,oneof" json:"no_ip_allowed_list,omitempty"`
}
type RateLimitConfigType_IpAllowedList struct {
	IpAllowedList *views.PrefixStringListType `protobuf:"bytes,4,opt,name=ip_allowed_list,json=ipAllowedList,proto3,oneof" json:"ip_allowed_list,omitempty"`
}
type RateLimitConfigType_CustomIpAllowedList struct {
	CustomIpAllowedList *CustomIpAllowedList `protobuf:"bytes,5,opt,name=custom_ip_allowed_list,json=customIpAllowedList,proto3,oneof" json:"custom_ip_allowed_list,omitempty"`
}
type RateLimitConfigType_NoPolicies struct {
	NoPolicies *schema.Empty `protobuf:"bytes,12,opt,name=no_policies,json=noPolicies,proto3,oneof" json:"no_policies,omitempty"`
}
type RateLimitConfigType_Policies struct {
	Policies *rate_limiter_policy.PolicyList `protobuf:"bytes,13,opt,name=policies,proto3,oneof" json:"policies,omitempty"`
}

func (*RateLimitConfigType_NoIpAllowedList) isRateLimitConfigType_IpAllowedListChoice()     {}
func (*RateLimitConfigType_IpAllowedList) isRateLimitConfigType_IpAllowedListChoice()       {}
func (*RateLimitConfigType_CustomIpAllowedList) isRateLimitConfigType_IpAllowedListChoice() {}
func (*RateLimitConfigType_NoPolicies) isRateLimitConfigType_PolicyChoice()                 {}
func (*RateLimitConfigType_Policies) isRateLimitConfigType_PolicyChoice()                   {}

func (m *RateLimitConfigType) GetIpAllowedListChoice() isRateLimitConfigType_IpAllowedListChoice {
	if m != nil {
		return m.IpAllowedListChoice
	}
	return nil
}
func (m *RateLimitConfigType) GetPolicyChoice() isRateLimitConfigType_PolicyChoice {
	if m != nil {
		return m.PolicyChoice
	}
	return nil
}

func (m *RateLimitConfigType) GetRateLimiter() *rate_limiter.RateLimitValue {
	if m != nil {
		return m.RateLimiter
	}
	return nil
}

func (m *RateLimitConfigType) GetNoIpAllowedList() *schema.Empty {
	if x, ok := m.GetIpAllowedListChoice().(*RateLimitConfigType_NoIpAllowedList); ok {
		return x.NoIpAllowedList
	}
	return nil
}

func (m *RateLimitConfigType) GetIpAllowedList() *views.PrefixStringListType {
	if x, ok := m.GetIpAllowedListChoice().(*RateLimitConfigType_IpAllowedList); ok {
		return x.IpAllowedList
	}
	return nil
}

func (m *RateLimitConfigType) GetCustomIpAllowedList() *CustomIpAllowedList {
	if x, ok := m.GetIpAllowedListChoice().(*RateLimitConfigType_CustomIpAllowedList); ok {
		return x.CustomIpAllowedList
	}
	return nil
}

func (m *RateLimitConfigType) GetNoPolicies() *schema.Empty {
	if x, ok := m.GetPolicyChoice().(*RateLimitConfigType_NoPolicies); ok {
		return x.NoPolicies
	}
	return nil
}

func (m *RateLimitConfigType) GetPolicies() *rate_limiter_policy.PolicyList {
	if x, ok := m.GetPolicyChoice().(*RateLimitConfigType_Policies); ok {
		return x.Policies
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RateLimitConfigType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RateLimitConfigType_NoIpAllowedList)(nil),
		(*RateLimitConfigType_IpAllowedList)(nil),
		(*RateLimitConfigType_CustomIpAllowedList)(nil),
		(*RateLimitConfigType_NoPolicies)(nil),
		(*RateLimitConfigType_Policies)(nil),
	}
}

// APIRateLimit Legacy
//
// x-displayName: "APIRateLimit Legacy"
// temporary message type used pre-migration. This will be removed later.
type APIRateLimitLegacy struct {
	// IP Allowed List
	//
	// x-displayName: "IP(s) Allowed without Rate Limiting"
	// x-required
	// Allowed List of IPs for which rate limiting will be disabled.
	//
	// Types that are valid to be assigned to IpAllowedListChoice:
	//	*APIRateLimitLegacy_NoIpAllowedList
	//	*APIRateLimitLegacy_IpAllowedList
	//	*APIRateLimitLegacy_CustomIpAllowedList
	//	*APIRateLimitLegacy_BypassRateLimitingRules
	IpAllowedListChoice isAPIRateLimitLegacy_IpAllowedListChoice `protobuf_oneof:"ip_allowed_list_choice"`
	// server_url_policy
	//
	// x-displayName: "Server URLs"
	// Set of rules for entire domain or base path that contain multiple endpoints.
	// Order is matter as it uses first match policy.
	// For matching also specific endpoints you can use the API endpoint rules set bellow.
	ServerUrlRules []*ServerUrlRule `protobuf:"bytes,5,rep,name=server_url_rules,json=serverUrlRules,proto3" json:"server_url_rules,omitempty"`
	// api_endpoint_policy
	//
	// x-displayName: "API Endpoints"
	// Sets of rules for a specific endpoints.
	// Order is matter as it uses first match policy.
	// For creating rule that contain a whole domain or group of endpoints, please use the server URL rules above.
	ApiEndpointRules []*ApiEndpointRule `protobuf:"bytes,6,rep,name=api_endpoint_rules,json=apiEndpointRules,proto3" json:"api_endpoint_rules,omitempty"`
}

func (m *APIRateLimitLegacy) Reset()      { *m = APIRateLimitLegacy{} }
func (*APIRateLimitLegacy) ProtoMessage() {}
func (*APIRateLimitLegacy) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{9}
}
func (m *APIRateLimitLegacy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIRateLimitLegacy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIRateLimitLegacy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIRateLimitLegacy.Merge(m, src)
}
func (m *APIRateLimitLegacy) XXX_Size() int {
	return m.Size()
}
func (m *APIRateLimitLegacy) XXX_DiscardUnknown() {
	xxx_messageInfo_APIRateLimitLegacy.DiscardUnknown(m)
}

var xxx_messageInfo_APIRateLimitLegacy proto.InternalMessageInfo

type isAPIRateLimitLegacy_IpAllowedListChoice interface {
	isAPIRateLimitLegacy_IpAllowedListChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type APIRateLimitLegacy_NoIpAllowedList struct {
	NoIpAllowedList *schema.Empty `protobuf:"bytes,2,opt,name=no_ip_allowed_list,json=noIpAllowedList,proto3,oneof" json:"no_ip_allowed_list,omitempty"`
}
type APIRateLimitLegacy_IpAllowedList struct {
	IpAllowedList *views.PrefixStringListType `protobuf:"bytes,3,opt,name=ip_allowed_list,json=ipAllowedList,proto3,oneof" json:"ip_allowed_list,omitempty"`
}
type APIRateLimitLegacy_CustomIpAllowedList struct {
	CustomIpAllowedList *CustomIpAllowedList `protobuf:"bytes,4,opt,name=custom_ip_allowed_list,json=customIpAllowedList,proto3,oneof" json:"custom_ip_allowed_list,omitempty"`
}
type APIRateLimitLegacy_BypassRateLimitingRules struct {
	BypassRateLimitingRules *BypassRateLimitingRules `protobuf:"bytes,7,opt,name=bypass_rate_limiting_rules,json=bypassRateLimitingRules,proto3,oneof" json:"bypass_rate_limiting_rules,omitempty"`
}

func (*APIRateLimitLegacy_NoIpAllowedList) isAPIRateLimitLegacy_IpAllowedListChoice()         {}
func (*APIRateLimitLegacy_IpAllowedList) isAPIRateLimitLegacy_IpAllowedListChoice()           {}
func (*APIRateLimitLegacy_CustomIpAllowedList) isAPIRateLimitLegacy_IpAllowedListChoice()     {}
func (*APIRateLimitLegacy_BypassRateLimitingRules) isAPIRateLimitLegacy_IpAllowedListChoice() {}

func (m *APIRateLimitLegacy) GetIpAllowedListChoice() isAPIRateLimitLegacy_IpAllowedListChoice {
	if m != nil {
		return m.IpAllowedListChoice
	}
	return nil
}

func (m *APIRateLimitLegacy) GetNoIpAllowedList() *schema.Empty {
	if x, ok := m.GetIpAllowedListChoice().(*APIRateLimitLegacy_NoIpAllowedList); ok {
		return x.NoIpAllowedList
	}
	return nil
}

func (m *APIRateLimitLegacy) GetIpAllowedList() *views.PrefixStringListType {
	if x, ok := m.GetIpAllowedListChoice().(*APIRateLimitLegacy_IpAllowedList); ok {
		return x.IpAllowedList
	}
	return nil
}

func (m *APIRateLimitLegacy) GetCustomIpAllowedList() *CustomIpAllowedList {
	if x, ok := m.GetIpAllowedListChoice().(*APIRateLimitLegacy_CustomIpAllowedList); ok {
		return x.CustomIpAllowedList
	}
	return nil
}

func (m *APIRateLimitLegacy) GetBypassRateLimitingRules() *BypassRateLimitingRules {
	if x, ok := m.GetIpAllowedListChoice().(*APIRateLimitLegacy_BypassRateLimitingRules); ok {
		return x.BypassRateLimitingRules
	}
	return nil
}

func (m *APIRateLimitLegacy) GetServerUrlRules() []*ServerUrlRule {
	if m != nil {
		return m.ServerUrlRules
	}
	return nil
}

func (m *APIRateLimitLegacy) GetApiEndpointRules() []*ApiEndpointRule {
	if m != nil {
		return m.ApiEndpointRules
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*APIRateLimitLegacy) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*APIRateLimitLegacy_NoIpAllowedList)(nil),
		(*APIRateLimitLegacy_IpAllowedList)(nil),
		(*APIRateLimitLegacy_CustomIpAllowedList)(nil),
		(*APIRateLimitLegacy_BypassRateLimitingRules)(nil),
	}
}

// APIRateLimit
//
// x-displayName: "APIRateLimit"
type APIRateLimit struct {
	// IP Allowed List
	//
	// x-displayName: "IP(s) Allowed without Rate Limiting"
	// x-required
	// Allowed List of IPs for which rate limiting will be disabled.
	//
	// Types that are valid to be assigned to IpAllowedListChoice:
	//	*APIRateLimit_NoIpAllowedList
	//	*APIRateLimit_IpAllowedList
	//	*APIRateLimit_CustomIpAllowedList
	//	*APIRateLimit_BypassRateLimitingRules
	IpAllowedListChoice isAPIRateLimit_IpAllowedListChoice `protobuf_oneof:"ip_allowed_list_choice"`
	// server_url_policy
	//
	// x-displayName: "Server URLs"
	// Set of rules for entire domain or base path that contain multiple endpoints.
	// Order is matter as it uses first match policy.
	// For matching also specific endpoints you can use the API endpoint rules set bellow.
	ServerUrlRules []*ServerUrlRule `protobuf:"bytes,6,rep,name=server_url_rules,json=serverUrlRules,proto3" json:"server_url_rules,omitempty"`
	// api_endpoint_policy
	//
	// x-displayName: "API Endpoints"
	// Sets of rules for a specific endpoints.
	// Order is matter as it uses first match policy.
	// For creating rule that contain a whole domain or group of endpoints, please use the server URL rules above.
	ApiEndpointRules []*ApiEndpointRule `protobuf:"bytes,7,rep,name=api_endpoint_rules,json=apiEndpointRules,proto3" json:"api_endpoint_rules,omitempty"`
}

func (m *APIRateLimit) Reset()      { *m = APIRateLimit{} }
func (*APIRateLimit) ProtoMessage() {}
func (*APIRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{10}
}
func (m *APIRateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIRateLimit.Merge(m, src)
}
func (m *APIRateLimit) XXX_Size() int {
	return m.Size()
}
func (m *APIRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_APIRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_APIRateLimit proto.InternalMessageInfo

type isAPIRateLimit_IpAllowedListChoice interface {
	isAPIRateLimit_IpAllowedListChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type APIRateLimit_NoIpAllowedList struct {
	NoIpAllowedList *schema.Empty `protobuf:"bytes,2,opt,name=no_ip_allowed_list,json=noIpAllowedList,proto3,oneof" json:"no_ip_allowed_list,omitempty"`
}
type APIRateLimit_IpAllowedList struct {
	IpAllowedList *views.PrefixStringListType `protobuf:"bytes,3,opt,name=ip_allowed_list,json=ipAllowedList,proto3,oneof" json:"ip_allowed_list,omitempty"`
}
type APIRateLimit_CustomIpAllowedList struct {
	CustomIpAllowedList *CustomIpAllowedList `protobuf:"bytes,4,opt,name=custom_ip_allowed_list,json=customIpAllowedList,proto3,oneof" json:"custom_ip_allowed_list,omitempty"`
}
type APIRateLimit_BypassRateLimitingRules struct {
	BypassRateLimitingRules *BypassRateLimitingRules `protobuf:"bytes,5,opt,name=bypass_rate_limiting_rules,json=bypassRateLimitingRules,proto3,oneof" json:"bypass_rate_limiting_rules,omitempty"`
}

func (*APIRateLimit_NoIpAllowedList) isAPIRateLimit_IpAllowedListChoice()         {}
func (*APIRateLimit_IpAllowedList) isAPIRateLimit_IpAllowedListChoice()           {}
func (*APIRateLimit_CustomIpAllowedList) isAPIRateLimit_IpAllowedListChoice()     {}
func (*APIRateLimit_BypassRateLimitingRules) isAPIRateLimit_IpAllowedListChoice() {}

func (m *APIRateLimit) GetIpAllowedListChoice() isAPIRateLimit_IpAllowedListChoice {
	if m != nil {
		return m.IpAllowedListChoice
	}
	return nil
}

func (m *APIRateLimit) GetNoIpAllowedList() *schema.Empty {
	if x, ok := m.GetIpAllowedListChoice().(*APIRateLimit_NoIpAllowedList); ok {
		return x.NoIpAllowedList
	}
	return nil
}

func (m *APIRateLimit) GetIpAllowedList() *views.PrefixStringListType {
	if x, ok := m.GetIpAllowedListChoice().(*APIRateLimit_IpAllowedList); ok {
		return x.IpAllowedList
	}
	return nil
}

func (m *APIRateLimit) GetCustomIpAllowedList() *CustomIpAllowedList {
	if x, ok := m.GetIpAllowedListChoice().(*APIRateLimit_CustomIpAllowedList); ok {
		return x.CustomIpAllowedList
	}
	return nil
}

func (m *APIRateLimit) GetBypassRateLimitingRules() *BypassRateLimitingRules {
	if x, ok := m.GetIpAllowedListChoice().(*APIRateLimit_BypassRateLimitingRules); ok {
		return x.BypassRateLimitingRules
	}
	return nil
}

func (m *APIRateLimit) GetServerUrlRules() []*ServerUrlRule {
	if m != nil {
		return m.ServerUrlRules
	}
	return nil
}

func (m *APIRateLimit) GetApiEndpointRules() []*ApiEndpointRule {
	if m != nil {
		return m.ApiEndpointRules
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*APIRateLimit) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*APIRateLimit_NoIpAllowedList)(nil),
		(*APIRateLimit_IpAllowedList)(nil),
		(*APIRateLimit_CustomIpAllowedList)(nil),
		(*APIRateLimit_BypassRateLimitingRules)(nil),
	}
}

// BypassRateLimitingRule
//
// x-displayName: "Bypass Rate Limiting Rule"
type BypassRateLimitingRule struct {
	// domain choices
	//
	// x-displayName: "Domain"
	// x-required
	// Choose if the rule will apply for all domains or a specific one.
	//
	// Types that are valid to be assigned to DomainChoice:
	//	*BypassRateLimitingRule_AnyDomain
	//	*BypassRateLimitingRule_SpecificDomain
	DomainChoice isBypassRateLimitingRule_DomainChoice `protobuf_oneof:"domain_choice"`
	// TYpe
	//
	// x-displayName: "Type"
	// x-required
	//
	// Types that are valid to be assigned to DestinationType:
	//	*BypassRateLimitingRule_AnyUrl
	//	*BypassRateLimitingRule_BasePath
	//	*BypassRateLimitingRule_ApiEndpoint
	//	*BypassRateLimitingRule_ApiGroups
	DestinationType isBypassRateLimitingRule_DestinationType `protobuf_oneof:"destination_type"`
	// request_matcher
	//
	// x-displayName: "Request"
	// Conditions related to the request, such as query parameters, headers, etc.
	RequestMatcher *policy.RequestMatcher `protobuf:"bytes,9,opt,name=request_matcher,json=requestMatcher,proto3" json:"request_matcher,omitempty"`
	// client_matcher
	//
	// x-displayName: "Clients"
	// Conditions related to the origin of the request, such as client IP, TLS fingerprint, etc.
	ClientMatcher *policy.ClientMatcher `protobuf:"bytes,10,opt,name=client_matcher,json=clientMatcher,proto3" json:"client_matcher,omitempty"`
}

func (m *BypassRateLimitingRule) Reset()      { *m = BypassRateLimitingRule{} }
func (*BypassRateLimitingRule) ProtoMessage() {}
func (*BypassRateLimitingRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{11}
}
func (m *BypassRateLimitingRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BypassRateLimitingRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BypassRateLimitingRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BypassRateLimitingRule.Merge(m, src)
}
func (m *BypassRateLimitingRule) XXX_Size() int {
	return m.Size()
}
func (m *BypassRateLimitingRule) XXX_DiscardUnknown() {
	xxx_messageInfo_BypassRateLimitingRule.DiscardUnknown(m)
}

var xxx_messageInfo_BypassRateLimitingRule proto.InternalMessageInfo

type isBypassRateLimitingRule_DomainChoice interface {
	isBypassRateLimitingRule_DomainChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isBypassRateLimitingRule_DestinationType interface {
	isBypassRateLimitingRule_DestinationType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BypassRateLimitingRule_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,2,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type BypassRateLimitingRule_SpecificDomain struct {
	SpecificDomain string `protobuf:"bytes,3,opt,name=specific_domain,json=specificDomain,proto3,oneof" json:"specific_domain,omitempty"`
}
type BypassRateLimitingRule_AnyUrl struct {
	AnyUrl *schema.Empty `protobuf:"bytes,5,opt,name=any_url,json=anyUrl,proto3,oneof" json:"any_url,omitempty"`
}
type BypassRateLimitingRule_BasePath struct {
	BasePath string `protobuf:"bytes,6,opt,name=base_path,json=basePath,proto3,oneof" json:"base_path,omitempty"`
}
type BypassRateLimitingRule_ApiEndpoint struct {
	ApiEndpoint *ApiEndpointDetails `protobuf:"bytes,7,opt,name=api_endpoint,json=apiEndpoint,proto3,oneof" json:"api_endpoint,omitempty"`
}
type BypassRateLimitingRule_ApiGroups struct {
	ApiGroups *APIGroups `protobuf:"bytes,8,opt,name=api_groups,json=apiGroups,proto3,oneof" json:"api_groups,omitempty"`
}

func (*BypassRateLimitingRule_AnyDomain) isBypassRateLimitingRule_DomainChoice()      {}
func (*BypassRateLimitingRule_SpecificDomain) isBypassRateLimitingRule_DomainChoice() {}
func (*BypassRateLimitingRule_AnyUrl) isBypassRateLimitingRule_DestinationType()      {}
func (*BypassRateLimitingRule_BasePath) isBypassRateLimitingRule_DestinationType()    {}
func (*BypassRateLimitingRule_ApiEndpoint) isBypassRateLimitingRule_DestinationType() {}
func (*BypassRateLimitingRule_ApiGroups) isBypassRateLimitingRule_DestinationType()   {}

func (m *BypassRateLimitingRule) GetDomainChoice() isBypassRateLimitingRule_DomainChoice {
	if m != nil {
		return m.DomainChoice
	}
	return nil
}
func (m *BypassRateLimitingRule) GetDestinationType() isBypassRateLimitingRule_DestinationType {
	if m != nil {
		return m.DestinationType
	}
	return nil
}

func (m *BypassRateLimitingRule) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainChoice().(*BypassRateLimitingRule_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *BypassRateLimitingRule) GetSpecificDomain() string {
	if x, ok := m.GetDomainChoice().(*BypassRateLimitingRule_SpecificDomain); ok {
		return x.SpecificDomain
	}
	return ""
}

func (m *BypassRateLimitingRule) GetAnyUrl() *schema.Empty {
	if x, ok := m.GetDestinationType().(*BypassRateLimitingRule_AnyUrl); ok {
		return x.AnyUrl
	}
	return nil
}

func (m *BypassRateLimitingRule) GetBasePath() string {
	if x, ok := m.GetDestinationType().(*BypassRateLimitingRule_BasePath); ok {
		return x.BasePath
	}
	return ""
}

func (m *BypassRateLimitingRule) GetApiEndpoint() *ApiEndpointDetails {
	if x, ok := m.GetDestinationType().(*BypassRateLimitingRule_ApiEndpoint); ok {
		return x.ApiEndpoint
	}
	return nil
}

func (m *BypassRateLimitingRule) GetApiGroups() *APIGroups {
	if x, ok := m.GetDestinationType().(*BypassRateLimitingRule_ApiGroups); ok {
		return x.ApiGroups
	}
	return nil
}

func (m *BypassRateLimitingRule) GetRequestMatcher() *policy.RequestMatcher {
	if m != nil {
		return m.RequestMatcher
	}
	return nil
}

func (m *BypassRateLimitingRule) GetClientMatcher() *policy.ClientMatcher {
	if m != nil {
		return m.ClientMatcher
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BypassRateLimitingRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BypassRateLimitingRule_AnyDomain)(nil),
		(*BypassRateLimitingRule_SpecificDomain)(nil),
		(*BypassRateLimitingRule_AnyUrl)(nil),
		(*BypassRateLimitingRule_BasePath)(nil),
		(*BypassRateLimitingRule_ApiEndpoint)(nil),
		(*BypassRateLimitingRule_ApiGroups)(nil),
	}
}

// api groups
//
// x-displayName: "API Groups"
type APIGroups struct {
	// api group
	//
	// x-displayName: "API Groups"
	// x-required
	ApiGroups []string `protobuf:"bytes,2,rep,name=api_groups,json=apiGroups,proto3" json:"api_groups,omitempty"`
}

func (m *APIGroups) Reset()      { *m = APIGroups{} }
func (*APIGroups) ProtoMessage() {}
func (*APIGroups) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{12}
}
func (m *APIGroups) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIGroups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIGroups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIGroups.Merge(m, src)
}
func (m *APIGroups) XXX_Size() int {
	return m.Size()
}
func (m *APIGroups) XXX_DiscardUnknown() {
	xxx_messageInfo_APIGroups.DiscardUnknown(m)
}

var xxx_messageInfo_APIGroups proto.InternalMessageInfo

func (m *APIGroups) GetApiGroups() []string {
	if m != nil {
		return m.ApiGroups
	}
	return nil
}

// ApiEndpointDetails
//
// x-displayName: "API Endpoint"
// This defines api endpoint
type ApiEndpointDetails struct {
	// Path
	//
	// x-displayName: "Path"
	// x-required
	// x-example: "/api/v1/login"
	// Path to be matched
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Methods
	//
	// x-displayName: "Methods"
	// x-example: "GET"
	// Methods to be matched
	Methods []schema.HttpMethod `protobuf:"varint,2,rep,packed,name=methods,proto3,enum=ves.io.schema.HttpMethod" json:"methods,omitempty"`
}

func (m *ApiEndpointDetails) Reset()      { *m = ApiEndpointDetails{} }
func (*ApiEndpointDetails) ProtoMessage() {}
func (*ApiEndpointDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{13}
}
func (m *ApiEndpointDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiEndpointDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiEndpointDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiEndpointDetails.Merge(m, src)
}
func (m *ApiEndpointDetails) XXX_Size() int {
	return m.Size()
}
func (m *ApiEndpointDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiEndpointDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ApiEndpointDetails proto.InternalMessageInfo

func (m *ApiEndpointDetails) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ApiEndpointDetails) GetMethods() []schema.HttpMethod {
	if m != nil {
		return m.Methods
	}
	return nil
}

// bypass_rate_limiting_policy
//
// x-displayName: "Bypass Rate Limiting"
// This category defines rules per URL or API group. If request matches any of these rules, skip Rate Limiting.
type BypassRateLimitingRules struct {
	// bypass_rate_limiting_policy
	//
	// x-displayName: "Bypass Rate Limiting"
	// This category defines rules per URL or API group. If request matches any of these rules, skip Rate Limiting.
	BypassRateLimitingRules []*BypassRateLimitingRule `protobuf:"bytes,7,rep,name=bypass_rate_limiting_rules,json=bypassRateLimitingRules,proto3" json:"bypass_rate_limiting_rules,omitempty"`
}

func (m *BypassRateLimitingRules) Reset()      { *m = BypassRateLimitingRules{} }
func (*BypassRateLimitingRules) ProtoMessage() {}
func (*BypassRateLimitingRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{14}
}
func (m *BypassRateLimitingRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BypassRateLimitingRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BypassRateLimitingRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BypassRateLimitingRules.Merge(m, src)
}
func (m *BypassRateLimitingRules) XXX_Size() int {
	return m.Size()
}
func (m *BypassRateLimitingRules) XXX_DiscardUnknown() {
	xxx_messageInfo_BypassRateLimitingRules.DiscardUnknown(m)
}

var xxx_messageInfo_BypassRateLimitingRules proto.InternalMessageInfo

func (m *BypassRateLimitingRules) GetBypassRateLimitingRules() []*BypassRateLimitingRule {
	if m != nil {
		return m.BypassRateLimitingRules
	}
	return nil
}

// ApiEndpointRule
//
// x-displayName: "ApiEndpointRule"
type ApiEndpointRule struct {
	// domain choices
	//
	// x-displayName: "Domain"
	// x-required
	// Choose if the rule will apply for all domains or a specific one.
	//
	// Types that are valid to be assigned to DomainChoice:
	//	*ApiEndpointRule_AnyDomain
	//	*ApiEndpointRule_SpecificDomain
	DomainChoice isApiEndpointRule_DomainChoice `protobuf_oneof:"domain_choice"`
	// base path
	//
	// x-example: "/"
	// x-displayName: "Base Path"
	// The request base path.
	BasePath string `protobuf:"bytes,4,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
	// api endpoint path
	//
	// x-displayName: "API Endpoint"
	// x-example: "value"
	// x-required
	// The endpoint (path) of the request.
	ApiEndpointPath string `protobuf:"bytes,5,opt,name=api_endpoint_path,json=apiEndpointPath,proto3" json:"api_endpoint_path,omitempty"`
	// method
	//
	// x-displayName: "HTTP Methods"
	// The list of expected values for the HTTP method in the request API. The actual value of the HTTP method is extracted from the HTTP request.
	// The predicate evaluates to true if the actual HTTP method belongs is present in the list of expected values.
	ApiEndpointMethod *policy.HttpMethodMatcherType `protobuf:"bytes,6,opt,name=api_endpoint_method,json=apiEndpointMethod,proto3" json:"api_endpoint_method,omitempty"`
	// request_matcher
	//
	// x-displayName: "Request"
	// Conditions related to the request, such as query parameters, headers, etc.
	RequestMatcher *policy.RequestMatcher `protobuf:"bytes,10,opt,name=request_matcher,json=requestMatcher,proto3" json:"request_matcher,omitempty"`
	// client_matcher
	//
	// x-displayName: "Clients"
	// Conditions related to the origin of the request, such as client IP, TLS fingerprint, etc.
	ClientMatcher *policy.ClientMatcher `protobuf:"bytes,11,opt,name=client_matcher,json=clientMatcher,proto3" json:"client_matcher,omitempty"`
	// Rate limit values
	//
	// x-displayName: "Rate Limiter Values"
	// x-required
	// This defines the values of the rate limiter.
	//
	// Types that are valid to be assigned to RateLimiterChoice:
	//	*ApiEndpointRule_InlineRateLimiter
	//	*ApiEndpointRule_RefRateLimiter
	RateLimiterChoice isApiEndpointRule_RateLimiterChoice `protobuf_oneof:"rate_limiter_choice"`
}

func (m *ApiEndpointRule) Reset()      { *m = ApiEndpointRule{} }
func (*ApiEndpointRule) ProtoMessage() {}
func (*ApiEndpointRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{15}
}
func (m *ApiEndpointRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiEndpointRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiEndpointRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiEndpointRule.Merge(m, src)
}
func (m *ApiEndpointRule) XXX_Size() int {
	return m.Size()
}
func (m *ApiEndpointRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiEndpointRule.DiscardUnknown(m)
}

var xxx_messageInfo_ApiEndpointRule proto.InternalMessageInfo

type isApiEndpointRule_DomainChoice interface {
	isApiEndpointRule_DomainChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isApiEndpointRule_RateLimiterChoice interface {
	isApiEndpointRule_RateLimiterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ApiEndpointRule_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,2,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type ApiEndpointRule_SpecificDomain struct {
	SpecificDomain string `protobuf:"bytes,3,opt,name=specific_domain,json=specificDomain,proto3,oneof" json:"specific_domain,omitempty"`
}
type ApiEndpointRule_InlineRateLimiter struct {
	InlineRateLimiter *InlineRateLimiter `protobuf:"bytes,8,opt,name=inline_rate_limiter,json=inlineRateLimiter,proto3,oneof" json:"inline_rate_limiter,omitempty"`
}
type ApiEndpointRule_RefRateLimiter struct {
	RefRateLimiter *views.ObjectRefType `protobuf:"bytes,9,opt,name=ref_rate_limiter,json=refRateLimiter,proto3,oneof" json:"ref_rate_limiter,omitempty"`
}

func (*ApiEndpointRule_AnyDomain) isApiEndpointRule_DomainChoice()              {}
func (*ApiEndpointRule_SpecificDomain) isApiEndpointRule_DomainChoice()         {}
func (*ApiEndpointRule_InlineRateLimiter) isApiEndpointRule_RateLimiterChoice() {}
func (*ApiEndpointRule_RefRateLimiter) isApiEndpointRule_RateLimiterChoice()    {}

func (m *ApiEndpointRule) GetDomainChoice() isApiEndpointRule_DomainChoice {
	if m != nil {
		return m.DomainChoice
	}
	return nil
}
func (m *ApiEndpointRule) GetRateLimiterChoice() isApiEndpointRule_RateLimiterChoice {
	if m != nil {
		return m.RateLimiterChoice
	}
	return nil
}

func (m *ApiEndpointRule) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainChoice().(*ApiEndpointRule_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *ApiEndpointRule) GetSpecificDomain() string {
	if x, ok := m.GetDomainChoice().(*ApiEndpointRule_SpecificDomain); ok {
		return x.SpecificDomain
	}
	return ""
}

func (m *ApiEndpointRule) GetBasePath() string {
	if m != nil {
		return m.BasePath
	}
	return ""
}

func (m *ApiEndpointRule) GetApiEndpointPath() string {
	if m != nil {
		return m.ApiEndpointPath
	}
	return ""
}

func (m *ApiEndpointRule) GetApiEndpointMethod() *policy.HttpMethodMatcherType {
	if m != nil {
		return m.ApiEndpointMethod
	}
	return nil
}

func (m *ApiEndpointRule) GetRequestMatcher() *policy.RequestMatcher {
	if m != nil {
		return m.RequestMatcher
	}
	return nil
}

func (m *ApiEndpointRule) GetClientMatcher() *policy.ClientMatcher {
	if m != nil {
		return m.ClientMatcher
	}
	return nil
}

func (m *ApiEndpointRule) GetInlineRateLimiter() *InlineRateLimiter {
	if x, ok := m.GetRateLimiterChoice().(*ApiEndpointRule_InlineRateLimiter); ok {
		return x.InlineRateLimiter
	}
	return nil
}

func (m *ApiEndpointRule) GetRefRateLimiter() *views.ObjectRefType {
	if x, ok := m.GetRateLimiterChoice().(*ApiEndpointRule_RefRateLimiter); ok {
		return x.RefRateLimiter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ApiEndpointRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ApiEndpointRule_AnyDomain)(nil),
		(*ApiEndpointRule_SpecificDomain)(nil),
		(*ApiEndpointRule_InlineRateLimiter)(nil),
		(*ApiEndpointRule_RefRateLimiter)(nil),
	}
}

// InlineRateLimiter
//
// x-displayName: "InlineRateLimiter"
type InlineRateLimiter struct {
	// threshold
	//
	// x-displayName: "Threshold"
	// x-example: "1"
	// x-required
	// The total number of allowed requests for 1 unit (e.g. SECOND/MINUTE/HOUR etc.) of the specified period.
	Threshold uint32 `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// rate
	//
	// x-displayName: "Duration"
	// x-required
	// Unit for the period per which the rate limit is applied.
	Unit rate_limiter.RateLimitPeriodUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=ves.io.schema.rate_limiter.RateLimitPeriodUnit" json:"unit,omitempty"`
	// Count by
	//
	// x-displayName: "Count By"
	// x-required
	// The classification criteria for requests counts.
	//
	// Types that are valid to be assigned to CountByChoice:
	//	*InlineRateLimiter_UseHttpLbUserId
	//	*InlineRateLimiter_RefUserId
	CountByChoice isInlineRateLimiter_CountByChoice `protobuf_oneof:"count_by_choice"`
}

func (m *InlineRateLimiter) Reset()      { *m = InlineRateLimiter{} }
func (*InlineRateLimiter) ProtoMessage() {}
func (*InlineRateLimiter) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{16}
}
func (m *InlineRateLimiter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InlineRateLimiter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InlineRateLimiter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InlineRateLimiter.Merge(m, src)
}
func (m *InlineRateLimiter) XXX_Size() int {
	return m.Size()
}
func (m *InlineRateLimiter) XXX_DiscardUnknown() {
	xxx_messageInfo_InlineRateLimiter.DiscardUnknown(m)
}

var xxx_messageInfo_InlineRateLimiter proto.InternalMessageInfo

type isInlineRateLimiter_CountByChoice interface {
	isInlineRateLimiter_CountByChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type InlineRateLimiter_UseHttpLbUserId struct {
	UseHttpLbUserId *schema.Empty `protobuf:"bytes,4,opt,name=use_http_lb_user_id,json=useHttpLbUserId,proto3,oneof" json:"use_http_lb_user_id,omitempty"`
}
type InlineRateLimiter_RefUserId struct {
	RefUserId *views.ObjectRefType `protobuf:"bytes,5,opt,name=ref_user_id,json=refUserId,proto3,oneof" json:"ref_user_id,omitempty"`
}

func (*InlineRateLimiter_UseHttpLbUserId) isInlineRateLimiter_CountByChoice() {}
func (*InlineRateLimiter_RefUserId) isInlineRateLimiter_CountByChoice()       {}

func (m *InlineRateLimiter) GetCountByChoice() isInlineRateLimiter_CountByChoice {
	if m != nil {
		return m.CountByChoice
	}
	return nil
}

func (m *InlineRateLimiter) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *InlineRateLimiter) GetUnit() rate_limiter.RateLimitPeriodUnit {
	if m != nil {
		return m.Unit
	}
	return rate_limiter.SECOND
}

func (m *InlineRateLimiter) GetUseHttpLbUserId() *schema.Empty {
	if x, ok := m.GetCountByChoice().(*InlineRateLimiter_UseHttpLbUserId); ok {
		return x.UseHttpLbUserId
	}
	return nil
}

func (m *InlineRateLimiter) GetRefUserId() *views.ObjectRefType {
	if x, ok := m.GetCountByChoice().(*InlineRateLimiter_RefUserId); ok {
		return x.RefUserId
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InlineRateLimiter) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InlineRateLimiter_UseHttpLbUserId)(nil),
		(*InlineRateLimiter_RefUserId)(nil),
	}
}

// ServerUrlRule
//
// x-displayName: "Server URLs and API Groups"
type ServerUrlRule struct {
	// domain choices
	//
	// x-displayName: "Domain"
	// x-required
	// Choose if the rule will apply for all domains or a specific one.
	//
	// Types that are valid to be assigned to DomainChoice:
	//	*ServerUrlRule_AnyDomain
	//	*ServerUrlRule_SpecificDomain
	DomainChoice isServerUrlRule_DomainChoice `protobuf_oneof:"domain_choice"`
	// base path
	//
	// x-displayName: "Base Path"
	// x-example: "/"
	// x-required
	// Prefix of the request path.
	BasePath string `protobuf:"bytes,4,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
	// api_group
	//
	// x-displayName: "API Group"
	// x-example: "oas-all-operations"
	// API groups derived from API Definition swaggers.
	// For example oas-all-operations including all paths and methods from the swaggers, oas-base-urls covering all requests under base-paths from the swaggers.
	// Custom groups can be created if user tags paths or operations with "x-volterra-api-group" extensions inside swaggers.
	ApiGroup string `protobuf:"bytes,10,opt,name=api_group,json=apiGroup,proto3" json:"api_group,omitempty"`
	// request_matcher
	//
	// x-displayName: "Request"
	// Conditions related to the request, such as query parameters, headers, etc.
	RequestMatcher *policy.RequestMatcher `protobuf:"bytes,11,opt,name=request_matcher,json=requestMatcher,proto3" json:"request_matcher,omitempty"`
	// client_matcher
	//
	// x-displayName: "Clients"
	// Conditions related to the origin of the request, such as client IP, TLS fingerprint, etc.
	ClientMatcher *policy.ClientMatcher `protobuf:"bytes,9,opt,name=client_matcher,json=clientMatcher,proto3" json:"client_matcher,omitempty"`
	// Rate limit values
	//
	// x-displayName: "Rate Limiter Values"
	// x-required
	// This defines the values of the rate limiter.
	//
	// Types that are valid to be assigned to RateLimiterChoice:
	//	*ServerUrlRule_InlineRateLimiter
	//	*ServerUrlRule_RefRateLimiter
	RateLimiterChoice isServerUrlRule_RateLimiterChoice `protobuf_oneof:"rate_limiter_choice"`
}

func (m *ServerUrlRule) Reset()      { *m = ServerUrlRule{} }
func (*ServerUrlRule) ProtoMessage() {}
func (*ServerUrlRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{17}
}
func (m *ServerUrlRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerUrlRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServerUrlRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerUrlRule.Merge(m, src)
}
func (m *ServerUrlRule) XXX_Size() int {
	return m.Size()
}
func (m *ServerUrlRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerUrlRule.DiscardUnknown(m)
}

var xxx_messageInfo_ServerUrlRule proto.InternalMessageInfo

type isServerUrlRule_DomainChoice interface {
	isServerUrlRule_DomainChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServerUrlRule_RateLimiterChoice interface {
	isServerUrlRule_RateLimiterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServerUrlRule_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,2,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type ServerUrlRule_SpecificDomain struct {
	SpecificDomain string `protobuf:"bytes,3,opt,name=specific_domain,json=specificDomain,proto3,oneof" json:"specific_domain,omitempty"`
}
type ServerUrlRule_InlineRateLimiter struct {
	InlineRateLimiter *InlineRateLimiter `protobuf:"bytes,6,opt,name=inline_rate_limiter,json=inlineRateLimiter,proto3,oneof" json:"inline_rate_limiter,omitempty"`
}
type ServerUrlRule_RefRateLimiter struct {
	RefRateLimiter *views.ObjectRefType `protobuf:"bytes,7,opt,name=ref_rate_limiter,json=refRateLimiter,proto3,oneof" json:"ref_rate_limiter,omitempty"`
}

func (*ServerUrlRule_AnyDomain) isServerUrlRule_DomainChoice()              {}
func (*ServerUrlRule_SpecificDomain) isServerUrlRule_DomainChoice()         {}
func (*ServerUrlRule_InlineRateLimiter) isServerUrlRule_RateLimiterChoice() {}
func (*ServerUrlRule_RefRateLimiter) isServerUrlRule_RateLimiterChoice()    {}

func (m *ServerUrlRule) GetDomainChoice() isServerUrlRule_DomainChoice {
	if m != nil {
		return m.DomainChoice
	}
	return nil
}
func (m *ServerUrlRule) GetRateLimiterChoice() isServerUrlRule_RateLimiterChoice {
	if m != nil {
		return m.RateLimiterChoice
	}
	return nil
}

func (m *ServerUrlRule) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainChoice().(*ServerUrlRule_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *ServerUrlRule) GetSpecificDomain() string {
	if x, ok := m.GetDomainChoice().(*ServerUrlRule_SpecificDomain); ok {
		return x.SpecificDomain
	}
	return ""
}

func (m *ServerUrlRule) GetBasePath() string {
	if m != nil {
		return m.BasePath
	}
	return ""
}

func (m *ServerUrlRule) GetApiGroup() string {
	if m != nil {
		return m.ApiGroup
	}
	return ""
}

func (m *ServerUrlRule) GetRequestMatcher() *policy.RequestMatcher {
	if m != nil {
		return m.RequestMatcher
	}
	return nil
}

func (m *ServerUrlRule) GetClientMatcher() *policy.ClientMatcher {
	if m != nil {
		return m.ClientMatcher
	}
	return nil
}

func (m *ServerUrlRule) GetInlineRateLimiter() *InlineRateLimiter {
	if x, ok := m.GetRateLimiterChoice().(*ServerUrlRule_InlineRateLimiter); ok {
		return x.InlineRateLimiter
	}
	return nil
}

func (m *ServerUrlRule) GetRefRateLimiter() *views.ObjectRefType {
	if x, ok := m.GetRateLimiterChoice().(*ServerUrlRule_RefRateLimiter); ok {
		return x.RefRateLimiter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ServerUrlRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ServerUrlRule_AnyDomain)(nil),
		(*ServerUrlRule_SpecificDomain)(nil),
		(*ServerUrlRule_InlineRateLimiter)(nil),
		(*ServerUrlRule_RefRateLimiter)(nil),
	}
}

// Custom IP Allowed List
//
// x-displayName: "Custom IP Allowed List"
// IP Allowed list using existing ip_prefix_set objects
type CustomIpAllowedList struct {
	// rate_limiter_allowed_prefixes
	//
	// x-displayName: "List of IP Prefix Sets"
	// x-required
	// References to ip_prefix_set objects.
	// Requests from source IP addresses that are covered by one of the allowed IP Prefixes are not subjected to rate limiting.
	RateLimiterAllowedPrefixes []*views.ObjectRefType `protobuf:"bytes,22,rep,name=rate_limiter_allowed_prefixes,json=rateLimiterAllowedPrefixes,proto3" json:"rate_limiter_allowed_prefixes,omitempty"`
}

func (m *CustomIpAllowedList) Reset()      { *m = CustomIpAllowedList{} }
func (*CustomIpAllowedList) ProtoMessage() {}
func (*CustomIpAllowedList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{18}
}
func (m *CustomIpAllowedList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomIpAllowedList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomIpAllowedList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomIpAllowedList.Merge(m, src)
}
func (m *CustomIpAllowedList) XXX_Size() int {
	return m.Size()
}
func (m *CustomIpAllowedList) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomIpAllowedList.DiscardUnknown(m)
}

var xxx_messageInfo_CustomIpAllowedList proto.InternalMessageInfo

func (m *CustomIpAllowedList) GetRateLimiterAllowedPrefixes() []*views.ObjectRefType {
	if m != nil {
		return m.RateLimiterAllowedPrefixes
	}
	return nil
}

// APISpecificationSettings
//
// x-displayName: "API Specification and Validation"
// Settings for api specification (api definition, OpenAPI validation, etc.)
type APISpecificationSettings struct {
	// Use API Definition
	//
	// x-displayName: "API Definition"
	// x-required
	// Specify API definition which includes application API paths and methods derived from swagger files.
	ApiDefinition *views.ObjectRefType `protobuf:"bytes,1,opt,name=api_definition,json=apiDefinition,proto3" json:"api_definition,omitempty"`
	// Validation
	//
	// x-displayName: "Validation"
	// x-required
	// List of api-endpoints (may be aggregated by api-group or base-path) to run them through OpenAPI specification validation.
	//  Any other api-endpoint not listed will act according to "Fall Through Mode"
	//
	// Types that are valid to be assigned to ValidationTargetChoice:
	//	*APISpecificationSettings_ValidationDisabled
	//	*APISpecificationSettings_ValidationAllSpecEndpoints
	//	*APISpecificationSettings_ValidationCustomList
	ValidationTargetChoice isAPISpecificationSettings_ValidationTargetChoice `protobuf_oneof:"validation_target_choice"`
}

func (m *APISpecificationSettings) Reset()      { *m = APISpecificationSettings{} }
func (*APISpecificationSettings) ProtoMessage() {}
func (*APISpecificationSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{19}
}
func (m *APISpecificationSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APISpecificationSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APISpecificationSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APISpecificationSettings.Merge(m, src)
}
func (m *APISpecificationSettings) XXX_Size() int {
	return m.Size()
}
func (m *APISpecificationSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_APISpecificationSettings.DiscardUnknown(m)
}

var xxx_messageInfo_APISpecificationSettings proto.InternalMessageInfo

type isAPISpecificationSettings_ValidationTargetChoice interface {
	isAPISpecificationSettings_ValidationTargetChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type APISpecificationSettings_ValidationDisabled struct {
	ValidationDisabled *schema.Empty `protobuf:"bytes,3,opt,name=validation_disabled,json=validationDisabled,proto3,oneof" json:"validation_disabled,omitempty"`
}
type APISpecificationSettings_ValidationAllSpecEndpoints struct {
	ValidationAllSpecEndpoints *OpenApiValidationAllSpecEndpointsSettings `protobuf:"bytes,4,opt,name=validation_all_spec_endpoints,json=validationAllSpecEndpoints,proto3,oneof" json:"validation_all_spec_endpoints,omitempty"`
}
type APISpecificationSettings_ValidationCustomList struct {
	ValidationCustomList *ValidateApiBySpecRule `protobuf:"bytes,5,opt,name=validation_custom_list,json=validationCustomList,proto3,oneof" json:"validation_custom_list,omitempty"`
}

func (*APISpecificationSettings_ValidationDisabled) isAPISpecificationSettings_ValidationTargetChoice() {
}
func (*APISpecificationSettings_ValidationAllSpecEndpoints) isAPISpecificationSettings_ValidationTargetChoice() {
}
func (*APISpecificationSettings_ValidationCustomList) isAPISpecificationSettings_ValidationTargetChoice() {
}

func (m *APISpecificationSettings) GetValidationTargetChoice() isAPISpecificationSettings_ValidationTargetChoice {
	if m != nil {
		return m.ValidationTargetChoice
	}
	return nil
}

func (m *APISpecificationSettings) GetApiDefinition() *views.ObjectRefType {
	if m != nil {
		return m.ApiDefinition
	}
	return nil
}

func (m *APISpecificationSettings) GetValidationDisabled() *schema.Empty {
	if x, ok := m.GetValidationTargetChoice().(*APISpecificationSettings_ValidationDisabled); ok {
		return x.ValidationDisabled
	}
	return nil
}

func (m *APISpecificationSettings) GetValidationAllSpecEndpoints() *OpenApiValidationAllSpecEndpointsSettings {
	if x, ok := m.GetValidationTargetChoice().(*APISpecificationSettings_ValidationAllSpecEndpoints); ok {
		return x.ValidationAllSpecEndpoints
	}
	return nil
}

func (m *APISpecificationSettings) GetValidationCustomList() *ValidateApiBySpecRule {
	if x, ok := m.GetValidationTargetChoice().(*APISpecificationSettings_ValidationCustomList); ok {
		return x.ValidationCustomList
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*APISpecificationSettings) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*APISpecificationSettings_ValidationDisabled)(nil),
		(*APISpecificationSettings_ValidationAllSpecEndpoints)(nil),
		(*APISpecificationSettings_ValidationCustomList)(nil),
	}
}

// OpenAPI Validation API Inventory Settings
//
// x-displayName: "API Inventory"
// Settings for API Inventory validation
type OpenApiValidationAllSpecEndpointsSettings struct {
	// Validation Mode
	//
	// x-displayName: "Validation Mode"
	// x-required
	// Validation mode of OpenAPI specification.
	//  When a validation mismatch occurs on a request to one of the API Inventory endpoints
	ValidationMode *OpenApiValidationMode `protobuf:"bytes,1,opt,name=validation_mode,json=validationMode,proto3" json:"validation_mode,omitempty"`
	// Fall Through Mode
	//
	// x-displayName: "Fall Through Mode"
	// x-required
	// Determine what to do with unprotected endpoints (not part of the API Inventory or doesn't have a specific rule in custom rules)
	FallThroughMode *OpenApiFallThroughMode `protobuf:"bytes,2,opt,name=fall_through_mode,json=fallThroughMode,proto3" json:"fall_through_mode,omitempty"`
	// Policy of over-sized body
	//
	// x-displayName: "Policy for Over-Sized Body in Request/Response"
	// Policy of handling request/response with too long body
	// DEPRECATED. use settings.oversized_body_choice
	//
	// Types that are valid to be assigned to OversizedBodyChoice:
	//	*OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation
	//	*OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation
	OversizedBodyChoice isOpenApiValidationAllSpecEndpointsSettings_OversizedBodyChoice `protobuf_oneof:"oversized_body_choice"`
	// OpenAPI specification validation common settings
	//
	// x-displayName: "Common Settings"
	// OpenAPI specification validation settings relevant for "API Inventory" enforcement and for "Custom list" enforcement
	Settings *OpenApiValidationCommonSettings `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (m *OpenApiValidationAllSpecEndpointsSettings) Reset() {
	*m = OpenApiValidationAllSpecEndpointsSettings{}
}
func (*OpenApiValidationAllSpecEndpointsSettings) ProtoMessage() {}
func (*OpenApiValidationAllSpecEndpointsSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{20}
}
func (m *OpenApiValidationAllSpecEndpointsSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenApiValidationAllSpecEndpointsSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OpenApiValidationAllSpecEndpointsSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenApiValidationAllSpecEndpointsSettings.Merge(m, src)
}
func (m *OpenApiValidationAllSpecEndpointsSettings) XXX_Size() int {
	return m.Size()
}
func (m *OpenApiValidationAllSpecEndpointsSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenApiValidationAllSpecEndpointsSettings.DiscardUnknown(m)
}

var xxx_messageInfo_OpenApiValidationAllSpecEndpointsSettings proto.InternalMessageInfo

type isOpenApiValidationAllSpecEndpointsSettings_OversizedBodyChoice interface {
	isOpenApiValidationAllSpecEndpointsSettings_OversizedBodyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation struct {
	OversizedBodySkipValidation *schema.Empty `protobuf:"bytes,4,opt,name=oversized_body_skip_validation,json=oversizedBodySkipValidation,proto3,oneof" json:"oversized_body_skip_validation,omitempty"`
}
type OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation struct {
	OversizedBodyFailValidation *schema.Empty `protobuf:"bytes,5,opt,name=oversized_body_fail_validation,json=oversizedBodyFailValidation,proto3,oneof" json:"oversized_body_fail_validation,omitempty"`
}

func (*OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation) isOpenApiValidationAllSpecEndpointsSettings_OversizedBodyChoice() {
}
func (*OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation) isOpenApiValidationAllSpecEndpointsSettings_OversizedBodyChoice() {
}

func (m *OpenApiValidationAllSpecEndpointsSettings) GetOversizedBodyChoice() isOpenApiValidationAllSpecEndpointsSettings_OversizedBodyChoice {
	if m != nil {
		return m.OversizedBodyChoice
	}
	return nil
}

func (m *OpenApiValidationAllSpecEndpointsSettings) GetValidationMode() *OpenApiValidationMode {
	if m != nil {
		return m.ValidationMode
	}
	return nil
}

func (m *OpenApiValidationAllSpecEndpointsSettings) GetFallThroughMode() *OpenApiFallThroughMode {
	if m != nil {
		return m.FallThroughMode
	}
	return nil
}

// Deprecated: Do not use.
func (m *OpenApiValidationAllSpecEndpointsSettings) GetOversizedBodySkipValidation() *schema.Empty {
	if x, ok := m.GetOversizedBodyChoice().(*OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation); ok {
		return x.OversizedBodySkipValidation
	}
	return nil
}

// Deprecated: Do not use.
func (m *OpenApiValidationAllSpecEndpointsSettings) GetOversizedBodyFailValidation() *schema.Empty {
	if x, ok := m.GetOversizedBodyChoice().(*OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation); ok {
		return x.OversizedBodyFailValidation
	}
	return nil
}

func (m *OpenApiValidationAllSpecEndpointsSettings) GetSettings() *OpenApiValidationCommonSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OpenApiValidationAllSpecEndpointsSettings) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation)(nil),
		(*OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation)(nil),
	}
}

// Validation Mode
//
// x-displayName: "Validation Mode"
// x-required
// Validation mode of OpenAPI specification.
//
//	When a validation mismatch occurs on a request to one of the endpoints listed on the OpenAPI specification file (a.k.a. swagger)
type OpenApiValidationMode struct {
	// Request Validation Mode Choice
	//
	// x-displayName: "OpenAPI Validation Request Processing Mode"
	// x-required
	// Validation mode of OpenAPI specification request.
	//  Indicates if enforcement is needed when a validation mismatch occurs on a request to one of the endpoints
	//  listed on the OpenAPI specification file (a.k.a. swagger)
	//
	// Types that are valid to be assigned to ValidationModeChoice:
	//	*OpenApiValidationMode_ValidationModeActive
	//	*OpenApiValidationMode_SkipValidation
	ValidationModeChoice isOpenApiValidationMode_ValidationModeChoice `protobuf_oneof:"validation_mode_choice"`
	// Response Validation Mode Choice
	//
	// x-displayName: "OpenAPI Validation Response Processing Mode"
	// x-required
	// Validation mode of OpenAPI specification response.
	//  Indicates if enforcement is needed when a validation mismatch occurs on a response to one of the endpoints
	//  listed on the OpenAPI specification file (a.k.a. swagger)
	//
	// Types that are valid to be assigned to ResponseValidationModeChoice:
	//	*OpenApiValidationMode_SkipResponseValidation
	//	*OpenApiValidationMode_ResponseValidationModeActive
	ResponseValidationModeChoice isOpenApiValidationMode_ResponseValidationModeChoice `protobuf_oneof:"response_validation_mode_choice"`
}

func (m *OpenApiValidationMode) Reset()      { *m = OpenApiValidationMode{} }
func (*OpenApiValidationMode) ProtoMessage() {}
func (*OpenApiValidationMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{21}
}
func (m *OpenApiValidationMode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenApiValidationMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OpenApiValidationMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenApiValidationMode.Merge(m, src)
}
func (m *OpenApiValidationMode) XXX_Size() int {
	return m.Size()
}
func (m *OpenApiValidationMode) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenApiValidationMode.DiscardUnknown(m)
}

var xxx_messageInfo_OpenApiValidationMode proto.InternalMessageInfo

type isOpenApiValidationMode_ValidationModeChoice interface {
	isOpenApiValidationMode_ValidationModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isOpenApiValidationMode_ResponseValidationModeChoice interface {
	isOpenApiValidationMode_ResponseValidationModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OpenApiValidationMode_ValidationModeActive struct {
	ValidationModeActive *OpenApiValidationModeActive `protobuf:"bytes,2,opt,name=validation_mode_active,json=validationModeActive,proto3,oneof" json:"validation_mode_active,omitempty"`
}
type OpenApiValidationMode_SkipValidation struct {
	SkipValidation *schema.Empty `protobuf:"bytes,3,opt,name=skip_validation,json=skipValidation,proto3,oneof" json:"skip_validation,omitempty"`
}
type OpenApiValidationMode_SkipResponseValidation struct {
	SkipResponseValidation *schema.Empty `protobuf:"bytes,5,opt,name=skip_response_validation,json=skipResponseValidation,proto3,oneof" json:"skip_response_validation,omitempty"`
}
type OpenApiValidationMode_ResponseValidationModeActive struct {
	ResponseValidationModeActive *OpenApiValidationModeActiveResponse `protobuf:"bytes,6,opt,name=response_validation_mode_active,json=responseValidationModeActive,proto3,oneof" json:"response_validation_mode_active,omitempty"`
}

func (*OpenApiValidationMode_ValidationModeActive) isOpenApiValidationMode_ValidationModeChoice() {}
func (*OpenApiValidationMode_SkipValidation) isOpenApiValidationMode_ValidationModeChoice()       {}
func (*OpenApiValidationMode_SkipResponseValidation) isOpenApiValidationMode_ResponseValidationModeChoice() {
}
func (*OpenApiValidationMode_ResponseValidationModeActive) isOpenApiValidationMode_ResponseValidationModeChoice() {
}

func (m *OpenApiValidationMode) GetValidationModeChoice() isOpenApiValidationMode_ValidationModeChoice {
	if m != nil {
		return m.ValidationModeChoice
	}
	return nil
}
func (m *OpenApiValidationMode) GetResponseValidationModeChoice() isOpenApiValidationMode_ResponseValidationModeChoice {
	if m != nil {
		return m.ResponseValidationModeChoice
	}
	return nil
}

func (m *OpenApiValidationMode) GetValidationModeActive() *OpenApiValidationModeActive {
	if x, ok := m.GetValidationModeChoice().(*OpenApiValidationMode_ValidationModeActive); ok {
		return x.ValidationModeActive
	}
	return nil
}

func (m *OpenApiValidationMode) GetSkipValidation() *schema.Empty {
	if x, ok := m.GetValidationModeChoice().(*OpenApiValidationMode_SkipValidation); ok {
		return x.SkipValidation
	}
	return nil
}

func (m *OpenApiValidationMode) GetSkipResponseValidation() *schema.Empty {
	if x, ok := m.GetResponseValidationModeChoice().(*OpenApiValidationMode_SkipResponseValidation); ok {
		return x.SkipResponseValidation
	}
	return nil
}

func (m *OpenApiValidationMode) GetResponseValidationModeActive() *OpenApiValidationModeActiveResponse {
	if x, ok := m.GetResponseValidationModeChoice().(*OpenApiValidationMode_ResponseValidationModeActive); ok {
		return x.ResponseValidationModeActive
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OpenApiValidationMode) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OpenApiValidationMode_ValidationModeActive)(nil),
		(*OpenApiValidationMode_SkipValidation)(nil),
		(*OpenApiValidationMode_SkipResponseValidation)(nil),
		(*OpenApiValidationMode_ResponseValidationModeActive)(nil),
	}
}

// Open API Validation Mode Active For Request
//
// x-displayName: "Open API Validation Mode Active"
// Validation mode properties of request
type OpenApiValidationModeActive struct {
	// Request Validation Enforcement Mode
	//
	// x-displayName: "Request Validation Enforcement Type"
	// x-required
	// Enforcement type of OpenAPI specification for the request
	//
	// Types that are valid to be assigned to ValidationEnforcementType:
	//	*OpenApiValidationModeActive_EnforcementReport
	//	*OpenApiValidationModeActive_EnforcementBlock
	ValidationEnforcementType isOpenApiValidationModeActive_ValidationEnforcementType `protobuf_oneof:"validation_enforcement_type"`
	// Request Validation Properties
	//
	// x-displayName: "Request Validation Properties"
	// x-required
	// List of properties of the request to validate according to the OpenAPI specification file (a.k.a. swagger)
	RequestValidationProperties []schema.OpenApiValidationProperties `protobuf:"varint,4,rep,packed,name=request_validation_properties,json=requestValidationProperties,proto3,enum=ves.io.schema.OpenApiValidationProperties" json:"request_validation_properties,omitempty"`
}

func (m *OpenApiValidationModeActive) Reset()      { *m = OpenApiValidationModeActive{} }
func (*OpenApiValidationModeActive) ProtoMessage() {}
func (*OpenApiValidationModeActive) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{22}
}
func (m *OpenApiValidationModeActive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenApiValidationModeActive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OpenApiValidationModeActive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenApiValidationModeActive.Merge(m, src)
}
func (m *OpenApiValidationModeActive) XXX_Size() int {
	return m.Size()
}
func (m *OpenApiValidationModeActive) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenApiValidationModeActive.DiscardUnknown(m)
}

var xxx_messageInfo_OpenApiValidationModeActive proto.InternalMessageInfo

type isOpenApiValidationModeActive_ValidationEnforcementType interface {
	isOpenApiValidationModeActive_ValidationEnforcementType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OpenApiValidationModeActive_EnforcementReport struct {
	EnforcementReport *schema.Empty `protobuf:"bytes,2,opt,name=enforcement_report,json=enforcementReport,proto3,oneof" json:"enforcement_report,omitempty"`
}
type OpenApiValidationModeActive_EnforcementBlock struct {
	EnforcementBlock *schema.Empty `protobuf:"bytes,3,opt,name=enforcement_block,json=enforcementBlock,proto3,oneof" json:"enforcement_block,omitempty"`
}

func (*OpenApiValidationModeActive_EnforcementReport) isOpenApiValidationModeActive_ValidationEnforcementType() {
}
func (*OpenApiValidationModeActive_EnforcementBlock) isOpenApiValidationModeActive_ValidationEnforcementType() {
}

func (m *OpenApiValidationModeActive) GetValidationEnforcementType() isOpenApiValidationModeActive_ValidationEnforcementType {
	if m != nil {
		return m.ValidationEnforcementType
	}
	return nil
}

func (m *OpenApiValidationModeActive) GetEnforcementReport() *schema.Empty {
	if x, ok := m.GetValidationEnforcementType().(*OpenApiValidationModeActive_EnforcementReport); ok {
		return x.EnforcementReport
	}
	return nil
}

func (m *OpenApiValidationModeActive) GetEnforcementBlock() *schema.Empty {
	if x, ok := m.GetValidationEnforcementType().(*OpenApiValidationModeActive_EnforcementBlock); ok {
		return x.EnforcementBlock
	}
	return nil
}

func (m *OpenApiValidationModeActive) GetRequestValidationProperties() []schema.OpenApiValidationProperties {
	if m != nil {
		return m.RequestValidationProperties
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OpenApiValidationModeActive) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OpenApiValidationModeActive_EnforcementReport)(nil),
		(*OpenApiValidationModeActive_EnforcementBlock)(nil),
	}
}

// Open API Validation Mode Active For Response
//
// x-displayName: "Open API Validation Mode Active"
// Validation mode properties of response
type OpenApiValidationModeActiveResponse struct {
	// Response Validation Enforcement Mode
	//
	// x-displayName: "Response Validation Enforcement Type"
	// x-required
	// Enforcement type of OpenAPI specification for the response
	//
	// Types that are valid to be assigned to ValidationEnforcementType:
	//	*OpenApiValidationModeActiveResponse_EnforcementReport
	//	*OpenApiValidationModeActiveResponse_EnforcementBlock
	ValidationEnforcementType isOpenApiValidationModeActiveResponse_ValidationEnforcementType `protobuf_oneof:"validation_enforcement_type"`
	// Response Validation Properties
	//
	// x-displayName: "Response Validation Properties"
	// x-required
	// List of properties of the response to validate according to the OpenAPI specification file (a.k.a. swagger)
	ResponseValidationProperties []schema.OpenApiValidationProperties `protobuf:"varint,4,rep,packed,name=response_validation_properties,json=responseValidationProperties,proto3,enum=ves.io.schema.OpenApiValidationProperties" json:"response_validation_properties,omitempty"`
}

func (m *OpenApiValidationModeActiveResponse) Reset()      { *m = OpenApiValidationModeActiveResponse{} }
func (*OpenApiValidationModeActiveResponse) ProtoMessage() {}
func (*OpenApiValidationModeActiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{23}
}
func (m *OpenApiValidationModeActiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenApiValidationModeActiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OpenApiValidationModeActiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenApiValidationModeActiveResponse.Merge(m, src)
}
func (m *OpenApiValidationModeActiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *OpenApiValidationModeActiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenApiValidationModeActiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OpenApiValidationModeActiveResponse proto.InternalMessageInfo

type isOpenApiValidationModeActiveResponse_ValidationEnforcementType interface {
	isOpenApiValidationModeActiveResponse_ValidationEnforcementType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OpenApiValidationModeActiveResponse_EnforcementReport struct {
	EnforcementReport *schema.Empty `protobuf:"bytes,2,opt,name=enforcement_report,json=enforcementReport,proto3,oneof" json:"enforcement_report,omitempty"`
}
type OpenApiValidationModeActiveResponse_EnforcementBlock struct {
	EnforcementBlock *schema.Empty `protobuf:"bytes,3,opt,name=enforcement_block,json=enforcementBlock,proto3,oneof" json:"enforcement_block,omitempty"`
}

func (*OpenApiValidationModeActiveResponse_EnforcementReport) isOpenApiValidationModeActiveResponse_ValidationEnforcementType() {
}
func (*OpenApiValidationModeActiveResponse_EnforcementBlock) isOpenApiValidationModeActiveResponse_ValidationEnforcementType() {
}

func (m *OpenApiValidationModeActiveResponse) GetValidationEnforcementType() isOpenApiValidationModeActiveResponse_ValidationEnforcementType {
	if m != nil {
		return m.ValidationEnforcementType
	}
	return nil
}

func (m *OpenApiValidationModeActiveResponse) GetEnforcementReport() *schema.Empty {
	if x, ok := m.GetValidationEnforcementType().(*OpenApiValidationModeActiveResponse_EnforcementReport); ok {
		return x.EnforcementReport
	}
	return nil
}

func (m *OpenApiValidationModeActiveResponse) GetEnforcementBlock() *schema.Empty {
	if x, ok := m.GetValidationEnforcementType().(*OpenApiValidationModeActiveResponse_EnforcementBlock); ok {
		return x.EnforcementBlock
	}
	return nil
}

func (m *OpenApiValidationModeActiveResponse) GetResponseValidationProperties() []schema.OpenApiValidationProperties {
	if m != nil {
		return m.ResponseValidationProperties
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OpenApiValidationModeActiveResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OpenApiValidationModeActiveResponse_EnforcementReport)(nil),
		(*OpenApiValidationModeActiveResponse_EnforcementBlock)(nil),
	}
}

// Fall Through Mode
//
// x-displayName: "Fall Through Mode"
// x-required
// Determine what to do with unprotected endpoints (not in the OpenAPI specification file (a.k.a. swagger) or doesn't have a specific rule in custom rules)
type OpenApiFallThroughMode struct {
	// Fall Through Mode
	//
	// x-displayName: "Fall Through Mode"
	// x-required
	// Determine what to do with unprotected endpoints (not in the OpenAPI specification file (a.k.a. swagger) or doesn't have a specific rule in custom rules)
	//
	// Types that are valid to be assigned to FallThroughModeChoice:
	//	*OpenApiFallThroughMode_FallThroughModeAllow
	//	*OpenApiFallThroughMode_FallThroughModeCustom
	FallThroughModeChoice isOpenApiFallThroughMode_FallThroughModeChoice `protobuf_oneof:"fall_through_mode_choice"`
}

func (m *OpenApiFallThroughMode) Reset()      { *m = OpenApiFallThroughMode{} }
func (*OpenApiFallThroughMode) ProtoMessage() {}
func (*OpenApiFallThroughMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{24}
}
func (m *OpenApiFallThroughMode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenApiFallThroughMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OpenApiFallThroughMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenApiFallThroughMode.Merge(m, src)
}
func (m *OpenApiFallThroughMode) XXX_Size() int {
	return m.Size()
}
func (m *OpenApiFallThroughMode) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenApiFallThroughMode.DiscardUnknown(m)
}

var xxx_messageInfo_OpenApiFallThroughMode proto.InternalMessageInfo

type isOpenApiFallThroughMode_FallThroughModeChoice interface {
	isOpenApiFallThroughMode_FallThroughModeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OpenApiFallThroughMode_FallThroughModeAllow struct {
	FallThroughModeAllow *schema.Empty `protobuf:"bytes,4,opt,name=fall_through_mode_allow,json=fallThroughModeAllow,proto3,oneof" json:"fall_through_mode_allow,omitempty"`
}
type OpenApiFallThroughMode_FallThroughModeCustom struct {
	FallThroughModeCustom *CustomFallThroughMode `protobuf:"bytes,5,opt,name=fall_through_mode_custom,json=fallThroughModeCustom,proto3,oneof" json:"fall_through_mode_custom,omitempty"`
}

func (*OpenApiFallThroughMode_FallThroughModeAllow) isOpenApiFallThroughMode_FallThroughModeChoice() {
}
func (*OpenApiFallThroughMode_FallThroughModeCustom) isOpenApiFallThroughMode_FallThroughModeChoice() {
}

func (m *OpenApiFallThroughMode) GetFallThroughModeChoice() isOpenApiFallThroughMode_FallThroughModeChoice {
	if m != nil {
		return m.FallThroughModeChoice
	}
	return nil
}

func (m *OpenApiFallThroughMode) GetFallThroughModeAllow() *schema.Empty {
	if x, ok := m.GetFallThroughModeChoice().(*OpenApiFallThroughMode_FallThroughModeAllow); ok {
		return x.FallThroughModeAllow
	}
	return nil
}

func (m *OpenApiFallThroughMode) GetFallThroughModeCustom() *CustomFallThroughMode {
	if x, ok := m.GetFallThroughModeChoice().(*OpenApiFallThroughMode_FallThroughModeCustom); ok {
		return x.FallThroughModeCustom
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OpenApiFallThroughMode) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OpenApiFallThroughMode_FallThroughModeAllow)(nil),
		(*OpenApiFallThroughMode_FallThroughModeCustom)(nil),
	}
}

// Custom Fall Through Mode
//
// x-displayName: "Custom Fall Through Mode"
// Define the fall through settings
type CustomFallThroughMode struct {
	// Custom Fall Through Rule List
	//
	// x-required
	// x-displayName: "Custom Fall Through Rule List"
	OpenApiValidationRules []*FallThroughRule `protobuf:"bytes,1,rep,name=open_api_validation_rules,json=openApiValidationRules,proto3" json:"open_api_validation_rules,omitempty"`
}

func (m *CustomFallThroughMode) Reset()      { *m = CustomFallThroughMode{} }
func (*CustomFallThroughMode) ProtoMessage() {}
func (*CustomFallThroughMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{25}
}
func (m *CustomFallThroughMode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomFallThroughMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomFallThroughMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomFallThroughMode.Merge(m, src)
}
func (m *CustomFallThroughMode) XXX_Size() int {
	return m.Size()
}
func (m *CustomFallThroughMode) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomFallThroughMode.DiscardUnknown(m)
}

var xxx_messageInfo_CustomFallThroughMode proto.InternalMessageInfo

func (m *CustomFallThroughMode) GetOpenApiValidationRules() []*FallThroughRule {
	if m != nil {
		return m.OpenApiValidationRules
	}
	return nil
}

// Fall Through Rule
//
// x-displayName: "Fall Through Rule"
// Fall Through Rule for a specific endpoint, base-path, or API group
type FallThroughRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// action choices
	//
	// x-required
	// x-displayName: "Action"
	// Choose what action to do when the rule will apply
	//
	// Types that are valid to be assigned to ActionChoice:
	//	*FallThroughRule_ActionSkip
	//	*FallThroughRule_ActionReport
	//	*FallThroughRule_ActionBlock
	ActionChoice isFallThroughRule_ActionChoice `protobuf_oneof:"action_choice"`
	// condition type choices
	//
	// x-displayName: "Type"
	// x-required
	// Choose type of granularity this rule applies to
	//
	// Types that are valid to be assigned to ConditionTypeChoice:
	//	*FallThroughRule_ApiEndpoint
	//	*FallThroughRule_BasePath
	//	*FallThroughRule_ApiGroup
	ConditionTypeChoice isFallThroughRule_ConditionTypeChoice `protobuf_oneof:"condition_type_choice"`
}

func (m *FallThroughRule) Reset()      { *m = FallThroughRule{} }
func (*FallThroughRule) ProtoMessage() {}
func (*FallThroughRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{26}
}
func (m *FallThroughRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FallThroughRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FallThroughRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FallThroughRule.Merge(m, src)
}
func (m *FallThroughRule) XXX_Size() int {
	return m.Size()
}
func (m *FallThroughRule) XXX_DiscardUnknown() {
	xxx_messageInfo_FallThroughRule.DiscardUnknown(m)
}

var xxx_messageInfo_FallThroughRule proto.InternalMessageInfo

type isFallThroughRule_ActionChoice interface {
	isFallThroughRule_ActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isFallThroughRule_ConditionTypeChoice interface {
	isFallThroughRule_ConditionTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FallThroughRule_ActionSkip struct {
	ActionSkip *schema.Empty `protobuf:"bytes,3,opt,name=action_skip,json=actionSkip,proto3,oneof" json:"action_skip,omitempty"`
}
type FallThroughRule_ActionReport struct {
	ActionReport *schema.Empty `protobuf:"bytes,4,opt,name=action_report,json=actionReport,proto3,oneof" json:"action_report,omitempty"`
}
type FallThroughRule_ActionBlock struct {
	ActionBlock *schema.Empty `protobuf:"bytes,5,opt,name=action_block,json=actionBlock,proto3,oneof" json:"action_block,omitempty"`
}
type FallThroughRule_ApiEndpoint struct {
	ApiEndpoint *ApiEndpointDetails `protobuf:"bytes,10,opt,name=api_endpoint,json=apiEndpoint,proto3,oneof" json:"api_endpoint,omitempty"`
}
type FallThroughRule_BasePath struct {
	BasePath string `protobuf:"bytes,8,opt,name=base_path,json=basePath,proto3,oneof" json:"base_path,omitempty"`
}
type FallThroughRule_ApiGroup struct {
	ApiGroup string `protobuf:"bytes,9,opt,name=api_group,json=apiGroup,proto3,oneof" json:"api_group,omitempty"`
}

func (*FallThroughRule_ActionSkip) isFallThroughRule_ActionChoice()         {}
func (*FallThroughRule_ActionReport) isFallThroughRule_ActionChoice()       {}
func (*FallThroughRule_ActionBlock) isFallThroughRule_ActionChoice()        {}
func (*FallThroughRule_ApiEndpoint) isFallThroughRule_ConditionTypeChoice() {}
func (*FallThroughRule_BasePath) isFallThroughRule_ConditionTypeChoice()    {}
func (*FallThroughRule_ApiGroup) isFallThroughRule_ConditionTypeChoice()    {}

func (m *FallThroughRule) GetActionChoice() isFallThroughRule_ActionChoice {
	if m != nil {
		return m.ActionChoice
	}
	return nil
}
func (m *FallThroughRule) GetConditionTypeChoice() isFallThroughRule_ConditionTypeChoice {
	if m != nil {
		return m.ConditionTypeChoice
	}
	return nil
}

func (m *FallThroughRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *FallThroughRule) GetActionSkip() *schema.Empty {
	if x, ok := m.GetActionChoice().(*FallThroughRule_ActionSkip); ok {
		return x.ActionSkip
	}
	return nil
}

func (m *FallThroughRule) GetActionReport() *schema.Empty {
	if x, ok := m.GetActionChoice().(*FallThroughRule_ActionReport); ok {
		return x.ActionReport
	}
	return nil
}

func (m *FallThroughRule) GetActionBlock() *schema.Empty {
	if x, ok := m.GetActionChoice().(*FallThroughRule_ActionBlock); ok {
		return x.ActionBlock
	}
	return nil
}

func (m *FallThroughRule) GetApiEndpoint() *ApiEndpointDetails {
	if x, ok := m.GetConditionTypeChoice().(*FallThroughRule_ApiEndpoint); ok {
		return x.ApiEndpoint
	}
	return nil
}

func (m *FallThroughRule) GetBasePath() string {
	if x, ok := m.GetConditionTypeChoice().(*FallThroughRule_BasePath); ok {
		return x.BasePath
	}
	return ""
}

func (m *FallThroughRule) GetApiGroup() string {
	if x, ok := m.GetConditionTypeChoice().(*FallThroughRule_ApiGroup); ok {
		return x.ApiGroup
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FallThroughRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FallThroughRule_ActionSkip)(nil),
		(*FallThroughRule_ActionReport)(nil),
		(*FallThroughRule_ActionBlock)(nil),
		(*FallThroughRule_ApiEndpoint)(nil),
		(*FallThroughRule_BasePath)(nil),
		(*FallThroughRule_ApiGroup)(nil),
	}
}

// ValidateApiBySpecRule
//
// x-displayName: "Custom List"
// Define API groups, base paths, or API endpoints and their OpenAPI validation modes.
//
//	Any other api-endpoint not listed will act according to "Fall Through Mode".
type ValidateApiBySpecRule struct {
	// Validation List
	//
	// x-required
	// x-displayName: "Validation List"
	OpenApiValidationRules []*OpenApiValidationRule `protobuf:"bytes,1,rep,name=open_api_validation_rules,json=openApiValidationRules,proto3" json:"open_api_validation_rules,omitempty"`
	// Fall Through Mode
	//
	// x-displayName: "Fall Through Mode"
	// x-required
	// Determine what to do with unprotected endpoints (not in the OpenAPI specification file (a.k.a. swagger) or doesn't have a specific rule in custom rules)
	FallThroughMode *OpenApiFallThroughMode `protobuf:"bytes,2,opt,name=fall_through_mode,json=fallThroughMode,proto3" json:"fall_through_mode,omitempty"`
	// Policy of over-sized body
	//
	// x-displayName: "Policy for Over-Sized Body in Request/Response"
	// Policy of handling request/response with too long body
	// DEPRECATED. use settings.oversized_body_choice
	//
	// Types that are valid to be assigned to OversizedBodyChoice:
	//	*ValidateApiBySpecRule_OversizedBodySkipValidation
	//	*ValidateApiBySpecRule_OversizedBodyFailValidation
	OversizedBodyChoice isValidateApiBySpecRule_OversizedBodyChoice `protobuf_oneof:"oversized_body_choice"`
	// OpenAPI specification validation common settings
	//
	// x-displayName: "OpenAPI specification validation settings"
	// OpenAPI specification validation settings relevant for "API Inventory" enforcement and for "Custom list" enforcement
	Settings *OpenApiValidationCommonSettings `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (m *ValidateApiBySpecRule) Reset()      { *m = ValidateApiBySpecRule{} }
func (*ValidateApiBySpecRule) ProtoMessage() {}
func (*ValidateApiBySpecRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{27}
}
func (m *ValidateApiBySpecRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateApiBySpecRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValidateApiBySpecRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateApiBySpecRule.Merge(m, src)
}
func (m *ValidateApiBySpecRule) XXX_Size() int {
	return m.Size()
}
func (m *ValidateApiBySpecRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateApiBySpecRule.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateApiBySpecRule proto.InternalMessageInfo

type isValidateApiBySpecRule_OversizedBodyChoice interface {
	isValidateApiBySpecRule_OversizedBodyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ValidateApiBySpecRule_OversizedBodySkipValidation struct {
	OversizedBodySkipValidation *schema.Empty `protobuf:"bytes,4,opt,name=oversized_body_skip_validation,json=oversizedBodySkipValidation,proto3,oneof" json:"oversized_body_skip_validation,omitempty"`
}
type ValidateApiBySpecRule_OversizedBodyFailValidation struct {
	OversizedBodyFailValidation *schema.Empty `protobuf:"bytes,5,opt,name=oversized_body_fail_validation,json=oversizedBodyFailValidation,proto3,oneof" json:"oversized_body_fail_validation,omitempty"`
}

func (*ValidateApiBySpecRule_OversizedBodySkipValidation) isValidateApiBySpecRule_OversizedBodyChoice() {
}
func (*ValidateApiBySpecRule_OversizedBodyFailValidation) isValidateApiBySpecRule_OversizedBodyChoice() {
}

func (m *ValidateApiBySpecRule) GetOversizedBodyChoice() isValidateApiBySpecRule_OversizedBodyChoice {
	if m != nil {
		return m.OversizedBodyChoice
	}
	return nil
}

func (m *ValidateApiBySpecRule) GetOpenApiValidationRules() []*OpenApiValidationRule {
	if m != nil {
		return m.OpenApiValidationRules
	}
	return nil
}

func (m *ValidateApiBySpecRule) GetFallThroughMode() *OpenApiFallThroughMode {
	if m != nil {
		return m.FallThroughMode
	}
	return nil
}

// Deprecated: Do not use.
func (m *ValidateApiBySpecRule) GetOversizedBodySkipValidation() *schema.Empty {
	if x, ok := m.GetOversizedBodyChoice().(*ValidateApiBySpecRule_OversizedBodySkipValidation); ok {
		return x.OversizedBodySkipValidation
	}
	return nil
}

// Deprecated: Do not use.
func (m *ValidateApiBySpecRule) GetOversizedBodyFailValidation() *schema.Empty {
	if x, ok := m.GetOversizedBodyChoice().(*ValidateApiBySpecRule_OversizedBodyFailValidation); ok {
		return x.OversizedBodyFailValidation
	}
	return nil
}

func (m *ValidateApiBySpecRule) GetSettings() *OpenApiValidationCommonSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ValidateApiBySpecRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ValidateApiBySpecRule_OversizedBodySkipValidation)(nil),
		(*ValidateApiBySpecRule_OversizedBodyFailValidation)(nil),
	}
}

// OpenAPI Validation Rule
//
// x-displayName: "OpenAPI Validation Rule"
// OpenAPI Validation Rule for a specific endpoint, base-path, or API group
type OpenApiValidationRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Validation Mode
	//
	// x-displayName: "Validation Mode"
	// x-required
	// Validation mode of OpenAPI specification.
	//  When a validation mismatch occurs on a request to one of the endpoints listed on the OpenAPI specification file (a.k.a. swagger)
	ValidationMode *OpenApiValidationMode `protobuf:"bytes,2,opt,name=validation_mode,json=validationMode,proto3" json:"validation_mode,omitempty"`
	// domain choices
	//
	// x-required
	// x-displayName: "Domain"
	// Choose if the rule will apply for all domains or a specific one.
	//
	// Types that are valid to be assigned to DomainChoice:
	//	*OpenApiValidationRule_AnyDomain
	//	*OpenApiValidationRule_SpecificDomain
	DomainChoice isOpenApiValidationRule_DomainChoice `protobuf_oneof:"domain_choice"`
	// condition type choices
	//
	// x-displayName: "Type"
	// x-required
	// Choose type of granularity this rule applies to
	//
	// Types that are valid to be assigned to ConditionTypeChoice:
	//	*OpenApiValidationRule_ApiEndpoint
	//	*OpenApiValidationRule_BasePath
	//	*OpenApiValidationRule_ApiGroup
	ConditionTypeChoice isOpenApiValidationRule_ConditionTypeChoice `protobuf_oneof:"condition_type_choice"`
}

func (m *OpenApiValidationRule) Reset()      { *m = OpenApiValidationRule{} }
func (*OpenApiValidationRule) ProtoMessage() {}
func (*OpenApiValidationRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{28}
}
func (m *OpenApiValidationRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenApiValidationRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OpenApiValidationRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenApiValidationRule.Merge(m, src)
}
func (m *OpenApiValidationRule) XXX_Size() int {
	return m.Size()
}
func (m *OpenApiValidationRule) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenApiValidationRule.DiscardUnknown(m)
}

var xxx_messageInfo_OpenApiValidationRule proto.InternalMessageInfo

type isOpenApiValidationRule_DomainChoice interface {
	isOpenApiValidationRule_DomainChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isOpenApiValidationRule_ConditionTypeChoice interface {
	isOpenApiValidationRule_ConditionTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OpenApiValidationRule_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,7,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type OpenApiValidationRule_SpecificDomain struct {
	SpecificDomain string `protobuf:"bytes,8,opt,name=specific_domain,json=specificDomain,proto3,oneof" json:"specific_domain,omitempty"`
}
type OpenApiValidationRule_ApiEndpoint struct {
	ApiEndpoint *ApiEndpointDetails `protobuf:"bytes,13,opt,name=api_endpoint,json=apiEndpoint,proto3,oneof" json:"api_endpoint,omitempty"`
}
type OpenApiValidationRule_BasePath struct {
	BasePath string `protobuf:"bytes,11,opt,name=base_path,json=basePath,proto3,oneof" json:"base_path,omitempty"`
}
type OpenApiValidationRule_ApiGroup struct {
	ApiGroup string `protobuf:"bytes,12,opt,name=api_group,json=apiGroup,proto3,oneof" json:"api_group,omitempty"`
}

func (*OpenApiValidationRule_AnyDomain) isOpenApiValidationRule_DomainChoice()          {}
func (*OpenApiValidationRule_SpecificDomain) isOpenApiValidationRule_DomainChoice()     {}
func (*OpenApiValidationRule_ApiEndpoint) isOpenApiValidationRule_ConditionTypeChoice() {}
func (*OpenApiValidationRule_BasePath) isOpenApiValidationRule_ConditionTypeChoice()    {}
func (*OpenApiValidationRule_ApiGroup) isOpenApiValidationRule_ConditionTypeChoice()    {}

func (m *OpenApiValidationRule) GetDomainChoice() isOpenApiValidationRule_DomainChoice {
	if m != nil {
		return m.DomainChoice
	}
	return nil
}
func (m *OpenApiValidationRule) GetConditionTypeChoice() isOpenApiValidationRule_ConditionTypeChoice {
	if m != nil {
		return m.ConditionTypeChoice
	}
	return nil
}

func (m *OpenApiValidationRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *OpenApiValidationRule) GetValidationMode() *OpenApiValidationMode {
	if m != nil {
		return m.ValidationMode
	}
	return nil
}

func (m *OpenApiValidationRule) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainChoice().(*OpenApiValidationRule_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *OpenApiValidationRule) GetSpecificDomain() string {
	if x, ok := m.GetDomainChoice().(*OpenApiValidationRule_SpecificDomain); ok {
		return x.SpecificDomain
	}
	return ""
}

func (m *OpenApiValidationRule) GetApiEndpoint() *ApiEndpointDetails {
	if x, ok := m.GetConditionTypeChoice().(*OpenApiValidationRule_ApiEndpoint); ok {
		return x.ApiEndpoint
	}
	return nil
}

func (m *OpenApiValidationRule) GetBasePath() string {
	if x, ok := m.GetConditionTypeChoice().(*OpenApiValidationRule_BasePath); ok {
		return x.BasePath
	}
	return ""
}

func (m *OpenApiValidationRule) GetApiGroup() string {
	if x, ok := m.GetConditionTypeChoice().(*OpenApiValidationRule_ApiGroup); ok {
		return x.ApiGroup
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OpenApiValidationRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OpenApiValidationRule_AnyDomain)(nil),
		(*OpenApiValidationRule_SpecificDomain)(nil),
		(*OpenApiValidationRule_ApiEndpoint)(nil),
		(*OpenApiValidationRule_BasePath)(nil),
		(*OpenApiValidationRule_ApiGroup)(nil),
	}
}

// OpenAPI specification validation common settings
//
// x-displayName: "Common Settings"
// OpenAPI specification validation settings relevant for "API Inventory" enforcement and for "Custom list" enforcement
type OpenApiValidationCommonSettings struct {
	// Policy of over-sized body
	//
	// x-displayName: "Policy for Over-Sized Body in Request/Response"
	// Policy of handling request/response with too long body
	//
	// Types that are valid to be assigned to OversizedBodyChoice:
	//	*OpenApiValidationCommonSettings_OversizedBodySkipValidation
	//	*OpenApiValidationCommonSettings_OversizedBodyFailValidation
	OversizedBodyChoice isOpenApiValidationCommonSettings_OversizedBodyChoice `protobuf_oneof:"oversized_body_choice"`
	// Property validation settings
	//
	// x-displayName: "Property Validation Settings"
	// Request/response properties validation settings
	//
	// Types that are valid to be assigned to PropertyValidationSettingsChoice:
	//	*OpenApiValidationCommonSettings_PropertyValidationSettingsDefault
	//	*OpenApiValidationCommonSettings_PropertyValidationSettingsCustom
	PropertyValidationSettingsChoice isOpenApiValidationCommonSettings_PropertyValidationSettingsChoice `protobuf_oneof:"property_validation_settings_choice"`
	// Policy of fail configuration
	//
	// x-displayName: "Policy for internal failure"
	// Policy of handling request/response when internal error has occur
	//
	// Types that are valid to be assigned to FailConfiguration:
	//	*OpenApiValidationCommonSettings_FailOpen
	//	*OpenApiValidationCommonSettings_FailClose
	FailConfiguration isOpenApiValidationCommonSettings_FailConfiguration `protobuf_oneof:"fail_configuration"`
}

func (m *OpenApiValidationCommonSettings) Reset()      { *m = OpenApiValidationCommonSettings{} }
func (*OpenApiValidationCommonSettings) ProtoMessage() {}
func (*OpenApiValidationCommonSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{29}
}
func (m *OpenApiValidationCommonSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenApiValidationCommonSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OpenApiValidationCommonSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenApiValidationCommonSettings.Merge(m, src)
}
func (m *OpenApiValidationCommonSettings) XXX_Size() int {
	return m.Size()
}
func (m *OpenApiValidationCommonSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenApiValidationCommonSettings.DiscardUnknown(m)
}

var xxx_messageInfo_OpenApiValidationCommonSettings proto.InternalMessageInfo

type isOpenApiValidationCommonSettings_OversizedBodyChoice interface {
	isOpenApiValidationCommonSettings_OversizedBodyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isOpenApiValidationCommonSettings_PropertyValidationSettingsChoice interface {
	isOpenApiValidationCommonSettings_PropertyValidationSettingsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isOpenApiValidationCommonSettings_FailConfiguration interface {
	isOpenApiValidationCommonSettings_FailConfiguration()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OpenApiValidationCommonSettings_OversizedBodySkipValidation struct {
	OversizedBodySkipValidation *schema.Empty `protobuf:"bytes,2,opt,name=oversized_body_skip_validation,json=oversizedBodySkipValidation,proto3,oneof" json:"oversized_body_skip_validation,omitempty"`
}
type OpenApiValidationCommonSettings_OversizedBodyFailValidation struct {
	OversizedBodyFailValidation *schema.Empty `protobuf:"bytes,3,opt,name=oversized_body_fail_validation,json=oversizedBodyFailValidation,proto3,oneof" json:"oversized_body_fail_validation,omitempty"`
}
type OpenApiValidationCommonSettings_PropertyValidationSettingsDefault struct {
	PropertyValidationSettingsDefault *schema.Empty `protobuf:"bytes,5,opt,name=property_validation_settings_default,json=propertyValidationSettingsDefault,proto3,oneof" json:"property_validation_settings_default,omitempty"`
}
type OpenApiValidationCommonSettings_PropertyValidationSettingsCustom struct {
	PropertyValidationSettingsCustom *ValidationPropertySetting `protobuf:"bytes,6,opt,name=property_validation_settings_custom,json=propertyValidationSettingsCustom,proto3,oneof" json:"property_validation_settings_custom,omitempty"`
}
type OpenApiValidationCommonSettings_FailOpen struct {
	FailOpen *schema.Empty `protobuf:"bytes,8,opt,name=fail_open,json=failOpen,proto3,oneof" json:"fail_open,omitempty"`
}
type OpenApiValidationCommonSettings_FailClose struct {
	FailClose *schema.Empty `protobuf:"bytes,9,opt,name=fail_close,json=failClose,proto3,oneof" json:"fail_close,omitempty"`
}

func (*OpenApiValidationCommonSettings_OversizedBodySkipValidation) isOpenApiValidationCommonSettings_OversizedBodyChoice() {
}
func (*OpenApiValidationCommonSettings_OversizedBodyFailValidation) isOpenApiValidationCommonSettings_OversizedBodyChoice() {
}
func (*OpenApiValidationCommonSettings_PropertyValidationSettingsDefault) isOpenApiValidationCommonSettings_PropertyValidationSettingsChoice() {
}
func (*OpenApiValidationCommonSettings_PropertyValidationSettingsCustom) isOpenApiValidationCommonSettings_PropertyValidationSettingsChoice() {
}
func (*OpenApiValidationCommonSettings_FailOpen) isOpenApiValidationCommonSettings_FailConfiguration() {
}
func (*OpenApiValidationCommonSettings_FailClose) isOpenApiValidationCommonSettings_FailConfiguration() {
}

func (m *OpenApiValidationCommonSettings) GetOversizedBodyChoice() isOpenApiValidationCommonSettings_OversizedBodyChoice {
	if m != nil {
		return m.OversizedBodyChoice
	}
	return nil
}
func (m *OpenApiValidationCommonSettings) GetPropertyValidationSettingsChoice() isOpenApiValidationCommonSettings_PropertyValidationSettingsChoice {
	if m != nil {
		return m.PropertyValidationSettingsChoice
	}
	return nil
}
func (m *OpenApiValidationCommonSettings) GetFailConfiguration() isOpenApiValidationCommonSettings_FailConfiguration {
	if m != nil {
		return m.FailConfiguration
	}
	return nil
}

func (m *OpenApiValidationCommonSettings) GetOversizedBodySkipValidation() *schema.Empty {
	if x, ok := m.GetOversizedBodyChoice().(*OpenApiValidationCommonSettings_OversizedBodySkipValidation); ok {
		return x.OversizedBodySkipValidation
	}
	return nil
}

func (m *OpenApiValidationCommonSettings) GetOversizedBodyFailValidation() *schema.Empty {
	if x, ok := m.GetOversizedBodyChoice().(*OpenApiValidationCommonSettings_OversizedBodyFailValidation); ok {
		return x.OversizedBodyFailValidation
	}
	return nil
}

func (m *OpenApiValidationCommonSettings) GetPropertyValidationSettingsDefault() *schema.Empty {
	if x, ok := m.GetPropertyValidationSettingsChoice().(*OpenApiValidationCommonSettings_PropertyValidationSettingsDefault); ok {
		return x.PropertyValidationSettingsDefault
	}
	return nil
}

func (m *OpenApiValidationCommonSettings) GetPropertyValidationSettingsCustom() *ValidationPropertySetting {
	if x, ok := m.GetPropertyValidationSettingsChoice().(*OpenApiValidationCommonSettings_PropertyValidationSettingsCustom); ok {
		return x.PropertyValidationSettingsCustom
	}
	return nil
}

func (m *OpenApiValidationCommonSettings) GetFailOpen() *schema.Empty {
	if x, ok := m.GetFailConfiguration().(*OpenApiValidationCommonSettings_FailOpen); ok {
		return x.FailOpen
	}
	return nil
}

func (m *OpenApiValidationCommonSettings) GetFailClose() *schema.Empty {
	if x, ok := m.GetFailConfiguration().(*OpenApiValidationCommonSettings_FailClose); ok {
		return x.FailClose
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OpenApiValidationCommonSettings) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OpenApiValidationCommonSettings_OversizedBodySkipValidation)(nil),
		(*OpenApiValidationCommonSettings_OversizedBodyFailValidation)(nil),
		(*OpenApiValidationCommonSettings_PropertyValidationSettingsDefault)(nil),
		(*OpenApiValidationCommonSettings_PropertyValidationSettingsCustom)(nil),
		(*OpenApiValidationCommonSettings_FailOpen)(nil),
		(*OpenApiValidationCommonSettings_FailClose)(nil),
	}
}

// Validation Property settings
//
// x-displayName: "Validation Property Settings"
// Custom property validation settings
type ValidationPropertySetting struct {
	// Query parameters validation settings
	//
	// x-displayName: "Validation Settings For Query Parameters"
	// Custom settings for query parameters validation
	QueryParameters *ValidationSettingForQueryParameters `protobuf:"bytes,1,opt,name=queryParameters,proto3" json:"queryParameters,omitempty"`
	// Headers validation settings
	//
	// x-displayName: "Validation Settings For Headers"
	// Custom settings for headers validation
	Headers *ValidationSettingForHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
}

func (m *ValidationPropertySetting) Reset()      { *m = ValidationPropertySetting{} }
func (*ValidationPropertySetting) ProtoMessage() {}
func (*ValidationPropertySetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{30}
}
func (m *ValidationPropertySetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidationPropertySetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValidationPropertySetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationPropertySetting.Merge(m, src)
}
func (m *ValidationPropertySetting) XXX_Size() int {
	return m.Size()
}
func (m *ValidationPropertySetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationPropertySetting.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationPropertySetting proto.InternalMessageInfo

func (m *ValidationPropertySetting) GetQueryParameters() *ValidationSettingForQueryParameters {
	if m != nil {
		return m.QueryParameters
	}
	return nil
}

func (m *ValidationPropertySetting) GetHeaders() *ValidationSettingForHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

// Validation Settings For Query Parameters
//
// x-displayName: "Validation Settings For Query Parameters"
// Custom settings for query parameters validation
type ValidationSettingForQueryParameters struct {
	// Allow/Disallow additional query parameters in Request
	//
	// x-displayName: "Allow/Disallow additional query parameters in Request"
	// x-required
	// Allow/Disallow additional query parameters in Request
	//
	// Types that are valid to be assigned to AdditionalParametersChoice:
	//	*ValidationSettingForQueryParameters_AllowAdditionalParameters
	//	*ValidationSettingForQueryParameters_DisallowAdditionalParameters
	AdditionalParametersChoice isValidationSettingForQueryParameters_AdditionalParametersChoice `protobuf_oneof:"additional_parameters_choice"`
}

func (m *ValidationSettingForQueryParameters) Reset()      { *m = ValidationSettingForQueryParameters{} }
func (*ValidationSettingForQueryParameters) ProtoMessage() {}
func (*ValidationSettingForQueryParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{31}
}
func (m *ValidationSettingForQueryParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidationSettingForQueryParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValidationSettingForQueryParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationSettingForQueryParameters.Merge(m, src)
}
func (m *ValidationSettingForQueryParameters) XXX_Size() int {
	return m.Size()
}
func (m *ValidationSettingForQueryParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationSettingForQueryParameters.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationSettingForQueryParameters proto.InternalMessageInfo

type isValidationSettingForQueryParameters_AdditionalParametersChoice interface {
	isValidationSettingForQueryParameters_AdditionalParametersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ValidationSettingForQueryParameters_AllowAdditionalParameters struct {
	AllowAdditionalParameters *schema.Empty `protobuf:"bytes,2,opt,name=allow_additional_parameters,json=allowAdditionalParameters,proto3,oneof" json:"allow_additional_parameters,omitempty"`
}
type ValidationSettingForQueryParameters_DisallowAdditionalParameters struct {
	DisallowAdditionalParameters *schema.Empty `protobuf:"bytes,3,opt,name=disallow_additional_parameters,json=disallowAdditionalParameters,proto3,oneof" json:"disallow_additional_parameters,omitempty"`
}

func (*ValidationSettingForQueryParameters_AllowAdditionalParameters) isValidationSettingForQueryParameters_AdditionalParametersChoice() {
}
func (*ValidationSettingForQueryParameters_DisallowAdditionalParameters) isValidationSettingForQueryParameters_AdditionalParametersChoice() {
}

func (m *ValidationSettingForQueryParameters) GetAdditionalParametersChoice() isValidationSettingForQueryParameters_AdditionalParametersChoice {
	if m != nil {
		return m.AdditionalParametersChoice
	}
	return nil
}

func (m *ValidationSettingForQueryParameters) GetAllowAdditionalParameters() *schema.Empty {
	if x, ok := m.GetAdditionalParametersChoice().(*ValidationSettingForQueryParameters_AllowAdditionalParameters); ok {
		return x.AllowAdditionalParameters
	}
	return nil
}

func (m *ValidationSettingForQueryParameters) GetDisallowAdditionalParameters() *schema.Empty {
	if x, ok := m.GetAdditionalParametersChoice().(*ValidationSettingForQueryParameters_DisallowAdditionalParameters); ok {
		return x.DisallowAdditionalParameters
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ValidationSettingForQueryParameters) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ValidationSettingForQueryParameters_AllowAdditionalParameters)(nil),
		(*ValidationSettingForQueryParameters_DisallowAdditionalParameters)(nil),
	}
}

// Validation Settings For Headers
//
// x-displayName: "Validation Settings For Headers"
// Custom settings for headers validation
type ValidationSettingForHeaders struct {
	// Allow/Disallow additional headers in Request/Response
	//
	// x-displayName: "Allow/Disallow additional headers in Request/Response"
	// x-required
	// Allow/Disallow additional headers in Request/Response
	//
	// Types that are valid to be assigned to AdditionalHeadersChoice:
	//	*ValidationSettingForHeaders_AllowAdditionalHeaders
	//	*ValidationSettingForHeaders_DisallowAdditionalHeaders
	AdditionalHeadersChoice isValidationSettingForHeaders_AdditionalHeadersChoice `protobuf_oneof:"additional_headers_choice"`
}

func (m *ValidationSettingForHeaders) Reset()      { *m = ValidationSettingForHeaders{} }
func (*ValidationSettingForHeaders) ProtoMessage() {}
func (*ValidationSettingForHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{32}
}
func (m *ValidationSettingForHeaders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidationSettingForHeaders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValidationSettingForHeaders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidationSettingForHeaders.Merge(m, src)
}
func (m *ValidationSettingForHeaders) XXX_Size() int {
	return m.Size()
}
func (m *ValidationSettingForHeaders) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidationSettingForHeaders.DiscardUnknown(m)
}

var xxx_messageInfo_ValidationSettingForHeaders proto.InternalMessageInfo

type isValidationSettingForHeaders_AdditionalHeadersChoice interface {
	isValidationSettingForHeaders_AdditionalHeadersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ValidationSettingForHeaders_AllowAdditionalHeaders struct {
	AllowAdditionalHeaders *schema.Empty `protobuf:"bytes,2,opt,name=allow_additional_headers,json=allowAdditionalHeaders,proto3,oneof" json:"allow_additional_headers,omitempty"`
}
type ValidationSettingForHeaders_DisallowAdditionalHeaders struct {
	DisallowAdditionalHeaders *schema.Empty `protobuf:"bytes,3,opt,name=disallow_additional_headers,json=disallowAdditionalHeaders,proto3,oneof" json:"disallow_additional_headers,omitempty"`
}

func (*ValidationSettingForHeaders_AllowAdditionalHeaders) isValidationSettingForHeaders_AdditionalHeadersChoice() {
}
func (*ValidationSettingForHeaders_DisallowAdditionalHeaders) isValidationSettingForHeaders_AdditionalHeadersChoice() {
}

func (m *ValidationSettingForHeaders) GetAdditionalHeadersChoice() isValidationSettingForHeaders_AdditionalHeadersChoice {
	if m != nil {
		return m.AdditionalHeadersChoice
	}
	return nil
}

func (m *ValidationSettingForHeaders) GetAllowAdditionalHeaders() *schema.Empty {
	if x, ok := m.GetAdditionalHeadersChoice().(*ValidationSettingForHeaders_AllowAdditionalHeaders); ok {
		return x.AllowAdditionalHeaders
	}
	return nil
}

func (m *ValidationSettingForHeaders) GetDisallowAdditionalHeaders() *schema.Empty {
	if x, ok := m.GetAdditionalHeadersChoice().(*ValidationSettingForHeaders_DisallowAdditionalHeaders); ok {
		return x.DisallowAdditionalHeaders
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ValidationSettingForHeaders) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ValidationSettingForHeaders_AllowAdditionalHeaders)(nil),
		(*ValidationSettingForHeaders_DisallowAdditionalHeaders)(nil),
	}
}

// api definition list
//
// x-displayName: "API Definition List"
// List of api definitions.
type ApiDefinitionList struct {
	// API Definitions
	//
	// x-displayName: "API Definitions"
	// API Definitions using OpenAPI specification files
	ApiDefinitions []*views.ObjectRefType `protobuf:"bytes,1,rep,name=api_definitions,json=apiDefinitions,proto3" json:"api_definitions,omitempty"`
}

func (m *ApiDefinitionList) Reset()      { *m = ApiDefinitionList{} }
func (*ApiDefinitionList) ProtoMessage() {}
func (*ApiDefinitionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{33}
}
func (m *ApiDefinitionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiDefinitionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiDefinitionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiDefinitionList.Merge(m, src)
}
func (m *ApiDefinitionList) XXX_Size() int {
	return m.Size()
}
func (m *ApiDefinitionList) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiDefinitionList.DiscardUnknown(m)
}

var xxx_messageInfo_ApiDefinitionList proto.InternalMessageInfo

func (m *ApiDefinitionList) GetApiDefinitions() []*views.ObjectRefType {
	if m != nil {
		return m.ApiDefinitions
	}
	return nil
}

// API Protection Rules
//
// x-displayName: "API Protection Rules"
// API Protection Rules
type APIProtectionRules struct {
	// api_endpoint_rules
	//
	// x-displayName: "API Endpoints"
	// This category defines specific rules per API endpoints.
	// If request matches any of these rules, skipping second category rules.
	ApiEndpointRules []*APIEndpointProtectionRule `protobuf:"bytes,1,rep,name=api_endpoint_rules,json=apiEndpointRules,proto3" json:"api_endpoint_rules,omitempty"`
	// api_groups_rules
	//
	// x-displayName: "Server URLs and API Groups"
	// This category includes rules per API group or Server URL.
	// For API groups, refer to API Definition which includes API groups derived from uploaded swaggers.
	ApiGroupsRules []*APIGroupProtectionRule `protobuf:"bytes,2,rep,name=api_groups_rules,json=apiGroupsRules,proto3" json:"api_groups_rules,omitempty"`
}

func (m *APIProtectionRules) Reset()      { *m = APIProtectionRules{} }
func (*APIProtectionRules) ProtoMessage() {}
func (*APIProtectionRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{34}
}
func (m *APIProtectionRules) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIProtectionRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIProtectionRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIProtectionRules.Merge(m, src)
}
func (m *APIProtectionRules) XXX_Size() int {
	return m.Size()
}
func (m *APIProtectionRules) XXX_DiscardUnknown() {
	xxx_messageInfo_APIProtectionRules.DiscardUnknown(m)
}

var xxx_messageInfo_APIProtectionRules proto.InternalMessageInfo

func (m *APIProtectionRules) GetApiEndpointRules() []*APIEndpointProtectionRule {
	if m != nil {
		return m.ApiEndpointRules
	}
	return nil
}

func (m *APIProtectionRules) GetApiGroupsRules() []*APIGroupProtectionRule {
	if m != nil {
		return m.ApiGroupsRules
	}
	return nil
}

// API Endpoint Protection Rule
//
// x-displayName: "API Endpoint Protection Rule"
// API Protection Rule for a specific endpoint
type APIEndpointProtectionRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// action
	//
	// x-required
	// x-displayName: "Rule Action"
	// The action to take if the input request matches the rule.
	Action *APIProtectionRuleAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	// domain choices
	//
	// x-displayName: "Domain"
	// x-required
	// Choose if the rule will apply for all domains or a specific one.
	//
	// Types that are valid to be assigned to DomainChoice:
	//	*APIEndpointProtectionRule_AnyDomain
	//	*APIEndpointProtectionRule_SpecificDomain
	DomainChoice isAPIEndpointProtectionRule_DomainChoice `protobuf_oneof:"domain_choice"`
	// api endpoint path
	//
	// x-required
	// x-example: "/endpoint1"
	// x-displayName: "API Endpoint"
	// The endpoint (path) of the request.
	ApiEndpointPath string `protobuf:"bytes,4,opt,name=api_endpoint_path,json=apiEndpointPath,proto3" json:"api_endpoint_path,omitempty"`
	// method
	//
	// x-displayName: "HTTP Methods"
	// The list of expected values for the HTTP method in the request API. The actual value of the HTTP method is extracted from the HTTP request.
	// The predicate evaluates to true if the actual HTTP method belongs is present in the list of expected values.
	ApiEndpointMethod *policy.HttpMethodMatcherType `protobuf:"bytes,5,opt,name=api_endpoint_method,json=apiEndpointMethod,proto3" json:"api_endpoint_method,omitempty"`
	// request_matcher
	//
	// x-displayName: "Request"
	// Conditions related to the request, such as query parameters, headers, etc.
	RequestMatcher *policy.RequestMatcher `protobuf:"bytes,6,opt,name=request_matcher,json=requestMatcher,proto3" json:"request_matcher,omitempty"`
	// client_matcher
	//
	// x-displayName: "Clients"
	// Conditions related to the origin of the request, such as client IP, TLS fingerprint, etc.
	ClientMatcher *policy.ClientMatcher `protobuf:"bytes,7,opt,name=client_matcher,json=clientMatcher,proto3" json:"client_matcher,omitempty"`
}

func (m *APIEndpointProtectionRule) Reset()      { *m = APIEndpointProtectionRule{} }
func (*APIEndpointProtectionRule) ProtoMessage() {}
func (*APIEndpointProtectionRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{35}
}
func (m *APIEndpointProtectionRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIEndpointProtectionRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIEndpointProtectionRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIEndpointProtectionRule.Merge(m, src)
}
func (m *APIEndpointProtectionRule) XXX_Size() int {
	return m.Size()
}
func (m *APIEndpointProtectionRule) XXX_DiscardUnknown() {
	xxx_messageInfo_APIEndpointProtectionRule.DiscardUnknown(m)
}

var xxx_messageInfo_APIEndpointProtectionRule proto.InternalMessageInfo

type isAPIEndpointProtectionRule_DomainChoice interface {
	isAPIEndpointProtectionRule_DomainChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type APIEndpointProtectionRule_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,9,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type APIEndpointProtectionRule_SpecificDomain struct {
	SpecificDomain string `protobuf:"bytes,10,opt,name=specific_domain,json=specificDomain,proto3,oneof" json:"specific_domain,omitempty"`
}

func (*APIEndpointProtectionRule_AnyDomain) isAPIEndpointProtectionRule_DomainChoice()      {}
func (*APIEndpointProtectionRule_SpecificDomain) isAPIEndpointProtectionRule_DomainChoice() {}

func (m *APIEndpointProtectionRule) GetDomainChoice() isAPIEndpointProtectionRule_DomainChoice {
	if m != nil {
		return m.DomainChoice
	}
	return nil
}

func (m *APIEndpointProtectionRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *APIEndpointProtectionRule) GetAction() *APIProtectionRuleAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *APIEndpointProtectionRule) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainChoice().(*APIEndpointProtectionRule_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *APIEndpointProtectionRule) GetSpecificDomain() string {
	if x, ok := m.GetDomainChoice().(*APIEndpointProtectionRule_SpecificDomain); ok {
		return x.SpecificDomain
	}
	return ""
}

func (m *APIEndpointProtectionRule) GetApiEndpointPath() string {
	if m != nil {
		return m.ApiEndpointPath
	}
	return ""
}

func (m *APIEndpointProtectionRule) GetApiEndpointMethod() *policy.HttpMethodMatcherType {
	if m != nil {
		return m.ApiEndpointMethod
	}
	return nil
}

func (m *APIEndpointProtectionRule) GetRequestMatcher() *policy.RequestMatcher {
	if m != nil {
		return m.RequestMatcher
	}
	return nil
}

func (m *APIEndpointProtectionRule) GetClientMatcher() *policy.ClientMatcher {
	if m != nil {
		return m.ClientMatcher
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*APIEndpointProtectionRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*APIEndpointProtectionRule_AnyDomain)(nil),
		(*APIEndpointProtectionRule_SpecificDomain)(nil),
	}
}

// API Group Protection  Rule
//
// x-displayName: "API Group Protection Rule"
// API Protection Rule for a group or a base url
type APIGroupProtectionRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// action
	//
	// x-required
	// x-displayName: "Rule Action"
	// The action to take if the input request matches the rule.
	Action *APIProtectionRuleAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	// domain choices
	//
	// x-displayName: "Domain"
	// x-required
	// Choose if the rule will apply for all domains or a specific one.
	//
	// Types that are valid to be assigned to DomainChoice:
	//	*APIGroupProtectionRule_AnyDomain
	//	*APIGroupProtectionRule_SpecificDomain
	DomainChoice isAPIGroupProtectionRule_DomainChoice `protobuf_oneof:"domain_choice"`
	// base path
	//
	// x-required
	// x-example: "/v1"
	// x-displayName: "Base Path"
	// Prefix of the request path.
	// For example: /v1
	BasePath string `protobuf:"bytes,10,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
	// api_group
	//
	// x-displayName: "API Group"
	// x-example: "oas-all-operations"
	// API groups derived from API Definition swaggers.
	// For example oas-all-operations including all paths and methods from the swaggers, oas-base-urls covering all requests under base-paths from the swaggers.
	// Custom groups can be created if user tags paths or operations with "x-volterra-api-group" extensions inside swaggers.
	ApiGroup string `protobuf:"bytes,4,opt,name=api_group,json=apiGroup,proto3" json:"api_group,omitempty"`
	// request_matcher
	//
	// x-displayName: "Request"
	// Conditions related to the request, such as query parameters, headers, etc.
	RequestMatcher *policy.RequestMatcher `protobuf:"bytes,5,opt,name=request_matcher,json=requestMatcher,proto3" json:"request_matcher,omitempty"`
	// client_matcher
	//
	// x-displayName: "Clients"
	// Conditions related to the origin of the request, such as client IP, TLS fingerprint, etc.
	ClientMatcher *policy.ClientMatcher `protobuf:"bytes,6,opt,name=client_matcher,json=clientMatcher,proto3" json:"client_matcher,omitempty"`
}

func (m *APIGroupProtectionRule) Reset()      { *m = APIGroupProtectionRule{} }
func (*APIGroupProtectionRule) ProtoMessage() {}
func (*APIGroupProtectionRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{36}
}
func (m *APIGroupProtectionRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIGroupProtectionRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIGroupProtectionRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIGroupProtectionRule.Merge(m, src)
}
func (m *APIGroupProtectionRule) XXX_Size() int {
	return m.Size()
}
func (m *APIGroupProtectionRule) XXX_DiscardUnknown() {
	xxx_messageInfo_APIGroupProtectionRule.DiscardUnknown(m)
}

var xxx_messageInfo_APIGroupProtectionRule proto.InternalMessageInfo

type isAPIGroupProtectionRule_DomainChoice interface {
	isAPIGroupProtectionRule_DomainChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type APIGroupProtectionRule_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,8,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type APIGroupProtectionRule_SpecificDomain struct {
	SpecificDomain string `protobuf:"bytes,9,opt,name=specific_domain,json=specificDomain,proto3,oneof" json:"specific_domain,omitempty"`
}

func (*APIGroupProtectionRule_AnyDomain) isAPIGroupProtectionRule_DomainChoice()      {}
func (*APIGroupProtectionRule_SpecificDomain) isAPIGroupProtectionRule_DomainChoice() {}

func (m *APIGroupProtectionRule) GetDomainChoice() isAPIGroupProtectionRule_DomainChoice {
	if m != nil {
		return m.DomainChoice
	}
	return nil
}

func (m *APIGroupProtectionRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *APIGroupProtectionRule) GetAction() *APIProtectionRuleAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *APIGroupProtectionRule) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainChoice().(*APIGroupProtectionRule_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *APIGroupProtectionRule) GetSpecificDomain() string {
	if x, ok := m.GetDomainChoice().(*APIGroupProtectionRule_SpecificDomain); ok {
		return x.SpecificDomain
	}
	return ""
}

func (m *APIGroupProtectionRule) GetBasePath() string {
	if m != nil {
		return m.BasePath
	}
	return ""
}

func (m *APIGroupProtectionRule) GetApiGroup() string {
	if m != nil {
		return m.ApiGroup
	}
	return ""
}

func (m *APIGroupProtectionRule) GetRequestMatcher() *policy.RequestMatcher {
	if m != nil {
		return m.RequestMatcher
	}
	return nil
}

func (m *APIGroupProtectionRule) GetClientMatcher() *policy.ClientMatcher {
	if m != nil {
		return m.ClientMatcher
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*APIGroupProtectionRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*APIGroupProtectionRule_AnyDomain)(nil),
		(*APIGroupProtectionRule_SpecificDomain)(nil),
	}
}

// API Protection Rule Action
//
// x-displayName: "API Protection Rule Action"
// The action to take if the input request matches the rule.
type APIProtectionRuleAction struct {
	// action
	//
	// x-displayName: "Action"
	// x-required
	// The action to take when rule is matched.
	//
	// Types that are valid to be assigned to Action:
	//	*APIProtectionRuleAction_Allow
	//	*APIProtectionRuleAction_Deny
	Action isAPIProtectionRuleAction_Action `protobuf_oneof:"action"`
}

func (m *APIProtectionRuleAction) Reset()      { *m = APIProtectionRuleAction{} }
func (*APIProtectionRuleAction) ProtoMessage() {}
func (*APIProtectionRuleAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{37}
}
func (m *APIProtectionRuleAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIProtectionRuleAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIProtectionRuleAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIProtectionRuleAction.Merge(m, src)
}
func (m *APIProtectionRuleAction) XXX_Size() int {
	return m.Size()
}
func (m *APIProtectionRuleAction) XXX_DiscardUnknown() {
	xxx_messageInfo_APIProtectionRuleAction.DiscardUnknown(m)
}

var xxx_messageInfo_APIProtectionRuleAction proto.InternalMessageInfo

type isAPIProtectionRuleAction_Action interface {
	isAPIProtectionRuleAction_Action()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type APIProtectionRuleAction_Allow struct {
	Allow *schema.Empty `protobuf:"bytes,2,opt,name=allow,proto3,oneof" json:"allow,omitempty"`
}
type APIProtectionRuleAction_Deny struct {
	Deny *schema.Empty `protobuf:"bytes,3,opt,name=deny,proto3,oneof" json:"deny,omitempty"`
}

func (*APIProtectionRuleAction_Allow) isAPIProtectionRuleAction_Action() {}
func (*APIProtectionRuleAction_Deny) isAPIProtectionRuleAction_Action()  {}

func (m *APIProtectionRuleAction) GetAction() isAPIProtectionRuleAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *APIProtectionRuleAction) GetAllow() *schema.Empty {
	if x, ok := m.GetAction().(*APIProtectionRuleAction_Allow); ok {
		return x.Allow
	}
	return nil
}

func (m *APIProtectionRuleAction) GetDeny() *schema.Empty {
	if x, ok := m.GetAction().(*APIProtectionRuleAction_Deny); ok {
		return x.Deny
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*APIProtectionRuleAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*APIProtectionRuleAction_Allow)(nil),
		(*APIProtectionRuleAction_Deny)(nil),
	}
}

// JWT Validation
//
// x-displayName: "JWT Validation"
// JWT Validation stops JWT replay attacks and JWT tampering by cryptographically verifying incoming
// JWTs before they are passed to your API origin. JWT Validation will also stop requests with expired
// tokens or tokens that are not yet valid.
type JWTValidation struct {
	// target
	//
	// x-displayName: "Target"
	// x-required
	// Define endpoints for which JWT token validation will be performed
	Target *Target `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// token location
	//
	// x-displayName: "Token Location"
	// x-required
	// Define where in the HTTP request the JWT token will be extracted
	TokenLocation *TokenLocation `protobuf:"bytes,2,opt,name=token_location,json=tokenLocation,proto3" json:"token_location,omitempty"`
	// action
	//
	// x-displayName: "Action"
	// x-required
	Action *schema.Action `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	// jwks_configuration
	//
	// x-displayName: "JSON Web Key Set (JWKS) Configuration"
	// x-required
	// Configuration of the encryption keys that are used for JWT signature validation.
	// Currently only the option of manually importing the JSON Web Key Set (JWKS) is supported.
	//
	// Types that are valid to be assigned to JwksConfiguration:
	//	*JWTValidation_AuthServerUri
	//	*JWTValidation_Jwks
	//	*JWTValidation_JwksConfig
	JwksConfiguration isJWTValidation_JwksConfiguration `protobuf_oneof:"jwks_configuration"`
	// reserved_claims
	//
	// x-displayName: "Reserved Claims Validation"
	// Configuration required for validation of reserved claims. If some claims are absent in
	// the token validation of these claims should be disabled.
	ReservedClaims *ReservedClaims `protobuf:"bytes,7,opt,name=reserved_claims,json=reservedClaims,proto3" json:"reserved_claims,omitempty"`
	// Mandatory Claims
	//
	// x-displayName: "Mandatory Claims"
	// Configuration for validation of mandatory claims. The system will verify that the claim exists in JWT.
	// If the claim does not exist JWT token validation will fail.
	MandatoryClaims *MandatoryClaims `protobuf:"bytes,9,opt,name=mandatory_claims,json=mandatoryClaims,proto3" json:"mandatory_claims,omitempty"`
}

func (m *JWTValidation) Reset()      { *m = JWTValidation{} }
func (*JWTValidation) ProtoMessage() {}
func (*JWTValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{38}
}
func (m *JWTValidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JWTValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JWTValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTValidation.Merge(m, src)
}
func (m *JWTValidation) XXX_Size() int {
	return m.Size()
}
func (m *JWTValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTValidation.DiscardUnknown(m)
}

var xxx_messageInfo_JWTValidation proto.InternalMessageInfo

type isJWTValidation_JwksConfiguration interface {
	isJWTValidation_JwksConfiguration()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type JWTValidation_AuthServerUri struct {
	AuthServerUri string `protobuf:"bytes,5,opt,name=auth_server_uri,json=authServerUri,proto3,oneof" json:"auth_server_uri,omitempty"`
}
type JWTValidation_Jwks struct {
	Jwks string `protobuf:"bytes,6,opt,name=jwks,proto3,oneof" json:"jwks,omitempty"`
}
type JWTValidation_JwksConfig struct {
	JwksConfig *JWKS `protobuf:"bytes,8,opt,name=jwks_config,json=jwksConfig,proto3,oneof" json:"jwks_config,omitempty"`
}

func (*JWTValidation_AuthServerUri) isJWTValidation_JwksConfiguration() {}
func (*JWTValidation_Jwks) isJWTValidation_JwksConfiguration()          {}
func (*JWTValidation_JwksConfig) isJWTValidation_JwksConfiguration()    {}

func (m *JWTValidation) GetJwksConfiguration() isJWTValidation_JwksConfiguration {
	if m != nil {
		return m.JwksConfiguration
	}
	return nil
}

func (m *JWTValidation) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *JWTValidation) GetTokenLocation() *TokenLocation {
	if m != nil {
		return m.TokenLocation
	}
	return nil
}

func (m *JWTValidation) GetAction() *schema.Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *JWTValidation) GetAuthServerUri() string {
	if x, ok := m.GetJwksConfiguration().(*JWTValidation_AuthServerUri); ok {
		return x.AuthServerUri
	}
	return ""
}

func (m *JWTValidation) GetJwks() string {
	if x, ok := m.GetJwksConfiguration().(*JWTValidation_Jwks); ok {
		return x.Jwks
	}
	return ""
}

func (m *JWTValidation) GetJwksConfig() *JWKS {
	if x, ok := m.GetJwksConfiguration().(*JWTValidation_JwksConfig); ok {
		return x.JwksConfig
	}
	return nil
}

func (m *JWTValidation) GetReservedClaims() *ReservedClaims {
	if m != nil {
		return m.ReservedClaims
	}
	return nil
}

func (m *JWTValidation) GetMandatoryClaims() *MandatoryClaims {
	if m != nil {
		return m.MandatoryClaims
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*JWTValidation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*JWTValidation_AuthServerUri)(nil),
		(*JWTValidation_Jwks)(nil),
		(*JWTValidation_JwksConfig)(nil),
	}
}

// MandatoryClaims
//
// x-displayName: "Mandatory Claims"
// Configurable Validation of mandatory Claims.
type MandatoryClaims struct {
	// Claim names
	//
	// x-displayName: "Claim Names"
	ClaimNames []string `protobuf:"bytes,1,rep,name=claim_names,json=claimNames,proto3" json:"claim_names,omitempty"`
}

func (m *MandatoryClaims) Reset()      { *m = MandatoryClaims{} }
func (*MandatoryClaims) ProtoMessage() {}
func (*MandatoryClaims) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{39}
}
func (m *MandatoryClaims) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MandatoryClaims) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MandatoryClaims) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MandatoryClaims.Merge(m, src)
}
func (m *MandatoryClaims) XXX_Size() int {
	return m.Size()
}
func (m *MandatoryClaims) XXX_DiscardUnknown() {
	xxx_messageInfo_MandatoryClaims.DiscardUnknown(m)
}

var xxx_messageInfo_MandatoryClaims proto.InternalMessageInfo

func (m *MandatoryClaims) GetClaimNames() []string {
	if m != nil {
		return m.ClaimNames
	}
	return nil
}

// target
//
// x-displayName: "Target"
// Define endpoints for which JWT token validation will be performed
type Target struct {
	// target
	//
	// x-displayName: "Target"
	// x-required
	// Define endpoints for which JWT token validation will be performed
	//
	// Types that are valid to be assigned to Target:
	//	*Target_AllEndpoint
	//	*Target_ApiGroups
	//	*Target_BasePaths
	Target isTarget_Target `protobuf_oneof:"target"`
}

func (m *Target) Reset()      { *m = Target{} }
func (*Target) ProtoMessage() {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{40}
}
func (m *Target) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(m, src)
}
func (m *Target) XXX_Size() int {
	return m.Size()
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

type isTarget_Target interface {
	isTarget_Target()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Target_AllEndpoint struct {
	AllEndpoint *schema.Empty `protobuf:"bytes,2,opt,name=all_endpoint,json=allEndpoint,proto3,oneof" json:"all_endpoint,omitempty"`
}
type Target_ApiGroups struct {
	ApiGroups *APIGroups `protobuf:"bytes,3,opt,name=api_groups,json=apiGroups,proto3,oneof" json:"api_groups,omitempty"`
}
type Target_BasePaths struct {
	BasePaths *BasePathsType `protobuf:"bytes,4,opt,name=base_paths,json=basePaths,proto3,oneof" json:"base_paths,omitempty"`
}

func (*Target_AllEndpoint) isTarget_Target() {}
func (*Target_ApiGroups) isTarget_Target()   {}
func (*Target_BasePaths) isTarget_Target()   {}

func (m *Target) GetTarget() isTarget_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Target) GetAllEndpoint() *schema.Empty {
	if x, ok := m.GetTarget().(*Target_AllEndpoint); ok {
		return x.AllEndpoint
	}
	return nil
}

func (m *Target) GetApiGroups() *APIGroups {
	if x, ok := m.GetTarget().(*Target_ApiGroups); ok {
		return x.ApiGroups
	}
	return nil
}

func (m *Target) GetBasePaths() *BasePathsType {
	if x, ok := m.GetTarget().(*Target_BasePaths); ok {
		return x.BasePaths
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Target) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Target_AllEndpoint)(nil),
		(*Target_ApiGroups)(nil),
		(*Target_BasePaths)(nil),
	}
}

// jwks
//
// x-displayName: "JSON Web Key Set (JWKS)"
// The JSON Web Key Set (JWKS) is a set of keys used to verify JSON Web Token (JWT) issued by the Authorization Server. See RFC 7517 for more details.
type JWKS struct {
	// cleartext
	//
	// x-displayName: "JSON Web Key Set (JWKS)"
	// The JSON Web Key Set (JWKS) is a set of keys used to verify JSON Web Token (JWT) issued by the Authorization Server. See RFC 7517 for more details.
	Cleartext string `protobuf:"bytes,3,opt,name=cleartext,proto3" json:"cleartext,omitempty"`
}

func (m *JWKS) Reset()      { *m = JWKS{} }
func (*JWKS) ProtoMessage() {}
func (*JWKS) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{41}
}
func (m *JWKS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JWKS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JWKS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWKS.Merge(m, src)
}
func (m *JWKS) XXX_Size() int {
	return m.Size()
}
func (m *JWKS) XXX_DiscardUnknown() {
	xxx_messageInfo_JWKS.DiscardUnknown(m)
}

var xxx_messageInfo_JWKS proto.InternalMessageInfo

func (m *JWKS) GetCleartext() string {
	if m != nil {
		return m.Cleartext
	}
	return ""
}

// token location
//
// x-displayName: "Token Location"
// Location of JWT in Http request
type TokenLocation struct {
	// token location
	//
	// x-displayName: "Token Location"
	// x-required
	// Define where in the HTTP request the JWT token will be extracted
	//
	// Types that are valid to be assigned to TokenLocation:
	//	*TokenLocation_BearerToken
	//	*TokenLocation_Cookie
	//	*TokenLocation_Header
	//	*TokenLocation_QueryParam
	TokenLocation isTokenLocation_TokenLocation `protobuf_oneof:"token_location"`
}

func (m *TokenLocation) Reset()      { *m = TokenLocation{} }
func (*TokenLocation) ProtoMessage() {}
func (*TokenLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{42}
}
func (m *TokenLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TokenLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenLocation.Merge(m, src)
}
func (m *TokenLocation) XXX_Size() int {
	return m.Size()
}
func (m *TokenLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenLocation.DiscardUnknown(m)
}

var xxx_messageInfo_TokenLocation proto.InternalMessageInfo

type isTokenLocation_TokenLocation interface {
	isTokenLocation_TokenLocation()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TokenLocation_BearerToken struct {
	BearerToken *schema.Empty `protobuf:"bytes,2,opt,name=bearer_token,json=bearerToken,proto3,oneof" json:"bearer_token,omitempty"`
}
type TokenLocation_Cookie struct {
	Cookie string `protobuf:"bytes,3,opt,name=cookie,proto3,oneof" json:"cookie,omitempty"`
}
type TokenLocation_Header struct {
	Header string `protobuf:"bytes,4,opt,name=header,proto3,oneof" json:"header,omitempty"`
}
type TokenLocation_QueryParam struct {
	QueryParam string `protobuf:"bytes,5,opt,name=query_param,json=queryParam,proto3,oneof" json:"query_param,omitempty"`
}

func (*TokenLocation_BearerToken) isTokenLocation_TokenLocation() {}
func (*TokenLocation_Cookie) isTokenLocation_TokenLocation()      {}
func (*TokenLocation_Header) isTokenLocation_TokenLocation()      {}
func (*TokenLocation_QueryParam) isTokenLocation_TokenLocation()  {}

func (m *TokenLocation) GetTokenLocation() isTokenLocation_TokenLocation {
	if m != nil {
		return m.TokenLocation
	}
	return nil
}

func (m *TokenLocation) GetBearerToken() *schema.Empty {
	if x, ok := m.GetTokenLocation().(*TokenLocation_BearerToken); ok {
		return x.BearerToken
	}
	return nil
}

func (m *TokenLocation) GetCookie() string {
	if x, ok := m.GetTokenLocation().(*TokenLocation_Cookie); ok {
		return x.Cookie
	}
	return ""
}

func (m *TokenLocation) GetHeader() string {
	if x, ok := m.GetTokenLocation().(*TokenLocation_Header); ok {
		return x.Header
	}
	return ""
}

func (m *TokenLocation) GetQueryParam() string {
	if x, ok := m.GetTokenLocation().(*TokenLocation_QueryParam); ok {
		return x.QueryParam
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TokenLocation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TokenLocation_BearerToken)(nil),
		(*TokenLocation_Cookie)(nil),
		(*TokenLocation_Header)(nil),
		(*TokenLocation_QueryParam)(nil),
	}
}

// reserved claims
//
// x-displayName: "Reserved claims configuration"
// Configurable Validation of reserved Claims
type ReservedClaims struct {
	// issuer_validation
	//
	// x-displayName: "Issuer (iss)"
	// x-required
	// The value of the iss claim in the JWT token should exactly match the configured value
	//
	// Types that are valid to be assigned to IssuerValidation:
	//	*ReservedClaims_IssuerDisable
	//	*ReservedClaims_Issuer
	IssuerValidation isReservedClaims_IssuerValidation `protobuf_oneof:"issuer_validation"`
	// audience_validation
	//
	// x-displayName: "Audience (aud)"
	// x-required
	// The value of the aud claim in the JWT token should match one of the configured values
	//
	// Types that are valid to be assigned to AudienceValidation:
	//	*ReservedClaims_AudienceDisable
	//	*ReservedClaims_Audience
	AudienceValidation isReservedClaims_AudienceValidation `protobuf_oneof:"audience_validation"`
	// validate_period
	//
	// x-displayName: "Validate Period"
	// x-required
	// Validate that current time is before the Expiration Time (as specified in the exp claim). If exp claim is not present JWT validation fails. If Not Before (nbf) claim is present in the JWT token validate that current time is after the nbf value.
	//
	// Types that are valid to be assigned to ValidatePeriod:
	//	*ReservedClaims_ValidatePeriodDisable
	//	*ReservedClaims_ValidatePeriodEnable
	ValidatePeriod isReservedClaims_ValidatePeriod `protobuf_oneof:"validate_period"`
}

func (m *ReservedClaims) Reset()      { *m = ReservedClaims{} }
func (*ReservedClaims) ProtoMessage() {}
func (*ReservedClaims) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{43}
}
func (m *ReservedClaims) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReservedClaims) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReservedClaims) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReservedClaims.Merge(m, src)
}
func (m *ReservedClaims) XXX_Size() int {
	return m.Size()
}
func (m *ReservedClaims) XXX_DiscardUnknown() {
	xxx_messageInfo_ReservedClaims.DiscardUnknown(m)
}

var xxx_messageInfo_ReservedClaims proto.InternalMessageInfo

type isReservedClaims_IssuerValidation interface {
	isReservedClaims_IssuerValidation()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReservedClaims_AudienceValidation interface {
	isReservedClaims_AudienceValidation()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReservedClaims_ValidatePeriod interface {
	isReservedClaims_ValidatePeriod()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReservedClaims_IssuerDisable struct {
	IssuerDisable *schema.Empty `protobuf:"bytes,2,opt,name=issuer_disable,json=issuerDisable,proto3,oneof" json:"issuer_disable,omitempty"`
}
type ReservedClaims_Issuer struct {
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3,oneof" json:"issuer,omitempty"`
}
type ReservedClaims_AudienceDisable struct {
	AudienceDisable *schema.Empty `protobuf:"bytes,5,opt,name=audience_disable,json=audienceDisable,proto3,oneof" json:"audience_disable,omitempty"`
}
type ReservedClaims_Audience struct {
	Audience *Audiences `protobuf:"bytes,6,opt,name=audience,proto3,oneof" json:"audience,omitempty"`
}
type ReservedClaims_ValidatePeriodDisable struct {
	ValidatePeriodDisable *schema.Empty `protobuf:"bytes,8,opt,name=validate_period_disable,json=validatePeriodDisable,proto3,oneof" json:"validate_period_disable,omitempty"`
}
type ReservedClaims_ValidatePeriodEnable struct {
	ValidatePeriodEnable *schema.Empty `protobuf:"bytes,9,opt,name=validate_period_enable,json=validatePeriodEnable,proto3,oneof" json:"validate_period_enable,omitempty"`
}

func (*ReservedClaims_IssuerDisable) isReservedClaims_IssuerValidation()       {}
func (*ReservedClaims_Issuer) isReservedClaims_IssuerValidation()              {}
func (*ReservedClaims_AudienceDisable) isReservedClaims_AudienceValidation()   {}
func (*ReservedClaims_Audience) isReservedClaims_AudienceValidation()          {}
func (*ReservedClaims_ValidatePeriodDisable) isReservedClaims_ValidatePeriod() {}
func (*ReservedClaims_ValidatePeriodEnable) isReservedClaims_ValidatePeriod()  {}

func (m *ReservedClaims) GetIssuerValidation() isReservedClaims_IssuerValidation {
	if m != nil {
		return m.IssuerValidation
	}
	return nil
}
func (m *ReservedClaims) GetAudienceValidation() isReservedClaims_AudienceValidation {
	if m != nil {
		return m.AudienceValidation
	}
	return nil
}
func (m *ReservedClaims) GetValidatePeriod() isReservedClaims_ValidatePeriod {
	if m != nil {
		return m.ValidatePeriod
	}
	return nil
}

func (m *ReservedClaims) GetIssuerDisable() *schema.Empty {
	if x, ok := m.GetIssuerValidation().(*ReservedClaims_IssuerDisable); ok {
		return x.IssuerDisable
	}
	return nil
}

func (m *ReservedClaims) GetIssuer() string {
	if x, ok := m.GetIssuerValidation().(*ReservedClaims_Issuer); ok {
		return x.Issuer
	}
	return ""
}

func (m *ReservedClaims) GetAudienceDisable() *schema.Empty {
	if x, ok := m.GetAudienceValidation().(*ReservedClaims_AudienceDisable); ok {
		return x.AudienceDisable
	}
	return nil
}

func (m *ReservedClaims) GetAudience() *Audiences {
	if x, ok := m.GetAudienceValidation().(*ReservedClaims_Audience); ok {
		return x.Audience
	}
	return nil
}

func (m *ReservedClaims) GetValidatePeriodDisable() *schema.Empty {
	if x, ok := m.GetValidatePeriod().(*ReservedClaims_ValidatePeriodDisable); ok {
		return x.ValidatePeriodDisable
	}
	return nil
}

func (m *ReservedClaims) GetValidatePeriodEnable() *schema.Empty {
	if x, ok := m.GetValidatePeriod().(*ReservedClaims_ValidatePeriodEnable); ok {
		return x.ValidatePeriodEnable
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReservedClaims) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReservedClaims_IssuerDisable)(nil),
		(*ReservedClaims_Issuer)(nil),
		(*ReservedClaims_AudienceDisable)(nil),
		(*ReservedClaims_Audience)(nil),
		(*ReservedClaims_ValidatePeriodDisable)(nil),
		(*ReservedClaims_ValidatePeriodEnable)(nil),
	}
}

// audiences
//
// x-displayName: "Audiences"
type Audiences struct {
	// audiences
	//
	// x-displayName: "Values"
	// x-example: "value"
	// x-required
	Audiences []string `protobuf:"bytes,1,rep,name=audiences,proto3" json:"audiences,omitempty"`
}

func (m *Audiences) Reset()      { *m = Audiences{} }
func (*Audiences) ProtoMessage() {}
func (*Audiences) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{44}
}
func (m *Audiences) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Audiences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Audiences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Audiences.Merge(m, src)
}
func (m *Audiences) XXX_Size() int {
	return m.Size()
}
func (m *Audiences) XXX_DiscardUnknown() {
	xxx_messageInfo_Audiences.DiscardUnknown(m)
}

var xxx_messageInfo_Audiences proto.InternalMessageInfo

func (m *Audiences) GetAudiences() []string {
	if m != nil {
		return m.Audiences
	}
	return nil
}

// base_paths
//
// x-displayName: "Base Paths"
type BasePathsType struct {
	// base_paths
	//
	// x-displayName: "Prefix Values"
	// x-example: "/basepath"
	// x-required
	BasePaths []string `protobuf:"bytes,1,rep,name=base_paths,json=basePaths,proto3" json:"base_paths,omitempty"`
}

func (m *BasePathsType) Reset()      { *m = BasePathsType{} }
func (*BasePathsType) ProtoMessage() {}
func (*BasePathsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{45}
}
func (m *BasePathsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasePathsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BasePathsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasePathsType.Merge(m, src)
}
func (m *BasePathsType) XXX_Size() int {
	return m.Size()
}
func (m *BasePathsType) XXX_DiscardUnknown() {
	xxx_messageInfo_BasePathsType.DiscardUnknown(m)
}

var xxx_messageInfo_BasePathsType proto.InternalMessageInfo

func (m *BasePathsType) GetBasePaths() []string {
	if m != nil {
		return m.BasePaths
	}
	return nil
}

// API Discovery Setting
//
// x-displayName: "API Discovery Setting"
// Specifies the settings used for API discovery
type ApiDiscoverySetting struct {
	// Include or Exclude data in machine learning from traffic with redirect response in Business Logic Markup
	//
	// x-required
	// x-displayName: "Learn From Traffic With Redirect Response"
	// By default, the system only learns API Endpoints and patterns from traffic with response code 2xx
	// On enabling this, the AI engine will learn API Endpoints from traffic with response code 3xx in addition to 2xx
	//
	// Types that are valid to be assigned to LearnFromRedirectTraffic:
	//	*ApiDiscoverySetting_DisableLearnFromRedirectTraffic
	//	*ApiDiscoverySetting_EnableLearnFromRedirectTraffic
	LearnFromRedirectTraffic isApiDiscoverySetting_LearnFromRedirectTraffic `protobuf_oneof:"learn_from_redirect_traffic"`
	// sensitive data rules
	//
	// x-displayName: "Sensitive Data Detection"
	// Manage rules to detect sensitive data in requests and/or response sections.
	SensitiveDataDetectionRules *app_type.SensitiveDataDetectionRules `protobuf:"bytes,5,opt,name=sensitive_data_detection_rules,json=sensitiveDataDetectionRules,proto3" json:"sensitive_data_detection_rules,omitempty"` // Deprecated: Do not use.
	// Discovered API Settings
	//
	// x-displayName: "Discovered API Settings"
	// Configure Discovered API Settings.
	DiscoveredApiSettings *app_type.DiscoveredAPISettings `protobuf:"bytes,6,opt,name=discovered_api_settings,json=discoveredApiSettings,proto3" json:"discovered_api_settings,omitempty"`
}

func (m *ApiDiscoverySetting) Reset()      { *m = ApiDiscoverySetting{} }
func (*ApiDiscoverySetting) ProtoMessage() {}
func (*ApiDiscoverySetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_0072b3e117243bde, []int{46}
}
func (m *ApiDiscoverySetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiDiscoverySetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiDiscoverySetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiDiscoverySetting.Merge(m, src)
}
func (m *ApiDiscoverySetting) XXX_Size() int {
	return m.Size()
}
func (m *ApiDiscoverySetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiDiscoverySetting.DiscardUnknown(m)
}

var xxx_messageInfo_ApiDiscoverySetting proto.InternalMessageInfo

type isApiDiscoverySetting_LearnFromRedirectTraffic interface {
	isApiDiscoverySetting_LearnFromRedirectTraffic()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ApiDiscoverySetting_DisableLearnFromRedirectTraffic struct {
	DisableLearnFromRedirectTraffic *schema.Empty `protobuf:"bytes,2,opt,name=disable_learn_from_redirect_traffic,json=disableLearnFromRedirectTraffic,proto3,oneof" json:"disable_learn_from_redirect_traffic,omitempty"`
}
type ApiDiscoverySetting_EnableLearnFromRedirectTraffic struct {
	EnableLearnFromRedirectTraffic *schema.Empty `protobuf:"bytes,3,opt,name=enable_learn_from_redirect_traffic,json=enableLearnFromRedirectTraffic,proto3,oneof" json:"enable_learn_from_redirect_traffic,omitempty"`
}

func (*ApiDiscoverySetting_DisableLearnFromRedirectTraffic) isApiDiscoverySetting_LearnFromRedirectTraffic() {
}
func (*ApiDiscoverySetting_EnableLearnFromRedirectTraffic) isApiDiscoverySetting_LearnFromRedirectTraffic() {
}

func (m *ApiDiscoverySetting) GetLearnFromRedirectTraffic() isApiDiscoverySetting_LearnFromRedirectTraffic {
	if m != nil {
		return m.LearnFromRedirectTraffic
	}
	return nil
}

func (m *ApiDiscoverySetting) GetDisableLearnFromRedirectTraffic() *schema.Empty {
	if x, ok := m.GetLearnFromRedirectTraffic().(*ApiDiscoverySetting_DisableLearnFromRedirectTraffic); ok {
		return x.DisableLearnFromRedirectTraffic
	}
	return nil
}

func (m *ApiDiscoverySetting) GetEnableLearnFromRedirectTraffic() *schema.Empty {
	if x, ok := m.GetLearnFromRedirectTraffic().(*ApiDiscoverySetting_EnableLearnFromRedirectTraffic); ok {
		return x.EnableLearnFromRedirectTraffic
	}
	return nil
}

// Deprecated: Do not use.
func (m *ApiDiscoverySetting) GetSensitiveDataDetectionRules() *app_type.SensitiveDataDetectionRules {
	if m != nil {
		return m.SensitiveDataDetectionRules
	}
	return nil
}

func (m *ApiDiscoverySetting) GetDiscoveredApiSettings() *app_type.DiscoveredAPISettings {
	if m != nil {
		return m.DiscoveredApiSettings
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ApiDiscoverySetting) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ApiDiscoverySetting_DisableLearnFromRedirectTraffic)(nil),
		(*ApiDiscoverySetting_EnableLearnFromRedirectTraffic)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.views.common_waf.ClientSrcRuleAction", ClientSrcRuleAction_name, ClientSrcRuleAction_value)
	golang_proto.RegisterEnum("ves.io.schema.views.common_waf.ClientSrcRuleAction", ClientSrcRuleAction_name, ClientSrcRuleAction_value)
	proto.RegisterType((*ServicePolicyList)(nil), "ves.io.schema.views.common_waf.ServicePolicyList")
	golang_proto.RegisterType((*ServicePolicyList)(nil), "ves.io.schema.views.common_waf.ServicePolicyList")
	proto.RegisterType((*EnableChallenge)(nil), "ves.io.schema.views.common_waf.EnableChallenge")
	golang_proto.RegisterType((*EnableChallenge)(nil), "ves.io.schema.views.common_waf.EnableChallenge")
	proto.RegisterType((*PolicyBasedChallenge)(nil), "ves.io.schema.views.common_waf.PolicyBasedChallenge")
	golang_proto.RegisterType((*PolicyBasedChallenge)(nil), "ves.io.schema.views.common_waf.PolicyBasedChallenge")
	proto.RegisterType((*ChallengeRule)(nil), "ves.io.schema.views.common_waf.ChallengeRule")
	golang_proto.RegisterType((*ChallengeRule)(nil), "ves.io.schema.views.common_waf.ChallengeRule")
	proto.RegisterType((*ChallengeRuleList)(nil), "ves.io.schema.views.common_waf.ChallengeRuleList")
	golang_proto.RegisterType((*ChallengeRuleList)(nil), "ves.io.schema.views.common_waf.ChallengeRuleList")
	proto.RegisterType((*IPThreatCategoryListType)(nil), "ves.io.schema.views.common_waf.IPThreatCategoryListType")
	golang_proto.RegisterType((*IPThreatCategoryListType)(nil), "ves.io.schema.views.common_waf.IPThreatCategoryListType")
	proto.RegisterType((*HttpHeaderMatcherList)(nil), "ves.io.schema.views.common_waf.HttpHeaderMatcherList")
	golang_proto.RegisterType((*HttpHeaderMatcherList)(nil), "ves.io.schema.views.common_waf.HttpHeaderMatcherList")
	proto.RegisterType((*SimpleClientSrcRule)(nil), "ves.io.schema.views.common_waf.SimpleClientSrcRule")
	golang_proto.RegisterType((*SimpleClientSrcRule)(nil), "ves.io.schema.views.common_waf.SimpleClientSrcRule")
	proto.RegisterType((*RateLimitConfigType)(nil), "ves.io.schema.views.common_waf.RateLimitConfigType")
	golang_proto.RegisterType((*RateLimitConfigType)(nil), "ves.io.schema.views.common_waf.RateLimitConfigType")
	proto.RegisterType((*APIRateLimitLegacy)(nil), "ves.io.schema.views.common_waf.APIRateLimitLegacy")
	golang_proto.RegisterType((*APIRateLimitLegacy)(nil), "ves.io.schema.views.common_waf.APIRateLimitLegacy")
	proto.RegisterType((*APIRateLimit)(nil), "ves.io.schema.views.common_waf.APIRateLimit")
	golang_proto.RegisterType((*APIRateLimit)(nil), "ves.io.schema.views.common_waf.APIRateLimit")
	proto.RegisterType((*BypassRateLimitingRule)(nil), "ves.io.schema.views.common_waf.BypassRateLimitingRule")
	golang_proto.RegisterType((*BypassRateLimitingRule)(nil), "ves.io.schema.views.common_waf.BypassRateLimitingRule")
	proto.RegisterType((*APIGroups)(nil), "ves.io.schema.views.common_waf.APIGroups")
	golang_proto.RegisterType((*APIGroups)(nil), "ves.io.schema.views.common_waf.APIGroups")
	proto.RegisterType((*ApiEndpointDetails)(nil), "ves.io.schema.views.common_waf.ApiEndpointDetails")
	golang_proto.RegisterType((*ApiEndpointDetails)(nil), "ves.io.schema.views.common_waf.ApiEndpointDetails")
	proto.RegisterType((*BypassRateLimitingRules)(nil), "ves.io.schema.views.common_waf.BypassRateLimitingRules")
	golang_proto.RegisterType((*BypassRateLimitingRules)(nil), "ves.io.schema.views.common_waf.BypassRateLimitingRules")
	proto.RegisterType((*ApiEndpointRule)(nil), "ves.io.schema.views.common_waf.ApiEndpointRule")
	golang_proto.RegisterType((*ApiEndpointRule)(nil), "ves.io.schema.views.common_waf.ApiEndpointRule")
	proto.RegisterType((*InlineRateLimiter)(nil), "ves.io.schema.views.common_waf.InlineRateLimiter")
	golang_proto.RegisterType((*InlineRateLimiter)(nil), "ves.io.schema.views.common_waf.InlineRateLimiter")
	proto.RegisterType((*ServerUrlRule)(nil), "ves.io.schema.views.common_waf.ServerUrlRule")
	golang_proto.RegisterType((*ServerUrlRule)(nil), "ves.io.schema.views.common_waf.ServerUrlRule")
	proto.RegisterType((*CustomIpAllowedList)(nil), "ves.io.schema.views.common_waf.CustomIpAllowedList")
	golang_proto.RegisterType((*CustomIpAllowedList)(nil), "ves.io.schema.views.common_waf.CustomIpAllowedList")
	proto.RegisterType((*APISpecificationSettings)(nil), "ves.io.schema.views.common_waf.APISpecificationSettings")
	golang_proto.RegisterType((*APISpecificationSettings)(nil), "ves.io.schema.views.common_waf.APISpecificationSettings")
	proto.RegisterType((*OpenApiValidationAllSpecEndpointsSettings)(nil), "ves.io.schema.views.common_waf.OpenApiValidationAllSpecEndpointsSettings")
	golang_proto.RegisterType((*OpenApiValidationAllSpecEndpointsSettings)(nil), "ves.io.schema.views.common_waf.OpenApiValidationAllSpecEndpointsSettings")
	proto.RegisterType((*OpenApiValidationMode)(nil), "ves.io.schema.views.common_waf.OpenApiValidationMode")
	golang_proto.RegisterType((*OpenApiValidationMode)(nil), "ves.io.schema.views.common_waf.OpenApiValidationMode")
	proto.RegisterType((*OpenApiValidationModeActive)(nil), "ves.io.schema.views.common_waf.OpenApiValidationModeActive")
	golang_proto.RegisterType((*OpenApiValidationModeActive)(nil), "ves.io.schema.views.common_waf.OpenApiValidationModeActive")
	proto.RegisterType((*OpenApiValidationModeActiveResponse)(nil), "ves.io.schema.views.common_waf.OpenApiValidationModeActiveResponse")
	golang_proto.RegisterType((*OpenApiValidationModeActiveResponse)(nil), "ves.io.schema.views.common_waf.OpenApiValidationModeActiveResponse")
	proto.RegisterType((*OpenApiFallThroughMode)(nil), "ves.io.schema.views.common_waf.OpenApiFallThroughMode")
	golang_proto.RegisterType((*OpenApiFallThroughMode)(nil), "ves.io.schema.views.common_waf.OpenApiFallThroughMode")
	proto.RegisterType((*CustomFallThroughMode)(nil), "ves.io.schema.views.common_waf.CustomFallThroughMode")
	golang_proto.RegisterType((*CustomFallThroughMode)(nil), "ves.io.schema.views.common_waf.CustomFallThroughMode")
	proto.RegisterType((*FallThroughRule)(nil), "ves.io.schema.views.common_waf.FallThroughRule")
	golang_proto.RegisterType((*FallThroughRule)(nil), "ves.io.schema.views.common_waf.FallThroughRule")
	proto.RegisterType((*ValidateApiBySpecRule)(nil), "ves.io.schema.views.common_waf.ValidateApiBySpecRule")
	golang_proto.RegisterType((*ValidateApiBySpecRule)(nil), "ves.io.schema.views.common_waf.ValidateApiBySpecRule")
	proto.RegisterType((*OpenApiValidationRule)(nil), "ves.io.schema.views.common_waf.OpenApiValidationRule")
	golang_proto.RegisterType((*OpenApiValidationRule)(nil), "ves.io.schema.views.common_waf.OpenApiValidationRule")
	proto.RegisterType((*OpenApiValidationCommonSettings)(nil), "ves.io.schema.views.common_waf.OpenApiValidationCommonSettings")
	golang_proto.RegisterType((*OpenApiValidationCommonSettings)(nil), "ves.io.schema.views.common_waf.OpenApiValidationCommonSettings")
	proto.RegisterType((*ValidationPropertySetting)(nil), "ves.io.schema.views.common_waf.ValidationPropertySetting")
	golang_proto.RegisterType((*ValidationPropertySetting)(nil), "ves.io.schema.views.common_waf.ValidationPropertySetting")
	proto.RegisterType((*ValidationSettingForQueryParameters)(nil), "ves.io.schema.views.common_waf.ValidationSettingForQueryParameters")
	golang_proto.RegisterType((*ValidationSettingForQueryParameters)(nil), "ves.io.schema.views.common_waf.ValidationSettingForQueryParameters")
	proto.RegisterType((*ValidationSettingForHeaders)(nil), "ves.io.schema.views.common_waf.ValidationSettingForHeaders")
	golang_proto.RegisterType((*ValidationSettingForHeaders)(nil), "ves.io.schema.views.common_waf.ValidationSettingForHeaders")
	proto.RegisterType((*ApiDefinitionList)(nil), "ves.io.schema.views.common_waf.ApiDefinitionList")
	golang_proto.RegisterType((*ApiDefinitionList)(nil), "ves.io.schema.views.common_waf.ApiDefinitionList")
	proto.RegisterType((*APIProtectionRules)(nil), "ves.io.schema.views.common_waf.APIProtectionRules")
	golang_proto.RegisterType((*APIProtectionRules)(nil), "ves.io.schema.views.common_waf.APIProtectionRules")
	proto.RegisterType((*APIEndpointProtectionRule)(nil), "ves.io.schema.views.common_waf.APIEndpointProtectionRule")
	golang_proto.RegisterType((*APIEndpointProtectionRule)(nil), "ves.io.schema.views.common_waf.APIEndpointProtectionRule")
	proto.RegisterType((*APIGroupProtectionRule)(nil), "ves.io.schema.views.common_waf.APIGroupProtectionRule")
	golang_proto.RegisterType((*APIGroupProtectionRule)(nil), "ves.io.schema.views.common_waf.APIGroupProtectionRule")
	proto.RegisterType((*APIProtectionRuleAction)(nil), "ves.io.schema.views.common_waf.APIProtectionRuleAction")
	golang_proto.RegisterType((*APIProtectionRuleAction)(nil), "ves.io.schema.views.common_waf.APIProtectionRuleAction")
	proto.RegisterType((*JWTValidation)(nil), "ves.io.schema.views.common_waf.JWTValidation")
	golang_proto.RegisterType((*JWTValidation)(nil), "ves.io.schema.views.common_waf.JWTValidation")
	proto.RegisterType((*MandatoryClaims)(nil), "ves.io.schema.views.common_waf.MandatoryClaims")
	golang_proto.RegisterType((*MandatoryClaims)(nil), "ves.io.schema.views.common_waf.MandatoryClaims")
	proto.RegisterType((*Target)(nil), "ves.io.schema.views.common_waf.Target")
	golang_proto.RegisterType((*Target)(nil), "ves.io.schema.views.common_waf.Target")
	proto.RegisterType((*JWKS)(nil), "ves.io.schema.views.common_waf.JWKS")
	golang_proto.RegisterType((*JWKS)(nil), "ves.io.schema.views.common_waf.JWKS")
	proto.RegisterType((*TokenLocation)(nil), "ves.io.schema.views.common_waf.TokenLocation")
	golang_proto.RegisterType((*TokenLocation)(nil), "ves.io.schema.views.common_waf.TokenLocation")
	proto.RegisterType((*ReservedClaims)(nil), "ves.io.schema.views.common_waf.ReservedClaims")
	golang_proto.RegisterType((*ReservedClaims)(nil), "ves.io.schema.views.common_waf.ReservedClaims")
	proto.RegisterType((*Audiences)(nil), "ves.io.schema.views.common_waf.Audiences")
	golang_proto.RegisterType((*Audiences)(nil), "ves.io.schema.views.common_waf.Audiences")
	proto.RegisterType((*BasePathsType)(nil), "ves.io.schema.views.common_waf.BasePathsType")
	golang_proto.RegisterType((*BasePathsType)(nil), "ves.io.schema.views.common_waf.BasePathsType")
	proto.RegisterType((*ApiDiscoverySetting)(nil), "ves.io.schema.views.common_waf.ApiDiscoverySetting")
	golang_proto.RegisterType((*ApiDiscoverySetting)(nil), "ves.io.schema.views.common_waf.ApiDiscoverySetting")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/common_waf/common_waf_types.proto", fileDescriptor_0072b3e117243bde)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/common_waf/common_waf_types.proto", fileDescriptor_0072b3e117243bde)
}

var fileDescriptor_0072b3e117243bde = []byte{
	// 6954 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x6b, 0x6c, 0x1b, 0xd7,
	0x99, 0xa8, 0x0e, 0x5f, 0x22, 0x3f, 0x3d, 0x48, 0x8d, 0x5e, 0xb4, 0xe4, 0xc8, 0x0c, 0xed, 0x38,
	0xb2, 0x42, 0x53, 0x16, 0x6d, 0xc9, 0x8f, 0x34, 0x6d, 0x38, 0x92, 0x1c, 0x49, 0xf5, 0x43, 0x19,
	0xc9, 0x49, 0x1f, 0xb9, 0x9d, 0x3b, 0x22, 0x8f, 0xa4, 0x89, 0x49, 0x0e, 0x3b, 0x33, 0x92, 0xad,
	0xa0, 0x2e, 0x72, 0x73, 0xef, 0x45, 0x8b, 0xdc, 0x1b, 0xa4, 0x0d, 0x0a, 0xf4, 0x16, 0xb7, 0x68,
	0x2f, 0x0a, 0xdc, 0x6d, 0x61, 0x60, 0x81, 0x6e, 0x5b, 0xa0, 0x58, 0xd3, 0xc0, 0x1a, 0x41, 0x0b,
	0x14, 0xc6, 0x02, 0xeb, 0x9f, 0x41, 0xb0, 0xc0, 0x36, 0x0a, 0x16, 0x9b, 0x05, 0xf6, 0x47, 0xda,
	0x1f, 0x8b, 0x02, 0xc5, 0x02, 0x8b, 0xf3, 0x98, 0x17, 0x39, 0x7c, 0xd8, 0x72, 0x76, 0xb3, 0xd8,
	0xfe, 0xe3, 0xcc, 0x7c, 0x8f, 0xf3, 0xf8, 0xce, 0xf7, 0x3a, 0xdf, 0x39, 0x84, 0xd9, 0x5d, 0x6c,
	0x64, 0x55, 0x6d, 0xda, 0x28, 0x6c, 0xe3, 0xb2, 0x32, 0xbd, 0xab, 0xe2, 0x1b, 0xc6, 0x74, 0x41,
	0x2b, 0x97, 0xb5, 0x8a, 0x7c, 0x43, 0xd9, 0x74, 0xfd, 0x94, 0xcd, 0xbd, 0x2a, 0x36, 0xb2, 0x55,
	0x5d, 0x33, 0x35, 0x61, 0x82, 0xa1, 0x65, 0x19, 0x5a, 0x96, 0xa2, 0x65, 0x1d, 0xd8, 0xb1, 0x93,
	0x5b, 0xaa, 0xb9, 0xbd, 0xb3, 0x41, 0x5e, 0x4d, 0x6f, 0x69, 0x5b, 0xda, 0x34, 0x45, 0xdb, 0xd8,
	0xd9, 0xa4, 0x4f, 0xf4, 0x81, 0xfe, 0x62, 0xe4, 0xc6, 0x8e, 0x6c, 0x69, 0xda, 0x56, 0x09, 0x3b,
	0x50, 0xa6, 0x5a, 0xc6, 0x86, 0xa9, 0x94, 0xab, 0x1c, 0x20, 0xed, 0x6d, 0xa6, 0x52, 0xad, 0xd2,
	0xe6, 0x4c, 0xbb, 0xda, 0x34, 0x36, 0xee, 0x85, 0xd1, 0xaa, 0xa6, 0xaa, 0x55, 0xac, 0x8f, 0x29,
	0xef, 0xc7, 0xaa, 0x56, 0x52, 0x0b, 0x7b, 0x1e, 0xf4, 0xe3, 0x5e, 0x08, 0x5d, 0x31, 0xb1, 0x5c,
	0x52, 0xcb, 0xaa, 0x89, 0x75, 0x0f, 0xdc, 0xa4, 0x17, 0xce, 0xc0, 0xfa, 0xae, 0x5a, 0xc0, 0xb2,
	0x0f, 0xc5, 0x93, 0xad, 0x20, 0x65, 0x7d, 0xa7, 0xe4, 0x6d, 0xff, 0x21, 0x2f, 0xb8, 0xfb, 0xd3,
	0xe1, 0xba, 0x59, 0x52, 0x4a, 0x6a, 0x51, 0x31, 0xb1, 0x7f, 0xdf, 0xc8, 0x64, 0xc8, 0xde, 0xde,
	0x9f, 0xf6, 0x9b, 0x65, 0x77, 0x0f, 0xfd, 0x9a, 0x7f, 0xc4, 0x0f, 0xa9, 0xc5, 0x88, 0xed, 0xaa,
	0xba, 0xb9, 0xa3, 0x94, 0xe4, 0x6d, 0xcd, 0x30, 0xdd, 0x70, 0xe9, 0xb7, 0x11, 0x0c, 0xac, 0xb1,
	0xce, 0xaf, 0x52, 0x36, 0x97, 0x54, 0xc3, 0x14, 0x5e, 0x83, 0x28, 0x65, 0xaa, 0x62, 0x23, 0x89,
	0x52, 0xc1, 0xc9, 0x9e, 0x5c, 0x3a, 0xeb, 0x27, 0x55, 0x57, 0x37, 0x5e, 0xc5, 0x05, 0x53, 0xc2,
	0x9b, 0xeb, 0x7b, 0x55, 0x2c, 0x5e, 0xb8, 0x7d, 0xab, 0xdf, 0x3b, 0x90, 0x77, 0xfe, 0xf1, 0x5e,
	0x30, 0xfc, 0x0e, 0x0a, 0x24, 0x12, 0xd6, 0xaf, 0x28, 0xb2, 0x7e, 0x25, 0xd1, 0xfe, 0x6f, 0x7f,
	0x1d, 0x8c, 0xbc, 0x73, 0x17, 0x05, 0x12, 0x48, 0xb2, 0xf9, 0xa5, 0xff, 0x36, 0x02, 0xf1, 0xc5,
	0x8a, 0xb2, 0x51, 0xc2, 0xf3, 0xdb, 0x4a, 0xa9, 0x84, 0x2b, 0x5b, 0x58, 0x78, 0x09, 0xc6, 0x8b,
	0x78, 0x53, 0xd9, 0x29, 0x99, 0x72, 0x59, 0x35, 0xd5, 0x2d, 0x85, 0x0c, 0xa0, 0x6c, 0x60, 0xd3,
	0x54, 0x2b, 0x5b, 0x46, 0x32, 0x90, 0x42, 0x93, 0x3d, 0xb9, 0xa1, 0xba, 0x26, 0x2e, 0x96, 0xab,
	0xe6, 0xde, 0x52, 0x97, 0x74, 0x88, 0xa3, 0x5e, 0xb6, 0x31, 0xd7, 0x38, 0xa2, 0xf0, 0x75, 0x38,
	0x54, 0x56, 0x08, 0x5f, 0x6d, 0xc7, 0x90, 0x77, 0x0c, 0xac, 0xbb, 0xc8, 0x27, 0x83, 0x94, 0x6a,
	0x27, 0x1d, 0x3f, 0x7c, 0xfb, 0x56, 0x73, 0x3a, 0x4b, 0x5d, 0xd2, 0xa8, 0xfd, 0xf1, 0x9a, 0x81,
	0x75, 0xa7, 0x1d, 0xc2, 0x7f, 0x81, 0x23, 0x56, 0xbf, 0x5e, 0x35, 0xe4, 0x82, 0xd5, 0x5f, 0xb9,
	0xaa, 0xe8, 0x4a, 0x19, 0x9b, 0x58, 0x37, 0x92, 0xe1, 0x16, 0x7d, 0x43, 0xd2, 0x61, 0x8e, 0xbe,
	0x62, 0xd8, 0x83, 0xb5, 0x6a, 0xe3, 0x0a, 0x06, 0x8c, 0x36, 0x23, 0x1b, 0xa1, 0x64, 0x4f, 0x37,
	0x74, 0xce, 0x11, 0x93, 0xec, 0x8a, 0xb2, 0xab, 0x18, 0x05, 0x5d, 0xad, 0x9a, 0x36, 0x6d, 0xda,
	0xdb, 0xd0, 0x83, 0x1a, 0x42, 0x4b, 0x48, 0x1a, 0x7e, 0xd5, 0x97, 0xe9, 0x16, 0x1c, 0xb3, 0xfa,
	0x54, 0x50, 0xaa, 0x66, 0x61, 0x5b, 0xf1, 0x6f, 0x41, 0xb4, 0x45, 0xc7, 0x02, 0xd2, 0x93, 0x9c,
	0xc6, 0x3c, 0x23, 0xe1, 0xc7, 0xe8, 0x35, 0x38, 0xdc, 0x92, 0x41, 0x8c, 0x32, 0x38, 0xd5, 0xaa,
	0x8b, 0xf5, 0xd4, 0x5d, 0xfd, 0x0b, 0x48, 0x63, 0x85, 0xa6, 0xbc, 0xc5, 0xd3, 0x90, 0x6a, 0x3a,
	0xe1, 0x72, 0x61, 0x5b, 0x53, 0x0b, 0x58, 0x88, 0xdf, 0xab, 0xa1, 0x00, 0xa1, 0xb5, 0x5f, 0x43,
	0xc1, 0x5c, 0xe6, 0xb4, 0x38, 0x0b, 0x13, 0x4d, 0xa6, 0xc3, 0x42, 0x19, 0xbc, 0x57, 0x43, 0xe1,
	0xdf, 0xd4, 0x10, 0x7a, 0x50, 0x43, 0x21, 0x82, 0x36, 0x9b, 0x99, 0x13, 0x2f, 0xc0, 0xd1, 0x56,
	0xfd, 0x74, 0xe3, 0x46, 0x39, 0x6e, 0x37, 0xc1, 0x3d, 0x97, 0x39, 0xbf, 0x12, 0x8a, 0xa2, 0x44,
	0x60, 0x25, 0x14, 0x0d, 0x25, 0xc2, 0x2b, 0xa1, 0x68, 0x77, 0x22, 0x9a, 0xfe, 0x63, 0x0f, 0x0c,
	0xb1, 0x95, 0x2e, 0x2a, 0x06, 0x2e, 0x3a, 0x6b, 0xac, 0x03, 0x59, 0x6c, 0xbd, 0xce, 0x1e, 0x59,
	0x16, 0x83, 0x07, 0x95, 0xc5, 0xae, 0x83, 0xca, 0x62, 0xeb, 0x45, 0xf6, 0x18, 0x64, 0x31, 0x72,
	0x20, 0x59, 0x44, 0xad, 0x64, 0x51, 0x50, 0xe1, 0x29, 0xab, 0x93, 0x26, 0x2e, 0x57, 0x35, 0x5d,
	0xd1, 0xf7, 0xe4, 0x8d, 0x92, 0x56, 0xb8, 0xae, 0x56, 0xb6, 0x3a, 0x5f, 0x71, 0x69, 0x4e, 0x64,
	0xdd, 0xa2, 0x21, 0x72, 0x12, 0x2e, 0x56, 0x3b, 0x30, 0xea, 0xb0, 0xa0, 0x62, 0x6f, 0xf1, 0xe1,
	0xab, 0x6d, 0xb6, 0x55, 0x0f, 0x6d, 0xca, 0x44, 0x0b, 0x5a, 0xd4, 0x3d, 0x4b, 0x6e, 0xd8, 0xf4,
	0x03, 0x69, 0xa7, 0xfe, 0x7b, 0x5a, 0xf4, 0x2b, 0xf8, 0xc8, 0xea, 0xbf, 0xf7, 0x31, 0xa9, 0xff,
	0x60, 0x73, 0xf5, 0x7f, 0x1e, 0x7a, 0x2b, 0x9a, 0x23, 0x30, 0xc9, 0xfe, 0x16, 0x1d, 0x09, 0x49,
	0x3d, 0x15, 0xcd, 0x59, 0xad, 0x6b, 0x30, 0xa6, 0x94, 0x6e, 0x28, 0x7b, 0x86, 0x8c, 0xa9, 0xad,
	0xf4, 0xac, 0xd9, 0x64, 0xbc, 0x25, 0xa1, 0x51, 0x86, 0xc9, 0x8c, 0xac, 0x6b, 0xb5, 0x12, 0x15,
	0xe0, 0x25, 0xda, 0x20, 0xd3, 0xc9, 0x44, 0x4b, 0xca, 0x87, 0xdd, 0x94, 0xeb, 0x05, 0x5a, 0x58,
	0x87, 0x18, 0x71, 0xac, 0xe4, 0x92, 0x6a, 0x98, 0x49, 0x81, 0x12, 0x9a, 0xc9, 0xb6, 0x76, 0x56,
	0xb3, 0x36, 0xb6, 0xb4, 0x53, 0xc2, 0xc4, 0x37, 0x11, 0x43, 0x1f, 0xd7, 0x10, 0x92, 0xa2, 0xba,
	0xf5, 0x3c, 0xd3, 0x56, 0xab, 0x36, 0x28, 0xe2, 0xb9, 0xce, 0x34, 0x2a, 0xc1, 0x0b, 0xbb, 0x35,
	0xf1, 0xb3, 0x70, 0xac, 0xe5, 0x0a, 0xf3, 0xa8, 0x62, 0x97, 0x1a, 0x26, 0x2d, 0x16, 0x67, 0x3b,
	0x30, 0x19, 0x03, 0xf7, 0x6a, 0xa8, 0xe7, 0x41, 0x0d, 0xc1, 0x7e, 0x0d, 0x85, 0x67, 0x66, 0x32,
	0x33, 0x39, 0x71, 0x12, 0x12, 0x4e, 0x1b, 0x39, 0xd8, 0xd0, 0xbd, 0x1a, 0xea, 0x7f, 0x50, 0x43,
	0x7d, 0xfb, 0x35, 0x14, 0x9d, 0x39, 0x93, 0x99, 0x99, 0xcd, 0xcc, 0xcc, 0x35, 0xea, 0xfa, 0x95,
	0x50, 0x14, 0x12, 0x3d, 0x2b, 0xa1, 0x68, 0x5f, 0xa2, 0x7f, 0x25, 0x14, 0x1d, 0x48, 0x08, 0xe9,
	0x3b, 0x31, 0xe8, 0xf3, 0x0c, 0xa9, 0x70, 0x01, 0xa2, 0x65, 0x6c, 0x2a, 0x45, 0xc5, 0x54, 0x92,
	0x88, 0xce, 0xc9, 0x44, 0xdd, 0x9c, 0x5c, 0xc6, 0x86, 0xa1, 0x6c, 0xe1, 0xcb, 0xd8, 0x54, 0x88,
	0xb8, 0x4b, 0x36, 0xbc, 0x70, 0x05, 0x42, 0x46, 0x15, 0x17, 0xb8, 0x5d, 0x38, 0x53, 0x87, 0xe7,
	0xe3, 0x53, 0x7b, 0xa7, 0x73, 0xad, 0x8a, 0x0b, 0x6c, 0xe9, 0x4b, 0x94, 0xce, 0x85, 0xef, 0x47,
	0xef, 0xd7, 0xd0, 0x77, 0xa3, 0x30, 0x0a, 0xa1, 0x2b, 0x4a, 0x19, 0x8f, 0xc5, 0xa1, 0xcf, 0xe2,
	0x95, 0xad, 0x28, 0x65, 0x0c, 0x3f, 0x47, 0x90, 0xb0, 0x49, 0xa4, 0xf2, 0x05, 0x32, 0x76, 0x53,
	0x3f, 0x40, 0xf0, 0x7f, 0x11, 0x3c, 0x03, 0x23, 0x84, 0x46, 0xb6, 0xa8, 0x1a, 0x4c, 0x74, 0x2d,
	0xb0, 0xdc, 0xc0, 0x02, 0x7b, 0x95, 0xb2, 0x31, 0xe1, 0x1c, 0xa4, 0x28, 0xb0, 0xb5, 0x76, 0x6c,
	0xeb, 0xe2, 0x42, 0x1b, 0x72, 0x6c, 0x8e, 0x0b, 0x33, 0x07, 0x4f, 0xb8, 0x31, 0x1b, 0xc4, 0x28,
	0x37, 0xc0, 0xc5, 0xde, 0x85, 0x73, 0x0b, 0x02, 0xcb, 0xab, 0x53, 0x37, 0x60, 0x07, 0x04, 0xe8,
	0xa1, 0xd8, 0x4a, 0x65, 0x4f, 0x56, 0xab, 0xb9, 0x60, 0xbe, 0xb2, 0x07, 0xd3, 0x70, 0x84, 0xbe,
	0x53, 0xab, 0x72, 0x55, 0xc7, 0x9b, 0xea, 0x4d, 0xba, 0x3e, 0x9c, 0x47, 0x6c, 0xa4, 0x7b, 0x13,
	0xc1, 0xa9, 0xe8, 0x2a, 0x7f, 0x82, 0x2c, 0x8c, 0x5b, 0x08, 0x65, 0xc5, 0x2c, 0x6c, 0x63, 0x3d,
	0xcb, 0x11, 0x0d, 0x6c, 0x1a, 0xe9, 0x78, 0x22, 0x38, 0xd5, 0xc3, 0x80, 0x53, 0x6b, 0xd8, 0x34,
	0x60, 0x07, 0x82, 0xf9, 0xb5, 0x2b, 0x53, 0x15, 0x28, 0xc1, 0x20, 0xf4, 0xda, 0xfc, 0x15, 0xa3,
	0xc2, 0x1a, 0x30, 0x05, 0x49, 0xf6, 0xd2, 0xa8, 0x30, 0xd6, 0x8a, 0x21, 0x57, 0x76, 0xca, 0x1b,
	0x58, 0x37, 0xd2, 0xfd, 0x89, 0xe0, 0x14, 0xe4, 0xd7, 0x52, 0x57, 0xd8, 0x33, 0x9c, 0x80, 0x43,
	0x36, 0xac, 0xc5, 0x9c, 0xfc, 0xa6, 0x9c, 0x69, 0x33, 0xf3, 0x6b, 0x57, 0x18, 0xdb, 0xcf, 0x40,
	0x64, 0xbe, 0xa4, 0xe2, 0x8a, 0x39, 0x95, 0x83, 0x53, 0x30, 0x02, 0x71, 0x9b, 0x73, 0x81, 0xbe,
	0x66, 0xcc, 0x47, 0x60, 0x88, 0xbe, 0x67, 0xef, 0x64, 0x03, 0x97, 0x70, 0xc1, 0xd4, 0x74, 0xb8,
	0x02, 0x89, 0xf5, 0x4b, 0x6b, 0xa9, 0x8b, 0x6a, 0x65, 0x0b, 0xeb, 0x55, 0x5d, 0xad, 0x98, 0x46,
	0xfa, 0x02, 0x1c, 0xa6, 0xb0, 0x66, 0xc9, 0x90, 0x37, 0x9d, 0x0f, 0x56, 0x43, 0x04, 0x98, 0xd7,
	0x2a, 0x9b, 0xea, 0xd6, 0x8e, 0x8e, 0x8b, 0x63, 0xfd, 0x57, 0x34, 0x33, 0xe5, 0x3c, 0xc3, 0x29,
	0x88, 0x2c, 0x68, 0x65, 0x45, 0xad, 0x24, 0x90, 0x78, 0x8c, 0xcf, 0x7e, 0x91, 0xbe, 0xb0, 0xfb,
	0x81, 0x6f, 0x2a, 0x05, 0x53, 0xde, 0x55, 0x4a, 0x3b, 0xd8, 0x48, 0x04, 0x61, 0x0e, 0x7a, 0x19,
	0x46, 0x4a, 0xc2, 0x5b, 0xf8, 0x66, 0x73, 0x3c, 0x9d, 0x7c, 0x76, 0xf0, 0x8e, 0x41, 0x68, 0x55,
	0x31, 0xb7, 0x13, 0x48, 0x1c, 0xe3, 0x22, 0x59, 0x55, 0xcc, 0xed, 0x7a, 0xea, 0x19, 0xe8, 0x21,
	0x50, 0x29, 0x36, 0x51, 0x09, 0x24, 0x8e, 0xc3, 0xa8, 0x03, 0xcc, 0xe7, 0xd3, 0x86, 0x9e, 0x02,
	0xa0, 0xd0, 0x56, 0x4b, 0x3c, 0x94, 0xeb, 0xf8, 0x1f, 0x85, 0xee, 0x25, 0xac, 0x14, 0xb1, 0x6e,
	0x24, 0x90, 0x38, 0xc2, 0x27, 0x7c, 0x9b, 0xbf, 0x09, 0xa6, 0x43, 0x74, 0x21, 0x3d, 0x03, 0xdd,
	0x97, 0xb1, 0xb9, 0xad, 0x15, 0x09, 0xd0, 0x04, 0x17, 0x80, 0x6d, 0xd3, 0xac, 0xca, 0x65, 0xfa,
	0x3a, 0x5b, 0xe6, 0x5f, 0x83, 0xa7, 0x10, 0x64, 0xa0, 0xf7, 0xc5, 0x1d, 0xac, 0xef, 0xa5, 0xa8,
	0x27, 0x60, 0x50, 0xfe, 0x03, 0x14, 0xe3, 0xab, 0xe4, 0x35, 0x53, 0x80, 0x84, 0x76, 0xf0, 0x3a,
	0xde, 0x23, 0xa4, 0xe7, 0x35, 0xed, 0xba, 0x8a, 0x19, 0x69, 0x3e, 0xbd, 0xf4, 0x8d, 0x35, 0x64,
	0xee, 0x76, 0xc0, 0xe2, 0xcd, 0xaa, 0xaa, 0x53, 0x2d, 0x98, 0x40, 0x63, 0xe3, 0x5c, 0xbe, 0xb0,
	0xfd, 0x52, 0xb6, 0xd3, 0x0d, 0xe9, 0xff, 0x8e, 0x60, 0xa0, 0xc1, 0x1e, 0x08, 0xdb, 0x10, 0x26,
	0xaa, 0x85, 0x78, 0xa7, 0x24, 0x50, 0x3d, 0xf9, 0x50, 0x16, 0x45, 0x3c, 0x4a, 0xd4, 0x8f, 0x1d,
	0xa6, 0x3e, 0x6f, 0xfd, 0x3a, 0xe5, 0x09, 0x4e, 0x19, 0x03, 0xa6, 0x60, 0xd3, 0x6f, 0x22, 0x48,
	0x2e, 0xaf, 0xae, 0x6f, 0xeb, 0x58, 0x31, 0xe7, 0x15, 0x13, 0x6f, 0x69, 0x3a, 0x0d, 0x9a, 0x89,
	0x6e, 0x14, 0x2a, 0x30, 0xa4, 0x56, 0x65, 0x93, 0x7e, 0x94, 0x0b, 0xec, 0xab, 0x15, 0x44, 0xf7,
	0xe7, 0x8e, 0xd7, 0xb5, 0x8d, 0x69, 0xc6, 0x6c, 0x3d, 0x35, 0x71, 0xc8, 0x6e, 0x50, 0xca, 0x89,
	0x96, 0x25, 0x41, 0xad, 0x7a, 0xe0, 0x48, 0xb0, 0x2c, 0xc3, 0xf0, 0x92, 0x69, 0x56, 0xd9, 0x84,
	0x5f, 0x66, 0xa3, 0x4b, 0x47, 0xe5, 0x22, 0x74, 0xf3, 0x39, 0xe7, 0x01, 0x7c, 0xaa, 0x8e, 0xb7,
	0x07, 0x85, 0xba, 0x31, 0xe0, 0x44, 0xeb, 0x92, 0x85, 0x9c, 0xfe, 0x65, 0x0c, 0x06, 0xd7, 0xd4,
	0x72, 0xb5, 0x84, 0xd9, 0x62, 0x5e, 0xd3, 0x0b, 0xd4, 0x6c, 0x9c, 0x80, 0x98, 0xad, 0xa1, 0x92,
	0xa1, 0x14, 0x9a, 0x8c, 0x71, 0x7c, 0x3d, 0xf8, 0x07, 0xea, 0x91, 0x47, 0xd5, 0x2a, 0x93, 0x6d,
	0x21, 0x03, 0x31, 0x5b, 0xa3, 0x50, 0x4f, 0xbb, 0x4f, 0xec, 0x23, 0xa0, 0xd1, 0xa9, 0x48, 0xf2,
	0xfb, 0x7f, 0x95, 0x9c, 0xa4, 0xd0, 0x8a, 0xc1, 0x54, 0x8c, 0xf0, 0x05, 0xe8, 0xa1, 0x72, 0xc8,
	0x1a, 0xc0, 0x3d, 0x99, 0xd9, 0x76, 0x93, 0xea, 0x3b, 0x08, 0x4b, 0x5d, 0x12, 0x6c, 0xdb, 0x1f,
	0x84, 0x59, 0x88, 0x53, 0xb3, 0xab, 0x16, 0x71, 0xc5, 0x54, 0x37, 0x55, 0xac, 0x27, 0x07, 0x3c,
	0x0d, 0x4f, 0xbe, 0x1e, 0x58, 0xea, 0x92, 0xfa, 0x09, 0xd0, 0xb2, 0x0d, 0x23, 0x7c, 0x05, 0x86,
	0xfc, 0xa4, 0x91, 0x3b, 0xbc, 0x63, 0x59, 0x96, 0x1e, 0xcb, 0x5a, 0xe9, 0xb1, 0xec, 0xba, 0x05,
	0x21, 0xc6, 0x09, 0x5d, 0xf8, 0x19, 0xea, 0x5e, 0x09, 0x47, 0x5f, 0xff, 0x87, 0xff, 0x11, 0x97,
	0x06, 0x1d, 0x42, 0x36, 0x94, 0xc7, 0x00, 0xc3, 0x43, 0x1a, 0xe0, 0xcf, 0x41, 0xdc, 0xb8, 0x4e,
	0xe7, 0x41, 0x2b, 0x60, 0xc3, 0x20, 0x7e, 0x78, 0x6f, 0xcb, 0x50, 0xa6, 0x9f, 0x80, 0xaf, 0xda,
	0xd0, 0xc2, 0x45, 0x18, 0xbc, 0xa1, 0x6c, 0xca, 0xf5, 0x44, 0xfa, 0x5a, 0x12, 0x19, 0xb8, 0xa1,
	0x6c, 0xae, 0x35, 0xd0, 0xd9, 0xd0, 0xcc, 0x06, 0x3a, 0xfd, 0xad, 0xe9, 0x6c, 0x68, 0x66, 0x1d,
	0x9d, 0xef, 0x21, 0xe8, 0x56, 0xa8, 0x59, 0x37, 0x92, 0x09, 0xba, 0x66, 0x4e, 0xb7, 0x5d, 0xcf,
	0x6e, 0xb9, 0x64, 0x2e, 0x81, 0xb8, 0x72, 0xfb, 0x2e, 0x9a, 0x1c, 0x3b, 0x4e, 0x05, 0xa9, 0xa4,
	0x29, 0xc5, 0x0d, 0xa5, 0xa4, 0x54, 0x0a, 0x58, 0xcf, 0x52, 0xe5, 0x42, 0x3d, 0x37, 0x5c, 0xe4,
	0x76, 0xc8, 0xa0, 0xb3, 0xff, 0x06, 0x59, 0xe8, 0xf6, 0x02, 0x00, 0xd7, 0xb2, 0xb3, 0xda, 0x73,
	0xe1, 0xdb, 0x81, 0x77, 0x6b, 0xe8, 0x0b, 0xd0, 0x0f, 0xd1, 0xcb, 0xd6, 0xf8, 0x07, 0x66, 0x4e,
	0x41, 0x1c, 0xba, 0x19, 0x57, 0x43, 0x08, 0xcc, 0xcc, 0x4d, 0x22, 0x48, 0xc2, 0x00, 0x6b, 0x53,
	0xca, 0x25, 0x45, 0xe8, 0xf4, 0x24, 0x82, 0x71, 0x18, 0x72, 0xb4, 0x5d, 0xca, 0x11, 0x01, 0x74,
	0x7e, 0x12, 0xdd, 0xaf, 0xa1, 0x9f, 0xa2, 0xe6, 0x9e, 0x0f, 0xf6, 0x21, 0x3a, 0xb5, 0x0a, 0x57,
	0xa0, 0xc7, 0xb5, 0x10, 0xc9, 0x83, 0xbd, 0xd4, 0xe0, 0x08, 0x0c, 0xba, 0x56, 0x92, 0x65, 0x02,
	0xd2, 0xd1, 0x44, 0x88, 0x2b, 0xdf, 0x81, 0x86, 0x05, 0x01, 0x59, 0xff, 0x16, 0x8e, 0x8d, 0xf8,
	0x2f, 0x02, 0x71, 0x0a, 0x86, 0x2c, 0xcb, 0xad, 0xed, 0xe8, 0x05, 0xdb, 0x43, 0x15, 0xee, 0xd5,
	0x10, 0xf1, 0xec, 0x82, 0xfb, 0x35, 0x14, 0x39, 0x93, 0x99, 0xcd, 0xcc, 0xcc, 0x8a, 0xd7, 0xa0,
	0x8f, 0x0d, 0xa5, 0x05, 0xb4, 0x70, 0xaf, 0x86, 0x7a, 0x1f, 0xd4, 0x50, 0x0f, 0x75, 0x63, 0x73,
	0x99, 0x99, 0xd3, 0x99, 0x99, 0x33, 0xc4, 0x57, 0x7e, 0xf3, 0x21, 0x66, 0xcf, 0x76, 0x7b, 0x03,
	0x89, 0xe0, 0x4a, 0x28, 0x1a, 0x4c, 0x84, 0x56, 0x42, 0xd1, 0x9e, 0x44, 0x6f, 0xfa, 0x5f, 0x42,
	0x30, 0x28, 0x29, 0x26, 0xbe, 0xa4, 0x96, 0x55, 0x93, 0x79, 0x02, 0x54, 0x45, 0x5f, 0x86, 0x5e,
	0x77, 0x76, 0x95, 0x3b, 0xbd, 0x53, 0x75, 0x62, 0xe6, 0x06, 0xc9, 0xda, 0x64, 0x5e, 0x22, 0x46,
	0x56, 0xea, 0xd1, 0xad, 0x67, 0xac, 0x0b, 0xf3, 0x20, 0x54, 0x34, 0x59, 0xad, 0xca, 0x4a, 0xa9,
	0xa4, 0xdd, 0xc0, 0x45, 0x16, 0xdd, 0x04, 0x5b, 0x66, 0x4a, 0xe2, 0x15, 0x6d, 0xb9, 0x9a, 0x67,
	0xf0, 0x54, 0x5b, 0xaf, 0x41, 0xbc, 0x9e, 0x42, 0x88, 0x52, 0x38, 0xe1, 0x2b, 0xfd, 0x4c, 0xb1,
	0xae, 0x99, 0xba, 0x5a, 0xd9, 0xb2, 0x4c, 0xcf, 0x52, 0x97, 0xd4, 0xa7, 0x7a, 0x88, 0xbe, 0x0a,
	0x23, 0x85, 0x1d, 0xc3, 0xd4, 0xca, 0x0d, 0xad, 0x0b, 0x37, 0x49, 0xb8, 0xd4, 0xaf, 0x2c, 0x8a,
	0xed, 0x69, 0xe9, 0x52, 0x97, 0x34, 0x58, 0x68, 0x7c, 0x2d, 0x9c, 0x85, 0x9e, 0x8a, 0x26, 0xdb,
	0x39, 0xe3, 0xd6, 0x4a, 0x08, 0x2a, 0xda, 0x2a, 0x87, 0x14, 0x5e, 0x74, 0x65, 0x9a, 0xfb, 0x5a,
	0x34, 0xcb, 0x27, 0x21, 0x9e, 0x75, 0x12, 0xd6, 0x4b, 0xae, 0x04, 0xf2, 0x85, 0xc9, 0x77, 0x6b,
	0xe8, 0x18, 0xa4, 0x21, 0x49, 0xa6, 0x2d, 0x45, 0xe7, 0xc9, 0xf6, 0x04, 0x59, 0xdc, 0x1d, 0x99,
	0xc9, 0xe4, 0x32, 0x33, 0x33, 0xe2, 0x33, 0x30, 0x52, 0x37, 0x34, 0xee, 0x40, 0x2c, 0xf8, 0xa0,
	0x86, 0x02, 0x24, 0x10, 0x3b, 0x9d, 0x39, 0x93, 0x99, 0x15, 0xd3, 0xd0, 0xc7, 0x23, 0x19, 0x17,
	0x8c, 0x25, 0xbe, 0x61, 0x2a, 0xbe, 0xb6, 0x14, 0x12, 0xf9, 0xfb, 0x79, 0x18, 0x84, 0xfc, 0xea,
	0xb2, 0x2d, 0x3b, 0x97, 0xf0, 0x96, 0x52, 0xd8, 0x6b, 0x22, 0x2f, 0x81, 0x03, 0xcb, 0x4b, 0xf0,
	0x13, 0x94, 0x97, 0xd0, 0x63, 0x97, 0x97, 0xaf, 0xc1, 0xd8, 0xc6, 0x5e, 0x55, 0x31, 0x0c, 0xd9,
	0x99, 0x58, 0x12, 0x4b, 0x33, 0x4f, 0xae, 0x9b, 0xf2, 0x3b, 0xdb, 0x8e, 0x9f, 0x48, 0x29, 0xd8,
	0x03, 0xac, 0x56, 0xb6, 0x88, 0x09, 0x30, 0x58, 0x86, 0x60, 0xa9, 0x4b, 0x1a, 0xdd, 0xf0, 0x07,
	0x10, 0x2a, 0x90, 0x20, 0xc1, 0x29, 0xd6, 0xe5, 0x1d, 0xbd, 0xc4, 0x79, 0x86, 0x3b, 0xf3, 0x1e,
	0xd7, 0x28, 0xde, 0x35, 0xbd, 0x44, 0xbd, 0xc7, 0x61, 0xdb, 0x62, 0x0c, 0xb9, 0xfd, 0xc5, 0x7e,
	0xc3, 0x0d, 0x65, 0x08, 0x26, 0x08, 0x4a, 0x55, 0x95, 0x71, 0xa5, 0x58, 0xd5, 0x48, 0xc0, 0xc2,
	0x38, 0x46, 0x28, 0xc7, 0xe9, 0x76, 0x1c, 0xf3, 0x55, 0x75, 0x91, 0x23, 0xb6, 0xe2, 0x99, 0x50,
	0xbc, 0x70, 0x86, 0x78, 0xb2, 0xa9, 0x74, 0x0f, 0xba, 0x12, 0x22, 0xdd, 0xb9, 0x0c, 0x91, 0xef,
	0xb3, 0xdc, 0xbb, 0xfd, 0xf3, 0x30, 0xf4, 0xba, 0xa5, 0xf6, 0x4f, 0xf2, 0xda, 0x81, 0xbc, 0x86,
	0xff, 0x1d, 0xe4, 0x35, 0xf2, 0x6f, 0x2e, 0xaf, 0xdd, 0x9f, 0x26, 0x79, 0x9d, 0xb5, 0xe4, 0x35,
	0x0a, 0x23, 0xfe, 0xe3, 0x2a, 0xcc, 0x02, 0x28, 0x95, 0x3d, 0x99, 0x45, 0xeb, 0x6d, 0x24, 0x36,
	0xa6, 0x54, 0xf6, 0x58, 0xb4, 0x2f, 0x5c, 0x65, 0x99, 0x0a, 0x75, 0x53, 0x2d, 0x58, 0xb8, 0x41,
	0x1a, 0x26, 0x1c, 0xbb, 0x73, 0x17, 0xf5, 0x46, 0x03, 0xa7, 0xd0, 0x85, 0x48, 0x81, 0x9a, 0x13,
	0x3b, 0x6c, 0x40, 0xfc, 0xd7, 0x37, 0x03, 0x64, 0x1a, 0xfb, 0x2d, 0x74, 0x4e, 0x70, 0x1a, 0xba,
	0x49, 0x3b, 0x76, 0xf4, 0x52, 0x9b, 0x7d, 0x86, 0x88, 0x52, 0xd9, 0xbb, 0xa6, 0x97, 0x84, 0xd3,
	0x10, 0xdb, 0x50, 0x0c, 0x2c, 0x93, 0xe8, 0x9e, 0xee, 0x1c, 0xc4, 0x78, 0x44, 0xa8, 0x07, 0x3f,
	0x0a, 0x20, 0x87, 0x2b, 0xb1, 0x7a, 0x04, 0x70, 0x55, 0x31, 0xb7, 0x85, 0x97, 0xa1, 0xd7, 0x3d,
	0x67, 0x5c, 0x87, 0xe6, 0x1e, 0x62, 0xb6, 0x16, 0xb0, 0xa9, 0xa8, 0x25, 0x63, 0x09, 0x49, 0x3d,
	0xae, 0xb9, 0x11, 0x56, 0x00, 0x08, 0xe1, 0x2d, 0x5d, 0xdb, 0xa9, 0x5a, 0x7b, 0x08, 0x27, 0xda,
	0x92, 0x5d, 0x5d, 0x7e, 0x81, 0x22, 0x2c, 0x21, 0x29, 0xa6, 0x54, 0x55, 0xf6, 0x40, 0xf4, 0x80,
	0x8e, 0xbf, 0xba, 0x83, 0x0d, 0x3b, 0x69, 0xc3, 0xc3, 0xa8, 0x63, 0xfe, 0x91, 0xb1, 0xc4, 0x80,
	0x79, 0x4c, 0x27, 0x86, 0xee, 0xd5, 0x10, 0x92, 0xfa, 0x75, 0xcf, 0x5b, 0x61, 0x15, 0xfa, 0xb9,
	0x0f, 0x6a, 0xd1, 0x64, 0x61, 0xd4, 0x51, 0x7f, 0x9a, 0xcc, 0x8d, 0xb6, 0x49, 0xfe, 0xf4, 0x2e,
	0x42, 0x52, 0x5f, 0xc1, 0xfd, 0xf2, 0xc2, 0x37, 0x83, 0xef, 0xd6, 0xd0, 0x18, 0xc4, 0x84, 0xee,
	0x99, 0x4c, 0xea, 0x4c, 0x26, 0x75, 0x1e, 0xfa, 0xa0, 0x9b, 0xe1, 0x11, 0x27, 0xff, 0xd4, 0xfd,
	0x1a, 0xfa, 0xfb, 0x00, 0xe4, 0xac, 0x94, 0xd2, 0xd4, 0x24, 0x1c, 0x87, 0x01, 0xb7, 0xb4, 0xb1,
	0xdc, 0xd6, 0x40, 0x83, 0x24, 0xc1, 0x4d, 0xe8, 0x9f, 0xd7, 0x2a, 0x45, 0x95, 0xb9, 0xd7, 0x7b,
	0x55, 0x3c, 0xb5, 0x09, 0x45, 0x10, 0x6c, 0x09, 0xc9, 0x75, 0xe7, 0x2b, 0x7b, 0xa9, 0x6b, 0xd2,
	0x25, 0x38, 0xec, 0x9d, 0xcf, 0x1c, 0xd1, 0xca, 0x29, 0x6b, 0x52, 0x60, 0xc4, 0x25, 0x22, 0xb9,
	0x98, 0xa8, 0x18, 0x38, 0x45, 0xa4, 0x00, 0x92, 0xee, 0xc9, 0xca, 0x01, 0xc1, 0x61, 0x43, 0x0f,
	0x6f, 0x21, 0x88, 0x3b, 0xac, 0xa9, 0x23, 0x3b, 0xf5, 0x1a, 0xdc, 0x84, 0x49, 0x18, 0x70, 0xf3,
	0xa1, 0x29, 0x25, 0x61, 0xd0, 0xe7, 0x25, 0x24, 0x5d, 0x3c, 0x85, 0x1e, 0xd7, 0x03, 0xe4, 0x60,
	0xd8, 0xe1, 0x9a, 0x75, 0x7e, 0xa6, 0x0f, 0x35, 0xf9, 0x90, 0x00, 0x78, 0xca, 0xce, 0x40, 0x89,
	0x63, 0x30, 0xe4, 0xe1, 0xe6, 0xca, 0x3d, 0x89, 0x87, 0xa0, 0x8f, 0xa7, 0xdb, 0xb8, 0x2e, 0x88,
	0x5a, 0xba, 0x40, 0x7c, 0x1a, 0x12, 0x45, 0x6c, 0x98, 0x6a, 0x85, 0x07, 0x25, 0xc4, 0xb9, 0x1f,
	0x74, 0xa5, 0xec, 0xbb, 0x67, 0x33, 0x73, 0x99, 0xb3, 0x99, 0x73, 0xee, 0xc4, 0x78, 0x5a, 0x87,
	0x98, 0x2d, 0x9b, 0x82, 0xec, 0x11, 0xed, 0x40, 0x2a, 0x38, 0x19, 0x13, 0x9f, 0xbf, 0x73, 0x17,
	0xf5, 0x47, 0x03, 0x93, 0xc8, 0xbb, 0xce, 0xe1, 0x1d, 0xd4, 0x9d, 0x0e, 0xeb, 0xc1, 0xf7, 0x5c,
	0xd9, 0xa2, 0x94, 0x5f, 0x29, 0x43, 0x97, 0x4b, 0xde, 0xb9, 0x8e, 0xfa, 0x09, 0x02, 0xa1, 0x71,
	0x9d, 0x09, 0xe7, 0x20, 0x44, 0x57, 0x38, 0x72, 0x69, 0x17, 0xe4, 0xa3, 0x5d, 0xa2, 0xfc, 0xd7,
	0xb7, 0x82, 0x48, 0xa2, 0x18, 0xc2, 0x17, 0xa0, 0x9b, 0x8f, 0x11, 0x6d, 0x74, 0x7f, 0xee, 0x50,
	0x7d, 0x72, 0xc7, 0x34, 0xab, 0x6c, 0x74, 0xc5, 0xa3, 0x4e, 0xeb, 0xbd, 0x31, 0x6e, 0xc2, 0x1d,
	0xe3, 0x72, 0x72, 0xe9, 0x3f, 0x43, 0x30, 0xda, 0xc4, 0x4c, 0x09, 0x6f, 0xa2, 0x36, 0x4e, 0x1b,
	0x31, 0x0f, 0x73, 0x8f, 0x66, 0x04, 0x9b, 0x59, 0x89, 0x66, 0x26, 0x31, 0xfd, 0x7a, 0x0f, 0xc4,
	0xeb, 0x2c, 0xcd, 0xa3, 0x2a, 0xfc, 0x6f, 0xa0, 0x66, 0x1a, 0xff, 0x95, 0x3b, 0x77, 0xd1, 0x42,
	0x34, 0x90, 0x9e, 0x63, 0xa9, 0xeb, 0xaa, 0xea, 0xea, 0x78, 0xb6, 0xd1, 0x42, 0x66, 0xeb, 0xa8,
	0x3c, 0xb4, 0xa5, 0x38, 0xe6, 0x56, 0xfc, 0x2c, 0xa9, 0xd6, 0xfd, 0xde, 0x2d, 0xf4, 0x11, 0xdd,
	0xf0, 0xb2, 0x35, 0xfd, 0x9b, 0xc8, 0xbb, 0x3a, 0x19, 0x78, 0x98, 0x82, 0x7f, 0xe5, 0xce, 0x5d,
	0x74, 0x31, 0x8a, 0xd2, 0xe7, 0x3a, 0x6c, 0x71, 0x03, 0x9d, 0x36, 0xf2, 0x17, 0x77, 0x59, 0x06,
	0xda, 0x98, 0x2f, 0xc3, 0xa0, 0x87, 0x06, 0x13, 0x24, 0xbe, 0xdf, 0xfd, 0x8c, 0xbf, 0x06, 0x76,
	0xa4, 0xd3, 0x95, 0x7e, 0x94, 0x06, 0x5c, 0xa4, 0xd9, 0x57, 0x3f, 0x73, 0x01, 0x9f, 0x80, 0xb9,
	0xe8, 0x39, 0x98, 0xb9, 0x10, 0x0a, 0x30, 0xa8, 0x56, 0x4a, 0x6a, 0x05, 0xcb, 0x9e, 0xc4, 0x42,
	0xb4, 0xb3, 0x1d, 0xce, 0x65, 0x8a, 0x2a, 0x39, 0x29, 0x85, 0x25, 0x24, 0x0d, 0xa8, 0xf5, 0x2f,
	0x05, 0x19, 0x12, 0x3a, 0xde, 0xf4, 0x72, 0x88, 0x75, 0xbc, 0x45, 0x1d, 0xbf, 0x7d, 0xcb, 0x93,
	0xf5, 0x58, 0xa2, 0xe3, 0xb2, 0xe9, 0x62, 0x70, 0xe1, 0x3d, 0x62, 0xf4, 0x9e, 0x87, 0x09, 0xf0,
	0x58, 0x1a, 0xa1, 0x9f, 0x99, 0xc0, 0xd9, 0x4c, 0x6a, 0x2e, 0x93, 0x9a, 0x39, 0xe5, 0xb5, 0x84,
	0x33, 0x10, 0x07, 0x70, 0xc2, 0x6c, 0x01, 0x9d, 0xbd, 0x5f, 0x43, 0x6f, 0x07, 0x1f, 0xc9, 0x34,
	0x1e, 0xf5, 0x32, 0x1e, 0x1b, 0xf4, 0x91, 0x72, 0xc8, 0x38, 0x56, 0xe3, 0x49, 0x18, 0xf7, 0x91,
	0x3c, 0xcf, 0xc6, 0xc5, 0x02, 0xc4, 0xd6, 0xb7, 0x75, 0x6c, 0x6c, 0x6b, 0xa5, 0xe2, 0xd4, 0x59,
	0x98, 0x85, 0x23, 0xf0, 0x84, 0xcf, 0x4c, 0x65, 0x4d, 0x0b, 0x08, 0x84, 0xc6, 0x51, 0x06, 0x11,
	0xa2, 0x0b, 0x3c, 0x73, 0x30, 0x35, 0x07, 0x67, 0x60, 0x02, 0x92, 0x7e, 0x44, 0x76, 0x2a, 0xaa,
	0x29, 0x04, 0x52, 0xc8, 0x97, 0xc6, 0xd7, 0x20, 0x3a, 0xaf, 0xed, 0x54, 0xcc, 0x94, 0xb8, 0x37,
	0x55, 0x85, 0x0a, 0xcc, 0xc2, 0xd3, 0xbe, 0x34, 0x0c, 0x2c, 0xb3, 0xb4, 0xd7, 0x86, 0xcc, 0x53,
	0x73, 0x39, 0xb8, 0x24, 0xa6, 0xae, 0x19, 0x58, 0x4f, 0x2d, 0x17, 0xe1, 0x49, 0x38, 0xe2, 0x87,
	0x46, 0xd8, 0x71, 0x70, 0x3f, 0xee, 0x62, 0xaa, 0xde, 0x88, 0x36, 0xec, 0x88, 0x1f, 0x87, 0x41,
	0x4f, 0x86, 0xc5, 0x05, 0x17, 0xf5, 0xab, 0x27, 0xea, 0x4e, 0x44, 0xd3, 0x1f, 0x04, 0x60, 0xa0,
	0x41, 0x78, 0x85, 0x93, 0x10, 0xb3, 0x87, 0x93, 0x9a, 0xb6, 0x3e, 0x31, 0xfe, 0x7e, 0x0d, 0xa1,
	0x19, 0xaa, 0x45, 0xa6, 0x82, 0xc9, 0xd7, 0x9f, 0x97, 0x1c, 0x08, 0xe1, 0x2a, 0x84, 0xc8, 0xc0,
	0x51, 0x6d, 0xdd, 0xdf, 0x10, 0x5c, 0xf8, 0x67, 0xe1, 0x56, 0xb1, 0xae, 0x6a, 0xc5, 0x6b, 0x15,
	0xd5, 0x14, 0xe1, 0xfd, 0x1a, 0x8a, 0xac, 0x2d, 0xce, 0x5f, 0xbd, 0xb2, 0x20, 0x51, 0x42, 0xc2,
	0x02, 0x0c, 0xfa, 0x8c, 0x22, 0x0f, 0x09, 0x9b, 0x06, 0xac, 0x3b, 0x06, 0x26, 0x5a, 0xe9, 0xd2,
	0xc6, 0x35, 0x9a, 0xfc, 0x17, 0x5e, 0x81, 0x1e, 0xd7, 0xa0, 0x72, 0xbf, 0xbd, 0x93, 0x85, 0x36,
	0x72, 0xfb, 0xd6, 0xa0, 0x27, 0xa9, 0x5a, 0xb0, 0x8a, 0x00, 0x63, 0x3a, 0xde, 0x64, 0xd4, 0xc5,
	0x34, 0xc4, 0x0b, 0x44, 0x1a, 0xe4, 0x8d, 0x3d, 0xf7, 0x48, 0x5b, 0x09, 0xd3, 0x20, 0x0b, 0x6f,
	0x82, 0x89, 0x50, 0xfa, 0xbf, 0x01, 0xf4, 0x79, 0x42, 0xb8, 0x47, 0x35, 0x72, 0xff, 0xb3, 0xa9,
	0x91, 0xfb, 0xd2, 0x9d, 0xbb, 0x48, 0x8c, 0x06, 0xd2, 0x67, 0xfc, 0x4c, 0x46, 0x7d, 0xd8, 0x79,
	0x60, 0x13, 0xb7, 0xdb, 0x68, 0xe2, 0xbe, 0x48, 0xc4, 0x63, 0xfa, 0xce, 0x5d, 0xf4, 0x99, 0x28,
	0x4a, 0x67, 0x3b, 0x6a, 0x85, 0x4d, 0xa2, 0x81, 0xbf, 0x27, 0x40, 0x72, 0x19, 0xcd, 0xf3, 0x10,
	0xb3, 0x5d, 0x3d, 0x6a, 0x44, 0x62, 0xe2, 0x61, 0x7f, 0x4f, 0xcf, 0x42, 0xb5, 0xbc, 0x38, 0x3f,
	0x2b, 0xd4, 0xf3, 0x09, 0x58, 0xa1, 0xd8, 0x27, 0x63, 0x85, 0x22, 0x9f, 0xb8, 0x15, 0xea, 0x7e,
	0x9c, 0x56, 0xe8, 0x0e, 0xb1, 0x42, 0x79, 0x48, 0xc1, 0x90, 0x1d, 0xbb, 0x4c, 0xa7, 0xec, 0xf8,
	0x46, 0x88, 0x32, 0x6b, 0x34, 0x33, 0x03, 0xbd, 0x8e, 0x1d, 0x42, 0xe7, 0xeb, 0xcd, 0xd0, 0xec,
	0xfd, 0x1a, 0xfa, 0xf8, 0xd1, 0x22, 0xb4, 0x24, 0x38, 0xe1, 0xd4, 0x98, 0x27, 0xca, 0x49, 0xd2,
	0xd0, 0x81, 0xb5, 0x89, 0x7c, 0xb1, 0xe5, 0xe9, 0x4f, 0x76, 0xe6, 0x71, 0xd8, 0x99, 0xc8, 0x83,
	0x1a, 0x0a, 0x13, 0xb8, 0x39, 0x2b, 0x19, 0xb9, 0x12, 0x8a, 0x86, 0x13, 0x91, 0xf4, 0x8f, 0x11,
	0x0c, 0xfa, 0xa4, 0xea, 0x84, 0xb7, 0x11, 0x3c, 0xe1, 0x21, 0x66, 0xa5, 0x8e, 0xac, 0xba, 0x99,
	0xe4, 0x48, 0xc7, 0xa5, 0xeb, 0x93, 0xb7, 0x6f, 0xf5, 0x39, 0x05, 0x38, 0x06, 0x36, 0xff, 0x50,
	0x43, 0x5d, 0x76, 0x48, 0x12, 0x72, 0xaa, 0xd7, 0xa5, 0x31, 0xd7, 0xe6, 0x0f, 0x6f, 0x8d, 0x55,
	0x99, 0x93, 0x7e, 0x23, 0x04, 0xc9, 0xfc, 0xea, 0xf2, 0x1a, 0x17, 0x29, 0x6f, 0xb1, 0xe1, 0x2b,
	0xd0, 0x4f, 0x24, 0xa6, 0x88, 0x37, 0xd5, 0x0a, 0x0d, 0xc2, 0xf9, 0xce, 0x53, 0x27, 0xcd, 0x1b,
	0xb8, 0x7d, 0xab, 0x0e, 0x59, 0xea, 0x53, 0xaa, 0xea, 0x82, 0xfd, 0x28, 0xbc, 0x00, 0x83, 0xfc,
	0xe4, 0x01, 0x89, 0x85, 0x79, 0x11, 0x54, 0xb1, 0xcd, 0x3e, 0x94, 0xe0, 0xa0, 0xf0, 0x1a, 0xa9,
	0xa2, 0xf0, 0x1d, 0x04, 0x4f, 0xb8, 0x28, 0x29, 0xa5, 0x92, 0x4c, 0x96, 0x88, 0xed, 0x67, 0x19,
	0xdc, 0x94, 0x2e, 0xb7, 0xd3, 0x28, 0x57, 0xab, 0xb8, 0x92, 0xaf, 0xaa, 0x2f, 0xd9, 0xb4, 0xf2,
	0xa5, 0x12, 0x19, 0x19, 0xcb, 0xc1, 0x33, 0xac, 0x91, 0xb1, 0x8b, 0x78, 0xc7, 0x76, 0x9b, 0xc2,
	0x0a, 0x06, 0x8c, 0xb8, 0x5a, 0xc5, 0xf3, 0xbe, 0xae, 0xcd, 0xac, 0xb6, 0x15, 0x02, 0xbc, 0x1d,
	0x38, 0x5f, 0x55, 0xc5, 0x3d, 0x42, 0x9b, 0x86, 0x9d, 0x16, 0xeb, 0x21, 0x87, 0x38, 0x13, 0x35,
	0x5a, 0x5a, 0x78, 0x12, 0x92, 0x2e, 0xa6, 0xa6, 0xa2, 0x6f, 0xe1, 0x16, 0x3b, 0x44, 0x6c, 0xf7,
	0x27, 0xfd, 0x56, 0x18, 0x4e, 0x74, 0xdc, 0x77, 0xa1, 0x08, 0x71, 0x17, 0x8b, 0xb2, 0x56, 0xc4,
	0x5c, 0x2c, 0x66, 0x1f, 0x7a, 0x7c, 0x2f, 0x6b, 0x45, 0xcc, 0xab, 0x23, 0xfb, 0x77, 0x3d, 0x6f,
	0x85, 0x6d, 0x18, 0xd8, 0x24, 0x33, 0x69, 0x6e, 0xeb, 0xda, 0xce, 0xd6, 0x36, 0xe3, 0xc3, 0x7c,
	0x87, 0xb9, 0x0e, 0xf9, 0x5c, 0x54, 0x4a, 0xa5, 0x75, 0x86, 0xee, 0x62, 0x14, 0xdf, 0xf4, 0xbe,
	0x16, 0x0a, 0x30, 0xa1, 0xed, 0x62, 0xdd, 0x50, 0x5f, 0xc3, 0x45, 0x79, 0x43, 0x2b, 0xee, 0xb1,
	0x9a, 0x00, 0xa7, 0x3d, 0xad, 0x3c, 0x31, 0x31, 0x42, 0x42, 0xdd, 0x24, 0x99, 0x90, 0x71, 0x9b,
	0x8a, 0xa8, 0x15, 0xf7, 0xd6, 0xae, 0xab, 0x55, 0xa7, 0xa3, 0x3e, 0x4c, 0x36, 0x15, 0xb5, 0xe4,
	0x66, 0x12, 0x7e, 0x04, 0x26, 0x17, 0x15, 0xb5, 0xe4, 0x62, 0x82, 0x21, 0x6a, 0x57, 0x18, 0x33,
	0x23, 0xfa, 0xb9, 0x87, 0x9e, 0x92, 0x79, 0xfa, 0xcd, 0x16, 0xf4, 0x28, 0x71, 0x05, 0x58, 0xf9,
	0xaa, 0x45, 0xfa, 0xc2, 0xd3, 0xef, 0xd6, 0xd0, 0x51, 0x78, 0x92, 0x2a, 0x8e, 0xd4, 0x72, 0x65,
	0x17, 0x57, 0x4c, 0x4d, 0xdf, 0x4b, 0x39, 0x7d, 0x11, 0xc2, 0x33, 0x99, 0x5c, 0x66, 0x4e, 0x3c,
	0x05, 0xc3, 0x75, 0x9d, 0xe6, 0x92, 0x38, 0x4a, 0x5c, 0x47, 0x5e, 0xf8, 0x6f, 0xb9, 0x8f, 0x84,
	0x09, 0x77, 0x21, 0xbf, 0x17, 0x82, 0x61, 0x5f, 0x59, 0xa9, 0x5b, 0x53, 0x44, 0x26, 0x64, 0xa5,
	0x60, 0xaa, 0xbb, 0x96, 0x68, 0x3c, 0xfb, 0x48, 0x22, 0x98, 0xa7, 0x24, 0xbc, 0x6b, 0xca, 0x79,
	0x6f, 0x97, 0xac, 0xb8, 0x26, 0xab, 0xb5, 0x92, 0xa2, 0x25, 0x2b, 0xae, 0x79, 0x59, 0x85, 0x24,
	0x25, 0xa0, 0x63, 0xa3, 0xaa, 0x55, 0x0c, 0xdc, 0xe1, 0xb4, 0x2f, 0x21, 0x69, 0x84, 0xe0, 0x49,
	0x1c, 0xcd, 0x45, 0xf1, 0x7f, 0x23, 0x38, 0xe2, 0x43, 0xcd, 0x33, 0x22, 0x4c, 0x02, 0xe6, 0x0f,
	0x30, 0x22, 0x16, 0xe3, 0x25, 0x24, 0x1d, 0xd6, 0x1b, 0x1a, 0xe1, 0xc0, 0x89, 0x27, 0x1a, 0xa7,
	0xa5, 0x99, 0x39, 0xcd, 0xb5, 0x68, 0x78, 0x93, 0x22, 0x66, 0x4f, 0x36, 0xf4, 0x57, 0x41, 0x18,
	0x6f, 0xd1, 0x64, 0x61, 0x11, 0x04, 0x5c, 0xd9, 0xd4, 0xf4, 0x02, 0x2e, 0x13, 0x57, 0x55, 0xc7,
	0x55, 0x4d, 0x6f, 0xb7, 0xf9, 0x37, 0xe0, 0xc2, 0x90, 0x28, 0x82, 0x30, 0x0f, 0xee, 0x97, 0xac,
	0x72, 0xba, 0xcd, 0xac, 0x27, 0x5c, 0x08, 0xf4, 0x1c, 0x80, 0xb0, 0x4f, 0xcc, 0x3d, 0xf7, 0xc3,
	0x5d, 0x7d, 0xad, 0xea, 0x5a, 0x15, 0xeb, 0xa6, 0x8a, 0x89, 0x61, 0x0a, 0x4e, 0xf6, 0x37, 0x54,
	0x72, 0x34, 0xf4, 0x6f, 0xd5, 0xc6, 0x10, 0xf5, 0xf7, 0x6b, 0x68, 0x69, 0x55, 0xba, 0xba, 0xba,
	0x28, 0xad, 0x7f, 0x51, 0x5e, 0xcd, 0xaf, 0x2f, 0xc9, 0xab, 0x79, 0x29, 0x7f, 0x79, 0x71, 0x7d,
	0x51, 0x5a, 0xcb, 0xd8, 0x1f, 0x5e, 0xbc, 0xb6, 0x28, 0x7d, 0xd1, 0xf7, 0xcb, 0xd2, 0xfa, 0xfa,
	0xaa, 0xbc, 0xb4, 0x98, 0x5f, 0x58, 0x94, 0xd6, 0x88, 0x93, 0xd0, 0xf7, 0x0e, 0x82, 0x74, 0xf4,
	0x0d, 0x14, 0x4e, 0xa0, 0x34, 0xea, 0xf6, 0x3b, 0xf4, 0x26, 0x8d, 0xf3, 0x4e, 0xf8, 0x36, 0x28,
	0x0b, 0xe3, 0xae, 0xbe, 0xb9, 0x07, 0x8d, 0xa6, 0xb7, 0xeb, 0x05, 0x80, 0x27, 0x98, 0x7f, 0x10,
	0x84, 0xa3, 0x1d, 0x48, 0xde, 0xa7, 0x6a, 0x3a, 0x7f, 0x81, 0x60, 0xc2, 0x4f, 0x76, 0x0f, 0x34,
	0x9f, 0xe2, 0xfb, 0x35, 0x34, 0xdc, 0x74, 0x72, 0x12, 0xef, 0xa0, 0xbe, 0x74, 0xcf, 0x1b, 0x28,
	0x9a, 0x40, 0x63, 0xa1, 0x40, 0x28, 0xec, 0x3f, 0x3f, 0x3e, 0x8b, 0xf3, 0xc0, 0x13, 0xf4, 0x7f,
	0x02, 0x30, 0xe2, 0x6f, 0x47, 0x85, 0xcb, 0x30, 0xda, 0x60, 0x9a, 0x99, 0x27, 0xdb, 0x26, 0x67,
	0x31, 0x54, 0x67, 0x7a, 0xa9, 0x33, 0x2a, 0x54, 0x21, 0xd9, 0x48, 0x8e, 0xb9, 0x4b, 0x9d, 0x7a,
	0x4a, 0xcc, 0x01, 0xaa, 0x6b, 0xe7, 0x52, 0x97, 0x34, 0x5c, 0xc7, 0x90, 0xc1, 0x89, 0xcf, 0xf8,
	0x72, 0xf4, 0x66, 0x35, 0x90, 0x93, 0xd5, 0xa8, 0x2b, 0xd6, 0x4a, 0xff, 0x7f, 0x04, 0xc3, 0xbe,
	0x1c, 0x85, 0xff, 0x85, 0xe0, 0x90, 0x56, 0xc5, 0x15, 0x99, 0x78, 0xbe, 0xae, 0x41, 0x67, 0xdb,
	0x0d, 0xa8, 0xb3, 0xdd, 0x68, 0x17, 0x51, 0xea, 0xf0, 0x1d, 0xb1, 0x9d, 0xfa, 0xb8, 0x7f, 0xad,
	0xef, 0x88, 0x56, 0x2f, 0x5f, 0x6c, 0xc3, 0xe1, 0x2f, 0xbb, 0x21, 0x5e, 0x47, 0x4c, 0x78, 0xfe,
	0x61, 0xcf, 0x4e, 0x58, 0x87, 0x57, 0xec, 0x02, 0xce, 0xb3, 0xd0, 0xc3, 0x6b, 0xe2, 0x88, 0x6d,
	0x6a, 0xb3, 0x88, 0x80, 0x81, 0x12, 0x67, 0x48, 0x78, 0xd6, 0x2e, 0xa6, 0xe3, 0xab, 0xb8, 0xb5,
	0xb0, 0xf4, 0x32, 0x60, 0xbe, 0x80, 0xcf, 0x03, 0x7f, 0xe6, 0x6b, 0x37, 0xdc, 0x12, 0x97, 0xb7,
	0x90, 0x2d, 0xdb, 0xfa, 0x6d, 0x66, 0x78, 0x5c, 0xdb, 0xcc, 0xf3, 0xee, 0xc4, 0x50, 0xb4, 0xe5,
	0x96, 0x58, 0xf3, 0x4d, 0x70, 0x4f, 0x96, 0x27, 0x46, 0x89, 0x8c, 0x35, 0xdf, 0xb5, 0x5f, 0x72,
	0x65, 0x79, 0x2e, 0xfc, 0x73, 0xe0, 0x7e, 0x0d, 0xfd, 0x2e, 0xd0, 0xbc, 0x02, 0xf3, 0x25, 0xe8,
	0x21, 0x93, 0x6e, 0x9d, 0x3a, 0x79, 0x01, 0x16, 0x61, 0xd0, 0x33, 0x7b, 0xb9, 0x10, 0x99, 0x19,
	0x18, 0xad, 0x9b, 0x99, 0x5c, 0x84, 0x8d, 0x3a, 0x0c, 0x7b, 0x47, 0x3d, 0x17, 0xa6, 0x23, 0x0a,
	0x1b, 0x0d, 0x5b, 0xc2, 0xab, 0x70, 0xe5, 0x11, 0xb7, 0x7f, 0x47, 0x5c, 0xfd, 0xcf, 0x39, 0xd9,
	0x0a, 0x30, 0x1a, 0xf7, 0x7e, 0xff, 0x2b, 0x7c, 0xe5, 0xb1, 0xec, 0xfd, 0x26, 0x5d, 0x2c, 0x05,
	0x4f, 0x56, 0xa4, 0x83, 0x1d, 0x5e, 0x38, 0x85, 0xc4, 0x74, 0x7d, 0x59, 0xe8, 0x00, 0x57, 0x1a,
	0xae, 0xda, 0xbb, 0x67, 0x60, 0xb8, 0x60, 0xb5, 0x9f, 0x2a, 0x5a, 0x77, 0x9d, 0x29, 0x3c, 0xa8,
	0xa1, 0xc8, 0x7e, 0x0d, 0x45, 0x66, 0x4e, 0x65, 0x58, 0x8e, 0x9a, 0x69, 0x97, 0x48, 0xa2, 0x9b,
	0x67, 0xaa, 0x7f, 0x18, 0x86, 0x61, 0xdf, 0xf8, 0x4f, 0xf8, 0x76, 0x07, 0x3a, 0xe6, 0xe1, 0x23,
	0xb1, 0x03, 0x69, 0x9a, 0x3f, 0x05, 0x6b, 0x9f, 0xde, 0x60, 0xed, 0xc8, 0xbb, 0x35, 0x34, 0x0e,
	0x87, 0x20, 0xe1, 0x60, 0xa5, 0xa8, 0xa8, 0x1c, 0x34, 0x48, 0xfb, 0x41, 0x8f, 0x4f, 0x90, 0xf6,
	0x98, 0x6c, 0x8c, 0x4f, 0x8a, 0x21, 0xf0, 0xf8, 0x53, 0x0c, 0xde, 0x7d, 0x89, 0xee, 0x03, 0x54,
	0x5b, 0x45, 0x0f, 0x54, 0x6d, 0x55, 0x6f, 0xa0, 0xfa, 0x1e, 0x97, 0x81, 0x5a, 0x74, 0x1b, 0xa8,
	0x1e, 0xda, 0xc6, 0xe3, 0x74, 0x07, 0x01, 0x4d, 0x3e, 0x8c, 0x89, 0x7a, 0xd6, 0x6d, 0xa2, 0x7a,
	0xdb, 0x6f, 0x44, 0x78, 0x8c, 0xd4, 0x77, 0x22, 0xf7, 0x6b, 0xe8, 0xed, 0x48, 0x73, 0x23, 0xf5,
	0x28, 0x19, 0xef, 0xff, 0xe4, 0x06, 0x08, 0x1e, 0x20, 0x18, 0xe5, 0x7b, 0x36, 0x29, 0xd7, 0xba,
	0x26, 0x52, 0x3d, 0xf5, 0x0b, 0x04, 0x7f, 0x81, 0x20, 0x0f, 0xe7, 0xea, 0x56, 0x50, 0xd6, 0x3f,
	0x4d, 0x90, 0x6d, 0x88, 0x8b, 0x2c, 0x2b, 0x3f, 0x0f, 0xe7, 0x1f, 0x81, 0x44, 0x9d, 0x07, 0xf1,
	0x34, 0x1c, 0xa9, 0x27, 0x52, 0xa7, 0xb0, 0xb9, 0x0f, 0xf2, 0x4f, 0x08, 0x92, 0x56, 0xd4, 0xd7,
	0xd0, 0xa7, 0xbf, 0x41, 0xf0, 0xd7, 0x08, 0x56, 0x20, 0x5f, 0x4f, 0xab, 0x4d, 0x0e, 0xa4, 0x79,
	0xe7, 0x2e, 0x81, 0x78, 0x10, 0x5a, 0x75, 0xbd, 0x3c, 0x05, 0x93, 0xbe, 0xbd, 0xf4, 0x21, 0xc9,
	0xba, 0xeb, 0xbf, 0xef, 0xd0, 0xcd, 0xdd, 0x82, 0xe0, 0xd9, 0xcc, 0x39, 0xf1, 0x64, 0x33, 0x07,
	0x62, 0xe8, 0x5e, 0x0d, 0xf5, 0x3d, 0xa8, 0xa1, 0x18, 0x3d, 0x83, 0x72, 0x3a, 0x43, 0x0f, 0x5d,
	0xdb, 0xce, 0x43, 0x2c, 0x01, 0xec, 0x10, 0x75, 0xfa, 0xc3, 0x30, 0x1c, 0x69, 0x63, 0x31, 0x84,
	0x2f, 0xb7, 0x35, 0xa7, 0xad, 0x43, 0xed, 0x96, 0x66, 0xf4, 0xcb, 0x6d, 0xcd, 0x68, 0xf0, 0x21,
	0x88, 0xd7, 0x99, 0xcf, 0x2d, 0x38, 0xc6, 0xe3, 0xee, 0x3d, 0xf7, 0x84, 0x59, 0x76, 0x4f, 0xe6,
	0x57, 0x28, 0xb4, 0xbb, 0x27, 0xc3, 0xa2, 0xe1, 0x50, 0xb6, 0xc6, 0x66, 0x81, 0x11, 0x10, 0xde,
	0x44, 0x70, 0xb4, 0x25, 0x27, 0x1e, 0xaa, 0x32, 0x1b, 0x7e, 0xbe, 0xc3, 0xa4, 0xbe, 0x13, 0xa2,
	0xef, 0x71, 0x86, 0x4b, 0x48, 0x4a, 0x35, 0x6f, 0x0d, 0x8b, 0x37, 0x85, 0xcf, 0x40, 0x8c, 0x8e,
	0x21, 0xf1, 0xc3, 0x5a, 0x5d, 0x8e, 0x61, 0x17, 0x61, 0x2d, 0x05, 0xa4, 0x28, 0xc1, 0x20, 0x82,
	0x20, 0x7c, 0x16, 0x80, 0x62, 0x17, 0x4a, 0x9a, 0x81, 0xf9, 0xee, 0x6d, 0x5b, 0x74, 0xca, 0x70,
	0x9e, 0x60, 0x88, 0x93, 0xcd, 0x5c, 0x05, 0xbf, 0xeb, 0x0a, 0x5a, 0x8f, 0x59, 0x93, 0xeb, 0x0a,
	0x26, 0x40, 0x60, 0x2d, 0xf4, 0x1c, 0x7e, 0xa1, 0xf5, 0x1c, 0xdc, 0xf5, 0xa8, 0xbf, 0x1c, 0xe6,
	0x77, 0x08, 0x0e, 0x35, 0x1d, 0x53, 0xc1, 0x80, 0x38, 0x3d, 0xf0, 0xeb, 0x5c, 0x08, 0xc2, 0x3d,
	0x92, 0xf9, 0xce, 0xe7, 0x89, 0xd3, 0xba, 0xa8, 0xe9, 0x2f, 0x7a, 0x49, 0x59, 0x3e, 0x6a, 0x1d,
	0x07, 0x41, 0x76, 0x0e, 0xb2, 0x76, 0x98, 0x95, 0xf6, 0x63, 0xc6, 0x4f, 0x44, 0x8b, 0xd1, 0x8f,
	0x2c, 0xa7, 0xce, 0x3e, 0xe1, 0xfa, 0x4e, 0x00, 0x8e, 0x76, 0xd0, 0x3e, 0xe1, 0x25, 0x18, 0xa7,
	0x69, 0x19, 0x59, 0x29, 0x32, 0x3d, 0xa2, 0x94, 0x3a, 0xbf, 0x1b, 0xe7, 0x10, 0x45, 0xcd, 0xdb,
	0x98, 0x2e, 0xba, 0xaf, 0xc0, 0x44, 0x51, 0x35, 0x5a, 0x91, 0x0e, 0xb6, 0xb9, 0x76, 0x87, 0x63,
	0xfb, 0x51, 0x17, 0xa7, 0xe1, 0xb0, 0x2f, 0xd1, 0x66, 0xc2, 0xc6, 0x13, 0x56, 0x7f, 0x44, 0x30,
	0xde, 0x62, 0x1c, 0x85, 0x55, 0x48, 0x36, 0xb4, 0xd8, 0x3b, 0x4d, 0xcd, 0x9a, 0x3b, 0x52, 0xd7,
	0x56, 0x8b, 0xe2, 0x4b, 0x30, 0xee, 0x37, 0x0c, 0x16, 0xd1, 0x60, 0x9b, 0x2b, 0xbe, 0x1a, 0xc6,
	0xc0, 0x9a, 0xf1, 0x0c, 0x1c, 0x6a, 0x24, 0xd7, 0xa6, 0xf7, 0xdf, 0x40, 0x30, 0x90, 0x77, 0x6f,
	0xaf, 0xd2, 0xfd, 0x66, 0x1d, 0xe2, 0xde, 0x3d, 0xd8, 0x87, 0xb9, 0x1b, 0xed, 0xa9, 0x86, 0x1d,
	0x5c, 0x3b, 0x3c, 0x74, 0x27, 0x1f, 0xfb, 0x3d, 0xbb, 0xba, 0x46, 0xfa, 0xad, 0x00, 0x3d, 0x44,
	0xb6, 0xaa, 0x6b, 0x26, 0x2e, 0x38, 0x21, 0xe2, 0xd7, 0x7d, 0x0f, 0x68, 0xb0, 0xd6, 0x9c, 0xef,
	0xa0, 0x36, 0xdf, 0x2e, 0xe1, 0xf4, 0xd0, 0xed, 0xf8, 0xa8, 0x86, 0x70, 0x03, 0x12, 0x4e, 0xe1,
	0xb4, 0xec, 0x3e, 0x7e, 0x3f, 0xd7, 0xe9, 0xc9, 0x80, 0xce, 0x58, 0xf7, 0xdb, 0xb5, 0xd4, 0x2c,
	0x0b, 0xf7, 0xff, 0xa2, 0x70, 0xa8, 0x69, 0xfb, 0x1f, 0x43, 0xac, 0x74, 0x0d, 0x22, 0x2c, 0x19,
	0xc1, 0xa5, 0xf8, 0x6c, 0x07, 0xdd, 0xf1, 0x36, 0x82, 0x9f, 0x40, 0x66, 0x84, 0x39, 0xb1, 0xba,
	0xe0, 0x28, 0x76, 0x80, 0xe0, 0x08, 0x0e, 0x14, 0x1c, 0x7d, 0xcb, 0xb7, 0x74, 0x98, 0x95, 0x61,
	0x15, 0xef, 0xdc, 0x45, 0x97, 0xa2, 0x28, 0xfd, 0x59, 0xbb, 0x02, 0xab, 0x6a, 0x77, 0xcc, 0xaf,
	0x5a, 0xf8, 0x93, 0x2d, 0x20, 0x0e, 0x3f, 0x96, 0x02, 0xe2, 0x97, 0x1b, 0x4b, 0xb7, 0x22, 0x0f,
	0x51, 0xba, 0xe5, 0xa4, 0x00, 0xda, 0x97, 0x6f, 0x75, 0x1f, 0xf0, 0xcc, 0xc9, 0x0f, 0x03, 0xef,
	0xd6, 0xd0, 0x59, 0xe8, 0x73, 0x9d, 0x2e, 0x47, 0x33, 0xd0, 0x07, 0x11, 0x26, 0x50, 0x02, 0xca,
	0x4d, 0x22, 0x18, 0xad, 0x2b, 0xce, 0xed, 0x3e, 0x97, 0x39, 0x93, 0x99, 0xcd, 0xcc, 0xdd, 0xaf,
	0xa1, 0xbf, 0x6b, 0x71, 0x78, 0xfc, 0x39, 0x6f, 0xea, 0x32, 0x0b, 0x19, 0x27, 0x19, 0x99, 0xa5,
	0x7a, 0x33, 0x17, 0xa6, 0xdb, 0x07, 0x4e, 0x46, 0x33, 0x5b, 0xc4, 0x95, 0xbd, 0x5c, 0x68, 0x01,
	0x57, 0xf6, 0x3e, 0x25, 0xd5, 0xbc, 0xfe, 0x47, 0x41, 0x62, 0x0f, 0x6a, 0x28, 0x6a, 0x9f, 0xfb,
	0x8e, 0x26, 0x62, 0xe9, 0xf7, 0xbb, 0x61, 0xc4, 0x5f, 0xc9, 0xfc, 0x47, 0xd1, 0x0f, 0xd1, 0x03,
	0xe8, 0x87, 0xd8, 0x81, 0xf4, 0xc3, 0x45, 0x77, 0x8e, 0x83, 0xa9, 0x9a, 0x13, 0x56, 0x75, 0xa6,
	0x1f, 0xbd, 0x66, 0xd5, 0x96, 0x9a, 0x3b, 0xc9, 0xc1, 0xd4, 0x8b, 0xc4, 0xcf, 0x52, 0x9c, 0x69,
	0xad, 0x5e, 0xdc, 0x26, 0xc5, 0x79, 0xf1, 0x28, 0x35, 0x9a, 0xe1, 0x4f, 0xa0, 0x46, 0x33, 0x72,
	0xc0, 0x45, 0xfe, 0x5d, 0xb2, 0xc8, 0xaf, 0xb4, 0x59, 0xe4, 0x4d, 0x6b, 0x1f, 0xcf, 0x66, 0x66,
	0x4e, 0x91, 0xf5, 0xee, 0xa9, 0x7d, 0x24, 0x6b, 0xff, 0xde, 0xa7, 0x6b, 0xed, 0x3f, 0x42, 0x09,
	0xa5, 0xff, 0xe2, 0xa6, 0xa1, 0x8a, 0xbd, 0xb8, 0x49, 0x80, 0xf2, 0x16, 0x82, 0xd1, 0x26, 0x4b,
	0x4a, 0xc8, 0x40, 0x98, 0xed, 0x9b, 0xb6, 0x76, 0x40, 0x19, 0x90, 0x30, 0x05, 0x21, 0xd2, 0xcd,
	0x36, 0x8e, 0x25, 0x85, 0x11, 0x05, 0x6b, 0xd5, 0x3b, 0xa7, 0xcf, 0xb8, 0xa7, 0xf8, 0xab, 0x30,
	0xf4, 0xad, 0xbc, 0xbc, 0xee, 0x0a, 0xa5, 0x17, 0x20, 0xc2, 0x0a, 0xc5, 0xb8, 0x86, 0x39, 0xde,
	0x4e, 0x43, 0xac, 0x53, 0x68, 0x4b, 0x21, 0x30, 0x5c, 0xe1, 0x4b, 0xd0, 0x6f, 0x6a, 0xd7, 0x71,
	0x45, 0x2e, 0x69, 0x05, 0x77, 0xea, 0xa0, 0xed, 0x79, 0xdf, 0x75, 0x82, 0x75, 0x89, 0x23, 0x71,
	0xa2, 0x7d, 0xa6, 0xfb, 0xa5, 0x70, 0xda, 0xd6, 0x61, 0xac, 0xef, 0xc3, 0x75, 0x34, 0x7d, 0x35,
	0xd4, 0x0c, 0xc4, 0x95, 0x1d, 0x73, 0x5b, 0xb6, 0x4b, 0xb1, 0x55, 0x7e, 0xe2, 0xc8, 0x0e, 0x6e,
	0xbb, 0xa4, 0x3e, 0x02, 0x61, 0x55, 0xab, 0xab, 0xc2, 0x02, 0x84, 0x5e, 0xbd, 0x71, 0xdd, 0xe0,
	0x27, 0x58, 0xb3, 0xef, 0xdd, 0x42, 0xfb, 0xb7, 0x92, 0x12, 0xae, 0x96, 0x94, 0x02, 0x2e, 0xa6,
	0x36, 0xf6, 0x52, 0x4f, 0x93, 0xcf, 0x3c, 0x3a, 0x25, 0x24, 0xfe, 0x50, 0x43, 0xa1, 0x1f, 0xdd,
	0x45, 0xa1, 0x57, 0x0d, 0x5a, 0x30, 0x4f, 0xb1, 0x85, 0x17, 0xa1, 0xc7, 0x05, 0xc6, 0x75, 0xe3,
	0xb1, 0x76, 0xc3, 0xb0, 0xf2, 0xf2, 0xe7, 0xd7, 0x44, 0x22, 0x3e, 0x88, 0x9f, 0xad, 0x06, 0x42,
	0x84, 0xdd, 0x02, 0x21, 0x68, 0x44, 0x59, 0xd0, 0x8e, 0x14, 0xe5, 0x42, 0x49, 0x51, 0xcb, 0xd6,
	0x8d, 0x03, 0xd9, 0x76, 0x64, 0x25, 0x8e, 0x36, 0x4f, 0xb1, 0xc4, 0x91, 0xdb, 0x77, 0x91, 0x00,
	0x89, 0x42, 0xb1, 0xe2, 0xb9, 0xa7, 0x84, 0x28, 0x12, 0x37, 0x9c, 0xa0, 0x43, 0xa2, 0xac, 0x54,
	0x8a, 0x8a, 0xa9, 0xe9, 0x7b, 0x16, 0x47, 0xe6, 0x04, 0xb6, 0xdd, 0xbf, 0xbe, 0x6c, 0xe1, 0xb5,
	0x61, 0x19, 0x2f, 0xd7, 0x01, 0x3e, 0x05, 0x82, 0x6b, 0xdc, 0xac, 0xe0, 0xdf, 0x3a, 0xd0, 0x11,
	0x62, 0x07, 0x3a, 0x66, 0x79, 0x1d, 0xd0, 0x1a, 0xc4, 0xeb, 0x18, 0x09, 0xcf, 0x43, 0x0f, 0x6d,
	0xa9, 0x4c, 0xb4, 0x08, 0x8b, 0x2d, 0x62, 0xae, 0x3d, 0xad, 0x84, 0xff, 0xd9, 0x47, 0xa0, 0x38,
	0x44, 0x13, 0x19, 0xe9, 0x9f, 0x05, 0x20, 0xc2, 0x84, 0x5b, 0x78, 0x11, 0x7a, 0x95, 0x52, 0xc9,
	0x49, 0xca, 0xb7, 0x58, 0xa1, 0xcd, 0x7a, 0x48, 0x37, 0xa2, 0x4b, 0x25, 0xdb, 0xf5, 0xd9, 0xf0,
	0x9c, 0xdd, 0x0c, 0x3e, 0xe4, 0xb1, 0xe4, 0x16, 0x5c, 0x5c, 0xc7, 0x95, 0xaf, 0x00, 0xd8, 0xba,
	0xcb, 0xaa, 0x7b, 0x6d, 0xbb, 0x02, 0x45, 0x6e, 0x04, 0x0d, 0x7e, 0x6b, 0x41, 0xcc, 0xb2, 0x8a,
	0x86, 0x38, 0x6e, 0xe9, 0x06, 0xba, 0xc7, 0x69, 0x05, 0x9e, 0x61, 0x7a, 0xa2, 0x9d, 0x2b, 0x94,
	0x4b, 0x10, 0x22, 0xb2, 0x2b, 0x9c, 0x83, 0x58, 0xa1, 0x84, 0x15, 0xdd, 0xc4, 0x37, 0x4d, 0x7e,
	0x50, 0x63, 0xec, 0x37, 0xb7, 0xd0, 0xef, 0x6f, 0x45, 0x25, 0x5c, 0x54, 0x0a, 0x26, 0x2e, 0xba,
	0x57, 0x8b, 0xe4, 0x00, 0xbb, 0x4b, 0x2c, 0xd2, 0x3f, 0x0a, 0x40, 0x9f, 0x47, 0x23, 0x08, 0xe7,
	0xa1, 0x77, 0x03, 0x2b, 0x3a, 0xd6, 0x65, 0xaa, 0x14, 0xda, 0xe8, 0xca, 0x1e, 0x06, 0x4b, 0x49,
	0x08, 0x67, 0x20, 0xc2, 0xae, 0x71, 0xb3, 0xda, 0xc3, 0x57, 0x3e, 0x37, 0xc8, 0x93, 0xaf, 0x07,
	0xc8, 0xaf, 0x90, 0x1e, 0x48, 0x91, 0x05, 0xc7, 0x61, 0x09, 0x16, 0xbf, 0xca, 0x2b, 0xd4, 0x09,
	0x16, 0x83, 0x15, 0x9e, 0x83, 0x1e, 0xd7, 0xdd, 0x72, 0x5c, 0xd5, 0xb4, 0x46, 0x05, 0x27, 0x73,
	0x24, 0x3e, 0x55, 0xaf, 0x3e, 0x5b, 0x5d, 0x21, 0xf0, 0xdd, 0x10, 0xf4, 0x7b, 0x17, 0xb6, 0xf0,
	0x1c, 0xf4, 0xab, 0x86, 0xb1, 0x83, 0x75, 0xab, 0x92, 0xba, 0xcd, 0x38, 0xf5, 0x31, 0x68, 0x5e,
	0x44, 0x2d, 0x24, 0x21, 0xc2, 0x5e, 0xb0, 0x91, 0x22, 0xfd, 0x62, 0xcf, 0x42, 0x1e, 0x12, 0xca,
	0x4e, 0x51, 0xc5, 0x95, 0x02, 0xb6, 0x49, 0xb7, 0x4e, 0xaa, 0xc6, 0x2d, 0x78, 0x8b, 0xf8, 0x0b,
	0x10, 0xb5, 0x5e, 0x71, 0x7f, 0xa4, 0xbd, 0xd8, 0x73, 0x78, 0x83, 0x6e, 0x26, 0xf1, 0x07, 0xe1,
	0x0a, 0x8c, 0x5a, 0x97, 0xd5, 0xcb, 0x55, 0x7a, 0xa4, 0xca, 0x6e, 0x52, 0xeb, 0x9b, 0x82, 0x87,
	0x2d, 0x34, 0x76, 0x10, 0xcb, 0x6a, 0xd8, 0x25, 0xbb, 0x6e, 0xd1, 0xa6, 0xc7, 0x6e, 0xc9, 0x6c,
	0x19, 0xf0, 0x06, 0xec, 0x3a, 0x51, 0x4e, 0x8e, 0x5d, 0x1e, 0x2b, 0x1e, 0x83, 0x01, 0x3e, 0x05,
	0xae, 0x52, 0xd8, 0x38, 0x2f, 0xba, 0xa6, 0xf9, 0x9a, 0xd3, 0x99, 0x9c, 0x78, 0x1c, 0x06, 0xed,
	0xf1, 0xac, 0x83, 0x8b, 0x58, 0x6a, 0x6e, 0x8e, 0x5e, 0xde, 0x13, 0xaf, 0x6b, 0x1b, 0x85, 0x89,
	0x59, 0x67, 0xdb, 0xce, 0x7b, 0x8f, 0x89, 0x73, 0x6f, 0x63, 0x1d, 0x62, 0xf6, 0xd0, 0x09, 0x2f,
	0x40, 0xcc, 0x62, 0x65, 0xa9, 0xc3, 0x13, 0x9d, 0xde, 0x6f, 0x4f, 0xb4, 0x8a, 0x85, 0x9b, 0x2e,
	0x43, 0x9f, 0x47, 0x47, 0x08, 0xaf, 0x78, 0xd4, 0x0c, 0x23, 0xfd, 0x9c, 0xfb, 0xd0, 0x39, 0x77,
	0xb3, 0xfd, 0xce, 0xa0, 0x37, 0xd1, 0xc3, 0x8e, 0xd2, 0x49, 0xff, 0x3a, 0x04, 0x83, 0xf9, 0xaa,
	0xba, 0xa0, 0x1a, 0x05, 0x6d, 0x17, 0xeb, 0x76, 0x36, 0xb7, 0x08, 0x47, 0xad, 0xbb, 0x52, 0x89,
	0xee, 0xa8, 0xc8, 0x9b, 0xba, 0x56, 0x96, 0x75, 0x5c, 0x54, 0x75, 0x5c, 0x30, 0x65, 0x53, 0x57,
	0x36, 0x37, 0xd5, 0x42, 0x1b, 0xc1, 0x3f, 0xc2, 0x49, 0x5c, 0x22, 0x14, 0x2e, 0xea, 0x5a, 0x59,
	0xe2, 0xf8, 0xeb, 0x0c, 0x5d, 0xd8, 0x80, 0x34, 0xbf, 0x2a, 0xb5, 0x15, 0x93, 0xd6, 0x4e, 0xd8,
	0x04, 0xa3, 0xd0, 0x94, 0xc7, 0x2f, 0x11, 0x4c, 0x18, 0xb8, 0x62, 0xa8, 0xa6, 0xba, 0x8b, 0x65,
	0xe2, 0xfa, 0xca, 0x45, 0xec, 0x09, 0x2d, 0x9a, 0xdc, 0x78, 0x65, 0xfd, 0x55, 0x45, 0x76, 0xcd,
	0xc2, 0x5e, 0x50, 0x4c, 0x65, 0x01, 0xbb, 0x73, 0x6d, 0xe2, 0x73, 0xd4, 0x71, 0x39, 0xe9, 0x76,
	0x5c, 0x6c, 0xf0, 0x14, 0x81, 0x4f, 0xb1, 0x7b, 0xa8, 0x52, 0xc7, 0xd9, 0x13, 0x99, 0x52, 0x22,
	0xa2, 0xac, 0x70, 0x41, 0x1a, 0x37, 0x9a, 0xd3, 0x16, 0xae, 0xc3, 0x68, 0x91, 0xcf, 0x0b, 0x2e,
	0xd2, 0x1a, 0x94, 0xba, 0x2a, 0x86, 0x93, 0xcd, 0x5a, 0xbc, 0x60, 0xa3, 0xe5, 0x57, 0x97, 0x9d,
	0x93, 0x14, 0xd4, 0x67, 0x1b, 0x76, 0x68, 0xe6, 0xab, 0xaa, 0xf5, 0xf1, 0x42, 0xf4, 0xf7, 0x9f,
	0x0d, 0xcf, 0x64, 0xc8, 0x6a, 0x78, 0x1a, 0xc6, 0x5b, 0xcc, 0x86, 0xc7, 0xc9, 0x65, 0x8b, 0x01,
	0x25, 0x02, 0x53, 0x3f, 0x0e, 0xc2, 0xa0, 0xcf, 0x5d, 0x7b, 0xc2, 0x28, 0x0c, 0xae, 0x7d, 0x7e,
	0x79, 0x55, 0x5e, 0x95, 0xae, 0xce, 0x2f, 0xae, 0xad, 0x2d, 0x5f, 0x79, 0x41, 0x7e, 0x39, 0x7f,
	0x31, 0xd1, 0x25, 0x4c, 0x37, 0x7e, 0x10, 0xaf, 0xae, 0x27, 0xd0, 0xd8, 0xc8, 0xfd, 0x9a, 0x9f,
	0xed, 0xf5, 0x43, 0xb8, 0x7c, 0xed, 0x72, 0x22, 0xd0, 0x14, 0xe1, 0x49, 0x78, 0xa2, 0x1e, 0x61,
	0x79, 0x55, 0x96, 0x16, 0x57, 0xaf, 0xad, 0xe7, 0xd7, 0x97, 0xaf, 0x5e, 0x49, 0x04, 0x85, 0x0b,
	0x30, 0x51, 0x0f, 0x92, 0x5f, 0x5d, 0x26, 0x8f, 0xeb, 0x8b, 0xf3, 0x14, 0x26, 0xd4, 0x94, 0xbc,
	0x0f, 0xee, 0xd5, 0xfc, 0x9a, 0xfc, 0x52, 0xfe, 0xd2, 0xf2, 0x02, 0xa3, 0x1f, 0x6e, 0x8a, 0xfb,
	0x2c, 0x1c, 0xa9, 0xc7, 0x5d, 0x58, 0xb8, 0xba, 0xe6, 0x66, 0x1c, 0x69, 0x8a, 0x7c, 0x16, 0xc6,
	0xeb, 0x91, 0xd7, 0x97, 0xa4, 0xc5, 0xfc, 0xba, 0x7c, 0x79, 0x71, 0x6d, 0x29, 0xd1, 0xdd, 0x0c,
	0x71, 0x2c, 0x44, 0x84, 0x4e, 0x7c, 0x07, 0x3d, 0xf8, 0x60, 0xa2, 0xeb, 0xbd, 0x0f, 0x26, 0xba,
	0x3e, 0xfe, 0x60, 0x02, 0xbd, 0xbe, 0x3f, 0x81, 0x7e, 0xb2, 0x3f, 0x81, 0x7e, 0xb3, 0x3f, 0x81,
	0x1e, 0xec, 0x4f, 0xa0, 0xf7, 0xf6, 0x27, 0xd0, 0x6f, 0xf7, 0x27, 0xd0, 0x47, 0xfb, 0x13, 0x5d,
	0x1f, 0xef, 0x4f, 0xa0, 0x6f, 0x7d, 0x38, 0xd1, 0x75, 0xef, 0xc3, 0x09, 0xf4, 0xe0, 0xc3, 0x89,
	0xae, 0xf7, 0x3e, 0x9c, 0xe8, 0xfa, 0xd2, 0xfa, 0x96, 0x56, 0xbd, 0xbe, 0x95, 0xdd, 0xd5, 0x4a,
	0x26, 0xd6, 0x75, 0x25, 0xbb, 0x63, 0x4c, 0xd3, 0x1f, 0x9b, 0x9a, 0x5e, 0x3e, 0x59, 0xd5, 0xb5,
	0x5d, 0xb5, 0x88, 0xf5, 0x93, 0xd6, 0xe7, 0xe9, 0xea, 0xc6, 0x96, 0x36, 0x8d, 0x6f, 0x9a, 0xd6,
	0x3f, 0xa9, 0xf8, 0xff, 0x59, 0xcd, 0x46, 0x84, 0x5e, 0x90, 0x79, 0xfa, 0x5f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xcb, 0xb7, 0x0c, 0x98, 0xd5, 0x66, 0x00, 0x00,
}

func (x ClientSrcRuleAction) String() string {
	s, ok := ClientSrcRuleAction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ServicePolicyList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicePolicyList)
	if !ok {
		that2, ok := that.(ServicePolicyList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Policies) != len(that1.Policies) {
		return false
	}
	for i := range this.Policies {
		if !this.Policies[i].Equal(that1.Policies[i]) {
			return false
		}
	}
	return true
}
func (this *EnableChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableChallenge)
	if !ok {
		that2, ok := that.(EnableChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.MaliciousUserMitigationChoice == nil {
		if this.MaliciousUserMitigationChoice != nil {
			return false
		}
	} else if this.MaliciousUserMitigationChoice == nil {
		return false
	} else if !this.MaliciousUserMitigationChoice.Equal(that1.MaliciousUserMitigationChoice) {
		return false
	}
	if that1.JsChallengeParametersChoice == nil {
		if this.JsChallengeParametersChoice != nil {
			return false
		}
	} else if this.JsChallengeParametersChoice == nil {
		return false
	} else if !this.JsChallengeParametersChoice.Equal(that1.JsChallengeParametersChoice) {
		return false
	}
	if that1.CaptchaChallengeParametersChoice == nil {
		if this.CaptchaChallengeParametersChoice != nil {
			return false
		}
	} else if this.CaptchaChallengeParametersChoice == nil {
		return false
	} else if !this.CaptchaChallengeParametersChoice.Equal(that1.CaptchaChallengeParametersChoice) {
		return false
	}
	return true
}
func (this *EnableChallenge_DefaultMitigationSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableChallenge_DefaultMitigationSettings)
	if !ok {
		that2, ok := that.(EnableChallenge_DefaultMitigationSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultMitigationSettings.Equal(that1.DefaultMitigationSettings) {
		return false
	}
	return true
}
func (this *EnableChallenge_MaliciousUserMitigation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableChallenge_MaliciousUserMitigation)
	if !ok {
		that2, ok := that.(EnableChallenge_MaliciousUserMitigation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	return true
}
func (this *EnableChallenge_DefaultJsChallengeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableChallenge_DefaultJsChallengeParameters)
	if !ok {
		that2, ok := that.(EnableChallenge_DefaultJsChallengeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultJsChallengeParameters.Equal(that1.DefaultJsChallengeParameters) {
		return false
	}
	return true
}
func (this *EnableChallenge_JsChallengeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableChallenge_JsChallengeParameters)
	if !ok {
		that2, ok := that.(EnableChallenge_JsChallengeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallengeParameters.Equal(that1.JsChallengeParameters) {
		return false
	}
	return true
}
func (this *EnableChallenge_DefaultCaptchaChallengeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableChallenge_DefaultCaptchaChallengeParameters)
	if !ok {
		that2, ok := that.(EnableChallenge_DefaultCaptchaChallengeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultCaptchaChallengeParameters.Equal(that1.DefaultCaptchaChallengeParameters) {
		return false
	}
	return true
}
func (this *EnableChallenge_CaptchaChallengeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableChallenge_CaptchaChallengeParameters)
	if !ok {
		that2, ok := that.(EnableChallenge_CaptchaChallengeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallengeParameters.Equal(that1.CaptchaChallengeParameters) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.JsChallengeParametersChoice == nil {
		if this.JsChallengeParametersChoice != nil {
			return false
		}
	} else if this.JsChallengeParametersChoice == nil {
		return false
	} else if !this.JsChallengeParametersChoice.Equal(that1.JsChallengeParametersChoice) {
		return false
	}
	if that1.CaptchaChallengeParametersChoice == nil {
		if this.CaptchaChallengeParametersChoice != nil {
			return false
		}
	} else if this.CaptchaChallengeParametersChoice == nil {
		return false
	} else if !this.CaptchaChallengeParametersChoice.Equal(that1.CaptchaChallengeParametersChoice) {
		return false
	}
	if that1.TemporaryBlockingParametersChoice == nil {
		if this.TemporaryBlockingParametersChoice != nil {
			return false
		}
	} else if this.TemporaryBlockingParametersChoice == nil {
		return false
	} else if !this.TemporaryBlockingParametersChoice.Equal(that1.TemporaryBlockingParametersChoice) {
		return false
	}
	if that1.MaliciousUserMitigationChoice == nil {
		if this.MaliciousUserMitigationChoice != nil {
			return false
		}
	} else if this.MaliciousUserMitigationChoice == nil {
		return false
	} else if !this.MaliciousUserMitigationChoice.Equal(that1.MaliciousUserMitigationChoice) {
		return false
	}
	if that1.ChallengeChoice == nil {
		if this.ChallengeChoice != nil {
			return false
		}
	} else if this.ChallengeChoice == nil {
		return false
	} else if !this.ChallengeChoice.Equal(that1.ChallengeChoice) {
		return false
	}
	if !this.RuleList.Equal(that1.RuleList) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_DefaultJsChallengeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_DefaultJsChallengeParameters)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_DefaultJsChallengeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultJsChallengeParameters.Equal(that1.DefaultJsChallengeParameters) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_JsChallengeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_JsChallengeParameters)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_JsChallengeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallengeParameters.Equal(that1.JsChallengeParameters) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_DefaultCaptchaChallengeParameters)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_DefaultCaptchaChallengeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultCaptchaChallengeParameters.Equal(that1.DefaultCaptchaChallengeParameters) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_CaptchaChallengeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_CaptchaChallengeParameters)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_CaptchaChallengeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallengeParameters.Equal(that1.CaptchaChallengeParameters) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_DefaultTemporaryBlockingParameters)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_DefaultTemporaryBlockingParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultTemporaryBlockingParameters.Equal(that1.DefaultTemporaryBlockingParameters) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_TemporaryUserBlocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_TemporaryUserBlocking)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_TemporaryUserBlocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TemporaryUserBlocking.Equal(that1.TemporaryUserBlocking) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_DefaultMitigationSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_DefaultMitigationSettings)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_DefaultMitigationSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultMitigationSettings.Equal(that1.DefaultMitigationSettings) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_MaliciousUserMitigation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_MaliciousUserMitigation)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_MaliciousUserMitigation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_NoChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_AlwaysEnableJsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_AlwaysEnableJsChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_AlwaysEnableJsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AlwaysEnableJsChallenge.Equal(that1.AlwaysEnableJsChallenge) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_AlwaysEnableCaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AlwaysEnableCaptchaChallenge.Equal(that1.AlwaysEnableCaptchaChallenge) {
		return false
	}
	return true
}
func (this *ChallengeRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChallengeRule)
	if !ok {
		that2, ok := that.(ChallengeRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *ChallengeRuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChallengeRuleList)
	if !ok {
		that2, ok := that.(ChallengeRuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *IPThreatCategoryListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IPThreatCategoryListType)
	if !ok {
		that2, ok := that.(IPThreatCategoryListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.IpThreatCategories) != len(that1.IpThreatCategories) {
		return false
	}
	for i := range this.IpThreatCategories {
		if this.IpThreatCategories[i] != that1.IpThreatCategories[i] {
			return false
		}
	}
	return true
}
func (this *HttpHeaderMatcherList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpHeaderMatcherList)
	if !ok {
		that2, ok := that.(HttpHeaderMatcherList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	return true
}
func (this *SimpleClientSrcRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ClientSourceChoice == nil {
		if this.ClientSourceChoice != nil {
			return false
		}
	} else if this.ClientSourceChoice == nil {
		return false
	} else if !this.ClientSourceChoice.Equal(that1.ClientSourceChoice) {
		return false
	}
	if !this.ExpirationTimestamp.Equal(that1.ExpirationTimestamp) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.ActionChoice == nil {
		if this.ActionChoice != nil {
			return false
		}
	} else if this.ActionChoice == nil {
		return false
	} else if !this.ActionChoice.Equal(that1.ActionChoice) {
		return false
	}
	if len(this.Actions) != len(that1.Actions) {
		return false
	}
	for i := range this.Actions {
		if this.Actions[i] != that1.Actions[i] {
			return false
		}
	}
	return true
}
func (this *SimpleClientSrcRule_IpPrefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule_IpPrefix)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule_IpPrefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IpPrefix != that1.IpPrefix {
		return false
	}
	return true
}
func (this *SimpleClientSrcRule_AsNumber) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule_AsNumber)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule_AsNumber)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsNumber != that1.AsNumber {
		return false
	}
	return true
}
func (this *SimpleClientSrcRule_HttpHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule_HttpHeader)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule_HttpHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHeader.Equal(that1.HttpHeader) {
		return false
	}
	return true
}
func (this *SimpleClientSrcRule_UserIdentifier) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule_UserIdentifier)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule_UserIdentifier)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserIdentifier != that1.UserIdentifier {
		return false
	}
	return true
}
func (this *SimpleClientSrcRule_SkipProcessing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule_SkipProcessing)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule_SkipProcessing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SkipProcessing.Equal(that1.SkipProcessing) {
		return false
	}
	return true
}
func (this *SimpleClientSrcRule_WafSkipProcessing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule_WafSkipProcessing)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule_WafSkipProcessing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafSkipProcessing.Equal(that1.WafSkipProcessing) {
		return false
	}
	return true
}
func (this *SimpleClientSrcRule_BotSkipProcessing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule_BotSkipProcessing)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule_BotSkipProcessing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotSkipProcessing.Equal(that1.BotSkipProcessing) {
		return false
	}
	return true
}
func (this *RateLimitConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType)
	if !ok {
		that2, ok := that.(RateLimitConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimiter.Equal(that1.RateLimiter) {
		return false
	}
	if that1.IpAllowedListChoice == nil {
		if this.IpAllowedListChoice != nil {
			return false
		}
	} else if this.IpAllowedListChoice == nil {
		return false
	} else if !this.IpAllowedListChoice.Equal(that1.IpAllowedListChoice) {
		return false
	}
	if that1.PolicyChoice == nil {
		if this.PolicyChoice != nil {
			return false
		}
	} else if this.PolicyChoice == nil {
		return false
	} else if !this.PolicyChoice.Equal(that1.PolicyChoice) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_NoIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_NoIpAllowedList)
	if !ok {
		that2, ok := that.(RateLimitConfigType_NoIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoIpAllowedList.Equal(that1.NoIpAllowedList) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_IpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_IpAllowedList)
	if !ok {
		that2, ok := that.(RateLimitConfigType_IpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpAllowedList.Equal(that1.IpAllowedList) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_CustomIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_CustomIpAllowedList)
	if !ok {
		that2, ok := that.(RateLimitConfigType_CustomIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomIpAllowedList.Equal(that1.CustomIpAllowedList) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_NoPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_NoPolicies)
	if !ok {
		that2, ok := that.(RateLimitConfigType_NoPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoPolicies.Equal(that1.NoPolicies) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_Policies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_Policies)
	if !ok {
		that2, ok := that.(RateLimitConfigType_Policies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Policies.Equal(that1.Policies) {
		return false
	}
	return true
}
func (this *APIRateLimitLegacy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIRateLimitLegacy)
	if !ok {
		that2, ok := that.(APIRateLimitLegacy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.IpAllowedListChoice == nil {
		if this.IpAllowedListChoice != nil {
			return false
		}
	} else if this.IpAllowedListChoice == nil {
		return false
	} else if !this.IpAllowedListChoice.Equal(that1.IpAllowedListChoice) {
		return false
	}
	if len(this.ServerUrlRules) != len(that1.ServerUrlRules) {
		return false
	}
	for i := range this.ServerUrlRules {
		if !this.ServerUrlRules[i].Equal(that1.ServerUrlRules[i]) {
			return false
		}
	}
	if len(this.ApiEndpointRules) != len(that1.ApiEndpointRules) {
		return false
	}
	for i := range this.ApiEndpointRules {
		if !this.ApiEndpointRules[i].Equal(that1.ApiEndpointRules[i]) {
			return false
		}
	}
	return true
}
func (this *APIRateLimitLegacy_NoIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIRateLimitLegacy_NoIpAllowedList)
	if !ok {
		that2, ok := that.(APIRateLimitLegacy_NoIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoIpAllowedList.Equal(that1.NoIpAllowedList) {
		return false
	}
	return true
}
func (this *APIRateLimitLegacy_IpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIRateLimitLegacy_IpAllowedList)
	if !ok {
		that2, ok := that.(APIRateLimitLegacy_IpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpAllowedList.Equal(that1.IpAllowedList) {
		return false
	}
	return true
}
func (this *APIRateLimitLegacy_CustomIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIRateLimitLegacy_CustomIpAllowedList)
	if !ok {
		that2, ok := that.(APIRateLimitLegacy_CustomIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomIpAllowedList.Equal(that1.CustomIpAllowedList) {
		return false
	}
	return true
}
func (this *APIRateLimitLegacy_BypassRateLimitingRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIRateLimitLegacy_BypassRateLimitingRules)
	if !ok {
		that2, ok := that.(APIRateLimitLegacy_BypassRateLimitingRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BypassRateLimitingRules.Equal(that1.BypassRateLimitingRules) {
		return false
	}
	return true
}
func (this *APIRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIRateLimit)
	if !ok {
		that2, ok := that.(APIRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.IpAllowedListChoice == nil {
		if this.IpAllowedListChoice != nil {
			return false
		}
	} else if this.IpAllowedListChoice == nil {
		return false
	} else if !this.IpAllowedListChoice.Equal(that1.IpAllowedListChoice) {
		return false
	}
	if len(this.ServerUrlRules) != len(that1.ServerUrlRules) {
		return false
	}
	for i := range this.ServerUrlRules {
		if !this.ServerUrlRules[i].Equal(that1.ServerUrlRules[i]) {
			return false
		}
	}
	if len(this.ApiEndpointRules) != len(that1.ApiEndpointRules) {
		return false
	}
	for i := range this.ApiEndpointRules {
		if !this.ApiEndpointRules[i].Equal(that1.ApiEndpointRules[i]) {
			return false
		}
	}
	return true
}
func (this *APIRateLimit_NoIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIRateLimit_NoIpAllowedList)
	if !ok {
		that2, ok := that.(APIRateLimit_NoIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoIpAllowedList.Equal(that1.NoIpAllowedList) {
		return false
	}
	return true
}
func (this *APIRateLimit_IpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIRateLimit_IpAllowedList)
	if !ok {
		that2, ok := that.(APIRateLimit_IpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpAllowedList.Equal(that1.IpAllowedList) {
		return false
	}
	return true
}
func (this *APIRateLimit_CustomIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIRateLimit_CustomIpAllowedList)
	if !ok {
		that2, ok := that.(APIRateLimit_CustomIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomIpAllowedList.Equal(that1.CustomIpAllowedList) {
		return false
	}
	return true
}
func (this *APIRateLimit_BypassRateLimitingRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIRateLimit_BypassRateLimitingRules)
	if !ok {
		that2, ok := that.(APIRateLimit_BypassRateLimitingRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BypassRateLimitingRules.Equal(that1.BypassRateLimitingRules) {
		return false
	}
	return true
}
func (this *BypassRateLimitingRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BypassRateLimitingRule)
	if !ok {
		that2, ok := that.(BypassRateLimitingRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DomainChoice == nil {
		if this.DomainChoice != nil {
			return false
		}
	} else if this.DomainChoice == nil {
		return false
	} else if !this.DomainChoice.Equal(that1.DomainChoice) {
		return false
	}
	if that1.DestinationType == nil {
		if this.DestinationType != nil {
			return false
		}
	} else if this.DestinationType == nil {
		return false
	} else if !this.DestinationType.Equal(that1.DestinationType) {
		return false
	}
	if !this.RequestMatcher.Equal(that1.RequestMatcher) {
		return false
	}
	if !this.ClientMatcher.Equal(that1.ClientMatcher) {
		return false
	}
	return true
}
func (this *BypassRateLimitingRule_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BypassRateLimitingRule_AnyDomain)
	if !ok {
		that2, ok := that.(BypassRateLimitingRule_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *BypassRateLimitingRule_SpecificDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BypassRateLimitingRule_SpecificDomain)
	if !ok {
		that2, ok := that.(BypassRateLimitingRule_SpecificDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SpecificDomain != that1.SpecificDomain {
		return false
	}
	return true
}
func (this *BypassRateLimitingRule_AnyUrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BypassRateLimitingRule_AnyUrl)
	if !ok {
		that2, ok := that.(BypassRateLimitingRule_AnyUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyUrl.Equal(that1.AnyUrl) {
		return false
	}
	return true
}
func (this *BypassRateLimitingRule_BasePath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BypassRateLimitingRule_BasePath)
	if !ok {
		that2, ok := that.(BypassRateLimitingRule_BasePath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BasePath != that1.BasePath {
		return false
	}
	return true
}
func (this *BypassRateLimitingRule_ApiEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BypassRateLimitingRule_ApiEndpoint)
	if !ok {
		that2, ok := that.(BypassRateLimitingRule_ApiEndpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiEndpoint.Equal(that1.ApiEndpoint) {
		return false
	}
	return true
}
func (this *BypassRateLimitingRule_ApiGroups) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BypassRateLimitingRule_ApiGroups)
	if !ok {
		that2, ok := that.(BypassRateLimitingRule_ApiGroups)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiGroups.Equal(that1.ApiGroups) {
		return false
	}
	return true
}
func (this *APIGroups) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIGroups)
	if !ok {
		that2, ok := that.(APIGroups)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ApiGroups) != len(that1.ApiGroups) {
		return false
	}
	for i := range this.ApiGroups {
		if this.ApiGroups[i] != that1.ApiGroups[i] {
			return false
		}
	}
	return true
}
func (this *ApiEndpointDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointDetails)
	if !ok {
		that2, ok := that.(ApiEndpointDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if len(this.Methods) != len(that1.Methods) {
		return false
	}
	for i := range this.Methods {
		if this.Methods[i] != that1.Methods[i] {
			return false
		}
	}
	return true
}
func (this *BypassRateLimitingRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BypassRateLimitingRules)
	if !ok {
		that2, ok := that.(BypassRateLimitingRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.BypassRateLimitingRules) != len(that1.BypassRateLimitingRules) {
		return false
	}
	for i := range this.BypassRateLimitingRules {
		if !this.BypassRateLimitingRules[i].Equal(that1.BypassRateLimitingRules[i]) {
			return false
		}
	}
	return true
}
func (this *ApiEndpointRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointRule)
	if !ok {
		that2, ok := that.(ApiEndpointRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DomainChoice == nil {
		if this.DomainChoice != nil {
			return false
		}
	} else if this.DomainChoice == nil {
		return false
	} else if !this.DomainChoice.Equal(that1.DomainChoice) {
		return false
	}
	if this.BasePath != that1.BasePath {
		return false
	}
	if this.ApiEndpointPath != that1.ApiEndpointPath {
		return false
	}
	if !this.ApiEndpointMethod.Equal(that1.ApiEndpointMethod) {
		return false
	}
	if !this.RequestMatcher.Equal(that1.RequestMatcher) {
		return false
	}
	if !this.ClientMatcher.Equal(that1.ClientMatcher) {
		return false
	}
	if that1.RateLimiterChoice == nil {
		if this.RateLimiterChoice != nil {
			return false
		}
	} else if this.RateLimiterChoice == nil {
		return false
	} else if !this.RateLimiterChoice.Equal(that1.RateLimiterChoice) {
		return false
	}
	return true
}
func (this *ApiEndpointRule_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointRule_AnyDomain)
	if !ok {
		that2, ok := that.(ApiEndpointRule_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *ApiEndpointRule_SpecificDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointRule_SpecificDomain)
	if !ok {
		that2, ok := that.(ApiEndpointRule_SpecificDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SpecificDomain != that1.SpecificDomain {
		return false
	}
	return true
}
func (this *ApiEndpointRule_InlineRateLimiter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointRule_InlineRateLimiter)
	if !ok {
		that2, ok := that.(ApiEndpointRule_InlineRateLimiter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InlineRateLimiter.Equal(that1.InlineRateLimiter) {
		return false
	}
	return true
}
func (this *ApiEndpointRule_RefRateLimiter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointRule_RefRateLimiter)
	if !ok {
		that2, ok := that.(ApiEndpointRule_RefRateLimiter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RefRateLimiter.Equal(that1.RefRateLimiter) {
		return false
	}
	return true
}
func (this *InlineRateLimiter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InlineRateLimiter)
	if !ok {
		that2, ok := that.(InlineRateLimiter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Threshold != that1.Threshold {
		return false
	}
	if this.Unit != that1.Unit {
		return false
	}
	if that1.CountByChoice == nil {
		if this.CountByChoice != nil {
			return false
		}
	} else if this.CountByChoice == nil {
		return false
	} else if !this.CountByChoice.Equal(that1.CountByChoice) {
		return false
	}
	return true
}
func (this *InlineRateLimiter_UseHttpLbUserId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InlineRateLimiter_UseHttpLbUserId)
	if !ok {
		that2, ok := that.(InlineRateLimiter_UseHttpLbUserId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseHttpLbUserId.Equal(that1.UseHttpLbUserId) {
		return false
	}
	return true
}
func (this *InlineRateLimiter_RefUserId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InlineRateLimiter_RefUserId)
	if !ok {
		that2, ok := that.(InlineRateLimiter_RefUserId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RefUserId.Equal(that1.RefUserId) {
		return false
	}
	return true
}
func (this *ServerUrlRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerUrlRule)
	if !ok {
		that2, ok := that.(ServerUrlRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DomainChoice == nil {
		if this.DomainChoice != nil {
			return false
		}
	} else if this.DomainChoice == nil {
		return false
	} else if !this.DomainChoice.Equal(that1.DomainChoice) {
		return false
	}
	if this.BasePath != that1.BasePath {
		return false
	}
	if this.ApiGroup != that1.ApiGroup {
		return false
	}
	if !this.RequestMatcher.Equal(that1.RequestMatcher) {
		return false
	}
	if !this.ClientMatcher.Equal(that1.ClientMatcher) {
		return false
	}
	if that1.RateLimiterChoice == nil {
		if this.RateLimiterChoice != nil {
			return false
		}
	} else if this.RateLimiterChoice == nil {
		return false
	} else if !this.RateLimiterChoice.Equal(that1.RateLimiterChoice) {
		return false
	}
	return true
}
func (this *ServerUrlRule_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerUrlRule_AnyDomain)
	if !ok {
		that2, ok := that.(ServerUrlRule_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *ServerUrlRule_SpecificDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerUrlRule_SpecificDomain)
	if !ok {
		that2, ok := that.(ServerUrlRule_SpecificDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SpecificDomain != that1.SpecificDomain {
		return false
	}
	return true
}
func (this *ServerUrlRule_InlineRateLimiter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerUrlRule_InlineRateLimiter)
	if !ok {
		that2, ok := that.(ServerUrlRule_InlineRateLimiter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InlineRateLimiter.Equal(that1.InlineRateLimiter) {
		return false
	}
	return true
}
func (this *ServerUrlRule_RefRateLimiter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerUrlRule_RefRateLimiter)
	if !ok {
		that2, ok := that.(ServerUrlRule_RefRateLimiter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RefRateLimiter.Equal(that1.RefRateLimiter) {
		return false
	}
	return true
}
func (this *CustomIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomIpAllowedList)
	if !ok {
		that2, ok := that.(CustomIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RateLimiterAllowedPrefixes) != len(that1.RateLimiterAllowedPrefixes) {
		return false
	}
	for i := range this.RateLimiterAllowedPrefixes {
		if !this.RateLimiterAllowedPrefixes[i].Equal(that1.RateLimiterAllowedPrefixes[i]) {
			return false
		}
	}
	return true
}
func (this *APISpecificationSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APISpecificationSettings)
	if !ok {
		that2, ok := that.(APISpecificationSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	if that1.ValidationTargetChoice == nil {
		if this.ValidationTargetChoice != nil {
			return false
		}
	} else if this.ValidationTargetChoice == nil {
		return false
	} else if !this.ValidationTargetChoice.Equal(that1.ValidationTargetChoice) {
		return false
	}
	return true
}
func (this *APISpecificationSettings_ValidationDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APISpecificationSettings_ValidationDisabled)
	if !ok {
		that2, ok := that.(APISpecificationSettings_ValidationDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ValidationDisabled.Equal(that1.ValidationDisabled) {
		return false
	}
	return true
}
func (this *APISpecificationSettings_ValidationAllSpecEndpoints) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APISpecificationSettings_ValidationAllSpecEndpoints)
	if !ok {
		that2, ok := that.(APISpecificationSettings_ValidationAllSpecEndpoints)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ValidationAllSpecEndpoints.Equal(that1.ValidationAllSpecEndpoints) {
		return false
	}
	return true
}
func (this *APISpecificationSettings_ValidationCustomList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APISpecificationSettings_ValidationCustomList)
	if !ok {
		that2, ok := that.(APISpecificationSettings_ValidationCustomList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ValidationCustomList.Equal(that1.ValidationCustomList) {
		return false
	}
	return true
}
func (this *OpenApiValidationAllSpecEndpointsSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationAllSpecEndpointsSettings)
	if !ok {
		that2, ok := that.(OpenApiValidationAllSpecEndpointsSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ValidationMode.Equal(that1.ValidationMode) {
		return false
	}
	if !this.FallThroughMode.Equal(that1.FallThroughMode) {
		return false
	}
	if that1.OversizedBodyChoice == nil {
		if this.OversizedBodyChoice != nil {
			return false
		}
	} else if this.OversizedBodyChoice == nil {
		return false
	} else if !this.OversizedBodyChoice.Equal(that1.OversizedBodyChoice) {
		return false
	}
	if !this.Settings.Equal(that1.Settings) {
		return false
	}
	return true
}
func (this *OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation)
	if !ok {
		that2, ok := that.(OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OversizedBodySkipValidation.Equal(that1.OversizedBodySkipValidation) {
		return false
	}
	return true
}
func (this *OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation)
	if !ok {
		that2, ok := that.(OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OversizedBodyFailValidation.Equal(that1.OversizedBodyFailValidation) {
		return false
	}
	return true
}
func (this *OpenApiValidationMode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationMode)
	if !ok {
		that2, ok := that.(OpenApiValidationMode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ValidationModeChoice == nil {
		if this.ValidationModeChoice != nil {
			return false
		}
	} else if this.ValidationModeChoice == nil {
		return false
	} else if !this.ValidationModeChoice.Equal(that1.ValidationModeChoice) {
		return false
	}
	if that1.ResponseValidationModeChoice == nil {
		if this.ResponseValidationModeChoice != nil {
			return false
		}
	} else if this.ResponseValidationModeChoice == nil {
		return false
	} else if !this.ResponseValidationModeChoice.Equal(that1.ResponseValidationModeChoice) {
		return false
	}
	return true
}
func (this *OpenApiValidationMode_ValidationModeActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationMode_ValidationModeActive)
	if !ok {
		that2, ok := that.(OpenApiValidationMode_ValidationModeActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ValidationModeActive.Equal(that1.ValidationModeActive) {
		return false
	}
	return true
}
func (this *OpenApiValidationMode_SkipValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationMode_SkipValidation)
	if !ok {
		that2, ok := that.(OpenApiValidationMode_SkipValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SkipValidation.Equal(that1.SkipValidation) {
		return false
	}
	return true
}
func (this *OpenApiValidationMode_SkipResponseValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationMode_SkipResponseValidation)
	if !ok {
		that2, ok := that.(OpenApiValidationMode_SkipResponseValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SkipResponseValidation.Equal(that1.SkipResponseValidation) {
		return false
	}
	return true
}
func (this *OpenApiValidationMode_ResponseValidationModeActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationMode_ResponseValidationModeActive)
	if !ok {
		that2, ok := that.(OpenApiValidationMode_ResponseValidationModeActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseValidationModeActive.Equal(that1.ResponseValidationModeActive) {
		return false
	}
	return true
}
func (this *OpenApiValidationModeActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationModeActive)
	if !ok {
		that2, ok := that.(OpenApiValidationModeActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ValidationEnforcementType == nil {
		if this.ValidationEnforcementType != nil {
			return false
		}
	} else if this.ValidationEnforcementType == nil {
		return false
	} else if !this.ValidationEnforcementType.Equal(that1.ValidationEnforcementType) {
		return false
	}
	if len(this.RequestValidationProperties) != len(that1.RequestValidationProperties) {
		return false
	}
	for i := range this.RequestValidationProperties {
		if this.RequestValidationProperties[i] != that1.RequestValidationProperties[i] {
			return false
		}
	}
	return true
}
func (this *OpenApiValidationModeActive_EnforcementReport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationModeActive_EnforcementReport)
	if !ok {
		that2, ok := that.(OpenApiValidationModeActive_EnforcementReport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnforcementReport.Equal(that1.EnforcementReport) {
		return false
	}
	return true
}
func (this *OpenApiValidationModeActive_EnforcementBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationModeActive_EnforcementBlock)
	if !ok {
		that2, ok := that.(OpenApiValidationModeActive_EnforcementBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnforcementBlock.Equal(that1.EnforcementBlock) {
		return false
	}
	return true
}
func (this *OpenApiValidationModeActiveResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationModeActiveResponse)
	if !ok {
		that2, ok := that.(OpenApiValidationModeActiveResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ValidationEnforcementType == nil {
		if this.ValidationEnforcementType != nil {
			return false
		}
	} else if this.ValidationEnforcementType == nil {
		return false
	} else if !this.ValidationEnforcementType.Equal(that1.ValidationEnforcementType) {
		return false
	}
	if len(this.ResponseValidationProperties) != len(that1.ResponseValidationProperties) {
		return false
	}
	for i := range this.ResponseValidationProperties {
		if this.ResponseValidationProperties[i] != that1.ResponseValidationProperties[i] {
			return false
		}
	}
	return true
}
func (this *OpenApiValidationModeActiveResponse_EnforcementReport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationModeActiveResponse_EnforcementReport)
	if !ok {
		that2, ok := that.(OpenApiValidationModeActiveResponse_EnforcementReport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnforcementReport.Equal(that1.EnforcementReport) {
		return false
	}
	return true
}
func (this *OpenApiValidationModeActiveResponse_EnforcementBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationModeActiveResponse_EnforcementBlock)
	if !ok {
		that2, ok := that.(OpenApiValidationModeActiveResponse_EnforcementBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnforcementBlock.Equal(that1.EnforcementBlock) {
		return false
	}
	return true
}
func (this *OpenApiFallThroughMode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiFallThroughMode)
	if !ok {
		that2, ok := that.(OpenApiFallThroughMode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.FallThroughModeChoice == nil {
		if this.FallThroughModeChoice != nil {
			return false
		}
	} else if this.FallThroughModeChoice == nil {
		return false
	} else if !this.FallThroughModeChoice.Equal(that1.FallThroughModeChoice) {
		return false
	}
	return true
}
func (this *OpenApiFallThroughMode_FallThroughModeAllow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiFallThroughMode_FallThroughModeAllow)
	if !ok {
		that2, ok := that.(OpenApiFallThroughMode_FallThroughModeAllow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FallThroughModeAllow.Equal(that1.FallThroughModeAllow) {
		return false
	}
	return true
}
func (this *OpenApiFallThroughMode_FallThroughModeCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiFallThroughMode_FallThroughModeCustom)
	if !ok {
		that2, ok := that.(OpenApiFallThroughMode_FallThroughModeCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FallThroughModeCustom.Equal(that1.FallThroughModeCustom) {
		return false
	}
	return true
}
func (this *CustomFallThroughMode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomFallThroughMode)
	if !ok {
		that2, ok := that.(CustomFallThroughMode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OpenApiValidationRules) != len(that1.OpenApiValidationRules) {
		return false
	}
	for i := range this.OpenApiValidationRules {
		if !this.OpenApiValidationRules[i].Equal(that1.OpenApiValidationRules[i]) {
			return false
		}
	}
	return true
}
func (this *FallThroughRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FallThroughRule)
	if !ok {
		that2, ok := that.(FallThroughRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.ActionChoice == nil {
		if this.ActionChoice != nil {
			return false
		}
	} else if this.ActionChoice == nil {
		return false
	} else if !this.ActionChoice.Equal(that1.ActionChoice) {
		return false
	}
	if that1.ConditionTypeChoice == nil {
		if this.ConditionTypeChoice != nil {
			return false
		}
	} else if this.ConditionTypeChoice == nil {
		return false
	} else if !this.ConditionTypeChoice.Equal(that1.ConditionTypeChoice) {
		return false
	}
	return true
}
func (this *FallThroughRule_ActionSkip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FallThroughRule_ActionSkip)
	if !ok {
		that2, ok := that.(FallThroughRule_ActionSkip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionSkip.Equal(that1.ActionSkip) {
		return false
	}
	return true
}
func (this *FallThroughRule_ActionReport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FallThroughRule_ActionReport)
	if !ok {
		that2, ok := that.(FallThroughRule_ActionReport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionReport.Equal(that1.ActionReport) {
		return false
	}
	return true
}
func (this *FallThroughRule_ActionBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FallThroughRule_ActionBlock)
	if !ok {
		that2, ok := that.(FallThroughRule_ActionBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionBlock.Equal(that1.ActionBlock) {
		return false
	}
	return true
}
func (this *FallThroughRule_ApiEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FallThroughRule_ApiEndpoint)
	if !ok {
		that2, ok := that.(FallThroughRule_ApiEndpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiEndpoint.Equal(that1.ApiEndpoint) {
		return false
	}
	return true
}
func (this *FallThroughRule_BasePath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FallThroughRule_BasePath)
	if !ok {
		that2, ok := that.(FallThroughRule_BasePath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BasePath != that1.BasePath {
		return false
	}
	return true
}
func (this *FallThroughRule_ApiGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FallThroughRule_ApiGroup)
	if !ok {
		that2, ok := that.(FallThroughRule_ApiGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiGroup != that1.ApiGroup {
		return false
	}
	return true
}
func (this *ValidateApiBySpecRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateApiBySpecRule)
	if !ok {
		that2, ok := that.(ValidateApiBySpecRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OpenApiValidationRules) != len(that1.OpenApiValidationRules) {
		return false
	}
	for i := range this.OpenApiValidationRules {
		if !this.OpenApiValidationRules[i].Equal(that1.OpenApiValidationRules[i]) {
			return false
		}
	}
	if !this.FallThroughMode.Equal(that1.FallThroughMode) {
		return false
	}
	if that1.OversizedBodyChoice == nil {
		if this.OversizedBodyChoice != nil {
			return false
		}
	} else if this.OversizedBodyChoice == nil {
		return false
	} else if !this.OversizedBodyChoice.Equal(that1.OversizedBodyChoice) {
		return false
	}
	if !this.Settings.Equal(that1.Settings) {
		return false
	}
	return true
}
func (this *ValidateApiBySpecRule_OversizedBodySkipValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateApiBySpecRule_OversizedBodySkipValidation)
	if !ok {
		that2, ok := that.(ValidateApiBySpecRule_OversizedBodySkipValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OversizedBodySkipValidation.Equal(that1.OversizedBodySkipValidation) {
		return false
	}
	return true
}
func (this *ValidateApiBySpecRule_OversizedBodyFailValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateApiBySpecRule_OversizedBodyFailValidation)
	if !ok {
		that2, ok := that.(ValidateApiBySpecRule_OversizedBodyFailValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OversizedBodyFailValidation.Equal(that1.OversizedBodyFailValidation) {
		return false
	}
	return true
}
func (this *OpenApiValidationRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationRule)
	if !ok {
		that2, ok := that.(OpenApiValidationRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.ValidationMode.Equal(that1.ValidationMode) {
		return false
	}
	if that1.DomainChoice == nil {
		if this.DomainChoice != nil {
			return false
		}
	} else if this.DomainChoice == nil {
		return false
	} else if !this.DomainChoice.Equal(that1.DomainChoice) {
		return false
	}
	if that1.ConditionTypeChoice == nil {
		if this.ConditionTypeChoice != nil {
			return false
		}
	} else if this.ConditionTypeChoice == nil {
		return false
	} else if !this.ConditionTypeChoice.Equal(that1.ConditionTypeChoice) {
		return false
	}
	return true
}
func (this *OpenApiValidationRule_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationRule_AnyDomain)
	if !ok {
		that2, ok := that.(OpenApiValidationRule_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *OpenApiValidationRule_SpecificDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationRule_SpecificDomain)
	if !ok {
		that2, ok := that.(OpenApiValidationRule_SpecificDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SpecificDomain != that1.SpecificDomain {
		return false
	}
	return true
}
func (this *OpenApiValidationRule_ApiEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationRule_ApiEndpoint)
	if !ok {
		that2, ok := that.(OpenApiValidationRule_ApiEndpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiEndpoint.Equal(that1.ApiEndpoint) {
		return false
	}
	return true
}
func (this *OpenApiValidationRule_BasePath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationRule_BasePath)
	if !ok {
		that2, ok := that.(OpenApiValidationRule_BasePath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BasePath != that1.BasePath {
		return false
	}
	return true
}
func (this *OpenApiValidationRule_ApiGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationRule_ApiGroup)
	if !ok {
		that2, ok := that.(OpenApiValidationRule_ApiGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiGroup != that1.ApiGroup {
		return false
	}
	return true
}
func (this *OpenApiValidationCommonSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationCommonSettings)
	if !ok {
		that2, ok := that.(OpenApiValidationCommonSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.OversizedBodyChoice == nil {
		if this.OversizedBodyChoice != nil {
			return false
		}
	} else if this.OversizedBodyChoice == nil {
		return false
	} else if !this.OversizedBodyChoice.Equal(that1.OversizedBodyChoice) {
		return false
	}
	if that1.PropertyValidationSettingsChoice == nil {
		if this.PropertyValidationSettingsChoice != nil {
			return false
		}
	} else if this.PropertyValidationSettingsChoice == nil {
		return false
	} else if !this.PropertyValidationSettingsChoice.Equal(that1.PropertyValidationSettingsChoice) {
		return false
	}
	if that1.FailConfiguration == nil {
		if this.FailConfiguration != nil {
			return false
		}
	} else if this.FailConfiguration == nil {
		return false
	} else if !this.FailConfiguration.Equal(that1.FailConfiguration) {
		return false
	}
	return true
}
func (this *OpenApiValidationCommonSettings_OversizedBodySkipValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationCommonSettings_OversizedBodySkipValidation)
	if !ok {
		that2, ok := that.(OpenApiValidationCommonSettings_OversizedBodySkipValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OversizedBodySkipValidation.Equal(that1.OversizedBodySkipValidation) {
		return false
	}
	return true
}
func (this *OpenApiValidationCommonSettings_OversizedBodyFailValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationCommonSettings_OversizedBodyFailValidation)
	if !ok {
		that2, ok := that.(OpenApiValidationCommonSettings_OversizedBodyFailValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OversizedBodyFailValidation.Equal(that1.OversizedBodyFailValidation) {
		return false
	}
	return true
}
func (this *OpenApiValidationCommonSettings_PropertyValidationSettingsDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationCommonSettings_PropertyValidationSettingsDefault)
	if !ok {
		that2, ok := that.(OpenApiValidationCommonSettings_PropertyValidationSettingsDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PropertyValidationSettingsDefault.Equal(that1.PropertyValidationSettingsDefault) {
		return false
	}
	return true
}
func (this *OpenApiValidationCommonSettings_PropertyValidationSettingsCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationCommonSettings_PropertyValidationSettingsCustom)
	if !ok {
		that2, ok := that.(OpenApiValidationCommonSettings_PropertyValidationSettingsCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PropertyValidationSettingsCustom.Equal(that1.PropertyValidationSettingsCustom) {
		return false
	}
	return true
}
func (this *OpenApiValidationCommonSettings_FailOpen) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationCommonSettings_FailOpen)
	if !ok {
		that2, ok := that.(OpenApiValidationCommonSettings_FailOpen)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FailOpen.Equal(that1.FailOpen) {
		return false
	}
	return true
}
func (this *OpenApiValidationCommonSettings_FailClose) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenApiValidationCommonSettings_FailClose)
	if !ok {
		that2, ok := that.(OpenApiValidationCommonSettings_FailClose)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FailClose.Equal(that1.FailClose) {
		return false
	}
	return true
}
func (this *ValidationPropertySetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidationPropertySetting)
	if !ok {
		that2, ok := that.(ValidationPropertySetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryParameters.Equal(that1.QueryParameters) {
		return false
	}
	if !this.Headers.Equal(that1.Headers) {
		return false
	}
	return true
}
func (this *ValidationSettingForQueryParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidationSettingForQueryParameters)
	if !ok {
		that2, ok := that.(ValidationSettingForQueryParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AdditionalParametersChoice == nil {
		if this.AdditionalParametersChoice != nil {
			return false
		}
	} else if this.AdditionalParametersChoice == nil {
		return false
	} else if !this.AdditionalParametersChoice.Equal(that1.AdditionalParametersChoice) {
		return false
	}
	return true
}
func (this *ValidationSettingForQueryParameters_AllowAdditionalParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidationSettingForQueryParameters_AllowAdditionalParameters)
	if !ok {
		that2, ok := that.(ValidationSettingForQueryParameters_AllowAdditionalParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAdditionalParameters.Equal(that1.AllowAdditionalParameters) {
		return false
	}
	return true
}
func (this *ValidationSettingForQueryParameters_DisallowAdditionalParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidationSettingForQueryParameters_DisallowAdditionalParameters)
	if !ok {
		that2, ok := that.(ValidationSettingForQueryParameters_DisallowAdditionalParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisallowAdditionalParameters.Equal(that1.DisallowAdditionalParameters) {
		return false
	}
	return true
}
func (this *ValidationSettingForHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidationSettingForHeaders)
	if !ok {
		that2, ok := that.(ValidationSettingForHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AdditionalHeadersChoice == nil {
		if this.AdditionalHeadersChoice != nil {
			return false
		}
	} else if this.AdditionalHeadersChoice == nil {
		return false
	} else if !this.AdditionalHeadersChoice.Equal(that1.AdditionalHeadersChoice) {
		return false
	}
	return true
}
func (this *ValidationSettingForHeaders_AllowAdditionalHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidationSettingForHeaders_AllowAdditionalHeaders)
	if !ok {
		that2, ok := that.(ValidationSettingForHeaders_AllowAdditionalHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAdditionalHeaders.Equal(that1.AllowAdditionalHeaders) {
		return false
	}
	return true
}
func (this *ValidationSettingForHeaders_DisallowAdditionalHeaders) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidationSettingForHeaders_DisallowAdditionalHeaders)
	if !ok {
		that2, ok := that.(ValidationSettingForHeaders_DisallowAdditionalHeaders)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisallowAdditionalHeaders.Equal(that1.DisallowAdditionalHeaders) {
		return false
	}
	return true
}
func (this *ApiDefinitionList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiDefinitionList)
	if !ok {
		that2, ok := that.(ApiDefinitionList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ApiDefinitions) != len(that1.ApiDefinitions) {
		return false
	}
	for i := range this.ApiDefinitions {
		if !this.ApiDefinitions[i].Equal(that1.ApiDefinitions[i]) {
			return false
		}
	}
	return true
}
func (this *APIProtectionRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIProtectionRules)
	if !ok {
		that2, ok := that.(APIProtectionRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ApiEndpointRules) != len(that1.ApiEndpointRules) {
		return false
	}
	for i := range this.ApiEndpointRules {
		if !this.ApiEndpointRules[i].Equal(that1.ApiEndpointRules[i]) {
			return false
		}
	}
	if len(this.ApiGroupsRules) != len(that1.ApiGroupsRules) {
		return false
	}
	for i := range this.ApiGroupsRules {
		if !this.ApiGroupsRules[i].Equal(that1.ApiGroupsRules[i]) {
			return false
		}
	}
	return true
}
func (this *APIEndpointProtectionRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointProtectionRule)
	if !ok {
		that2, ok := that.(APIEndpointProtectionRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if that1.DomainChoice == nil {
		if this.DomainChoice != nil {
			return false
		}
	} else if this.DomainChoice == nil {
		return false
	} else if !this.DomainChoice.Equal(that1.DomainChoice) {
		return false
	}
	if this.ApiEndpointPath != that1.ApiEndpointPath {
		return false
	}
	if !this.ApiEndpointMethod.Equal(that1.ApiEndpointMethod) {
		return false
	}
	if !this.RequestMatcher.Equal(that1.RequestMatcher) {
		return false
	}
	if !this.ClientMatcher.Equal(that1.ClientMatcher) {
		return false
	}
	return true
}
func (this *APIEndpointProtectionRule_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointProtectionRule_AnyDomain)
	if !ok {
		that2, ok := that.(APIEndpointProtectionRule_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *APIEndpointProtectionRule_SpecificDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIEndpointProtectionRule_SpecificDomain)
	if !ok {
		that2, ok := that.(APIEndpointProtectionRule_SpecificDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SpecificDomain != that1.SpecificDomain {
		return false
	}
	return true
}
func (this *APIGroupProtectionRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIGroupProtectionRule)
	if !ok {
		that2, ok := that.(APIGroupProtectionRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if that1.DomainChoice == nil {
		if this.DomainChoice != nil {
			return false
		}
	} else if this.DomainChoice == nil {
		return false
	} else if !this.DomainChoice.Equal(that1.DomainChoice) {
		return false
	}
	if this.BasePath != that1.BasePath {
		return false
	}
	if this.ApiGroup != that1.ApiGroup {
		return false
	}
	if !this.RequestMatcher.Equal(that1.RequestMatcher) {
		return false
	}
	if !this.ClientMatcher.Equal(that1.ClientMatcher) {
		return false
	}
	return true
}
func (this *APIGroupProtectionRule_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIGroupProtectionRule_AnyDomain)
	if !ok {
		that2, ok := that.(APIGroupProtectionRule_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *APIGroupProtectionRule_SpecificDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIGroupProtectionRule_SpecificDomain)
	if !ok {
		that2, ok := that.(APIGroupProtectionRule_SpecificDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SpecificDomain != that1.SpecificDomain {
		return false
	}
	return true
}
func (this *APIProtectionRuleAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIProtectionRuleAction)
	if !ok {
		that2, ok := that.(APIProtectionRuleAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Action == nil {
		if this.Action != nil {
			return false
		}
	} else if this.Action == nil {
		return false
	} else if !this.Action.Equal(that1.Action) {
		return false
	}
	return true
}
func (this *APIProtectionRuleAction_Allow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIProtectionRuleAction_Allow)
	if !ok {
		that2, ok := that.(APIProtectionRuleAction_Allow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Allow.Equal(that1.Allow) {
		return false
	}
	return true
}
func (this *APIProtectionRuleAction_Deny) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIProtectionRuleAction_Deny)
	if !ok {
		that2, ok := that.(APIProtectionRuleAction_Deny)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Deny.Equal(that1.Deny) {
		return false
	}
	return true
}
func (this *JWTValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JWTValidation)
	if !ok {
		that2, ok := that.(JWTValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	if !this.TokenLocation.Equal(that1.TokenLocation) {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if that1.JwksConfiguration == nil {
		if this.JwksConfiguration != nil {
			return false
		}
	} else if this.JwksConfiguration == nil {
		return false
	} else if !this.JwksConfiguration.Equal(that1.JwksConfiguration) {
		return false
	}
	if !this.ReservedClaims.Equal(that1.ReservedClaims) {
		return false
	}
	if !this.MandatoryClaims.Equal(that1.MandatoryClaims) {
		return false
	}
	return true
}
func (this *JWTValidation_AuthServerUri) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JWTValidation_AuthServerUri)
	if !ok {
		that2, ok := that.(JWTValidation_AuthServerUri)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthServerUri != that1.AuthServerUri {
		return false
	}
	return true
}
func (this *JWTValidation_Jwks) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JWTValidation_Jwks)
	if !ok {
		that2, ok := that.(JWTValidation_Jwks)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Jwks != that1.Jwks {
		return false
	}
	return true
}
func (this *JWTValidation_JwksConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JWTValidation_JwksConfig)
	if !ok {
		that2, ok := that.(JWTValidation_JwksConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JwksConfig.Equal(that1.JwksConfig) {
		return false
	}
	return true
}
func (this *MandatoryClaims) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MandatoryClaims)
	if !ok {
		that2, ok := that.(MandatoryClaims)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ClaimNames) != len(that1.ClaimNames) {
		return false
	}
	for i := range this.ClaimNames {
		if this.ClaimNames[i] != that1.ClaimNames[i] {
			return false
		}
	}
	return true
}
func (this *Target) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Target)
	if !ok {
		that2, ok := that.(Target)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Target == nil {
		if this.Target != nil {
			return false
		}
	} else if this.Target == nil {
		return false
	} else if !this.Target.Equal(that1.Target) {
		return false
	}
	return true
}
func (this *Target_AllEndpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Target_AllEndpoint)
	if !ok {
		that2, ok := that.(Target_AllEndpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllEndpoint.Equal(that1.AllEndpoint) {
		return false
	}
	return true
}
func (this *Target_ApiGroups) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Target_ApiGroups)
	if !ok {
		that2, ok := that.(Target_ApiGroups)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiGroups.Equal(that1.ApiGroups) {
		return false
	}
	return true
}
func (this *Target_BasePaths) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Target_BasePaths)
	if !ok {
		that2, ok := that.(Target_BasePaths)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasePaths.Equal(that1.BasePaths) {
		return false
	}
	return true
}
func (this *JWKS) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JWKS)
	if !ok {
		that2, ok := that.(JWKS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cleartext != that1.Cleartext {
		return false
	}
	return true
}
func (this *TokenLocation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenLocation)
	if !ok {
		that2, ok := that.(TokenLocation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TokenLocation == nil {
		if this.TokenLocation != nil {
			return false
		}
	} else if this.TokenLocation == nil {
		return false
	} else if !this.TokenLocation.Equal(that1.TokenLocation) {
		return false
	}
	return true
}
func (this *TokenLocation_BearerToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenLocation_BearerToken)
	if !ok {
		that2, ok := that.(TokenLocation_BearerToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BearerToken.Equal(that1.BearerToken) {
		return false
	}
	return true
}
func (this *TokenLocation_Cookie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenLocation_Cookie)
	if !ok {
		that2, ok := that.(TokenLocation_Cookie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cookie != that1.Cookie {
		return false
	}
	return true
}
func (this *TokenLocation_Header) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenLocation_Header)
	if !ok {
		that2, ok := that.(TokenLocation_Header)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Header != that1.Header {
		return false
	}
	return true
}
func (this *TokenLocation_QueryParam) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenLocation_QueryParam)
	if !ok {
		that2, ok := that.(TokenLocation_QueryParam)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueryParam != that1.QueryParam {
		return false
	}
	return true
}
func (this *ReservedClaims) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReservedClaims)
	if !ok {
		that2, ok := that.(ReservedClaims)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.IssuerValidation == nil {
		if this.IssuerValidation != nil {
			return false
		}
	} else if this.IssuerValidation == nil {
		return false
	} else if !this.IssuerValidation.Equal(that1.IssuerValidation) {
		return false
	}
	if that1.AudienceValidation == nil {
		if this.AudienceValidation != nil {
			return false
		}
	} else if this.AudienceValidation == nil {
		return false
	} else if !this.AudienceValidation.Equal(that1.AudienceValidation) {
		return false
	}
	if that1.ValidatePeriod == nil {
		if this.ValidatePeriod != nil {
			return false
		}
	} else if this.ValidatePeriod == nil {
		return false
	} else if !this.ValidatePeriod.Equal(that1.ValidatePeriod) {
		return false
	}
	return true
}
func (this *ReservedClaims_IssuerDisable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReservedClaims_IssuerDisable)
	if !ok {
		that2, ok := that.(ReservedClaims_IssuerDisable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IssuerDisable.Equal(that1.IssuerDisable) {
		return false
	}
	return true
}
func (this *ReservedClaims_Issuer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReservedClaims_Issuer)
	if !ok {
		that2, ok := that.(ReservedClaims_Issuer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Issuer != that1.Issuer {
		return false
	}
	return true
}
func (this *ReservedClaims_AudienceDisable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReservedClaims_AudienceDisable)
	if !ok {
		that2, ok := that.(ReservedClaims_AudienceDisable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AudienceDisable.Equal(that1.AudienceDisable) {
		return false
	}
	return true
}
func (this *ReservedClaims_Audience) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReservedClaims_Audience)
	if !ok {
		that2, ok := that.(ReservedClaims_Audience)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Audience.Equal(that1.Audience) {
		return false
	}
	return true
}
func (this *ReservedClaims_ValidatePeriodDisable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReservedClaims_ValidatePeriodDisable)
	if !ok {
		that2, ok := that.(ReservedClaims_ValidatePeriodDisable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ValidatePeriodDisable.Equal(that1.ValidatePeriodDisable) {
		return false
	}
	return true
}
func (this *ReservedClaims_ValidatePeriodEnable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReservedClaims_ValidatePeriodEnable)
	if !ok {
		that2, ok := that.(ReservedClaims_ValidatePeriodEnable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ValidatePeriodEnable.Equal(that1.ValidatePeriodEnable) {
		return false
	}
	return true
}
func (this *Audiences) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Audiences)
	if !ok {
		that2, ok := that.(Audiences)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Audiences) != len(that1.Audiences) {
		return false
	}
	for i := range this.Audiences {
		if this.Audiences[i] != that1.Audiences[i] {
			return false
		}
	}
	return true
}
func (this *BasePathsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BasePathsType)
	if !ok {
		that2, ok := that.(BasePathsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.BasePaths) != len(that1.BasePaths) {
		return false
	}
	for i := range this.BasePaths {
		if this.BasePaths[i] != that1.BasePaths[i] {
			return false
		}
	}
	return true
}
func (this *ApiDiscoverySetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiDiscoverySetting)
	if !ok {
		that2, ok := that.(ApiDiscoverySetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.LearnFromRedirectTraffic == nil {
		if this.LearnFromRedirectTraffic != nil {
			return false
		}
	} else if this.LearnFromRedirectTraffic == nil {
		return false
	} else if !this.LearnFromRedirectTraffic.Equal(that1.LearnFromRedirectTraffic) {
		return false
	}
	if !this.SensitiveDataDetectionRules.Equal(that1.SensitiveDataDetectionRules) {
		return false
	}
	if !this.DiscoveredApiSettings.Equal(that1.DiscoveredApiSettings) {
		return false
	}
	return true
}
func (this *ApiDiscoverySetting_DisableLearnFromRedirectTraffic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiDiscoverySetting_DisableLearnFromRedirectTraffic)
	if !ok {
		that2, ok := that.(ApiDiscoverySetting_DisableLearnFromRedirectTraffic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableLearnFromRedirectTraffic.Equal(that1.DisableLearnFromRedirectTraffic) {
		return false
	}
	return true
}
func (this *ApiDiscoverySetting_EnableLearnFromRedirectTraffic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiDiscoverySetting_EnableLearnFromRedirectTraffic)
	if !ok {
		that2, ok := that.(ApiDiscoverySetting_EnableLearnFromRedirectTraffic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableLearnFromRedirectTraffic.Equal(that1.EnableLearnFromRedirectTraffic) {
		return false
	}
	return true
}
func (this *ServicePolicyList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_waf.ServicePolicyList{")
	if this.Policies != nil {
		s = append(s, "Policies: "+fmt.Sprintf("%#v", this.Policies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnableChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&common_waf.EnableChallenge{")
	if this.MaliciousUserMitigationChoice != nil {
		s = append(s, "MaliciousUserMitigationChoice: "+fmt.Sprintf("%#v", this.MaliciousUserMitigationChoice)+",\n")
	}
	if this.JsChallengeParametersChoice != nil {
		s = append(s, "JsChallengeParametersChoice: "+fmt.Sprintf("%#v", this.JsChallengeParametersChoice)+",\n")
	}
	if this.CaptchaChallengeParametersChoice != nil {
		s = append(s, "CaptchaChallengeParametersChoice: "+fmt.Sprintf("%#v", this.CaptchaChallengeParametersChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnableChallenge_DefaultMitigationSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.EnableChallenge_DefaultMitigationSettings{` +
		`DefaultMitigationSettings:` + fmt.Sprintf("%#v", this.DefaultMitigationSettings) + `}`}, ", ")
	return s
}
func (this *EnableChallenge_MaliciousUserMitigation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.EnableChallenge_MaliciousUserMitigation{` +
		`MaliciousUserMitigation:` + fmt.Sprintf("%#v", this.MaliciousUserMitigation) + `}`}, ", ")
	return s
}
func (this *EnableChallenge_DefaultJsChallengeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.EnableChallenge_DefaultJsChallengeParameters{` +
		`DefaultJsChallengeParameters:` + fmt.Sprintf("%#v", this.DefaultJsChallengeParameters) + `}`}, ", ")
	return s
}
func (this *EnableChallenge_JsChallengeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.EnableChallenge_JsChallengeParameters{` +
		`JsChallengeParameters:` + fmt.Sprintf("%#v", this.JsChallengeParameters) + `}`}, ", ")
	return s
}
func (this *EnableChallenge_DefaultCaptchaChallengeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.EnableChallenge_DefaultCaptchaChallengeParameters{` +
		`DefaultCaptchaChallengeParameters:` + fmt.Sprintf("%#v", this.DefaultCaptchaChallengeParameters) + `}`}, ", ")
	return s
}
func (this *EnableChallenge_CaptchaChallengeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.EnableChallenge_CaptchaChallengeParameters{` +
		`CaptchaChallengeParameters:` + fmt.Sprintf("%#v", this.CaptchaChallengeParameters) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&common_waf.PolicyBasedChallenge{")
	if this.JsChallengeParametersChoice != nil {
		s = append(s, "JsChallengeParametersChoice: "+fmt.Sprintf("%#v", this.JsChallengeParametersChoice)+",\n")
	}
	if this.CaptchaChallengeParametersChoice != nil {
		s = append(s, "CaptchaChallengeParametersChoice: "+fmt.Sprintf("%#v", this.CaptchaChallengeParametersChoice)+",\n")
	}
	if this.TemporaryBlockingParametersChoice != nil {
		s = append(s, "TemporaryBlockingParametersChoice: "+fmt.Sprintf("%#v", this.TemporaryBlockingParametersChoice)+",\n")
	}
	if this.MaliciousUserMitigationChoice != nil {
		s = append(s, "MaliciousUserMitigationChoice: "+fmt.Sprintf("%#v", this.MaliciousUserMitigationChoice)+",\n")
	}
	if this.ChallengeChoice != nil {
		s = append(s, "ChallengeChoice: "+fmt.Sprintf("%#v", this.ChallengeChoice)+",\n")
	}
	if this.RuleList != nil {
		s = append(s, "RuleList: "+fmt.Sprintf("%#v", this.RuleList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PolicyBasedChallenge_DefaultJsChallengeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.PolicyBasedChallenge_DefaultJsChallengeParameters{` +
		`DefaultJsChallengeParameters:` + fmt.Sprintf("%#v", this.DefaultJsChallengeParameters) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_JsChallengeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.PolicyBasedChallenge_JsChallengeParameters{` +
		`JsChallengeParameters:` + fmt.Sprintf("%#v", this.JsChallengeParameters) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.PolicyBasedChallenge_DefaultCaptchaChallengeParameters{` +
		`DefaultCaptchaChallengeParameters:` + fmt.Sprintf("%#v", this.DefaultCaptchaChallengeParameters) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_CaptchaChallengeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.PolicyBasedChallenge_CaptchaChallengeParameters{` +
		`CaptchaChallengeParameters:` + fmt.Sprintf("%#v", this.CaptchaChallengeParameters) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.PolicyBasedChallenge_DefaultTemporaryBlockingParameters{` +
		`DefaultTemporaryBlockingParameters:` + fmt.Sprintf("%#v", this.DefaultTemporaryBlockingParameters) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_TemporaryUserBlocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.PolicyBasedChallenge_TemporaryUserBlocking{` +
		`TemporaryUserBlocking:` + fmt.Sprintf("%#v", this.TemporaryUserBlocking) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_DefaultMitigationSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.PolicyBasedChallenge_DefaultMitigationSettings{` +
		`DefaultMitigationSettings:` + fmt.Sprintf("%#v", this.DefaultMitigationSettings) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_MaliciousUserMitigation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.PolicyBasedChallenge_MaliciousUserMitigation{` +
		`MaliciousUserMitigation:` + fmt.Sprintf("%#v", this.MaliciousUserMitigation) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.PolicyBasedChallenge_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableJsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.PolicyBasedChallenge_AlwaysEnableJsChallenge{` +
		`AlwaysEnableJsChallenge:` + fmt.Sprintf("%#v", this.AlwaysEnableJsChallenge) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{` +
		`AlwaysEnableCaptchaChallenge:` + fmt.Sprintf("%#v", this.AlwaysEnableCaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *ChallengeRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common_waf.ChallengeRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChallengeRuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_waf.ChallengeRuleList{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IPThreatCategoryListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_waf.IPThreatCategoryListType{")
	s = append(s, "IpThreatCategories: "+fmt.Sprintf("%#v", this.IpThreatCategories)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HttpHeaderMatcherList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_waf.HttpHeaderMatcherList{")
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleClientSrcRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&common_waf.SimpleClientSrcRule{")
	if this.ClientSourceChoice != nil {
		s = append(s, "ClientSourceChoice: "+fmt.Sprintf("%#v", this.ClientSourceChoice)+",\n")
	}
	if this.ExpirationTimestamp != nil {
		s = append(s, "ExpirationTimestamp: "+fmt.Sprintf("%#v", this.ExpirationTimestamp)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.ActionChoice != nil {
		s = append(s, "ActionChoice: "+fmt.Sprintf("%#v", this.ActionChoice)+",\n")
	}
	s = append(s, "Actions: "+fmt.Sprintf("%#v", this.Actions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleClientSrcRule_IpPrefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.SimpleClientSrcRule_IpPrefix{` +
		`IpPrefix:` + fmt.Sprintf("%#v", this.IpPrefix) + `}`}, ", ")
	return s
}
func (this *SimpleClientSrcRule_AsNumber) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.SimpleClientSrcRule_AsNumber{` +
		`AsNumber:` + fmt.Sprintf("%#v", this.AsNumber) + `}`}, ", ")
	return s
}
func (this *SimpleClientSrcRule_HttpHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.SimpleClientSrcRule_HttpHeader{` +
		`HttpHeader:` + fmt.Sprintf("%#v", this.HttpHeader) + `}`}, ", ")
	return s
}
func (this *SimpleClientSrcRule_UserIdentifier) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.SimpleClientSrcRule_UserIdentifier{` +
		`UserIdentifier:` + fmt.Sprintf("%#v", this.UserIdentifier) + `}`}, ", ")
	return s
}
func (this *SimpleClientSrcRule_SkipProcessing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.SimpleClientSrcRule_SkipProcessing{` +
		`SkipProcessing:` + fmt.Sprintf("%#v", this.SkipProcessing) + `}`}, ", ")
	return s
}
func (this *SimpleClientSrcRule_WafSkipProcessing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.SimpleClientSrcRule_WafSkipProcessing{` +
		`WafSkipProcessing:` + fmt.Sprintf("%#v", this.WafSkipProcessing) + `}`}, ", ")
	return s
}
func (this *SimpleClientSrcRule_BotSkipProcessing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.SimpleClientSrcRule_BotSkipProcessing{` +
		`BotSkipProcessing:` + fmt.Sprintf("%#v", this.BotSkipProcessing) + `}`}, ", ")
	return s
}
func (this *RateLimitConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&common_waf.RateLimitConfigType{")
	if this.RateLimiter != nil {
		s = append(s, "RateLimiter: "+fmt.Sprintf("%#v", this.RateLimiter)+",\n")
	}
	if this.IpAllowedListChoice != nil {
		s = append(s, "IpAllowedListChoice: "+fmt.Sprintf("%#v", this.IpAllowedListChoice)+",\n")
	}
	if this.PolicyChoice != nil {
		s = append(s, "PolicyChoice: "+fmt.Sprintf("%#v", this.PolicyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RateLimitConfigType_NoIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.RateLimitConfigType_NoIpAllowedList{` +
		`NoIpAllowedList:` + fmt.Sprintf("%#v", this.NoIpAllowedList) + `}`}, ", ")
	return s
}
func (this *RateLimitConfigType_IpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.RateLimitConfigType_IpAllowedList{` +
		`IpAllowedList:` + fmt.Sprintf("%#v", this.IpAllowedList) + `}`}, ", ")
	return s
}
func (this *RateLimitConfigType_CustomIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.RateLimitConfigType_CustomIpAllowedList{` +
		`CustomIpAllowedList:` + fmt.Sprintf("%#v", this.CustomIpAllowedList) + `}`}, ", ")
	return s
}
func (this *RateLimitConfigType_NoPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.RateLimitConfigType_NoPolicies{` +
		`NoPolicies:` + fmt.Sprintf("%#v", this.NoPolicies) + `}`}, ", ")
	return s
}
func (this *RateLimitConfigType_Policies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.RateLimitConfigType_Policies{` +
		`Policies:` + fmt.Sprintf("%#v", this.Policies) + `}`}, ", ")
	return s
}
func (this *APIRateLimitLegacy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&common_waf.APIRateLimitLegacy{")
	if this.IpAllowedListChoice != nil {
		s = append(s, "IpAllowedListChoice: "+fmt.Sprintf("%#v", this.IpAllowedListChoice)+",\n")
	}
	if this.ServerUrlRules != nil {
		s = append(s, "ServerUrlRules: "+fmt.Sprintf("%#v", this.ServerUrlRules)+",\n")
	}
	if this.ApiEndpointRules != nil {
		s = append(s, "ApiEndpointRules: "+fmt.Sprintf("%#v", this.ApiEndpointRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIRateLimitLegacy_NoIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APIRateLimitLegacy_NoIpAllowedList{` +
		`NoIpAllowedList:` + fmt.Sprintf("%#v", this.NoIpAllowedList) + `}`}, ", ")
	return s
}
func (this *APIRateLimitLegacy_IpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APIRateLimitLegacy_IpAllowedList{` +
		`IpAllowedList:` + fmt.Sprintf("%#v", this.IpAllowedList) + `}`}, ", ")
	return s
}
func (this *APIRateLimitLegacy_CustomIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APIRateLimitLegacy_CustomIpAllowedList{` +
		`CustomIpAllowedList:` + fmt.Sprintf("%#v", this.CustomIpAllowedList) + `}`}, ", ")
	return s
}
func (this *APIRateLimitLegacy_BypassRateLimitingRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APIRateLimitLegacy_BypassRateLimitingRules{` +
		`BypassRateLimitingRules:` + fmt.Sprintf("%#v", this.BypassRateLimitingRules) + `}`}, ", ")
	return s
}
func (this *APIRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&common_waf.APIRateLimit{")
	if this.IpAllowedListChoice != nil {
		s = append(s, "IpAllowedListChoice: "+fmt.Sprintf("%#v", this.IpAllowedListChoice)+",\n")
	}
	if this.ServerUrlRules != nil {
		s = append(s, "ServerUrlRules: "+fmt.Sprintf("%#v", this.ServerUrlRules)+",\n")
	}
	if this.ApiEndpointRules != nil {
		s = append(s, "ApiEndpointRules: "+fmt.Sprintf("%#v", this.ApiEndpointRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIRateLimit_NoIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APIRateLimit_NoIpAllowedList{` +
		`NoIpAllowedList:` + fmt.Sprintf("%#v", this.NoIpAllowedList) + `}`}, ", ")
	return s
}
func (this *APIRateLimit_IpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APIRateLimit_IpAllowedList{` +
		`IpAllowedList:` + fmt.Sprintf("%#v", this.IpAllowedList) + `}`}, ", ")
	return s
}
func (this *APIRateLimit_CustomIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APIRateLimit_CustomIpAllowedList{` +
		`CustomIpAllowedList:` + fmt.Sprintf("%#v", this.CustomIpAllowedList) + `}`}, ", ")
	return s
}
func (this *APIRateLimit_BypassRateLimitingRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APIRateLimit_BypassRateLimitingRules{` +
		`BypassRateLimitingRules:` + fmt.Sprintf("%#v", this.BypassRateLimitingRules) + `}`}, ", ")
	return s
}
func (this *BypassRateLimitingRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&common_waf.BypassRateLimitingRule{")
	if this.DomainChoice != nil {
		s = append(s, "DomainChoice: "+fmt.Sprintf("%#v", this.DomainChoice)+",\n")
	}
	if this.DestinationType != nil {
		s = append(s, "DestinationType: "+fmt.Sprintf("%#v", this.DestinationType)+",\n")
	}
	if this.RequestMatcher != nil {
		s = append(s, "RequestMatcher: "+fmt.Sprintf("%#v", this.RequestMatcher)+",\n")
	}
	if this.ClientMatcher != nil {
		s = append(s, "ClientMatcher: "+fmt.Sprintf("%#v", this.ClientMatcher)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BypassRateLimitingRule_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.BypassRateLimitingRule_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *BypassRateLimitingRule_SpecificDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.BypassRateLimitingRule_SpecificDomain{` +
		`SpecificDomain:` + fmt.Sprintf("%#v", this.SpecificDomain) + `}`}, ", ")
	return s
}
func (this *BypassRateLimitingRule_AnyUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.BypassRateLimitingRule_AnyUrl{` +
		`AnyUrl:` + fmt.Sprintf("%#v", this.AnyUrl) + `}`}, ", ")
	return s
}
func (this *BypassRateLimitingRule_BasePath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.BypassRateLimitingRule_BasePath{` +
		`BasePath:` + fmt.Sprintf("%#v", this.BasePath) + `}`}, ", ")
	return s
}
func (this *BypassRateLimitingRule_ApiEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.BypassRateLimitingRule_ApiEndpoint{` +
		`ApiEndpoint:` + fmt.Sprintf("%#v", this.ApiEndpoint) + `}`}, ", ")
	return s
}
func (this *BypassRateLimitingRule_ApiGroups) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.BypassRateLimitingRule_ApiGroups{` +
		`ApiGroups:` + fmt.Sprintf("%#v", this.ApiGroups) + `}`}, ", ")
	return s
}
func (this *APIGroups) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_waf.APIGroups{")
	s = append(s, "ApiGroups: "+fmt.Sprintf("%#v", this.ApiGroups)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiEndpointDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common_waf.ApiEndpointDetails{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Methods: "+fmt.Sprintf("%#v", this.Methods)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BypassRateLimitingRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_waf.BypassRateLimitingRules{")
	if this.BypassRateLimitingRules != nil {
		s = append(s, "BypassRateLimitingRules: "+fmt.Sprintf("%#v", this.BypassRateLimitingRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiEndpointRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&common_waf.ApiEndpointRule{")
	if this.DomainChoice != nil {
		s = append(s, "DomainChoice: "+fmt.Sprintf("%#v", this.DomainChoice)+",\n")
	}
	s = append(s, "BasePath: "+fmt.Sprintf("%#v", this.BasePath)+",\n")
	s = append(s, "ApiEndpointPath: "+fmt.Sprintf("%#v", this.ApiEndpointPath)+",\n")
	if this.ApiEndpointMethod != nil {
		s = append(s, "ApiEndpointMethod: "+fmt.Sprintf("%#v", this.ApiEndpointMethod)+",\n")
	}
	if this.RequestMatcher != nil {
		s = append(s, "RequestMatcher: "+fmt.Sprintf("%#v", this.RequestMatcher)+",\n")
	}
	if this.ClientMatcher != nil {
		s = append(s, "ClientMatcher: "+fmt.Sprintf("%#v", this.ClientMatcher)+",\n")
	}
	if this.RateLimiterChoice != nil {
		s = append(s, "RateLimiterChoice: "+fmt.Sprintf("%#v", this.RateLimiterChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiEndpointRule_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ApiEndpointRule_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *ApiEndpointRule_SpecificDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ApiEndpointRule_SpecificDomain{` +
		`SpecificDomain:` + fmt.Sprintf("%#v", this.SpecificDomain) + `}`}, ", ")
	return s
}
func (this *ApiEndpointRule_InlineRateLimiter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ApiEndpointRule_InlineRateLimiter{` +
		`InlineRateLimiter:` + fmt.Sprintf("%#v", this.InlineRateLimiter) + `}`}, ", ")
	return s
}
func (this *ApiEndpointRule_RefRateLimiter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ApiEndpointRule_RefRateLimiter{` +
		`RefRateLimiter:` + fmt.Sprintf("%#v", this.RefRateLimiter) + `}`}, ", ")
	return s
}
func (this *InlineRateLimiter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&common_waf.InlineRateLimiter{")
	s = append(s, "Threshold: "+fmt.Sprintf("%#v", this.Threshold)+",\n")
	s = append(s, "Unit: "+fmt.Sprintf("%#v", this.Unit)+",\n")
	if this.CountByChoice != nil {
		s = append(s, "CountByChoice: "+fmt.Sprintf("%#v", this.CountByChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InlineRateLimiter_UseHttpLbUserId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.InlineRateLimiter_UseHttpLbUserId{` +
		`UseHttpLbUserId:` + fmt.Sprintf("%#v", this.UseHttpLbUserId) + `}`}, ", ")
	return s
}
func (this *InlineRateLimiter_RefUserId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.InlineRateLimiter_RefUserId{` +
		`RefUserId:` + fmt.Sprintf("%#v", this.RefUserId) + `}`}, ", ")
	return s
}
func (this *ServerUrlRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&common_waf.ServerUrlRule{")
	if this.DomainChoice != nil {
		s = append(s, "DomainChoice: "+fmt.Sprintf("%#v", this.DomainChoice)+",\n")
	}
	s = append(s, "BasePath: "+fmt.Sprintf("%#v", this.BasePath)+",\n")
	s = append(s, "ApiGroup: "+fmt.Sprintf("%#v", this.ApiGroup)+",\n")
	if this.RequestMatcher != nil {
		s = append(s, "RequestMatcher: "+fmt.Sprintf("%#v", this.RequestMatcher)+",\n")
	}
	if this.ClientMatcher != nil {
		s = append(s, "ClientMatcher: "+fmt.Sprintf("%#v", this.ClientMatcher)+",\n")
	}
	if this.RateLimiterChoice != nil {
		s = append(s, "RateLimiterChoice: "+fmt.Sprintf("%#v", this.RateLimiterChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerUrlRule_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ServerUrlRule_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *ServerUrlRule_SpecificDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ServerUrlRule_SpecificDomain{` +
		`SpecificDomain:` + fmt.Sprintf("%#v", this.SpecificDomain) + `}`}, ", ")
	return s
}
func (this *ServerUrlRule_InlineRateLimiter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ServerUrlRule_InlineRateLimiter{` +
		`InlineRateLimiter:` + fmt.Sprintf("%#v", this.InlineRateLimiter) + `}`}, ", ")
	return s
}
func (this *ServerUrlRule_RefRateLimiter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ServerUrlRule_RefRateLimiter{` +
		`RefRateLimiter:` + fmt.Sprintf("%#v", this.RefRateLimiter) + `}`}, ", ")
	return s
}
func (this *CustomIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_waf.CustomIpAllowedList{")
	if this.RateLimiterAllowedPrefixes != nil {
		s = append(s, "RateLimiterAllowedPrefixes: "+fmt.Sprintf("%#v", this.RateLimiterAllowedPrefixes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APISpecificationSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&common_waf.APISpecificationSettings{")
	if this.ApiDefinition != nil {
		s = append(s, "ApiDefinition: "+fmt.Sprintf("%#v", this.ApiDefinition)+",\n")
	}
	if this.ValidationTargetChoice != nil {
		s = append(s, "ValidationTargetChoice: "+fmt.Sprintf("%#v", this.ValidationTargetChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APISpecificationSettings_ValidationDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APISpecificationSettings_ValidationDisabled{` +
		`ValidationDisabled:` + fmt.Sprintf("%#v", this.ValidationDisabled) + `}`}, ", ")
	return s
}
func (this *APISpecificationSettings_ValidationAllSpecEndpoints) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APISpecificationSettings_ValidationAllSpecEndpoints{` +
		`ValidationAllSpecEndpoints:` + fmt.Sprintf("%#v", this.ValidationAllSpecEndpoints) + `}`}, ", ")
	return s
}
func (this *APISpecificationSettings_ValidationCustomList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APISpecificationSettings_ValidationCustomList{` +
		`ValidationCustomList:` + fmt.Sprintf("%#v", this.ValidationCustomList) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationAllSpecEndpointsSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&common_waf.OpenApiValidationAllSpecEndpointsSettings{")
	if this.ValidationMode != nil {
		s = append(s, "ValidationMode: "+fmt.Sprintf("%#v", this.ValidationMode)+",\n")
	}
	if this.FallThroughMode != nil {
		s = append(s, "FallThroughMode: "+fmt.Sprintf("%#v", this.FallThroughMode)+",\n")
	}
	if this.OversizedBodyChoice != nil {
		s = append(s, "OversizedBodyChoice: "+fmt.Sprintf("%#v", this.OversizedBodyChoice)+",\n")
	}
	if this.Settings != nil {
		s = append(s, "Settings: "+fmt.Sprintf("%#v", this.Settings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation{` +
		`OversizedBodySkipValidation:` + fmt.Sprintf("%#v", this.OversizedBodySkipValidation) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation{` +
		`OversizedBodyFailValidation:` + fmt.Sprintf("%#v", this.OversizedBodyFailValidation) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationMode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&common_waf.OpenApiValidationMode{")
	if this.ValidationModeChoice != nil {
		s = append(s, "ValidationModeChoice: "+fmt.Sprintf("%#v", this.ValidationModeChoice)+",\n")
	}
	if this.ResponseValidationModeChoice != nil {
		s = append(s, "ResponseValidationModeChoice: "+fmt.Sprintf("%#v", this.ResponseValidationModeChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenApiValidationMode_ValidationModeActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationMode_ValidationModeActive{` +
		`ValidationModeActive:` + fmt.Sprintf("%#v", this.ValidationModeActive) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationMode_SkipValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationMode_SkipValidation{` +
		`SkipValidation:` + fmt.Sprintf("%#v", this.SkipValidation) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationMode_SkipResponseValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationMode_SkipResponseValidation{` +
		`SkipResponseValidation:` + fmt.Sprintf("%#v", this.SkipResponseValidation) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationMode_ResponseValidationModeActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationMode_ResponseValidationModeActive{` +
		`ResponseValidationModeActive:` + fmt.Sprintf("%#v", this.ResponseValidationModeActive) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationModeActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&common_waf.OpenApiValidationModeActive{")
	if this.ValidationEnforcementType != nil {
		s = append(s, "ValidationEnforcementType: "+fmt.Sprintf("%#v", this.ValidationEnforcementType)+",\n")
	}
	s = append(s, "RequestValidationProperties: "+fmt.Sprintf("%#v", this.RequestValidationProperties)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenApiValidationModeActive_EnforcementReport) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationModeActive_EnforcementReport{` +
		`EnforcementReport:` + fmt.Sprintf("%#v", this.EnforcementReport) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationModeActive_EnforcementBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationModeActive_EnforcementBlock{` +
		`EnforcementBlock:` + fmt.Sprintf("%#v", this.EnforcementBlock) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationModeActiveResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&common_waf.OpenApiValidationModeActiveResponse{")
	if this.ValidationEnforcementType != nil {
		s = append(s, "ValidationEnforcementType: "+fmt.Sprintf("%#v", this.ValidationEnforcementType)+",\n")
	}
	s = append(s, "ResponseValidationProperties: "+fmt.Sprintf("%#v", this.ResponseValidationProperties)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenApiValidationModeActiveResponse_EnforcementReport) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationModeActiveResponse_EnforcementReport{` +
		`EnforcementReport:` + fmt.Sprintf("%#v", this.EnforcementReport) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationModeActiveResponse_EnforcementBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationModeActiveResponse_EnforcementBlock{` +
		`EnforcementBlock:` + fmt.Sprintf("%#v", this.EnforcementBlock) + `}`}, ", ")
	return s
}
func (this *OpenApiFallThroughMode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common_waf.OpenApiFallThroughMode{")
	if this.FallThroughModeChoice != nil {
		s = append(s, "FallThroughModeChoice: "+fmt.Sprintf("%#v", this.FallThroughModeChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenApiFallThroughMode_FallThroughModeAllow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiFallThroughMode_FallThroughModeAllow{` +
		`FallThroughModeAllow:` + fmt.Sprintf("%#v", this.FallThroughModeAllow) + `}`}, ", ")
	return s
}
func (this *OpenApiFallThroughMode_FallThroughModeCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiFallThroughMode_FallThroughModeCustom{` +
		`FallThroughModeCustom:` + fmt.Sprintf("%#v", this.FallThroughModeCustom) + `}`}, ", ")
	return s
}
func (this *CustomFallThroughMode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_waf.CustomFallThroughMode{")
	if this.OpenApiValidationRules != nil {
		s = append(s, "OpenApiValidationRules: "+fmt.Sprintf("%#v", this.OpenApiValidationRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FallThroughRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&common_waf.FallThroughRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.ActionChoice != nil {
		s = append(s, "ActionChoice: "+fmt.Sprintf("%#v", this.ActionChoice)+",\n")
	}
	if this.ConditionTypeChoice != nil {
		s = append(s, "ConditionTypeChoice: "+fmt.Sprintf("%#v", this.ConditionTypeChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FallThroughRule_ActionSkip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.FallThroughRule_ActionSkip{` +
		`ActionSkip:` + fmt.Sprintf("%#v", this.ActionSkip) + `}`}, ", ")
	return s
}
func (this *FallThroughRule_ActionReport) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.FallThroughRule_ActionReport{` +
		`ActionReport:` + fmt.Sprintf("%#v", this.ActionReport) + `}`}, ", ")
	return s
}
func (this *FallThroughRule_ActionBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.FallThroughRule_ActionBlock{` +
		`ActionBlock:` + fmt.Sprintf("%#v", this.ActionBlock) + `}`}, ", ")
	return s
}
func (this *FallThroughRule_ApiEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.FallThroughRule_ApiEndpoint{` +
		`ApiEndpoint:` + fmt.Sprintf("%#v", this.ApiEndpoint) + `}`}, ", ")
	return s
}
func (this *FallThroughRule_BasePath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.FallThroughRule_BasePath{` +
		`BasePath:` + fmt.Sprintf("%#v", this.BasePath) + `}`}, ", ")
	return s
}
func (this *FallThroughRule_ApiGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.FallThroughRule_ApiGroup{` +
		`ApiGroup:` + fmt.Sprintf("%#v", this.ApiGroup) + `}`}, ", ")
	return s
}
func (this *ValidateApiBySpecRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&common_waf.ValidateApiBySpecRule{")
	if this.OpenApiValidationRules != nil {
		s = append(s, "OpenApiValidationRules: "+fmt.Sprintf("%#v", this.OpenApiValidationRules)+",\n")
	}
	if this.FallThroughMode != nil {
		s = append(s, "FallThroughMode: "+fmt.Sprintf("%#v", this.FallThroughMode)+",\n")
	}
	if this.OversizedBodyChoice != nil {
		s = append(s, "OversizedBodyChoice: "+fmt.Sprintf("%#v", this.OversizedBodyChoice)+",\n")
	}
	if this.Settings != nil {
		s = append(s, "Settings: "+fmt.Sprintf("%#v", this.Settings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidateApiBySpecRule_OversizedBodySkipValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ValidateApiBySpecRule_OversizedBodySkipValidation{` +
		`OversizedBodySkipValidation:` + fmt.Sprintf("%#v", this.OversizedBodySkipValidation) + `}`}, ", ")
	return s
}
func (this *ValidateApiBySpecRule_OversizedBodyFailValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ValidateApiBySpecRule_OversizedBodyFailValidation{` +
		`OversizedBodyFailValidation:` + fmt.Sprintf("%#v", this.OversizedBodyFailValidation) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&common_waf.OpenApiValidationRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.ValidationMode != nil {
		s = append(s, "ValidationMode: "+fmt.Sprintf("%#v", this.ValidationMode)+",\n")
	}
	if this.DomainChoice != nil {
		s = append(s, "DomainChoice: "+fmt.Sprintf("%#v", this.DomainChoice)+",\n")
	}
	if this.ConditionTypeChoice != nil {
		s = append(s, "ConditionTypeChoice: "+fmt.Sprintf("%#v", this.ConditionTypeChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenApiValidationRule_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationRule_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationRule_SpecificDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationRule_SpecificDomain{` +
		`SpecificDomain:` + fmt.Sprintf("%#v", this.SpecificDomain) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationRule_ApiEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationRule_ApiEndpoint{` +
		`ApiEndpoint:` + fmt.Sprintf("%#v", this.ApiEndpoint) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationRule_BasePath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationRule_BasePath{` +
		`BasePath:` + fmt.Sprintf("%#v", this.BasePath) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationRule_ApiGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationRule_ApiGroup{` +
		`ApiGroup:` + fmt.Sprintf("%#v", this.ApiGroup) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationCommonSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&common_waf.OpenApiValidationCommonSettings{")
	if this.OversizedBodyChoice != nil {
		s = append(s, "OversizedBodyChoice: "+fmt.Sprintf("%#v", this.OversizedBodyChoice)+",\n")
	}
	if this.PropertyValidationSettingsChoice != nil {
		s = append(s, "PropertyValidationSettingsChoice: "+fmt.Sprintf("%#v", this.PropertyValidationSettingsChoice)+",\n")
	}
	if this.FailConfiguration != nil {
		s = append(s, "FailConfiguration: "+fmt.Sprintf("%#v", this.FailConfiguration)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenApiValidationCommonSettings_OversizedBodySkipValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationCommonSettings_OversizedBodySkipValidation{` +
		`OversizedBodySkipValidation:` + fmt.Sprintf("%#v", this.OversizedBodySkipValidation) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationCommonSettings_OversizedBodyFailValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationCommonSettings_OversizedBodyFailValidation{` +
		`OversizedBodyFailValidation:` + fmt.Sprintf("%#v", this.OversizedBodyFailValidation) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationCommonSettings_PropertyValidationSettingsDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{` +
		`PropertyValidationSettingsDefault:` + fmt.Sprintf("%#v", this.PropertyValidationSettingsDefault) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationCommonSettings_PropertyValidationSettingsCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{` +
		`PropertyValidationSettingsCustom:` + fmt.Sprintf("%#v", this.PropertyValidationSettingsCustom) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationCommonSettings_FailOpen) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationCommonSettings_FailOpen{` +
		`FailOpen:` + fmt.Sprintf("%#v", this.FailOpen) + `}`}, ", ")
	return s
}
func (this *OpenApiValidationCommonSettings_FailClose) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.OpenApiValidationCommonSettings_FailClose{` +
		`FailClose:` + fmt.Sprintf("%#v", this.FailClose) + `}`}, ", ")
	return s
}
func (this *ValidationPropertySetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common_waf.ValidationPropertySetting{")
	if this.QueryParameters != nil {
		s = append(s, "QueryParameters: "+fmt.Sprintf("%#v", this.QueryParameters)+",\n")
	}
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidationSettingForQueryParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common_waf.ValidationSettingForQueryParameters{")
	if this.AdditionalParametersChoice != nil {
		s = append(s, "AdditionalParametersChoice: "+fmt.Sprintf("%#v", this.AdditionalParametersChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidationSettingForQueryParameters_AllowAdditionalParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ValidationSettingForQueryParameters_AllowAdditionalParameters{` +
		`AllowAdditionalParameters:` + fmt.Sprintf("%#v", this.AllowAdditionalParameters) + `}`}, ", ")
	return s
}
func (this *ValidationSettingForQueryParameters_DisallowAdditionalParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ValidationSettingForQueryParameters_DisallowAdditionalParameters{` +
		`DisallowAdditionalParameters:` + fmt.Sprintf("%#v", this.DisallowAdditionalParameters) + `}`}, ", ")
	return s
}
func (this *ValidationSettingForHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common_waf.ValidationSettingForHeaders{")
	if this.AdditionalHeadersChoice != nil {
		s = append(s, "AdditionalHeadersChoice: "+fmt.Sprintf("%#v", this.AdditionalHeadersChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidationSettingForHeaders_AllowAdditionalHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ValidationSettingForHeaders_AllowAdditionalHeaders{` +
		`AllowAdditionalHeaders:` + fmt.Sprintf("%#v", this.AllowAdditionalHeaders) + `}`}, ", ")
	return s
}
func (this *ValidationSettingForHeaders_DisallowAdditionalHeaders) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ValidationSettingForHeaders_DisallowAdditionalHeaders{` +
		`DisallowAdditionalHeaders:` + fmt.Sprintf("%#v", this.DisallowAdditionalHeaders) + `}`}, ", ")
	return s
}
func (this *ApiDefinitionList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_waf.ApiDefinitionList{")
	if this.ApiDefinitions != nil {
		s = append(s, "ApiDefinitions: "+fmt.Sprintf("%#v", this.ApiDefinitions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIProtectionRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common_waf.APIProtectionRules{")
	if this.ApiEndpointRules != nil {
		s = append(s, "ApiEndpointRules: "+fmt.Sprintf("%#v", this.ApiEndpointRules)+",\n")
	}
	if this.ApiGroupsRules != nil {
		s = append(s, "ApiGroupsRules: "+fmt.Sprintf("%#v", this.ApiGroupsRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEndpointProtectionRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&common_waf.APIEndpointProtectionRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.DomainChoice != nil {
		s = append(s, "DomainChoice: "+fmt.Sprintf("%#v", this.DomainChoice)+",\n")
	}
	s = append(s, "ApiEndpointPath: "+fmt.Sprintf("%#v", this.ApiEndpointPath)+",\n")
	if this.ApiEndpointMethod != nil {
		s = append(s, "ApiEndpointMethod: "+fmt.Sprintf("%#v", this.ApiEndpointMethod)+",\n")
	}
	if this.RequestMatcher != nil {
		s = append(s, "RequestMatcher: "+fmt.Sprintf("%#v", this.RequestMatcher)+",\n")
	}
	if this.ClientMatcher != nil {
		s = append(s, "ClientMatcher: "+fmt.Sprintf("%#v", this.ClientMatcher)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIEndpointProtectionRule_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APIEndpointProtectionRule_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *APIEndpointProtectionRule_SpecificDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APIEndpointProtectionRule_SpecificDomain{` +
		`SpecificDomain:` + fmt.Sprintf("%#v", this.SpecificDomain) + `}`}, ", ")
	return s
}
func (this *APIGroupProtectionRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&common_waf.APIGroupProtectionRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.DomainChoice != nil {
		s = append(s, "DomainChoice: "+fmt.Sprintf("%#v", this.DomainChoice)+",\n")
	}
	s = append(s, "BasePath: "+fmt.Sprintf("%#v", this.BasePath)+",\n")
	s = append(s, "ApiGroup: "+fmt.Sprintf("%#v", this.ApiGroup)+",\n")
	if this.RequestMatcher != nil {
		s = append(s, "RequestMatcher: "+fmt.Sprintf("%#v", this.RequestMatcher)+",\n")
	}
	if this.ClientMatcher != nil {
		s = append(s, "ClientMatcher: "+fmt.Sprintf("%#v", this.ClientMatcher)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIGroupProtectionRule_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APIGroupProtectionRule_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *APIGroupProtectionRule_SpecificDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APIGroupProtectionRule_SpecificDomain{` +
		`SpecificDomain:` + fmt.Sprintf("%#v", this.SpecificDomain) + `}`}, ", ")
	return s
}
func (this *APIProtectionRuleAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common_waf.APIProtectionRuleAction{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIProtectionRuleAction_Allow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APIProtectionRuleAction_Allow{` +
		`Allow:` + fmt.Sprintf("%#v", this.Allow) + `}`}, ", ")
	return s
}
func (this *APIProtectionRuleAction_Deny) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.APIProtectionRuleAction_Deny{` +
		`Deny:` + fmt.Sprintf("%#v", this.Deny) + `}`}, ", ")
	return s
}
func (this *JWTValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&common_waf.JWTValidation{")
	if this.Target != nil {
		s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	}
	if this.TokenLocation != nil {
		s = append(s, "TokenLocation: "+fmt.Sprintf("%#v", this.TokenLocation)+",\n")
	}
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.JwksConfiguration != nil {
		s = append(s, "JwksConfiguration: "+fmt.Sprintf("%#v", this.JwksConfiguration)+",\n")
	}
	if this.ReservedClaims != nil {
		s = append(s, "ReservedClaims: "+fmt.Sprintf("%#v", this.ReservedClaims)+",\n")
	}
	if this.MandatoryClaims != nil {
		s = append(s, "MandatoryClaims: "+fmt.Sprintf("%#v", this.MandatoryClaims)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JWTValidation_AuthServerUri) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.JWTValidation_AuthServerUri{` +
		`AuthServerUri:` + fmt.Sprintf("%#v", this.AuthServerUri) + `}`}, ", ")
	return s
}
func (this *JWTValidation_Jwks) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.JWTValidation_Jwks{` +
		`Jwks:` + fmt.Sprintf("%#v", this.Jwks) + `}`}, ", ")
	return s
}
func (this *JWTValidation_JwksConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.JWTValidation_JwksConfig{` +
		`JwksConfig:` + fmt.Sprintf("%#v", this.JwksConfig) + `}`}, ", ")
	return s
}
func (this *MandatoryClaims) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_waf.MandatoryClaims{")
	s = append(s, "ClaimNames: "+fmt.Sprintf("%#v", this.ClaimNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Target) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&common_waf.Target{")
	if this.Target != nil {
		s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Target_AllEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.Target_AllEndpoint{` +
		`AllEndpoint:` + fmt.Sprintf("%#v", this.AllEndpoint) + `}`}, ", ")
	return s
}
func (this *Target_ApiGroups) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.Target_ApiGroups{` +
		`ApiGroups:` + fmt.Sprintf("%#v", this.ApiGroups) + `}`}, ", ")
	return s
}
func (this *Target_BasePaths) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.Target_BasePaths{` +
		`BasePaths:` + fmt.Sprintf("%#v", this.BasePaths) + `}`}, ", ")
	return s
}
func (this *JWKS) goString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_waf.JWKS{")
	s = append(s, "Cleartext: "+fmt.Sprintf("%#v", this.Cleartext)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TokenLocation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&common_waf.TokenLocation{")
	if this.TokenLocation != nil {
		s = append(s, "TokenLocation: "+fmt.Sprintf("%#v", this.TokenLocation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TokenLocation_BearerToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.TokenLocation_BearerToken{` +
		`BearerToken:` + fmt.Sprintf("%#v", this.BearerToken) + `}`}, ", ")
	return s
}
func (this *TokenLocation_Cookie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.TokenLocation_Cookie{` +
		`Cookie:` + fmt.Sprintf("%#v", this.Cookie) + `}`}, ", ")
	return s
}
func (this *TokenLocation_Header) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.TokenLocation_Header{` +
		`Header:` + fmt.Sprintf("%#v", this.Header) + `}`}, ", ")
	return s
}
func (this *TokenLocation_QueryParam) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.TokenLocation_QueryParam{` +
		`QueryParam:` + fmt.Sprintf("%#v", this.QueryParam) + `}`}, ", ")
	return s
}
func (this *ReservedClaims) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&common_waf.ReservedClaims{")
	if this.IssuerValidation != nil {
		s = append(s, "IssuerValidation: "+fmt.Sprintf("%#v", this.IssuerValidation)+",\n")
	}
	if this.AudienceValidation != nil {
		s = append(s, "AudienceValidation: "+fmt.Sprintf("%#v", this.AudienceValidation)+",\n")
	}
	if this.ValidatePeriod != nil {
		s = append(s, "ValidatePeriod: "+fmt.Sprintf("%#v", this.ValidatePeriod)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReservedClaims_IssuerDisable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ReservedClaims_IssuerDisable{` +
		`IssuerDisable:` + fmt.Sprintf("%#v", this.IssuerDisable) + `}`}, ", ")
	return s
}
func (this *ReservedClaims_Issuer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ReservedClaims_Issuer{` +
		`Issuer:` + fmt.Sprintf("%#v", this.Issuer) + `}`}, ", ")
	return s
}
func (this *ReservedClaims_AudienceDisable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ReservedClaims_AudienceDisable{` +
		`AudienceDisable:` + fmt.Sprintf("%#v", this.AudienceDisable) + `}`}, ", ")
	return s
}
func (this *ReservedClaims_Audience) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ReservedClaims_Audience{` +
		`Audience:` + fmt.Sprintf("%#v", this.Audience) + `}`}, ", ")
	return s
}
func (this *ReservedClaims_ValidatePeriodDisable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ReservedClaims_ValidatePeriodDisable{` +
		`ValidatePeriodDisable:` + fmt.Sprintf("%#v", this.ValidatePeriodDisable) + `}`}, ", ")
	return s
}
func (this *ReservedClaims_ValidatePeriodEnable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ReservedClaims_ValidatePeriodEnable{` +
		`ValidatePeriodEnable:` + fmt.Sprintf("%#v", this.ValidatePeriodEnable) + `}`}, ", ")
	return s
}
func (this *Audiences) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_waf.Audiences{")
	s = append(s, "Audiences: "+fmt.Sprintf("%#v", this.Audiences)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BasePathsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_waf.BasePathsType{")
	s = append(s, "BasePaths: "+fmt.Sprintf("%#v", this.BasePaths)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiDiscoverySetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&common_waf.ApiDiscoverySetting{")
	if this.LearnFromRedirectTraffic != nil {
		s = append(s, "LearnFromRedirectTraffic: "+fmt.Sprintf("%#v", this.LearnFromRedirectTraffic)+",\n")
	}
	if this.SensitiveDataDetectionRules != nil {
		s = append(s, "SensitiveDataDetectionRules: "+fmt.Sprintf("%#v", this.SensitiveDataDetectionRules)+",\n")
	}
	if this.DiscoveredApiSettings != nil {
		s = append(s, "DiscoveredApiSettings: "+fmt.Sprintf("%#v", this.DiscoveredApiSettings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiDiscoverySetting_DisableLearnFromRedirectTraffic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ApiDiscoverySetting_DisableLearnFromRedirectTraffic{` +
		`DisableLearnFromRedirectTraffic:` + fmt.Sprintf("%#v", this.DisableLearnFromRedirectTraffic) + `}`}, ", ")
	return s
}
func (this *ApiDiscoverySetting_EnableLearnFromRedirectTraffic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_waf.ApiDiscoverySetting_EnableLearnFromRedirectTraffic{` +
		`EnableLearnFromRedirectTraffic:` + fmt.Sprintf("%#v", this.EnableLearnFromRedirectTraffic) + `}`}, ", ")
	return s
}
func valueToGoStringCommonWafTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ServicePolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicePolicyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicePolicyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for iNdEx := len(m.Policies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Policies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EnableChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CaptchaChallengeParametersChoice != nil {
		{
			size := m.CaptchaChallengeParametersChoice.Size()
			i -= size
			if _, err := m.CaptchaChallengeParametersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.JsChallengeParametersChoice != nil {
		{
			size := m.JsChallengeParametersChoice.Size()
			i -= size
			if _, err := m.JsChallengeParametersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaliciousUserMitigationChoice != nil {
		{
			size := m.MaliciousUserMitigationChoice.Size()
			i -= size
			if _, err := m.MaliciousUserMitigationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EnableChallenge_DefaultMitigationSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableChallenge_DefaultMitigationSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultMitigationSettings != nil {
		{
			size, err := m.DefaultMitigationSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *EnableChallenge_MaliciousUserMitigation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableChallenge_MaliciousUserMitigation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaliciousUserMitigation != nil {
		{
			size, err := m.MaliciousUserMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *EnableChallenge_DefaultJsChallengeParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableChallenge_DefaultJsChallengeParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultJsChallengeParameters != nil {
		{
			size, err := m.DefaultJsChallengeParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *EnableChallenge_JsChallengeParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableChallenge_JsChallengeParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallengeParameters != nil {
		{
			size, err := m.JsChallengeParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *EnableChallenge_DefaultCaptchaChallengeParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableChallenge_DefaultCaptchaChallengeParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultCaptchaChallengeParameters != nil {
		{
			size, err := m.DefaultCaptchaChallengeParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *EnableChallenge_CaptchaChallengeParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableChallenge_CaptchaChallengeParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallengeParameters != nil {
		{
			size, err := m.CaptchaChallengeParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RuleList != nil {
		{
			size, err := m.RuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.ChallengeChoice != nil {
		{
			size := m.ChallengeChoice.Size()
			i -= size
			if _, err := m.ChallengeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaliciousUserMitigationChoice != nil {
		{
			size := m.MaliciousUserMitigationChoice.Size()
			i -= size
			if _, err := m.MaliciousUserMitigationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TemporaryBlockingParametersChoice != nil {
		{
			size := m.TemporaryBlockingParametersChoice.Size()
			i -= size
			if _, err := m.TemporaryBlockingParametersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CaptchaChallengeParametersChoice != nil {
		{
			size := m.CaptchaChallengeParametersChoice.Size()
			i -= size
			if _, err := m.CaptchaChallengeParametersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.JsChallengeParametersChoice != nil {
		{
			size := m.JsChallengeParametersChoice.Size()
			i -= size
			if _, err := m.JsChallengeParametersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PolicyBasedChallenge_DefaultJsChallengeParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_DefaultJsChallengeParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultJsChallengeParameters != nil {
		{
			size, err := m.DefaultJsChallengeParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_JsChallengeParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_JsChallengeParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallengeParameters != nil {
		{
			size, err := m.JsChallengeParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultCaptchaChallengeParameters != nil {
		{
			size, err := m.DefaultCaptchaChallengeParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_CaptchaChallengeParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_CaptchaChallengeParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallengeParameters != nil {
		{
			size, err := m.CaptchaChallengeParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultTemporaryBlockingParameters != nil {
		{
			size, err := m.DefaultTemporaryBlockingParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_TemporaryUserBlocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_TemporaryUserBlocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TemporaryUserBlocking != nil {
		{
			size, err := m.TemporaryUserBlocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_DefaultMitigationSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_DefaultMitigationSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultMitigationSettings != nil {
		{
			size, err := m.DefaultMitigationSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_MaliciousUserMitigation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_MaliciousUserMitigation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaliciousUserMitigation != nil {
		{
			size, err := m.MaliciousUserMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_AlwaysEnableJsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_AlwaysEnableJsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AlwaysEnableJsChallenge != nil {
		{
			size, err := m.AlwaysEnableJsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AlwaysEnableCaptchaChallenge != nil {
		{
			size, err := m.AlwaysEnableCaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ChallengeRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeRuleList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeRuleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeRuleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *IPThreatCategoryListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPThreatCategoryListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPThreatCategoryListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IpThreatCategories) > 0 {
		dAtA22 := make([]byte, len(m.IpThreatCategories)*10)
		var j21 int
		for _, num := range m.IpThreatCategories {
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		i -= j21
		copy(dAtA[i:], dAtA22[:j21])
		i = encodeVarintCommonWafTypes(dAtA, i, uint64(j21))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HttpHeaderMatcherList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpHeaderMatcherList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpHeaderMatcherList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleClientSrcRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleClientSrcRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleClientSrcRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientSourceChoice != nil {
		{
			size := m.ClientSourceChoice.Size()
			i -= size
			if _, err := m.ClientSourceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Actions) > 0 {
		dAtA24 := make([]byte, len(m.Actions)*10)
		var j23 int
		for _, num := range m.Actions {
			for num >= 1<<7 {
				dAtA24[j23] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j23++
			}
			dAtA24[j23] = uint8(num)
			j23++
		}
		i -= j23
		copy(dAtA[i:], dAtA24[:j23])
		i = encodeVarintCommonWafTypes(dAtA, i, uint64(j23))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ActionChoice != nil {
		{
			size := m.ActionChoice.Size()
			i -= size
			if _, err := m.ActionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ExpirationTimestamp != nil {
		{
			size, err := m.ExpirationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}

func (m *SimpleClientSrcRule_IpPrefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleClientSrcRule_IpPrefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.IpPrefix)
	copy(dAtA[i:], m.IpPrefix)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.IpPrefix)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *SimpleClientSrcRule_AsNumber) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleClientSrcRule_AsNumber) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(m.AsNumber))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *SimpleClientSrcRule_SkipProcessing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleClientSrcRule_SkipProcessing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SkipProcessing != nil {
		{
			size, err := m.SkipProcessing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *SimpleClientSrcRule_WafSkipProcessing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleClientSrcRule_WafSkipProcessing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WafSkipProcessing != nil {
		{
			size, err := m.WafSkipProcessing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *SimpleClientSrcRule_BotSkipProcessing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleClientSrcRule_BotSkipProcessing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotSkipProcessing != nil {
		{
			size, err := m.BotSkipProcessing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *SimpleClientSrcRule_HttpHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleClientSrcRule_HttpHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpHeader != nil {
		{
			size, err := m.HttpHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *SimpleClientSrcRule_UserIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleClientSrcRule_UserIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.UserIdentifier)
	copy(dAtA[i:], m.UserIdentifier)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.UserIdentifier)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	return len(dAtA) - i, nil
}
func (m *RateLimitConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitConfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitConfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PolicyChoice != nil {
		{
			size := m.PolicyChoice.Size()
			i -= size
			if _, err := m.PolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IpAllowedListChoice != nil {
		{
			size := m.IpAllowedListChoice.Size()
			i -= size
			if _, err := m.IpAllowedListChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RateLimiter != nil {
		{
			size, err := m.RateLimiter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RateLimitConfigType_NoIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitConfigType_NoIpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoIpAllowedList != nil {
		{
			size, err := m.NoIpAllowedList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RateLimitConfigType_IpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitConfigType_IpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpAllowedList != nil {
		{
			size, err := m.IpAllowedList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RateLimitConfigType_CustomIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitConfigType_CustomIpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomIpAllowedList != nil {
		{
			size, err := m.CustomIpAllowedList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RateLimitConfigType_NoPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitConfigType_NoPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoPolicies != nil {
		{
			size, err := m.NoPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *RateLimitConfigType_Policies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitConfigType_Policies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Policies != nil {
		{
			size, err := m.Policies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *APIRateLimitLegacy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIRateLimitLegacy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIRateLimitLegacy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IpAllowedListChoice != nil {
		{
			size := m.IpAllowedListChoice.Size()
			i -= size
			if _, err := m.IpAllowedListChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ApiEndpointRules) > 0 {
		for iNdEx := len(m.ApiEndpointRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiEndpointRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ServerUrlRules) > 0 {
		for iNdEx := len(m.ServerUrlRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServerUrlRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	return len(dAtA) - i, nil
}

func (m *APIRateLimitLegacy_NoIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIRateLimitLegacy_NoIpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoIpAllowedList != nil {
		{
			size, err := m.NoIpAllowedList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *APIRateLimitLegacy_IpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIRateLimitLegacy_IpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpAllowedList != nil {
		{
			size, err := m.IpAllowedList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *APIRateLimitLegacy_CustomIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIRateLimitLegacy_CustomIpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomIpAllowedList != nil {
		{
			size, err := m.CustomIpAllowedList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *APIRateLimitLegacy_BypassRateLimitingRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIRateLimitLegacy_BypassRateLimitingRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BypassRateLimitingRules != nil {
		{
			size, err := m.BypassRateLimitingRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *APIRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiEndpointRules) > 0 {
		for iNdEx := len(m.ApiEndpointRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiEndpointRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ServerUrlRules) > 0 {
		for iNdEx := len(m.ServerUrlRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServerUrlRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.IpAllowedListChoice != nil {
		{
			size := m.IpAllowedListChoice.Size()
			i -= size
			if _, err := m.IpAllowedListChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *APIRateLimit_NoIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIRateLimit_NoIpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoIpAllowedList != nil {
		{
			size, err := m.NoIpAllowedList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *APIRateLimit_IpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIRateLimit_IpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpAllowedList != nil {
		{
			size, err := m.IpAllowedList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *APIRateLimit_CustomIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIRateLimit_CustomIpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomIpAllowedList != nil {
		{
			size, err := m.CustomIpAllowedList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *APIRateLimit_BypassRateLimitingRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIRateLimit_BypassRateLimitingRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BypassRateLimitingRules != nil {
		{
			size, err := m.BypassRateLimitingRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *BypassRateLimitingRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BypassRateLimitingRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BypassRateLimitingRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientMatcher != nil {
		{
			size, err := m.ClientMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RequestMatcher != nil {
		{
			size, err := m.RequestMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.DestinationType != nil {
		{
			size := m.DestinationType.Size()
			i -= size
			if _, err := m.DestinationType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DomainChoice != nil {
		{
			size := m.DomainChoice.Size()
			i -= size
			if _, err := m.DomainChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BypassRateLimitingRule_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BypassRateLimitingRule_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BypassRateLimitingRule_SpecificDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BypassRateLimitingRule_SpecificDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SpecificDomain)
	copy(dAtA[i:], m.SpecificDomain)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.SpecificDomain)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *BypassRateLimitingRule_AnyUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BypassRateLimitingRule_AnyUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyUrl != nil {
		{
			size, err := m.AnyUrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *BypassRateLimitingRule_BasePath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BypassRateLimitingRule_BasePath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.BasePath)
	copy(dAtA[i:], m.BasePath)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.BasePath)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *BypassRateLimitingRule_ApiEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BypassRateLimitingRule_ApiEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiEndpoint != nil {
		{
			size, err := m.ApiEndpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *BypassRateLimitingRule_ApiGroups) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BypassRateLimitingRule_ApiGroups) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiGroups != nil {
		{
			size, err := m.ApiGroups.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *APIGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIGroups) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIGroups) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiGroups) > 0 {
		for iNdEx := len(m.ApiGroups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ApiGroups[iNdEx])
			copy(dAtA[i:], m.ApiGroups[iNdEx])
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.ApiGroups[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApiEndpointDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiEndpointDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Methods) > 0 {
		dAtA52 := make([]byte, len(m.Methods)*10)
		var j51 int
		for _, num := range m.Methods {
			for num >= 1<<7 {
				dAtA52[j51] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j51++
			}
			dAtA52[j51] = uint8(num)
			j51++
		}
		i -= j51
		copy(dAtA[i:], dAtA52[:j51])
		i = encodeVarintCommonWafTypes(dAtA, i, uint64(j51))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BypassRateLimitingRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BypassRateLimitingRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BypassRateLimitingRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BypassRateLimitingRules) > 0 {
		for iNdEx := len(m.BypassRateLimitingRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BypassRateLimitingRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApiEndpointRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiEndpointRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientMatcher != nil {
		{
			size, err := m.ClientMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.RequestMatcher != nil {
		{
			size, err := m.RequestMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RateLimiterChoice != nil {
		{
			size := m.RateLimiterChoice.Size()
			i -= size
			if _, err := m.RateLimiterChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiEndpointMethod != nil {
		{
			size, err := m.ApiEndpointMethod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.ApiEndpointPath) > 0 {
		i -= len(m.ApiEndpointPath)
		copy(dAtA[i:], m.ApiEndpointPath)
		i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.ApiEndpointPath)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BasePath) > 0 {
		i -= len(m.BasePath)
		copy(dAtA[i:], m.BasePath)
		i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.BasePath)))
		i--
		dAtA[i] = 0x22
	}
	if m.DomainChoice != nil {
		{
			size := m.DomainChoice.Size()
			i -= size
			if _, err := m.DomainChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApiEndpointRule_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointRule_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ApiEndpointRule_SpecificDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointRule_SpecificDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SpecificDomain)
	copy(dAtA[i:], m.SpecificDomain)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.SpecificDomain)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *ApiEndpointRule_InlineRateLimiter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointRule_InlineRateLimiter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InlineRateLimiter != nil {
		{
			size, err := m.InlineRateLimiter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ApiEndpointRule_RefRateLimiter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointRule_RefRateLimiter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RefRateLimiter != nil {
		{
			size, err := m.RefRateLimiter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *InlineRateLimiter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InlineRateLimiter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InlineRateLimiter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CountByChoice != nil {
		{
			size := m.CountByChoice.Size()
			i -= size
			if _, err := m.CountByChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Unit != 0 {
		i = encodeVarintCommonWafTypes(dAtA, i, uint64(m.Unit))
		i--
		dAtA[i] = 0x10
	}
	if m.Threshold != 0 {
		i = encodeVarintCommonWafTypes(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InlineRateLimiter_UseHttpLbUserId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InlineRateLimiter_UseHttpLbUserId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseHttpLbUserId != nil {
		{
			size, err := m.UseHttpLbUserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *InlineRateLimiter_RefUserId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InlineRateLimiter_RefUserId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RefUserId != nil {
		{
			size, err := m.RefUserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ServerUrlRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerUrlRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerUrlRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestMatcher != nil {
		{
			size, err := m.RequestMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ApiGroup) > 0 {
		i -= len(m.ApiGroup)
		copy(dAtA[i:], m.ApiGroup)
		i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.ApiGroup)))
		i--
		dAtA[i] = 0x52
	}
	if m.ClientMatcher != nil {
		{
			size, err := m.ClientMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.RateLimiterChoice != nil {
		{
			size := m.RateLimiterChoice.Size()
			i -= size
			if _, err := m.RateLimiterChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.BasePath) > 0 {
		i -= len(m.BasePath)
		copy(dAtA[i:], m.BasePath)
		i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.BasePath)))
		i--
		dAtA[i] = 0x22
	}
	if m.DomainChoice != nil {
		{
			size := m.DomainChoice.Size()
			i -= size
			if _, err := m.DomainChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServerUrlRule_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerUrlRule_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ServerUrlRule_SpecificDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerUrlRule_SpecificDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SpecificDomain)
	copy(dAtA[i:], m.SpecificDomain)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.SpecificDomain)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *ServerUrlRule_InlineRateLimiter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerUrlRule_InlineRateLimiter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InlineRateLimiter != nil {
		{
			size, err := m.InlineRateLimiter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ServerUrlRule_RefRateLimiter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerUrlRule_RefRateLimiter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RefRateLimiter != nil {
		{
			size, err := m.RefRateLimiter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CustomIpAllowedList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomIpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for iNdEx := len(m.RateLimiterAllowedPrefixes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateLimiterAllowedPrefixes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	return len(dAtA) - i, nil
}

func (m *APISpecificationSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APISpecificationSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APISpecificationSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidationTargetChoice != nil {
		{
			size := m.ValidationTargetChoice.Size()
			i -= size
			if _, err := m.ValidationTargetChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APISpecificationSettings_ValidationDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APISpecificationSettings_ValidationDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValidationDisabled != nil {
		{
			size, err := m.ValidationDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *APISpecificationSettings_ValidationAllSpecEndpoints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APISpecificationSettings_ValidationAllSpecEndpoints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValidationAllSpecEndpoints != nil {
		{
			size, err := m.ValidationAllSpecEndpoints.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *APISpecificationSettings_ValidationCustomList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APISpecificationSettings_ValidationCustomList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValidationCustomList != nil {
		{
			size, err := m.ValidationCustomList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationAllSpecEndpointsSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenApiValidationAllSpecEndpointsSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationAllSpecEndpointsSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OversizedBodyChoice != nil {
		{
			size := m.OversizedBodyChoice.Size()
			i -= size
			if _, err := m.OversizedBodyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FallThroughMode != nil {
		{
			size, err := m.FallThroughMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ValidationMode != nil {
		{
			size, err := m.ValidationMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OversizedBodySkipValidation != nil {
		{
			size, err := m.OversizedBodySkipValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OversizedBodyFailValidation != nil {
		{
			size, err := m.OversizedBodyFailValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenApiValidationMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResponseValidationModeChoice != nil {
		{
			size := m.ResponseValidationModeChoice.Size()
			i -= size
			if _, err := m.ResponseValidationModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ValidationModeChoice != nil {
		{
			size := m.ValidationModeChoice.Size()
			i -= size
			if _, err := m.ValidationModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OpenApiValidationMode_ValidationModeActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationMode_ValidationModeActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValidationModeActive != nil {
		{
			size, err := m.ValidationModeActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationMode_SkipValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationMode_SkipValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SkipValidation != nil {
		{
			size, err := m.SkipValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationMode_SkipResponseValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationMode_SkipResponseValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SkipResponseValidation != nil {
		{
			size, err := m.SkipResponseValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationMode_ResponseValidationModeActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationMode_ResponseValidationModeActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResponseValidationModeActive != nil {
		{
			size, err := m.ResponseValidationModeActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationModeActive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenApiValidationModeActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationModeActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestValidationProperties) > 0 {
		dAtA80 := make([]byte, len(m.RequestValidationProperties)*10)
		var j79 int
		for _, num := range m.RequestValidationProperties {
			for num >= 1<<7 {
				dAtA80[j79] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j79++
			}
			dAtA80[j79] = uint8(num)
			j79++
		}
		i -= j79
		copy(dAtA[i:], dAtA80[:j79])
		i = encodeVarintCommonWafTypes(dAtA, i, uint64(j79))
		i--
		dAtA[i] = 0x22
	}
	if m.ValidationEnforcementType != nil {
		{
			size := m.ValidationEnforcementType.Size()
			i -= size
			if _, err := m.ValidationEnforcementType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OpenApiValidationModeActive_EnforcementReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationModeActive_EnforcementReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnforcementReport != nil {
		{
			size, err := m.EnforcementReport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationModeActive_EnforcementBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationModeActive_EnforcementBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnforcementBlock != nil {
		{
			size, err := m.EnforcementBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationModeActiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenApiValidationModeActiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationModeActiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResponseValidationProperties) > 0 {
		dAtA84 := make([]byte, len(m.ResponseValidationProperties)*10)
		var j83 int
		for _, num := range m.ResponseValidationProperties {
			for num >= 1<<7 {
				dAtA84[j83] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j83++
			}
			dAtA84[j83] = uint8(num)
			j83++
		}
		i -= j83
		copy(dAtA[i:], dAtA84[:j83])
		i = encodeVarintCommonWafTypes(dAtA, i, uint64(j83))
		i--
		dAtA[i] = 0x22
	}
	if m.ValidationEnforcementType != nil {
		{
			size := m.ValidationEnforcementType.Size()
			i -= size
			if _, err := m.ValidationEnforcementType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OpenApiValidationModeActiveResponse_EnforcementReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationModeActiveResponse_EnforcementReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnforcementReport != nil {
		{
			size, err := m.EnforcementReport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationModeActiveResponse_EnforcementBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationModeActiveResponse_EnforcementBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnforcementBlock != nil {
		{
			size, err := m.EnforcementBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiFallThroughMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenApiFallThroughMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiFallThroughMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FallThroughModeChoice != nil {
		{
			size := m.FallThroughModeChoice.Size()
			i -= size
			if _, err := m.FallThroughModeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OpenApiFallThroughMode_FallThroughModeAllow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiFallThroughMode_FallThroughModeAllow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FallThroughModeAllow != nil {
		{
			size, err := m.FallThroughModeAllow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiFallThroughMode_FallThroughModeCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiFallThroughMode_FallThroughModeCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FallThroughModeCustom != nil {
		{
			size, err := m.FallThroughModeCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CustomFallThroughMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomFallThroughMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomFallThroughMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OpenApiValidationRules) > 0 {
		for iNdEx := len(m.OpenApiValidationRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OpenApiValidationRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FallThroughRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FallThroughRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FallThroughRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConditionTypeChoice != nil {
		{
			size := m.ConditionTypeChoice.Size()
			i -= size
			if _, err := m.ConditionTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ActionChoice != nil {
		{
			size := m.ActionChoice.Size()
			i -= size
			if _, err := m.ActionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FallThroughRule_ActionSkip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FallThroughRule_ActionSkip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionSkip != nil {
		{
			size, err := m.ActionSkip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *FallThroughRule_ActionReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FallThroughRule_ActionReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionReport != nil {
		{
			size, err := m.ActionReport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *FallThroughRule_ActionBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FallThroughRule_ActionBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActionBlock != nil {
		{
			size, err := m.ActionBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *FallThroughRule_BasePath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FallThroughRule_BasePath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.BasePath)
	copy(dAtA[i:], m.BasePath)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.BasePath)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *FallThroughRule_ApiGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FallThroughRule_ApiGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ApiGroup)
	copy(dAtA[i:], m.ApiGroup)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.ApiGroup)))
	i--
	dAtA[i] = 0x4a
	return len(dAtA) - i, nil
}
func (m *FallThroughRule_ApiEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FallThroughRule_ApiEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiEndpoint != nil {
		{
			size, err := m.ApiEndpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ValidateApiBySpecRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateApiBySpecRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateApiBySpecRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OversizedBodyChoice != nil {
		{
			size := m.OversizedBodyChoice.Size()
			i -= size
			if _, err := m.OversizedBodyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FallThroughMode != nil {
		{
			size, err := m.FallThroughMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OpenApiValidationRules) > 0 {
		for iNdEx := len(m.OpenApiValidationRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OpenApiValidationRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidateApiBySpecRule_OversizedBodySkipValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateApiBySpecRule_OversizedBodySkipValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OversizedBodySkipValidation != nil {
		{
			size, err := m.OversizedBodySkipValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ValidateApiBySpecRule_OversizedBodyFailValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateApiBySpecRule_OversizedBodyFailValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OversizedBodyFailValidation != nil {
		{
			size, err := m.OversizedBodyFailValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenApiValidationRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConditionTypeChoice != nil {
		{
			size := m.ConditionTypeChoice.Size()
			i -= size
			if _, err := m.ConditionTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DomainChoice != nil {
		{
			size := m.DomainChoice.Size()
			i -= size
			if _, err := m.DomainChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ValidationMode != nil {
		{
			size, err := m.ValidationMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OpenApiValidationRule_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationRule_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationRule_SpecificDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationRule_SpecificDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SpecificDomain)
	copy(dAtA[i:], m.SpecificDomain)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.SpecificDomain)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationRule_BasePath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationRule_BasePath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.BasePath)
	copy(dAtA[i:], m.BasePath)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.BasePath)))
	i--
	dAtA[i] = 0x5a
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationRule_ApiGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationRule_ApiGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ApiGroup)
	copy(dAtA[i:], m.ApiGroup)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.ApiGroup)))
	i--
	dAtA[i] = 0x62
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationRule_ApiEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationRule_ApiEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiEndpoint != nil {
		{
			size, err := m.ApiEndpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationCommonSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenApiValidationCommonSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationCommonSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FailConfiguration != nil {
		{
			size := m.FailConfiguration.Size()
			i -= size
			if _, err := m.FailConfiguration.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PropertyValidationSettingsChoice != nil {
		{
			size := m.PropertyValidationSettingsChoice.Size()
			i -= size
			if _, err := m.PropertyValidationSettingsChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OversizedBodyChoice != nil {
		{
			size := m.OversizedBodyChoice.Size()
			i -= size
			if _, err := m.OversizedBodyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OpenApiValidationCommonSettings_OversizedBodySkipValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationCommonSettings_OversizedBodySkipValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OversizedBodySkipValidation != nil {
		{
			size, err := m.OversizedBodySkipValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationCommonSettings_OversizedBodyFailValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationCommonSettings_OversizedBodyFailValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OversizedBodyFailValidation != nil {
		{
			size, err := m.OversizedBodyFailValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationCommonSettings_PropertyValidationSettingsDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationCommonSettings_PropertyValidationSettingsDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PropertyValidationSettingsDefault != nil {
		{
			size, err := m.PropertyValidationSettingsDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationCommonSettings_PropertyValidationSettingsCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationCommonSettings_PropertyValidationSettingsCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PropertyValidationSettingsCustom != nil {
		{
			size, err := m.PropertyValidationSettingsCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationCommonSettings_FailOpen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationCommonSettings_FailOpen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FailOpen != nil {
		{
			size, err := m.FailOpen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *OpenApiValidationCommonSettings_FailClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenApiValidationCommonSettings_FailClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FailClose != nil {
		{
			size, err := m.FailClose.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ValidationPropertySetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationPropertySetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationPropertySetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Headers != nil {
		{
			size, err := m.Headers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.QueryParameters != nil {
		{
			size, err := m.QueryParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidationSettingForQueryParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationSettingForQueryParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationSettingForQueryParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdditionalParametersChoice != nil {
		{
			size := m.AdditionalParametersChoice.Size()
			i -= size
			if _, err := m.AdditionalParametersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidationSettingForQueryParameters_AllowAdditionalParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationSettingForQueryParameters_AllowAdditionalParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAdditionalParameters != nil {
		{
			size, err := m.AllowAdditionalParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ValidationSettingForQueryParameters_DisallowAdditionalParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationSettingForQueryParameters_DisallowAdditionalParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisallowAdditionalParameters != nil {
		{
			size, err := m.DisallowAdditionalParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ValidationSettingForHeaders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationSettingForHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationSettingForHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdditionalHeadersChoice != nil {
		{
			size := m.AdditionalHeadersChoice.Size()
			i -= size
			if _, err := m.AdditionalHeadersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidationSettingForHeaders_AllowAdditionalHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationSettingForHeaders_AllowAdditionalHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAdditionalHeaders != nil {
		{
			size, err := m.AllowAdditionalHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ValidationSettingForHeaders_DisallowAdditionalHeaders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidationSettingForHeaders_DisallowAdditionalHeaders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisallowAdditionalHeaders != nil {
		{
			size, err := m.DisallowAdditionalHeaders.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ApiDefinitionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiDefinitionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiDefinitionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiDefinitions) > 0 {
		for iNdEx := len(m.ApiDefinitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiDefinitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *APIProtectionRules) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIProtectionRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIProtectionRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiGroupsRules) > 0 {
		for iNdEx := len(m.ApiGroupsRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiGroupsRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ApiEndpointRules) > 0 {
		for iNdEx := len(m.ApiEndpointRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiEndpointRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *APIEndpointProtectionRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIEndpointProtectionRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEndpointProtectionRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DomainChoice != nil {
		{
			size := m.DomainChoice.Size()
			i -= size
			if _, err := m.DomainChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClientMatcher != nil {
		{
			size, err := m.ClientMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.RequestMatcher != nil {
		{
			size, err := m.RequestMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ApiEndpointMethod != nil {
		{
			size, err := m.ApiEndpointMethod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ApiEndpointPath) > 0 {
		i -= len(m.ApiEndpointPath)
		copy(dAtA[i:], m.ApiEndpointPath)
		i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.ApiEndpointPath)))
		i--
		dAtA[i] = 0x22
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIEndpointProtectionRule_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEndpointProtectionRule_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *APIEndpointProtectionRule_SpecificDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIEndpointProtectionRule_SpecificDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SpecificDomain)
	copy(dAtA[i:], m.SpecificDomain)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.SpecificDomain)))
	i--
	dAtA[i] = 0x52
	return len(dAtA) - i, nil
}
func (m *APIGroupProtectionRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIGroupProtectionRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIGroupProtectionRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BasePath) > 0 {
		i -= len(m.BasePath)
		copy(dAtA[i:], m.BasePath)
		i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.BasePath)))
		i--
		dAtA[i] = 0x52
	}
	if m.DomainChoice != nil {
		{
			size := m.DomainChoice.Size()
			i -= size
			if _, err := m.DomainChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClientMatcher != nil {
		{
			size, err := m.ClientMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.RequestMatcher != nil {
		{
			size, err := m.RequestMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ApiGroup) > 0 {
		i -= len(m.ApiGroup)
		copy(dAtA[i:], m.ApiGroup)
		i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.ApiGroup)))
		i--
		dAtA[i] = 0x22
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APIGroupProtectionRule_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIGroupProtectionRule_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *APIGroupProtectionRule_SpecificDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIGroupProtectionRule_SpecificDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SpecificDomain)
	copy(dAtA[i:], m.SpecificDomain)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.SpecificDomain)))
	i--
	dAtA[i] = 0x4a
	return len(dAtA) - i, nil
}
func (m *APIProtectionRuleAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIProtectionRuleAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIProtectionRuleAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		{
			size := m.Action.Size()
			i -= size
			if _, err := m.Action.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *APIProtectionRuleAction_Allow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIProtectionRuleAction_Allow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Allow != nil {
		{
			size, err := m.Allow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *APIProtectionRuleAction_Deny) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIProtectionRuleAction_Deny) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Deny != nil {
		{
			size, err := m.Deny.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *JWTValidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JWTValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JWTValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MandatoryClaims != nil {
		{
			size, err := m.MandatoryClaims.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.JwksConfiguration != nil {
		{
			size := m.JwksConfiguration.Size()
			i -= size
			if _, err := m.JwksConfiguration.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ReservedClaims != nil {
		{
			size, err := m.ReservedClaims.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TokenLocation != nil {
		{
			size, err := m.TokenLocation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JWTValidation_AuthServerUri) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JWTValidation_AuthServerUri) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AuthServerUri)
	copy(dAtA[i:], m.AuthServerUri)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.AuthServerUri)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *JWTValidation_Jwks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JWTValidation_Jwks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Jwks)
	copy(dAtA[i:], m.Jwks)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.Jwks)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *JWTValidation_JwksConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JWTValidation_JwksConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JwksConfig != nil {
		{
			size, err := m.JwksConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *MandatoryClaims) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MandatoryClaims) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MandatoryClaims) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimNames) > 0 {
		for iNdEx := len(m.ClaimNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClaimNames[iNdEx])
			copy(dAtA[i:], m.ClaimNames[iNdEx])
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.ClaimNames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Target) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Target) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Target) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Target != nil {
		{
			size := m.Target.Size()
			i -= size
			if _, err := m.Target.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Target_AllEndpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Target_AllEndpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllEndpoint != nil {
		{
			size, err := m.AllEndpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Target_ApiGroups) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Target_ApiGroups) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiGroups != nil {
		{
			size, err := m.ApiGroups.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Target_BasePaths) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Target_BasePaths) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BasePaths != nil {
		{
			size, err := m.BasePaths.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *JWKS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JWKS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JWKS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cleartext) > 0 {
		i -= len(m.Cleartext)
		copy(dAtA[i:], m.Cleartext)
		i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.Cleartext)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *TokenLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenLocation != nil {
		{
			size := m.TokenLocation.Size()
			i -= size
			if _, err := m.TokenLocation.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TokenLocation_BearerToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenLocation_BearerToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BearerToken != nil {
		{
			size, err := m.BearerToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *TokenLocation_Cookie) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenLocation_Cookie) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Cookie)
	copy(dAtA[i:], m.Cookie)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.Cookie)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *TokenLocation_Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenLocation_Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Header)
	copy(dAtA[i:], m.Header)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.Header)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *TokenLocation_QueryParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenLocation_QueryParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.QueryParam)
	copy(dAtA[i:], m.QueryParam)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.QueryParam)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *ReservedClaims) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReservedClaims) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReservedClaims) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidatePeriod != nil {
		{
			size := m.ValidatePeriod.Size()
			i -= size
			if _, err := m.ValidatePeriod.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AudienceValidation != nil {
		{
			size := m.AudienceValidation.Size()
			i -= size
			if _, err := m.AudienceValidation.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IssuerValidation != nil {
		{
			size := m.IssuerValidation.Size()
			i -= size
			if _, err := m.IssuerValidation.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReservedClaims_IssuerDisable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReservedClaims_IssuerDisable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IssuerDisable != nil {
		{
			size, err := m.IssuerDisable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReservedClaims_Issuer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReservedClaims_Issuer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Issuer)
	copy(dAtA[i:], m.Issuer)
	i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.Issuer)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *ReservedClaims_AudienceDisable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReservedClaims_AudienceDisable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AudienceDisable != nil {
		{
			size, err := m.AudienceDisable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReservedClaims_Audience) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReservedClaims_Audience) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Audience != nil {
		{
			size, err := m.Audience.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReservedClaims_ValidatePeriodDisable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReservedClaims_ValidatePeriodDisable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValidatePeriodDisable != nil {
		{
			size, err := m.ValidatePeriodDisable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ReservedClaims_ValidatePeriodEnable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReservedClaims_ValidatePeriodEnable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValidatePeriodEnable != nil {
		{
			size, err := m.ValidatePeriodEnable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Audiences) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Audiences) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Audiences) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Audiences) > 0 {
		for iNdEx := len(m.Audiences) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Audiences[iNdEx])
			copy(dAtA[i:], m.Audiences[iNdEx])
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.Audiences[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BasePathsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasePathsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasePathsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BasePaths) > 0 {
		for iNdEx := len(m.BasePaths) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BasePaths[iNdEx])
			copy(dAtA[i:], m.BasePaths[iNdEx])
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(len(m.BasePaths[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApiDiscoverySetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiDiscoverySetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiDiscoverySetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DiscoveredApiSettings != nil {
		{
			size, err := m.DiscoveredApiSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SensitiveDataDetectionRules != nil {
		{
			size, err := m.SensitiveDataDetectionRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.LearnFromRedirectTraffic != nil {
		{
			size := m.LearnFromRedirectTraffic.Size()
			i -= size
			if _, err := m.LearnFromRedirectTraffic.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApiDiscoverySetting_DisableLearnFromRedirectTraffic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiDiscoverySetting_DisableLearnFromRedirectTraffic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableLearnFromRedirectTraffic != nil {
		{
			size, err := m.DisableLearnFromRedirectTraffic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ApiDiscoverySetting_EnableLearnFromRedirectTraffic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiDiscoverySetting_EnableLearnFromRedirectTraffic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableLearnFromRedirectTraffic != nil {
		{
			size, err := m.EnableLearnFromRedirectTraffic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommonWafTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func encodeVarintCommonWafTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommonWafTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServicePolicyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	return n
}

func (m *EnableChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaliciousUserMitigationChoice != nil {
		n += m.MaliciousUserMitigationChoice.Size()
	}
	if m.JsChallengeParametersChoice != nil {
		n += m.JsChallengeParametersChoice.Size()
	}
	if m.CaptchaChallengeParametersChoice != nil {
		n += m.CaptchaChallengeParametersChoice.Size()
	}
	return n
}

func (m *EnableChallenge_DefaultMitigationSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultMitigationSettings != nil {
		l = m.DefaultMitigationSettings.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *EnableChallenge_MaliciousUserMitigation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *EnableChallenge_DefaultJsChallengeParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultJsChallengeParameters != nil {
		l = m.DefaultJsChallengeParameters.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *EnableChallenge_JsChallengeParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallengeParameters != nil {
		l = m.JsChallengeParameters.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *EnableChallenge_DefaultCaptchaChallengeParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultCaptchaChallengeParameters != nil {
		l = m.DefaultCaptchaChallengeParameters.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *EnableChallenge_CaptchaChallengeParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallengeParameters != nil {
		l = m.CaptchaChallengeParameters.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallengeParametersChoice != nil {
		n += m.JsChallengeParametersChoice.Size()
	}
	if m.CaptchaChallengeParametersChoice != nil {
		n += m.CaptchaChallengeParametersChoice.Size()
	}
	if m.TemporaryBlockingParametersChoice != nil {
		n += m.TemporaryBlockingParametersChoice.Size()
	}
	if m.MaliciousUserMitigationChoice != nil {
		n += m.MaliciousUserMitigationChoice.Size()
	}
	if m.ChallengeChoice != nil {
		n += m.ChallengeChoice.Size()
	}
	if m.RuleList != nil {
		l = m.RuleList.Size()
		n += 2 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}

func (m *PolicyBasedChallenge_DefaultJsChallengeParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultJsChallengeParameters != nil {
		l = m.DefaultJsChallengeParameters.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_JsChallengeParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallengeParameters != nil {
		l = m.JsChallengeParameters.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultCaptchaChallengeParameters != nil {
		l = m.DefaultCaptchaChallengeParameters.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_CaptchaChallengeParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallengeParameters != nil {
		l = m.CaptchaChallengeParameters.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultTemporaryBlockingParameters != nil {
		l = m.DefaultTemporaryBlockingParameters.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_TemporaryUserBlocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TemporaryUserBlocking != nil {
		l = m.TemporaryUserBlocking.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_DefaultMitigationSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultMitigationSettings != nil {
		l = m.DefaultMitigationSettings.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_MaliciousUserMitigation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_AlwaysEnableJsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AlwaysEnableJsChallenge != nil {
		l = m.AlwaysEnableJsChallenge.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AlwaysEnableCaptchaChallenge != nil {
		l = m.AlwaysEnableCaptchaChallenge.Size()
		n += 2 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ChallengeRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}

func (m *ChallengeRuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	return n
}

func (m *IPThreatCategoryListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IpThreatCategories) > 0 {
		l = 0
		for _, e := range m.IpThreatCategories {
			l += sovCommonWafTypes(uint64(e))
		}
		n += 1 + sovCommonWafTypes(uint64(l)) + l
	}
	return n
}

func (m *HttpHeaderMatcherList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	return n
}

func (m *SimpleClientSrcRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientSourceChoice != nil {
		n += m.ClientSourceChoice.Size()
	}
	if m.ExpirationTimestamp != nil {
		l = m.ExpirationTimestamp.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.ActionChoice != nil {
		n += m.ActionChoice.Size()
	}
	if len(m.Actions) > 0 {
		l = 0
		for _, e := range m.Actions {
			l += sovCommonWafTypes(uint64(e))
		}
		n += 2 + sovCommonWafTypes(uint64(l)) + l
	}
	return n
}

func (m *SimpleClientSrcRule_IpPrefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IpPrefix)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *SimpleClientSrcRule_AsNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCommonWafTypes(uint64(m.AsNumber))
	return n
}
func (m *SimpleClientSrcRule_SkipProcessing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkipProcessing != nil {
		l = m.SkipProcessing.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *SimpleClientSrcRule_WafSkipProcessing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafSkipProcessing != nil {
		l = m.WafSkipProcessing.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *SimpleClientSrcRule_BotSkipProcessing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotSkipProcessing != nil {
		l = m.BotSkipProcessing.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *SimpleClientSrcRule_HttpHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpHeader != nil {
		l = m.HttpHeader.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *SimpleClientSrcRule_UserIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserIdentifier)
	n += 2 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *RateLimitConfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimiter != nil {
		l = m.RateLimiter.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.IpAllowedListChoice != nil {
		n += m.IpAllowedListChoice.Size()
	}
	if m.PolicyChoice != nil {
		n += m.PolicyChoice.Size()
	}
	return n
}

func (m *RateLimitConfigType_NoIpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoIpAllowedList != nil {
		l = m.NoIpAllowedList.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *RateLimitConfigType_IpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpAllowedList != nil {
		l = m.IpAllowedList.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *RateLimitConfigType_CustomIpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomIpAllowedList != nil {
		l = m.CustomIpAllowedList.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *RateLimitConfigType_NoPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoPolicies != nil {
		l = m.NoPolicies.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *RateLimitConfigType_Policies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policies != nil {
		l = m.Policies.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *APIRateLimitLegacy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpAllowedListChoice != nil {
		n += m.IpAllowedListChoice.Size()
	}
	if len(m.ServerUrlRules) > 0 {
		for _, e := range m.ServerUrlRules {
			l = e.Size()
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	if len(m.ApiEndpointRules) > 0 {
		for _, e := range m.ApiEndpointRules {
			l = e.Size()
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	return n
}

func (m *APIRateLimitLegacy_NoIpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoIpAllowedList != nil {
		l = m.NoIpAllowedList.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *APIRateLimitLegacy_IpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpAllowedList != nil {
		l = m.IpAllowedList.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *APIRateLimitLegacy_CustomIpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomIpAllowedList != nil {
		l = m.CustomIpAllowedList.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *APIRateLimitLegacy_BypassRateLimitingRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BypassRateLimitingRules != nil {
		l = m.BypassRateLimitingRules.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *APIRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpAllowedListChoice != nil {
		n += m.IpAllowedListChoice.Size()
	}
	if len(m.ServerUrlRules) > 0 {
		for _, e := range m.ServerUrlRules {
			l = e.Size()
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	if len(m.ApiEndpointRules) > 0 {
		for _, e := range m.ApiEndpointRules {
			l = e.Size()
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	return n
}

func (m *APIRateLimit_NoIpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoIpAllowedList != nil {
		l = m.NoIpAllowedList.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *APIRateLimit_IpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpAllowedList != nil {
		l = m.IpAllowedList.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *APIRateLimit_CustomIpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomIpAllowedList != nil {
		l = m.CustomIpAllowedList.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *APIRateLimit_BypassRateLimitingRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BypassRateLimitingRules != nil {
		l = m.BypassRateLimitingRules.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *BypassRateLimitingRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainChoice != nil {
		n += m.DomainChoice.Size()
	}
	if m.DestinationType != nil {
		n += m.DestinationType.Size()
	}
	if m.RequestMatcher != nil {
		l = m.RequestMatcher.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.ClientMatcher != nil {
		l = m.ClientMatcher.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}

func (m *BypassRateLimitingRule_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *BypassRateLimitingRule_SpecificDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificDomain)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *BypassRateLimitingRule_AnyUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyUrl != nil {
		l = m.AnyUrl.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *BypassRateLimitingRule_BasePath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BasePath)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *BypassRateLimitingRule_ApiEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiEndpoint != nil {
		l = m.ApiEndpoint.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *BypassRateLimitingRule_ApiGroups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiGroups != nil {
		l = m.ApiGroups.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *APIGroups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiGroups) > 0 {
		for _, s := range m.ApiGroups {
			l = len(s)
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	return n
}

func (m *ApiEndpointDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if len(m.Methods) > 0 {
		l = 0
		for _, e := range m.Methods {
			l += sovCommonWafTypes(uint64(e))
		}
		n += 1 + sovCommonWafTypes(uint64(l)) + l
	}
	return n
}

func (m *BypassRateLimitingRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BypassRateLimitingRules) > 0 {
		for _, e := range m.BypassRateLimitingRules {
			l = e.Size()
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	return n
}

func (m *ApiEndpointRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainChoice != nil {
		n += m.DomainChoice.Size()
	}
	l = len(m.BasePath)
	if l > 0 {
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	l = len(m.ApiEndpointPath)
	if l > 0 {
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.ApiEndpointMethod != nil {
		l = m.ApiEndpointMethod.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.RateLimiterChoice != nil {
		n += m.RateLimiterChoice.Size()
	}
	if m.RequestMatcher != nil {
		l = m.RequestMatcher.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.ClientMatcher != nil {
		l = m.ClientMatcher.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}

func (m *ApiEndpointRule_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ApiEndpointRule_SpecificDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificDomain)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *ApiEndpointRule_InlineRateLimiter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InlineRateLimiter != nil {
		l = m.InlineRateLimiter.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ApiEndpointRule_RefRateLimiter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RefRateLimiter != nil {
		l = m.RefRateLimiter.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *InlineRateLimiter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Threshold != 0 {
		n += 1 + sovCommonWafTypes(uint64(m.Threshold))
	}
	if m.Unit != 0 {
		n += 1 + sovCommonWafTypes(uint64(m.Unit))
	}
	if m.CountByChoice != nil {
		n += m.CountByChoice.Size()
	}
	return n
}

func (m *InlineRateLimiter_UseHttpLbUserId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseHttpLbUserId != nil {
		l = m.UseHttpLbUserId.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *InlineRateLimiter_RefUserId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RefUserId != nil {
		l = m.RefUserId.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ServerUrlRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainChoice != nil {
		n += m.DomainChoice.Size()
	}
	l = len(m.BasePath)
	if l > 0 {
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.RateLimiterChoice != nil {
		n += m.RateLimiterChoice.Size()
	}
	if m.ClientMatcher != nil {
		l = m.ClientMatcher.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	l = len(m.ApiGroup)
	if l > 0 {
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.RequestMatcher != nil {
		l = m.RequestMatcher.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}

func (m *ServerUrlRule_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ServerUrlRule_SpecificDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificDomain)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *ServerUrlRule_InlineRateLimiter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InlineRateLimiter != nil {
		l = m.InlineRateLimiter.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ServerUrlRule_RefRateLimiter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RefRateLimiter != nil {
		l = m.RefRateLimiter.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *CustomIpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, e := range m.RateLimiterAllowedPrefixes {
			l = e.Size()
			n += 2 + l + sovCommonWafTypes(uint64(l))
		}
	}
	return n
}

func (m *APISpecificationSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.ValidationTargetChoice != nil {
		n += m.ValidationTargetChoice.Size()
	}
	return n
}

func (m *APISpecificationSettings_ValidationDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidationDisabled != nil {
		l = m.ValidationDisabled.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *APISpecificationSettings_ValidationAllSpecEndpoints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidationAllSpecEndpoints != nil {
		l = m.ValidationAllSpecEndpoints.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *APISpecificationSettings_ValidationCustomList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidationCustomList != nil {
		l = m.ValidationCustomList.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationAllSpecEndpointsSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidationMode != nil {
		l = m.ValidationMode.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.FallThroughMode != nil {
		l = m.FallThroughMode.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.OversizedBodyChoice != nil {
		n += m.OversizedBodyChoice.Size()
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}

func (m *OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OversizedBodySkipValidation != nil {
		l = m.OversizedBodySkipValidation.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OversizedBodyFailValidation != nil {
		l = m.OversizedBodyFailValidation.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidationModeChoice != nil {
		n += m.ValidationModeChoice.Size()
	}
	if m.ResponseValidationModeChoice != nil {
		n += m.ResponseValidationModeChoice.Size()
	}
	return n
}

func (m *OpenApiValidationMode_ValidationModeActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidationModeActive != nil {
		l = m.ValidationModeActive.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationMode_SkipValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkipValidation != nil {
		l = m.SkipValidation.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationMode_SkipResponseValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkipResponseValidation != nil {
		l = m.SkipResponseValidation.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationMode_ResponseValidationModeActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResponseValidationModeActive != nil {
		l = m.ResponseValidationModeActive.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationModeActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidationEnforcementType != nil {
		n += m.ValidationEnforcementType.Size()
	}
	if len(m.RequestValidationProperties) > 0 {
		l = 0
		for _, e := range m.RequestValidationProperties {
			l += sovCommonWafTypes(uint64(e))
		}
		n += 1 + sovCommonWafTypes(uint64(l)) + l
	}
	return n
}

func (m *OpenApiValidationModeActive_EnforcementReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforcementReport != nil {
		l = m.EnforcementReport.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationModeActive_EnforcementBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforcementBlock != nil {
		l = m.EnforcementBlock.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationModeActiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidationEnforcementType != nil {
		n += m.ValidationEnforcementType.Size()
	}
	if len(m.ResponseValidationProperties) > 0 {
		l = 0
		for _, e := range m.ResponseValidationProperties {
			l += sovCommonWafTypes(uint64(e))
		}
		n += 1 + sovCommonWafTypes(uint64(l)) + l
	}
	return n
}

func (m *OpenApiValidationModeActiveResponse_EnforcementReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforcementReport != nil {
		l = m.EnforcementReport.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationModeActiveResponse_EnforcementBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforcementBlock != nil {
		l = m.EnforcementBlock.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiFallThroughMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FallThroughModeChoice != nil {
		n += m.FallThroughModeChoice.Size()
	}
	return n
}

func (m *OpenApiFallThroughMode_FallThroughModeAllow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FallThroughModeAllow != nil {
		l = m.FallThroughModeAllow.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiFallThroughMode_FallThroughModeCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FallThroughModeCustom != nil {
		l = m.FallThroughModeCustom.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *CustomFallThroughMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OpenApiValidationRules) > 0 {
		for _, e := range m.OpenApiValidationRules {
			l = e.Size()
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	return n
}

func (m *FallThroughRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.ActionChoice != nil {
		n += m.ActionChoice.Size()
	}
	if m.ConditionTypeChoice != nil {
		n += m.ConditionTypeChoice.Size()
	}
	return n
}

func (m *FallThroughRule_ActionSkip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionSkip != nil {
		l = m.ActionSkip.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *FallThroughRule_ActionReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionReport != nil {
		l = m.ActionReport.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *FallThroughRule_ActionBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionBlock != nil {
		l = m.ActionBlock.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *FallThroughRule_BasePath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BasePath)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *FallThroughRule_ApiGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiGroup)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *FallThroughRule_ApiEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiEndpoint != nil {
		l = m.ApiEndpoint.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ValidateApiBySpecRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OpenApiValidationRules) > 0 {
		for _, e := range m.OpenApiValidationRules {
			l = e.Size()
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	if m.FallThroughMode != nil {
		l = m.FallThroughMode.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.OversizedBodyChoice != nil {
		n += m.OversizedBodyChoice.Size()
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}

func (m *ValidateApiBySpecRule_OversizedBodySkipValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OversizedBodySkipValidation != nil {
		l = m.OversizedBodySkipValidation.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ValidateApiBySpecRule_OversizedBodyFailValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OversizedBodyFailValidation != nil {
		l = m.OversizedBodyFailValidation.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.ValidationMode != nil {
		l = m.ValidationMode.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.DomainChoice != nil {
		n += m.DomainChoice.Size()
	}
	if m.ConditionTypeChoice != nil {
		n += m.ConditionTypeChoice.Size()
	}
	return n
}

func (m *OpenApiValidationRule_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationRule_SpecificDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificDomain)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *OpenApiValidationRule_BasePath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BasePath)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *OpenApiValidationRule_ApiGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiGroup)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *OpenApiValidationRule_ApiEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiEndpoint != nil {
		l = m.ApiEndpoint.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationCommonSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OversizedBodyChoice != nil {
		n += m.OversizedBodyChoice.Size()
	}
	if m.PropertyValidationSettingsChoice != nil {
		n += m.PropertyValidationSettingsChoice.Size()
	}
	if m.FailConfiguration != nil {
		n += m.FailConfiguration.Size()
	}
	return n
}

func (m *OpenApiValidationCommonSettings_OversizedBodySkipValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OversizedBodySkipValidation != nil {
		l = m.OversizedBodySkipValidation.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationCommonSettings_OversizedBodyFailValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OversizedBodyFailValidation != nil {
		l = m.OversizedBodyFailValidation.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationCommonSettings_PropertyValidationSettingsDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PropertyValidationSettingsDefault != nil {
		l = m.PropertyValidationSettingsDefault.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationCommonSettings_PropertyValidationSettingsCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PropertyValidationSettingsCustom != nil {
		l = m.PropertyValidationSettingsCustom.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationCommonSettings_FailOpen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FailOpen != nil {
		l = m.FailOpen.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *OpenApiValidationCommonSettings_FailClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FailClose != nil {
		l = m.FailClose.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ValidationPropertySetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryParameters != nil {
		l = m.QueryParameters.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.Headers != nil {
		l = m.Headers.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}

func (m *ValidationSettingForQueryParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdditionalParametersChoice != nil {
		n += m.AdditionalParametersChoice.Size()
	}
	return n
}

func (m *ValidationSettingForQueryParameters_AllowAdditionalParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAdditionalParameters != nil {
		l = m.AllowAdditionalParameters.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ValidationSettingForQueryParameters_DisallowAdditionalParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisallowAdditionalParameters != nil {
		l = m.DisallowAdditionalParameters.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ValidationSettingForHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdditionalHeadersChoice != nil {
		n += m.AdditionalHeadersChoice.Size()
	}
	return n
}

func (m *ValidationSettingForHeaders_AllowAdditionalHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAdditionalHeaders != nil {
		l = m.AllowAdditionalHeaders.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ValidationSettingForHeaders_DisallowAdditionalHeaders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisallowAdditionalHeaders != nil {
		l = m.DisallowAdditionalHeaders.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ApiDefinitionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiDefinitions) > 0 {
		for _, e := range m.ApiDefinitions {
			l = e.Size()
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	return n
}

func (m *APIProtectionRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiEndpointRules) > 0 {
		for _, e := range m.ApiEndpointRules {
			l = e.Size()
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	if len(m.ApiGroupsRules) > 0 {
		for _, e := range m.ApiGroupsRules {
			l = e.Size()
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	return n
}

func (m *APIEndpointProtectionRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	l = len(m.ApiEndpointPath)
	if l > 0 {
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.ApiEndpointMethod != nil {
		l = m.ApiEndpointMethod.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.RequestMatcher != nil {
		l = m.RequestMatcher.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.ClientMatcher != nil {
		l = m.ClientMatcher.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.DomainChoice != nil {
		n += m.DomainChoice.Size()
	}
	return n
}

func (m *APIEndpointProtectionRule_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *APIEndpointProtectionRule_SpecificDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificDomain)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *APIGroupProtectionRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	l = len(m.ApiGroup)
	if l > 0 {
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.RequestMatcher != nil {
		l = m.RequestMatcher.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.ClientMatcher != nil {
		l = m.ClientMatcher.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.DomainChoice != nil {
		n += m.DomainChoice.Size()
	}
	l = len(m.BasePath)
	if l > 0 {
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}

func (m *APIGroupProtectionRule_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *APIGroupProtectionRule_SpecificDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificDomain)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *APIProtectionRuleAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		n += m.Action.Size()
	}
	return n
}

func (m *APIProtectionRuleAction_Allow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Allow != nil {
		l = m.Allow.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *APIProtectionRuleAction_Deny) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deny != nil {
		l = m.Deny.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *JWTValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.TokenLocation != nil {
		l = m.TokenLocation.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.JwksConfiguration != nil {
		n += m.JwksConfiguration.Size()
	}
	if m.ReservedClaims != nil {
		l = m.ReservedClaims.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.MandatoryClaims != nil {
		l = m.MandatoryClaims.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}

func (m *JWTValidation_AuthServerUri) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthServerUri)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *JWTValidation_Jwks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Jwks)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *JWTValidation_JwksConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JwksConfig != nil {
		l = m.JwksConfig.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *MandatoryClaims) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClaimNames) > 0 {
		for _, s := range m.ClaimNames {
			l = len(s)
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	return n
}

func (m *Target) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Target != nil {
		n += m.Target.Size()
	}
	return n
}

func (m *Target_AllEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllEndpoint != nil {
		l = m.AllEndpoint.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *Target_ApiGroups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiGroups != nil {
		l = m.ApiGroups.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *Target_BasePaths) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasePaths != nil {
		l = m.BasePaths.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *JWKS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cleartext)
	if l > 0 {
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}

func (m *TokenLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenLocation != nil {
		n += m.TokenLocation.Size()
	}
	return n
}

func (m *TokenLocation_BearerToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BearerToken != nil {
		l = m.BearerToken.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *TokenLocation_Cookie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cookie)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *TokenLocation_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Header)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *TokenLocation_QueryParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryParam)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *ReservedClaims) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssuerValidation != nil {
		n += m.IssuerValidation.Size()
	}
	if m.AudienceValidation != nil {
		n += m.AudienceValidation.Size()
	}
	if m.ValidatePeriod != nil {
		n += m.ValidatePeriod.Size()
	}
	return n
}

func (m *ReservedClaims_IssuerDisable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssuerDisable != nil {
		l = m.IssuerDisable.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ReservedClaims_Issuer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Issuer)
	n += 1 + l + sovCommonWafTypes(uint64(l))
	return n
}
func (m *ReservedClaims_AudienceDisable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AudienceDisable != nil {
		l = m.AudienceDisable.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ReservedClaims_Audience) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Audience != nil {
		l = m.Audience.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ReservedClaims_ValidatePeriodDisable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatePeriodDisable != nil {
		l = m.ValidatePeriodDisable.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ReservedClaims_ValidatePeriodEnable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatePeriodEnable != nil {
		l = m.ValidatePeriodEnable.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *Audiences) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Audiences) > 0 {
		for _, s := range m.Audiences {
			l = len(s)
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	return n
}

func (m *BasePathsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BasePaths) > 0 {
		for _, s := range m.BasePaths {
			l = len(s)
			n += 1 + l + sovCommonWafTypes(uint64(l))
		}
	}
	return n
}

func (m *ApiDiscoverySetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LearnFromRedirectTraffic != nil {
		n += m.LearnFromRedirectTraffic.Size()
	}
	if m.SensitiveDataDetectionRules != nil {
		l = m.SensitiveDataDetectionRules.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	if m.DiscoveredApiSettings != nil {
		l = m.DiscoveredApiSettings.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}

func (m *ApiDiscoverySetting_DisableLearnFromRedirectTraffic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableLearnFromRedirectTraffic != nil {
		l = m.DisableLearnFromRedirectTraffic.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}
func (m *ApiDiscoverySetting_EnableLearnFromRedirectTraffic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableLearnFromRedirectTraffic != nil {
		l = m.EnableLearnFromRedirectTraffic.Size()
		n += 1 + l + sovCommonWafTypes(uint64(l))
	}
	return n
}

func sovCommonWafTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommonWafTypes(x uint64) (n int) {
	return sovCommonWafTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ServicePolicyList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPolicies := "[]*ObjectRefType{"
	for _, f := range this.Policies {
		repeatedStringForPolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForPolicies += "}"
	s := strings.Join([]string{`&ServicePolicyList{`,
		`Policies:` + repeatedStringForPolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnableChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableChallenge{`,
		`MaliciousUserMitigationChoice:` + fmt.Sprintf("%v", this.MaliciousUserMitigationChoice) + `,`,
		`JsChallengeParametersChoice:` + fmt.Sprintf("%v", this.JsChallengeParametersChoice) + `,`,
		`CaptchaChallengeParametersChoice:` + fmt.Sprintf("%v", this.CaptchaChallengeParametersChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnableChallenge_DefaultMitigationSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableChallenge_DefaultMitigationSettings{`,
		`DefaultMitigationSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultMitigationSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnableChallenge_MaliciousUserMitigation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableChallenge_MaliciousUserMitigation{`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnableChallenge_DefaultJsChallengeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableChallenge_DefaultJsChallengeParameters{`,
		`DefaultJsChallengeParameters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultJsChallengeParameters), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnableChallenge_JsChallengeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableChallenge_JsChallengeParameters{`,
		`JsChallengeParameters:` + strings.Replace(fmt.Sprintf("%v", this.JsChallengeParameters), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnableChallenge_DefaultCaptchaChallengeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableChallenge_DefaultCaptchaChallengeParameters{`,
		`DefaultCaptchaChallengeParameters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultCaptchaChallengeParameters), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnableChallenge_CaptchaChallengeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableChallenge_CaptchaChallengeParameters{`,
		`CaptchaChallengeParameters:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallengeParameters), "CaptchaChallengeType", "virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge{`,
		`JsChallengeParametersChoice:` + fmt.Sprintf("%v", this.JsChallengeParametersChoice) + `,`,
		`CaptchaChallengeParametersChoice:` + fmt.Sprintf("%v", this.CaptchaChallengeParametersChoice) + `,`,
		`TemporaryBlockingParametersChoice:` + fmt.Sprintf("%v", this.TemporaryBlockingParametersChoice) + `,`,
		`MaliciousUserMitigationChoice:` + fmt.Sprintf("%v", this.MaliciousUserMitigationChoice) + `,`,
		`ChallengeChoice:` + fmt.Sprintf("%v", this.ChallengeChoice) + `,`,
		`RuleList:` + strings.Replace(this.RuleList.String(), "ChallengeRuleList", "ChallengeRuleList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_DefaultJsChallengeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_DefaultJsChallengeParameters{`,
		`DefaultJsChallengeParameters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultJsChallengeParameters), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_JsChallengeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_JsChallengeParameters{`,
		`JsChallengeParameters:` + strings.Replace(fmt.Sprintf("%v", this.JsChallengeParameters), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_DefaultCaptchaChallengeParameters{`,
		`DefaultCaptchaChallengeParameters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultCaptchaChallengeParameters), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_CaptchaChallengeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_CaptchaChallengeParameters{`,
		`CaptchaChallengeParameters:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallengeParameters), "CaptchaChallengeType", "virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_DefaultTemporaryBlockingParameters{`,
		`DefaultTemporaryBlockingParameters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultTemporaryBlockingParameters), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_TemporaryUserBlocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_TemporaryUserBlocking{`,
		`TemporaryUserBlocking:` + strings.Replace(fmt.Sprintf("%v", this.TemporaryUserBlocking), "TemporaryUserBlockingType", "virtual_host.TemporaryUserBlockingType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_DefaultMitigationSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_DefaultMitigationSettings{`,
		`DefaultMitigationSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultMitigationSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_MaliciousUserMitigation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_MaliciousUserMitigation{`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableJsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_AlwaysEnableJsChallenge{`,
		`AlwaysEnableJsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.AlwaysEnableJsChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{`,
		`AlwaysEnableCaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.AlwaysEnableCaptchaChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChallengeRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChallengeRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "ChallengeRuleSpec", "service_policy_rule.ChallengeRuleSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChallengeRuleList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*ChallengeRule{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "ChallengeRule", "ChallengeRule", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&ChallengeRuleList{`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *IPThreatCategoryListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IPThreatCategoryListType{`,
		`IpThreatCategories:` + fmt.Sprintf("%v", this.IpThreatCategories) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpHeaderMatcherList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHeaders := "[]*HeaderMatcherType{"
	for _, f := range this.Headers {
		repeatedStringForHeaders += strings.Replace(fmt.Sprintf("%v", f), "HeaderMatcherType", "schema.HeaderMatcherType", 1) + ","
	}
	repeatedStringForHeaders += "}"
	s := strings.Join([]string{`&HttpHeaderMatcherList{`,
		`Headers:` + repeatedStringForHeaders + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule{`,
		`ClientSourceChoice:` + fmt.Sprintf("%v", this.ClientSourceChoice) + `,`,
		`ExpirationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ExpirationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`ActionChoice:` + fmt.Sprintf("%v", this.ActionChoice) + `,`,
		`Actions:` + fmt.Sprintf("%v", this.Actions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule_IpPrefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule_IpPrefix{`,
		`IpPrefix:` + fmt.Sprintf("%v", this.IpPrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule_AsNumber) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule_AsNumber{`,
		`AsNumber:` + fmt.Sprintf("%v", this.AsNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule_SkipProcessing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule_SkipProcessing{`,
		`SkipProcessing:` + strings.Replace(fmt.Sprintf("%v", this.SkipProcessing), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule_WafSkipProcessing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule_WafSkipProcessing{`,
		`WafSkipProcessing:` + strings.Replace(fmt.Sprintf("%v", this.WafSkipProcessing), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule_BotSkipProcessing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule_BotSkipProcessing{`,
		`BotSkipProcessing:` + strings.Replace(fmt.Sprintf("%v", this.BotSkipProcessing), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule_HttpHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule_HttpHeader{`,
		`HttpHeader:` + strings.Replace(fmt.Sprintf("%v", this.HttpHeader), "HttpHeaderMatcherList", "HttpHeaderMatcherList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule_UserIdentifier) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule_UserIdentifier{`,
		`UserIdentifier:` + fmt.Sprintf("%v", this.UserIdentifier) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType{`,
		`RateLimiter:` + strings.Replace(fmt.Sprintf("%v", this.RateLimiter), "RateLimitValue", "rate_limiter.RateLimitValue", 1) + `,`,
		`IpAllowedListChoice:` + fmt.Sprintf("%v", this.IpAllowedListChoice) + `,`,
		`PolicyChoice:` + fmt.Sprintf("%v", this.PolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_NoIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_NoIpAllowedList{`,
		`NoIpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.NoIpAllowedList), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_IpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_IpAllowedList{`,
		`IpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.IpAllowedList), "PrefixStringListType", "views.PrefixStringListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_CustomIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_CustomIpAllowedList{`,
		`CustomIpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.CustomIpAllowedList), "CustomIpAllowedList", "CustomIpAllowedList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_NoPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_NoPolicies{`,
		`NoPolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoPolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_Policies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_Policies{`,
		`Policies:` + strings.Replace(fmt.Sprintf("%v", this.Policies), "PolicyList", "rate_limiter_policy.PolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIRateLimitLegacy) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServerUrlRules := "[]*ServerUrlRule{"
	for _, f := range this.ServerUrlRules {
		repeatedStringForServerUrlRules += strings.Replace(f.String(), "ServerUrlRule", "ServerUrlRule", 1) + ","
	}
	repeatedStringForServerUrlRules += "}"
	repeatedStringForApiEndpointRules := "[]*ApiEndpointRule{"
	for _, f := range this.ApiEndpointRules {
		repeatedStringForApiEndpointRules += strings.Replace(f.String(), "ApiEndpointRule", "ApiEndpointRule", 1) + ","
	}
	repeatedStringForApiEndpointRules += "}"
	s := strings.Join([]string{`&APIRateLimitLegacy{`,
		`IpAllowedListChoice:` + fmt.Sprintf("%v", this.IpAllowedListChoice) + `,`,
		`ServerUrlRules:` + repeatedStringForServerUrlRules + `,`,
		`ApiEndpointRules:` + repeatedStringForApiEndpointRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIRateLimitLegacy_NoIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIRateLimitLegacy_NoIpAllowedList{`,
		`NoIpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.NoIpAllowedList), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIRateLimitLegacy_IpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIRateLimitLegacy_IpAllowedList{`,
		`IpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.IpAllowedList), "PrefixStringListType", "views.PrefixStringListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIRateLimitLegacy_CustomIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIRateLimitLegacy_CustomIpAllowedList{`,
		`CustomIpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.CustomIpAllowedList), "CustomIpAllowedList", "CustomIpAllowedList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIRateLimitLegacy_BypassRateLimitingRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIRateLimitLegacy_BypassRateLimitingRules{`,
		`BypassRateLimitingRules:` + strings.Replace(fmt.Sprintf("%v", this.BypassRateLimitingRules), "BypassRateLimitingRules", "BypassRateLimitingRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServerUrlRules := "[]*ServerUrlRule{"
	for _, f := range this.ServerUrlRules {
		repeatedStringForServerUrlRules += strings.Replace(f.String(), "ServerUrlRule", "ServerUrlRule", 1) + ","
	}
	repeatedStringForServerUrlRules += "}"
	repeatedStringForApiEndpointRules := "[]*ApiEndpointRule{"
	for _, f := range this.ApiEndpointRules {
		repeatedStringForApiEndpointRules += strings.Replace(f.String(), "ApiEndpointRule", "ApiEndpointRule", 1) + ","
	}
	repeatedStringForApiEndpointRules += "}"
	s := strings.Join([]string{`&APIRateLimit{`,
		`IpAllowedListChoice:` + fmt.Sprintf("%v", this.IpAllowedListChoice) + `,`,
		`ServerUrlRules:` + repeatedStringForServerUrlRules + `,`,
		`ApiEndpointRules:` + repeatedStringForApiEndpointRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIRateLimit_NoIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIRateLimit_NoIpAllowedList{`,
		`NoIpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.NoIpAllowedList), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIRateLimit_IpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIRateLimit_IpAllowedList{`,
		`IpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.IpAllowedList), "PrefixStringListType", "views.PrefixStringListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIRateLimit_CustomIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIRateLimit_CustomIpAllowedList{`,
		`CustomIpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.CustomIpAllowedList), "CustomIpAllowedList", "CustomIpAllowedList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIRateLimit_BypassRateLimitingRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIRateLimit_BypassRateLimitingRules{`,
		`BypassRateLimitingRules:` + strings.Replace(fmt.Sprintf("%v", this.BypassRateLimitingRules), "BypassRateLimitingRules", "BypassRateLimitingRules", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BypassRateLimitingRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BypassRateLimitingRule{`,
		`DomainChoice:` + fmt.Sprintf("%v", this.DomainChoice) + `,`,
		`DestinationType:` + fmt.Sprintf("%v", this.DestinationType) + `,`,
		`RequestMatcher:` + strings.Replace(fmt.Sprintf("%v", this.RequestMatcher), "RequestMatcher", "policy.RequestMatcher", 1) + `,`,
		`ClientMatcher:` + strings.Replace(fmt.Sprintf("%v", this.ClientMatcher), "ClientMatcher", "policy.ClientMatcher", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BypassRateLimitingRule_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BypassRateLimitingRule_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BypassRateLimitingRule_SpecificDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BypassRateLimitingRule_SpecificDomain{`,
		`SpecificDomain:` + fmt.Sprintf("%v", this.SpecificDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BypassRateLimitingRule_AnyUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BypassRateLimitingRule_AnyUrl{`,
		`AnyUrl:` + strings.Replace(fmt.Sprintf("%v", this.AnyUrl), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BypassRateLimitingRule_BasePath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BypassRateLimitingRule_BasePath{`,
		`BasePath:` + fmt.Sprintf("%v", this.BasePath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BypassRateLimitingRule_ApiEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BypassRateLimitingRule_ApiEndpoint{`,
		`ApiEndpoint:` + strings.Replace(fmt.Sprintf("%v", this.ApiEndpoint), "ApiEndpointDetails", "ApiEndpointDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BypassRateLimitingRule_ApiGroups) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BypassRateLimitingRule_ApiGroups{`,
		`ApiGroups:` + strings.Replace(fmt.Sprintf("%v", this.ApiGroups), "APIGroups", "APIGroups", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIGroups) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIGroups{`,
		`ApiGroups:` + fmt.Sprintf("%v", this.ApiGroups) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiEndpointDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointDetails{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Methods:` + fmt.Sprintf("%v", this.Methods) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BypassRateLimitingRules) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBypassRateLimitingRules := "[]*BypassRateLimitingRule{"
	for _, f := range this.BypassRateLimitingRules {
		repeatedStringForBypassRateLimitingRules += strings.Replace(f.String(), "BypassRateLimitingRule", "BypassRateLimitingRule", 1) + ","
	}
	repeatedStringForBypassRateLimitingRules += "}"
	s := strings.Join([]string{`&BypassRateLimitingRules{`,
		`BypassRateLimitingRules:` + repeatedStringForBypassRateLimitingRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiEndpointRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointRule{`,
		`DomainChoice:` + fmt.Sprintf("%v", this.DomainChoice) + `,`,
		`BasePath:` + fmt.Sprintf("%v", this.BasePath) + `,`,
		`ApiEndpointPath:` + fmt.Sprintf("%v", this.ApiEndpointPath) + `,`,
		`ApiEndpointMethod:` + strings.Replace(fmt.Sprintf("%v", this.ApiEndpointMethod), "HttpMethodMatcherType", "policy.HttpMethodMatcherType", 1) + `,`,
		`RateLimiterChoice:` + fmt.Sprintf("%v", this.RateLimiterChoice) + `,`,
		`RequestMatcher:` + strings.Replace(fmt.Sprintf("%v", this.RequestMatcher), "RequestMatcher", "policy.RequestMatcher", 1) + `,`,
		`ClientMatcher:` + strings.Replace(fmt.Sprintf("%v", this.ClientMatcher), "ClientMatcher", "policy.ClientMatcher", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiEndpointRule_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointRule_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiEndpointRule_SpecificDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointRule_SpecificDomain{`,
		`SpecificDomain:` + fmt.Sprintf("%v", this.SpecificDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiEndpointRule_InlineRateLimiter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointRule_InlineRateLimiter{`,
		`InlineRateLimiter:` + strings.Replace(fmt.Sprintf("%v", this.InlineRateLimiter), "InlineRateLimiter", "InlineRateLimiter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiEndpointRule_RefRateLimiter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointRule_RefRateLimiter{`,
		`RefRateLimiter:` + strings.Replace(fmt.Sprintf("%v", this.RefRateLimiter), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InlineRateLimiter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InlineRateLimiter{`,
		`Threshold:` + fmt.Sprintf("%v", this.Threshold) + `,`,
		`Unit:` + fmt.Sprintf("%v", this.Unit) + `,`,
		`CountByChoice:` + fmt.Sprintf("%v", this.CountByChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InlineRateLimiter_UseHttpLbUserId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InlineRateLimiter_UseHttpLbUserId{`,
		`UseHttpLbUserId:` + strings.Replace(fmt.Sprintf("%v", this.UseHttpLbUserId), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InlineRateLimiter_RefUserId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InlineRateLimiter_RefUserId{`,
		`RefUserId:` + strings.Replace(fmt.Sprintf("%v", this.RefUserId), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerUrlRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerUrlRule{`,
		`DomainChoice:` + fmt.Sprintf("%v", this.DomainChoice) + `,`,
		`BasePath:` + fmt.Sprintf("%v", this.BasePath) + `,`,
		`RateLimiterChoice:` + fmt.Sprintf("%v", this.RateLimiterChoice) + `,`,
		`ClientMatcher:` + strings.Replace(fmt.Sprintf("%v", this.ClientMatcher), "ClientMatcher", "policy.ClientMatcher", 1) + `,`,
		`ApiGroup:` + fmt.Sprintf("%v", this.ApiGroup) + `,`,
		`RequestMatcher:` + strings.Replace(fmt.Sprintf("%v", this.RequestMatcher), "RequestMatcher", "policy.RequestMatcher", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerUrlRule_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerUrlRule_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerUrlRule_SpecificDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerUrlRule_SpecificDomain{`,
		`SpecificDomain:` + fmt.Sprintf("%v", this.SpecificDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerUrlRule_InlineRateLimiter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerUrlRule_InlineRateLimiter{`,
		`InlineRateLimiter:` + strings.Replace(fmt.Sprintf("%v", this.InlineRateLimiter), "InlineRateLimiter", "InlineRateLimiter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerUrlRule_RefRateLimiter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerUrlRule_RefRateLimiter{`,
		`RefRateLimiter:` + strings.Replace(fmt.Sprintf("%v", this.RefRateLimiter), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRateLimiterAllowedPrefixes := "[]*ObjectRefType{"
	for _, f := range this.RateLimiterAllowedPrefixes {
		repeatedStringForRateLimiterAllowedPrefixes += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForRateLimiterAllowedPrefixes += "}"
	s := strings.Join([]string{`&CustomIpAllowedList{`,
		`RateLimiterAllowedPrefixes:` + repeatedStringForRateLimiterAllowedPrefixes + `,`,
		`}`,
	}, "")
	return s
}
func (this *APISpecificationSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APISpecificationSettings{`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`ValidationTargetChoice:` + fmt.Sprintf("%v", this.ValidationTargetChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APISpecificationSettings_ValidationDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APISpecificationSettings_ValidationDisabled{`,
		`ValidationDisabled:` + strings.Replace(fmt.Sprintf("%v", this.ValidationDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APISpecificationSettings_ValidationAllSpecEndpoints) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APISpecificationSettings_ValidationAllSpecEndpoints{`,
		`ValidationAllSpecEndpoints:` + strings.Replace(fmt.Sprintf("%v", this.ValidationAllSpecEndpoints), "OpenApiValidationAllSpecEndpointsSettings", "OpenApiValidationAllSpecEndpointsSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APISpecificationSettings_ValidationCustomList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APISpecificationSettings_ValidationCustomList{`,
		`ValidationCustomList:` + strings.Replace(fmt.Sprintf("%v", this.ValidationCustomList), "ValidateApiBySpecRule", "ValidateApiBySpecRule", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationAllSpecEndpointsSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationAllSpecEndpointsSettings{`,
		`ValidationMode:` + strings.Replace(this.ValidationMode.String(), "OpenApiValidationMode", "OpenApiValidationMode", 1) + `,`,
		`FallThroughMode:` + strings.Replace(this.FallThroughMode.String(), "OpenApiFallThroughMode", "OpenApiFallThroughMode", 1) + `,`,
		`OversizedBodyChoice:` + fmt.Sprintf("%v", this.OversizedBodyChoice) + `,`,
		`Settings:` + strings.Replace(this.Settings.String(), "OpenApiValidationCommonSettings", "OpenApiValidationCommonSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation{`,
		`OversizedBodySkipValidation:` + strings.Replace(fmt.Sprintf("%v", this.OversizedBodySkipValidation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation{`,
		`OversizedBodyFailValidation:` + strings.Replace(fmt.Sprintf("%v", this.OversizedBodyFailValidation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationMode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationMode{`,
		`ValidationModeChoice:` + fmt.Sprintf("%v", this.ValidationModeChoice) + `,`,
		`ResponseValidationModeChoice:` + fmt.Sprintf("%v", this.ResponseValidationModeChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationMode_ValidationModeActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationMode_ValidationModeActive{`,
		`ValidationModeActive:` + strings.Replace(fmt.Sprintf("%v", this.ValidationModeActive), "OpenApiValidationModeActive", "OpenApiValidationModeActive", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationMode_SkipValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationMode_SkipValidation{`,
		`SkipValidation:` + strings.Replace(fmt.Sprintf("%v", this.SkipValidation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationMode_SkipResponseValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationMode_SkipResponseValidation{`,
		`SkipResponseValidation:` + strings.Replace(fmt.Sprintf("%v", this.SkipResponseValidation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationMode_ResponseValidationModeActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationMode_ResponseValidationModeActive{`,
		`ResponseValidationModeActive:` + strings.Replace(fmt.Sprintf("%v", this.ResponseValidationModeActive), "OpenApiValidationModeActiveResponse", "OpenApiValidationModeActiveResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationModeActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationModeActive{`,
		`ValidationEnforcementType:` + fmt.Sprintf("%v", this.ValidationEnforcementType) + `,`,
		`RequestValidationProperties:` + fmt.Sprintf("%v", this.RequestValidationProperties) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationModeActive_EnforcementReport) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationModeActive_EnforcementReport{`,
		`EnforcementReport:` + strings.Replace(fmt.Sprintf("%v", this.EnforcementReport), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationModeActive_EnforcementBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationModeActive_EnforcementBlock{`,
		`EnforcementBlock:` + strings.Replace(fmt.Sprintf("%v", this.EnforcementBlock), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationModeActiveResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationModeActiveResponse{`,
		`ValidationEnforcementType:` + fmt.Sprintf("%v", this.ValidationEnforcementType) + `,`,
		`ResponseValidationProperties:` + fmt.Sprintf("%v", this.ResponseValidationProperties) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationModeActiveResponse_EnforcementReport) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationModeActiveResponse_EnforcementReport{`,
		`EnforcementReport:` + strings.Replace(fmt.Sprintf("%v", this.EnforcementReport), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationModeActiveResponse_EnforcementBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationModeActiveResponse_EnforcementBlock{`,
		`EnforcementBlock:` + strings.Replace(fmt.Sprintf("%v", this.EnforcementBlock), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiFallThroughMode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiFallThroughMode{`,
		`FallThroughModeChoice:` + fmt.Sprintf("%v", this.FallThroughModeChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiFallThroughMode_FallThroughModeAllow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiFallThroughMode_FallThroughModeAllow{`,
		`FallThroughModeAllow:` + strings.Replace(fmt.Sprintf("%v", this.FallThroughModeAllow), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiFallThroughMode_FallThroughModeCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiFallThroughMode_FallThroughModeCustom{`,
		`FallThroughModeCustom:` + strings.Replace(fmt.Sprintf("%v", this.FallThroughModeCustom), "CustomFallThroughMode", "CustomFallThroughMode", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomFallThroughMode) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOpenApiValidationRules := "[]*FallThroughRule{"
	for _, f := range this.OpenApiValidationRules {
		repeatedStringForOpenApiValidationRules += strings.Replace(f.String(), "FallThroughRule", "FallThroughRule", 1) + ","
	}
	repeatedStringForOpenApiValidationRules += "}"
	s := strings.Join([]string{`&CustomFallThroughMode{`,
		`OpenApiValidationRules:` + repeatedStringForOpenApiValidationRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *FallThroughRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FallThroughRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`ActionChoice:` + fmt.Sprintf("%v", this.ActionChoice) + `,`,
		`ConditionTypeChoice:` + fmt.Sprintf("%v", this.ConditionTypeChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FallThroughRule_ActionSkip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FallThroughRule_ActionSkip{`,
		`ActionSkip:` + strings.Replace(fmt.Sprintf("%v", this.ActionSkip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FallThroughRule_ActionReport) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FallThroughRule_ActionReport{`,
		`ActionReport:` + strings.Replace(fmt.Sprintf("%v", this.ActionReport), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FallThroughRule_ActionBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FallThroughRule_ActionBlock{`,
		`ActionBlock:` + strings.Replace(fmt.Sprintf("%v", this.ActionBlock), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FallThroughRule_BasePath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FallThroughRule_BasePath{`,
		`BasePath:` + fmt.Sprintf("%v", this.BasePath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FallThroughRule_ApiGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FallThroughRule_ApiGroup{`,
		`ApiGroup:` + fmt.Sprintf("%v", this.ApiGroup) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FallThroughRule_ApiEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FallThroughRule_ApiEndpoint{`,
		`ApiEndpoint:` + strings.Replace(fmt.Sprintf("%v", this.ApiEndpoint), "ApiEndpointDetails", "ApiEndpointDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidateApiBySpecRule) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOpenApiValidationRules := "[]*OpenApiValidationRule{"
	for _, f := range this.OpenApiValidationRules {
		repeatedStringForOpenApiValidationRules += strings.Replace(f.String(), "OpenApiValidationRule", "OpenApiValidationRule", 1) + ","
	}
	repeatedStringForOpenApiValidationRules += "}"
	s := strings.Join([]string{`&ValidateApiBySpecRule{`,
		`OpenApiValidationRules:` + repeatedStringForOpenApiValidationRules + `,`,
		`FallThroughMode:` + strings.Replace(this.FallThroughMode.String(), "OpenApiFallThroughMode", "OpenApiFallThroughMode", 1) + `,`,
		`OversizedBodyChoice:` + fmt.Sprintf("%v", this.OversizedBodyChoice) + `,`,
		`Settings:` + strings.Replace(this.Settings.String(), "OpenApiValidationCommonSettings", "OpenApiValidationCommonSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidateApiBySpecRule_OversizedBodySkipValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidateApiBySpecRule_OversizedBodySkipValidation{`,
		`OversizedBodySkipValidation:` + strings.Replace(fmt.Sprintf("%v", this.OversizedBodySkipValidation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidateApiBySpecRule_OversizedBodyFailValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidateApiBySpecRule_OversizedBodyFailValidation{`,
		`OversizedBodyFailValidation:` + strings.Replace(fmt.Sprintf("%v", this.OversizedBodyFailValidation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`ValidationMode:` + strings.Replace(this.ValidationMode.String(), "OpenApiValidationMode", "OpenApiValidationMode", 1) + `,`,
		`DomainChoice:` + fmt.Sprintf("%v", this.DomainChoice) + `,`,
		`ConditionTypeChoice:` + fmt.Sprintf("%v", this.ConditionTypeChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationRule_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationRule_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationRule_SpecificDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationRule_SpecificDomain{`,
		`SpecificDomain:` + fmt.Sprintf("%v", this.SpecificDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationRule_BasePath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationRule_BasePath{`,
		`BasePath:` + fmt.Sprintf("%v", this.BasePath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationRule_ApiGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationRule_ApiGroup{`,
		`ApiGroup:` + fmt.Sprintf("%v", this.ApiGroup) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationRule_ApiEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationRule_ApiEndpoint{`,
		`ApiEndpoint:` + strings.Replace(fmt.Sprintf("%v", this.ApiEndpoint), "ApiEndpointDetails", "ApiEndpointDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationCommonSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationCommonSettings{`,
		`OversizedBodyChoice:` + fmt.Sprintf("%v", this.OversizedBodyChoice) + `,`,
		`PropertyValidationSettingsChoice:` + fmt.Sprintf("%v", this.PropertyValidationSettingsChoice) + `,`,
		`FailConfiguration:` + fmt.Sprintf("%v", this.FailConfiguration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationCommonSettings_OversizedBodySkipValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationCommonSettings_OversizedBodySkipValidation{`,
		`OversizedBodySkipValidation:` + strings.Replace(fmt.Sprintf("%v", this.OversizedBodySkipValidation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationCommonSettings_OversizedBodyFailValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationCommonSettings_OversizedBodyFailValidation{`,
		`OversizedBodyFailValidation:` + strings.Replace(fmt.Sprintf("%v", this.OversizedBodyFailValidation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationCommonSettings_PropertyValidationSettingsDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{`,
		`PropertyValidationSettingsDefault:` + strings.Replace(fmt.Sprintf("%v", this.PropertyValidationSettingsDefault), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationCommonSettings_PropertyValidationSettingsCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{`,
		`PropertyValidationSettingsCustom:` + strings.Replace(fmt.Sprintf("%v", this.PropertyValidationSettingsCustom), "ValidationPropertySetting", "ValidationPropertySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationCommonSettings_FailOpen) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationCommonSettings_FailOpen{`,
		`FailOpen:` + strings.Replace(fmt.Sprintf("%v", this.FailOpen), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenApiValidationCommonSettings_FailClose) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenApiValidationCommonSettings_FailClose{`,
		`FailClose:` + strings.Replace(fmt.Sprintf("%v", this.FailClose), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidationPropertySetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidationPropertySetting{`,
		`QueryParameters:` + strings.Replace(this.QueryParameters.String(), "ValidationSettingForQueryParameters", "ValidationSettingForQueryParameters", 1) + `,`,
		`Headers:` + strings.Replace(this.Headers.String(), "ValidationSettingForHeaders", "ValidationSettingForHeaders", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidationSettingForQueryParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidationSettingForQueryParameters{`,
		`AdditionalParametersChoice:` + fmt.Sprintf("%v", this.AdditionalParametersChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidationSettingForQueryParameters_AllowAdditionalParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidationSettingForQueryParameters_AllowAdditionalParameters{`,
		`AllowAdditionalParameters:` + strings.Replace(fmt.Sprintf("%v", this.AllowAdditionalParameters), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidationSettingForQueryParameters_DisallowAdditionalParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidationSettingForQueryParameters_DisallowAdditionalParameters{`,
		`DisallowAdditionalParameters:` + strings.Replace(fmt.Sprintf("%v", this.DisallowAdditionalParameters), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidationSettingForHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidationSettingForHeaders{`,
		`AdditionalHeadersChoice:` + fmt.Sprintf("%v", this.AdditionalHeadersChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidationSettingForHeaders_AllowAdditionalHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidationSettingForHeaders_AllowAdditionalHeaders{`,
		`AllowAdditionalHeaders:` + strings.Replace(fmt.Sprintf("%v", this.AllowAdditionalHeaders), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidationSettingForHeaders_DisallowAdditionalHeaders) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidationSettingForHeaders_DisallowAdditionalHeaders{`,
		`DisallowAdditionalHeaders:` + strings.Replace(fmt.Sprintf("%v", this.DisallowAdditionalHeaders), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiDefinitionList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApiDefinitions := "[]*ObjectRefType{"
	for _, f := range this.ApiDefinitions {
		repeatedStringForApiDefinitions += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForApiDefinitions += "}"
	s := strings.Join([]string{`&ApiDefinitionList{`,
		`ApiDefinitions:` + repeatedStringForApiDefinitions + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIProtectionRules) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApiEndpointRules := "[]*APIEndpointProtectionRule{"
	for _, f := range this.ApiEndpointRules {
		repeatedStringForApiEndpointRules += strings.Replace(f.String(), "APIEndpointProtectionRule", "APIEndpointProtectionRule", 1) + ","
	}
	repeatedStringForApiEndpointRules += "}"
	repeatedStringForApiGroupsRules := "[]*APIGroupProtectionRule{"
	for _, f := range this.ApiGroupsRules {
		repeatedStringForApiGroupsRules += strings.Replace(f.String(), "APIGroupProtectionRule", "APIGroupProtectionRule", 1) + ","
	}
	repeatedStringForApiGroupsRules += "}"
	s := strings.Join([]string{`&APIProtectionRules{`,
		`ApiEndpointRules:` + repeatedStringForApiEndpointRules + `,`,
		`ApiGroupsRules:` + repeatedStringForApiGroupsRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpointProtectionRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpointProtectionRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`Action:` + strings.Replace(this.Action.String(), "APIProtectionRuleAction", "APIProtectionRuleAction", 1) + `,`,
		`ApiEndpointPath:` + fmt.Sprintf("%v", this.ApiEndpointPath) + `,`,
		`ApiEndpointMethod:` + strings.Replace(fmt.Sprintf("%v", this.ApiEndpointMethod), "HttpMethodMatcherType", "policy.HttpMethodMatcherType", 1) + `,`,
		`RequestMatcher:` + strings.Replace(fmt.Sprintf("%v", this.RequestMatcher), "RequestMatcher", "policy.RequestMatcher", 1) + `,`,
		`ClientMatcher:` + strings.Replace(fmt.Sprintf("%v", this.ClientMatcher), "ClientMatcher", "policy.ClientMatcher", 1) + `,`,
		`DomainChoice:` + fmt.Sprintf("%v", this.DomainChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpointProtectionRule_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpointProtectionRule_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIEndpointProtectionRule_SpecificDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIEndpointProtectionRule_SpecificDomain{`,
		`SpecificDomain:` + fmt.Sprintf("%v", this.SpecificDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIGroupProtectionRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIGroupProtectionRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`Action:` + strings.Replace(this.Action.String(), "APIProtectionRuleAction", "APIProtectionRuleAction", 1) + `,`,
		`ApiGroup:` + fmt.Sprintf("%v", this.ApiGroup) + `,`,
		`RequestMatcher:` + strings.Replace(fmt.Sprintf("%v", this.RequestMatcher), "RequestMatcher", "policy.RequestMatcher", 1) + `,`,
		`ClientMatcher:` + strings.Replace(fmt.Sprintf("%v", this.ClientMatcher), "ClientMatcher", "policy.ClientMatcher", 1) + `,`,
		`DomainChoice:` + fmt.Sprintf("%v", this.DomainChoice) + `,`,
		`BasePath:` + fmt.Sprintf("%v", this.BasePath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIGroupProtectionRule_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIGroupProtectionRule_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIGroupProtectionRule_SpecificDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIGroupProtectionRule_SpecificDomain{`,
		`SpecificDomain:` + fmt.Sprintf("%v", this.SpecificDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIProtectionRuleAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIProtectionRuleAction{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIProtectionRuleAction_Allow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIProtectionRuleAction_Allow{`,
		`Allow:` + strings.Replace(fmt.Sprintf("%v", this.Allow), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIProtectionRuleAction_Deny) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIProtectionRuleAction_Deny{`,
		`Deny:` + strings.Replace(fmt.Sprintf("%v", this.Deny), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JWTValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWTValidation{`,
		`Target:` + strings.Replace(this.Target.String(), "Target", "Target", 1) + `,`,
		`TokenLocation:` + strings.Replace(this.TokenLocation.String(), "TokenLocation", "TokenLocation", 1) + `,`,
		`Action:` + strings.Replace(fmt.Sprintf("%v", this.Action), "Action", "schema.Action", 1) + `,`,
		`JwksConfiguration:` + fmt.Sprintf("%v", this.JwksConfiguration) + `,`,
		`ReservedClaims:` + strings.Replace(this.ReservedClaims.String(), "ReservedClaims", "ReservedClaims", 1) + `,`,
		`MandatoryClaims:` + strings.Replace(this.MandatoryClaims.String(), "MandatoryClaims", "MandatoryClaims", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JWTValidation_AuthServerUri) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWTValidation_AuthServerUri{`,
		`AuthServerUri:` + fmt.Sprintf("%v", this.AuthServerUri) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JWTValidation_Jwks) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWTValidation_Jwks{`,
		`Jwks:` + fmt.Sprintf("%v", this.Jwks) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JWTValidation_JwksConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWTValidation_JwksConfig{`,
		`JwksConfig:` + strings.Replace(fmt.Sprintf("%v", this.JwksConfig), "JWKS", "JWKS", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MandatoryClaims) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MandatoryClaims{`,
		`ClaimNames:` + fmt.Sprintf("%v", this.ClaimNames) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Target) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Target{`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Target_AllEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Target_AllEndpoint{`,
		`AllEndpoint:` + strings.Replace(fmt.Sprintf("%v", this.AllEndpoint), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Target_ApiGroups) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Target_ApiGroups{`,
		`ApiGroups:` + strings.Replace(fmt.Sprintf("%v", this.ApiGroups), "APIGroups", "APIGroups", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Target_BasePaths) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Target_BasePaths{`,
		`BasePaths:` + strings.Replace(fmt.Sprintf("%v", this.BasePaths), "BasePathsType", "BasePathsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JWKS) string() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JWKS{`,
		`Cleartext:` + fmt.Sprintf("%v", this.Cleartext) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TokenLocation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TokenLocation{`,
		`TokenLocation:` + fmt.Sprintf("%v", this.TokenLocation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TokenLocation_BearerToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TokenLocation_BearerToken{`,
		`BearerToken:` + strings.Replace(fmt.Sprintf("%v", this.BearerToken), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TokenLocation_Cookie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TokenLocation_Cookie{`,
		`Cookie:` + fmt.Sprintf("%v", this.Cookie) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TokenLocation_Header) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TokenLocation_Header{`,
		`Header:` + fmt.Sprintf("%v", this.Header) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TokenLocation_QueryParam) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TokenLocation_QueryParam{`,
		`QueryParam:` + fmt.Sprintf("%v", this.QueryParam) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReservedClaims) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReservedClaims{`,
		`IssuerValidation:` + fmt.Sprintf("%v", this.IssuerValidation) + `,`,
		`AudienceValidation:` + fmt.Sprintf("%v", this.AudienceValidation) + `,`,
		`ValidatePeriod:` + fmt.Sprintf("%v", this.ValidatePeriod) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReservedClaims_IssuerDisable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReservedClaims_IssuerDisable{`,
		`IssuerDisable:` + strings.Replace(fmt.Sprintf("%v", this.IssuerDisable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReservedClaims_Issuer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReservedClaims_Issuer{`,
		`Issuer:` + fmt.Sprintf("%v", this.Issuer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReservedClaims_AudienceDisable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReservedClaims_AudienceDisable{`,
		`AudienceDisable:` + strings.Replace(fmt.Sprintf("%v", this.AudienceDisable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReservedClaims_Audience) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReservedClaims_Audience{`,
		`Audience:` + strings.Replace(fmt.Sprintf("%v", this.Audience), "Audiences", "Audiences", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReservedClaims_ValidatePeriodDisable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReservedClaims_ValidatePeriodDisable{`,
		`ValidatePeriodDisable:` + strings.Replace(fmt.Sprintf("%v", this.ValidatePeriodDisable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReservedClaims_ValidatePeriodEnable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReservedClaims_ValidatePeriodEnable{`,
		`ValidatePeriodEnable:` + strings.Replace(fmt.Sprintf("%v", this.ValidatePeriodEnable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Audiences) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Audiences{`,
		`Audiences:` + fmt.Sprintf("%v", this.Audiences) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BasePathsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BasePathsType{`,
		`BasePaths:` + fmt.Sprintf("%v", this.BasePaths) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiDiscoverySetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiDiscoverySetting{`,
		`LearnFromRedirectTraffic:` + fmt.Sprintf("%v", this.LearnFromRedirectTraffic) + `,`,
		`SensitiveDataDetectionRules:` + strings.Replace(fmt.Sprintf("%v", this.SensitiveDataDetectionRules), "SensitiveDataDetectionRules", "app_type.SensitiveDataDetectionRules", 1) + `,`,
		`DiscoveredApiSettings:` + strings.Replace(fmt.Sprintf("%v", this.DiscoveredApiSettings), "DiscoveredAPISettings", "app_type.DiscoveredAPISettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiDiscoverySetting_DisableLearnFromRedirectTraffic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiDiscoverySetting_DisableLearnFromRedirectTraffic{`,
		`DisableLearnFromRedirectTraffic:` + strings.Replace(fmt.Sprintf("%v", this.DisableLearnFromRedirectTraffic), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiDiscoverySetting_EnableLearnFromRedirectTraffic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiDiscoverySetting_EnableLearnFromRedirectTraffic{`,
		`EnableLearnFromRedirectTraffic:` + strings.Replace(fmt.Sprintf("%v", this.EnableLearnFromRedirectTraffic), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCommonWafTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ServicePolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicePolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicePolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &views.ObjectRefType{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnableChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMitigationSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserMitigationChoice = &EnableChallenge_DefaultMitigationSettings{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserMitigationChoice = &EnableChallenge_MaliciousUserMitigation{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultJsChallengeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JsChallengeParametersChoice = &EnableChallenge_DefaultJsChallengeParameters{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallengeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JsChallengeParametersChoice = &EnableChallenge_JsChallengeParameters{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultCaptchaChallengeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CaptchaChallengeParametersChoice = &EnableChallenge_DefaultCaptchaChallengeParameters{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallengeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CaptchaChallengeParametersChoice = &EnableChallenge_CaptchaChallengeParameters{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyBasedChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyBasedChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyBasedChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultJsChallengeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JsChallengeParametersChoice = &PolicyBasedChallenge_DefaultJsChallengeParameters{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallengeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JsChallengeParametersChoice = &PolicyBasedChallenge_JsChallengeParameters{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultCaptchaChallengeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CaptchaChallengeParametersChoice = &PolicyBasedChallenge_DefaultCaptchaChallengeParameters{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallengeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CaptchaChallengeParametersChoice = &PolicyBasedChallenge_CaptchaChallengeParameters{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTemporaryBlockingParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TemporaryBlockingParametersChoice = &PolicyBasedChallenge_DefaultTemporaryBlockingParameters{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryUserBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.TemporaryUserBlockingType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TemporaryBlockingParametersChoice = &PolicyBasedChallenge_TemporaryUserBlocking{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMitigationSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserMitigationChoice = &PolicyBasedChallenge_DefaultMitigationSettings{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserMitigationChoice = &PolicyBasedChallenge_MaliciousUserMitigation{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeChoice = &PolicyBasedChallenge_NoChallenge{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysEnableJsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeChoice = &PolicyBasedChallenge_AlwaysEnableJsChallenge{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysEnableCaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeChoice = &PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RuleList == nil {
				m.RuleList = &ChallengeRuleList{}
			}
			if err := m.RuleList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &service_policy_rule.ChallengeRuleSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeRuleList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeRuleList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeRuleList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &ChallengeRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPThreatCategoryListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPThreatCategoryListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPThreatCategoryListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v policy.IPThreatCategory
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommonWafTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= policy.IPThreatCategory(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IpThreatCategories = append(m.IpThreatCategories, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommonWafTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommonWafTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommonWafTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.IpThreatCategories) == 0 {
					m.IpThreatCategories = make([]policy.IPThreatCategory, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v policy.IPThreatCategory
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommonWafTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= policy.IPThreatCategory(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IpThreatCategories = append(m.IpThreatCategories, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IpThreatCategories", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpHeaderMatcherList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpHeaderMatcherList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpHeaderMatcherList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &schema.HeaderMatcherType{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleClientSrcRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleClientSrcRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleClientSrcRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSourceChoice = &SimpleClientSrcRule_IpPrefix{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsNumber", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientSourceChoice = &SimpleClientSrcRule_AsNumber{v}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpirationTimestamp == nil {
				m.ExpirationTimestamp = &types.Timestamp{}
			}
			if err := m.ExpirationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipProcessing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &SimpleClientSrcRule_SkipProcessing{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafSkipProcessing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &SimpleClientSrcRule_WafSkipProcessing{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotSkipProcessing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &SimpleClientSrcRule_BotSkipProcessing{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHeaderMatcherList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSourceChoice = &SimpleClientSrcRule_HttpHeader{v}
			iNdEx = postIndex
		case 16:
			if wireType == 0 {
				var v ClientSrcRuleAction
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommonWafTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ClientSrcRuleAction(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Actions = append(m.Actions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommonWafTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommonWafTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommonWafTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Actions) == 0 {
					m.Actions = make([]ClientSrcRuleAction, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ClientSrcRuleAction
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommonWafTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ClientSrcRuleAction(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Actions = append(m.Actions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSourceChoice = &SimpleClientSrcRule_UserIdentifier{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateLimiter == nil {
				m.RateLimiter = &rate_limiter.RateLimitValue{}
			}
			if err := m.RateLimiter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoIpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &RateLimitConfigType_NoIpAllowedList{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrefixStringListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &RateLimitConfigType_IpAllowedList{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomIpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomIpAllowedList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &RateLimitConfigType_CustomIpAllowedList{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PolicyChoice = &RateLimitConfigType_NoPolicies{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &rate_limiter_policy.PolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PolicyChoice = &RateLimitConfigType_Policies{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIRateLimitLegacy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIRateLimitLegacy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIRateLimitLegacy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoIpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &APIRateLimitLegacy_NoIpAllowedList{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrefixStringListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &APIRateLimitLegacy_IpAllowedList{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomIpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomIpAllowedList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &APIRateLimitLegacy_CustomIpAllowedList{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerUrlRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerUrlRules = append(m.ServerUrlRules, &ServerUrlRule{})
			if err := m.ServerUrlRules[len(m.ServerUrlRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpointRules = append(m.ApiEndpointRules, &ApiEndpointRule{})
			if err := m.ApiEndpointRules[len(m.ApiEndpointRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BypassRateLimitingRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BypassRateLimitingRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &APIRateLimitLegacy_BypassRateLimitingRules{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoIpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &APIRateLimit_NoIpAllowedList{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrefixStringListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &APIRateLimit_IpAllowedList{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomIpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomIpAllowedList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &APIRateLimit_CustomIpAllowedList{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BypassRateLimitingRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BypassRateLimitingRules{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &APIRateLimit_BypassRateLimitingRules{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerUrlRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerUrlRules = append(m.ServerUrlRules, &ServerUrlRule{})
			if err := m.ServerUrlRules[len(m.ServerUrlRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpointRules = append(m.ApiEndpointRules, &ApiEndpointRule{})
			if err := m.ApiEndpointRules[len(m.ApiEndpointRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BypassRateLimitingRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BypassRateLimitingRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BypassRateLimitingRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainChoice = &BypassRateLimitingRule_AnyDomain{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &BypassRateLimitingRule_SpecificDomain{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationType = &BypassRateLimitingRule_AnyUrl{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationType = &BypassRateLimitingRule_BasePath{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiEndpointDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationType = &BypassRateLimitingRule_ApiEndpoint{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &APIGroups{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationType = &BypassRateLimitingRule_ApiGroups{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestMatcher == nil {
				m.RequestMatcher = &policy.RequestMatcher{}
			}
			if err := m.RequestMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientMatcher == nil {
				m.ClientMatcher = &policy.ClientMatcher{}
			}
			if err := m.ClientMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroups = append(m.ApiGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiEndpointDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiEndpointDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiEndpointDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v schema.HttpMethod
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommonWafTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.HttpMethod(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Methods = append(m.Methods, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommonWafTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommonWafTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommonWafTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Methods) == 0 {
					m.Methods = make([]schema.HttpMethod, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.HttpMethod
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommonWafTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.HttpMethod(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Methods = append(m.Methods, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Methods", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BypassRateLimitingRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BypassRateLimitingRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BypassRateLimitingRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BypassRateLimitingRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BypassRateLimitingRules = append(m.BypassRateLimitingRules, &BypassRateLimitingRule{})
			if err := m.BypassRateLimitingRules[len(m.BypassRateLimitingRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiEndpointRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiEndpointRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiEndpointRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainChoice = &ApiEndpointRule_AnyDomain{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &ApiEndpointRule_SpecificDomain{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpointPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointMethod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiEndpointMethod == nil {
				m.ApiEndpointMethod = &policy.HttpMethodMatcherType{}
			}
			if err := m.ApiEndpointMethod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineRateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InlineRateLimiter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimiterChoice = &ApiEndpointRule_InlineRateLimiter{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefRateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimiterChoice = &ApiEndpointRule_RefRateLimiter{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestMatcher == nil {
				m.RequestMatcher = &policy.RequestMatcher{}
			}
			if err := m.RequestMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientMatcher == nil {
				m.ClientMatcher = &policy.ClientMatcher{}
			}
			if err := m.ClientMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InlineRateLimiter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InlineRateLimiter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InlineRateLimiter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			m.Unit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unit |= rate_limiter.RateLimitPeriodUnit(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseHttpLbUserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CountByChoice = &InlineRateLimiter_UseHttpLbUserId{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefUserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CountByChoice = &InlineRateLimiter_RefUserId{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerUrlRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerUrlRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerUrlRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainChoice = &ServerUrlRule_AnyDomain{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &ServerUrlRule_SpecificDomain{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineRateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InlineRateLimiter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimiterChoice = &ServerUrlRule_InlineRateLimiter{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefRateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimiterChoice = &ServerUrlRule_RefRateLimiter{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientMatcher == nil {
				m.ClientMatcher = &policy.ClientMatcher{}
			}
			if err := m.ClientMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestMatcher == nil {
				m.RequestMatcher = &policy.RequestMatcher{}
			}
			if err := m.RequestMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomIpAllowedList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomIpAllowedList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomIpAllowedList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiterAllowedPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiterAllowedPrefixes = append(m.RateLimiterAllowedPrefixes, &views.ObjectRefType{})
			if err := m.RateLimiterAllowedPrefixes[len(m.RateLimiterAllowedPrefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APISpecificationSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APISpecificationSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APISpecificationSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDefinition == nil {
				m.ApiDefinition = &views.ObjectRefType{}
			}
			if err := m.ApiDefinition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValidationTargetChoice = &APISpecificationSettings_ValidationDisabled{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationAllSpecEndpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpenApiValidationAllSpecEndpointsSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValidationTargetChoice = &APISpecificationSettings_ValidationAllSpecEndpoints{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationCustomList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ValidateApiBySpecRule{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValidationTargetChoice = &APISpecificationSettings_ValidationCustomList{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenApiValidationAllSpecEndpointsSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenApiValidationAllSpecEndpointsSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenApiValidationAllSpecEndpointsSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidationMode == nil {
				m.ValidationMode = &OpenApiValidationMode{}
			}
			if err := m.ValidationMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallThroughMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FallThroughMode == nil {
				m.FallThroughMode = &OpenApiFallThroughMode{}
			}
			if err := m.FallThroughMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OversizedBodySkipValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OversizedBodyChoice = &OpenApiValidationAllSpecEndpointsSettings_OversizedBodySkipValidation{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OversizedBodyFailValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OversizedBodyChoice = &OpenApiValidationAllSpecEndpointsSettings_OversizedBodyFailValidation{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &OpenApiValidationCommonSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenApiValidationMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenApiValidationMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenApiValidationMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationModeActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpenApiValidationModeActive{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValidationModeChoice = &OpenApiValidationMode_ValidationModeActive{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValidationModeChoice = &OpenApiValidationMode_SkipValidation{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipResponseValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ResponseValidationModeChoice = &OpenApiValidationMode_SkipResponseValidation{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseValidationModeActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpenApiValidationModeActiveResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ResponseValidationModeChoice = &OpenApiValidationMode_ResponseValidationModeActive{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenApiValidationModeActive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenApiValidationModeActive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenApiValidationModeActive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnforcementReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValidationEnforcementType = &OpenApiValidationModeActive_EnforcementReport{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnforcementBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValidationEnforcementType = &OpenApiValidationModeActive_EnforcementBlock{v}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v schema.OpenApiValidationProperties
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommonWafTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.OpenApiValidationProperties(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RequestValidationProperties = append(m.RequestValidationProperties, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommonWafTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommonWafTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommonWafTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.RequestValidationProperties) == 0 {
					m.RequestValidationProperties = make([]schema.OpenApiValidationProperties, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.OpenApiValidationProperties
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommonWafTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.OpenApiValidationProperties(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RequestValidationProperties = append(m.RequestValidationProperties, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestValidationProperties", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenApiValidationModeActiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenApiValidationModeActiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenApiValidationModeActiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnforcementReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValidationEnforcementType = &OpenApiValidationModeActiveResponse_EnforcementReport{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnforcementBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValidationEnforcementType = &OpenApiValidationModeActiveResponse_EnforcementBlock{v}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v schema.OpenApiValidationProperties
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommonWafTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.OpenApiValidationProperties(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ResponseValidationProperties = append(m.ResponseValidationProperties, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommonWafTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommonWafTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommonWafTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ResponseValidationProperties) == 0 {
					m.ResponseValidationProperties = make([]schema.OpenApiValidationProperties, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.OpenApiValidationProperties
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommonWafTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.OpenApiValidationProperties(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ResponseValidationProperties = append(m.ResponseValidationProperties, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseValidationProperties", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenApiFallThroughMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenApiFallThroughMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenApiFallThroughMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallThroughModeAllow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FallThroughModeChoice = &OpenApiFallThroughMode_FallThroughModeAllow{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallThroughModeCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomFallThroughMode{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FallThroughModeChoice = &OpenApiFallThroughMode_FallThroughModeCustom{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomFallThroughMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomFallThroughMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomFallThroughMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenApiValidationRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenApiValidationRules = append(m.OpenApiValidationRules, &FallThroughRule{})
			if err := m.OpenApiValidationRules[len(m.OpenApiValidationRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FallThroughRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FallThroughRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FallThroughRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionSkip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &FallThroughRule_ActionSkip{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &FallThroughRule_ActionReport{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &FallThroughRule_ActionBlock{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConditionTypeChoice = &FallThroughRule_BasePath{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConditionTypeChoice = &FallThroughRule_ApiGroup{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiEndpointDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConditionTypeChoice = &FallThroughRule_ApiEndpoint{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateApiBySpecRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateApiBySpecRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateApiBySpecRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenApiValidationRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenApiValidationRules = append(m.OpenApiValidationRules, &OpenApiValidationRule{})
			if err := m.OpenApiValidationRules[len(m.OpenApiValidationRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallThroughMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FallThroughMode == nil {
				m.FallThroughMode = &OpenApiFallThroughMode{}
			}
			if err := m.FallThroughMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OversizedBodySkipValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OversizedBodyChoice = &ValidateApiBySpecRule_OversizedBodySkipValidation{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OversizedBodyFailValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OversizedBodyChoice = &ValidateApiBySpecRule_OversizedBodyFailValidation{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &OpenApiValidationCommonSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenApiValidationRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenApiValidationRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenApiValidationRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidationMode == nil {
				m.ValidationMode = &OpenApiValidationMode{}
			}
			if err := m.ValidationMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainChoice = &OpenApiValidationRule_AnyDomain{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &OpenApiValidationRule_SpecificDomain{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConditionTypeChoice = &OpenApiValidationRule_BasePath{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConditionTypeChoice = &OpenApiValidationRule_ApiGroup{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiEndpointDetails{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConditionTypeChoice = &OpenApiValidationRule_ApiEndpoint{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenApiValidationCommonSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenApiValidationCommonSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenApiValidationCommonSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OversizedBodySkipValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OversizedBodyChoice = &OpenApiValidationCommonSettings_OversizedBodySkipValidation{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OversizedBodyFailValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OversizedBodyChoice = &OpenApiValidationCommonSettings_OversizedBodyFailValidation{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropertyValidationSettingsDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PropertyValidationSettingsChoice = &OpenApiValidationCommonSettings_PropertyValidationSettingsDefault{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropertyValidationSettingsCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ValidationPropertySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PropertyValidationSettingsChoice = &OpenApiValidationCommonSettings_PropertyValidationSettingsCustom{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailOpen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailConfiguration = &OpenApiValidationCommonSettings_FailOpen{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailClose", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FailConfiguration = &OpenApiValidationCommonSettings_FailClose{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidationPropertySetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationPropertySetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationPropertySetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryParameters == nil {
				m.QueryParameters = &ValidationSettingForQueryParameters{}
			}
			if err := m.QueryParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = &ValidationSettingForHeaders{}
			}
			if err := m.Headers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidationSettingForQueryParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationSettingForQueryParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationSettingForQueryParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAdditionalParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdditionalParametersChoice = &ValidationSettingForQueryParameters_AllowAdditionalParameters{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisallowAdditionalParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdditionalParametersChoice = &ValidationSettingForQueryParameters_DisallowAdditionalParameters{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidationSettingForHeaders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationSettingForHeaders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationSettingForHeaders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAdditionalHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdditionalHeadersChoice = &ValidationSettingForHeaders_AllowAdditionalHeaders{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisallowAdditionalHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdditionalHeadersChoice = &ValidationSettingForHeaders_DisallowAdditionalHeaders{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiDefinitionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiDefinitionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiDefinitionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiDefinitions = append(m.ApiDefinitions, &views.ObjectRefType{})
			if err := m.ApiDefinitions[len(m.ApiDefinitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIProtectionRules) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIProtectionRules: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIProtectionRules: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpointRules = append(m.ApiEndpointRules, &APIEndpointProtectionRule{})
			if err := m.ApiEndpointRules[len(m.ApiEndpointRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroupsRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroupsRules = append(m.ApiGroupsRules, &APIGroupProtectionRule{})
			if err := m.ApiGroupsRules[len(m.ApiGroupsRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIEndpointProtectionRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIEndpointProtectionRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIEndpointProtectionRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &APIProtectionRuleAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpointPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointMethod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiEndpointMethod == nil {
				m.ApiEndpointMethod = &policy.HttpMethodMatcherType{}
			}
			if err := m.ApiEndpointMethod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestMatcher == nil {
				m.RequestMatcher = &policy.RequestMatcher{}
			}
			if err := m.RequestMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientMatcher == nil {
				m.ClientMatcher = &policy.ClientMatcher{}
			}
			if err := m.ClientMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainChoice = &APIEndpointProtectionRule_AnyDomain{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &APIEndpointProtectionRule_SpecificDomain{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIGroupProtectionRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIGroupProtectionRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIGroupProtectionRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &APIProtectionRuleAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestMatcher == nil {
				m.RequestMatcher = &policy.RequestMatcher{}
			}
			if err := m.RequestMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientMatcher == nil {
				m.ClientMatcher = &policy.ClientMatcher{}
			}
			if err := m.ClientMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainChoice = &APIGroupProtectionRule_AnyDomain{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &APIGroupProtectionRule_SpecificDomain{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIProtectionRuleAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIProtectionRuleAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIProtectionRuleAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &APIProtectionRuleAction_Allow{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &APIProtectionRuleAction_Deny{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JWTValidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JWTValidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JWTValidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenLocation == nil {
				m.TokenLocation = &TokenLocation{}
			}
			if err := m.TokenLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &schema.Action{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthServerUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwksConfiguration = &JWTValidation_AuthServerUri{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jwks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwksConfiguration = &JWTValidation_Jwks{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReservedClaims == nil {
				m.ReservedClaims = &ReservedClaims{}
			}
			if err := m.ReservedClaims.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwksConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JWKS{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JwksConfiguration = &JWTValidation_JwksConfig{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MandatoryClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MandatoryClaims == nil {
				m.MandatoryClaims = &MandatoryClaims{}
			}
			if err := m.MandatoryClaims.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MandatoryClaims) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MandatoryClaims: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MandatoryClaims: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimNames = append(m.ClaimNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Target) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Target: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Target: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &Target_AllEndpoint{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &APIGroups{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &Target_ApiGroups{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePaths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BasePathsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &Target_BasePaths{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JWKS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JWKS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JWKS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cleartext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cleartext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearerToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TokenLocation = &TokenLocation_BearerToken{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenLocation = &TokenLocation_Cookie{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenLocation = &TokenLocation_Header{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryParam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenLocation = &TokenLocation_QueryParam{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReservedClaims) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReservedClaims: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReservedClaims: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerDisable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IssuerValidation = &ReservedClaims_IssuerDisable{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerValidation = &ReservedClaims_Issuer{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AudienceDisable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AudienceValidation = &ReservedClaims_AudienceDisable{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audience", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Audiences{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AudienceValidation = &ReservedClaims_Audience{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatePeriodDisable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValidatePeriod = &ReservedClaims_ValidatePeriodDisable{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatePeriodEnable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValidatePeriod = &ReservedClaims_ValidatePeriodEnable{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Audiences) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Audiences: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Audiences: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audiences", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Audiences = append(m.Audiences, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BasePathsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasePathsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasePathsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePaths", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasePaths = append(m.BasePaths, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiDiscoverySetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiDiscoverySetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiDiscoverySetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableLearnFromRedirectTraffic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LearnFromRedirectTraffic = &ApiDiscoverySetting_DisableLearnFromRedirectTraffic{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableLearnFromRedirectTraffic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LearnFromRedirectTraffic = &ApiDiscoverySetting_EnableLearnFromRedirectTraffic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataDetectionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SensitiveDataDetectionRules == nil {
				m.SensitiveDataDetectionRules = &app_type.SensitiveDataDetectionRules{}
			}
			if err := m.SensitiveDataDetectionRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveredApiSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiscoveredApiSettings == nil {
				m.DiscoveredApiSettings = &app_type.DiscoveredAPISettings{}
			}
			if err := m.DiscoveredApiSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonWafTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonWafTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommonWafTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommonWafTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommonWafTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommonWafTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommonWafTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommonWafTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommonWafTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommonWafTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommonWafTypes = fmt.Errorf("proto: unexpected end of group")
)

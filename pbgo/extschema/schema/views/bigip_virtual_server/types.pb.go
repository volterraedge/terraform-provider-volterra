// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/bigip_virtual_server/types.proto

package bigip_virtual_server

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	common_security "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_security"
	common_waf "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_waf"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VirtualServerType could be of type classic BIG-IP or BIG-IP-NEXT. BIG-IP-NEXT will be added later.
//
// x-displayName: "Virtual Server Type"
// Specifies the virtual server type
type BigIpVirtualServerType int32

const (
	// x-displayName: "INVALID"
	// Invalid Virtual Server Type
	INVALID_VIRTUAL_SERVER BigIpVirtualServerType = 0
	// x-displayName: "BIG-IP"
	// Classic BIG-IP Virtual Server
	BIGIP_VIRTUAL_SERVER BigIpVirtualServerType = 1
)

var BigIpVirtualServerType_name = map[int32]string{
	0: "INVALID_VIRTUAL_SERVER",
	1: "BIGIP_VIRTUAL_SERVER",
}

var BigIpVirtualServerType_value = map[string]int32{
	"INVALID_VIRTUAL_SERVER": 0,
	"BIGIP_VIRTUAL_SERVER":   1,
}

func (BigIpVirtualServerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6c6fb772da3806b3, []int{0}
}

// GlobalSpecType
//
// x-displayName: "Specification"
type GlobalSpecType struct {
	// Domains
	//
	// x-displayName: "Domains"
	// Domain names corresponding to the bigip virtual server. It can be empty.
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// API Definition choice
	//
	// x-required
	// x-displayName: "API Definition"
	// API Definition based on the imported swagger specs
	//
	// Types that are valid to be assigned to ApiDefinitionChoice:
	//	*GlobalSpecType_DisableApiDefinition
	//	*GlobalSpecType_ApiSpecification
	ApiDefinitionChoice isGlobalSpecType_ApiDefinitionChoice `protobuf_oneof:"api_definition_choice"`
	// API Discovery Choice
	//
	// x-required
	// x-displayName: "API Discovery"
	// When enabled, sampled traffic passing through this virtual server is analyzed and
	// APIs exposed by the application are identified.
	// An API is identified by its canonical (collapsed) URL path and the method used to call it.
	// Once all APIs are identified, for each API, the system learns its possible schema.
	// The learnt schema for all APIs is used to automatically generate a swagger definition file for the entire API set exposed by this virtual server.
	// The feature can be configured also via external app_type and labeling this HTTP Load Balancer.
	// In this case external app_type configuration overrides internally disabled feature.
	// Enabling the feature internally is allowed only when no labeling to external app_type.
	//
	// Types that are valid to be assigned to ApiDiscoveryChoice:
	//	*GlobalSpecType_DisableApiDiscovery
	//	*GlobalSpecType_EnableApiDiscovery
	ApiDiscoveryChoice isGlobalSpecType_ApiDiscoveryChoice `protobuf_oneof:"api_discovery_choice"`
	// Sensitive Data Detection Policy
	//
	// x-displayName: "Sensitive Data Detection Policy"
	// x-required
	// Sensitive data policy provide the ability to configure the policy for sensitive data detection
	//
	// Types that are valid to be assigned to SensitiveDataPolicyChoice:
	//	*GlobalSpecType_DefaultSensitiveDataPolicy
	//	*GlobalSpecType_SensitiveDataPolicy
	SensitiveDataPolicyChoice isGlobalSpecType_SensitiveDataPolicyChoice `protobuf_oneof:"sensitive_data_policy_choice"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,11,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
	// Service Discovery
	//
	// x-displayName: "Service Discovery"
	// x-required
	// Service Discovery Object, which discovered the bigip virtual server
	ServiceDiscovery *views.ObjectRefType `protobuf:"bytes,12,opt,name=service_discovery,json=serviceDiscovery,proto3" json:"service_discovery,omitempty"`
	// BIG-IP version
	//
	// x-displayName: "BIG-IP version"
	// x-required
	// Version of the BIG-IP which hosts the virtual server
	BigipVersion string `protobuf:"bytes,13,opt,name=bigip_version,json=bigipVersion,proto3" json:"bigip_version,omitempty"`
	// Virtual Server Type
	//
	// x-displayName: "Virtual Server Type"
	// x-required
	// Type of the BIG-IP Virtual Server
	Type BigIpVirtualServerType `protobuf:"varint,14,opt,name=type,proto3,enum=ves.io.schema.views.bigip_virtual_server.BigIpVirtualServerType" json:"type,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6fb772da3806b3, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_ApiDefinitionChoice interface {
	isGlobalSpecType_ApiDefinitionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ApiDiscoveryChoice interface {
	isGlobalSpecType_ApiDiscoveryChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_SensitiveDataPolicyChoice interface {
	isGlobalSpecType_SensitiveDataPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_DisableApiDefinition struct {
	DisableApiDefinition *schema.Empty `protobuf:"bytes,3,opt,name=disable_api_definition,json=disableApiDefinition,proto3,oneof" json:"disable_api_definition,omitempty"`
}
type GlobalSpecType_ApiSpecification struct {
	ApiSpecification *common_waf.APISpecificationSettings `protobuf:"bytes,4,opt,name=api_specification,json=apiSpecification,proto3,oneof" json:"api_specification,omitempty"`
}
type GlobalSpecType_DisableApiDiscovery struct {
	DisableApiDiscovery *schema.Empty `protobuf:"bytes,6,opt,name=disable_api_discovery,json=disableApiDiscovery,proto3,oneof" json:"disable_api_discovery,omitempty"`
}
type GlobalSpecType_EnableApiDiscovery struct {
	EnableApiDiscovery *common_waf.ApiDiscoverySetting `protobuf:"bytes,7,opt,name=enable_api_discovery,json=enableApiDiscovery,proto3,oneof" json:"enable_api_discovery,omitempty"`
}
type GlobalSpecType_DefaultSensitiveDataPolicy struct {
	DefaultSensitiveDataPolicy *schema.Empty `protobuf:"bytes,9,opt,name=default_sensitive_data_policy,json=defaultSensitiveDataPolicy,proto3,oneof" json:"default_sensitive_data_policy,omitempty"`
}
type GlobalSpecType_SensitiveDataPolicy struct {
	SensitiveDataPolicy *common_security.SensitiveDataPolicySettings `protobuf:"bytes,10,opt,name=sensitive_data_policy,json=sensitiveDataPolicy,proto3,oneof" json:"sensitive_data_policy,omitempty"`
}

func (*GlobalSpecType_DisableApiDefinition) isGlobalSpecType_ApiDefinitionChoice()             {}
func (*GlobalSpecType_ApiSpecification) isGlobalSpecType_ApiDefinitionChoice()                 {}
func (*GlobalSpecType_DisableApiDiscovery) isGlobalSpecType_ApiDiscoveryChoice()               {}
func (*GlobalSpecType_EnableApiDiscovery) isGlobalSpecType_ApiDiscoveryChoice()                {}
func (*GlobalSpecType_DefaultSensitiveDataPolicy) isGlobalSpecType_SensitiveDataPolicyChoice() {}
func (*GlobalSpecType_SensitiveDataPolicy) isGlobalSpecType_SensitiveDataPolicyChoice()        {}

func (m *GlobalSpecType) GetApiDefinitionChoice() isGlobalSpecType_ApiDefinitionChoice {
	if m != nil {
		return m.ApiDefinitionChoice
	}
	return nil
}
func (m *GlobalSpecType) GetApiDiscoveryChoice() isGlobalSpecType_ApiDiscoveryChoice {
	if m != nil {
		return m.ApiDiscoveryChoice
	}
	return nil
}
func (m *GlobalSpecType) GetSensitiveDataPolicyChoice() isGlobalSpecType_SensitiveDataPolicyChoice {
	if m != nil {
		return m.SensitiveDataPolicyChoice
	}
	return nil
}

func (m *GlobalSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GlobalSpecType) GetDisableApiDefinition() *schema.Empty {
	if x, ok := m.GetApiDefinitionChoice().(*GlobalSpecType_DisableApiDefinition); ok {
		return x.DisableApiDefinition
	}
	return nil
}

func (m *GlobalSpecType) GetApiSpecification() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*GlobalSpecType_ApiSpecification); ok {
		return x.ApiSpecification
	}
	return nil
}

func (m *GlobalSpecType) GetDisableApiDiscovery() *schema.Empty {
	if x, ok := m.GetApiDiscoveryChoice().(*GlobalSpecType_DisableApiDiscovery); ok {
		return x.DisableApiDiscovery
	}
	return nil
}

func (m *GlobalSpecType) GetEnableApiDiscovery() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*GlobalSpecType_EnableApiDiscovery); ok {
		return x.EnableApiDiscovery
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultSensitiveDataPolicy() *schema.Empty {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*GlobalSpecType_DefaultSensitiveDataPolicy); ok {
		return x.DefaultSensitiveDataPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetSensitiveDataPolicy() *common_security.SensitiveDataPolicySettings {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*GlobalSpecType_SensitiveDataPolicy); ok {
		return x.SensitiveDataPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetServiceDiscovery() *views.ObjectRefType {
	if m != nil {
		return m.ServiceDiscovery
	}
	return nil
}

func (m *GlobalSpecType) GetBigipVersion() string {
	if m != nil {
		return m.BigipVersion
	}
	return ""
}

func (m *GlobalSpecType) GetType() BigIpVirtualServerType {
	if m != nil {
		return m.Type
	}
	return INVALID_VIRTUAL_SERVER
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_DisableApiDefinition)(nil),
		(*GlobalSpecType_ApiSpecification)(nil),
		(*GlobalSpecType_DisableApiDiscovery)(nil),
		(*GlobalSpecType_EnableApiDiscovery)(nil),
		(*GlobalSpecType_DefaultSensitiveDataPolicy)(nil),
		(*GlobalSpecType_SensitiveDataPolicy)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace BIG-IP virtual server"
// Shape of the BIG-IP virtual server specification
type ReplaceSpecType struct {
	// Types that are valid to be assigned to ApiDefinitionChoice:
	//	*ReplaceSpecType_DisableApiDefinition
	//	*ReplaceSpecType_ApiSpecification
	ApiDefinitionChoice isReplaceSpecType_ApiDefinitionChoice `protobuf_oneof:"api_definition_choice"`
	// Types that are valid to be assigned to ApiDiscoveryChoice:
	//	*ReplaceSpecType_DisableApiDiscovery
	//	*ReplaceSpecType_EnableApiDiscovery
	ApiDiscoveryChoice isReplaceSpecType_ApiDiscoveryChoice `protobuf_oneof:"api_discovery_choice"`
	// Types that are valid to be assigned to SensitiveDataPolicyChoice:
	//	*ReplaceSpecType_DefaultSensitiveDataPolicy
	//	*ReplaceSpecType_SensitiveDataPolicy
	SensitiveDataPolicyChoice isReplaceSpecType_SensitiveDataPolicyChoice `protobuf_oneof:"sensitive_data_policy_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6fb772da3806b3, []int{1}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_ApiDefinitionChoice interface {
	isReplaceSpecType_ApiDefinitionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ApiDiscoveryChoice interface {
	isReplaceSpecType_ApiDiscoveryChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_SensitiveDataPolicyChoice interface {
	isReplaceSpecType_SensitiveDataPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_DisableApiDefinition struct {
	DisableApiDefinition *schema.Empty `protobuf:"bytes,3,opt,name=disable_api_definition,json=disableApiDefinition,proto3,oneof" json:"disable_api_definition,omitempty"`
}
type ReplaceSpecType_ApiSpecification struct {
	ApiSpecification *common_waf.APISpecificationSettings `protobuf:"bytes,4,opt,name=api_specification,json=apiSpecification,proto3,oneof" json:"api_specification,omitempty"`
}
type ReplaceSpecType_DisableApiDiscovery struct {
	DisableApiDiscovery *schema.Empty `protobuf:"bytes,6,opt,name=disable_api_discovery,json=disableApiDiscovery,proto3,oneof" json:"disable_api_discovery,omitempty"`
}
type ReplaceSpecType_EnableApiDiscovery struct {
	EnableApiDiscovery *common_waf.ApiDiscoverySetting `protobuf:"bytes,7,opt,name=enable_api_discovery,json=enableApiDiscovery,proto3,oneof" json:"enable_api_discovery,omitempty"`
}
type ReplaceSpecType_DefaultSensitiveDataPolicy struct {
	DefaultSensitiveDataPolicy *schema.Empty `protobuf:"bytes,9,opt,name=default_sensitive_data_policy,json=defaultSensitiveDataPolicy,proto3,oneof" json:"default_sensitive_data_policy,omitempty"`
}
type ReplaceSpecType_SensitiveDataPolicy struct {
	SensitiveDataPolicy *common_security.SensitiveDataPolicySettings `protobuf:"bytes,10,opt,name=sensitive_data_policy,json=sensitiveDataPolicy,proto3,oneof" json:"sensitive_data_policy,omitempty"`
}

func (*ReplaceSpecType_DisableApiDefinition) isReplaceSpecType_ApiDefinitionChoice()             {}
func (*ReplaceSpecType_ApiSpecification) isReplaceSpecType_ApiDefinitionChoice()                 {}
func (*ReplaceSpecType_DisableApiDiscovery) isReplaceSpecType_ApiDiscoveryChoice()               {}
func (*ReplaceSpecType_EnableApiDiscovery) isReplaceSpecType_ApiDiscoveryChoice()                {}
func (*ReplaceSpecType_DefaultSensitiveDataPolicy) isReplaceSpecType_SensitiveDataPolicyChoice() {}
func (*ReplaceSpecType_SensitiveDataPolicy) isReplaceSpecType_SensitiveDataPolicyChoice()        {}

func (m *ReplaceSpecType) GetApiDefinitionChoice() isReplaceSpecType_ApiDefinitionChoice {
	if m != nil {
		return m.ApiDefinitionChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetApiDiscoveryChoice() isReplaceSpecType_ApiDiscoveryChoice {
	if m != nil {
		return m.ApiDiscoveryChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetSensitiveDataPolicyChoice() isReplaceSpecType_SensitiveDataPolicyChoice {
	if m != nil {
		return m.SensitiveDataPolicyChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableApiDefinition() *schema.Empty {
	if x, ok := m.GetApiDefinitionChoice().(*ReplaceSpecType_DisableApiDefinition); ok {
		return x.DisableApiDefinition
	}
	return nil
}

func (m *ReplaceSpecType) GetApiSpecification() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*ReplaceSpecType_ApiSpecification); ok {
		return x.ApiSpecification
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableApiDiscovery() *schema.Empty {
	if x, ok := m.GetApiDiscoveryChoice().(*ReplaceSpecType_DisableApiDiscovery); ok {
		return x.DisableApiDiscovery
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableApiDiscovery() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*ReplaceSpecType_EnableApiDiscovery); ok {
		return x.EnableApiDiscovery
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultSensitiveDataPolicy() *schema.Empty {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*ReplaceSpecType_DefaultSensitiveDataPolicy); ok {
		return x.DefaultSensitiveDataPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetSensitiveDataPolicy() *common_security.SensitiveDataPolicySettings {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*ReplaceSpecType_SensitiveDataPolicy); ok {
		return x.SensitiveDataPolicy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_DisableApiDefinition)(nil),
		(*ReplaceSpecType_ApiSpecification)(nil),
		(*ReplaceSpecType_DisableApiDiscovery)(nil),
		(*ReplaceSpecType_EnableApiDiscovery)(nil),
		(*ReplaceSpecType_DefaultSensitiveDataPolicy)(nil),
		(*ReplaceSpecType_SensitiveDataPolicy)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get BIG-IP virtual server"
// Shape of the BIG-IP virtual server specification
type GetSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"` // Deprecated: Do not use.
	// Types that are valid to be assigned to ApiDefinitionChoice:
	//	*GetSpecType_DisableApiDefinition
	//	*GetSpecType_ApiSpecification
	ApiDefinitionChoice isGetSpecType_ApiDefinitionChoice `protobuf_oneof:"api_definition_choice"`
	// Types that are valid to be assigned to ApiDiscoveryChoice:
	//	*GetSpecType_DisableApiDiscovery
	//	*GetSpecType_EnableApiDiscovery
	ApiDiscoveryChoice isGetSpecType_ApiDiscoveryChoice `protobuf_oneof:"api_discovery_choice"`
	// Types that are valid to be assigned to SensitiveDataPolicyChoice:
	//	*GetSpecType_DefaultSensitiveDataPolicy
	//	*GetSpecType_SensitiveDataPolicy
	SensitiveDataPolicyChoice isGetSpecType_SensitiveDataPolicyChoice `protobuf_oneof:"sensitive_data_policy_choice"`
	ServiceDiscovery          *views.ObjectRefType                    `protobuf:"bytes,12,opt,name=service_discovery,json=serviceDiscovery,proto3" json:"service_discovery,omitempty"`
	BigipVersion              string                                  `protobuf:"bytes,13,opt,name=bigip_version,json=bigipVersion,proto3" json:"bigip_version,omitempty"`
	Type                      BigIpVirtualServerType                  `protobuf:"varint,14,opt,name=type,proto3,enum=ves.io.schema.views.bigip_virtual_server.BigIpVirtualServerType" json:"type,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c6fb772da3806b3, []int{2}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_ApiDefinitionChoice interface {
	isGetSpecType_ApiDefinitionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ApiDiscoveryChoice interface {
	isGetSpecType_ApiDiscoveryChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_SensitiveDataPolicyChoice interface {
	isGetSpecType_SensitiveDataPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_DisableApiDefinition struct {
	DisableApiDefinition *schema.Empty `protobuf:"bytes,3,opt,name=disable_api_definition,json=disableApiDefinition,proto3,oneof" json:"disable_api_definition,omitempty"`
}
type GetSpecType_ApiSpecification struct {
	ApiSpecification *common_waf.APISpecificationSettings `protobuf:"bytes,4,opt,name=api_specification,json=apiSpecification,proto3,oneof" json:"api_specification,omitempty"`
}
type GetSpecType_DisableApiDiscovery struct {
	DisableApiDiscovery *schema.Empty `protobuf:"bytes,6,opt,name=disable_api_discovery,json=disableApiDiscovery,proto3,oneof" json:"disable_api_discovery,omitempty"`
}
type GetSpecType_EnableApiDiscovery struct {
	EnableApiDiscovery *common_waf.ApiDiscoverySetting `protobuf:"bytes,7,opt,name=enable_api_discovery,json=enableApiDiscovery,proto3,oneof" json:"enable_api_discovery,omitempty"`
}
type GetSpecType_DefaultSensitiveDataPolicy struct {
	DefaultSensitiveDataPolicy *schema.Empty `protobuf:"bytes,9,opt,name=default_sensitive_data_policy,json=defaultSensitiveDataPolicy,proto3,oneof" json:"default_sensitive_data_policy,omitempty"`
}
type GetSpecType_SensitiveDataPolicy struct {
	SensitiveDataPolicy *common_security.SensitiveDataPolicySettings `protobuf:"bytes,10,opt,name=sensitive_data_policy,json=sensitiveDataPolicy,proto3,oneof" json:"sensitive_data_policy,omitempty"`
}

func (*GetSpecType_DisableApiDefinition) isGetSpecType_ApiDefinitionChoice()             {}
func (*GetSpecType_ApiSpecification) isGetSpecType_ApiDefinitionChoice()                 {}
func (*GetSpecType_DisableApiDiscovery) isGetSpecType_ApiDiscoveryChoice()               {}
func (*GetSpecType_EnableApiDiscovery) isGetSpecType_ApiDiscoveryChoice()                {}
func (*GetSpecType_DefaultSensitiveDataPolicy) isGetSpecType_SensitiveDataPolicyChoice() {}
func (*GetSpecType_SensitiveDataPolicy) isGetSpecType_SensitiveDataPolicyChoice()        {}

func (m *GetSpecType) GetApiDefinitionChoice() isGetSpecType_ApiDefinitionChoice {
	if m != nil {
		return m.ApiDefinitionChoice
	}
	return nil
}
func (m *GetSpecType) GetApiDiscoveryChoice() isGetSpecType_ApiDiscoveryChoice {
	if m != nil {
		return m.ApiDiscoveryChoice
	}
	return nil
}
func (m *GetSpecType) GetSensitiveDataPolicyChoice() isGetSpecType_SensitiveDataPolicyChoice {
	if m != nil {
		return m.SensitiveDataPolicyChoice
	}
	return nil
}

// Deprecated: Do not use.
func (m *GetSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetSpecType) GetDisableApiDefinition() *schema.Empty {
	if x, ok := m.GetApiDefinitionChoice().(*GetSpecType_DisableApiDefinition); ok {
		return x.DisableApiDefinition
	}
	return nil
}

func (m *GetSpecType) GetApiSpecification() *common_waf.APISpecificationSettings {
	if x, ok := m.GetApiDefinitionChoice().(*GetSpecType_ApiSpecification); ok {
		return x.ApiSpecification
	}
	return nil
}

func (m *GetSpecType) GetDisableApiDiscovery() *schema.Empty {
	if x, ok := m.GetApiDiscoveryChoice().(*GetSpecType_DisableApiDiscovery); ok {
		return x.DisableApiDiscovery
	}
	return nil
}

func (m *GetSpecType) GetEnableApiDiscovery() *common_waf.ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*GetSpecType_EnableApiDiscovery); ok {
		return x.EnableApiDiscovery
	}
	return nil
}

func (m *GetSpecType) GetDefaultSensitiveDataPolicy() *schema.Empty {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*GetSpecType_DefaultSensitiveDataPolicy); ok {
		return x.DefaultSensitiveDataPolicy
	}
	return nil
}

func (m *GetSpecType) GetSensitiveDataPolicy() *common_security.SensitiveDataPolicySettings {
	if x, ok := m.GetSensitiveDataPolicyChoice().(*GetSpecType_SensitiveDataPolicy); ok {
		return x.SensitiveDataPolicy
	}
	return nil
}

func (m *GetSpecType) GetServiceDiscovery() *views.ObjectRefType {
	if m != nil {
		return m.ServiceDiscovery
	}
	return nil
}

func (m *GetSpecType) GetBigipVersion() string {
	if m != nil {
		return m.BigipVersion
	}
	return ""
}

func (m *GetSpecType) GetType() BigIpVirtualServerType {
	if m != nil {
		return m.Type
	}
	return INVALID_VIRTUAL_SERVER
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_DisableApiDefinition)(nil),
		(*GetSpecType_ApiSpecification)(nil),
		(*GetSpecType_DisableApiDiscovery)(nil),
		(*GetSpecType_EnableApiDiscovery)(nil),
		(*GetSpecType_DefaultSensitiveDataPolicy)(nil),
		(*GetSpecType_SensitiveDataPolicy)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.views.bigip_virtual_server.BigIpVirtualServerType", BigIpVirtualServerType_name, BigIpVirtualServerType_value)
	golang_proto.RegisterEnum("ves.io.schema.views.bigip_virtual_server.BigIpVirtualServerType", BigIpVirtualServerType_name, BigIpVirtualServerType_value)
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.bigip_virtual_server.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.bigip_virtual_server.GlobalSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.bigip_virtual_server.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.bigip_virtual_server.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.bigip_virtual_server.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.bigip_virtual_server.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/bigip_virtual_server/types.proto", fileDescriptor_6c6fb772da3806b3)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/bigip_virtual_server/types.proto", fileDescriptor_6c6fb772da3806b3)
}

var fileDescriptor_6c6fb772da3806b3 = []byte{
	// 1087 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xcf, 0x4f, 0xe3, 0x46,
	0x14, 0xce, 0xe4, 0x17, 0xc9, 0x2c, 0xd0, 0xe0, 0x0d, 0x34, 0x9b, 0x52, 0x13, 0x51, 0xb5, 0x42,
	0x15, 0xd8, 0xfc, 0x5c, 0xd1, 0x3d, 0xac, 0x16, 0x0b, 0x04, 0x41, 0xa8, 0x8b, 0x1c, 0x8a, 0xd4,
	0x4a, 0x5b, 0x6b, 0xe2, 0x4c, 0xcc, 0xb4, 0x4e, 0xc6, 0xb2, 0x27, 0x66, 0x73, 0x40, 0x45, 0xec,
	0xa5, 0xea, 0xa9, 0xe2, 0xdc, 0xde, 0xab, 0xfd, 0x13, 0x9a, 0x56, 0x42, 0x3d, 0x55, 0x3d, 0xe5,
	0xc8, 0xb1, 0x98, 0xcb, 0xf6, 0xb6, 0x67, 0x4e, 0x95, 0x1d, 0x07, 0x62, 0x6a, 0x42, 0xa5, 0xae,
	0x7a, 0x68, 0xb9, 0xcd, 0xcc, 0x7b, 0xdf, 0x37, 0x6f, 0xc6, 0xef, 0x7b, 0xcf, 0x03, 0x17, 0x6d,
	0x6c, 0x09, 0x84, 0x8a, 0x96, 0xba, 0x87, 0x6b, 0x48, 0xb4, 0x09, 0xde, 0xb7, 0xc4, 0x32, 0xd1,
	0x88, 0xa1, 0xd8, 0xc4, 0x64, 0x0d, 0xa4, 0x2b, 0x16, 0x36, 0x6d, 0x6c, 0x8a, 0xac, 0x69, 0x60,
	0x4b, 0x30, 0x4c, 0xca, 0x28, 0x37, 0xd5, 0x41, 0x09, 0x1d, 0x94, 0xe0, 0xa1, 0x84, 0x30, 0x54,
	0x7e, 0x46, 0x23, 0x6c, 0xaf, 0x51, 0x16, 0x54, 0x5a, 0x13, 0x35, 0xaa, 0x51, 0xd1, 0x23, 0x28,
	0x37, 0xaa, 0xde, 0xcc, 0x9b, 0x78, 0xa3, 0x0e, 0x71, 0x7e, 0x42, 0xa3, 0x54, 0xd3, 0xf1, 0x95,
	0x17, 0x23, 0x35, 0x6c, 0x31, 0x54, 0x33, 0x7c, 0x87, 0x77, 0x82, 0xf1, 0x52, 0x83, 0x11, 0x5a,
	0xf7, 0xc3, 0xca, 0x3f, 0x08, 0x1a, 0x7b, 0x22, 0xce, 0x8f, 0x5f, 0x3b, 0x27, 0xd2, 0x49, 0x05,
	0x31, 0xec, 0x5b, 0x0b, 0x7f, 0xbd, 0x05, 0x25, 0x48, 0xbd, 0x1c, 0x76, 0x4f, 0x2a, 0xad, 0xd5,
	0x68, 0x5d, 0xb1, 0xb0, 0xda, 0x30, 0x09, 0x6b, 0x8a, 0xdd, 0x81, 0xd2, 0xbb, 0xf3, 0x52, 0x1f,
	0xe4, 0x3e, 0xaa, 0xf6, 0x0c, 0x03, 0xb0, 0x89, 0x30, 0x58, 0xaf, 0xc3, 0x07, 0xd7, 0x1d, 0x3a,
	0xf7, 0xbe, 0x47, 0x2d, 0xd6, 0xeb, 0x37, 0xf9, 0x02, 0xc2, 0xe1, 0x75, 0x9d, 0x96, 0x91, 0x5e,
	0x32, 0xb0, 0xba, 0xd3, 0x34, 0x30, 0x87, 0xe0, 0x40, 0x85, 0xd6, 0x10, 0xa9, 0x5b, 0x39, 0x50,
	0x88, 0x4d, 0xa5, 0xa5, 0xf5, 0xd3, 0x03, 0xe0, 0x1c, 0x0c, 0xc8, 0xb8, 0x46, 0x6d, 0x5c, 0x79,
	0xd5, 0x02, 0xe0, 0xc7, 0x3f, 0x4e, 0x62, 0xf0, 0x18, 0x0c, 0x4c, 0x26, 0xcc, 0x58, 0xee, 0x30,
	0xea, 0x4e, 0xd3, 0xc7, 0x20, 0x39, 0x19, 0x37, 0xa3, 0x99, 0x80, 0xf1, 0xeb, 0xa8, 0x37, 0x4d,
	0x1c, 0x83, 0x68, 0x0e, 0xc8, 0x5d, 0x5e, 0x6e, 0x0b, 0x8e, 0x55, 0x88, 0x85, 0xca, 0x3a, 0x56,
	0x90, 0x41, 0x94, 0x0a, 0xae, 0x92, 0x3a, 0x71, 0x2f, 0x34, 0x17, 0x2b, 0x80, 0xa9, 0x7b, 0xf3,
	0x59, 0x21, 0x98, 0x42, 0x6b, 0x35, 0x83, 0x35, 0x37, 0x22, 0x72, 0xd6, 0x47, 0xad, 0x18, 0x64,
	0xf5, 0x12, 0xc3, 0x69, 0x70, 0xc4, 0x65, 0xb1, 0x0c, 0xac, 0x92, 0x2a, 0x51, 0x91, 0x47, 0x14,
	0xf7, 0x88, 0x96, 0x85, 0xb0, 0x5c, 0xbc, 0xba, 0x54, 0x61, 0x65, 0xbb, 0x58, 0xea, 0xc5, 0x95,
	0x30, 0x63, 0xa4, 0xae, 0x59, 0x1b, 0x11, 0x39, 0x83, 0x0c, 0x12, 0xb0, 0x71, 0x9b, 0x70, 0x34,
	0x10, 0x36, 0xb1, 0x54, 0x6a, 0x63, 0xb3, 0x99, 0x4b, 0xf6, 0x89, 0x1a, 0xc8, 0xf7, 0x7b, 0xa2,
	0xee, 0x42, 0xb8, 0xaf, 0x60, 0x16, 0xd7, 0x43, 0xa8, 0x06, 0x3c, 0xaa, 0x85, 0x5b, 0xe3, 0xee,
	0xe1, 0xf2, 0x63, 0x96, 0xc6, 0xbe, 0xf9, 0x19, 0x70, 0xd5, 0xa5, 0xe7, 0xea, 0xcc, 0x3e, 0x42,
	0xc6, 0x0c, 0xaa, 0xd8, 0xa8, 0xae, 0xe2, 0xca, 0x06, 0x90, 0xb9, 0xce, 0x56, 0x81, 0x00, 0x3e,
	0x85, 0xef, 0x56, 0x70, 0x15, 0x35, 0x74, 0xa6, 0x58, 0xb8, 0x6e, 0x11, 0x46, 0x6c, 0xac, 0x54,
	0x10, 0x43, 0x8a, 0x41, 0x75, 0xa2, 0x36, 0x73, 0xe9, 0x3e, 0x87, 0x8a, 0xca, 0x79, 0x1f, 0x5c,
	0xea, 0x62, 0x57, 0x11, 0x43, 0xdb, 0x1e, 0x92, 0xb3, 0xe1, 0x68, 0x38, 0x25, 0xf4, 0x28, 0x9f,
	0xf4, 0x3b, 0x5c, 0x57, 0x25, 0x42, 0x08, 0xf1, 0xe5, 0xc7, 0x89, 0xca, 0xf7, 0xad, 0x90, 0x7d,
	0x9f, 0xc1, 0x21, 0x4f, 0x9c, 0xa4, 0xce, 0xb0, 0x59, 0x47, 0x7a, 0xee, 0x9e, 0xb7, 0xdf, 0x64,
	0xe8, 0x7e, 0x4f, 0xcb, 0x5f, 0x60, 0x95, 0xc9, 0xb8, 0xea, 0x26, 0xbd, 0x94, 0x7d, 0x79, 0x10,
	0xc4, 0xba, 0x69, 0x2e, 0x0f, 0xba, 0x4b, 0x45, 0x7f, 0x85, 0x7b, 0x06, 0x47, 0xdc, 0xba, 0x45,
	0x54, 0xdc, 0xf3, 0xbd, 0x06, 0xff, 0xf6, 0x16, 0x83, 0x2f, 0x0f, 0xd2, 0x97, 0x38, 0x39, 0xe3,
	0x53, 0x5d, 0x7d, 0x10, 0x11, 0x0e, 0xf9, 0x45, 0x12, 0x9b, 0x96, 0x9b, 0xc2, 0x43, 0x05, 0x30,
	0x95, 0x96, 0xa0, 0x27, 0x20, 0x4f, 0x67, 0xf2, 0xa0, 0xe7, 0xb0, 0xdb, 0xb1, 0x73, 0x3b, 0x30,
	0xee, 0x4a, 0x39, 0x37, 0x5c, 0x00, 0x53, 0xc3, 0x37, 0xdc, 0x6a, 0x58, 0xd9, 0x15, 0x24, 0xa2,
	0x15, 0x8d, 0xdd, 0xce, 0x5a, 0xc9, 0x5b, 0x72, 0x03, 0x94, 0x3d, 0xb6, 0x47, 0x0f, 0x7f, 0x69,
	0x81, 0x79, 0xf8, 0x36, 0x1c, 0xf6, 0x1d, 0x0a, 0x1d, 0x0f, 0x2e, 0x31, 0xb7, 0x38, 0x3d, 0xb7,
	0xe0, 0x1a, 0x56, 0xb6, 0x8b, 0x85, 0x6d, 0x93, 0x32, 0xac, 0x7a, 0xaa, 0x48, 0xcc, 0x4f, 0x2f,
	0x4d, 0x2f, 0x4b, 0x8f, 0xe1, 0x68, 0x50, 0xcb, 0x8a, 0xba, 0x47, 0x89, 0x8a, 0xb9, 0xf7, 0x4f,
	0x5a, 0x20, 0xd6, 0x6e, 0x81, 0xa8, 0xd3, 0x02, 0xb1, 0x85, 0xe9, 0xc5, 0xe3, 0x9f, 0xc2, 0xb2,
	0x54, 0x7a, 0x08, 0xb3, 0x01, 0x25, 0x74, 0xe1, 0xfc, 0x49, 0x0b, 0x24, 0xdb, 0x2d, 0x90, 0xb8,
	0x01, 0x37, 0x0b, 0xc7, 0x43, 0x93, 0xad, 0x8b, 0xcf, 0x9c, 0xb4, 0x40, 0xba, 0xdd, 0x02, 0x29,
	0xa7, 0x05, 0xe2, 0x1f, 0x4d, 0xcf, 0xcd, 0x6e, 0xc6, 0x53, 0xd1, 0x4c, 0x6c, 0x33, 0x9e, 0x4a,
	0x64, 0x92, 0x9b, 0xf1, 0x54, 0x2a, 0x93, 0x9e, 0xfc, 0x3e, 0x09, 0xdf, 0x92, 0xb1, 0xa1, 0x23,
	0x15, 0x5f, 0x96, 0xc1, 0xbb, 0x1a, 0xc5, 0x69, 0x6f, 0xbc, 0x46, 0xfd, 0x6f, 0x6a, 0xd1, 0xa3,
	0x91, 0xdf, 0x1e, 0x5f, 0x6b, 0xac, 0xd2, 0xfc, 0x4d, 0x0a, 0x79, 0x70, 0x74, 0x01, 0xc2, 0x4d,
	0xd2, 0xec, 0x0d, 0xaa, 0xc8, 0x1d, 0x5d, 0x80, 0x50, 0x8b, 0xf4, 0xe4, 0x16, 0x3d, 0x14, 0x8e,
	0x2e, 0x40, 0x5f, 0x8f, 0x10, 0x7d, 0xbc, 0x48, 0xc1, 0x7b, 0xeb, 0x98, 0x5d, 0x6a, 0x63, 0xfc,
	0xfa, 0x2f, 0xc2, 0x5d, 0x77, 0xbf, 0x53, 0xce, 0x9b, 0xea, 0xe2, 0x4f, 0xff, 0x51, 0x9b, 0x0d,
	0x69, 0xac, 0xef, 0x85, 0x36, 0xd6, 0x7f, 0xa5, 0x99, 0xfe, 0x97, 0xaa, 0xc0, 0x87, 0x25, 0x38,
	0x16, 0x7e, 0x58, 0x6e, 0x02, 0x8e, 0x15, 0x3f, 0xde, 0x5d, 0xd9, 0x2a, 0xae, 0x2a, 0xbb, 0x45,
	0x79, 0xe7, 0x93, 0x95, 0x2d, 0xa5, 0xb4, 0x26, 0xef, 0xae, 0xc9, 0x99, 0x48, 0x3e, 0x76, 0x78,
	0x00, 0xb8, 0x1c, 0xcc, 0x4a, 0xc5, 0xf5, 0xe2, 0xf6, 0x75, 0x33, 0x90, 0xbe, 0x03, 0xed, 0x33,
	0x3e, 0x72, 0x7a, 0xc6, 0x47, 0x5e, 0x9f, 0xf1, 0xe0, 0xd0, 0xe1, 0xc1, 0x0f, 0x0e, 0x0f, 0x7e,
	0x75, 0x78, 0xd0, 0x76, 0x78, 0x70, 0xea, 0xf0, 0xe0, 0x77, 0x87, 0x07, 0xaf, 0x1c, 0x3e, 0xf2,
	0xda, 0xe1, 0xc1, 0xb7, 0xe7, 0x7c, 0xe4, 0xe4, 0x9c, 0x07, 0xed, 0x73, 0x3e, 0x72, 0x7a, 0xce,
	0x47, 0x3e, 0xfb, 0x5c, 0xa3, 0xc6, 0x97, 0x9a, 0x60, 0x53, 0x9d, 0x61, 0xd3, 0x44, 0x42, 0xc3,
	0x12, 0xbd, 0x41, 0x95, 0x9a, 0xb5, 0x19, 0xc3, 0xa4, 0x36, 0xa9, 0x60, 0x73, 0xa6, 0x6b, 0x16,
	0x8d, 0xb2, 0x46, 0x45, 0xfc, 0x9c, 0xf9, 0xcf, 0xa2, 0x5b, 0xdf, 0xb5, 0xe5, 0xa4, 0xf7, 0x4c,
	0x5a, 0xf8, 0x33, 0x00, 0x00, 0xff, 0xff, 0x45, 0x34, 0x5e, 0xd7, 0x0a, 0x0f, 0x00, 0x00,
}

func (x BigIpVirtualServerType) String() string {
	s, ok := BigIpVirtualServerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.ApiDefinitionChoice == nil {
		if this.ApiDefinitionChoice != nil {
			return false
		}
	} else if this.ApiDefinitionChoice == nil {
		return false
	} else if !this.ApiDefinitionChoice.Equal(that1.ApiDefinitionChoice) {
		return false
	}
	if that1.ApiDiscoveryChoice == nil {
		if this.ApiDiscoveryChoice != nil {
			return false
		}
	} else if this.ApiDiscoveryChoice == nil {
		return false
	} else if !this.ApiDiscoveryChoice.Equal(that1.ApiDiscoveryChoice) {
		return false
	}
	if that1.SensitiveDataPolicyChoice == nil {
		if this.SensitiveDataPolicyChoice != nil {
			return false
		}
	} else if this.SensitiveDataPolicyChoice == nil {
		return false
	} else if !this.SensitiveDataPolicyChoice.Equal(that1.SensitiveDataPolicyChoice) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if !this.ServiceDiscovery.Equal(that1.ServiceDiscovery) {
		return false
	}
	if this.BigipVersion != that1.BigipVersion {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableApiDefinition)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDefinition.Equal(that1.DisableApiDefinition) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ApiSpecification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ApiSpecification)
	if !ok {
		that2, ok := that.(GlobalSpecType_ApiSpecification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecification.Equal(that1.ApiSpecification) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableApiDiscovery)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDiscovery.Equal(that1.DisableApiDiscovery) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableApiDiscovery)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableApiDiscovery.Equal(that1.EnableApiDiscovery) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultSensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultSensitiveDataPolicy)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultSensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSensitiveDataPolicy.Equal(that1.DefaultSensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SensitiveDataPolicy)
	if !ok {
		that2, ok := that.(GlobalSpecType_SensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SensitiveDataPolicy.Equal(that1.SensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ApiDefinitionChoice == nil {
		if this.ApiDefinitionChoice != nil {
			return false
		}
	} else if this.ApiDefinitionChoice == nil {
		return false
	} else if !this.ApiDefinitionChoice.Equal(that1.ApiDefinitionChoice) {
		return false
	}
	if that1.ApiDiscoveryChoice == nil {
		if this.ApiDiscoveryChoice != nil {
			return false
		}
	} else if this.ApiDiscoveryChoice == nil {
		return false
	} else if !this.ApiDiscoveryChoice.Equal(that1.ApiDiscoveryChoice) {
		return false
	}
	if that1.SensitiveDataPolicyChoice == nil {
		if this.SensitiveDataPolicyChoice != nil {
			return false
		}
	} else if this.SensitiveDataPolicyChoice == nil {
		return false
	} else if !this.SensitiveDataPolicyChoice.Equal(that1.SensitiveDataPolicyChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableApiDefinition)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDefinition.Equal(that1.DisableApiDefinition) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ApiSpecification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ApiSpecification)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ApiSpecification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecification.Equal(that1.ApiSpecification) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableApiDiscovery)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDiscovery.Equal(that1.DisableApiDiscovery) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableApiDiscovery)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableApiDiscovery.Equal(that1.EnableApiDiscovery) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultSensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultSensitiveDataPolicy)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultSensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSensitiveDataPolicy.Equal(that1.DefaultSensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SensitiveDataPolicy)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SensitiveDataPolicy.Equal(that1.SensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.ApiDefinitionChoice == nil {
		if this.ApiDefinitionChoice != nil {
			return false
		}
	} else if this.ApiDefinitionChoice == nil {
		return false
	} else if !this.ApiDefinitionChoice.Equal(that1.ApiDefinitionChoice) {
		return false
	}
	if that1.ApiDiscoveryChoice == nil {
		if this.ApiDiscoveryChoice != nil {
			return false
		}
	} else if this.ApiDiscoveryChoice == nil {
		return false
	} else if !this.ApiDiscoveryChoice.Equal(that1.ApiDiscoveryChoice) {
		return false
	}
	if that1.SensitiveDataPolicyChoice == nil {
		if this.SensitiveDataPolicyChoice != nil {
			return false
		}
	} else if this.SensitiveDataPolicyChoice == nil {
		return false
	} else if !this.SensitiveDataPolicyChoice.Equal(that1.SensitiveDataPolicyChoice) {
		return false
	}
	if !this.ServiceDiscovery.Equal(that1.ServiceDiscovery) {
		return false
	}
	if this.BigipVersion != that1.BigipVersion {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *GetSpecType_DisableApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableApiDefinition)
	if !ok {
		that2, ok := that.(GetSpecType_DisableApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDefinition.Equal(that1.DisableApiDefinition) {
		return false
	}
	return true
}
func (this *GetSpecType_ApiSpecification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ApiSpecification)
	if !ok {
		that2, ok := that.(GetSpecType_ApiSpecification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiSpecification.Equal(that1.ApiSpecification) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableApiDiscovery)
	if !ok {
		that2, ok := that.(GetSpecType_DisableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDiscovery.Equal(that1.DisableApiDiscovery) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableApiDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableApiDiscovery)
	if !ok {
		that2, ok := that.(GetSpecType_EnableApiDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableApiDiscovery.Equal(that1.EnableApiDiscovery) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultSensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultSensitiveDataPolicy)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultSensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSensitiveDataPolicy.Equal(that1.DefaultSensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *GetSpecType_SensitiveDataPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SensitiveDataPolicy)
	if !ok {
		that2, ok := that.(GetSpecType_SensitiveDataPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SensitiveDataPolicy.Equal(that1.SensitiveDataPolicy) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&bigip_virtual_server.GlobalSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.ApiDefinitionChoice != nil {
		s = append(s, "ApiDefinitionChoice: "+fmt.Sprintf("%#v", this.ApiDefinitionChoice)+",\n")
	}
	if this.ApiDiscoveryChoice != nil {
		s = append(s, "ApiDiscoveryChoice: "+fmt.Sprintf("%#v", this.ApiDiscoveryChoice)+",\n")
	}
	if this.SensitiveDataPolicyChoice != nil {
		s = append(s, "SensitiveDataPolicyChoice: "+fmt.Sprintf("%#v", this.SensitiveDataPolicyChoice)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	if this.ServiceDiscovery != nil {
		s = append(s, "ServiceDiscovery: "+fmt.Sprintf("%#v", this.ServiceDiscovery)+",\n")
	}
	s = append(s, "BigipVersion: "+fmt.Sprintf("%#v", this.BigipVersion)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_DisableApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.GlobalSpecType_DisableApiDefinition{` +
		`DisableApiDefinition:` + fmt.Sprintf("%#v", this.DisableApiDefinition) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ApiSpecification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.GlobalSpecType_ApiSpecification{` +
		`ApiSpecification:` + fmt.Sprintf("%#v", this.ApiSpecification) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.GlobalSpecType_DisableApiDiscovery{` +
		`DisableApiDiscovery:` + fmt.Sprintf("%#v", this.DisableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.GlobalSpecType_EnableApiDiscovery{` +
		`EnableApiDiscovery:` + fmt.Sprintf("%#v", this.EnableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultSensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.GlobalSpecType_DefaultSensitiveDataPolicy{` +
		`DefaultSensitiveDataPolicy:` + fmt.Sprintf("%#v", this.DefaultSensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.GlobalSpecType_SensitiveDataPolicy{` +
		`SensitiveDataPolicy:` + fmt.Sprintf("%#v", this.SensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&bigip_virtual_server.ReplaceSpecType{")
	if this.ApiDefinitionChoice != nil {
		s = append(s, "ApiDefinitionChoice: "+fmt.Sprintf("%#v", this.ApiDefinitionChoice)+",\n")
	}
	if this.ApiDiscoveryChoice != nil {
		s = append(s, "ApiDiscoveryChoice: "+fmt.Sprintf("%#v", this.ApiDiscoveryChoice)+",\n")
	}
	if this.SensitiveDataPolicyChoice != nil {
		s = append(s, "SensitiveDataPolicyChoice: "+fmt.Sprintf("%#v", this.SensitiveDataPolicyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_DisableApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.ReplaceSpecType_DisableApiDefinition{` +
		`DisableApiDefinition:` + fmt.Sprintf("%#v", this.DisableApiDefinition) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ApiSpecification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.ReplaceSpecType_ApiSpecification{` +
		`ApiSpecification:` + fmt.Sprintf("%#v", this.ApiSpecification) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.ReplaceSpecType_DisableApiDiscovery{` +
		`DisableApiDiscovery:` + fmt.Sprintf("%#v", this.DisableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.ReplaceSpecType_EnableApiDiscovery{` +
		`EnableApiDiscovery:` + fmt.Sprintf("%#v", this.EnableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultSensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.ReplaceSpecType_DefaultSensitiveDataPolicy{` +
		`DefaultSensitiveDataPolicy:` + fmt.Sprintf("%#v", this.DefaultSensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.ReplaceSpecType_SensitiveDataPolicy{` +
		`SensitiveDataPolicy:` + fmt.Sprintf("%#v", this.SensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&bigip_virtual_server.GetSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.ApiDefinitionChoice != nil {
		s = append(s, "ApiDefinitionChoice: "+fmt.Sprintf("%#v", this.ApiDefinitionChoice)+",\n")
	}
	if this.ApiDiscoveryChoice != nil {
		s = append(s, "ApiDiscoveryChoice: "+fmt.Sprintf("%#v", this.ApiDiscoveryChoice)+",\n")
	}
	if this.SensitiveDataPolicyChoice != nil {
		s = append(s, "SensitiveDataPolicyChoice: "+fmt.Sprintf("%#v", this.SensitiveDataPolicyChoice)+",\n")
	}
	if this.ServiceDiscovery != nil {
		s = append(s, "ServiceDiscovery: "+fmt.Sprintf("%#v", this.ServiceDiscovery)+",\n")
	}
	s = append(s, "BigipVersion: "+fmt.Sprintf("%#v", this.BigipVersion)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_DisableApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.GetSpecType_DisableApiDefinition{` +
		`DisableApiDefinition:` + fmt.Sprintf("%#v", this.DisableApiDefinition) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ApiSpecification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.GetSpecType_ApiSpecification{` +
		`ApiSpecification:` + fmt.Sprintf("%#v", this.ApiSpecification) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.GetSpecType_DisableApiDiscovery{` +
		`DisableApiDiscovery:` + fmt.Sprintf("%#v", this.DisableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableApiDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.GetSpecType_EnableApiDiscovery{` +
		`EnableApiDiscovery:` + fmt.Sprintf("%#v", this.EnableApiDiscovery) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultSensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.GetSpecType_DefaultSensitiveDataPolicy{` +
		`DefaultSensitiveDataPolicy:` + fmt.Sprintf("%#v", this.DefaultSensitiveDataPolicy) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SensitiveDataPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bigip_virtual_server.GetSpecType_SensitiveDataPolicy{` +
		`SensitiveDataPolicy:` + fmt.Sprintf("%#v", this.SensitiveDataPolicy) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x70
	}
	if len(m.BigipVersion) > 0 {
		i -= len(m.BigipVersion)
		copy(dAtA[i:], m.BigipVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BigipVersion)))
		i--
		dAtA[i] = 0x6a
	}
	if m.ServiceDiscovery != nil {
		{
			size, err := m.ServiceDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.SensitiveDataPolicyChoice != nil {
		{
			size := m.SensitiveDataPolicyChoice.Size()
			i -= size
			if _, err := m.SensitiveDataPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDiscoveryChoice != nil {
		{
			size := m.ApiDiscoveryChoice.Size()
			i -= size
			if _, err := m.ApiDiscoveryChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDefinitionChoice != nil {
		{
			size := m.ApiDefinitionChoice.Size()
			i -= size
			if _, err := m.ApiDefinitionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_DisableApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDefinition != nil {
		{
			size, err := m.DisableApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ApiSpecification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ApiSpecification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecification != nil {
		{
			size, err := m.ApiSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDiscovery != nil {
		{
			size, err := m.DisableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableApiDiscovery != nil {
		{
			size, err := m.EnableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultSensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultSensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSensitiveDataPolicy != nil {
		{
			size, err := m.DefaultSensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SensitiveDataPolicy != nil {
		{
			size, err := m.SensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SensitiveDataPolicyChoice != nil {
		{
			size := m.SensitiveDataPolicyChoice.Size()
			i -= size
			if _, err := m.SensitiveDataPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDiscoveryChoice != nil {
		{
			size := m.ApiDiscoveryChoice.Size()
			i -= size
			if _, err := m.ApiDiscoveryChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDefinitionChoice != nil {
		{
			size := m.ApiDefinitionChoice.Size()
			i -= size
			if _, err := m.ApiDefinitionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_DisableApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDefinition != nil {
		{
			size, err := m.DisableApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ApiSpecification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ApiSpecification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecification != nil {
		{
			size, err := m.ApiSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDiscovery != nil {
		{
			size, err := m.DisableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableApiDiscovery != nil {
		{
			size, err := m.EnableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultSensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultSensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSensitiveDataPolicy != nil {
		{
			size, err := m.DefaultSensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SensitiveDataPolicy != nil {
		{
			size, err := m.SensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x70
	}
	if len(m.BigipVersion) > 0 {
		i -= len(m.BigipVersion)
		copy(dAtA[i:], m.BigipVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BigipVersion)))
		i--
		dAtA[i] = 0x6a
	}
	if m.ServiceDiscovery != nil {
		{
			size, err := m.ServiceDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.SensitiveDataPolicyChoice != nil {
		{
			size := m.SensitiveDataPolicyChoice.Size()
			i -= size
			if _, err := m.SensitiveDataPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDiscoveryChoice != nil {
		{
			size := m.ApiDiscoveryChoice.Size()
			i -= size
			if _, err := m.ApiDiscoveryChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDefinitionChoice != nil {
		{
			size := m.ApiDefinitionChoice.Size()
			i -= size
			if _, err := m.ApiDefinitionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_DisableApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDefinition != nil {
		{
			size, err := m.DisableApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ApiSpecification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ApiSpecification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiSpecification != nil {
		{
			size, err := m.ApiSpecification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDiscovery != nil {
		{
			size, err := m.DisableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableApiDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableApiDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableApiDiscovery != nil {
		{
			size, err := m.EnableApiDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultSensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultSensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSensitiveDataPolicy != nil {
		{
			size, err := m.DefaultSensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SensitiveDataPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SensitiveDataPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SensitiveDataPolicy != nil {
		{
			size, err := m.SensitiveDataPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ApiDefinitionChoice != nil {
		n += m.ApiDefinitionChoice.Size()
	}
	if m.ApiDiscoveryChoice != nil {
		n += m.ApiDiscoveryChoice.Size()
	}
	if m.SensitiveDataPolicyChoice != nil {
		n += m.SensitiveDataPolicyChoice.Size()
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServiceDiscovery != nil {
		l = m.ServiceDiscovery.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BigipVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	return n
}

func (m *GlobalSpecType_DisableApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDefinition != nil {
		l = m.DisableApiDefinition.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ApiSpecification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecification != nil {
		l = m.ApiSpecification.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDiscovery != nil {
		l = m.DisableApiDiscovery.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableApiDiscovery != nil {
		l = m.EnableApiDiscovery.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultSensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSensitiveDataPolicy != nil {
		l = m.DefaultSensitiveDataPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensitiveDataPolicy != nil {
		l = m.SensitiveDataPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinitionChoice != nil {
		n += m.ApiDefinitionChoice.Size()
	}
	if m.ApiDiscoveryChoice != nil {
		n += m.ApiDiscoveryChoice.Size()
	}
	if m.SensitiveDataPolicyChoice != nil {
		n += m.SensitiveDataPolicyChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_DisableApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDefinition != nil {
		l = m.DisableApiDefinition.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ApiSpecification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecification != nil {
		l = m.ApiSpecification.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDiscovery != nil {
		l = m.DisableApiDiscovery.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableApiDiscovery != nil {
		l = m.EnableApiDiscovery.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultSensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSensitiveDataPolicy != nil {
		l = m.DefaultSensitiveDataPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensitiveDataPolicy != nil {
		l = m.SensitiveDataPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ApiDefinitionChoice != nil {
		n += m.ApiDefinitionChoice.Size()
	}
	if m.ApiDiscoveryChoice != nil {
		n += m.ApiDiscoveryChoice.Size()
	}
	if m.SensitiveDataPolicyChoice != nil {
		n += m.SensitiveDataPolicyChoice.Size()
	}
	if m.ServiceDiscovery != nil {
		l = m.ServiceDiscovery.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BigipVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	return n
}

func (m *GetSpecType_DisableApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDefinition != nil {
		l = m.DisableApiDefinition.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ApiSpecification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSpecification != nil {
		l = m.ApiSpecification.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDiscovery != nil {
		l = m.DisableApiDiscovery.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableApiDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableApiDiscovery != nil {
		l = m.EnableApiDiscovery.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultSensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSensitiveDataPolicy != nil {
		l = m.DefaultSensitiveDataPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SensitiveDataPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensitiveDataPolicy != nil {
		l = m.SensitiveDataPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`ApiDefinitionChoice:` + fmt.Sprintf("%v", this.ApiDefinitionChoice) + `,`,
		`ApiDiscoveryChoice:` + fmt.Sprintf("%v", this.ApiDiscoveryChoice) + `,`,
		`SensitiveDataPolicyChoice:` + fmt.Sprintf("%v", this.SensitiveDataPolicyChoice) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`ServiceDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.ServiceDiscovery), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`BigipVersion:` + fmt.Sprintf("%v", this.BigipVersion) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableApiDefinition{`,
		`DisableApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDefinition), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ApiSpecification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ApiSpecification{`,
		`ApiSpecification:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecification), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableApiDiscovery{`,
		`DisableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDiscovery), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableApiDiscovery{`,
		`EnableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.EnableApiDiscovery), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultSensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultSensitiveDataPolicy{`,
		`DefaultSensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSensitiveDataPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SensitiveDataPolicy{`,
		`SensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SensitiveDataPolicy), "SensitiveDataPolicySettings", "common_security.SensitiveDataPolicySettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`ApiDefinitionChoice:` + fmt.Sprintf("%v", this.ApiDefinitionChoice) + `,`,
		`ApiDiscoveryChoice:` + fmt.Sprintf("%v", this.ApiDiscoveryChoice) + `,`,
		`SensitiveDataPolicyChoice:` + fmt.Sprintf("%v", this.SensitiveDataPolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableApiDefinition{`,
		`DisableApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDefinition), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ApiSpecification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ApiSpecification{`,
		`ApiSpecification:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecification), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableApiDiscovery{`,
		`DisableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDiscovery), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableApiDiscovery{`,
		`EnableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.EnableApiDiscovery), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultSensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultSensitiveDataPolicy{`,
		`DefaultSensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSensitiveDataPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SensitiveDataPolicy{`,
		`SensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SensitiveDataPolicy), "SensitiveDataPolicySettings", "common_security.SensitiveDataPolicySettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`ApiDefinitionChoice:` + fmt.Sprintf("%v", this.ApiDefinitionChoice) + `,`,
		`ApiDiscoveryChoice:` + fmt.Sprintf("%v", this.ApiDiscoveryChoice) + `,`,
		`SensitiveDataPolicyChoice:` + fmt.Sprintf("%v", this.SensitiveDataPolicyChoice) + `,`,
		`ServiceDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.ServiceDiscovery), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`BigipVersion:` + fmt.Sprintf("%v", this.BigipVersion) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableApiDefinition{`,
		`DisableApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDefinition), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ApiSpecification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ApiSpecification{`,
		`ApiSpecification:` + strings.Replace(fmt.Sprintf("%v", this.ApiSpecification), "APISpecificationSettings", "common_waf.APISpecificationSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableApiDiscovery{`,
		`DisableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDiscovery), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableApiDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableApiDiscovery{`,
		`EnableApiDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.EnableApiDiscovery), "ApiDiscoverySetting", "common_waf.ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultSensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultSensitiveDataPolicy{`,
		`DefaultSensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSensitiveDataPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SensitiveDataPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SensitiveDataPolicy{`,
		`SensitiveDataPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SensitiveDataPolicy), "SensitiveDataPolicySettings", "common_security.SensitiveDataPolicySettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GlobalSpecType_DisableApiDefinition{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GlobalSpecType_ApiSpecification{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &GlobalSpecType_DisableApiDiscovery{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &GlobalSpecType_EnableApiDiscovery{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &GlobalSpecType_DefaultSensitiveDataPolicy{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.SensitiveDataPolicySettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &GlobalSpecType_SensitiveDataPolicy{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceDiscovery == nil {
				m.ServiceDiscovery = &views.ObjectRefType{}
			}
			if err := m.ServiceDiscovery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigipVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BigipVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= BigIpVirtualServerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &ReplaceSpecType_DisableApiDefinition{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &ReplaceSpecType_ApiSpecification{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &ReplaceSpecType_DisableApiDiscovery{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &ReplaceSpecType_EnableApiDiscovery{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &ReplaceSpecType_DefaultSensitiveDataPolicy{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.SensitiveDataPolicySettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &ReplaceSpecType_SensitiveDataPolicy{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GetSpecType_DisableApiDefinition{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSpecification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.APISpecificationSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GetSpecType_ApiSpecification{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &GetSpecType_DisableApiDiscovery{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableApiDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_waf.ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &GetSpecType_EnableApiDiscovery{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &GetSpecType_DefaultSensitiveDataPolicy{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &common_security.SensitiveDataPolicySettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SensitiveDataPolicyChoice = &GetSpecType_SensitiveDataPolicy{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceDiscovery == nil {
				m.ServiceDiscovery = &views.ObjectRefType{}
			}
			if err := m.ServiceDiscovery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigipVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BigipVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= BigIpVirtualServerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

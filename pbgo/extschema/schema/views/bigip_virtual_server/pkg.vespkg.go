// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package bigip_virtual_server

import (
	"reflect"

	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/store"
	"gopkg.volterra.us/stdlib/svcfw"
)

func initializeValidatorRegistry(vr map[string]db.Validator) {
	vr["ves.io.schema.views.bigip_virtual_server.SpecType"] = SpecTypeValidator()

	vr["ves.io.schema.views.bigip_virtual_server.Object"] = ObjectValidator()
	vr["ves.io.schema.views.bigip_virtual_server.StatusObject"] = StatusObjectValidator()

	vr["ves.io.schema.views.bigip_virtual_server.GetRequest"] = GetRequestValidator()
	vr["ves.io.schema.views.bigip_virtual_server.GetResponse"] = GetResponseValidator()
	vr["ves.io.schema.views.bigip_virtual_server.ListRequest"] = ListRequestValidator()
	vr["ves.io.schema.views.bigip_virtual_server.ListResponse"] = ListResponseValidator()
	vr["ves.io.schema.views.bigip_virtual_server.ListResponseItem"] = ListResponseItemValidator()
	vr["ves.io.schema.views.bigip_virtual_server.ReplaceRequest"] = ReplaceRequestValidator()
	vr["ves.io.schema.views.bigip_virtual_server.ReplaceResponse"] = ReplaceResponseValidator()

	vr["ves.io.schema.views.bigip_virtual_server.BigIPVirtualServerList"] = BigIPVirtualServerListValidator()
	vr["ves.io.schema.views.bigip_virtual_server.GetSecurityConfigReq"] = GetSecurityConfigReqValidator()

	vr["ves.io.schema.views.bigip_virtual_server.GetSpecType"] = GetSpecTypeValidator()
	vr["ves.io.schema.views.bigip_virtual_server.GlobalSpecType"] = GlobalSpecTypeValidator()
	vr["ves.io.schema.views.bigip_virtual_server.ReplaceSpecType"] = ReplaceSpecTypeValidator()

}

func initializeEntryRegistry(mdr *svcfw.MDRegistry) {
	mdr.EntryFactory["ves.io.schema.views.bigip_virtual_server.Object"] = NewEntryObject
	mdr.EntryStoreMap["ves.io.schema.views.bigip_virtual_server.Object"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.views.bigip_virtual_server.Object"] = reflect.TypeOf(&DBObject{})
	mdr.EntryIndexers["ves.io.schema.views.bigip_virtual_server.Object"] = GetObjectIndexers
	mdr.EntryFactory["ves.io.schema.views.bigip_virtual_server.StatusObject"] = NewEntryStatusObject
	mdr.EntryStoreMap["ves.io.schema.views.bigip_virtual_server.StatusObject"] = store.InMemory
	mdr.EntryRegistry["ves.io.schema.views.bigip_virtual_server.StatusObject"] = reflect.TypeOf(&DBStatusObject{})
	mdr.EntryIndexers["ves.io.schema.views.bigip_virtual_server.StatusObject"] = GetStatusObjectIndexers

}

func initializeRPCRegistry(mdr *svcfw.MDRegistry) {

	mdr.RPCDeprecatedResponseFieldsRegistry["ves.io.schema.views.bigip_virtual_server.API.Get"] = []string{
		"replace_form.spec.enable_api_discovery.sensitive_data_detection_rules",
		"spec.domains.#",
		"spec.enable_api_discovery.sensitive_data_detection_rules",
	}

	mdr.RPCDeprecatedResponseFieldsRegistry["ves.io.schema.views.bigip_virtual_server.API.List"] = []string{
		"items.#.get_spec.domains.#",
		"items.#.get_spec.enable_api_discovery.sensitive_data_detection_rules",
	}

	mdr.RPCSubscriptionFieldsRegistry["ves.io.schema.views.bigip_virtual_server.API.Replace"] = []svcfw.SubscriptionField{
		{
			FieldPath:     "ves.io.schema.views.bigip_virtual_server.ReplaceRequest.spec.api_definition_choice.api_specification",
			AddonServices: []string{"f5xc-waap-advanced"},
		},
		{
			FieldPath:     "ves.io.schema.views.bigip_virtual_server.ReplaceRequest.spec.api_discovery_choice.enable_api_discovery",
			AddonServices: []string{"f5xc-waap-advanced"},
		},
	}

	mdr.RPCDeprecatedRequestFieldsRegistry["ves.io.schema.views.bigip_virtual_server.API.Replace"] = []string{
		"spec.enable_api_discovery.sensitive_data_detection_rules",
	}

	mdr.RPCHiddenInternalFieldsRegistry["ves.io.schema.views.bigip_virtual_server.API.Replace"] = []string{
		"spec.api_specification.validation_all_spec_endpoints.fall_through_mode.fall_through_mode_custom.open_api_validation_rules.#.metadata.disable",
		"spec.api_specification.validation_all_spec_endpoints.settings.fail_close",
		"spec.api_specification.validation_all_spec_endpoints.settings.fail_open",
		"spec.api_specification.validation_custom_list.fall_through_mode.fall_through_mode_custom.open_api_validation_rules.#.metadata.disable",
		"spec.api_specification.validation_custom_list.open_api_validation_rules.#.metadata.disable",
		"spec.api_specification.validation_custom_list.settings.fail_close",
		"spec.api_specification.validation_custom_list.settings.fail_open",
		"spec.enable_api_discovery.api_crawler.api_crawler_config.domains.#.simple_login.password.blindfold_secret_info_internal",
		"spec.enable_api_discovery.api_crawler.api_crawler_config.domains.#.simple_login.password.secret_encoding_type",
		"spec.enable_api_discovery.api_crawler.api_crawler_config.domains.#.simple_login.password.vault_secret_info",
		"spec.enable_api_discovery.api_crawler.api_crawler_config.domains.#.simple_login.password.wingman_secret_info",
		"spec.enable_api_discovery.sensitive_data_detection_rules",
	}

	mdr.RPCConfidentialRequestRegistry["ves.io.schema.views.bigip_virtual_server.API.Replace"] = "ves.io.schema.views.bigip_virtual_server.ReplaceRequest"

}

func initializeAPIGwServiceSlugsRegistry(sm map[string]string) {
	sm["ves.io.schema.views.bigip_virtual_server.API"] = "config"
	sm["ves.io.schema.views.bigip_virtual_server.CustomAPI"] = "config"

}

func initializeP0PolicyRegistry(sm map[string]svcfw.P0PolicyInfo) {

	sm["config"] = svcfw.P0PolicyInfo{
		Name:            "ves-io-allow-config",
		ServiceSelector: "akar\\.gc.*\\",
	}

}

func initializeCRUDServiceRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	var (
		csr       *svcfw.CRUDServiceRegistry
		customCSR *svcfw.CustomServiceRegistry
	)
	_, _ = csr, customCSR

	csr = mdr.PubCRUDServiceRegistry

	func() {
		// set swagger jsons for our and external schemas
		csr.CRUDSwaggerRegistry["ves.io.schema.views.bigip_virtual_server.Object"] = APISwaggerJSON
		csr.CRUDGrpcClientRegistry["ves.io.schema.views.bigip_virtual_server.Object"] = NewCRUDAPIGrpcClient
		csr.CRUDRestClientRegistry["ves.io.schema.views.bigip_virtual_server.Object"] = NewCRUDAPIRestClient
		csr.CRUDInprocClientRegistry["ves.io.schema.views.bigip_virtual_server.Object"] = NewCRUDAPIInprocClient
		if isExternal {
			return
		}
		// registration of api handlers if our own schema
		mdr.SvcRegisterHandlers["ves.io.schema.views.bigip_virtual_server.API"] = RegisterAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.views.bigip_virtual_server.API"] = RegisterGwAPIHandler
		csr.CRUDServerRegistry["ves.io.schema.views.bigip_virtual_server.Object"] = NewCRUDAPIServer

	}()

	customCSR = mdr.PubCustomServiceRegistry

	func() {
		// set swagger jsons for our and external schemas

		customCSR.SwaggerRegistry["ves.io.schema.views.bigip_virtual_server.Object"] = CustomAPISwaggerJSON

		customCSR.GrpcClientRegistry["ves.io.schema.views.bigip_virtual_server.CustomAPI"] = NewCustomAPIGrpcClient
		customCSR.RestClientRegistry["ves.io.schema.views.bigip_virtual_server.CustomAPI"] = NewCustomAPIRestClient
		if isExternal {
			return
		}
		mdr.SvcRegisterHandlers["ves.io.schema.views.bigip_virtual_server.CustomAPI"] = RegisterCustomAPIServer
		mdr.SvcGwRegisterHandlers["ves.io.schema.views.bigip_virtual_server.CustomAPI"] = RegisterGwCustomAPIHandler
		customCSR.ServerRegistry["ves.io.schema.views.bigip_virtual_server.CustomAPI"] = func(svc svcfw.Service) server.APIHandler {
			return NewCustomAPIServer(svc)
		}

	}()

}

func InitializeMDRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	initializeEntryRegistry(mdr)
	initializeValidatorRegistry(mdr.ValidatorRegistry)

	initializeCRUDServiceRegistry(mdr, isExternal)
	if isExternal {
		return
	}

	initializeRPCRegistry(mdr)
	initializeAPIGwServiceSlugsRegistry(mdr.APIGwServiceSlugs)
	initializeP0PolicyRegistry(mdr.P0PolicyRegistry)

}

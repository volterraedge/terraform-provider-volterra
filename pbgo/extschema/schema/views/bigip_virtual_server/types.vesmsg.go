// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package bigip_virtual_server

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_views_common_security "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_security"
	ves_io_schema_views_common_waf "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/common_waf"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetEnableApiDiscovery().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.enable_api_discovery")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetApiDefinitionChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDefinitionChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiDiscoveryChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDiscoveryChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSensitiveDataPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSensitiveDataPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServiceDiscoveryDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetServiceDiscoveryDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetApiDefinitionChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDefinitionChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDefinitionChoice().(type) {
	case *GetSpecType_DisableApiDefinition:

		return nil, nil

	case *GetSpecType_ApiSpecification:

		drInfos, err := m.GetApiSpecification().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiSpecification().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_specification." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetApiDiscoveryChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDiscoveryChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDiscoveryChoice().(type) {
	case *GetSpecType_DisableApiDiscovery:

		return nil, nil

	case *GetSpecType_EnableApiDiscovery:

		drInfos, err := m.GetEnableApiDiscovery().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableApiDiscovery().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_api_discovery." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetSensitiveDataPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSensitiveDataPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetSensitiveDataPolicyChoice().(type) {
	case *GetSpecType_DefaultSensitiveDataPolicy:

		return nil, nil

	case *GetSpecType_SensitiveDataPolicy:

		drInfos, err := m.GetSensitiveDataPolicy().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSensitiveDataPolicy().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sensitive_data_policy." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GetSpecType) GetServiceDiscoveryDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetServiceDiscovery()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("discovery.Object")
	dri := db.DRefInfo{
		RefdType:   "discovery.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "service_discovery",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetServiceDiscoveryDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetServiceDiscoveryDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "discovery.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: discovery")
	}

	vref := m.GetServiceDiscovery()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "discovery.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ApiDefinitionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_definition_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ApiDiscoveryChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_discovery_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) SensitiveDataPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for sensitive_data_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) ServiceDiscoveryValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for service_discovery")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) BigipVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bigip_version")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(BigIpVirtualServerType)
		return int32(i)
	}
	// BigIpVirtualServerType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, BigIpVirtualServerType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) ServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_definition_choice"]; exists {
		val := m.GetApiDefinitionChoice()
		vOpts := append(opts,
			db.WithValidateField("api_definition_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDefinitionChoice().(type) {
	case *GetSpecType_DisableApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.disable_api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*GetSpecType_DisableApiDefinition).DisableApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("disable_api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ApiSpecification:
		if fv, exists := v.FldValidators["api_definition_choice.api_specification"]; exists {
			val := m.GetApiDefinitionChoice().(*GetSpecType_ApiSpecification).ApiSpecification
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_specification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_discovery_choice"]; exists {
		val := m.GetApiDiscoveryChoice()
		vOpts := append(opts,
			db.WithValidateField("api_discovery_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDiscoveryChoice().(type) {
	case *GetSpecType_DisableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.disable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*GetSpecType_DisableApiDiscovery).DisableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("disable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_EnableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.enable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*GetSpecType_EnableApiDiscovery).EnableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("enable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["awaf_enforcement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("awaf_enforcement_mode"))
		if err := fv(ctx, m.GetAwafEnforcementMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["awaf_policy_name"]; exists {

		vOpts := append(opts, db.WithValidateField("awaf_policy_name"))
		if err := fv(ctx, m.GetAwafPolicyName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bigip_hostname"]; exists {

		vOpts := append(opts, db.WithValidateField("bigip_hostname"))
		if err := fv(ctx, m.GetBigipHostname(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bigip_version"]; exists {

		vOpts := append(opts, db.WithValidateField("bigip_version"))
		if err := fv(ctx, m.GetBigipVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bigip_vs_description"]; exists {

		vOpts := append(opts, db.WithValidateField("bigip_vs_description"))
		if err := fv(ctx, m.GetBigipVsDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_policy_choice"]; exists {
		val := m.GetSensitiveDataPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("sensitive_data_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSensitiveDataPolicyChoice().(type) {
	case *GetSpecType_DefaultSensitiveDataPolicy:
		if fv, exists := v.FldValidators["sensitive_data_policy_choice.default_sensitive_data_policy"]; exists {
			val := m.GetSensitiveDataPolicyChoice().(*GetSpecType_DefaultSensitiveDataPolicy).DefaultSensitiveDataPolicy
			vOpts := append(opts,
				db.WithValidateField("sensitive_data_policy_choice"),
				db.WithValidateField("default_sensitive_data_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_SensitiveDataPolicy:
		if fv, exists := v.FldValidators["sensitive_data_policy_choice.sensitive_data_policy"]; exists {
			val := m.GetSensitiveDataPolicyChoice().(*GetSpecType_SensitiveDataPolicy).SensitiveDataPolicy
			vOpts := append(opts,
				db.WithValidateField("sensitive_data_policy_choice"),
				db.WithValidateField("sensitive_data_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["server_name"]; exists {

		vOpts := append(opts, db.WithValidateField("server_name"))
		if err := fv(ctx, m.GetServerName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service_discovery"]; exists {

		vOpts := append(opts, db.WithValidateField("service_discovery"))
		if err := fv(ctx, m.GetServiceDiscovery(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiDefinitionChoice := v.ApiDefinitionChoiceValidationRuleHandler
	rulesApiDefinitionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDefinitionChoice(rulesApiDefinitionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.api_definition_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_definition_choice"] = vFn

	vrhApiDiscoveryChoice := v.ApiDiscoveryChoiceValidationRuleHandler
	rulesApiDiscoveryChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDiscoveryChoice(rulesApiDiscoveryChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.api_discovery_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_discovery_choice"] = vFn

	vrhSensitiveDataPolicyChoice := v.SensitiveDataPolicyChoiceValidationRuleHandler
	rulesSensitiveDataPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSensitiveDataPolicyChoice(rulesSensitiveDataPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.sensitive_data_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sensitive_data_policy_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhServiceDiscovery := v.ServiceDiscoveryValidationRuleHandler
	rulesServiceDiscovery := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhServiceDiscovery(rulesServiceDiscovery)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.service_discovery: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_discovery"] = vFn

	vrhBigipVersion := v.BigipVersionValidationRuleHandler
	rulesBigipVersion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "256",
	}
	vFn, err = vrhBigipVersion(rulesBigipVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.bigip_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bigip_version"] = vFn

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	vrhServerName := v.ServerNameValidationRuleHandler
	rulesServerName := map[string]string{
		"ves.io.schema.rules.string.max_len": "1024",
	}
	vFn, err = vrhServerName(rulesServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.server_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_name"] = vFn

	v.FldValidators["api_definition_choice.api_specification"] = ves_io_schema_views_common_waf.APISpecificationSettingsValidator().Validate

	v.FldValidators["api_discovery_choice.enable_api_discovery"] = ves_io_schema_views_common_waf.ApiDiscoverySettingValidator().Validate

	v.FldValidators["sensitive_data_policy_choice.sensitive_data_policy"] = ves_io_schema_views_common_security.SensitiveDataPolicySettingsValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetEnableApiDiscovery().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.enable_api_discovery")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetApiDefinitionChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDefinitionChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiDiscoveryChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDiscoveryChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSensitiveDataPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSensitiveDataPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetServiceDiscoveryDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetServiceDiscoveryDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetApiDefinitionChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDefinitionChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDefinitionChoice().(type) {
	case *GlobalSpecType_DisableApiDefinition:

		return nil, nil

	case *GlobalSpecType_ApiSpecification:

		drInfos, err := m.GetApiSpecification().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiSpecification().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_specification." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetApiDiscoveryChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDiscoveryChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDiscoveryChoice().(type) {
	case *GlobalSpecType_DisableApiDiscovery:

		return nil, nil

	case *GlobalSpecType_EnableApiDiscovery:

		drInfos, err := m.GetEnableApiDiscovery().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableApiDiscovery().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_api_discovery." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetSensitiveDataPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSensitiveDataPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetSensitiveDataPolicyChoice().(type) {
	case *GlobalSpecType_DefaultSensitiveDataPolicy:

		return nil, nil

	case *GlobalSpecType_SensitiveDataPolicy:

		drInfos, err := m.GetSensitiveDataPolicy().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSensitiveDataPolicy().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sensitive_data_policy." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetServiceDiscoveryDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetServiceDiscovery()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("discovery.Object")
	dri := db.DRefInfo{
		RefdType:   "discovery.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "service_discovery",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetServiceDiscoveryDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetServiceDiscoveryDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "discovery.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: discovery")
	}

	vref := m.GetServiceDiscovery()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "discovery.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ApiDefinitionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_definition_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ApiDiscoveryChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_discovery_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SensitiveDataPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for sensitive_data_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ServiceDiscoveryValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for service_discovery")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) BigipVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bigip_version")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(BigIpVirtualServerType)
		return int32(i)
	}
	// BigIpVirtualServerType_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, BigIpVirtualServerType_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) PartitionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for partition")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ClusterValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ServerNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for server_name")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_definition_choice"]; exists {
		val := m.GetApiDefinitionChoice()
		vOpts := append(opts,
			db.WithValidateField("api_definition_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDefinitionChoice().(type) {
	case *GlobalSpecType_DisableApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.disable_api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*GlobalSpecType_DisableApiDefinition).DisableApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("disable_api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ApiSpecification:
		if fv, exists := v.FldValidators["api_definition_choice.api_specification"]; exists {
			val := m.GetApiDefinitionChoice().(*GlobalSpecType_ApiSpecification).ApiSpecification
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_specification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_discovery_choice"]; exists {
		val := m.GetApiDiscoveryChoice()
		vOpts := append(opts,
			db.WithValidateField("api_discovery_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDiscoveryChoice().(type) {
	case *GlobalSpecType_DisableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.disable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*GlobalSpecType_DisableApiDiscovery).DisableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("disable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_EnableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.enable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*GlobalSpecType_EnableApiDiscovery).EnableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("enable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["awaf_enforcement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("awaf_enforcement_mode"))
		if err := fv(ctx, m.GetAwafEnforcementMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["awaf_policy_name"]; exists {

		vOpts := append(opts, db.WithValidateField("awaf_policy_name"))
		if err := fv(ctx, m.GetAwafPolicyName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bigip_hostname"]; exists {

		vOpts := append(opts, db.WithValidateField("bigip_hostname"))
		if err := fv(ctx, m.GetBigipHostname(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bigip_version"]; exists {

		vOpts := append(opts, db.WithValidateField("bigip_version"))
		if err := fv(ctx, m.GetBigipVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bigip_vs_description"]; exists {

		vOpts := append(opts, db.WithValidateField("bigip_vs_description"))
		if err := fv(ctx, m.GetBigipVsDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cluster"]; exists {

		vOpts := append(opts, db.WithValidateField("cluster"))
		if err := fv(ctx, m.GetCluster(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["partition"]; exists {

		vOpts := append(opts, db.WithValidateField("partition"))
		if err := fv(ctx, m.GetPartition(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_policy_choice"]; exists {
		val := m.GetSensitiveDataPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("sensitive_data_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSensitiveDataPolicyChoice().(type) {
	case *GlobalSpecType_DefaultSensitiveDataPolicy:
		if fv, exists := v.FldValidators["sensitive_data_policy_choice.default_sensitive_data_policy"]; exists {
			val := m.GetSensitiveDataPolicyChoice().(*GlobalSpecType_DefaultSensitiveDataPolicy).DefaultSensitiveDataPolicy
			vOpts := append(opts,
				db.WithValidateField("sensitive_data_policy_choice"),
				db.WithValidateField("default_sensitive_data_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_SensitiveDataPolicy:
		if fv, exists := v.FldValidators["sensitive_data_policy_choice.sensitive_data_policy"]; exists {
			val := m.GetSensitiveDataPolicyChoice().(*GlobalSpecType_SensitiveDataPolicy).SensitiveDataPolicy
			vOpts := append(opts,
				db.WithValidateField("sensitive_data_policy_choice"),
				db.WithValidateField("sensitive_data_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["server_name"]; exists {

		vOpts := append(opts, db.WithValidateField("server_name"))
		if err := fv(ctx, m.GetServerName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["service_discovery"]; exists {

		vOpts := append(opts, db.WithValidateField("service_discovery"))
		if err := fv(ctx, m.GetServiceDiscovery(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiDefinitionChoice := v.ApiDefinitionChoiceValidationRuleHandler
	rulesApiDefinitionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDefinitionChoice(rulesApiDefinitionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.api_definition_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_definition_choice"] = vFn

	vrhApiDiscoveryChoice := v.ApiDiscoveryChoiceValidationRuleHandler
	rulesApiDiscoveryChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDiscoveryChoice(rulesApiDiscoveryChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.api_discovery_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_discovery_choice"] = vFn

	vrhSensitiveDataPolicyChoice := v.SensitiveDataPolicyChoiceValidationRuleHandler
	rulesSensitiveDataPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSensitiveDataPolicyChoice(rulesSensitiveDataPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.sensitive_data_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sensitive_data_policy_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_len":   "256",
		"ves.io.schema.rules.repeated.items.string.min_len":   "1",
		"ves.io.schema.rules.repeated.items.string.vh_domain": "true",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhServiceDiscovery := v.ServiceDiscoveryValidationRuleHandler
	rulesServiceDiscovery := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhServiceDiscovery(rulesServiceDiscovery)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.service_discovery: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_discovery"] = vFn

	vrhBigipVersion := v.BigipVersionValidationRuleHandler
	rulesBigipVersion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "256",
	}
	vFn, err = vrhBigipVersion(rulesBigipVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.bigip_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bigip_version"] = vFn

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	vrhPartition := v.PartitionValidationRuleHandler
	rulesPartition := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhPartition(rulesPartition)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.partition: %s", err)
		panic(errMsg)
	}
	v.FldValidators["partition"] = vFn

	vrhCluster := v.ClusterValidationRuleHandler
	rulesCluster := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhCluster(rulesCluster)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.cluster: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster"] = vFn

	vrhServerName := v.ServerNameValidationRuleHandler
	rulesServerName := map[string]string{
		"ves.io.schema.rules.string.max_len": "1024",
	}
	vFn, err = vrhServerName(rulesServerName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.server_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["server_name"] = vFn

	v.FldValidators["api_definition_choice.api_specification"] = ves_io_schema_views_common_waf.APISpecificationSettingsValidator().Validate

	v.FldValidators["api_discovery_choice.enable_api_discovery"] = ves_io_schema_views_common_waf.ApiDiscoverySettingValidator().Validate

	v.FldValidators["sensitive_data_policy_choice.sensitive_data_policy"] = ves_io_schema_views_common_security.SensitiveDataPolicySettingsValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetEnableApiDiscovery().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.enable_api_discovery")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetApiDefinitionChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDefinitionChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetApiDiscoveryChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetApiDiscoveryChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSensitiveDataPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSensitiveDataPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetApiDefinitionChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDefinitionChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDefinitionChoice().(type) {
	case *ReplaceSpecType_DisableApiDefinition:

		return nil, nil

	case *ReplaceSpecType_ApiSpecification:

		drInfos, err := m.GetApiSpecification().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiSpecification().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_specification." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetApiDiscoveryChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetApiDiscoveryChoice() == nil {
		return nil, nil
	}
	switch m.GetApiDiscoveryChoice().(type) {
	case *ReplaceSpecType_DisableApiDiscovery:

		return nil, nil

	case *ReplaceSpecType_EnableApiDiscovery:

		drInfos, err := m.GetEnableApiDiscovery().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEnableApiDiscovery().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "enable_api_discovery." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetSensitiveDataPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSensitiveDataPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetSensitiveDataPolicyChoice().(type) {
	case *ReplaceSpecType_DefaultSensitiveDataPolicy:

		return nil, nil

	case *ReplaceSpecType_SensitiveDataPolicy:

		drInfos, err := m.GetSensitiveDataPolicy().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSensitiveDataPolicy().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sensitive_data_policy." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) ApiDefinitionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_definition_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ApiDiscoveryChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for api_discovery_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) SensitiveDataPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for sensitive_data_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_definition_choice"]; exists {
		val := m.GetApiDefinitionChoice()
		vOpts := append(opts,
			db.WithValidateField("api_definition_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDefinitionChoice().(type) {
	case *ReplaceSpecType_DisableApiDefinition:
		if fv, exists := v.FldValidators["api_definition_choice.disable_api_definition"]; exists {
			val := m.GetApiDefinitionChoice().(*ReplaceSpecType_DisableApiDefinition).DisableApiDefinition
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("disable_api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ApiSpecification:
		if fv, exists := v.FldValidators["api_definition_choice.api_specification"]; exists {
			val := m.GetApiDefinitionChoice().(*ReplaceSpecType_ApiSpecification).ApiSpecification
			vOpts := append(opts,
				db.WithValidateField("api_definition_choice"),
				db.WithValidateField("api_specification"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_discovery_choice"]; exists {
		val := m.GetApiDiscoveryChoice()
		vOpts := append(opts,
			db.WithValidateField("api_discovery_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetApiDiscoveryChoice().(type) {
	case *ReplaceSpecType_DisableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.disable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*ReplaceSpecType_DisableApiDiscovery).DisableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("disable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_EnableApiDiscovery:
		if fv, exists := v.FldValidators["api_discovery_choice.enable_api_discovery"]; exists {
			val := m.GetApiDiscoveryChoice().(*ReplaceSpecType_EnableApiDiscovery).EnableApiDiscovery
			vOpts := append(opts,
				db.WithValidateField("api_discovery_choice"),
				db.WithValidateField("enable_api_discovery"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["sensitive_data_policy_choice"]; exists {
		val := m.GetSensitiveDataPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("sensitive_data_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSensitiveDataPolicyChoice().(type) {
	case *ReplaceSpecType_DefaultSensitiveDataPolicy:
		if fv, exists := v.FldValidators["sensitive_data_policy_choice.default_sensitive_data_policy"]; exists {
			val := m.GetSensitiveDataPolicyChoice().(*ReplaceSpecType_DefaultSensitiveDataPolicy).DefaultSensitiveDataPolicy
			vOpts := append(opts,
				db.WithValidateField("sensitive_data_policy_choice"),
				db.WithValidateField("default_sensitive_data_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_SensitiveDataPolicy:
		if fv, exists := v.FldValidators["sensitive_data_policy_choice.sensitive_data_policy"]; exists {
			val := m.GetSensitiveDataPolicyChoice().(*ReplaceSpecType_SensitiveDataPolicy).SensitiveDataPolicy
			vOpts := append(opts,
				db.WithValidateField("sensitive_data_policy_choice"),
				db.WithValidateField("sensitive_data_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiDefinitionChoice := v.ApiDefinitionChoiceValidationRuleHandler
	rulesApiDefinitionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDefinitionChoice(rulesApiDefinitionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.api_definition_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_definition_choice"] = vFn

	vrhApiDiscoveryChoice := v.ApiDiscoveryChoiceValidationRuleHandler
	rulesApiDiscoveryChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhApiDiscoveryChoice(rulesApiDiscoveryChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.api_discovery_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_discovery_choice"] = vFn

	vrhSensitiveDataPolicyChoice := v.SensitiveDataPolicyChoiceValidationRuleHandler
	rulesSensitiveDataPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSensitiveDataPolicyChoice(rulesSensitiveDataPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.sensitive_data_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["sensitive_data_policy_choice"] = vFn

	v.FldValidators["api_definition_choice.api_specification"] = ves_io_schema_views_common_waf.APISpecificationSettingsValidator().Validate

	v.FldValidators["api_discovery_choice.enable_api_discovery"] = ves_io_schema_views_common_waf.ApiDiscoverySettingValidator().Validate

	v.FldValidators["sensitive_data_policy_choice.sensitive_data_policy"] = ves_io_schema_views_common_security.SensitiveDataPolicySettingsValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetApiDefinitionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ApiDefinitionChoice.(type) {
	case nil:
		o.ApiDefinitionChoice = nil

	case *GetSpecType_ApiSpecification:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiSpecification{ApiSpecification: of.ApiSpecification}

	case *GetSpecType_DisableApiDefinition:
		o.ApiDefinitionChoice = &GlobalSpecType_DisableApiDefinition{DisableApiDefinition: of.DisableApiDefinition}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetApiDefinitionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ApiDefinitionChoice.(type) {
	case nil:
		r.ApiDefinitionChoice = nil

	case *GlobalSpecType_ApiSpecification:
		r.ApiDefinitionChoice = &GetSpecType_ApiSpecification{ApiSpecification: of.ApiSpecification}

	case *GlobalSpecType_DisableApiDefinition:
		r.ApiDefinitionChoice = &GetSpecType_DisableApiDefinition{DisableApiDefinition: of.DisableApiDefinition}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetApiDiscoveryChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ApiDiscoveryChoice.(type) {
	case nil:
		o.ApiDiscoveryChoice = nil

	case *GetSpecType_DisableApiDiscovery:
		o.ApiDiscoveryChoice = &GlobalSpecType_DisableApiDiscovery{DisableApiDiscovery: of.DisableApiDiscovery}

	case *GetSpecType_EnableApiDiscovery:
		o.ApiDiscoveryChoice = &GlobalSpecType_EnableApiDiscovery{EnableApiDiscovery: of.EnableApiDiscovery}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetApiDiscoveryChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ApiDiscoveryChoice.(type) {
	case nil:
		r.ApiDiscoveryChoice = nil

	case *GlobalSpecType_DisableApiDiscovery:
		r.ApiDiscoveryChoice = &GetSpecType_DisableApiDiscovery{DisableApiDiscovery: of.DisableApiDiscovery}

	case *GlobalSpecType_EnableApiDiscovery:
		r.ApiDiscoveryChoice = &GetSpecType_EnableApiDiscovery{EnableApiDiscovery: of.EnableApiDiscovery}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetSensitiveDataPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SensitiveDataPolicyChoice.(type) {
	case nil:
		o.SensitiveDataPolicyChoice = nil

	case *GetSpecType_DefaultSensitiveDataPolicy:
		o.SensitiveDataPolicyChoice = &GlobalSpecType_DefaultSensitiveDataPolicy{DefaultSensitiveDataPolicy: of.DefaultSensitiveDataPolicy}

	case *GetSpecType_SensitiveDataPolicy:
		o.SensitiveDataPolicyChoice = &GlobalSpecType_SensitiveDataPolicy{SensitiveDataPolicy: of.SensitiveDataPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetSensitiveDataPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SensitiveDataPolicyChoice.(type) {
	case nil:
		r.SensitiveDataPolicyChoice = nil

	case *GlobalSpecType_DefaultSensitiveDataPolicy:
		r.SensitiveDataPolicyChoice = &GetSpecType_DefaultSensitiveDataPolicy{DefaultSensitiveDataPolicy: of.DefaultSensitiveDataPolicy}

	case *GlobalSpecType_SensitiveDataPolicy:
		r.SensitiveDataPolicyChoice = &GetSpecType_SensitiveDataPolicy{SensitiveDataPolicy: of.SensitiveDataPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetApiDefinitionChoiceFromGlobalSpecType(f)
	m.GetApiDiscoveryChoiceFromGlobalSpecType(f)
	m.AwafEnforcementMode = f.GetAwafEnforcementMode()
	m.AwafPolicyName = f.GetAwafPolicyName()
	m.BigipHostname = f.GetBigipHostname()
	m.BigipVersion = f.GetBigipVersion()
	m.BigipVsDescription = f.GetBigipVsDescription()
	m.Domains = f.GetDomains()
	m.GetSensitiveDataPolicyChoiceFromGlobalSpecType(f)
	m.ServerName = f.GetServerName()
	m.ServiceDiscovery = f.GetServiceDiscovery()
	m.Type = f.GetType()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetApiDefinitionChoiceToGlobalSpecType(f)
	m1.SetApiDiscoveryChoiceToGlobalSpecType(f)
	f.AwafEnforcementMode = m1.AwafEnforcementMode
	f.AwafPolicyName = m1.AwafPolicyName
	f.BigipHostname = m1.BigipHostname
	f.BigipVersion = m1.BigipVersion
	f.BigipVsDescription = m1.BigipVsDescription
	f.Domains = m1.Domains
	m1.SetSensitiveDataPolicyChoiceToGlobalSpecType(f)
	f.ServerName = m1.ServerName
	f.ServiceDiscovery = m1.ServiceDiscovery
	f.Type = m1.Type
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetApiDefinitionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ApiDefinitionChoice.(type) {
	case nil:
		o.ApiDefinitionChoice = nil

	case *ReplaceSpecType_ApiSpecification:
		o.ApiDefinitionChoice = &GlobalSpecType_ApiSpecification{ApiSpecification: of.ApiSpecification}

	case *ReplaceSpecType_DisableApiDefinition:
		o.ApiDefinitionChoice = &GlobalSpecType_DisableApiDefinition{DisableApiDefinition: of.DisableApiDefinition}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetApiDefinitionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ApiDefinitionChoice.(type) {
	case nil:
		r.ApiDefinitionChoice = nil

	case *GlobalSpecType_ApiSpecification:
		r.ApiDefinitionChoice = &ReplaceSpecType_ApiSpecification{ApiSpecification: of.ApiSpecification}

	case *GlobalSpecType_DisableApiDefinition:
		r.ApiDefinitionChoice = &ReplaceSpecType_DisableApiDefinition{DisableApiDefinition: of.DisableApiDefinition}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetApiDiscoveryChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ApiDiscoveryChoice.(type) {
	case nil:
		o.ApiDiscoveryChoice = nil

	case *ReplaceSpecType_DisableApiDiscovery:
		o.ApiDiscoveryChoice = &GlobalSpecType_DisableApiDiscovery{DisableApiDiscovery: of.DisableApiDiscovery}

	case *ReplaceSpecType_EnableApiDiscovery:
		o.ApiDiscoveryChoice = &GlobalSpecType_EnableApiDiscovery{EnableApiDiscovery: of.EnableApiDiscovery}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetApiDiscoveryChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ApiDiscoveryChoice.(type) {
	case nil:
		r.ApiDiscoveryChoice = nil

	case *GlobalSpecType_DisableApiDiscovery:
		r.ApiDiscoveryChoice = &ReplaceSpecType_DisableApiDiscovery{DisableApiDiscovery: of.DisableApiDiscovery}

	case *GlobalSpecType_EnableApiDiscovery:
		r.ApiDiscoveryChoice = &ReplaceSpecType_EnableApiDiscovery{EnableApiDiscovery: of.EnableApiDiscovery}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetSensitiveDataPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.SensitiveDataPolicyChoice.(type) {
	case nil:
		o.SensitiveDataPolicyChoice = nil

	case *ReplaceSpecType_DefaultSensitiveDataPolicy:
		o.SensitiveDataPolicyChoice = &GlobalSpecType_DefaultSensitiveDataPolicy{DefaultSensitiveDataPolicy: of.DefaultSensitiveDataPolicy}

	case *ReplaceSpecType_SensitiveDataPolicy:
		o.SensitiveDataPolicyChoice = &GlobalSpecType_SensitiveDataPolicy{SensitiveDataPolicy: of.SensitiveDataPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetSensitiveDataPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.SensitiveDataPolicyChoice.(type) {
	case nil:
		r.SensitiveDataPolicyChoice = nil

	case *GlobalSpecType_DefaultSensitiveDataPolicy:
		r.SensitiveDataPolicyChoice = &ReplaceSpecType_DefaultSensitiveDataPolicy{DefaultSensitiveDataPolicy: of.DefaultSensitiveDataPolicy}

	case *GlobalSpecType_SensitiveDataPolicy:
		r.SensitiveDataPolicyChoice = &ReplaceSpecType_SensitiveDataPolicy{SensitiveDataPolicy: of.SensitiveDataPolicy}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetApiDefinitionChoiceFromGlobalSpecType(f)
	m.GetApiDiscoveryChoiceFromGlobalSpecType(f)
	m.GetSensitiveDataPolicyChoiceFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetApiDefinitionChoiceToGlobalSpecType(f)
	m1.SetApiDiscoveryChoiceToGlobalSpecType(f)
	m1.SetSensitiveDataPolicyChoiceToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/securemesh_site_v2/types.proto

package securemesh_site_v2

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	fleet "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet"
	network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"
	network_interface "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_interface"
	site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	virtual_network "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_network"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the Secure Mesh site specification
type GlobalSpecType struct {
	// Provider Name
	//
	// x-displayName: "Provider Name"
	// x-required
	// Select the infrastructure provider to deploy the Secure Mesh Site.
	// For non-orchestrated sites, the 'Download Image' Action will download the infrastructure provider appropriate image.
	// This field cannot be changed after the site is created.
	//
	// Types that are valid to be assigned to ProviderChoice:
	//	*GlobalSpecType_Vmware
	//	*GlobalSpecType_Kvm
	//	*GlobalSpecType_Aws
	//	*GlobalSpecType_Azure
	//	*GlobalSpecType_Gcp
	//	*GlobalSpecType_Rseries
	//	*GlobalSpecType_Baremetal
	//	*GlobalSpecType_Oci
	//	*GlobalSpecType_Openstack
	//	*GlobalSpecType_Nutanix
	ProviderChoice isGlobalSpecType_ProviderChoice `protobuf_oneof:"provider_choice"`
	// Network Firewall
	//
	// x-displayName: "Network Firewall"
	// Attach Enhanced Network Firewall Policies to this site.
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*GlobalSpecType_NoNetworkPolicy
	//	*GlobalSpecType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isGlobalSpecType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Forward Proxy"
	// Attach Forward Proxy Policies to this site.
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*GlobalSpecType_NoForwardProxy
	//	*GlobalSpecType_ActiveForwardProxyPolicies
	ForwardProxyChoice isGlobalSpecType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// F5XC Software Settings
	//
	// x-displayName: "F5XC Software Settings"
	// Select OS and Software version for the site. All nodes in the site will run the same OS and Software version. These settings cannot be changed after the site is created.
	SoftwareSettings *SoftwareSettingsType `protobuf:"bytes,17,opt,name=software_settings,json=softwareSettings,proto3" json:"software_settings,omitempty"`
	// Upgrade Settings
	//
	// x-displayName: "Upgrade Settings"
	// Specify how a site will be upgraded.
	UpgradeSettings *UpgradeSettingsType `protobuf:"bytes,20,opt,name=upgrade_settings,json=upgradeSettings,proto3" json:"upgrade_settings,omitempty"`
	// Logs Streaming
	//
	// x-displayName: "Logs Streaming"
	// x-required
	// Select logs receiver to enable streaming load balancer request logs. You can configure a log receiver from the 'Log Management' section.
	//
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GlobalSpecType_LogsStreamingDisabled
	//	*GlobalSpecType_LogReceiver
	LogsReceiverChoice isGlobalSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Node Local Services
	//
	// x-displayName: "Node Local Services"
	// x-required
	// Manage node local services. You can enable WebUI, SSH and DNS on the nodes of the site for local management and troubleshooting. By default, these services are enabled.
	// You can choose to disable these services on the Site Local Outside (SLO) local VRF (which is used to connect the site to F5 Distributed Cloud for management)
	// or on the Site Local Inside (SLI) local VRF (if configured on the site).
	//
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*GlobalSpecType_BlockAllServices
	//	*GlobalSpecType_BlockedServices
	BlockedServicesChoice isGlobalSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	// Performance Enhancement Choice
	//
	// x-displayName: "Performance Enhancement Mode"
	// Optimize the site for L3 or L7 traffic processing. By default, the site is optimized for L7 traffic processing.
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,27,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
	// Offline Survivability Mode
	//
	// x-displayName: "Offline Survivability Mode"
	// Offline Survivability allows the Site to continue functioning normally without traffic loss during periods of connectivity loss to the Regional Edge (RE) or the Global Controller (GC).
	// When this feature is enabled, a site can continue to function as is with existing configuration for upto 7 days, even when the site is offline.
	// The certificates needed to keep the services running on this site are signed using a local CA.
	// Secrets would also be cached locally to handle any connectivity loss.
	// When the mode is toggled, services will restart and traffic disruption will be seen.
	OfflineSurvivabilityMode *views.OfflineSurvivabilityModeType `protobuf:"bytes,28,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	// tunnel_dead_timeout
	//
	// x-displayName: "Tunnel Dead Timeout (msec)"
	// x-example: "0"
	// Time interval, in millisec, within which any ipsec / ssl connection from the site going down is detected.
	// When not set (== 0), a default value of 10000 msec will be used.
	TunnelDeadTimeout uint32 `protobuf:"varint,29,opt,name=tunnel_dead_timeout,json=tunnelDeadTimeout,proto3" json:"tunnel_dead_timeout,omitempty"`
	// Load Balancing Settings
	//
	// x-displayName: "Load Balancing Settings"
	// This section contains settings on the site that relate to Load Balancing functionality.
	LoadBalancing *LoadBalancingSettingsType `protobuf:"bytes,30,opt,name=load_balancing,json=loadBalancing,proto3" json:"load_balancing,omitempty"`
	// Connect using SLI Local VRF
	//
	// x-displayName: "Connect using SLI Local VRF"
	// Use this site's Site Local Inside (SLI) Local VRF to connect to other sites.
	//
	// Types that are valid to be assigned to S2SConnectivitySliChoice:
	//	*GlobalSpecType_NoS2SConnectivitySli
	//	*GlobalSpecType_DcClusterGroupSli
	S2SConnectivitySliChoice isGlobalSpecType_S2SConnectivitySliChoice `protobuf_oneof:"s2s_connectivity_sli_choice"`
	// SLO Connectivity
	//
	// x-displayName: "Connect using SLO Local VRF"
	// Use this site's Site Local Outside (SLO) Local VRF to connect to other sites.
	//
	// Types that are valid to be assigned to S2SConnectivitySloChoice:
	//	*GlobalSpecType_NoS2SConnectivitySlo
	//	*GlobalSpecType_SiteMeshGroupOnSlo
	//	*GlobalSpecType_DcClusterGroupSlo
	S2SConnectivitySloChoice isGlobalSpecType_S2SConnectivitySloChoice `protobuf_oneof:"s2s_connectivity_slo_choice"`
	// Local VRF Settings
	//
	// x-displayName: "Local VRF Settings"
	// There can be two local VRFs on each site.
	// The Site Local Outside (SLO) local VRF is used to connect WAN side workloads to this site and to connect the site to F5 Distributed Cloud for management. All sites are required to have an SLO local VRF.
	// The Site Local Inside (SLI) local VRF is used to connect LAN side workloads to this site. SLI local VRF is optional.
	LocalVrf *LocalVRFSettingType `protobuf:"bytes,43,opt,name=local_vrf,json=localVrf,proto3" json:"local_vrf,omitempty"`
	// Site to site tunnel type
	//
	// x-displayName: "Tunnel Type"
	// Select the type of tunnel to be used for traffic between the site and REs. By default, IPsec will be preferred with SSL as backup.
	TunnelType schema.SiteToSiteTunnelType `protobuf:"varint,44,opt,name=tunnel_type,json=tunnelType,proto3,enum=ves.io.schema.SiteToSiteTunnelType" json:"tunnel_type,omitempty"`
	// Regional Edge Selection
	//
	// x-displayName: "Regional Edge Selection"
	// Selection criteria to connect the site with F5 Distributed Cloud Regional Edge(s).
	ReSelect *views.RegionalEdgeSelection `protobuf:"bytes,45,opt,name=re_select,json=reSelect,proto3" json:"re_select,omitempty"`
	// Software Version
	//
	// x-displayName: "Software Version"
	// x-example: "value"
	// Select the F5XC Software Version for the site. By default, latest available F5XC Software Version will be used.
	// Refer to release notes to find required released SW versions.
	VolterraSoftwareVersion string `protobuf:"bytes,47,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	// Operating System Version
	//
	// x-displayName: "Operating System Version"
	// x-example: "value"
	// Select the Operating System version for the site. By default, latest available Operating System version will be used.
	OperatingSystemVersion string `protobuf:"bytes,48,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	// High Availability
	//
	// x-displayName: "High Availability"
	// Select High Availability mode for this site.
	// When disabled, the site will not have local HA and will only run with 1 control node. The first node added to the site will register as a control node.
	// The site will come up as soon as the first node registers. Any additional nodes that are added will come up as worker nodes.
	// When enabled, the site will have local HA with 3 control nodes. The first 3 nodes added to the site will register as control nodes.
	// The site will come up after 3 nodes have registered. Any additional nodes that are added will come up as worker nodes.
	// This setting cannot be changed after the site is created.
	//
	// Types that are valid to be assigned to NodeHaChoice:
	//	*GlobalSpecType_DisableHa
	//	*GlobalSpecType_EnableHa
	NodeHaChoice isGlobalSpecType_NodeHaChoice `protobuf_oneof:"node_ha_choice"`
	// SiteState
	//
	// x-displayName: "SiteState"
	// State of the site deployment
	SiteState site.SiteState `protobuf:"varint,52,opt,name=site_state,json=siteState,proto3,enum=ves.io.schema.site.SiteState" json:"site_state,omitempty"`
	// Admin User Credentials
	//
	// x-displayName: "Admin User Credentials"
	// Setup user credentials to manage access to nodes belonging to the site.
	// When configured, 'admin' user will be setup and customers can access these nodes via
	// either the node local WebUI or via SSH to access shell/CLI
	AdminUserCredentials *views.AdminUserCredentialsType `protobuf:"bytes,53,opt,name=admin_user_credentials,json=adminUserCredentials,proto3" json:"admin_user_credentials,omitempty"`
	// Proactive Monitoring
	//
	// x-displayName: "Proactive Monitoring"
	// Enable proactive collection of debuglogs from this Customer Edge site to enable faster troubleshooting and issue resolution.
	// When enabled, nodes of this Customer Edge site will be able to stream required service debug logs to F5 Distributed Cloud.
	// When disabled, nodes of this Customer Edge site will not be able to send any debug logs and might cause delays in troubleshooting and issue resolution.
	// It is recommended to have this setting enabled.
	// Note: Only the relevant F5 Distributed Cloud software service logs will be transmitted. No customer sensitive data will be transmitted.
	ProactiveMonitoring *views.ProactiveMonitoringChoice `protobuf:"bytes,56,opt,name=proactive_monitoring,json=proactiveMonitoring,proto3" json:"proactive_monitoring,omitempty"`
	// Enterprise Proxy
	//
	// x-displayName: "Enterprise Proxy"
	// Choose how the nodes in this Customer Edge site will communicate with F5 Distributed Cloud SaaS services.
	// By default, all nodes will use the F5 Enterprise Proxy which is hosted on the F5 Global Network. This proxy will be used for node registration and upgrades.
	// This proxy will not be used for the Regional Edge (RE) tunnels from this Customer Edge site.
	// Customers can optionally choose to use an internal Enterprise Proxy.
	// If customers choose to use the internal Enterprise Proxy, in addition to node registrations and upgrades, the Regional Edge (RE) tunnels can also be configured to use this internal Enterprise Proxy.
	// Additionally, customers can configure their internal Enterprise Proxy to target the F5 Enterprise Proxy to handle domain resolution and network traffic for CE registrations and upgrades. Please refer to documentation for more details.
	//
	// Types that are valid to be assigned to EnterpriseProxyChoice:
	//	*GlobalSpecType_F5Proxy
	//	*GlobalSpecType_CustomProxy
	EnterpriseProxyChoice isGlobalSpecType_EnterpriseProxyChoice `protobuf_oneof:"enterprise_proxy_choice"`
	// DNS & NTP Servers
	//
	// x-displayName: "DNS & NTP Servers Settings"
	// Specify DNS and NTP servers that will be used by the nodes in this Customer Edge site.
	DnsNtpConfig *DNSNTPServerConfig `protobuf:"bytes,62,opt,name=dns_ntp_config,json=dnsNtpConfig,proto3" json:"dns_ntp_config,omitempty"`
	// address
	//
	// x-displayName: "Geographical Address"
	// x-example: "123 Street, city, country, postal code"
	// Site's geographical address that can be used determine its latitude and longitude.
	Address string `protobuf:"bytes,998,opt,name=address,proto3" json:"address,omitempty"`
	// coordinates
	//
	// x-displayName: "Coordinates"
	// Coordinates of the site, longitude and latitude
	Coordinates *site.Coordinates `protobuf:"bytes,999,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_ProviderChoice interface {
	isGlobalSpecType_ProviderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_NetworkPolicyChoice interface {
	isGlobalSpecType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ForwardProxyChoice interface {
	isGlobalSpecType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_LogsReceiverChoice interface {
	isGlobalSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_BlockedServicesChoice interface {
	isGlobalSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_S2SConnectivitySliChoice interface {
	isGlobalSpecType_S2SConnectivitySliChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_S2SConnectivitySloChoice interface {
	isGlobalSpecType_S2SConnectivitySloChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_NodeHaChoice interface {
	isGlobalSpecType_NodeHaChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_EnterpriseProxyChoice interface {
	isGlobalSpecType_EnterpriseProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Vmware struct {
	Vmware *VMwareProviderType `protobuf:"bytes,2,opt,name=vmware,proto3,oneof" json:"vmware,omitempty"`
}
type GlobalSpecType_Kvm struct {
	Kvm *KVMProviderType `protobuf:"bytes,3,opt,name=kvm,proto3,oneof" json:"kvm,omitempty"`
}
type GlobalSpecType_Aws struct {
	Aws *AWSProviderType `protobuf:"bytes,4,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}
type GlobalSpecType_Azure struct {
	Azure *AzureProviderType `protobuf:"bytes,5,opt,name=azure,proto3,oneof" json:"azure,omitempty"`
}
type GlobalSpecType_Gcp struct {
	Gcp *GCPProviderType `protobuf:"bytes,6,opt,name=gcp,proto3,oneof" json:"gcp,omitempty"`
}
type GlobalSpecType_Rseries struct {
	Rseries *RSeriesProviderType `protobuf:"bytes,7,opt,name=rseries,proto3,oneof" json:"rseries,omitempty"`
}
type GlobalSpecType_Baremetal struct {
	Baremetal *BaremetalProviderType `protobuf:"bytes,8,opt,name=baremetal,proto3,oneof" json:"baremetal,omitempty"`
}
type GlobalSpecType_Oci struct {
	Oci *OCIProviderType `protobuf:"bytes,9,opt,name=oci,proto3,oneof" json:"oci,omitempty"`
}
type GlobalSpecType_Openstack struct {
	Openstack *OpenstackProviderType `protobuf:"bytes,54,opt,name=openstack,proto3,oneof" json:"openstack,omitempty"`
}
type GlobalSpecType_Nutanix struct {
	Nutanix *NutanixProviderType `protobuf:"bytes,55,opt,name=nutanix,proto3,oneof" json:"nutanix,omitempty"`
}
type GlobalSpecType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,12,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type GlobalSpecType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,13,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type GlobalSpecType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,15,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type GlobalSpecType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,16,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type GlobalSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,22,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type GlobalSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,23,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type GlobalSpecType_BlockAllServices struct {
	BlockAllServices *schema.Empty `protobuf:"bytes,25,opt,name=block_all_services,json=blockAllServices,proto3,oneof" json:"block_all_services,omitempty"`
}
type GlobalSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,26,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}
type GlobalSpecType_NoS2SConnectivitySli struct {
	NoS2SConnectivitySli *schema.Empty `protobuf:"bytes,33,opt,name=no_s2s_connectivity_sli,json=noS2sConnectivitySli,proto3,oneof" json:"no_s2s_connectivity_sli,omitempty"`
}
type GlobalSpecType_DcClusterGroupSli struct {
	DcClusterGroupSli *views.ObjectRefType `protobuf:"bytes,34,opt,name=dc_cluster_group_sli,json=dcClusterGroupSli,proto3,oneof" json:"dc_cluster_group_sli,omitempty"`
}
type GlobalSpecType_NoS2SConnectivitySlo struct {
	NoS2SConnectivitySlo *schema.Empty `protobuf:"bytes,36,opt,name=no_s2s_connectivity_slo,json=noS2sConnectivitySlo,proto3,oneof" json:"no_s2s_connectivity_slo,omitempty"`
}
type GlobalSpecType_SiteMeshGroupOnSlo struct {
	SiteMeshGroupOnSlo *SiteMeshGroupType `protobuf:"bytes,37,opt,name=site_mesh_group_on_slo,json=siteMeshGroupOnSlo,proto3,oneof" json:"site_mesh_group_on_slo,omitempty"`
}
type GlobalSpecType_DcClusterGroupSlo struct {
	DcClusterGroupSlo *views.ObjectRefType `protobuf:"bytes,38,opt,name=dc_cluster_group_slo,json=dcClusterGroupSlo,proto3,oneof" json:"dc_cluster_group_slo,omitempty"`
}
type GlobalSpecType_DisableHa struct {
	DisableHa *schema.Empty `protobuf:"bytes,50,opt,name=disable_ha,json=disableHa,proto3,oneof" json:"disable_ha,omitempty"`
}
type GlobalSpecType_EnableHa struct {
	EnableHa *schema.Empty `protobuf:"bytes,51,opt,name=enable_ha,json=enableHa,proto3,oneof" json:"enable_ha,omitempty"`
}
type GlobalSpecType_F5Proxy struct {
	F5Proxy *schema.Empty `protobuf:"bytes,60,opt,name=f5_proxy,json=f5Proxy,proto3,oneof" json:"f5_proxy,omitempty"`
}
type GlobalSpecType_CustomProxy struct {
	CustomProxy *CustomProxy `protobuf:"bytes,61,opt,name=custom_proxy,json=customProxy,proto3,oneof" json:"custom_proxy,omitempty"`
}

func (*GlobalSpecType_Vmware) isGlobalSpecType_ProviderChoice()                              {}
func (*GlobalSpecType_Kvm) isGlobalSpecType_ProviderChoice()                                 {}
func (*GlobalSpecType_Aws) isGlobalSpecType_ProviderChoice()                                 {}
func (*GlobalSpecType_Azure) isGlobalSpecType_ProviderChoice()                               {}
func (*GlobalSpecType_Gcp) isGlobalSpecType_ProviderChoice()                                 {}
func (*GlobalSpecType_Rseries) isGlobalSpecType_ProviderChoice()                             {}
func (*GlobalSpecType_Baremetal) isGlobalSpecType_ProviderChoice()                           {}
func (*GlobalSpecType_Oci) isGlobalSpecType_ProviderChoice()                                 {}
func (*GlobalSpecType_Openstack) isGlobalSpecType_ProviderChoice()                           {}
func (*GlobalSpecType_Nutanix) isGlobalSpecType_ProviderChoice()                             {}
func (*GlobalSpecType_NoNetworkPolicy) isGlobalSpecType_NetworkPolicyChoice()                {}
func (*GlobalSpecType_ActiveEnhancedFirewallPolicies) isGlobalSpecType_NetworkPolicyChoice() {}
func (*GlobalSpecType_NoForwardProxy) isGlobalSpecType_ForwardProxyChoice()                  {}
func (*GlobalSpecType_ActiveForwardProxyPolicies) isGlobalSpecType_ForwardProxyChoice()      {}
func (*GlobalSpecType_LogsStreamingDisabled) isGlobalSpecType_LogsReceiverChoice()           {}
func (*GlobalSpecType_LogReceiver) isGlobalSpecType_LogsReceiverChoice()                     {}
func (*GlobalSpecType_BlockAllServices) isGlobalSpecType_BlockedServicesChoice()             {}
func (*GlobalSpecType_BlockedServices) isGlobalSpecType_BlockedServicesChoice()              {}
func (*GlobalSpecType_NoS2SConnectivitySli) isGlobalSpecType_S2SConnectivitySliChoice()      {}
func (*GlobalSpecType_DcClusterGroupSli) isGlobalSpecType_S2SConnectivitySliChoice()         {}
func (*GlobalSpecType_NoS2SConnectivitySlo) isGlobalSpecType_S2SConnectivitySloChoice()      {}
func (*GlobalSpecType_SiteMeshGroupOnSlo) isGlobalSpecType_S2SConnectivitySloChoice()        {}
func (*GlobalSpecType_DcClusterGroupSlo) isGlobalSpecType_S2SConnectivitySloChoice()         {}
func (*GlobalSpecType_DisableHa) isGlobalSpecType_NodeHaChoice()                             {}
func (*GlobalSpecType_EnableHa) isGlobalSpecType_NodeHaChoice()                              {}
func (*GlobalSpecType_F5Proxy) isGlobalSpecType_EnterpriseProxyChoice()                      {}
func (*GlobalSpecType_CustomProxy) isGlobalSpecType_EnterpriseProxyChoice()                  {}

func (m *GlobalSpecType) GetProviderChoice() isGlobalSpecType_ProviderChoice {
	if m != nil {
		return m.ProviderChoice
	}
	return nil
}
func (m *GlobalSpecType) GetNetworkPolicyChoice() isGlobalSpecType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *GlobalSpecType) GetForwardProxyChoice() isGlobalSpecType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *GlobalSpecType) GetLogsReceiverChoice() isGlobalSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *GlobalSpecType) GetBlockedServicesChoice() isGlobalSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}
func (m *GlobalSpecType) GetS2SConnectivitySliChoice() isGlobalSpecType_S2SConnectivitySliChoice {
	if m != nil {
		return m.S2SConnectivitySliChoice
	}
	return nil
}
func (m *GlobalSpecType) GetS2SConnectivitySloChoice() isGlobalSpecType_S2SConnectivitySloChoice {
	if m != nil {
		return m.S2SConnectivitySloChoice
	}
	return nil
}
func (m *GlobalSpecType) GetNodeHaChoice() isGlobalSpecType_NodeHaChoice {
	if m != nil {
		return m.NodeHaChoice
	}
	return nil
}
func (m *GlobalSpecType) GetEnterpriseProxyChoice() isGlobalSpecType_EnterpriseProxyChoice {
	if m != nil {
		return m.EnterpriseProxyChoice
	}
	return nil
}

func (m *GlobalSpecType) GetVmware() *VMwareProviderType {
	if x, ok := m.GetProviderChoice().(*GlobalSpecType_Vmware); ok {
		return x.Vmware
	}
	return nil
}

func (m *GlobalSpecType) GetKvm() *KVMProviderType {
	if x, ok := m.GetProviderChoice().(*GlobalSpecType_Kvm); ok {
		return x.Kvm
	}
	return nil
}

func (m *GlobalSpecType) GetAws() *AWSProviderType {
	if x, ok := m.GetProviderChoice().(*GlobalSpecType_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *GlobalSpecType) GetAzure() *AzureProviderType {
	if x, ok := m.GetProviderChoice().(*GlobalSpecType_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *GlobalSpecType) GetGcp() *GCPProviderType {
	if x, ok := m.GetProviderChoice().(*GlobalSpecType_Gcp); ok {
		return x.Gcp
	}
	return nil
}

func (m *GlobalSpecType) GetRseries() *RSeriesProviderType {
	if x, ok := m.GetProviderChoice().(*GlobalSpecType_Rseries); ok {
		return x.Rseries
	}
	return nil
}

func (m *GlobalSpecType) GetBaremetal() *BaremetalProviderType {
	if x, ok := m.GetProviderChoice().(*GlobalSpecType_Baremetal); ok {
		return x.Baremetal
	}
	return nil
}

func (m *GlobalSpecType) GetOci() *OCIProviderType {
	if x, ok := m.GetProviderChoice().(*GlobalSpecType_Oci); ok {
		return x.Oci
	}
	return nil
}

func (m *GlobalSpecType) GetOpenstack() *OpenstackProviderType {
	if x, ok := m.GetProviderChoice().(*GlobalSpecType_Openstack); ok {
		return x.Openstack
	}
	return nil
}

func (m *GlobalSpecType) GetNutanix() *NutanixProviderType {
	if x, ok := m.GetProviderChoice().(*GlobalSpecType_Nutanix); ok {
		return x.Nutanix
	}
	return nil
}

func (m *GlobalSpecType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*GlobalSpecType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*GlobalSpecType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *GlobalSpecType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*GlobalSpecType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *GlobalSpecType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*GlobalSpecType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *GlobalSpecType) GetSoftwareSettings() *SoftwareSettingsType {
	if m != nil {
		return m.SoftwareSettings
	}
	return nil
}

func (m *GlobalSpecType) GetUpgradeSettings() *UpgradeSettingsType {
	if m != nil {
		return m.UpgradeSettings
	}
	return nil
}

func (m *GlobalSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GlobalSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GlobalSpecType) GetBlockAllServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockAllServices); ok {
		return x.BlockAllServices
	}
	return nil
}

func (m *GlobalSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *GlobalSpecType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

func (m *GlobalSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *GlobalSpecType) GetTunnelDeadTimeout() uint32 {
	if m != nil {
		return m.TunnelDeadTimeout
	}
	return 0
}

func (m *GlobalSpecType) GetLoadBalancing() *LoadBalancingSettingsType {
	if m != nil {
		return m.LoadBalancing
	}
	return nil
}

func (m *GlobalSpecType) GetNoS2SConnectivitySli() *schema.Empty {
	if x, ok := m.GetS2SConnectivitySliChoice().(*GlobalSpecType_NoS2SConnectivitySli); ok {
		return x.NoS2SConnectivitySli
	}
	return nil
}

func (m *GlobalSpecType) GetDcClusterGroupSli() *views.ObjectRefType {
	if x, ok := m.GetS2SConnectivitySliChoice().(*GlobalSpecType_DcClusterGroupSli); ok {
		return x.DcClusterGroupSli
	}
	return nil
}

func (m *GlobalSpecType) GetNoS2SConnectivitySlo() *schema.Empty {
	if x, ok := m.GetS2SConnectivitySloChoice().(*GlobalSpecType_NoS2SConnectivitySlo); ok {
		return x.NoS2SConnectivitySlo
	}
	return nil
}

func (m *GlobalSpecType) GetSiteMeshGroupOnSlo() *SiteMeshGroupType {
	if x, ok := m.GetS2SConnectivitySloChoice().(*GlobalSpecType_SiteMeshGroupOnSlo); ok {
		return x.SiteMeshGroupOnSlo
	}
	return nil
}

func (m *GlobalSpecType) GetDcClusterGroupSlo() *views.ObjectRefType {
	if x, ok := m.GetS2SConnectivitySloChoice().(*GlobalSpecType_DcClusterGroupSlo); ok {
		return x.DcClusterGroupSlo
	}
	return nil
}

func (m *GlobalSpecType) GetLocalVrf() *LocalVRFSettingType {
	if m != nil {
		return m.LocalVrf
	}
	return nil
}

func (m *GlobalSpecType) GetTunnelType() schema.SiteToSiteTunnelType {
	if m != nil {
		return m.TunnelType
	}
	return schema.SITE_TO_SITE_TUNNEL_IPSEC_OR_SSL
}

func (m *GlobalSpecType) GetReSelect() *views.RegionalEdgeSelection {
	if m != nil {
		return m.ReSelect
	}
	return nil
}

func (m *GlobalSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GlobalSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GlobalSpecType) GetDisableHa() *schema.Empty {
	if x, ok := m.GetNodeHaChoice().(*GlobalSpecType_DisableHa); ok {
		return x.DisableHa
	}
	return nil
}

func (m *GlobalSpecType) GetEnableHa() *schema.Empty {
	if x, ok := m.GetNodeHaChoice().(*GlobalSpecType_EnableHa); ok {
		return x.EnableHa
	}
	return nil
}

func (m *GlobalSpecType) GetSiteState() site.SiteState {
	if m != nil {
		return m.SiteState
	}
	return site.ONLINE
}

func (m *GlobalSpecType) GetAdminUserCredentials() *views.AdminUserCredentialsType {
	if m != nil {
		return m.AdminUserCredentials
	}
	return nil
}

func (m *GlobalSpecType) GetProactiveMonitoring() *views.ProactiveMonitoringChoice {
	if m != nil {
		return m.ProactiveMonitoring
	}
	return nil
}

func (m *GlobalSpecType) GetF5Proxy() *schema.Empty {
	if x, ok := m.GetEnterpriseProxyChoice().(*GlobalSpecType_F5Proxy); ok {
		return x.F5Proxy
	}
	return nil
}

func (m *GlobalSpecType) GetCustomProxy() *CustomProxy {
	if x, ok := m.GetEnterpriseProxyChoice().(*GlobalSpecType_CustomProxy); ok {
		return x.CustomProxy
	}
	return nil
}

func (m *GlobalSpecType) GetDnsNtpConfig() *DNSNTPServerConfig {
	if m != nil {
		return m.DnsNtpConfig
	}
	return nil
}

func (m *GlobalSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GlobalSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_Vmware)(nil),
		(*GlobalSpecType_Kvm)(nil),
		(*GlobalSpecType_Aws)(nil),
		(*GlobalSpecType_Azure)(nil),
		(*GlobalSpecType_Gcp)(nil),
		(*GlobalSpecType_Rseries)(nil),
		(*GlobalSpecType_Baremetal)(nil),
		(*GlobalSpecType_Oci)(nil),
		(*GlobalSpecType_Openstack)(nil),
		(*GlobalSpecType_Nutanix)(nil),
		(*GlobalSpecType_NoNetworkPolicy)(nil),
		(*GlobalSpecType_ActiveEnhancedFirewallPolicies)(nil),
		(*GlobalSpecType_NoForwardProxy)(nil),
		(*GlobalSpecType_ActiveForwardProxyPolicies)(nil),
		(*GlobalSpecType_LogsStreamingDisabled)(nil),
		(*GlobalSpecType_LogReceiver)(nil),
		(*GlobalSpecType_BlockAllServices)(nil),
		(*GlobalSpecType_BlockedServices)(nil),
		(*GlobalSpecType_NoS2SConnectivitySli)(nil),
		(*GlobalSpecType_DcClusterGroupSli)(nil),
		(*GlobalSpecType_NoS2SConnectivitySlo)(nil),
		(*GlobalSpecType_SiteMeshGroupOnSlo)(nil),
		(*GlobalSpecType_DcClusterGroupSlo)(nil),
		(*GlobalSpecType_DisableHa)(nil),
		(*GlobalSpecType_EnableHa)(nil),
		(*GlobalSpecType_F5Proxy)(nil),
		(*GlobalSpecType_CustomProxy)(nil),
	}
}

// DNS & NTP Servers
//
// x-displayName: "DNS & NTP Servers Settings"
// Specify DNS and NTP servers that will be used by the nodes in this Customer Edge site.
type DNSNTPServerConfig struct {
	// DNS Servers
	//
	// x-displayName: "DNS Servers"
	// Specify DNS Servers that will be used for resolving domains required for registration and upgrades. By default, 8.8.8.8 and 8.8.4.4 DNS nameservers will be used.
	//
	// Types that are valid to be assigned to DnsServerChoice:
	//	*DNSNTPServerConfig_F5DnsDefault
	//	*DNSNTPServerConfig_CustomDns
	DnsServerChoice isDNSNTPServerConfig_DnsServerChoice `protobuf_oneof:"dns_server_choice"`
	// NTP Servers
	//
	// x-displayName: "NTP Servers"
	// Specify NTP Servers that will be by the nodes of this Customer Edge site.
	// By default, time.google.com is used during registration and once tunnels to REs are formed, NTP service hosted by F5 Distributed Cloud will be used.
	// When custom is selected, NTP service hosted by F5 Distributed Cloud will not be used.
	//
	// Types that are valid to be assigned to NtpServerChoice:
	//	*DNSNTPServerConfig_F5NtpDefault
	//	*DNSNTPServerConfig_CustomNtp
	NtpServerChoice isDNSNTPServerConfig_NtpServerChoice `protobuf_oneof:"ntp_server_choice"`
}

func (m *DNSNTPServerConfig) Reset()      { *m = DNSNTPServerConfig{} }
func (*DNSNTPServerConfig) ProtoMessage() {}
func (*DNSNTPServerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{1}
}
func (m *DNSNTPServerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSNTPServerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSNTPServerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSNTPServerConfig.Merge(m, src)
}
func (m *DNSNTPServerConfig) XXX_Size() int {
	return m.Size()
}
func (m *DNSNTPServerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSNTPServerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DNSNTPServerConfig proto.InternalMessageInfo

type isDNSNTPServerConfig_DnsServerChoice interface {
	isDNSNTPServerConfig_DnsServerChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDNSNTPServerConfig_NtpServerChoice interface {
	isDNSNTPServerConfig_NtpServerChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DNSNTPServerConfig_F5DnsDefault struct {
	F5DnsDefault *schema.Empty `protobuf:"bytes,4,opt,name=f5_dns_default,json=f5DnsDefault,proto3,oneof" json:"f5_dns_default,omitempty"`
}
type DNSNTPServerConfig_CustomDns struct {
	CustomDns *CustomDNSSettings `protobuf:"bytes,5,opt,name=custom_dns,json=customDns,proto3,oneof" json:"custom_dns,omitempty"`
}
type DNSNTPServerConfig_F5NtpDefault struct {
	F5NtpDefault *schema.Empty `protobuf:"bytes,7,opt,name=f5_ntp_default,json=f5NtpDefault,proto3,oneof" json:"f5_ntp_default,omitempty"`
}
type DNSNTPServerConfig_CustomNtp struct {
	CustomNtp *CustomNTPSettings `protobuf:"bytes,8,opt,name=custom_ntp,json=customNtp,proto3,oneof" json:"custom_ntp,omitempty"`
}

func (*DNSNTPServerConfig_F5DnsDefault) isDNSNTPServerConfig_DnsServerChoice() {}
func (*DNSNTPServerConfig_CustomDns) isDNSNTPServerConfig_DnsServerChoice()    {}
func (*DNSNTPServerConfig_F5NtpDefault) isDNSNTPServerConfig_NtpServerChoice() {}
func (*DNSNTPServerConfig_CustomNtp) isDNSNTPServerConfig_NtpServerChoice()    {}

func (m *DNSNTPServerConfig) GetDnsServerChoice() isDNSNTPServerConfig_DnsServerChoice {
	if m != nil {
		return m.DnsServerChoice
	}
	return nil
}
func (m *DNSNTPServerConfig) GetNtpServerChoice() isDNSNTPServerConfig_NtpServerChoice {
	if m != nil {
		return m.NtpServerChoice
	}
	return nil
}

func (m *DNSNTPServerConfig) GetF5DnsDefault() *schema.Empty {
	if x, ok := m.GetDnsServerChoice().(*DNSNTPServerConfig_F5DnsDefault); ok {
		return x.F5DnsDefault
	}
	return nil
}

func (m *DNSNTPServerConfig) GetCustomDns() *CustomDNSSettings {
	if x, ok := m.GetDnsServerChoice().(*DNSNTPServerConfig_CustomDns); ok {
		return x.CustomDns
	}
	return nil
}

func (m *DNSNTPServerConfig) GetF5NtpDefault() *schema.Empty {
	if x, ok := m.GetNtpServerChoice().(*DNSNTPServerConfig_F5NtpDefault); ok {
		return x.F5NtpDefault
	}
	return nil
}

func (m *DNSNTPServerConfig) GetCustomNtp() *CustomNTPSettings {
	if x, ok := m.GetNtpServerChoice().(*DNSNTPServerConfig_CustomNtp); ok {
		return x.CustomNtp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DNSNTPServerConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DNSNTPServerConfig_F5DnsDefault)(nil),
		(*DNSNTPServerConfig_CustomDns)(nil),
		(*DNSNTPServerConfig_F5NtpDefault)(nil),
		(*DNSNTPServerConfig_CustomNtp)(nil),
	}
}

// DNS Servers
//
// x-displayName: "DNS Servers"
// DNS Servers
type CustomDNSSettings struct {
	// DNS Servers
	//
	// x-displayName: "DNS Servers"
	// DNS Servers
	DnsServers []string `protobuf:"bytes,1,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
}

func (m *CustomDNSSettings) Reset()      { *m = CustomDNSSettings{} }
func (*CustomDNSSettings) ProtoMessage() {}
func (*CustomDNSSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{2}
}
func (m *CustomDNSSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomDNSSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomDNSSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomDNSSettings.Merge(m, src)
}
func (m *CustomDNSSettings) XXX_Size() int {
	return m.Size()
}
func (m *CustomDNSSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomDNSSettings.DiscardUnknown(m)
}

var xxx_messageInfo_CustomDNSSettings proto.InternalMessageInfo

func (m *CustomDNSSettings) GetDnsServers() []string {
	if m != nil {
		return m.DnsServers
	}
	return nil
}

// NTP Servers
//
// x-displayName: "NTP Servers"
// NTP Servers
type CustomNTPSettings struct {
	// NTP Servers
	//
	// x-displayName: "NTP Servers"
	// NTP Servers
	NtpServers []string `protobuf:"bytes,1,rep,name=ntp_servers,json=ntpServers,proto3" json:"ntp_servers,omitempty"`
}

func (m *CustomNTPSettings) Reset()      { *m = CustomNTPSettings{} }
func (*CustomNTPSettings) ProtoMessage() {}
func (*CustomNTPSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{3}
}
func (m *CustomNTPSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomNTPSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomNTPSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomNTPSettings.Merge(m, src)
}
func (m *CustomNTPSettings) XXX_Size() int {
	return m.Size()
}
func (m *CustomNTPSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomNTPSettings.DiscardUnknown(m)
}

var xxx_messageInfo_CustomNTPSettings proto.InternalMessageInfo

func (m *CustomNTPSettings) GetNtpServers() []string {
	if m != nil {
		return m.NtpServers
	}
	return nil
}

// Custom Enterprise Proxy
//
// x-displayName: "Custom Enterprise Proxy"
// Custom Enterprise Proxy
type CustomProxy struct {
	// Proxy IPv4 Address
	//
	// x-displayName: "Proxy IPv4 Address"
	// x-example: "123.234.0.1"
	// x-required
	// Specify the IPv4 Address of the internal Enterprise Proxy
	ProxyIpAddress string `protobuf:"bytes,1,opt,name=proxy_ip_address,json=proxyIpAddress,proto3" json:"proxy_ip_address,omitempty"`
	// Proxy Port
	//
	// x-displayName: "Proxy Port"
	// x-example: 443
	// x-required
	// Specify the Port of the internal Enterprise Proxy
	ProxyPort uint32 `protobuf:"varint,2,opt,name=proxy_port,json=proxyPort,proto3" json:"proxy_port,omitempty"`
	// Username
	//
	// x-displayName: "Username"
	// If the internal Enterprise Proxy is using basic authentication, specify the username. This is an optional field.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// Password
	//
	// x-displayName: "Password"
	// If the internal Enterprise Proxy is using basic authentication, specify the password. This is an optional field.
	// Note: To protect the password, it is recommended to blindfold it.
	Password *schema.SecretType `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// Use for RE Tunnels
	//
	// x-displayName: "Use for RE Tunnels"
	// Use this internal Enterprise Proxy for RE Tunnels.
	// When enabled, the nodes in this Customer Edge site will go through this internal Enterprise Proxy to form tunnels with F5 Regional Edges (REs)
	//
	// Types that are valid to be assigned to UseForReTunnelChoice:
	//	*CustomProxy_DisableReTunnel
	//	*CustomProxy_EnableReTunnel
	UseForReTunnelChoice isCustomProxy_UseForReTunnelChoice `protobuf_oneof:"use_for_re_tunnel_choice"`
}

func (m *CustomProxy) Reset()      { *m = CustomProxy{} }
func (*CustomProxy) ProtoMessage() {}
func (*CustomProxy) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{4}
}
func (m *CustomProxy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomProxy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomProxy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomProxy.Merge(m, src)
}
func (m *CustomProxy) XXX_Size() int {
	return m.Size()
}
func (m *CustomProxy) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomProxy.DiscardUnknown(m)
}

var xxx_messageInfo_CustomProxy proto.InternalMessageInfo

type isCustomProxy_UseForReTunnelChoice interface {
	isCustomProxy_UseForReTunnelChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CustomProxy_DisableReTunnel struct {
	DisableReTunnel *schema.Empty `protobuf:"bytes,6,opt,name=disable_re_tunnel,json=disableReTunnel,proto3,oneof" json:"disable_re_tunnel,omitempty"`
}
type CustomProxy_EnableReTunnel struct {
	EnableReTunnel *schema.Empty `protobuf:"bytes,7,opt,name=enable_re_tunnel,json=enableReTunnel,proto3,oneof" json:"enable_re_tunnel,omitempty"`
}

func (*CustomProxy_DisableReTunnel) isCustomProxy_UseForReTunnelChoice() {}
func (*CustomProxy_EnableReTunnel) isCustomProxy_UseForReTunnelChoice()  {}

func (m *CustomProxy) GetUseForReTunnelChoice() isCustomProxy_UseForReTunnelChoice {
	if m != nil {
		return m.UseForReTunnelChoice
	}
	return nil
}

func (m *CustomProxy) GetProxyIpAddress() string {
	if m != nil {
		return m.ProxyIpAddress
	}
	return ""
}

func (m *CustomProxy) GetProxyPort() uint32 {
	if m != nil {
		return m.ProxyPort
	}
	return 0
}

func (m *CustomProxy) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CustomProxy) GetPassword() *schema.SecretType {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *CustomProxy) GetDisableReTunnel() *schema.Empty {
	if x, ok := m.GetUseForReTunnelChoice().(*CustomProxy_DisableReTunnel); ok {
		return x.DisableReTunnel
	}
	return nil
}

func (m *CustomProxy) GetEnableReTunnel() *schema.Empty {
	if x, ok := m.GetUseForReTunnelChoice().(*CustomProxy_EnableReTunnel); ok {
		return x.EnableReTunnel
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CustomProxy) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CustomProxy_DisableReTunnel)(nil),
		(*CustomProxy_EnableReTunnel)(nil),
	}
}

// Load Balancing Settings
//
// x-displayName: "Load Balancing Settings"
// This section contains settings on the site that relate to Load Balancing functionality.
type LoadBalancingSettingsType struct {
	// vip_vrrp_mode
	//
	// x-displayName: "VRRP Mode"
	// This controls the ARP behavior for Common VIP
	// addresses, when it is configured. When turned on, a Control node would advertise gratuitous ARPs and
	// would respond to ARP queries for these addresses. When turned off, ARP responses are not given.
	//
	// If BGP is configured, irrespective of the VRRP Mode, common VIP addresses will be advertised by BGP.
	//
	// When VIP is configured on both Site Local Outside (SLO) and Site Local Inside (SLI) Local VRF on the site, it is recommended to turn on VRRP and also configure BGP.
	VipVrrpMode schema.VipVrrpType `protobuf:"varint,1,opt,name=vip_vrrp_mode,json=vipVrrpMode,proto3,enum=ves.io.schema.VipVrrpType" json:"vip_vrrp_mode,omitempty"`
}

func (m *LoadBalancingSettingsType) Reset()      { *m = LoadBalancingSettingsType{} }
func (*LoadBalancingSettingsType) ProtoMessage() {}
func (*LoadBalancingSettingsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{5}
}
func (m *LoadBalancingSettingsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadBalancingSettingsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LoadBalancingSettingsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadBalancingSettingsType.Merge(m, src)
}
func (m *LoadBalancingSettingsType) XXX_Size() int {
	return m.Size()
}
func (m *LoadBalancingSettingsType) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadBalancingSettingsType.DiscardUnknown(m)
}

var xxx_messageInfo_LoadBalancingSettingsType proto.InternalMessageInfo

func (m *LoadBalancingSettingsType) GetVipVrrpMode() schema.VipVrrpType {
	if m != nil {
		return m.VipVrrpMode
	}
	return schema.VIP_VRRP_INVALID
}

// F5XC Software Settings
//
// x-displayName: "F5XC Software Settings"
// Select OS and Software version for the site. All nodes in the site will run the same OS and Software version. These settings cannot be changed after the site is created.
type SoftwareSettingsType struct {
	// F5XC Software Version
	//
	// x-displayName: "F5XC Software"
	// Select the F5XC Software Version for the site. By default, latest available F5XC Software Version will be used.
	// Refer to release notes to find required released SW versions.
	Sw *views.VolterraSoftwareType `protobuf:"bytes,1,opt,name=sw,proto3" json:"sw,omitempty"`
	// Operating System
	//
	// x-displayName: "Operating System Version"
	// Select the Operating System version for the site. By default, latest available Operating System version will be used.
	Os *views.OperatingSystemType `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
}

func (m *SoftwareSettingsType) Reset()      { *m = SoftwareSettingsType{} }
func (*SoftwareSettingsType) ProtoMessage() {}
func (*SoftwareSettingsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{6}
}
func (m *SoftwareSettingsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoftwareSettingsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SoftwareSettingsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftwareSettingsType.Merge(m, src)
}
func (m *SoftwareSettingsType) XXX_Size() int {
	return m.Size()
}
func (m *SoftwareSettingsType) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftwareSettingsType.DiscardUnknown(m)
}

var xxx_messageInfo_SoftwareSettingsType proto.InternalMessageInfo

func (m *SoftwareSettingsType) GetSw() *views.VolterraSoftwareType {
	if m != nil {
		return m.Sw
	}
	return nil
}

func (m *SoftwareSettingsType) GetOs() *views.OperatingSystemType {
	if m != nil {
		return m.Os
	}
	return nil
}

// Upgrade Settings
//
// x-displayName: "Upgrade Settings"
// Specify how a site will be upgraded.
type UpgradeSettingsType struct {
	// Enable Drain
	//
	// x-displayName: "Node by Node Upgrade"
	// Specify how worker nodes within a site will be upgraded.
	KubernetesUpgradeDrain *views.KubernetesUpgradeDrain `protobuf:"bytes,20,opt,name=kubernetes_upgrade_drain,json=kubernetesUpgradeDrain,proto3" json:"kubernetes_upgrade_drain,omitempty"`
}

func (m *UpgradeSettingsType) Reset()      { *m = UpgradeSettingsType{} }
func (*UpgradeSettingsType) ProtoMessage() {}
func (*UpgradeSettingsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{7}
}
func (m *UpgradeSettingsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeSettingsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UpgradeSettingsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeSettingsType.Merge(m, src)
}
func (m *UpgradeSettingsType) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeSettingsType) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeSettingsType.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeSettingsType proto.InternalMessageInfo

func (m *UpgradeSettingsType) GetKubernetesUpgradeDrain() *views.KubernetesUpgradeDrain {
	if m != nil {
		return m.KubernetesUpgradeDrain
	}
	return nil
}

// Node
//
// x-displayName: "Node"
// Node definition
type Node struct {
	// Type
	//
	// x-displayName: "Type"
	// x-example: "Control"
	// Type for this Node, can be Control or Worker
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Hostname
	//
	// x-displayName: "Hostname"
	// x-example: "Control"
	// Hostname for this Node
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Public IP
	//
	// x-displayName: "Public IP"
	// x-example: "1.1.1.1"
	// Public IP for this Node
	PublicIp string `protobuf:"bytes,6,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
	// Interfaces
	//
	// x-displayName: "Interfaces"
	// Manage interfaces belonging to this node
	InterfaceList []*Interface `protobuf:"bytes,7,rep,name=interface_list,json=interfaceList,proto3" json:"interface_list,omitempty"`
}

func (m *Node) Reset()      { *m = Node{} }
func (*Node) ProtoMessage() {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{8}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Node) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Node) GetPublicIp() string {
	if m != nil {
		return m.PublicIp
	}
	return ""
}

func (m *Node) GetInterfaceList() []*Interface {
	if m != nil {
		return m.InterfaceList
	}
	return nil
}

// Site Mesh Group Type
//
// x-displayName: "Site Mesh Group Type"
// Select how the site mesh group will be connected. By default, public IPs of the control nodes of the site will be used.
type SiteMeshGroupType struct {
	// Site Mesh Group Connection Type
	//
	// x-displayName: "Site Mesh Group Connection Type"
	// x-required
	// Select how the site mesh group will be connected. By default, public IPs of the control nodes of the site will be used.
	//
	// Types that are valid to be assigned to SiteMeshGroupIpChoice:
	//	*SiteMeshGroupType_SmConnectionPublicIp
	//	*SiteMeshGroupType_SmConnectionPvtIp
	SiteMeshGroupIpChoice isSiteMeshGroupType_SiteMeshGroupIpChoice `protobuf_oneof:"site_mesh_group_ip_choice"`
	// Select Site Mesh Group
	//
	// x-displayName: "Site Mesh Group"
	// x-required
	// Is this site member of a dc cluster group via this network
	//
	// Types that are valid to be assigned to SiteMeshGroupChoice:
	//	*SiteMeshGroupType_NoSiteMeshGroup
	//	*SiteMeshGroupType_SiteMeshGroup
	SiteMeshGroupChoice isSiteMeshGroupType_SiteMeshGroupChoice `protobuf_oneof:"site_mesh_group_choice"`
}

func (m *SiteMeshGroupType) Reset()      { *m = SiteMeshGroupType{} }
func (*SiteMeshGroupType) ProtoMessage() {}
func (*SiteMeshGroupType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{9}
}
func (m *SiteMeshGroupType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SiteMeshGroupType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SiteMeshGroupType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteMeshGroupType.Merge(m, src)
}
func (m *SiteMeshGroupType) XXX_Size() int {
	return m.Size()
}
func (m *SiteMeshGroupType) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteMeshGroupType.DiscardUnknown(m)
}

var xxx_messageInfo_SiteMeshGroupType proto.InternalMessageInfo

type isSiteMeshGroupType_SiteMeshGroupIpChoice interface {
	isSiteMeshGroupType_SiteMeshGroupIpChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSiteMeshGroupType_SiteMeshGroupChoice interface {
	isSiteMeshGroupType_SiteMeshGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SiteMeshGroupType_SmConnectionPublicIp struct {
	SmConnectionPublicIp *schema.Empty `protobuf:"bytes,2,opt,name=sm_connection_public_ip,json=smConnectionPublicIp,proto3,oneof" json:"sm_connection_public_ip,omitempty"`
}
type SiteMeshGroupType_SmConnectionPvtIp struct {
	SmConnectionPvtIp *schema.Empty `protobuf:"bytes,3,opt,name=sm_connection_pvt_ip,json=smConnectionPvtIp,proto3,oneof" json:"sm_connection_pvt_ip,omitempty"`
}
type SiteMeshGroupType_NoSiteMeshGroup struct {
	NoSiteMeshGroup *schema.Empty `protobuf:"bytes,5,opt,name=no_site_mesh_group,json=noSiteMeshGroup,proto3,oneof" json:"no_site_mesh_group,omitempty"`
}
type SiteMeshGroupType_SiteMeshGroup struct {
	SiteMeshGroup *views.ObjectRefType `protobuf:"bytes,6,opt,name=site_mesh_group,json=siteMeshGroup,proto3,oneof" json:"site_mesh_group,omitempty"`
}

func (*SiteMeshGroupType_SmConnectionPublicIp) isSiteMeshGroupType_SiteMeshGroupIpChoice() {}
func (*SiteMeshGroupType_SmConnectionPvtIp) isSiteMeshGroupType_SiteMeshGroupIpChoice()    {}
func (*SiteMeshGroupType_NoSiteMeshGroup) isSiteMeshGroupType_SiteMeshGroupChoice()        {}
func (*SiteMeshGroupType_SiteMeshGroup) isSiteMeshGroupType_SiteMeshGroupChoice()          {}

func (m *SiteMeshGroupType) GetSiteMeshGroupIpChoice() isSiteMeshGroupType_SiteMeshGroupIpChoice {
	if m != nil {
		return m.SiteMeshGroupIpChoice
	}
	return nil
}
func (m *SiteMeshGroupType) GetSiteMeshGroupChoice() isSiteMeshGroupType_SiteMeshGroupChoice {
	if m != nil {
		return m.SiteMeshGroupChoice
	}
	return nil
}

func (m *SiteMeshGroupType) GetSmConnectionPublicIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupIpChoice().(*SiteMeshGroupType_SmConnectionPublicIp); ok {
		return x.SmConnectionPublicIp
	}
	return nil
}

func (m *SiteMeshGroupType) GetSmConnectionPvtIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupIpChoice().(*SiteMeshGroupType_SmConnectionPvtIp); ok {
		return x.SmConnectionPvtIp
	}
	return nil
}

func (m *SiteMeshGroupType) GetNoSiteMeshGroup() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*SiteMeshGroupType_NoSiteMeshGroup); ok {
		return x.NoSiteMeshGroup
	}
	return nil
}

func (m *SiteMeshGroupType) GetSiteMeshGroup() *views.ObjectRefType {
	if x, ok := m.GetSiteMeshGroupChoice().(*SiteMeshGroupType_SiteMeshGroup); ok {
		return x.SiteMeshGroup
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SiteMeshGroupType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SiteMeshGroupType_SmConnectionPublicIp)(nil),
		(*SiteMeshGroupType_SmConnectionPvtIp)(nil),
		(*SiteMeshGroupType_NoSiteMeshGroup)(nil),
		(*SiteMeshGroupType_SiteMeshGroup)(nil),
	}
}

// VMware Provider Type
//
// x-displayName: "VMware Provider Type"
// VMware Provider Type
type VMwareProviderType struct {
	// Orchestration Mode
	//
	// x-displayName: "Orchestration Mode"
	// Select the orchestration mode for this site.
	// Customers can either choose to use F5 Distributed Cloud's orchestration services to manage the lifecycle of nodes for this site,
	// or, choose to manage the lifecycle of the nodes themselves via manual provisioning or using automation tools such as Terraform.
	// At this time, Secure Mesh Site only supports the 'Not Managed by F5XC' mode.
	//
	// Types that are valid to be assigned to OrchestrationChoice:
	//	*VMwareProviderType_NotManaged
	OrchestrationChoice isVMwareProviderType_OrchestrationChoice `protobuf_oneof:"orchestration_choice"`
}

func (m *VMwareProviderType) Reset()      { *m = VMwareProviderType{} }
func (*VMwareProviderType) ProtoMessage() {}
func (*VMwareProviderType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{10}
}
func (m *VMwareProviderType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMwareProviderType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VMwareProviderType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMwareProviderType.Merge(m, src)
}
func (m *VMwareProviderType) XXX_Size() int {
	return m.Size()
}
func (m *VMwareProviderType) XXX_DiscardUnknown() {
	xxx_messageInfo_VMwareProviderType.DiscardUnknown(m)
}

var xxx_messageInfo_VMwareProviderType proto.InternalMessageInfo

type isVMwareProviderType_OrchestrationChoice interface {
	isVMwareProviderType_OrchestrationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VMwareProviderType_NotManaged struct {
	NotManaged *NodeList `protobuf:"bytes,2,opt,name=not_managed,json=notManaged,proto3,oneof" json:"not_managed,omitempty"`
}

func (*VMwareProviderType_NotManaged) isVMwareProviderType_OrchestrationChoice() {}

func (m *VMwareProviderType) GetOrchestrationChoice() isVMwareProviderType_OrchestrationChoice {
	if m != nil {
		return m.OrchestrationChoice
	}
	return nil
}

func (m *VMwareProviderType) GetNotManaged() *NodeList {
	if x, ok := m.GetOrchestrationChoice().(*VMwareProviderType_NotManaged); ok {
		return x.NotManaged
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VMwareProviderType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VMwareProviderType_NotManaged)(nil),
	}
}

// KVM Provider Type
//
// x-displayName: "KVM Provider Type"
// KVM Provider Type
type KVMProviderType struct {
	// Orchestration Mode
	//
	// x-displayName: "Orchestration Mode"
	// Select the orchestration mode for this site.
	// Customers can either choose to use F5 Distributed Cloud's orchestration services to manage the lifecycle of nodes for this site,
	// or, choose to manage the lifecycle of the nodes themselves via manual provisioning or using automation tools such as Terraform.
	// At this time, Secure Mesh Site only supports the 'Not Managed by F5XC' mode.
	//
	// Types that are valid to be assigned to OrchestrationChoice:
	//	*KVMProviderType_NotManaged
	OrchestrationChoice isKVMProviderType_OrchestrationChoice `protobuf_oneof:"orchestration_choice"`
}

func (m *KVMProviderType) Reset()      { *m = KVMProviderType{} }
func (*KVMProviderType) ProtoMessage() {}
func (*KVMProviderType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{11}
}
func (m *KVMProviderType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVMProviderType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KVMProviderType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVMProviderType.Merge(m, src)
}
func (m *KVMProviderType) XXX_Size() int {
	return m.Size()
}
func (m *KVMProviderType) XXX_DiscardUnknown() {
	xxx_messageInfo_KVMProviderType.DiscardUnknown(m)
}

var xxx_messageInfo_KVMProviderType proto.InternalMessageInfo

type isKVMProviderType_OrchestrationChoice interface {
	isKVMProviderType_OrchestrationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type KVMProviderType_NotManaged struct {
	NotManaged *NodeList `protobuf:"bytes,2,opt,name=not_managed,json=notManaged,proto3,oneof" json:"not_managed,omitempty"`
}

func (*KVMProviderType_NotManaged) isKVMProviderType_OrchestrationChoice() {}

func (m *KVMProviderType) GetOrchestrationChoice() isKVMProviderType_OrchestrationChoice {
	if m != nil {
		return m.OrchestrationChoice
	}
	return nil
}

func (m *KVMProviderType) GetNotManaged() *NodeList {
	if x, ok := m.GetOrchestrationChoice().(*KVMProviderType_NotManaged); ok {
		return x.NotManaged
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*KVMProviderType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*KVMProviderType_NotManaged)(nil),
	}
}

// AWS Provider Type
//
// x-displayName: "AWS Provider Type"
// AWS Provider Type
type AWSProviderType struct {
	// Orchestration Mode
	//
	// x-displayName: "Orchestration Mode"
	// Select the orchestration mode for this site.
	// Customers can either choose to use F5 Distributed Cloud's orchestration services to manage the lifecycle of nodes for this site,
	// or, choose to manage the lifecycle of the nodes themselves via manual provisioning or using automation tools such as Terraform.
	// At this time, Secure Mesh Site only supports the 'Not Managed by F5XC' mode.
	//
	// Types that are valid to be assigned to OrchestrationChoice:
	//	*AWSProviderType_NotManaged
	//	*AWSProviderType_Managed
	OrchestrationChoice isAWSProviderType_OrchestrationChoice `protobuf_oneof:"orchestration_choice"`
}

func (m *AWSProviderType) Reset()      { *m = AWSProviderType{} }
func (*AWSProviderType) ProtoMessage() {}
func (*AWSProviderType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{12}
}
func (m *AWSProviderType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSProviderType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSProviderType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSProviderType.Merge(m, src)
}
func (m *AWSProviderType) XXX_Size() int {
	return m.Size()
}
func (m *AWSProviderType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSProviderType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSProviderType proto.InternalMessageInfo

type isAWSProviderType_OrchestrationChoice interface {
	isAWSProviderType_OrchestrationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AWSProviderType_NotManaged struct {
	NotManaged *NodeList `protobuf:"bytes,2,opt,name=not_managed,json=notManaged,proto3,oneof" json:"not_managed,omitempty"`
}
type AWSProviderType_Managed struct {
	Managed *AWSManagedMode `protobuf:"bytes,3,opt,name=managed,proto3,oneof" json:"managed,omitempty"`
}

func (*AWSProviderType_NotManaged) isAWSProviderType_OrchestrationChoice() {}
func (*AWSProviderType_Managed) isAWSProviderType_OrchestrationChoice()    {}

func (m *AWSProviderType) GetOrchestrationChoice() isAWSProviderType_OrchestrationChoice {
	if m != nil {
		return m.OrchestrationChoice
	}
	return nil
}

func (m *AWSProviderType) GetNotManaged() *NodeList {
	if x, ok := m.GetOrchestrationChoice().(*AWSProviderType_NotManaged); ok {
		return x.NotManaged
	}
	return nil
}

func (m *AWSProviderType) GetManaged() *AWSManagedMode {
	if x, ok := m.GetOrchestrationChoice().(*AWSProviderType_Managed); ok {
		return x.Managed
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AWSProviderType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AWSProviderType_NotManaged)(nil),
		(*AWSProviderType_Managed)(nil),
	}
}

// Azure Provider Type
//
// x-displayName: "Azure Provider Type"
// Azure Provider Type
type AzureProviderType struct {
	// Orchestration Mode
	//
	// x-displayName: "Orchestration Mode"
	// Select the orchestration mode for this site.
	// Customers can either choose to use F5 Distributed Cloud's orchestration services to manage the lifecycle of nodes for this site,
	// or, choose to manage the lifecycle of the nodes themselves via manual provisioning or using automation tools such as Terraform.
	// At this time, Secure Mesh Site only supports the 'Not Managed by F5XC' mode.
	//
	// Types that are valid to be assigned to OrchestrationChoice:
	//	*AzureProviderType_NotManaged
	OrchestrationChoice isAzureProviderType_OrchestrationChoice `protobuf_oneof:"orchestration_choice"`
}

func (m *AzureProviderType) Reset()      { *m = AzureProviderType{} }
func (*AzureProviderType) ProtoMessage() {}
func (*AzureProviderType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{13}
}
func (m *AzureProviderType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureProviderType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureProviderType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureProviderType.Merge(m, src)
}
func (m *AzureProviderType) XXX_Size() int {
	return m.Size()
}
func (m *AzureProviderType) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureProviderType.DiscardUnknown(m)
}

var xxx_messageInfo_AzureProviderType proto.InternalMessageInfo

type isAzureProviderType_OrchestrationChoice interface {
	isAzureProviderType_OrchestrationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AzureProviderType_NotManaged struct {
	NotManaged *NodeList `protobuf:"bytes,2,opt,name=not_managed,json=notManaged,proto3,oneof" json:"not_managed,omitempty"`
}

func (*AzureProviderType_NotManaged) isAzureProviderType_OrchestrationChoice() {}

func (m *AzureProviderType) GetOrchestrationChoice() isAzureProviderType_OrchestrationChoice {
	if m != nil {
		return m.OrchestrationChoice
	}
	return nil
}

func (m *AzureProviderType) GetNotManaged() *NodeList {
	if x, ok := m.GetOrchestrationChoice().(*AzureProviderType_NotManaged); ok {
		return x.NotManaged
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AzureProviderType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AzureProviderType_NotManaged)(nil),
	}
}

// GCP Provider Type
//
// x-displayName: "GCP Provider Type"
// GCP Provider Type
type GCPProviderType struct {
	// Orchestration Mode
	//
	// x-displayName: "Orchestration Mode"
	// Select the orchestration mode for this site.
	// Customers can either choose to use F5 Distributed Cloud's orchestration services to manage the lifecycle of nodes for this site,
	// or, choose to manage the lifecycle of the nodes themselves via manual provisioning or using automation tools such as Terraform.
	// At this time, Secure Mesh Site only supports the 'Not Managed by F5XC' mode.
	//
	// Types that are valid to be assigned to OrchestrationChoice:
	//	*GCPProviderType_NotManaged
	OrchestrationChoice isGCPProviderType_OrchestrationChoice `protobuf_oneof:"orchestration_choice"`
}

func (m *GCPProviderType) Reset()      { *m = GCPProviderType{} }
func (*GCPProviderType) ProtoMessage() {}
func (*GCPProviderType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{14}
}
func (m *GCPProviderType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GCPProviderType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GCPProviderType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCPProviderType.Merge(m, src)
}
func (m *GCPProviderType) XXX_Size() int {
	return m.Size()
}
func (m *GCPProviderType) XXX_DiscardUnknown() {
	xxx_messageInfo_GCPProviderType.DiscardUnknown(m)
}

var xxx_messageInfo_GCPProviderType proto.InternalMessageInfo

type isGCPProviderType_OrchestrationChoice interface {
	isGCPProviderType_OrchestrationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GCPProviderType_NotManaged struct {
	NotManaged *NodeList `protobuf:"bytes,2,opt,name=not_managed,json=notManaged,proto3,oneof" json:"not_managed,omitempty"`
}

func (*GCPProviderType_NotManaged) isGCPProviderType_OrchestrationChoice() {}

func (m *GCPProviderType) GetOrchestrationChoice() isGCPProviderType_OrchestrationChoice {
	if m != nil {
		return m.OrchestrationChoice
	}
	return nil
}

func (m *GCPProviderType) GetNotManaged() *NodeList {
	if x, ok := m.GetOrchestrationChoice().(*GCPProviderType_NotManaged); ok {
		return x.NotManaged
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GCPProviderType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GCPProviderType_NotManaged)(nil),
	}
}

// Baremetal Provider Type
//
// x-displayName: "Baremetal Provider Type"
// Baremetal Provider Type
type BaremetalProviderType struct {
	// Orchestration Mode
	//
	// x-displayName: "Orchestration Mode"
	// Select the orchestration mode for this site.
	// Customers can either choose to use F5 Distributed Cloud's orchestration services to manage the lifecycle of nodes for this site,
	// or, choose to manage the lifecycle of the nodes themselves via manual provisioning or using automation tools such as Terraform.
	// At this time, Secure Mesh Site only supports the 'Not Managed by F5XC' mode.
	//
	// Types that are valid to be assigned to OrchestrationChoice:
	//	*BaremetalProviderType_NotManaged
	OrchestrationChoice isBaremetalProviderType_OrchestrationChoice `protobuf_oneof:"orchestration_choice"`
}

func (m *BaremetalProviderType) Reset()      { *m = BaremetalProviderType{} }
func (*BaremetalProviderType) ProtoMessage() {}
func (*BaremetalProviderType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{15}
}
func (m *BaremetalProviderType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaremetalProviderType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BaremetalProviderType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaremetalProviderType.Merge(m, src)
}
func (m *BaremetalProviderType) XXX_Size() int {
	return m.Size()
}
func (m *BaremetalProviderType) XXX_DiscardUnknown() {
	xxx_messageInfo_BaremetalProviderType.DiscardUnknown(m)
}

var xxx_messageInfo_BaremetalProviderType proto.InternalMessageInfo

type isBaremetalProviderType_OrchestrationChoice interface {
	isBaremetalProviderType_OrchestrationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BaremetalProviderType_NotManaged struct {
	NotManaged *NodeList `protobuf:"bytes,2,opt,name=not_managed,json=notManaged,proto3,oneof" json:"not_managed,omitempty"`
}

func (*BaremetalProviderType_NotManaged) isBaremetalProviderType_OrchestrationChoice() {}

func (m *BaremetalProviderType) GetOrchestrationChoice() isBaremetalProviderType_OrchestrationChoice {
	if m != nil {
		return m.OrchestrationChoice
	}
	return nil
}

func (m *BaremetalProviderType) GetNotManaged() *NodeList {
	if x, ok := m.GetOrchestrationChoice().(*BaremetalProviderType_NotManaged); ok {
		return x.NotManaged
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BaremetalProviderType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BaremetalProviderType_NotManaged)(nil),
	}
}

// OCI Provider Type
//
// x-displayName: "OCI Provider Type"
// OCI Provider Type
type OCIProviderType struct {
	// Orchestration Mode
	//
	// x-displayName: "Orchestration Mode"
	// Select the orchestration mode for this site.
	// Customers can either choose to use F5 Distributed Cloud's orchestration services to manage the lifecycle of nodes for this site,
	// or, choose to manage the lifecycle of the nodes themselves via manual provisioning or using automation tools such as Terraform.
	// At this time, Secure Mesh Site only supports the 'Not Managed by F5XC' mode.
	//
	// Types that are valid to be assigned to OrchestrationChoice:
	//	*OCIProviderType_NotManaged
	OrchestrationChoice isOCIProviderType_OrchestrationChoice `protobuf_oneof:"orchestration_choice"`
}

func (m *OCIProviderType) Reset()      { *m = OCIProviderType{} }
func (*OCIProviderType) ProtoMessage() {}
func (*OCIProviderType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{16}
}
func (m *OCIProviderType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OCIProviderType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OCIProviderType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OCIProviderType.Merge(m, src)
}
func (m *OCIProviderType) XXX_Size() int {
	return m.Size()
}
func (m *OCIProviderType) XXX_DiscardUnknown() {
	xxx_messageInfo_OCIProviderType.DiscardUnknown(m)
}

var xxx_messageInfo_OCIProviderType proto.InternalMessageInfo

type isOCIProviderType_OrchestrationChoice interface {
	isOCIProviderType_OrchestrationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OCIProviderType_NotManaged struct {
	NotManaged *NodeList `protobuf:"bytes,2,opt,name=not_managed,json=notManaged,proto3,oneof" json:"not_managed,omitempty"`
}

func (*OCIProviderType_NotManaged) isOCIProviderType_OrchestrationChoice() {}

func (m *OCIProviderType) GetOrchestrationChoice() isOCIProviderType_OrchestrationChoice {
	if m != nil {
		return m.OrchestrationChoice
	}
	return nil
}

func (m *OCIProviderType) GetNotManaged() *NodeList {
	if x, ok := m.GetOrchestrationChoice().(*OCIProviderType_NotManaged); ok {
		return x.NotManaged
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OCIProviderType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OCIProviderType_NotManaged)(nil),
	}
}

// RSeries Provider Type
//
// x-displayName: "RSeries Provider Type"
// RSeries Provider Type
type RSeriesProviderType struct {
	// Orchestration Mode
	//
	// x-displayName: "Orchestration Mode"
	// Select the orchestration mode for this site.
	// Customers can either choose to use F5 Distributed Cloud's orchestration services to manage the lifecycle of nodes for this site,
	// or, choose to manage the lifecycle of the nodes themselves via manual provisioning or using automation tools such as Terraform.
	// At this time, Secure Mesh Site only supports the 'Not Managed by F5XC' mode.
	//
	// Types that are valid to be assigned to OrchestrationChoice:
	//	*RSeriesProviderType_NotManaged
	OrchestrationChoice isRSeriesProviderType_OrchestrationChoice `protobuf_oneof:"orchestration_choice"`
}

func (m *RSeriesProviderType) Reset()      { *m = RSeriesProviderType{} }
func (*RSeriesProviderType) ProtoMessage() {}
func (*RSeriesProviderType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{17}
}
func (m *RSeriesProviderType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RSeriesProviderType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RSeriesProviderType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RSeriesProviderType.Merge(m, src)
}
func (m *RSeriesProviderType) XXX_Size() int {
	return m.Size()
}
func (m *RSeriesProviderType) XXX_DiscardUnknown() {
	xxx_messageInfo_RSeriesProviderType.DiscardUnknown(m)
}

var xxx_messageInfo_RSeriesProviderType proto.InternalMessageInfo

type isRSeriesProviderType_OrchestrationChoice interface {
	isRSeriesProviderType_OrchestrationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RSeriesProviderType_NotManaged struct {
	NotManaged *NodeList `protobuf:"bytes,2,opt,name=not_managed,json=notManaged,proto3,oneof" json:"not_managed,omitempty"`
}

func (*RSeriesProviderType_NotManaged) isRSeriesProviderType_OrchestrationChoice() {}

func (m *RSeriesProviderType) GetOrchestrationChoice() isRSeriesProviderType_OrchestrationChoice {
	if m != nil {
		return m.OrchestrationChoice
	}
	return nil
}

func (m *RSeriesProviderType) GetNotManaged() *NodeList {
	if x, ok := m.GetOrchestrationChoice().(*RSeriesProviderType_NotManaged); ok {
		return x.NotManaged
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RSeriesProviderType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RSeriesProviderType_NotManaged)(nil),
	}
}

// Openstack Provider Type
//
// x-displayName: "Openstack Provider Type"
// Openstack Provider Type
type OpenstackProviderType struct {
	// Orchestration Mode
	//
	// x-displayName: "Orchestration Mode"
	// Select the orchestration mode for this site.
	// Customers can either choose to use F5 Distributed Cloud's orchestration services to manage the lifecycle of nodes for this site,
	// or, choose to manage the lifecycle of the nodes themselves via manual provisioning or using automation tools such as Terraform.
	// At this time, Secure Mesh Site only supports the 'Not Managed by F5XC' mode.
	//
	// Types that are valid to be assigned to OrchestrationChoice:
	//	*OpenstackProviderType_NotManaged
	OrchestrationChoice isOpenstackProviderType_OrchestrationChoice `protobuf_oneof:"orchestration_choice"`
}

func (m *OpenstackProviderType) Reset()      { *m = OpenstackProviderType{} }
func (*OpenstackProviderType) ProtoMessage() {}
func (*OpenstackProviderType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{18}
}
func (m *OpenstackProviderType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenstackProviderType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OpenstackProviderType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenstackProviderType.Merge(m, src)
}
func (m *OpenstackProviderType) XXX_Size() int {
	return m.Size()
}
func (m *OpenstackProviderType) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenstackProviderType.DiscardUnknown(m)
}

var xxx_messageInfo_OpenstackProviderType proto.InternalMessageInfo

type isOpenstackProviderType_OrchestrationChoice interface {
	isOpenstackProviderType_OrchestrationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OpenstackProviderType_NotManaged struct {
	NotManaged *NodeList `protobuf:"bytes,2,opt,name=not_managed,json=notManaged,proto3,oneof" json:"not_managed,omitempty"`
}

func (*OpenstackProviderType_NotManaged) isOpenstackProviderType_OrchestrationChoice() {}

func (m *OpenstackProviderType) GetOrchestrationChoice() isOpenstackProviderType_OrchestrationChoice {
	if m != nil {
		return m.OrchestrationChoice
	}
	return nil
}

func (m *OpenstackProviderType) GetNotManaged() *NodeList {
	if x, ok := m.GetOrchestrationChoice().(*OpenstackProviderType_NotManaged); ok {
		return x.NotManaged
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OpenstackProviderType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OpenstackProviderType_NotManaged)(nil),
	}
}

// Nutanix Provider Type
//
// x-displayName: "Nutanix Provider Type"
// Nutanix Provider Type
type NutanixProviderType struct {
	// Orchestration Mode
	//
	// x-displayName: "Orchestration Mode"
	// Select the orchestration mode for this site.
	// Customers can either choose to use F5 Distributed Cloud's orchestration services to manage the lifecycle of nodes for this site,
	// or, choose to manage the lifecycle of the nodes themselves via manual provisioning or using automation tools such as Terraform.
	// At this time, Secure Mesh Site only supports the 'Not Managed by F5XC' mode.
	//
	// Types that are valid to be assigned to OrchestrationChoice:
	//	*NutanixProviderType_NotManaged
	OrchestrationChoice isNutanixProviderType_OrchestrationChoice `protobuf_oneof:"orchestration_choice"`
}

func (m *NutanixProviderType) Reset()      { *m = NutanixProviderType{} }
func (*NutanixProviderType) ProtoMessage() {}
func (*NutanixProviderType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{19}
}
func (m *NutanixProviderType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NutanixProviderType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NutanixProviderType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NutanixProviderType.Merge(m, src)
}
func (m *NutanixProviderType) XXX_Size() int {
	return m.Size()
}
func (m *NutanixProviderType) XXX_DiscardUnknown() {
	xxx_messageInfo_NutanixProviderType.DiscardUnknown(m)
}

var xxx_messageInfo_NutanixProviderType proto.InternalMessageInfo

type isNutanixProviderType_OrchestrationChoice interface {
	isNutanixProviderType_OrchestrationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type NutanixProviderType_NotManaged struct {
	NotManaged *NodeList `protobuf:"bytes,2,opt,name=not_managed,json=notManaged,proto3,oneof" json:"not_managed,omitempty"`
}

func (*NutanixProviderType_NotManaged) isNutanixProviderType_OrchestrationChoice() {}

func (m *NutanixProviderType) GetOrchestrationChoice() isNutanixProviderType_OrchestrationChoice {
	if m != nil {
		return m.OrchestrationChoice
	}
	return nil
}

func (m *NutanixProviderType) GetNotManaged() *NodeList {
	if x, ok := m.GetOrchestrationChoice().(*NutanixProviderType_NotManaged); ok {
		return x.NotManaged
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NutanixProviderType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NutanixProviderType_NotManaged)(nil),
	}
}

// NodeList
//
// x-displayName: "List of Nodes"
// This section will show nodes associated with this site. Note: For sites that are not orchestrated by F5XC, create nodes in the chosen provider.
// Once a node is created and registers with the site, it will be shown in this section.
type NodeList struct {
	// Nodes
	//
	// x-displayName: "Nodes"
	// This section will show nodes associated with this site. Note: For sites that are not orchestrated by F5XC, create nodes in the chosen provider.
	// Once a node is created and registers with the site, it will be shown in this section.
	NodeList []*Node `protobuf:"bytes,1,rep,name=node_list,json=nodeList,proto3" json:"node_list,omitempty"`
}

func (m *NodeList) Reset()      { *m = NodeList{} }
func (*NodeList) ProtoMessage() {}
func (*NodeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{20}
}
func (m *NodeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NodeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeList.Merge(m, src)
}
func (m *NodeList) XXX_Size() int {
	return m.Size()
}
func (m *NodeList) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeList.DiscardUnknown(m)
}

var xxx_messageInfo_NodeList proto.InternalMessageInfo

func (m *NodeList) GetNodeList() []*Node {
	if m != nil {
		return m.NodeList
	}
	return nil
}

// CreateSpecType
//
// x-displayName: "Create Secure Mesh site"
// Shape of the Secure Mesh site specification
type CreateSpecType struct {
	// Types that are valid to be assigned to ProviderChoice:
	//	*CreateSpecType_Vmware
	//	*CreateSpecType_Kvm
	//	*CreateSpecType_Aws
	//	*CreateSpecType_Azure
	//	*CreateSpecType_Gcp
	//	*CreateSpecType_Rseries
	//	*CreateSpecType_Baremetal
	//	*CreateSpecType_Oci
	//	*CreateSpecType_Openstack
	//	*CreateSpecType_Nutanix
	ProviderChoice isCreateSpecType_ProviderChoice `protobuf_oneof:"provider_choice"`
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*CreateSpecType_NoNetworkPolicy
	//	*CreateSpecType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isCreateSpecType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*CreateSpecType_NoForwardProxy
	//	*CreateSpecType_ActiveForwardProxyPolicies
	ForwardProxyChoice isCreateSpecType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	SoftwareSettings   *SoftwareSettingsType               `protobuf:"bytes,17,opt,name=software_settings,json=softwareSettings,proto3" json:"software_settings,omitempty"`
	UpgradeSettings    *UpgradeSettingsType                `protobuf:"bytes,20,opt,name=upgrade_settings,json=upgradeSettings,proto3" json:"upgrade_settings,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*CreateSpecType_LogsStreamingDisabled
	//	*CreateSpecType_LogReceiver
	LogsReceiverChoice isCreateSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*CreateSpecType_BlockAllServices
	//	*CreateSpecType_BlockedServices
	BlockedServicesChoice      isCreateSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType  `protobuf:"bytes,27,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
	OfflineSurvivabilityMode   *views.OfflineSurvivabilityModeType    `protobuf:"bytes,28,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	TunnelDeadTimeout          uint32                                 `protobuf:"varint,29,opt,name=tunnel_dead_timeout,json=tunnelDeadTimeout,proto3" json:"tunnel_dead_timeout,omitempty"`
	LoadBalancing              *LoadBalancingSettingsType             `protobuf:"bytes,30,opt,name=load_balancing,json=loadBalancing,proto3" json:"load_balancing,omitempty"`
	// Types that are valid to be assigned to S2SConnectivitySliChoice:
	//	*CreateSpecType_NoS2SConnectivitySli
	//	*CreateSpecType_DcClusterGroupSli
	S2SConnectivitySliChoice isCreateSpecType_S2SConnectivitySliChoice `protobuf_oneof:"s2s_connectivity_sli_choice"`
	// Types that are valid to be assigned to S2SConnectivitySloChoice:
	//	*CreateSpecType_NoS2SConnectivitySlo
	//	*CreateSpecType_SiteMeshGroupOnSlo
	//	*CreateSpecType_DcClusterGroupSlo
	S2SConnectivitySloChoice isCreateSpecType_S2SConnectivitySloChoice `protobuf_oneof:"s2s_connectivity_slo_choice"`
	LocalVrf                 *LocalVRFSettingType                      `protobuf:"bytes,43,opt,name=local_vrf,json=localVrf,proto3" json:"local_vrf,omitempty"`
	TunnelType               schema.SiteToSiteTunnelType               `protobuf:"varint,44,opt,name=tunnel_type,json=tunnelType,proto3,enum=ves.io.schema.SiteToSiteTunnelType" json:"tunnel_type,omitempty"`
	ReSelect                 *views.RegionalEdgeSelection              `protobuf:"bytes,45,opt,name=re_select,json=reSelect,proto3" json:"re_select,omitempty"`
	// Types that are valid to be assigned to NodeHaChoice:
	//	*CreateSpecType_DisableHa
	//	*CreateSpecType_EnableHa
	NodeHaChoice         isCreateSpecType_NodeHaChoice    `protobuf_oneof:"node_ha_choice"`
	AdminUserCredentials *views.AdminUserCredentialsType  `protobuf:"bytes,53,opt,name=admin_user_credentials,json=adminUserCredentials,proto3" json:"admin_user_credentials,omitempty"`
	ProactiveMonitoring  *views.ProactiveMonitoringChoice `protobuf:"bytes,56,opt,name=proactive_monitoring,json=proactiveMonitoring,proto3" json:"proactive_monitoring,omitempty"`
	// Types that are valid to be assigned to EnterpriseProxyChoice:
	//	*CreateSpecType_F5Proxy
	//	*CreateSpecType_CustomProxy
	EnterpriseProxyChoice isCreateSpecType_EnterpriseProxyChoice `protobuf_oneof:"enterprise_proxy_choice"`
	DnsNtpConfig          *DNSNTPServerConfig                    `protobuf:"bytes,62,opt,name=dns_ntp_config,json=dnsNtpConfig,proto3" json:"dns_ntp_config,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{21}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_ProviderChoice interface {
	isCreateSpecType_ProviderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_NetworkPolicyChoice interface {
	isCreateSpecType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ForwardProxyChoice interface {
	isCreateSpecType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_LogsReceiverChoice interface {
	isCreateSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_BlockedServicesChoice interface {
	isCreateSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_S2SConnectivitySliChoice interface {
	isCreateSpecType_S2SConnectivitySliChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_S2SConnectivitySloChoice interface {
	isCreateSpecType_S2SConnectivitySloChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_NodeHaChoice interface {
	isCreateSpecType_NodeHaChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_EnterpriseProxyChoice interface {
	isCreateSpecType_EnterpriseProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Vmware struct {
	Vmware *VMwareProviderType `protobuf:"bytes,2,opt,name=vmware,proto3,oneof" json:"vmware,omitempty"`
}
type CreateSpecType_Kvm struct {
	Kvm *KVMProviderType `protobuf:"bytes,3,opt,name=kvm,proto3,oneof" json:"kvm,omitempty"`
}
type CreateSpecType_Aws struct {
	Aws *AWSProviderType `protobuf:"bytes,4,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}
type CreateSpecType_Azure struct {
	Azure *AzureProviderType `protobuf:"bytes,5,opt,name=azure,proto3,oneof" json:"azure,omitempty"`
}
type CreateSpecType_Gcp struct {
	Gcp *GCPProviderType `protobuf:"bytes,6,opt,name=gcp,proto3,oneof" json:"gcp,omitempty"`
}
type CreateSpecType_Rseries struct {
	Rseries *RSeriesProviderType `protobuf:"bytes,7,opt,name=rseries,proto3,oneof" json:"rseries,omitempty"`
}
type CreateSpecType_Baremetal struct {
	Baremetal *BaremetalProviderType `protobuf:"bytes,8,opt,name=baremetal,proto3,oneof" json:"baremetal,omitempty"`
}
type CreateSpecType_Oci struct {
	Oci *OCIProviderType `protobuf:"bytes,9,opt,name=oci,proto3,oneof" json:"oci,omitempty"`
}
type CreateSpecType_Openstack struct {
	Openstack *OpenstackProviderType `protobuf:"bytes,54,opt,name=openstack,proto3,oneof" json:"openstack,omitempty"`
}
type CreateSpecType_Nutanix struct {
	Nutanix *NutanixProviderType `protobuf:"bytes,55,opt,name=nutanix,proto3,oneof" json:"nutanix,omitempty"`
}
type CreateSpecType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,12,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type CreateSpecType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,13,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type CreateSpecType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,15,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type CreateSpecType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,16,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type CreateSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,22,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type CreateSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,23,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type CreateSpecType_BlockAllServices struct {
	BlockAllServices *schema.Empty `protobuf:"bytes,25,opt,name=block_all_services,json=blockAllServices,proto3,oneof" json:"block_all_services,omitempty"`
}
type CreateSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,26,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}
type CreateSpecType_NoS2SConnectivitySli struct {
	NoS2SConnectivitySli *schema.Empty `protobuf:"bytes,33,opt,name=no_s2s_connectivity_sli,json=noS2sConnectivitySli,proto3,oneof" json:"no_s2s_connectivity_sli,omitempty"`
}
type CreateSpecType_DcClusterGroupSli struct {
	DcClusterGroupSli *views.ObjectRefType `protobuf:"bytes,34,opt,name=dc_cluster_group_sli,json=dcClusterGroupSli,proto3,oneof" json:"dc_cluster_group_sli,omitempty"`
}
type CreateSpecType_NoS2SConnectivitySlo struct {
	NoS2SConnectivitySlo *schema.Empty `protobuf:"bytes,36,opt,name=no_s2s_connectivity_slo,json=noS2sConnectivitySlo,proto3,oneof" json:"no_s2s_connectivity_slo,omitempty"`
}
type CreateSpecType_SiteMeshGroupOnSlo struct {
	SiteMeshGroupOnSlo *SiteMeshGroupType `protobuf:"bytes,37,opt,name=site_mesh_group_on_slo,json=siteMeshGroupOnSlo,proto3,oneof" json:"site_mesh_group_on_slo,omitempty"`
}
type CreateSpecType_DcClusterGroupSlo struct {
	DcClusterGroupSlo *views.ObjectRefType `protobuf:"bytes,38,opt,name=dc_cluster_group_slo,json=dcClusterGroupSlo,proto3,oneof" json:"dc_cluster_group_slo,omitempty"`
}
type CreateSpecType_DisableHa struct {
	DisableHa *schema.Empty `protobuf:"bytes,50,opt,name=disable_ha,json=disableHa,proto3,oneof" json:"disable_ha,omitempty"`
}
type CreateSpecType_EnableHa struct {
	EnableHa *schema.Empty `protobuf:"bytes,51,opt,name=enable_ha,json=enableHa,proto3,oneof" json:"enable_ha,omitempty"`
}
type CreateSpecType_F5Proxy struct {
	F5Proxy *schema.Empty `protobuf:"bytes,60,opt,name=f5_proxy,json=f5Proxy,proto3,oneof" json:"f5_proxy,omitempty"`
}
type CreateSpecType_CustomProxy struct {
	CustomProxy *CustomProxy `protobuf:"bytes,61,opt,name=custom_proxy,json=customProxy,proto3,oneof" json:"custom_proxy,omitempty"`
}

func (*CreateSpecType_Vmware) isCreateSpecType_ProviderChoice()                              {}
func (*CreateSpecType_Kvm) isCreateSpecType_ProviderChoice()                                 {}
func (*CreateSpecType_Aws) isCreateSpecType_ProviderChoice()                                 {}
func (*CreateSpecType_Azure) isCreateSpecType_ProviderChoice()                               {}
func (*CreateSpecType_Gcp) isCreateSpecType_ProviderChoice()                                 {}
func (*CreateSpecType_Rseries) isCreateSpecType_ProviderChoice()                             {}
func (*CreateSpecType_Baremetal) isCreateSpecType_ProviderChoice()                           {}
func (*CreateSpecType_Oci) isCreateSpecType_ProviderChoice()                                 {}
func (*CreateSpecType_Openstack) isCreateSpecType_ProviderChoice()                           {}
func (*CreateSpecType_Nutanix) isCreateSpecType_ProviderChoice()                             {}
func (*CreateSpecType_NoNetworkPolicy) isCreateSpecType_NetworkPolicyChoice()                {}
func (*CreateSpecType_ActiveEnhancedFirewallPolicies) isCreateSpecType_NetworkPolicyChoice() {}
func (*CreateSpecType_NoForwardProxy) isCreateSpecType_ForwardProxyChoice()                  {}
func (*CreateSpecType_ActiveForwardProxyPolicies) isCreateSpecType_ForwardProxyChoice()      {}
func (*CreateSpecType_LogsStreamingDisabled) isCreateSpecType_LogsReceiverChoice()           {}
func (*CreateSpecType_LogReceiver) isCreateSpecType_LogsReceiverChoice()                     {}
func (*CreateSpecType_BlockAllServices) isCreateSpecType_BlockedServicesChoice()             {}
func (*CreateSpecType_BlockedServices) isCreateSpecType_BlockedServicesChoice()              {}
func (*CreateSpecType_NoS2SConnectivitySli) isCreateSpecType_S2SConnectivitySliChoice()      {}
func (*CreateSpecType_DcClusterGroupSli) isCreateSpecType_S2SConnectivitySliChoice()         {}
func (*CreateSpecType_NoS2SConnectivitySlo) isCreateSpecType_S2SConnectivitySloChoice()      {}
func (*CreateSpecType_SiteMeshGroupOnSlo) isCreateSpecType_S2SConnectivitySloChoice()        {}
func (*CreateSpecType_DcClusterGroupSlo) isCreateSpecType_S2SConnectivitySloChoice()         {}
func (*CreateSpecType_DisableHa) isCreateSpecType_NodeHaChoice()                             {}
func (*CreateSpecType_EnableHa) isCreateSpecType_NodeHaChoice()                              {}
func (*CreateSpecType_F5Proxy) isCreateSpecType_EnterpriseProxyChoice()                      {}
func (*CreateSpecType_CustomProxy) isCreateSpecType_EnterpriseProxyChoice()                  {}

func (m *CreateSpecType) GetProviderChoice() isCreateSpecType_ProviderChoice {
	if m != nil {
		return m.ProviderChoice
	}
	return nil
}
func (m *CreateSpecType) GetNetworkPolicyChoice() isCreateSpecType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *CreateSpecType) GetForwardProxyChoice() isCreateSpecType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *CreateSpecType) GetLogsReceiverChoice() isCreateSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *CreateSpecType) GetBlockedServicesChoice() isCreateSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}
func (m *CreateSpecType) GetS2SConnectivitySliChoice() isCreateSpecType_S2SConnectivitySliChoice {
	if m != nil {
		return m.S2SConnectivitySliChoice
	}
	return nil
}
func (m *CreateSpecType) GetS2SConnectivitySloChoice() isCreateSpecType_S2SConnectivitySloChoice {
	if m != nil {
		return m.S2SConnectivitySloChoice
	}
	return nil
}
func (m *CreateSpecType) GetNodeHaChoice() isCreateSpecType_NodeHaChoice {
	if m != nil {
		return m.NodeHaChoice
	}
	return nil
}
func (m *CreateSpecType) GetEnterpriseProxyChoice() isCreateSpecType_EnterpriseProxyChoice {
	if m != nil {
		return m.EnterpriseProxyChoice
	}
	return nil
}

func (m *CreateSpecType) GetVmware() *VMwareProviderType {
	if x, ok := m.GetProviderChoice().(*CreateSpecType_Vmware); ok {
		return x.Vmware
	}
	return nil
}

func (m *CreateSpecType) GetKvm() *KVMProviderType {
	if x, ok := m.GetProviderChoice().(*CreateSpecType_Kvm); ok {
		return x.Kvm
	}
	return nil
}

func (m *CreateSpecType) GetAws() *AWSProviderType {
	if x, ok := m.GetProviderChoice().(*CreateSpecType_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *CreateSpecType) GetAzure() *AzureProviderType {
	if x, ok := m.GetProviderChoice().(*CreateSpecType_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *CreateSpecType) GetGcp() *GCPProviderType {
	if x, ok := m.GetProviderChoice().(*CreateSpecType_Gcp); ok {
		return x.Gcp
	}
	return nil
}

func (m *CreateSpecType) GetRseries() *RSeriesProviderType {
	if x, ok := m.GetProviderChoice().(*CreateSpecType_Rseries); ok {
		return x.Rseries
	}
	return nil
}

func (m *CreateSpecType) GetBaremetal() *BaremetalProviderType {
	if x, ok := m.GetProviderChoice().(*CreateSpecType_Baremetal); ok {
		return x.Baremetal
	}
	return nil
}

func (m *CreateSpecType) GetOci() *OCIProviderType {
	if x, ok := m.GetProviderChoice().(*CreateSpecType_Oci); ok {
		return x.Oci
	}
	return nil
}

func (m *CreateSpecType) GetOpenstack() *OpenstackProviderType {
	if x, ok := m.GetProviderChoice().(*CreateSpecType_Openstack); ok {
		return x.Openstack
	}
	return nil
}

func (m *CreateSpecType) GetNutanix() *NutanixProviderType {
	if x, ok := m.GetProviderChoice().(*CreateSpecType_Nutanix); ok {
		return x.Nutanix
	}
	return nil
}

func (m *CreateSpecType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*CreateSpecType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *CreateSpecType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*CreateSpecType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *CreateSpecType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*CreateSpecType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *CreateSpecType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*CreateSpecType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *CreateSpecType) GetSoftwareSettings() *SoftwareSettingsType {
	if m != nil {
		return m.SoftwareSettings
	}
	return nil
}

func (m *CreateSpecType) GetUpgradeSettings() *UpgradeSettingsType {
	if m != nil {
		return m.UpgradeSettings
	}
	return nil
}

func (m *CreateSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *CreateSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *CreateSpecType) GetBlockAllServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*CreateSpecType_BlockAllServices); ok {
		return x.BlockAllServices
	}
	return nil
}

func (m *CreateSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*CreateSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *CreateSpecType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

func (m *CreateSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *CreateSpecType) GetTunnelDeadTimeout() uint32 {
	if m != nil {
		return m.TunnelDeadTimeout
	}
	return 0
}

func (m *CreateSpecType) GetLoadBalancing() *LoadBalancingSettingsType {
	if m != nil {
		return m.LoadBalancing
	}
	return nil
}

func (m *CreateSpecType) GetNoS2SConnectivitySli() *schema.Empty {
	if x, ok := m.GetS2SConnectivitySliChoice().(*CreateSpecType_NoS2SConnectivitySli); ok {
		return x.NoS2SConnectivitySli
	}
	return nil
}

func (m *CreateSpecType) GetDcClusterGroupSli() *views.ObjectRefType {
	if x, ok := m.GetS2SConnectivitySliChoice().(*CreateSpecType_DcClusterGroupSli); ok {
		return x.DcClusterGroupSli
	}
	return nil
}

func (m *CreateSpecType) GetNoS2SConnectivitySlo() *schema.Empty {
	if x, ok := m.GetS2SConnectivitySloChoice().(*CreateSpecType_NoS2SConnectivitySlo); ok {
		return x.NoS2SConnectivitySlo
	}
	return nil
}

func (m *CreateSpecType) GetSiteMeshGroupOnSlo() *SiteMeshGroupType {
	if x, ok := m.GetS2SConnectivitySloChoice().(*CreateSpecType_SiteMeshGroupOnSlo); ok {
		return x.SiteMeshGroupOnSlo
	}
	return nil
}

func (m *CreateSpecType) GetDcClusterGroupSlo() *views.ObjectRefType {
	if x, ok := m.GetS2SConnectivitySloChoice().(*CreateSpecType_DcClusterGroupSlo); ok {
		return x.DcClusterGroupSlo
	}
	return nil
}

func (m *CreateSpecType) GetLocalVrf() *LocalVRFSettingType {
	if m != nil {
		return m.LocalVrf
	}
	return nil
}

func (m *CreateSpecType) GetTunnelType() schema.SiteToSiteTunnelType {
	if m != nil {
		return m.TunnelType
	}
	return schema.SITE_TO_SITE_TUNNEL_IPSEC_OR_SSL
}

func (m *CreateSpecType) GetReSelect() *views.RegionalEdgeSelection {
	if m != nil {
		return m.ReSelect
	}
	return nil
}

func (m *CreateSpecType) GetDisableHa() *schema.Empty {
	if x, ok := m.GetNodeHaChoice().(*CreateSpecType_DisableHa); ok {
		return x.DisableHa
	}
	return nil
}

func (m *CreateSpecType) GetEnableHa() *schema.Empty {
	if x, ok := m.GetNodeHaChoice().(*CreateSpecType_EnableHa); ok {
		return x.EnableHa
	}
	return nil
}

func (m *CreateSpecType) GetAdminUserCredentials() *views.AdminUserCredentialsType {
	if m != nil {
		return m.AdminUserCredentials
	}
	return nil
}

func (m *CreateSpecType) GetProactiveMonitoring() *views.ProactiveMonitoringChoice {
	if m != nil {
		return m.ProactiveMonitoring
	}
	return nil
}

func (m *CreateSpecType) GetF5Proxy() *schema.Empty {
	if x, ok := m.GetEnterpriseProxyChoice().(*CreateSpecType_F5Proxy); ok {
		return x.F5Proxy
	}
	return nil
}

func (m *CreateSpecType) GetCustomProxy() *CustomProxy {
	if x, ok := m.GetEnterpriseProxyChoice().(*CreateSpecType_CustomProxy); ok {
		return x.CustomProxy
	}
	return nil
}

func (m *CreateSpecType) GetDnsNtpConfig() *DNSNTPServerConfig {
	if m != nil {
		return m.DnsNtpConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_Vmware)(nil),
		(*CreateSpecType_Kvm)(nil),
		(*CreateSpecType_Aws)(nil),
		(*CreateSpecType_Azure)(nil),
		(*CreateSpecType_Gcp)(nil),
		(*CreateSpecType_Rseries)(nil),
		(*CreateSpecType_Baremetal)(nil),
		(*CreateSpecType_Oci)(nil),
		(*CreateSpecType_Openstack)(nil),
		(*CreateSpecType_Nutanix)(nil),
		(*CreateSpecType_NoNetworkPolicy)(nil),
		(*CreateSpecType_ActiveEnhancedFirewallPolicies)(nil),
		(*CreateSpecType_NoForwardProxy)(nil),
		(*CreateSpecType_ActiveForwardProxyPolicies)(nil),
		(*CreateSpecType_LogsStreamingDisabled)(nil),
		(*CreateSpecType_LogReceiver)(nil),
		(*CreateSpecType_BlockAllServices)(nil),
		(*CreateSpecType_BlockedServices)(nil),
		(*CreateSpecType_NoS2SConnectivitySli)(nil),
		(*CreateSpecType_DcClusterGroupSli)(nil),
		(*CreateSpecType_NoS2SConnectivitySlo)(nil),
		(*CreateSpecType_SiteMeshGroupOnSlo)(nil),
		(*CreateSpecType_DcClusterGroupSlo)(nil),
		(*CreateSpecType_DisableHa)(nil),
		(*CreateSpecType_EnableHa)(nil),
		(*CreateSpecType_F5Proxy)(nil),
		(*CreateSpecType_CustomProxy)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace Secure Mesh site"
// Shape of the Secure Mesh site specification
type ReplaceSpecType struct {
	// Types that are valid to be assigned to ProviderChoice:
	//	*ReplaceSpecType_Vmware
	//	*ReplaceSpecType_Kvm
	//	*ReplaceSpecType_Aws
	//	*ReplaceSpecType_Azure
	//	*ReplaceSpecType_Gcp
	//	*ReplaceSpecType_Rseries
	//	*ReplaceSpecType_Baremetal
	//	*ReplaceSpecType_Oci
	//	*ReplaceSpecType_Openstack
	//	*ReplaceSpecType_Nutanix
	ProviderChoice isReplaceSpecType_ProviderChoice `protobuf_oneof:"provider_choice"`
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*ReplaceSpecType_NoNetworkPolicy
	//	*ReplaceSpecType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isReplaceSpecType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*ReplaceSpecType_NoForwardProxy
	//	*ReplaceSpecType_ActiveForwardProxyPolicies
	ForwardProxyChoice isReplaceSpecType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	SoftwareSettings   *SoftwareSettingsType                `protobuf:"bytes,17,opt,name=software_settings,json=softwareSettings,proto3" json:"software_settings,omitempty"`
	UpgradeSettings    *UpgradeSettingsType                 `protobuf:"bytes,20,opt,name=upgrade_settings,json=upgradeSettings,proto3" json:"upgrade_settings,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*ReplaceSpecType_LogsStreamingDisabled
	//	*ReplaceSpecType_LogReceiver
	LogsReceiverChoice isReplaceSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*ReplaceSpecType_BlockAllServices
	//	*ReplaceSpecType_BlockedServices
	BlockedServicesChoice      isReplaceSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType   `protobuf:"bytes,27,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
	OfflineSurvivabilityMode   *views.OfflineSurvivabilityModeType     `protobuf:"bytes,28,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	TunnelDeadTimeout          uint32                                  `protobuf:"varint,29,opt,name=tunnel_dead_timeout,json=tunnelDeadTimeout,proto3" json:"tunnel_dead_timeout,omitempty"`
	LoadBalancing              *LoadBalancingSettingsType              `protobuf:"bytes,30,opt,name=load_balancing,json=loadBalancing,proto3" json:"load_balancing,omitempty"`
	// Types that are valid to be assigned to S2SConnectivitySliChoice:
	//	*ReplaceSpecType_NoS2SConnectivitySli
	//	*ReplaceSpecType_DcClusterGroupSli
	S2SConnectivitySliChoice isReplaceSpecType_S2SConnectivitySliChoice `protobuf_oneof:"s2s_connectivity_sli_choice"`
	// Types that are valid to be assigned to S2SConnectivitySloChoice:
	//	*ReplaceSpecType_NoS2SConnectivitySlo
	//	*ReplaceSpecType_SiteMeshGroupOnSlo
	//	*ReplaceSpecType_DcClusterGroupSlo
	S2SConnectivitySloChoice isReplaceSpecType_S2SConnectivitySloChoice `protobuf_oneof:"s2s_connectivity_slo_choice"`
	LocalVrf                 *LocalVRFSettingType                       `protobuf:"bytes,43,opt,name=local_vrf,json=localVrf,proto3" json:"local_vrf,omitempty"`
	TunnelType               schema.SiteToSiteTunnelType                `protobuf:"varint,44,opt,name=tunnel_type,json=tunnelType,proto3,enum=ves.io.schema.SiteToSiteTunnelType" json:"tunnel_type,omitempty"`
	ReSelect                 *views.RegionalEdgeSelection               `protobuf:"bytes,45,opt,name=re_select,json=reSelect,proto3" json:"re_select,omitempty"`
	// Types that are valid to be assigned to NodeHaChoice:
	//	*ReplaceSpecType_DisableHa
	//	*ReplaceSpecType_EnableHa
	NodeHaChoice         isReplaceSpecType_NodeHaChoice   `protobuf_oneof:"node_ha_choice"`
	AdminUserCredentials *views.AdminUserCredentialsType  `protobuf:"bytes,53,opt,name=admin_user_credentials,json=adminUserCredentials,proto3" json:"admin_user_credentials,omitempty"`
	ProactiveMonitoring  *views.ProactiveMonitoringChoice `protobuf:"bytes,56,opt,name=proactive_monitoring,json=proactiveMonitoring,proto3" json:"proactive_monitoring,omitempty"`
	// Types that are valid to be assigned to EnterpriseProxyChoice:
	//	*ReplaceSpecType_F5Proxy
	//	*ReplaceSpecType_CustomProxy
	EnterpriseProxyChoice isReplaceSpecType_EnterpriseProxyChoice `protobuf_oneof:"enterprise_proxy_choice"`
	DnsNtpConfig          *DNSNTPServerConfig                     `protobuf:"bytes,62,opt,name=dns_ntp_config,json=dnsNtpConfig,proto3" json:"dns_ntp_config,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{22}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_ProviderChoice interface {
	isReplaceSpecType_ProviderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_NetworkPolicyChoice interface {
	isReplaceSpecType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ForwardProxyChoice interface {
	isReplaceSpecType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_LogsReceiverChoice interface {
	isReplaceSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_BlockedServicesChoice interface {
	isReplaceSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_S2SConnectivitySliChoice interface {
	isReplaceSpecType_S2SConnectivitySliChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_S2SConnectivitySloChoice interface {
	isReplaceSpecType_S2SConnectivitySloChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_NodeHaChoice interface {
	isReplaceSpecType_NodeHaChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_EnterpriseProxyChoice interface {
	isReplaceSpecType_EnterpriseProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Vmware struct {
	Vmware *VMwareProviderType `protobuf:"bytes,2,opt,name=vmware,proto3,oneof" json:"vmware,omitempty"`
}
type ReplaceSpecType_Kvm struct {
	Kvm *KVMProviderType `protobuf:"bytes,3,opt,name=kvm,proto3,oneof" json:"kvm,omitempty"`
}
type ReplaceSpecType_Aws struct {
	Aws *AWSProviderType `protobuf:"bytes,4,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}
type ReplaceSpecType_Azure struct {
	Azure *AzureProviderType `protobuf:"bytes,5,opt,name=azure,proto3,oneof" json:"azure,omitempty"`
}
type ReplaceSpecType_Gcp struct {
	Gcp *GCPProviderType `protobuf:"bytes,6,opt,name=gcp,proto3,oneof" json:"gcp,omitempty"`
}
type ReplaceSpecType_Rseries struct {
	Rseries *RSeriesProviderType `protobuf:"bytes,7,opt,name=rseries,proto3,oneof" json:"rseries,omitempty"`
}
type ReplaceSpecType_Baremetal struct {
	Baremetal *BaremetalProviderType `protobuf:"bytes,8,opt,name=baremetal,proto3,oneof" json:"baremetal,omitempty"`
}
type ReplaceSpecType_Oci struct {
	Oci *OCIProviderType `protobuf:"bytes,9,opt,name=oci,proto3,oneof" json:"oci,omitempty"`
}
type ReplaceSpecType_Openstack struct {
	Openstack *OpenstackProviderType `protobuf:"bytes,54,opt,name=openstack,proto3,oneof" json:"openstack,omitempty"`
}
type ReplaceSpecType_Nutanix struct {
	Nutanix *NutanixProviderType `protobuf:"bytes,55,opt,name=nutanix,proto3,oneof" json:"nutanix,omitempty"`
}
type ReplaceSpecType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,12,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type ReplaceSpecType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,13,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type ReplaceSpecType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,15,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type ReplaceSpecType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,16,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type ReplaceSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,22,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type ReplaceSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,23,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type ReplaceSpecType_BlockAllServices struct {
	BlockAllServices *schema.Empty `protobuf:"bytes,25,opt,name=block_all_services,json=blockAllServices,proto3,oneof" json:"block_all_services,omitempty"`
}
type ReplaceSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,26,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}
type ReplaceSpecType_NoS2SConnectivitySli struct {
	NoS2SConnectivitySli *schema.Empty `protobuf:"bytes,33,opt,name=no_s2s_connectivity_sli,json=noS2sConnectivitySli,proto3,oneof" json:"no_s2s_connectivity_sli,omitempty"`
}
type ReplaceSpecType_DcClusterGroupSli struct {
	DcClusterGroupSli *views.ObjectRefType `protobuf:"bytes,34,opt,name=dc_cluster_group_sli,json=dcClusterGroupSli,proto3,oneof" json:"dc_cluster_group_sli,omitempty"`
}
type ReplaceSpecType_NoS2SConnectivitySlo struct {
	NoS2SConnectivitySlo *schema.Empty `protobuf:"bytes,36,opt,name=no_s2s_connectivity_slo,json=noS2sConnectivitySlo,proto3,oneof" json:"no_s2s_connectivity_slo,omitempty"`
}
type ReplaceSpecType_SiteMeshGroupOnSlo struct {
	SiteMeshGroupOnSlo *SiteMeshGroupType `protobuf:"bytes,37,opt,name=site_mesh_group_on_slo,json=siteMeshGroupOnSlo,proto3,oneof" json:"site_mesh_group_on_slo,omitempty"`
}
type ReplaceSpecType_DcClusterGroupSlo struct {
	DcClusterGroupSlo *views.ObjectRefType `protobuf:"bytes,38,opt,name=dc_cluster_group_slo,json=dcClusterGroupSlo,proto3,oneof" json:"dc_cluster_group_slo,omitempty"`
}
type ReplaceSpecType_DisableHa struct {
	DisableHa *schema.Empty `protobuf:"bytes,50,opt,name=disable_ha,json=disableHa,proto3,oneof" json:"disable_ha,omitempty"`
}
type ReplaceSpecType_EnableHa struct {
	EnableHa *schema.Empty `protobuf:"bytes,51,opt,name=enable_ha,json=enableHa,proto3,oneof" json:"enable_ha,omitempty"`
}
type ReplaceSpecType_F5Proxy struct {
	F5Proxy *schema.Empty `protobuf:"bytes,60,opt,name=f5_proxy,json=f5Proxy,proto3,oneof" json:"f5_proxy,omitempty"`
}
type ReplaceSpecType_CustomProxy struct {
	CustomProxy *CustomProxy `protobuf:"bytes,61,opt,name=custom_proxy,json=customProxy,proto3,oneof" json:"custom_proxy,omitempty"`
}

func (*ReplaceSpecType_Vmware) isReplaceSpecType_ProviderChoice()                              {}
func (*ReplaceSpecType_Kvm) isReplaceSpecType_ProviderChoice()                                 {}
func (*ReplaceSpecType_Aws) isReplaceSpecType_ProviderChoice()                                 {}
func (*ReplaceSpecType_Azure) isReplaceSpecType_ProviderChoice()                               {}
func (*ReplaceSpecType_Gcp) isReplaceSpecType_ProviderChoice()                                 {}
func (*ReplaceSpecType_Rseries) isReplaceSpecType_ProviderChoice()                             {}
func (*ReplaceSpecType_Baremetal) isReplaceSpecType_ProviderChoice()                           {}
func (*ReplaceSpecType_Oci) isReplaceSpecType_ProviderChoice()                                 {}
func (*ReplaceSpecType_Openstack) isReplaceSpecType_ProviderChoice()                           {}
func (*ReplaceSpecType_Nutanix) isReplaceSpecType_ProviderChoice()                             {}
func (*ReplaceSpecType_NoNetworkPolicy) isReplaceSpecType_NetworkPolicyChoice()                {}
func (*ReplaceSpecType_ActiveEnhancedFirewallPolicies) isReplaceSpecType_NetworkPolicyChoice() {}
func (*ReplaceSpecType_NoForwardProxy) isReplaceSpecType_ForwardProxyChoice()                  {}
func (*ReplaceSpecType_ActiveForwardProxyPolicies) isReplaceSpecType_ForwardProxyChoice()      {}
func (*ReplaceSpecType_LogsStreamingDisabled) isReplaceSpecType_LogsReceiverChoice()           {}
func (*ReplaceSpecType_LogReceiver) isReplaceSpecType_LogsReceiverChoice()                     {}
func (*ReplaceSpecType_BlockAllServices) isReplaceSpecType_BlockedServicesChoice()             {}
func (*ReplaceSpecType_BlockedServices) isReplaceSpecType_BlockedServicesChoice()              {}
func (*ReplaceSpecType_NoS2SConnectivitySli) isReplaceSpecType_S2SConnectivitySliChoice()      {}
func (*ReplaceSpecType_DcClusterGroupSli) isReplaceSpecType_S2SConnectivitySliChoice()         {}
func (*ReplaceSpecType_NoS2SConnectivitySlo) isReplaceSpecType_S2SConnectivitySloChoice()      {}
func (*ReplaceSpecType_SiteMeshGroupOnSlo) isReplaceSpecType_S2SConnectivitySloChoice()        {}
func (*ReplaceSpecType_DcClusterGroupSlo) isReplaceSpecType_S2SConnectivitySloChoice()         {}
func (*ReplaceSpecType_DisableHa) isReplaceSpecType_NodeHaChoice()                             {}
func (*ReplaceSpecType_EnableHa) isReplaceSpecType_NodeHaChoice()                              {}
func (*ReplaceSpecType_F5Proxy) isReplaceSpecType_EnterpriseProxyChoice()                      {}
func (*ReplaceSpecType_CustomProxy) isReplaceSpecType_EnterpriseProxyChoice()                  {}

func (m *ReplaceSpecType) GetProviderChoice() isReplaceSpecType_ProviderChoice {
	if m != nil {
		return m.ProviderChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetNetworkPolicyChoice() isReplaceSpecType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetForwardProxyChoice() isReplaceSpecType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetLogsReceiverChoice() isReplaceSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetBlockedServicesChoice() isReplaceSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetS2SConnectivitySliChoice() isReplaceSpecType_S2SConnectivitySliChoice {
	if m != nil {
		return m.S2SConnectivitySliChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetS2SConnectivitySloChoice() isReplaceSpecType_S2SConnectivitySloChoice {
	if m != nil {
		return m.S2SConnectivitySloChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetNodeHaChoice() isReplaceSpecType_NodeHaChoice {
	if m != nil {
		return m.NodeHaChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetEnterpriseProxyChoice() isReplaceSpecType_EnterpriseProxyChoice {
	if m != nil {
		return m.EnterpriseProxyChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetVmware() *VMwareProviderType {
	if x, ok := m.GetProviderChoice().(*ReplaceSpecType_Vmware); ok {
		return x.Vmware
	}
	return nil
}

func (m *ReplaceSpecType) GetKvm() *KVMProviderType {
	if x, ok := m.GetProviderChoice().(*ReplaceSpecType_Kvm); ok {
		return x.Kvm
	}
	return nil
}

func (m *ReplaceSpecType) GetAws() *AWSProviderType {
	if x, ok := m.GetProviderChoice().(*ReplaceSpecType_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *ReplaceSpecType) GetAzure() *AzureProviderType {
	if x, ok := m.GetProviderChoice().(*ReplaceSpecType_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *ReplaceSpecType) GetGcp() *GCPProviderType {
	if x, ok := m.GetProviderChoice().(*ReplaceSpecType_Gcp); ok {
		return x.Gcp
	}
	return nil
}

func (m *ReplaceSpecType) GetRseries() *RSeriesProviderType {
	if x, ok := m.GetProviderChoice().(*ReplaceSpecType_Rseries); ok {
		return x.Rseries
	}
	return nil
}

func (m *ReplaceSpecType) GetBaremetal() *BaremetalProviderType {
	if x, ok := m.GetProviderChoice().(*ReplaceSpecType_Baremetal); ok {
		return x.Baremetal
	}
	return nil
}

func (m *ReplaceSpecType) GetOci() *OCIProviderType {
	if x, ok := m.GetProviderChoice().(*ReplaceSpecType_Oci); ok {
		return x.Oci
	}
	return nil
}

func (m *ReplaceSpecType) GetOpenstack() *OpenstackProviderType {
	if x, ok := m.GetProviderChoice().(*ReplaceSpecType_Openstack); ok {
		return x.Openstack
	}
	return nil
}

func (m *ReplaceSpecType) GetNutanix() *NutanixProviderType {
	if x, ok := m.GetProviderChoice().(*ReplaceSpecType_Nutanix); ok {
		return x.Nutanix
	}
	return nil
}

func (m *ReplaceSpecType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*ReplaceSpecType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*ReplaceSpecType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *ReplaceSpecType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*ReplaceSpecType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *ReplaceSpecType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*ReplaceSpecType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *ReplaceSpecType) GetSoftwareSettings() *SoftwareSettingsType {
	if m != nil {
		return m.SoftwareSettings
	}
	return nil
}

func (m *ReplaceSpecType) GetUpgradeSettings() *UpgradeSettingsType {
	if m != nil {
		return m.UpgradeSettings
	}
	return nil
}

func (m *ReplaceSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *ReplaceSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *ReplaceSpecType) GetBlockAllServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockAllServices); ok {
		return x.BlockAllServices
	}
	return nil
}

func (m *ReplaceSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *ReplaceSpecType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

func (m *ReplaceSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *ReplaceSpecType) GetTunnelDeadTimeout() uint32 {
	if m != nil {
		return m.TunnelDeadTimeout
	}
	return 0
}

func (m *ReplaceSpecType) GetLoadBalancing() *LoadBalancingSettingsType {
	if m != nil {
		return m.LoadBalancing
	}
	return nil
}

func (m *ReplaceSpecType) GetNoS2SConnectivitySli() *schema.Empty {
	if x, ok := m.GetS2SConnectivitySliChoice().(*ReplaceSpecType_NoS2SConnectivitySli); ok {
		return x.NoS2SConnectivitySli
	}
	return nil
}

func (m *ReplaceSpecType) GetDcClusterGroupSli() *views.ObjectRefType {
	if x, ok := m.GetS2SConnectivitySliChoice().(*ReplaceSpecType_DcClusterGroupSli); ok {
		return x.DcClusterGroupSli
	}
	return nil
}

func (m *ReplaceSpecType) GetNoS2SConnectivitySlo() *schema.Empty {
	if x, ok := m.GetS2SConnectivitySloChoice().(*ReplaceSpecType_NoS2SConnectivitySlo); ok {
		return x.NoS2SConnectivitySlo
	}
	return nil
}

func (m *ReplaceSpecType) GetSiteMeshGroupOnSlo() *SiteMeshGroupType {
	if x, ok := m.GetS2SConnectivitySloChoice().(*ReplaceSpecType_SiteMeshGroupOnSlo); ok {
		return x.SiteMeshGroupOnSlo
	}
	return nil
}

func (m *ReplaceSpecType) GetDcClusterGroupSlo() *views.ObjectRefType {
	if x, ok := m.GetS2SConnectivitySloChoice().(*ReplaceSpecType_DcClusterGroupSlo); ok {
		return x.DcClusterGroupSlo
	}
	return nil
}

func (m *ReplaceSpecType) GetLocalVrf() *LocalVRFSettingType {
	if m != nil {
		return m.LocalVrf
	}
	return nil
}

func (m *ReplaceSpecType) GetTunnelType() schema.SiteToSiteTunnelType {
	if m != nil {
		return m.TunnelType
	}
	return schema.SITE_TO_SITE_TUNNEL_IPSEC_OR_SSL
}

func (m *ReplaceSpecType) GetReSelect() *views.RegionalEdgeSelection {
	if m != nil {
		return m.ReSelect
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableHa() *schema.Empty {
	if x, ok := m.GetNodeHaChoice().(*ReplaceSpecType_DisableHa); ok {
		return x.DisableHa
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableHa() *schema.Empty {
	if x, ok := m.GetNodeHaChoice().(*ReplaceSpecType_EnableHa); ok {
		return x.EnableHa
	}
	return nil
}

func (m *ReplaceSpecType) GetAdminUserCredentials() *views.AdminUserCredentialsType {
	if m != nil {
		return m.AdminUserCredentials
	}
	return nil
}

func (m *ReplaceSpecType) GetProactiveMonitoring() *views.ProactiveMonitoringChoice {
	if m != nil {
		return m.ProactiveMonitoring
	}
	return nil
}

func (m *ReplaceSpecType) GetF5Proxy() *schema.Empty {
	if x, ok := m.GetEnterpriseProxyChoice().(*ReplaceSpecType_F5Proxy); ok {
		return x.F5Proxy
	}
	return nil
}

func (m *ReplaceSpecType) GetCustomProxy() *CustomProxy {
	if x, ok := m.GetEnterpriseProxyChoice().(*ReplaceSpecType_CustomProxy); ok {
		return x.CustomProxy
	}
	return nil
}

func (m *ReplaceSpecType) GetDnsNtpConfig() *DNSNTPServerConfig {
	if m != nil {
		return m.DnsNtpConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_Vmware)(nil),
		(*ReplaceSpecType_Kvm)(nil),
		(*ReplaceSpecType_Aws)(nil),
		(*ReplaceSpecType_Azure)(nil),
		(*ReplaceSpecType_Gcp)(nil),
		(*ReplaceSpecType_Rseries)(nil),
		(*ReplaceSpecType_Baremetal)(nil),
		(*ReplaceSpecType_Oci)(nil),
		(*ReplaceSpecType_Openstack)(nil),
		(*ReplaceSpecType_Nutanix)(nil),
		(*ReplaceSpecType_NoNetworkPolicy)(nil),
		(*ReplaceSpecType_ActiveEnhancedFirewallPolicies)(nil),
		(*ReplaceSpecType_NoForwardProxy)(nil),
		(*ReplaceSpecType_ActiveForwardProxyPolicies)(nil),
		(*ReplaceSpecType_LogsStreamingDisabled)(nil),
		(*ReplaceSpecType_LogReceiver)(nil),
		(*ReplaceSpecType_BlockAllServices)(nil),
		(*ReplaceSpecType_BlockedServices)(nil),
		(*ReplaceSpecType_NoS2SConnectivitySli)(nil),
		(*ReplaceSpecType_DcClusterGroupSli)(nil),
		(*ReplaceSpecType_NoS2SConnectivitySlo)(nil),
		(*ReplaceSpecType_SiteMeshGroupOnSlo)(nil),
		(*ReplaceSpecType_DcClusterGroupSlo)(nil),
		(*ReplaceSpecType_DisableHa)(nil),
		(*ReplaceSpecType_EnableHa)(nil),
		(*ReplaceSpecType_F5Proxy)(nil),
		(*ReplaceSpecType_CustomProxy)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get Secure Mesh site"
// Shape of the Secure Mesh site specification
type GetSpecType struct {
	// Types that are valid to be assigned to ProviderChoice:
	//	*GetSpecType_Vmware
	//	*GetSpecType_Kvm
	//	*GetSpecType_Aws
	//	*GetSpecType_Azure
	//	*GetSpecType_Gcp
	//	*GetSpecType_Rseries
	//	*GetSpecType_Baremetal
	//	*GetSpecType_Oci
	//	*GetSpecType_Openstack
	//	*GetSpecType_Nutanix
	ProviderChoice isGetSpecType_ProviderChoice `protobuf_oneof:"provider_choice"`
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*GetSpecType_NoNetworkPolicy
	//	*GetSpecType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isGetSpecType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*GetSpecType_NoForwardProxy
	//	*GetSpecType_ActiveForwardProxyPolicies
	ForwardProxyChoice isGetSpecType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	SoftwareSettings   *SoftwareSettingsType            `protobuf:"bytes,17,opt,name=software_settings,json=softwareSettings,proto3" json:"software_settings,omitempty"`
	UpgradeSettings    *UpgradeSettingsType             `protobuf:"bytes,20,opt,name=upgrade_settings,json=upgradeSettings,proto3" json:"upgrade_settings,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GetSpecType_LogsStreamingDisabled
	//	*GetSpecType_LogReceiver
	LogsReceiverChoice isGetSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*GetSpecType_BlockAllServices
	//	*GetSpecType_BlockedServices
	BlockedServicesChoice      isGetSpecType_BlockedServicesChoice   `protobuf_oneof:"blocked_services_choice"`
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,27,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
	OfflineSurvivabilityMode   *views.OfflineSurvivabilityModeType   `protobuf:"bytes,28,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	TunnelDeadTimeout          uint32                                `protobuf:"varint,29,opt,name=tunnel_dead_timeout,json=tunnelDeadTimeout,proto3" json:"tunnel_dead_timeout,omitempty"`
	LoadBalancing              *LoadBalancingSettingsType            `protobuf:"bytes,30,opt,name=load_balancing,json=loadBalancing,proto3" json:"load_balancing,omitempty"`
	// Types that are valid to be assigned to S2SConnectivitySliChoice:
	//	*GetSpecType_NoS2SConnectivitySli
	//	*GetSpecType_DcClusterGroupSli
	S2SConnectivitySliChoice isGetSpecType_S2SConnectivitySliChoice `protobuf_oneof:"s2s_connectivity_sli_choice"`
	// Types that are valid to be assigned to S2SConnectivitySloChoice:
	//	*GetSpecType_NoS2SConnectivitySlo
	//	*GetSpecType_SiteMeshGroupOnSlo
	//	*GetSpecType_DcClusterGroupSlo
	S2SConnectivitySloChoice isGetSpecType_S2SConnectivitySloChoice `protobuf_oneof:"s2s_connectivity_slo_choice"`
	LocalVrf                 *LocalVRFSettingType                   `protobuf:"bytes,43,opt,name=local_vrf,json=localVrf,proto3" json:"local_vrf,omitempty"`
	TunnelType               schema.SiteToSiteTunnelType            `protobuf:"varint,44,opt,name=tunnel_type,json=tunnelType,proto3,enum=ves.io.schema.SiteToSiteTunnelType" json:"tunnel_type,omitempty"`
	ReSelect                 *views.RegionalEdgeSelection           `protobuf:"bytes,45,opt,name=re_select,json=reSelect,proto3" json:"re_select,omitempty"`
	VolterraSoftwareVersion  string                                 `protobuf:"bytes,47,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	OperatingSystemVersion   string                                 `protobuf:"bytes,48,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	// Types that are valid to be assigned to NodeHaChoice:
	//	*GetSpecType_DisableHa
	//	*GetSpecType_EnableHa
	NodeHaChoice         isGetSpecType_NodeHaChoice       `protobuf_oneof:"node_ha_choice"`
	SiteState            site.SiteState                   `protobuf:"varint,52,opt,name=site_state,json=siteState,proto3,enum=ves.io.schema.site.SiteState" json:"site_state,omitempty"`
	AdminUserCredentials *views.AdminUserCredentialsType  `protobuf:"bytes,53,opt,name=admin_user_credentials,json=adminUserCredentials,proto3" json:"admin_user_credentials,omitempty"`
	ProactiveMonitoring  *views.ProactiveMonitoringChoice `protobuf:"bytes,56,opt,name=proactive_monitoring,json=proactiveMonitoring,proto3" json:"proactive_monitoring,omitempty"`
	// Types that are valid to be assigned to EnterpriseProxyChoice:
	//	*GetSpecType_F5Proxy
	//	*GetSpecType_CustomProxy
	EnterpriseProxyChoice isGetSpecType_EnterpriseProxyChoice `protobuf_oneof:"enterprise_proxy_choice"`
	DnsNtpConfig          *DNSNTPServerConfig                 `protobuf:"bytes,62,opt,name=dns_ntp_config,json=dnsNtpConfig,proto3" json:"dns_ntp_config,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{23}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_ProviderChoice interface {
	isGetSpecType_ProviderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_NetworkPolicyChoice interface {
	isGetSpecType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ForwardProxyChoice interface {
	isGetSpecType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_LogsReceiverChoice interface {
	isGetSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_BlockedServicesChoice interface {
	isGetSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_S2SConnectivitySliChoice interface {
	isGetSpecType_S2SConnectivitySliChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_S2SConnectivitySloChoice interface {
	isGetSpecType_S2SConnectivitySloChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_NodeHaChoice interface {
	isGetSpecType_NodeHaChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_EnterpriseProxyChoice interface {
	isGetSpecType_EnterpriseProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Vmware struct {
	Vmware *VMwareProviderType `protobuf:"bytes,2,opt,name=vmware,proto3,oneof" json:"vmware,omitempty"`
}
type GetSpecType_Kvm struct {
	Kvm *KVMProviderType `protobuf:"bytes,3,opt,name=kvm,proto3,oneof" json:"kvm,omitempty"`
}
type GetSpecType_Aws struct {
	Aws *AWSProviderType `protobuf:"bytes,4,opt,name=aws,proto3,oneof" json:"aws,omitempty"`
}
type GetSpecType_Azure struct {
	Azure *AzureProviderType `protobuf:"bytes,5,opt,name=azure,proto3,oneof" json:"azure,omitempty"`
}
type GetSpecType_Gcp struct {
	Gcp *GCPProviderType `protobuf:"bytes,6,opt,name=gcp,proto3,oneof" json:"gcp,omitempty"`
}
type GetSpecType_Rseries struct {
	Rseries *RSeriesProviderType `protobuf:"bytes,7,opt,name=rseries,proto3,oneof" json:"rseries,omitempty"`
}
type GetSpecType_Baremetal struct {
	Baremetal *BaremetalProviderType `protobuf:"bytes,8,opt,name=baremetal,proto3,oneof" json:"baremetal,omitempty"`
}
type GetSpecType_Oci struct {
	Oci *OCIProviderType `protobuf:"bytes,9,opt,name=oci,proto3,oneof" json:"oci,omitempty"`
}
type GetSpecType_Openstack struct {
	Openstack *OpenstackProviderType `protobuf:"bytes,54,opt,name=openstack,proto3,oneof" json:"openstack,omitempty"`
}
type GetSpecType_Nutanix struct {
	Nutanix *NutanixProviderType `protobuf:"bytes,55,opt,name=nutanix,proto3,oneof" json:"nutanix,omitempty"`
}
type GetSpecType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,12,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type GetSpecType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,13,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type GetSpecType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,15,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type GetSpecType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,16,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type GetSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,22,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type GetSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,23,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type GetSpecType_BlockAllServices struct {
	BlockAllServices *schema.Empty `protobuf:"bytes,25,opt,name=block_all_services,json=blockAllServices,proto3,oneof" json:"block_all_services,omitempty"`
}
type GetSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,26,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}
type GetSpecType_NoS2SConnectivitySli struct {
	NoS2SConnectivitySli *schema.Empty `protobuf:"bytes,33,opt,name=no_s2s_connectivity_sli,json=noS2sConnectivitySli,proto3,oneof" json:"no_s2s_connectivity_sli,omitempty"`
}
type GetSpecType_DcClusterGroupSli struct {
	DcClusterGroupSli *views.ObjectRefType `protobuf:"bytes,34,opt,name=dc_cluster_group_sli,json=dcClusterGroupSli,proto3,oneof" json:"dc_cluster_group_sli,omitempty"`
}
type GetSpecType_NoS2SConnectivitySlo struct {
	NoS2SConnectivitySlo *schema.Empty `protobuf:"bytes,36,opt,name=no_s2s_connectivity_slo,json=noS2sConnectivitySlo,proto3,oneof" json:"no_s2s_connectivity_slo,omitempty"`
}
type GetSpecType_SiteMeshGroupOnSlo struct {
	SiteMeshGroupOnSlo *SiteMeshGroupType `protobuf:"bytes,37,opt,name=site_mesh_group_on_slo,json=siteMeshGroupOnSlo,proto3,oneof" json:"site_mesh_group_on_slo,omitempty"`
}
type GetSpecType_DcClusterGroupSlo struct {
	DcClusterGroupSlo *views.ObjectRefType `protobuf:"bytes,38,opt,name=dc_cluster_group_slo,json=dcClusterGroupSlo,proto3,oneof" json:"dc_cluster_group_slo,omitempty"`
}
type GetSpecType_DisableHa struct {
	DisableHa *schema.Empty `protobuf:"bytes,50,opt,name=disable_ha,json=disableHa,proto3,oneof" json:"disable_ha,omitempty"`
}
type GetSpecType_EnableHa struct {
	EnableHa *schema.Empty `protobuf:"bytes,51,opt,name=enable_ha,json=enableHa,proto3,oneof" json:"enable_ha,omitempty"`
}
type GetSpecType_F5Proxy struct {
	F5Proxy *schema.Empty `protobuf:"bytes,60,opt,name=f5_proxy,json=f5Proxy,proto3,oneof" json:"f5_proxy,omitempty"`
}
type GetSpecType_CustomProxy struct {
	CustomProxy *CustomProxy `protobuf:"bytes,61,opt,name=custom_proxy,json=customProxy,proto3,oneof" json:"custom_proxy,omitempty"`
}

func (*GetSpecType_Vmware) isGetSpecType_ProviderChoice()                              {}
func (*GetSpecType_Kvm) isGetSpecType_ProviderChoice()                                 {}
func (*GetSpecType_Aws) isGetSpecType_ProviderChoice()                                 {}
func (*GetSpecType_Azure) isGetSpecType_ProviderChoice()                               {}
func (*GetSpecType_Gcp) isGetSpecType_ProviderChoice()                                 {}
func (*GetSpecType_Rseries) isGetSpecType_ProviderChoice()                             {}
func (*GetSpecType_Baremetal) isGetSpecType_ProviderChoice()                           {}
func (*GetSpecType_Oci) isGetSpecType_ProviderChoice()                                 {}
func (*GetSpecType_Openstack) isGetSpecType_ProviderChoice()                           {}
func (*GetSpecType_Nutanix) isGetSpecType_ProviderChoice()                             {}
func (*GetSpecType_NoNetworkPolicy) isGetSpecType_NetworkPolicyChoice()                {}
func (*GetSpecType_ActiveEnhancedFirewallPolicies) isGetSpecType_NetworkPolicyChoice() {}
func (*GetSpecType_NoForwardProxy) isGetSpecType_ForwardProxyChoice()                  {}
func (*GetSpecType_ActiveForwardProxyPolicies) isGetSpecType_ForwardProxyChoice()      {}
func (*GetSpecType_LogsStreamingDisabled) isGetSpecType_LogsReceiverChoice()           {}
func (*GetSpecType_LogReceiver) isGetSpecType_LogsReceiverChoice()                     {}
func (*GetSpecType_BlockAllServices) isGetSpecType_BlockedServicesChoice()             {}
func (*GetSpecType_BlockedServices) isGetSpecType_BlockedServicesChoice()              {}
func (*GetSpecType_NoS2SConnectivitySli) isGetSpecType_S2SConnectivitySliChoice()      {}
func (*GetSpecType_DcClusterGroupSli) isGetSpecType_S2SConnectivitySliChoice()         {}
func (*GetSpecType_NoS2SConnectivitySlo) isGetSpecType_S2SConnectivitySloChoice()      {}
func (*GetSpecType_SiteMeshGroupOnSlo) isGetSpecType_S2SConnectivitySloChoice()        {}
func (*GetSpecType_DcClusterGroupSlo) isGetSpecType_S2SConnectivitySloChoice()         {}
func (*GetSpecType_DisableHa) isGetSpecType_NodeHaChoice()                             {}
func (*GetSpecType_EnableHa) isGetSpecType_NodeHaChoice()                              {}
func (*GetSpecType_F5Proxy) isGetSpecType_EnterpriseProxyChoice()                      {}
func (*GetSpecType_CustomProxy) isGetSpecType_EnterpriseProxyChoice()                  {}

func (m *GetSpecType) GetProviderChoice() isGetSpecType_ProviderChoice {
	if m != nil {
		return m.ProviderChoice
	}
	return nil
}
func (m *GetSpecType) GetNetworkPolicyChoice() isGetSpecType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *GetSpecType) GetForwardProxyChoice() isGetSpecType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *GetSpecType) GetLogsReceiverChoice() isGetSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *GetSpecType) GetBlockedServicesChoice() isGetSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}
func (m *GetSpecType) GetS2SConnectivitySliChoice() isGetSpecType_S2SConnectivitySliChoice {
	if m != nil {
		return m.S2SConnectivitySliChoice
	}
	return nil
}
func (m *GetSpecType) GetS2SConnectivitySloChoice() isGetSpecType_S2SConnectivitySloChoice {
	if m != nil {
		return m.S2SConnectivitySloChoice
	}
	return nil
}
func (m *GetSpecType) GetNodeHaChoice() isGetSpecType_NodeHaChoice {
	if m != nil {
		return m.NodeHaChoice
	}
	return nil
}
func (m *GetSpecType) GetEnterpriseProxyChoice() isGetSpecType_EnterpriseProxyChoice {
	if m != nil {
		return m.EnterpriseProxyChoice
	}
	return nil
}

func (m *GetSpecType) GetVmware() *VMwareProviderType {
	if x, ok := m.GetProviderChoice().(*GetSpecType_Vmware); ok {
		return x.Vmware
	}
	return nil
}

func (m *GetSpecType) GetKvm() *KVMProviderType {
	if x, ok := m.GetProviderChoice().(*GetSpecType_Kvm); ok {
		return x.Kvm
	}
	return nil
}

func (m *GetSpecType) GetAws() *AWSProviderType {
	if x, ok := m.GetProviderChoice().(*GetSpecType_Aws); ok {
		return x.Aws
	}
	return nil
}

func (m *GetSpecType) GetAzure() *AzureProviderType {
	if x, ok := m.GetProviderChoice().(*GetSpecType_Azure); ok {
		return x.Azure
	}
	return nil
}

func (m *GetSpecType) GetGcp() *GCPProviderType {
	if x, ok := m.GetProviderChoice().(*GetSpecType_Gcp); ok {
		return x.Gcp
	}
	return nil
}

func (m *GetSpecType) GetRseries() *RSeriesProviderType {
	if x, ok := m.GetProviderChoice().(*GetSpecType_Rseries); ok {
		return x.Rseries
	}
	return nil
}

func (m *GetSpecType) GetBaremetal() *BaremetalProviderType {
	if x, ok := m.GetProviderChoice().(*GetSpecType_Baremetal); ok {
		return x.Baremetal
	}
	return nil
}

func (m *GetSpecType) GetOci() *OCIProviderType {
	if x, ok := m.GetProviderChoice().(*GetSpecType_Oci); ok {
		return x.Oci
	}
	return nil
}

func (m *GetSpecType) GetOpenstack() *OpenstackProviderType {
	if x, ok := m.GetProviderChoice().(*GetSpecType_Openstack); ok {
		return x.Openstack
	}
	return nil
}

func (m *GetSpecType) GetNutanix() *NutanixProviderType {
	if x, ok := m.GetProviderChoice().(*GetSpecType_Nutanix); ok {
		return x.Nutanix
	}
	return nil
}

func (m *GetSpecType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*GetSpecType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *GetSpecType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*GetSpecType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *GetSpecType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*GetSpecType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *GetSpecType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*GetSpecType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *GetSpecType) GetSoftwareSettings() *SoftwareSettingsType {
	if m != nil {
		return m.SoftwareSettings
	}
	return nil
}

func (m *GetSpecType) GetUpgradeSettings() *UpgradeSettingsType {
	if m != nil {
		return m.UpgradeSettings
	}
	return nil
}

func (m *GetSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GetSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GetSpecType) GetBlockAllServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GetSpecType_BlockAllServices); ok {
		return x.BlockAllServices
	}
	return nil
}

func (m *GetSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*GetSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *GetSpecType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

func (m *GetSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *GetSpecType) GetTunnelDeadTimeout() uint32 {
	if m != nil {
		return m.TunnelDeadTimeout
	}
	return 0
}

func (m *GetSpecType) GetLoadBalancing() *LoadBalancingSettingsType {
	if m != nil {
		return m.LoadBalancing
	}
	return nil
}

func (m *GetSpecType) GetNoS2SConnectivitySli() *schema.Empty {
	if x, ok := m.GetS2SConnectivitySliChoice().(*GetSpecType_NoS2SConnectivitySli); ok {
		return x.NoS2SConnectivitySli
	}
	return nil
}

func (m *GetSpecType) GetDcClusterGroupSli() *views.ObjectRefType {
	if x, ok := m.GetS2SConnectivitySliChoice().(*GetSpecType_DcClusterGroupSli); ok {
		return x.DcClusterGroupSli
	}
	return nil
}

func (m *GetSpecType) GetNoS2SConnectivitySlo() *schema.Empty {
	if x, ok := m.GetS2SConnectivitySloChoice().(*GetSpecType_NoS2SConnectivitySlo); ok {
		return x.NoS2SConnectivitySlo
	}
	return nil
}

func (m *GetSpecType) GetSiteMeshGroupOnSlo() *SiteMeshGroupType {
	if x, ok := m.GetS2SConnectivitySloChoice().(*GetSpecType_SiteMeshGroupOnSlo); ok {
		return x.SiteMeshGroupOnSlo
	}
	return nil
}

func (m *GetSpecType) GetDcClusterGroupSlo() *views.ObjectRefType {
	if x, ok := m.GetS2SConnectivitySloChoice().(*GetSpecType_DcClusterGroupSlo); ok {
		return x.DcClusterGroupSlo
	}
	return nil
}

func (m *GetSpecType) GetLocalVrf() *LocalVRFSettingType {
	if m != nil {
		return m.LocalVrf
	}
	return nil
}

func (m *GetSpecType) GetTunnelType() schema.SiteToSiteTunnelType {
	if m != nil {
		return m.TunnelType
	}
	return schema.SITE_TO_SITE_TUNNEL_IPSEC_OR_SSL
}

func (m *GetSpecType) GetReSelect() *views.RegionalEdgeSelection {
	if m != nil {
		return m.ReSelect
	}
	return nil
}

func (m *GetSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GetSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GetSpecType) GetDisableHa() *schema.Empty {
	if x, ok := m.GetNodeHaChoice().(*GetSpecType_DisableHa); ok {
		return x.DisableHa
	}
	return nil
}

func (m *GetSpecType) GetEnableHa() *schema.Empty {
	if x, ok := m.GetNodeHaChoice().(*GetSpecType_EnableHa); ok {
		return x.EnableHa
	}
	return nil
}

func (m *GetSpecType) GetSiteState() site.SiteState {
	if m != nil {
		return m.SiteState
	}
	return site.ONLINE
}

func (m *GetSpecType) GetAdminUserCredentials() *views.AdminUserCredentialsType {
	if m != nil {
		return m.AdminUserCredentials
	}
	return nil
}

func (m *GetSpecType) GetProactiveMonitoring() *views.ProactiveMonitoringChoice {
	if m != nil {
		return m.ProactiveMonitoring
	}
	return nil
}

func (m *GetSpecType) GetF5Proxy() *schema.Empty {
	if x, ok := m.GetEnterpriseProxyChoice().(*GetSpecType_F5Proxy); ok {
		return x.F5Proxy
	}
	return nil
}

func (m *GetSpecType) GetCustomProxy() *CustomProxy {
	if x, ok := m.GetEnterpriseProxyChoice().(*GetSpecType_CustomProxy); ok {
		return x.CustomProxy
	}
	return nil
}

func (m *GetSpecType) GetDnsNtpConfig() *DNSNTPServerConfig {
	if m != nil {
		return m.DnsNtpConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_Vmware)(nil),
		(*GetSpecType_Kvm)(nil),
		(*GetSpecType_Aws)(nil),
		(*GetSpecType_Azure)(nil),
		(*GetSpecType_Gcp)(nil),
		(*GetSpecType_Rseries)(nil),
		(*GetSpecType_Baremetal)(nil),
		(*GetSpecType_Oci)(nil),
		(*GetSpecType_Openstack)(nil),
		(*GetSpecType_Nutanix)(nil),
		(*GetSpecType_NoNetworkPolicy)(nil),
		(*GetSpecType_ActiveEnhancedFirewallPolicies)(nil),
		(*GetSpecType_NoForwardProxy)(nil),
		(*GetSpecType_ActiveForwardProxyPolicies)(nil),
		(*GetSpecType_LogsStreamingDisabled)(nil),
		(*GetSpecType_LogReceiver)(nil),
		(*GetSpecType_BlockAllServices)(nil),
		(*GetSpecType_BlockedServices)(nil),
		(*GetSpecType_NoS2SConnectivitySli)(nil),
		(*GetSpecType_DcClusterGroupSli)(nil),
		(*GetSpecType_NoS2SConnectivitySlo)(nil),
		(*GetSpecType_SiteMeshGroupOnSlo)(nil),
		(*GetSpecType_DcClusterGroupSlo)(nil),
		(*GetSpecType_DisableHa)(nil),
		(*GetSpecType_EnableHa)(nil),
		(*GetSpecType_F5Proxy)(nil),
		(*GetSpecType_CustomProxy)(nil),
	}
}

// Interface
//
// x-displayName: "Interface"
// Interface definition
type Interface struct {
	// Interface Description
	//
	// x-displayName: "Interface Description"
	// x-example: "value"
	// Description for this Interface
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Interface labels
	//
	// x-displayName: "Interface Labels"
	// x-example: "value"
	// Add Labels for this Interface, these labels can be used in firewall policy
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Interface Config Type
	//
	// x-displayName: "Interface Type"
	// x-required
	// Select the appropriate interface type.
	// For sites with F5 rSeries as the provider, the 1st interface will be an Ethernet interface mapped to the Site Local Outside (SLO) local VRF. Configure any additional interfaces required as VLAN interfaces.
	// For sites with Bond interfaces, Bond for Site Local Outside (SLO) local VRF will be configured on the node itself during provisioning. After the node registers, this bond interface can be managed from here.
	// Any additional Bond interfaces can be configured from here.
	//
	// Types that are valid to be assigned to InterfaceChoice:
	//	*Interface_EthernetInterface
	//	*Interface_VlanInterface
	//	*Interface_BondInterface
	InterfaceChoice isInterface_InterfaceChoice `protobuf_oneof:"interface_choice"`
	// Interface Addressing
	//
	// x-displayName: "IPv4 Interface Address Method"
	// x-required
	// Select how ipv4 address will be assigned to this interface.
	//
	// Types that are valid to be assigned to AddressChoice:
	//	*Interface_DhcpClient
	//	*Interface_StaticIp
	//	*Interface_DhcpServer
	//	*Interface_NoIpv4Address
	AddressChoice isInterface_AddressChoice `protobuf_oneof:"address_choice"`
	// Interface Name
	//
	// x-displayName: "Interface Name"
	// x-example: "value"
	// Name of this Interface
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// Maximum Packet Size (MTU)
	//
	// x-displayName: "Maximum Packet Size (MTU)"
	// x-example: "1450"
	// Maximum packet size (Maximum Transfer Unit) of the interface
	// When configured, mtu must be between 512 and 16384
	Mtu uint32 `protobuf:"varint,11,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// Select VRF
	//
	// x-displayName: "Select VRF"
	// x-required
	// Select virtual network (VRF) for this interface.
	// There are 2 kinds of VRFs, local VRFs which are local to the site and global VRFs which extend into multiple sites.
	// A site can have 2 Local VRFs, Site Local Outside (SLO), which is required for every site and Site Local Inside (SLI) which is optional.
	// Global VRFs are configured via Networking > Segments. A site can have multple Network Segments (global VRFs).
	NetworkOption *views.NetworkSelectType `protobuf:"bytes,12,opt,name=network_option,json=networkOption,proto3" json:"network_option,omitempty"`
	// Select Link Quality Monitoring configuration
	//
	// x-displayName: "Link Quality Monitoring"
	// When enabled, probes will be sent on the network interface to monitor quality of the link.
	// Links are assigned a score based on the result of probes.
	//
	// Types that are valid to be assigned to MonitoringChoice:
	//	*Interface_MonitorDisabled
	//	*Interface_Monitor
	MonitoringChoice isInterface_MonitoringChoice `protobuf_oneof:"monitoring_choice"`
	// Priority
	//
	// x-displayName: "Priority"
	// x-example: "42"
	// For a node, if multiple interfaces are configured in a VRF, interfaces with highest priority will be used as active
	// and interfaces with lower priority will be used as backup.
	// If multiple interfaces have the same priority, ECMP will be used.
	// Greater the value, higher the priority
	Priority uint32 `protobuf:"varint,19,opt,name=priority,proto3" json:"priority,omitempty"`
	// Use for Site to Site Connectivity
	//
	// x-displayName: "Use for Site to Site Connectivity"
	// Interface with this field enabled will be used to connect to other sites.
	// This setting is useful if a node has multiple interfaces configured in a VRF.
	// Only one interface in a VRF can have this field enabled.
	//
	// Types that are valid to be assigned to SiteToSiteConnectivityInterfaceChoice:
	//	*Interface_SiteToSiteConnectivityInterfaceDisabled
	//	*Interface_SiteToSiteConnectivityInterfaceEnabled
	SiteToSiteConnectivityInterfaceChoice isInterface_SiteToSiteConnectivityInterfaceChoice `protobuf_oneof:"site_to_site_connectivity_interface_choice"`
	// Use for Primary Interface
	//
	// x-displayName: "Use for Primary Interface"
	// Use for Primary Interface
	IsPrimary bool `protobuf:"varint,23,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
	// Management Interface
	//
	// x-displayName: "Management Interface"
	// To be used internally to set an interface as management interface
	IsManagement bool `protobuf:"varint,26,opt,name=is_management,json=isManagement,proto3" json:"is_management,omitempty"`
	// IPv6 Interface Addressing
	//
	// x-displayName: "IPv6 Interface Address Method"
	// Optional, select how ipv6 address will be assigned to this interface.
	//
	// Types that are valid to be assigned to Ipv6AddressChoice:
	//	*Interface_NoIpv6Address
	//	*Interface_StaticIpv6Address
	//	*Interface_Ipv6AutoConfig
	Ipv6AddressChoice isInterface_Ipv6AddressChoice `protobuf_oneof:"ipv6_address_choice"`
}

func (m *Interface) Reset()      { *m = Interface{} }
func (*Interface) ProtoMessage() {}
func (*Interface) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{24}
}
func (m *Interface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Interface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface.Merge(m, src)
}
func (m *Interface) XXX_Size() int {
	return m.Size()
}
func (m *Interface) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface.DiscardUnknown(m)
}

var xxx_messageInfo_Interface proto.InternalMessageInfo

type isInterface_InterfaceChoice interface {
	isInterface_InterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isInterface_AddressChoice interface {
	isInterface_AddressChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isInterface_MonitoringChoice interface {
	isInterface_MonitoringChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isInterface_SiteToSiteConnectivityInterfaceChoice interface {
	isInterface_SiteToSiteConnectivityInterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isInterface_Ipv6AddressChoice interface {
	isInterface_Ipv6AddressChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Interface_EthernetInterface struct {
	EthernetInterface *EthernetInterfaceType `protobuf:"bytes,4,opt,name=ethernet_interface,json=ethernetInterface,proto3,oneof" json:"ethernet_interface,omitempty"`
}
type Interface_VlanInterface struct {
	VlanInterface *VlanInterfaceType `protobuf:"bytes,5,opt,name=vlan_interface,json=vlanInterface,proto3,oneof" json:"vlan_interface,omitempty"`
}
type Interface_BondInterface struct {
	BondInterface *fleet.FleetBondDeviceType `protobuf:"bytes,6,opt,name=bond_interface,json=bondInterface,proto3,oneof" json:"bond_interface,omitempty"`
}
type Interface_DhcpClient struct {
	DhcpClient *schema.Empty `protobuf:"bytes,8,opt,name=dhcp_client,json=dhcpClient,proto3,oneof" json:"dhcp_client,omitempty"`
}
type Interface_StaticIp struct {
	StaticIp *network_interface.StaticIpParametersNodeType `protobuf:"bytes,9,opt,name=static_ip,json=staticIp,proto3,oneof" json:"static_ip,omitempty"`
}
type Interface_DhcpServer struct {
	DhcpServer *network_interface.DHCPServerParametersType `protobuf:"bytes,27,opt,name=dhcp_server,json=dhcpServer,proto3,oneof" json:"dhcp_server,omitempty"`
}
type Interface_NoIpv4Address struct {
	NoIpv4Address *schema.Empty `protobuf:"bytes,32,opt,name=no_ipv4_address,json=noIpv4Address,proto3,oneof" json:"no_ipv4_address,omitempty"`
}
type Interface_MonitorDisabled struct {
	MonitorDisabled *schema.Empty `protobuf:"bytes,17,opt,name=monitor_disabled,json=monitorDisabled,proto3,oneof" json:"monitor_disabled,omitempty"`
}
type Interface_Monitor struct {
	Monitor *network_interface.LinkQualityMonitorConfig `protobuf:"bytes,18,opt,name=monitor,proto3,oneof" json:"monitor,omitempty"`
}
type Interface_SiteToSiteConnectivityInterfaceDisabled struct {
	SiteToSiteConnectivityInterfaceDisabled *schema.Empty `protobuf:"bytes,21,opt,name=site_to_site_connectivity_interface_disabled,json=siteToSiteConnectivityInterfaceDisabled,proto3,oneof" json:"site_to_site_connectivity_interface_disabled,omitempty"`
}
type Interface_SiteToSiteConnectivityInterfaceEnabled struct {
	SiteToSiteConnectivityInterfaceEnabled *schema.Empty `protobuf:"bytes,22,opt,name=site_to_site_connectivity_interface_enabled,json=siteToSiteConnectivityInterfaceEnabled,proto3,oneof" json:"site_to_site_connectivity_interface_enabled,omitempty"`
}
type Interface_NoIpv6Address struct {
	NoIpv6Address *schema.Empty `protobuf:"bytes,29,opt,name=no_ipv6_address,json=noIpv6Address,proto3,oneof" json:"no_ipv6_address,omitempty"`
}
type Interface_StaticIpv6Address struct {
	StaticIpv6Address *network_interface.StaticIPParametersType `protobuf:"bytes,30,opt,name=static_ipv6_address,json=staticIpv6Address,proto3,oneof" json:"static_ipv6_address,omitempty"`
}
type Interface_Ipv6AutoConfig struct {
	Ipv6AutoConfig *network_interface.IPV6AutoConfigType `protobuf:"bytes,31,opt,name=ipv6_auto_config,json=ipv6AutoConfig,proto3,oneof" json:"ipv6_auto_config,omitempty"`
}

func (*Interface_EthernetInterface) isInterface_InterfaceChoice() {}
func (*Interface_VlanInterface) isInterface_InterfaceChoice()     {}
func (*Interface_BondInterface) isInterface_InterfaceChoice()     {}
func (*Interface_DhcpClient) isInterface_AddressChoice()          {}
func (*Interface_StaticIp) isInterface_AddressChoice()            {}
func (*Interface_DhcpServer) isInterface_AddressChoice()          {}
func (*Interface_NoIpv4Address) isInterface_AddressChoice()       {}
func (*Interface_MonitorDisabled) isInterface_MonitoringChoice()  {}
func (*Interface_Monitor) isInterface_MonitoringChoice()          {}
func (*Interface_SiteToSiteConnectivityInterfaceDisabled) isInterface_SiteToSiteConnectivityInterfaceChoice() {
}
func (*Interface_SiteToSiteConnectivityInterfaceEnabled) isInterface_SiteToSiteConnectivityInterfaceChoice() {
}
func (*Interface_NoIpv6Address) isInterface_Ipv6AddressChoice()     {}
func (*Interface_StaticIpv6Address) isInterface_Ipv6AddressChoice() {}
func (*Interface_Ipv6AutoConfig) isInterface_Ipv6AddressChoice()    {}

func (m *Interface) GetInterfaceChoice() isInterface_InterfaceChoice {
	if m != nil {
		return m.InterfaceChoice
	}
	return nil
}
func (m *Interface) GetAddressChoice() isInterface_AddressChoice {
	if m != nil {
		return m.AddressChoice
	}
	return nil
}
func (m *Interface) GetMonitoringChoice() isInterface_MonitoringChoice {
	if m != nil {
		return m.MonitoringChoice
	}
	return nil
}
func (m *Interface) GetSiteToSiteConnectivityInterfaceChoice() isInterface_SiteToSiteConnectivityInterfaceChoice {
	if m != nil {
		return m.SiteToSiteConnectivityInterfaceChoice
	}
	return nil
}
func (m *Interface) GetIpv6AddressChoice() isInterface_Ipv6AddressChoice {
	if m != nil {
		return m.Ipv6AddressChoice
	}
	return nil
}

func (m *Interface) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Interface) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Interface) GetEthernetInterface() *EthernetInterfaceType {
	if x, ok := m.GetInterfaceChoice().(*Interface_EthernetInterface); ok {
		return x.EthernetInterface
	}
	return nil
}

func (m *Interface) GetVlanInterface() *VlanInterfaceType {
	if x, ok := m.GetInterfaceChoice().(*Interface_VlanInterface); ok {
		return x.VlanInterface
	}
	return nil
}

func (m *Interface) GetBondInterface() *fleet.FleetBondDeviceType {
	if x, ok := m.GetInterfaceChoice().(*Interface_BondInterface); ok {
		return x.BondInterface
	}
	return nil
}

func (m *Interface) GetDhcpClient() *schema.Empty {
	if x, ok := m.GetAddressChoice().(*Interface_DhcpClient); ok {
		return x.DhcpClient
	}
	return nil
}

func (m *Interface) GetStaticIp() *network_interface.StaticIpParametersNodeType {
	if x, ok := m.GetAddressChoice().(*Interface_StaticIp); ok {
		return x.StaticIp
	}
	return nil
}

func (m *Interface) GetDhcpServer() *network_interface.DHCPServerParametersType {
	if x, ok := m.GetAddressChoice().(*Interface_DhcpServer); ok {
		return x.DhcpServer
	}
	return nil
}

func (m *Interface) GetNoIpv4Address() *schema.Empty {
	if x, ok := m.GetAddressChoice().(*Interface_NoIpv4Address); ok {
		return x.NoIpv4Address
	}
	return nil
}

func (m *Interface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Interface) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *Interface) GetNetworkOption() *views.NetworkSelectType {
	if m != nil {
		return m.NetworkOption
	}
	return nil
}

func (m *Interface) GetMonitorDisabled() *schema.Empty {
	if x, ok := m.GetMonitoringChoice().(*Interface_MonitorDisabled); ok {
		return x.MonitorDisabled
	}
	return nil
}

func (m *Interface) GetMonitor() *network_interface.LinkQualityMonitorConfig {
	if x, ok := m.GetMonitoringChoice().(*Interface_Monitor); ok {
		return x.Monitor
	}
	return nil
}

func (m *Interface) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Interface) GetSiteToSiteConnectivityInterfaceDisabled() *schema.Empty {
	if x, ok := m.GetSiteToSiteConnectivityInterfaceChoice().(*Interface_SiteToSiteConnectivityInterfaceDisabled); ok {
		return x.SiteToSiteConnectivityInterfaceDisabled
	}
	return nil
}

func (m *Interface) GetSiteToSiteConnectivityInterfaceEnabled() *schema.Empty {
	if x, ok := m.GetSiteToSiteConnectivityInterfaceChoice().(*Interface_SiteToSiteConnectivityInterfaceEnabled); ok {
		return x.SiteToSiteConnectivityInterfaceEnabled
	}
	return nil
}

func (m *Interface) GetIsPrimary() bool {
	if m != nil {
		return m.IsPrimary
	}
	return false
}

func (m *Interface) GetIsManagement() bool {
	if m != nil {
		return m.IsManagement
	}
	return false
}

func (m *Interface) GetNoIpv6Address() *schema.Empty {
	if x, ok := m.GetIpv6AddressChoice().(*Interface_NoIpv6Address); ok {
		return x.NoIpv6Address
	}
	return nil
}

func (m *Interface) GetStaticIpv6Address() *network_interface.StaticIPParametersType {
	if x, ok := m.GetIpv6AddressChoice().(*Interface_StaticIpv6Address); ok {
		return x.StaticIpv6Address
	}
	return nil
}

func (m *Interface) GetIpv6AutoConfig() *network_interface.IPV6AutoConfigType {
	if x, ok := m.GetIpv6AddressChoice().(*Interface_Ipv6AutoConfig); ok {
		return x.Ipv6AutoConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Interface) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Interface_EthernetInterface)(nil),
		(*Interface_VlanInterface)(nil),
		(*Interface_BondInterface)(nil),
		(*Interface_DhcpClient)(nil),
		(*Interface_StaticIp)(nil),
		(*Interface_DhcpServer)(nil),
		(*Interface_NoIpv4Address)(nil),
		(*Interface_MonitorDisabled)(nil),
		(*Interface_Monitor)(nil),
		(*Interface_SiteToSiteConnectivityInterfaceDisabled)(nil),
		(*Interface_SiteToSiteConnectivityInterfaceEnabled)(nil),
		(*Interface_NoIpv6Address)(nil),
		(*Interface_StaticIpv6Address)(nil),
		(*Interface_Ipv6AutoConfig)(nil),
	}
}

// Ethernet Interface
//
// x-displayName: "Ethernet Interface"
type EthernetInterfaceType struct {
	// Device
	//
	// x-displayName: "Ethernet Device"
	// x-example: "ver1"
	// x-required
	// Select an Ethernet device from the discovered interfaces to configure.
	// Once configured, this interface will be part of this sites dataplane and can participate in the networking services configured on this site.
	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// Mac Address
	//
	// x-displayName: "MAC Address"
	// x-example: "01:10:20:0a:bb:1c"
	Mac string `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (m *EthernetInterfaceType) Reset()      { *m = EthernetInterfaceType{} }
func (*EthernetInterfaceType) ProtoMessage() {}
func (*EthernetInterfaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{25}
}
func (m *EthernetInterfaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthernetInterfaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EthernetInterfaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthernetInterfaceType.Merge(m, src)
}
func (m *EthernetInterfaceType) XXX_Size() int {
	return m.Size()
}
func (m *EthernetInterfaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_EthernetInterfaceType.DiscardUnknown(m)
}

var xxx_messageInfo_EthernetInterfaceType proto.InternalMessageInfo

func (m *EthernetInterfaceType) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *EthernetInterfaceType) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

// Vlan Interface
//
// x-displayName: "Vlan Interface"
type VlanInterfaceType struct {
	// parent
	//
	// x-displayName: "Parent Interface"
	// x-example: "eth0"
	// x-required
	// Select a parent interface from the dropdown.
	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// VLAN Id
	//
	// x-displayName: "VLAN ID"
	// Configure the VLAN tag for this interface.
	VlanId uint32 `protobuf:"varint,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (m *VlanInterfaceType) Reset()      { *m = VlanInterfaceType{} }
func (*VlanInterfaceType) ProtoMessage() {}
func (*VlanInterfaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{26}
}
func (m *VlanInterfaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VlanInterfaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VlanInterfaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlanInterfaceType.Merge(m, src)
}
func (m *VlanInterfaceType) XXX_Size() int {
	return m.Size()
}
func (m *VlanInterfaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_VlanInterfaceType.DiscardUnknown(m)
}

var xxx_messageInfo_VlanInterfaceType proto.InternalMessageInfo

func (m *VlanInterfaceType) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *VlanInterfaceType) GetVlanId() uint32 {
	if m != nil {
		return m.VlanId
	}
	return 0
}

// Virtual Network Configuration
//
// x-displayName: "Site Local Network Configuration"
// Site local network configuration
type VirtualNetworkConfiguration struct {
	// Network labels
	//
	// x-displayName: "Network Labels"
	// x-example: "value"
	// Add Labels for this network, these labels can be used in firewall policy
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Common V4 VIP
	//
	// x-displayName: "Common V4 VIP"
	// x-example: "10.1.1.1"
	// Optional common virtual V4 IP across all nodes to be used as automatic VIP.
	Vip string `protobuf:"bytes,5,opt,name=vip,proto3" json:"vip,omitempty"`
	// Common V6 VIP
	//
	// x-displayName: "Common V6 VIP"
	// x-example: "2001::1"
	// Optional common virtual V6 IP across all nodes to be used as automatic VIP.
	VipV6 string `protobuf:"bytes,17,opt,name=vip_v6,json=vipV6,proto3" json:"vip_v6,omitempty"`
	// nameserver
	//
	// x-displayName: "DNS V4 Server"
	// x-example: "10.1.1.1"
	// Optional DNS V4 server IP to be used for name resolution
	Nameserver string `protobuf:"bytes,6,opt,name=nameserver,proto3" json:"nameserver,omitempty"`
	// nameserver_v6
	//
	// x-displayName: "DNS V6 Server"
	// x-example: "1001::1"
	// Optional DNS V6 server IP to be used for name resolution
	NameserverV6 string `protobuf:"bytes,18,opt,name=nameserver_v6,json=nameserverV6,proto3" json:"nameserver_v6,omitempty"`
	// Manage Static Routes
	//
	// x-displayName: "Manage Static Routes"
	// x-required
	// Add static routes to network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to StaticRouteChoice:
	//	*VirtualNetworkConfiguration_NoStaticRoutes
	//	*VirtualNetworkConfiguration_StaticRoutes
	StaticRouteChoice isVirtualNetworkConfiguration_StaticRouteChoice `protobuf_oneof:"static_route_choice"`
	// Manage IPv6 Static Routes
	//
	// x-displayName: "Manage IPv6 Static Routes"
	// x-required
	// Add IPv6 static routes to network. Used to reach indirectly connected IPv6 subnets.
	//
	// Types that are valid to be assigned to StaticV6RouteChoice:
	//	*VirtualNetworkConfiguration_NoV6StaticRoutes
	//	*VirtualNetworkConfiguration_StaticV6Routes
	StaticV6RouteChoice isVirtualNetworkConfiguration_StaticV6RouteChoice `protobuf_oneof:"static_v6_route_choice"`
}

func (m *VirtualNetworkConfiguration) Reset()      { *m = VirtualNetworkConfiguration{} }
func (*VirtualNetworkConfiguration) ProtoMessage() {}
func (*VirtualNetworkConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{27}
}
func (m *VirtualNetworkConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualNetworkConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VirtualNetworkConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualNetworkConfiguration.Merge(m, src)
}
func (m *VirtualNetworkConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *VirtualNetworkConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualNetworkConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualNetworkConfiguration proto.InternalMessageInfo

type isVirtualNetworkConfiguration_StaticRouteChoice interface {
	isVirtualNetworkConfiguration_StaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVirtualNetworkConfiguration_StaticV6RouteChoice interface {
	isVirtualNetworkConfiguration_StaticV6RouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VirtualNetworkConfiguration_NoStaticRoutes struct {
	NoStaticRoutes *schema.Empty `protobuf:"bytes,8,opt,name=no_static_routes,json=noStaticRoutes,proto3,oneof" json:"no_static_routes,omitempty"`
}
type VirtualNetworkConfiguration_StaticRoutes struct {
	StaticRoutes *StaticRoutesListType `protobuf:"bytes,9,opt,name=static_routes,json=staticRoutes,proto3,oneof" json:"static_routes,omitempty"`
}
type VirtualNetworkConfiguration_NoV6StaticRoutes struct {
	NoV6StaticRoutes *schema.Empty `protobuf:"bytes,15,opt,name=no_v6_static_routes,json=noV6StaticRoutes,proto3,oneof" json:"no_v6_static_routes,omitempty"`
}
type VirtualNetworkConfiguration_StaticV6Routes struct {
	StaticV6Routes *virtual_network.StaticV6RoutesListType `protobuf:"bytes,16,opt,name=static_v6_routes,json=staticV6Routes,proto3,oneof" json:"static_v6_routes,omitempty"`
}

func (*VirtualNetworkConfiguration_NoStaticRoutes) isVirtualNetworkConfiguration_StaticRouteChoice() {
}
func (*VirtualNetworkConfiguration_StaticRoutes) isVirtualNetworkConfiguration_StaticRouteChoice() {}
func (*VirtualNetworkConfiguration_NoV6StaticRoutes) isVirtualNetworkConfiguration_StaticV6RouteChoice() {
}
func (*VirtualNetworkConfiguration_StaticV6Routes) isVirtualNetworkConfiguration_StaticV6RouteChoice() {
}

func (m *VirtualNetworkConfiguration) GetStaticRouteChoice() isVirtualNetworkConfiguration_StaticRouteChoice {
	if m != nil {
		return m.StaticRouteChoice
	}
	return nil
}
func (m *VirtualNetworkConfiguration) GetStaticV6RouteChoice() isVirtualNetworkConfiguration_StaticV6RouteChoice {
	if m != nil {
		return m.StaticV6RouteChoice
	}
	return nil
}

func (m *VirtualNetworkConfiguration) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *VirtualNetworkConfiguration) GetVip() string {
	if m != nil {
		return m.Vip
	}
	return ""
}

func (m *VirtualNetworkConfiguration) GetVipV6() string {
	if m != nil {
		return m.VipV6
	}
	return ""
}

func (m *VirtualNetworkConfiguration) GetNameserver() string {
	if m != nil {
		return m.Nameserver
	}
	return ""
}

func (m *VirtualNetworkConfiguration) GetNameserverV6() string {
	if m != nil {
		return m.NameserverV6
	}
	return ""
}

func (m *VirtualNetworkConfiguration) GetNoStaticRoutes() *schema.Empty {
	if x, ok := m.GetStaticRouteChoice().(*VirtualNetworkConfiguration_NoStaticRoutes); ok {
		return x.NoStaticRoutes
	}
	return nil
}

func (m *VirtualNetworkConfiguration) GetStaticRoutes() *StaticRoutesListType {
	if x, ok := m.GetStaticRouteChoice().(*VirtualNetworkConfiguration_StaticRoutes); ok {
		return x.StaticRoutes
	}
	return nil
}

func (m *VirtualNetworkConfiguration) GetNoV6StaticRoutes() *schema.Empty {
	if x, ok := m.GetStaticV6RouteChoice().(*VirtualNetworkConfiguration_NoV6StaticRoutes); ok {
		return x.NoV6StaticRoutes
	}
	return nil
}

func (m *VirtualNetworkConfiguration) GetStaticV6Routes() *virtual_network.StaticV6RoutesListType {
	if x, ok := m.GetStaticV6RouteChoice().(*VirtualNetworkConfiguration_StaticV6Routes); ok {
		return x.StaticV6Routes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VirtualNetworkConfiguration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VirtualNetworkConfiguration_NoStaticRoutes)(nil),
		(*VirtualNetworkConfiguration_StaticRoutes)(nil),
		(*VirtualNetworkConfiguration_NoV6StaticRoutes)(nil),
		(*VirtualNetworkConfiguration_StaticV6Routes)(nil),
	}
}

// Static Routes List
//
// x-displayName: "Static Routes List"
type StaticRoutesListType struct {
	// static_routes
	//
	// x-displayName: "Static Routes"
	// x-required
	StaticRoutes []*virtual_network.StaticRouteViewType `protobuf:"bytes,1,rep,name=static_routes,json=staticRoutes,proto3" json:"static_routes,omitempty"`
}

func (m *StaticRoutesListType) Reset()      { *m = StaticRoutesListType{} }
func (*StaticRoutesListType) ProtoMessage() {}
func (*StaticRoutesListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{28}
}
func (m *StaticRoutesListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StaticRoutesListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StaticRoutesListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticRoutesListType.Merge(m, src)
}
func (m *StaticRoutesListType) XXX_Size() int {
	return m.Size()
}
func (m *StaticRoutesListType) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticRoutesListType.DiscardUnknown(m)
}

var xxx_messageInfo_StaticRoutesListType proto.InternalMessageInfo

func (m *StaticRoutesListType) GetStaticRoutes() []*virtual_network.StaticRouteViewType {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

// Local VRF Settings
//
// x-displayName: "Local VRF Settings"
// There can be two local VRFs on each site.
// The Site Local Outside (SLO) local VRF is used to connect WAN side workloads to this site and to connect the site to F5 Distributed Cloud for management. All sites are required to have an SLO local VRF.
// The Site Local Inside (SLI) local VRF is used to connect LAN side workloads to this site. SLI local VRF is optional.
type LocalVRFSettingType struct {
	// Site Local Network
	//
	// x-displayName: "Site Local Outside Network"
	// x-required
	//
	// Types that are valid to be assigned to SloChoice:
	//	*LocalVRFSettingType_DefaultConfig
	//	*LocalVRFSettingType_SloConfig
	SloChoice isLocalVRFSettingType_SloChoice `protobuf_oneof:"slo_choice"`
	// Site Local Inside Network
	//
	// x-displayName: "Site Local Inside Network"
	//
	// Types that are valid to be assigned to SliChoice:
	//	*LocalVRFSettingType_DefaultSliConfig
	//	*LocalVRFSettingType_SliConfig
	SliChoice isLocalVRFSettingType_SliChoice `protobuf_oneof:"sli_choice"`
}

func (m *LocalVRFSettingType) Reset()      { *m = LocalVRFSettingType{} }
func (*LocalVRFSettingType) ProtoMessage() {}
func (*LocalVRFSettingType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf9f1f49f4d0ae, []int{29}
}
func (m *LocalVRFSettingType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalVRFSettingType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LocalVRFSettingType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalVRFSettingType.Merge(m, src)
}
func (m *LocalVRFSettingType) XXX_Size() int {
	return m.Size()
}
func (m *LocalVRFSettingType) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalVRFSettingType.DiscardUnknown(m)
}

var xxx_messageInfo_LocalVRFSettingType proto.InternalMessageInfo

type isLocalVRFSettingType_SloChoice interface {
	isLocalVRFSettingType_SloChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isLocalVRFSettingType_SliChoice interface {
	isLocalVRFSettingType_SliChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type LocalVRFSettingType_DefaultConfig struct {
	DefaultConfig *schema.Empty `protobuf:"bytes,2,opt,name=default_config,json=defaultConfig,proto3,oneof" json:"default_config,omitempty"`
}
type LocalVRFSettingType_SloConfig struct {
	SloConfig *VirtualNetworkConfiguration `protobuf:"bytes,3,opt,name=slo_config,json=sloConfig,proto3,oneof" json:"slo_config,omitempty"`
}
type LocalVRFSettingType_DefaultSliConfig struct {
	DefaultSliConfig *schema.Empty `protobuf:"bytes,5,opt,name=default_sli_config,json=defaultSliConfig,proto3,oneof" json:"default_sli_config,omitempty"`
}
type LocalVRFSettingType_SliConfig struct {
	SliConfig *VirtualNetworkConfiguration `protobuf:"bytes,6,opt,name=sli_config,json=sliConfig,proto3,oneof" json:"sli_config,omitempty"`
}

func (*LocalVRFSettingType_DefaultConfig) isLocalVRFSettingType_SloChoice()    {}
func (*LocalVRFSettingType_SloConfig) isLocalVRFSettingType_SloChoice()        {}
func (*LocalVRFSettingType_DefaultSliConfig) isLocalVRFSettingType_SliChoice() {}
func (*LocalVRFSettingType_SliConfig) isLocalVRFSettingType_SliChoice()        {}

func (m *LocalVRFSettingType) GetSloChoice() isLocalVRFSettingType_SloChoice {
	if m != nil {
		return m.SloChoice
	}
	return nil
}
func (m *LocalVRFSettingType) GetSliChoice() isLocalVRFSettingType_SliChoice {
	if m != nil {
		return m.SliChoice
	}
	return nil
}

func (m *LocalVRFSettingType) GetDefaultConfig() *schema.Empty {
	if x, ok := m.GetSloChoice().(*LocalVRFSettingType_DefaultConfig); ok {
		return x.DefaultConfig
	}
	return nil
}

func (m *LocalVRFSettingType) GetSloConfig() *VirtualNetworkConfiguration {
	if x, ok := m.GetSloChoice().(*LocalVRFSettingType_SloConfig); ok {
		return x.SloConfig
	}
	return nil
}

func (m *LocalVRFSettingType) GetDefaultSliConfig() *schema.Empty {
	if x, ok := m.GetSliChoice().(*LocalVRFSettingType_DefaultSliConfig); ok {
		return x.DefaultSliConfig
	}
	return nil
}

func (m *LocalVRFSettingType) GetSliConfig() *VirtualNetworkConfiguration {
	if x, ok := m.GetSliChoice().(*LocalVRFSettingType_SliConfig); ok {
		return x.SliConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LocalVRFSettingType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LocalVRFSettingType_DefaultConfig)(nil),
		(*LocalVRFSettingType_SloConfig)(nil),
		(*LocalVRFSettingType_DefaultSliConfig)(nil),
		(*LocalVRFSettingType_SliConfig)(nil),
	}
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.securemesh_site_v2.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.securemesh_site_v2.GlobalSpecType")
	proto.RegisterType((*DNSNTPServerConfig)(nil), "ves.io.schema.views.securemesh_site_v2.DNSNTPServerConfig")
	golang_proto.RegisterType((*DNSNTPServerConfig)(nil), "ves.io.schema.views.securemesh_site_v2.DNSNTPServerConfig")
	proto.RegisterType((*CustomDNSSettings)(nil), "ves.io.schema.views.securemesh_site_v2.CustomDNSSettings")
	golang_proto.RegisterType((*CustomDNSSettings)(nil), "ves.io.schema.views.securemesh_site_v2.CustomDNSSettings")
	proto.RegisterType((*CustomNTPSettings)(nil), "ves.io.schema.views.securemesh_site_v2.CustomNTPSettings")
	golang_proto.RegisterType((*CustomNTPSettings)(nil), "ves.io.schema.views.securemesh_site_v2.CustomNTPSettings")
	proto.RegisterType((*CustomProxy)(nil), "ves.io.schema.views.securemesh_site_v2.CustomProxy")
	golang_proto.RegisterType((*CustomProxy)(nil), "ves.io.schema.views.securemesh_site_v2.CustomProxy")
	proto.RegisterType((*LoadBalancingSettingsType)(nil), "ves.io.schema.views.securemesh_site_v2.LoadBalancingSettingsType")
	golang_proto.RegisterType((*LoadBalancingSettingsType)(nil), "ves.io.schema.views.securemesh_site_v2.LoadBalancingSettingsType")
	proto.RegisterType((*SoftwareSettingsType)(nil), "ves.io.schema.views.securemesh_site_v2.SoftwareSettingsType")
	golang_proto.RegisterType((*SoftwareSettingsType)(nil), "ves.io.schema.views.securemesh_site_v2.SoftwareSettingsType")
	proto.RegisterType((*UpgradeSettingsType)(nil), "ves.io.schema.views.securemesh_site_v2.UpgradeSettingsType")
	golang_proto.RegisterType((*UpgradeSettingsType)(nil), "ves.io.schema.views.securemesh_site_v2.UpgradeSettingsType")
	proto.RegisterType((*Node)(nil), "ves.io.schema.views.securemesh_site_v2.Node")
	golang_proto.RegisterType((*Node)(nil), "ves.io.schema.views.securemesh_site_v2.Node")
	proto.RegisterType((*SiteMeshGroupType)(nil), "ves.io.schema.views.securemesh_site_v2.SiteMeshGroupType")
	golang_proto.RegisterType((*SiteMeshGroupType)(nil), "ves.io.schema.views.securemesh_site_v2.SiteMeshGroupType")
	proto.RegisterType((*VMwareProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.VMwareProviderType")
	golang_proto.RegisterType((*VMwareProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.VMwareProviderType")
	proto.RegisterType((*KVMProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.KVMProviderType")
	golang_proto.RegisterType((*KVMProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.KVMProviderType")
	proto.RegisterType((*AWSProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.AWSProviderType")
	golang_proto.RegisterType((*AWSProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.AWSProviderType")
	proto.RegisterType((*AzureProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.AzureProviderType")
	golang_proto.RegisterType((*AzureProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.AzureProviderType")
	proto.RegisterType((*GCPProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.GCPProviderType")
	golang_proto.RegisterType((*GCPProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.GCPProviderType")
	proto.RegisterType((*BaremetalProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.BaremetalProviderType")
	golang_proto.RegisterType((*BaremetalProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.BaremetalProviderType")
	proto.RegisterType((*OCIProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.OCIProviderType")
	golang_proto.RegisterType((*OCIProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.OCIProviderType")
	proto.RegisterType((*RSeriesProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.RSeriesProviderType")
	golang_proto.RegisterType((*RSeriesProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.RSeriesProviderType")
	proto.RegisterType((*OpenstackProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.OpenstackProviderType")
	golang_proto.RegisterType((*OpenstackProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.OpenstackProviderType")
	proto.RegisterType((*NutanixProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.NutanixProviderType")
	golang_proto.RegisterType((*NutanixProviderType)(nil), "ves.io.schema.views.securemesh_site_v2.NutanixProviderType")
	proto.RegisterType((*NodeList)(nil), "ves.io.schema.views.securemesh_site_v2.NodeList")
	golang_proto.RegisterType((*NodeList)(nil), "ves.io.schema.views.securemesh_site_v2.NodeList")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.securemesh_site_v2.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.securemesh_site_v2.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.securemesh_site_v2.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.securemesh_site_v2.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.securemesh_site_v2.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.securemesh_site_v2.GetSpecType")
	proto.RegisterType((*Interface)(nil), "ves.io.schema.views.securemesh_site_v2.Interface")
	golang_proto.RegisterType((*Interface)(nil), "ves.io.schema.views.securemesh_site_v2.Interface")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.securemesh_site_v2.Interface.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.securemesh_site_v2.Interface.LabelsEntry")
	proto.RegisterType((*EthernetInterfaceType)(nil), "ves.io.schema.views.securemesh_site_v2.EthernetInterfaceType")
	golang_proto.RegisterType((*EthernetInterfaceType)(nil), "ves.io.schema.views.securemesh_site_v2.EthernetInterfaceType")
	proto.RegisterType((*VlanInterfaceType)(nil), "ves.io.schema.views.securemesh_site_v2.VlanInterfaceType")
	golang_proto.RegisterType((*VlanInterfaceType)(nil), "ves.io.schema.views.securemesh_site_v2.VlanInterfaceType")
	proto.RegisterType((*VirtualNetworkConfiguration)(nil), "ves.io.schema.views.securemesh_site_v2.VirtualNetworkConfiguration")
	golang_proto.RegisterType((*VirtualNetworkConfiguration)(nil), "ves.io.schema.views.securemesh_site_v2.VirtualNetworkConfiguration")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.securemesh_site_v2.VirtualNetworkConfiguration.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.securemesh_site_v2.VirtualNetworkConfiguration.LabelsEntry")
	proto.RegisterType((*StaticRoutesListType)(nil), "ves.io.schema.views.securemesh_site_v2.StaticRoutesListType")
	golang_proto.RegisterType((*StaticRoutesListType)(nil), "ves.io.schema.views.securemesh_site_v2.StaticRoutesListType")
	proto.RegisterType((*LocalVRFSettingType)(nil), "ves.io.schema.views.securemesh_site_v2.LocalVRFSettingType")
	golang_proto.RegisterType((*LocalVRFSettingType)(nil), "ves.io.schema.views.securemesh_site_v2.LocalVRFSettingType")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/securemesh_site_v2/types.proto", fileDescriptor_6acf9f1f49f4d0ae)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/securemesh_site_v2/types.proto", fileDescriptor_6acf9f1f49f4d0ae)
}

var fileDescriptor_6acf9f1f49f4d0ae = []byte{
	// 5277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x61, 0x6c, 0x1b, 0xc9,
	0x75, 0xd6, 0x90, 0x94, 0x44, 0x3e, 0x59, 0x14, 0x35, 0x92, 0xec, 0x95, 0x6c, 0xcb, 0x3c, 0x9d,
	0xcf, 0x67, 0xeb, 0xd6, 0xb2, 0x48, 0x8a, 0x92, 0xed, 0xf3, 0x5d, 0xe2, 0x95, 0x7c, 0x27, 0xe9,
	0x6c, 0x59, 0x59, 0xfa, 0x94, 0xe4, 0xd0, 0x66, 0xb3, 0xe2, 0x8e, 0xa8, 0x3d, 0x2d, 0x77, 0xb6,
	0xbb, 0x4b, 0xea, 0xd4, 0xd6, 0xe8, 0xc1, 0xe8, 0x9f, 0xe6, 0x47, 0x1b, 0x1c, 0x5a, 0x14, 0x38,
	0xa0, 0x6d, 0x8a, 0x02, 0x41, 0x71, 0x28, 0xd0, 0x02, 0xed, 0x8f, 0xa2, 0x74, 0x00, 0xe3, 0x80,
	0x02, 0x45, 0x7e, 0xe9, 0x67, 0x70, 0x40, 0x83, 0x44, 0x57, 0xb4, 0xd7, 0xfc, 0x0a, 0x50, 0xa0,
	0x2d, 0xfc, 0x23, 0x57, 0xcc, 0xec, 0x2e, 0xb9, 0xa4, 0x28, 0x5a, 0x4a, 0x2e, 0xa9, 0x03, 0xf0,
	0x8f, 0xcd, 0x9d, 0x79, 0xef, 0x9b, 0x37, 0x33, 0x6f, 0x66, 0xde, 0x7b, 0x3b, 0xfb, 0x04, 0xd9,
	0x2a, 0x71, 0x66, 0x74, 0x7a, 0xcd, 0x29, 0x6e, 0x93, 0xb2, 0x7a, 0xad, 0xaa, 0x93, 0x5d, 0xe7,
	0x9a, 0x43, 0x8a, 0x15, 0x9b, 0x94, 0x89, 0xb3, 0xad, 0x38, 0xba, 0x4b, 0x94, 0x6a, 0xf6, 0x9a,
	0xbb, 0x67, 0x11, 0x67, 0xc6, 0xb2, 0xa9, 0x4b, 0xf1, 0x25, 0x8f, 0x67, 0xc6, 0xe3, 0x99, 0xe1,
	0x3c, 0x33, 0x87, 0x79, 0x26, 0xae, 0x96, 0x74, 0x77, 0xbb, 0xb2, 0x39, 0x53, 0xa4, 0xe5, 0x6b,
	0x25, 0x5a, 0xa2, 0xd7, 0x38, 0xfb, 0x66, 0x65, 0x8b, 0x3f, 0xf1, 0x07, 0xfe, 0xcb, 0x83, 0x9d,
	0xb8, 0xd0, 0x2c, 0xca, 0x96, 0x41, 0x88, 0x1b, 0x6e, 0x77, 0x62, 0xba, 0x99, 0xc0, 0x24, 0xee,
	0x2e, 0xb5, 0x77, 0x94, 0x2d, 0xdd, 0x26, 0xbb, 0xaa, 0x61, 0x34, 0xd1, 0xbe, 0xd2, 0x9e, 0x56,
	0x37, 0x5d, 0x62, 0x6f, 0xa9, 0x45, 0xd2, 0x44, 0x7c, 0xb6, 0x99, 0x98, 0x5a, 0xae, 0x4e, 0xcd,
	0xa0, 0x72, 0xb2, 0xb9, 0x92, 0x75, 0xae, 0x89, 0x79, 0xbc, 0xb9, 0x3e, 0x5c, 0x75, 0xae, 0x65,
	0x70, 0x55, 0x43, 0xd7, 0x54, 0x97, 0xf8, 0xb5, 0xe9, 0xc3, 0x43, 0xaf, 0x34, 0x37, 0x3d, 0x7f,
	0xcc, 0xc9, 0x51, 0x77, 0x1d, 0x25, 0xdc, 0xee, 0xc5, 0xb6, 0x7c, 0x8c, 0x38, 0x4c, 0x75, 0xa1,
	0x1d, 0x55, 0x98, 0xe0, 0x4a, 0x2b, 0x81, 0xed, 0x56, 0x54, 0x43, 0xf1, 0xc7, 0x32, 0x4c, 0x3a,
	0xf5, 0xc3, 0x8b, 0x90, 0x7c, 0xd3, 0xa0, 0x9b, 0xaa, 0x51, 0xb0, 0x48, 0xf1, 0xc1, 0x9e, 0x45,
	0xf0, 0x03, 0xe8, 0xab, 0x96, 0x77, 0x55, 0x9b, 0x08, 0x91, 0x34, 0xba, 0x3c, 0x90, 0xbd, 0x39,
	0x73, 0x3c, 0xb5, 0x99, 0xd9, 0xb8, 0xc7, 0xb8, 0xd6, 0x6d, 0x5a, 0xd5, 0x35, 0x62, 0x33, 0xac,
	0xe5, 0x1e, 0xd9, 0xc7, 0xc2, 0x6f, 0x41, 0x74, 0xa7, 0x5a, 0x16, 0xa2, 0x1c, 0x72, 0xe1, 0xb8,
	0x90, 0x6f, 0x6d, 0xdc, 0x6b, 0xc1, 0x63, 0x28, 0x0c, 0x4c, 0xdd, 0x75, 0x84, 0xd8, 0xc9, 0xc0,
	0x6e, 0x7f, 0xb5, 0xd0, 0x0a, 0xa6, 0xee, 0x3a, 0xf8, 0x2b, 0xd0, 0xab, 0xfe, 0x76, 0xc5, 0x26,
	0x42, 0x2f, 0x87, 0xbb, 0x71, 0x6c, 0x38, 0xc6, 0xd4, 0x02, 0xe8, 0x21, 0x31, 0xf9, 0x4a, 0x45,
	0x4b, 0xe8, 0x3b, 0x99, 0x7c, 0x6f, 0x2e, 0xae, 0xb7, 0xca, 0x57, 0x2a, 0x5a, 0xf8, 0xab, 0xd0,
	0x6f, 0x3b, 0xc4, 0xd6, 0x89, 0x23, 0xf4, 0x73, 0xc0, 0x57, 0x8f, 0x0b, 0x28, 0x17, 0x38, 0x5b,
	0x0b, 0x68, 0x80, 0x86, 0x8b, 0x90, 0xd8, 0x54, 0x19, 0x8b, 0xab, 0x1a, 0x42, 0x9c, 0x43, 0xbf,
	0x76, 0x5c, 0x68, 0x29, 0x60, 0x0c, 0x83, 0x4b, 0xb1, 0xcf, 0x6a, 0x08, 0x2d, 0xf7, 0xc8, 0x0d,
	0x5c, 0x36, 0x14, 0xb4, 0xa8, 0x0b, 0x89, 0x93, 0x0d, 0xc5, 0xfd, 0xc5, 0x95, 0xd6, 0xa1, 0xa0,
	0x45, 0x1d, 0xff, 0x26, 0x24, 0xa8, 0x45, 0x4c, 0xc7, 0x55, 0x8b, 0x3b, 0xc2, 0xfc, 0xc9, 0x24,
	0xbe, 0x1f, 0x30, 0xb6, 0x00, 0x37, 0x10, 0xd9, 0x48, 0x9b, 0x15, 0x57, 0x35, 0xf5, 0xf7, 0x84,
	0x85, 0x93, 0x8d, 0xf4, 0x9a, 0xc7, 0xd6, 0x3a, 0xd2, 0x3e, 0x1a, 0x96, 0x60, 0xd8, 0xa4, 0xc1,
	0xfa, 0x53, 0x2c, 0x6a, 0xe8, 0xc5, 0x3d, 0xe1, 0x14, 0x6f, 0x62, 0xb4, 0xa5, 0x89, 0x3b, 0x65,
	0xcb, 0xdd, 0x5b, 0x46, 0xf2, 0x90, 0x49, 0xd7, 0x3c, 0xfa, 0x75, 0x4e, 0x8e, 0xff, 0x04, 0xc1,
	0x0b, 0x6a, 0xd1, 0xd5, 0xab, 0x44, 0x21, 0xe6, 0xb6, 0x6a, 0x16, 0x89, 0x56, 0xdf, 0x41, 0x3d,
	0x48, 0xa6, 0x21, 0x83, 0x1c, 0x54, 0x6a, 0x01, 0x6d, 0xdd, 0x71, 0x67, 0x6e, 0x73, 0xa0, 0x3b,
	0x3e, 0xce, 0x1b, 0x7e, 0xf1, 0xba, 0x8f, 0xe2, 0xcd, 0xe5, 0xdf, 0x3d, 0x46, 0x68, 0x19, 0xc9,
	0x93, 0x6a, 0x47, 0x5a, 0xfc, 0x65, 0x48, 0x99, 0x54, 0xd9, 0xa2, 0xf6, 0xae, 0x6a, 0x6b, 0x8a,
	0x65, 0xd3, 0xf7, 0xf6, 0x84, 0xa1, 0x0e, 0x5d, 0x8b, 0xc8, 0x49, 0x93, 0xbe, 0xe1, 0x91, 0xaf,
	0x33, 0x6a, 0xfc, 0x07, 0x08, 0xce, 0xfb, 0x3d, 0x6b, 0x82, 0x69, 0xf4, 0x2a, 0xc5, 0xf1, 0x5e,
	0x3f, 0x5e, 0xaf, 0xc2, 0xd8, 0x6d, 0x7a, 0x14, 0x91, 0x27, 0xd4, 0x23, 0xe9, 0xb0, 0x0e, 0xc3,
	0x0e, 0xdd, 0x72, 0xd9, 0x96, 0xa5, 0x38, 0xc4, 0x75, 0x75, 0xb3, 0xe4, 0x08, 0xc3, 0xbc, 0xf9,
	0x5b, 0xc7, 0x55, 0x86, 0x82, 0x0f, 0x50, 0xf0, 0xf9, 0x59, 0xe3, 0x72, 0xca, 0x69, 0x29, 0xc5,
	0x5b, 0x90, 0xaa, 0x58, 0x25, 0x5b, 0xd5, 0x42, 0x2d, 0x8d, 0x9e, 0x4c, 0xed, 0xde, 0xf6, 0xf8,
	0x9b, 0x1a, 0x1a, 0xaa, 0x34, 0x17, 0xe2, 0x35, 0x38, 0x63, 0xd0, 0x92, 0xa3, 0x38, 0xae, 0x4d,
	0xd4, 0xb2, 0x6e, 0x96, 0x14, 0x4d, 0x77, 0xd4, 0x4d, 0x83, 0x68, 0xc2, 0xe9, 0x0e, 0xf3, 0x14,
	0x95, 0xc7, 0x18, 0x5b, 0x21, 0xe0, 0x5a, 0xf2, 0x99, 0xf0, 0xd7, 0xe0, 0x94, 0x41, 0x4b, 0x8a,
	0x4d, 0x8a, 0x44, 0xaf, 0x12, 0x5b, 0x38, 0xc3, 0x41, 0xa6, 0xda, 0xca, 0x7c, 0x7f, 0xf3, 0x5d,
	0x52, 0x74, 0x65, 0xb2, 0xc5, 0x27, 0x60, 0xe8, 0xa3, 0x87, 0x4d, 0xac, 0xcb, 0x51, 0x79, 0xc0,
	0xa0, 0x25, 0xd9, 0x7f, 0xc4, 0x4b, 0x80, 0x37, 0x0d, 0x5a, 0xdc, 0x51, 0x98, 0x4a, 0x3b, 0xc4,
	0xae, 0xea, 0x45, 0xe2, 0x08, 0xe3, 0x1d, 0x84, 0x8c, 0xc9, 0x29, 0xce, 0x71, 0xdb, 0x30, 0x0a,
	0x3e, 0x3d, 0x56, 0xc0, 0x2b, 0x23, 0x5a, 0x03, 0x63, 0x82, 0x63, 0x88, 0x2d, 0x18, 0xdc, 0x52,
	0x99, 0x91, 0x3c, 0xe2, 0x80, 0xff, 0xae, 0xee, 0xb8, 0x21, 0x75, 0x89, 0xc9, 0x43, 0x9b, 0xcd,
	0x04, 0xf8, 0x77, 0xe0, 0x9c, 0x45, 0xec, 0x2d, 0x6a, 0x97, 0xd9, 0x8a, 0x08, 0x56, 0x63, 0x99,
	0x98, 0xae, 0x52, 0xa6, 0x1a, 0x11, 0xce, 0xf2, 0xc6, 0x72, 0x6d, 0x07, 0x64, 0xbd, 0xc1, 0x78,
	0xa7, 0xc1, 0x77, 0x8f, 0x6a, 0xc4, 0x6b, 0xf3, 0xa7, 0x35, 0x84, 0xe4, 0x09, 0xeb, 0x48, 0x2a,
	0x5c, 0x81, 0x09, 0xba, 0xb5, 0x65, 0xe8, 0x26, 0x51, 0x9c, 0x8a, 0x5d, 0xd5, 0xab, 0xea, 0xa6,
	0x6e, 0xe8, 0xee, 0x9e, 0xd7, 0xf4, 0x39, 0xde, 0x74, 0xa6, 0xfd, 0x5c, 0x78, 0x6c, 0x85, 0x30,
	0x57, 0x4b, 0xc3, 0x02, 0x3d, 0x82, 0x06, 0xbf, 0x0a, 0x23, 0x6e, 0xc5, 0x34, 0x89, 0xa1, 0x68,
	0x44, 0xd5, 0x14, 0x57, 0x2f, 0x13, 0x5a, 0x71, 0x85, 0xf3, 0x69, 0x74, 0x79, 0x50, 0x1a, 0xf8,
	0xa7, 0xff, 0x7c, 0x12, 0xed, 0x9b, 0x8e, 0x09, 0xdf, 0xf9, 0x19, 0xc8, 0xc3, 0x1e, 0xdd, 0x12,
	0x51, 0xb5, 0x07, 0x1e, 0x15, 0xde, 0x86, 0xa4, 0x41, 0x55, 0x4d, 0xd9, 0x54, 0x0d, 0xd5, 0x2c,
	0xea, 0x66, 0x49, 0x98, 0xe4, 0x72, 0xde, 0x3e, 0xae, 0x9e, 0xdf, 0xa5, 0xaa, 0x26, 0x05, 0xcc,
	0x4d, 0xda, 0x3e, 0x68, 0x84, 0xab, 0xf0, 0x3d, 0x38, 0x63, 0x52, 0xc5, 0xc9, 0x3a, 0x4a, 0x91,
	0x9a, 0x26, 0x61, 0xeb, 0x9c, 0x8d, 0x8d, 0x63, 0xe8, 0xc2, 0x0b, 0x1d, 0xd4, 0xa8, 0x57, 0x1e,
	0x35, 0x69, 0x21, 0xeb, 0x2c, 0x86, 0x98, 0x0a, 0x86, 0x8e, 0xdf, 0x85, 0x51, 0xad, 0xa8, 0x14,
	0x8d, 0x8a, 0xe3, 0x12, 0x5b, 0x29, 0xd9, 0xb4, 0x62, 0x71, 0xac, 0xa9, 0x63, 0xab, 0xfc, 0xc8,
	0x47, 0x0f, 0x53, 0xad, 0x10, 0xcb, 0xbd, 0xf2, 0xb0, 0x56, 0x5c, 0xf4, 0x8a, 0xde, 0x64, 0x25,
	0xac, 0xad, 0x23, 0x45, 0xa7, 0xc2, 0xc5, 0x0e, 0xa2, 0xf7, 0xb5, 0x15, 0x9d, 0x62, 0x0a, 0xa7,
	0xf9, 0xe8, 0xf1, 0x71, 0xf4, 0x24, 0xa7, 0x26, 0x47, 0x7b, 0xe9, 0x64, 0x66, 0x4e, 0x41, 0x77,
	0xc9, 0x3d, 0xe2, 0x6c, 0x73, 0x41, 0xf9, 0xc1, 0xd6, 0x27, 0x63, 0x27, 0x5c, 0x78, 0xdf, 0x64,
	0x0d, 0xb6, 0x1f, 0x2b, 0x2a, 0x5c, 0xfa, 0xc5, 0xc6, 0xaa, 0xef, 0xf0, 0x58, 0x51, 0xfc, 0x35,
	0x48, 0x18, 0xb4, 0xa8, 0x1a, 0x4a, 0xd5, 0xde, 0x12, 0x5e, 0x39, 0xd9, 0x9e, 0x79, 0x97, 0x31,
	0x6e, 0xc8, 0x6f, 0xf8, 0x6a, 0xc4, 0xb5, 0x28, 0xce, 0xd1, 0x36, 0xec, 0x2d, 0xfc, 0x2e, 0x0c,
	0xf8, 0x7a, 0xce, 0xac, 0x64, 0x41, 0x4c, 0xa3, 0xcb, 0xc9, 0xec, 0x8b, 0x2d, 0xd8, 0x6c, 0x48,
	0x1e, 0x50, 0xfe, 0x2f, 0xa7, 0xe5, 0xd2, 0x5f, 0xfc, 0xa4, 0x86, 0xd2, 0x85, 0x95, 0x07, 0x77,
	0x94, 0x07, 0xf7, 0x15, 0xef, 0xff, 0xb7, 0xd7, 0xd6, 0xee, 0xdc, 0x55, 0x56, 0xd6, 0x0b, 0x77,
	0x16, 0x95, 0xfb, 0xb2, 0x52, 0x28, 0xdc, 0x95, 0xc1, 0xad, 0x73, 0xe0, 0x7b, 0x90, 0xe0, 0xa7,
	0x8c, 0x41, 0x8a, 0xae, 0x70, 0x95, 0xf7, 0x62, 0xba, 0x6d, 0x2f, 0x64, 0x52, 0xd2, 0xa9, 0xa9,
	0x1a, 0x77, 0xb4, 0x12, 0x29, 0x70, 0x72, 0x9d, 0x9a, 0xfe, 0x92, 0x8d, 0xdb, 0x7e, 0x11, 0x5e,
	0x85, 0xf1, 0x2a, 0x35, 0x5c, 0x62, 0xdb, 0xaa, 0x52, 0x3f, 0xc3, 0xaa, 0xc4, 0x76, 0x74, 0x6a,
	0x0a, 0xd7, 0xd2, 0xe8, 0x72, 0x42, 0x4a, 0xfe, 0x6f, 0x0d, 0xf5, 0xb0, 0xc5, 0xda, 0x6b, 0x47,
	0x85, 0xf7, 0x23, 0xf2, 0x99, 0x80, 0x21, 0x38, 0xb2, 0x36, 0x3c, 0x72, 0xbc, 0x0c, 0x02, 0xb5,
	0x88, 0xad, 0xb2, 0x11, 0x52, 0x9c, 0x3d, 0xc7, 0x25, 0xe5, 0x3a, 0xd4, 0x6c, 0x5b, 0xa8, 0xd3,
	0x75, 0xfa, 0x02, 0x27, 0x0f, 0x90, 0xf2, 0x00, 0xfe, 0x71, 0xa3, 0x6c, 0xab, 0x42, 0xb6, 0x83,
	0x26, 0xf7, 0xcb, 0x09, 0x9f, 0x72, 0x59, 0xc5, 0x39, 0x48, 0x10, 0x33, 0xe0, 0xca, 0x75, 0xe4,
	0x8a, 0x7b, 0x84, 0xcb, 0x2a, 0xbe, 0x05, 0xc0, 0x67, 0xd9, 0x71, 0x55, 0x97, 0x08, 0x73, 0x7c,
	0xee, 0xce, 0xb7, 0x70, 0x31, 0x02, 0x3e, 0x81, 0x05, 0x46, 0x24, 0x27, 0x9c, 0xe0, 0x27, 0x2e,
	0xc2, 0x69, 0x55, 0x2b, 0xeb, 0xa6, 0x52, 0x71, 0x88, 0xad, 0x14, 0x6d, 0xa2, 0x11, 0xd3, 0xd5,
	0x55, 0xc3, 0x11, 0xf2, 0xbc, 0xfd, 0xab, 0x6d, 0xe7, 0xe6, 0x36, 0x63, 0x79, 0xdb, 0x21, 0xf6,
	0x62, 0x83, 0x81, 0xeb, 0xd4, 0xa8, 0xda, 0xa6, 0x06, 0xef, 0xc0, 0xa8, 0x65, 0x53, 0xdf, 0xda,
	0x29, 0x53, 0x53, 0x77, 0xa9, 0xcd, 0x36, 0xc4, 0xeb, 0xbc, 0x89, 0x99, 0xf6, 0x67, 0x46, 0xc0,
	0x70, 0xaf, 0x4e, 0xbf, 0xb8, 0x4d, 0xf5, 0x22, 0x91, 0xe2, 0x4f, 0x6a, 0x08, 0x71, 0x35, 0x18,
	0xb1, 0x0e, 0x13, 0xe1, 0x0c, 0xc4, 0xb7, 0xf2, 0xbe, 0x49, 0x76, 0xab, 0xc3, 0x18, 0xc6, 0xe5,
	0xfe, 0xad, 0xbc, 0x67, 0x8b, 0x7d, 0x0d, 0x4e, 0x15, 0x2b, 0x8e, 0x4b, 0xcb, 0x3e, 0xdb, 0x6b,
	0x1d, 0xce, 0xb2, 0x36, 0x8b, 0x6b, 0x91, 0xf3, 0x72, 0xa8, 0xe5, 0xb8, 0x3c, 0x50, 0x6c, 0x3c,
	0xe2, 0x6f, 0x42, 0x52, 0x33, 0x1d, 0xc5, 0x74, 0x2d, 0xb6, 0xc1, 0x6d, 0xe9, 0x25, 0xe1, 0xf5,
	0x93, 0xb9, 0x97, 0x4b, 0x6b, 0x85, 0xb5, 0x07, 0xeb, 0xec, 0x14, 0x26, 0xf6, 0x22, 0x47, 0x90,
	0x4f, 0x69, 0xa6, 0xb3, 0xe6, 0x5a, 0xde, 0x13, 0xbe, 0x02, 0xfd, 0xaa, 0xa6, 0xd9, 0xc4, 0x71,
	0x84, 0x7f, 0xef, 0xf7, 0x94, 0x94, 0xf9, 0x23, 0x75, 0x25, 0x8d, 0xc9, 0x41, 0x3d, 0x5e, 0x86,
	0x81, 0x22, 0xa5, 0xb6, 0xa6, 0x9b, 0xaa, 0x4b, 0x1c, 0xe1, 0x3f, 0x3c, 0xc7, 0xea, 0x42, 0x3b,
	0x5d, 0x59, 0x6c, 0xd0, 0x79, 0xfe, 0x8d, 0x1c, 0x66, 0xc5, 0xdf, 0x80, 0x41, 0x1e, 0x00, 0xe0,
	0x01, 0x0a, 0x53, 0x35, 0x84, 0xcf, 0xfa, 0x8f, 0xbd, 0xe1, 0x8d, 0x7e, 0xf4, 0xb0, 0x99, 0x99,
	0xc3, 0x9f, 0x62, 0x45, 0x2b, 0x7e, 0xc9, 0xcd, 0x03, 0xf4, 0x71, 0x0d, 0xfd, 0x2b, 0x82, 0x14,
	0xc4, 0x03, 0xef, 0x02, 0xc7, 0x32, 0xe2, 0xdc, 0x0d, 0x98, 0x84, 0xc1, 0x60, 0x63, 0x48, 0xb3,
	0x9d, 0x01, 0x0f, 0xcc, 0xe5, 0xc5, 0xb9, 0x39, 0x31, 0x7b, 0x43, 0xcc, 0x5e, 0x9f, 0x45, 0x30,
	0x01, 0x43, 0x4c, 0xcf, 0xd3, 0xbe, 0x1b, 0xc1, 0x14, 0xa2, 0x77, 0x2e, 0x27, 0xe6, 0x66, 0x67,
	0x11, 0x5c, 0x84, 0x71, 0x5e, 0xf7, 0x80, 0xa6, 0xf9, 0xff, 0xe1, 0xd3, 0x03, 0xf7, 0xe6, 0xf2,
	0x62, 0x2e, 0x3b, 0x8b, 0xe0, 0x2c, 0xa4, 0x7c, 0xe6, 0x74, 0x81, 0xcd, 0x07, 0xaf, 0xcc, 0x64,
	0xc4, 0xcc, 0xdc, 0x2c, 0x82, 0x73, 0x30, 0x1a, 0x58, 0x44, 0xe9, 0x4b, 0x69, 0x99, 0x38, 0xb4,
	0x62, 0x33, 0xeb, 0x28, 0x92, 0x5d, 0x98, 0x45, 0x20, 0xfa, 0x8d, 0xdf, 0x53, 0x4d, 0xb5, 0xc4,
	0xad, 0x17, 0x7c, 0x26, 0xb3, 0x20, 0x66, 0x67, 0xc5, 0x7c, 0x4e, 0xcc, 0xce, 0x89, 0xd9, 0x8c,
	0x98, 0x9f, 0x17, 0xf3, 0x37, 0xc4, 0xf9, 0xec, 0x2c, 0x92, 0xae, 0xc3, 0x90, 0xe5, 0x77, 0x4e,
	0x29, 0x72, 0xd5, 0xc6, 0x2f, 0x3d, 0xa9, 0xa1, 0xc8, 0x7e, 0x0d, 0xa1, 0x83, 0x1a, 0x1a, 0x5b,
	0x10, 0xb3, 0xe2, 0x9c, 0x98, 0x17, 0xe7, 0xc5, 0x1b, 0x62, 0x3e, 0x2f, 0xe6, 0xe7, 0xc4, 0xeb,
	0x62, 0x8e, 0x0d, 0x96, 0x34, 0x0d, 0x63, 0xcd, 0x6e, 0x55, 0xc0, 0x3f, 0xfc, 0xa4, 0x86, 0x4e,
	0xed, 0xd7, 0xd0, 0xc0, 0x41, 0x0d, 0xf5, 0x66, 0xb2, 0x62, 0x26, 0x27, 0x5d, 0x81, 0xd1, 0x66,
	0xff, 0x22, 0x44, 0x3a, 0xb4, 0x5f, 0x43, 0x49, 0x4e, 0x9a, 0x17, 0x33, 0xf3, 0x8c, 0x94, 0xdb,
	0xcc, 0x81, 0xa5, 0x1a, 0x26, 0x3d, 0xbd, 0x5f, 0x43, 0x63, 0x8c, 0x34, 0x9b, 0x15, 0xb3, 0x39,
	0x49, 0x84, 0x33, 0xad, 0xe6, 0x66, 0x98, 0x7a, 0x7c, 0xbf, 0x86, 0x04, 0x4e, 0x9d, 0x17, 0xb3,
	0xf3, 0xd2, 0x2c, 0x9c, 0x6d, 0x67, 0x9d, 0x84, 0x39, 0x5e, 0xd8, 0xaf, 0xa1, 0x34, 0xe3, 0xc8,
	0xe5, 0xc4, 0xdc, 0x9c, 0x94, 0x6b, 0xcb, 0x41, 0x03, 0x8e, 0xd1, 0x27, 0x35, 0x74, 0x71, 0xbf,
	0x86, 0x5e, 0x3c, 0xa8, 0xa1, 0x78, 0x6e, 0x5e, 0xcc, 0x2d, 0x88, 0xb9, 0xeb, 0xd2, 0xcb, 0x90,
	0x34, 0xa9, 0xc6, 0x36, 0xcf, 0x80, 0x6e, 0xec, 0x49, 0x0d, 0x65, 0xf7, 0x6b, 0x28, 0xc3, 0x90,
	0xf3, 0xb3, 0x62, 0x3e, 0xc3, 0xc7, 0xef, 0x45, 0x38, 0x43, 0x98, 0xaa, 0x59, 0xb6, 0xee, 0x90,
	0xe6, 0x61, 0x61, 0x9b, 0xcb, 0xad, 0xfd, 0x1a, 0x7a, 0x75, 0x35, 0x16, 0x47, 0xa9, 0xc8, 0x6a,
	0x2c, 0x3e, 0x90, 0x3a, 0xb5, 0x1a, 0x8b, 0x27, 0x53, 0x43, 0xab, 0xb1, 0xf8, 0x58, 0xea, 0xf4,
	0x6a, 0x2c, 0x2e, 0xa4, 0xc6, 0x57, 0x63, 0xf1, 0x74, 0xea, 0x85, 0xd5, 0x58, 0xfc, 0xc5, 0xd4,
	0xc5, 0xd5, 0x58, 0x7c, 0x3a, 0xf5, 0xca, 0x6a, 0x2c, 0x9e, 0x49, 0x65, 0x57, 0x63, 0xf1, 0x57,
	0x53, 0xb7, 0xa6, 0xfe, 0x3c, 0x0a, 0xf8, 0xf0, 0xca, 0xc5, 0xb7, 0x20, 0xb9, 0x95, 0x57, 0xd8,
	0x86, 0xa0, 0x91, 0x2d, 0xb5, 0x62, 0xb8, 0x7e, 0x30, 0xa7, 0xfd, 0x06, 0xd5, 0x23, 0x9f, 0xda,
	0xca, 0x2f, 0x99, 0xce, 0x92, 0x47, 0x8b, 0xdf, 0x01, 0xf0, 0x77, 0x29, 0xcd, 0x74, 0x4e, 0x1a,
	0xb7, 0xf1, 0xf6, 0xa8, 0xa5, 0xb5, 0x42, 0x60, 0x48, 0x2e, 0xf7, 0xc8, 0x09, 0x0f, 0x6e, 0xc9,
	0x74, 0x7c, 0xc9, 0xd8, 0x36, 0x15, 0x48, 0xd6, 0xdf, 0xd1, 0x51, 0x3f, 0xb5, 0x95, 0x5f, 0x73,
	0xad, 0xc3, 0x92, 0x99, 0xae, 0xe5, 0x07, 0x55, 0x4e, 0x28, 0x19, 0x1f, 0x2a, 0x5f, 0x32, 0x14,
	0x48, 0xb6, 0xe6, 0x5a, 0xd2, 0x79, 0x18, 0x66, 0x03, 0xe6, 0xf0, 0x71, 0x0c, 0xcf, 0x52, 0x6c,
	0xbf, 0x86, 0xa2, 0xac, 0x9a, 0x49, 0x7d, 0xb8, 0xba, 0x7f, 0xbf, 0x86, 0xfa, 0xea, 0x93, 0x18,
	0x49, 0x45, 0x57, 0x63, 0xf1, 0x68, 0x2a, 0xb6, 0x1a, 0x8b, 0xf7, 0xa5, 0xfa, 0xa7, 0x56, 0x61,
	0xf8, 0xd0, 0x88, 0xe0, 0x3c, 0x0c, 0x34, 0x9a, 0x72, 0x04, 0x94, 0x8e, 0x5e, 0x4e, 0x48, 0xa3,
	0x7c, 0x27, 0xfd, 0x00, 0x45, 0x52, 0x5f, 0x0e, 0x7e, 0x09, 0x48, 0x06, 0xcd, 0x74, 0xbc, 0xa9,
	0x75, 0x1a, 0x58, 0xa1, 0x3e, 0x30, 0xac, 0x86, 0x5c, 0xcf, 0xc0, 0x32, 0x5d, 0x2b, 0xc0, 0xfa,
	0x59, 0x04, 0x06, 0x42, 0xc7, 0x09, 0x5e, 0x80, 0x94, 0xa7, 0x9e, 0xba, 0xa5, 0x04, 0xdb, 0x3c,
	0xe2, 0xbb, 0xfc, 0x60, 0x60, 0x8a, 0xc4, 0xec, 0xc8, 0x7b, 0x48, 0x4e, 0x72, 0xb2, 0x15, 0xeb,
	0xb6, 0xbf, 0xd7, 0x67, 0x00, 0x82, 0x70, 0x82, 0xed, 0xf2, 0x98, 0xe6, 0xa0, 0x84, 0x3f, 0xa9,
	0xa1, 0xe8, 0xdc, 0x5c, 0x2e, 0x70, 0x5c, 0x3e, 0xff, 0x3c, 0x2a, 0x27, 0x2c, 0x2f, 0x12, 0x60,
	0xbb, 0x78, 0x02, 0xe2, 0xcc, 0x08, 0x30, 0xd5, 0x32, 0xe1, 0x11, 0xcb, 0x84, 0x5c, 0x7f, 0xc6,
	0x79, 0x88, 0x5b, 0xaa, 0xe3, 0xec, 0x52, 0x5b, 0xf3, 0x75, 0x76, 0xbc, 0xd5, 0x3c, 0x24, 0x45,
	0x9b, 0xb8, 0x9e, 0x61, 0x19, 0x90, 0x62, 0x09, 0x86, 0x03, 0x3b, 0xc8, 0x26, 0x8a, 0x67, 0x05,
	0xfa, 0x01, 0xc2, 0xa3, 0x74, 0x7e, 0xc8, 0x67, 0x90, 0x7d, 0x33, 0x13, 0x7f, 0x19, 0x52, 0xbe,
	0x51, 0xd4, 0x80, 0xe8, 0xef, 0x08, 0x91, 0xf4, 0xe8, 0x03, 0x04, 0xe9, 0x22, 0x08, 0x15, 0x87,
	0x87, 0x59, 0x1a, 0x10, 0x61, 0x55, 0xe9, 0xdb, 0xaf, 0xa1, 0xde, 0xd5, 0x58, 0xbc, 0x37, 0xd5,
	0x37, 0xf5, 0x5b, 0x30, 0x7e, 0xa4, 0xdf, 0x85, 0x1f, 0xb0, 0x63, 0xcf, 0x52, 0xaa, 0xb6, 0x6d,
	0x79, 0x9e, 0x27, 0xe2, 0xd6, 0xd6, 0x44, 0x8b, 0x1c, 0x1b, 0xba, 0xb5, 0x61, 0xdb, 0x96, 0x77,
	0xda, 0x7d, 0x52, 0x43, 0xa9, 0x8d, 0x95, 0x75, 0x65, 0x43, 0x96, 0xd7, 0x95, 0xa5, 0x95, 0xc2,
	0x6d, 0xe9, 0xee, 0x1d, 0x79, 0xa0, 0xea, 0x91, 0x30, 0x2f, 0x73, 0xea, 0x4f, 0x11, 0x8c, 0xb6,
	0x8b, 0x9e, 0xe0, 0x2f, 0x41, 0xc4, 0xd9, 0xe5, 0x6d, 0x0c, 0x64, 0xaf, 0xb4, 0x5d, 0x4e, 0x1b,
	0x2d, 0x96, 0x6c, 0xc8, 0xab, 0x8d, 0x38, 0xbb, 0xf8, 0x75, 0x88, 0x50, 0xc7, 0x0f, 0x68, 0x5f,
	0x6e, 0x7f, 0x34, 0x37, 0xdb, 0xaf, 0x61, 0x7e, 0xea, 0x4c, 0x3d, 0x42, 0x30, 0xd2, 0x26, 0xda,
	0x82, 0x77, 0x40, 0xd8, 0xa9, 0x6c, 0x12, 0xdb, 0x24, 0x2e, 0x71, 0x94, 0x20, 0x9e, 0xa3, 0xd9,
	0xaa, 0x6e, 0xfa, 0xc1, 0x9c, 0x57, 0xda, 0xb6, 0xf6, 0x56, 0x9d, 0xc9, 0x47, 0x5d, 0x62, 0x2c,
	0x7e, 0x83, 0xa7, 0x77, 0xda, 0xd6, 0x4e, 0xfd, 0x77, 0x04, 0x62, 0x6b, 0xcc, 0x1b, 0x9f, 0x85,
	0x18, 0x77, 0x4f, 0x3c, 0xfd, 0x3f, 0xf7, 0xed, 0xef, 0x79, 0x56, 0xce, 0x88, 0x3d, 0x2c, 0xf7,
	0x2f, 0x52, 0xd3, 0xb5, 0xa9, 0x21, 0xf7, 0x7d, 0x95, 0xda, 0x3b, 0xc4, 0x96, 0x39, 0x25, 0x9e,
	0x86, 0xf8, 0x36, 0x75, 0xdc, 0x86, 0x46, 0x4b, 0xc9, 0x80, 0xcb, 0x37, 0xe0, 0xeb, 0xf5, 0xf8,
	0x65, 0x48, 0x58, 0x95, 0x4d, 0x43, 0x2f, 0x2a, 0xba, 0x17, 0xc3, 0x4e, 0x48, 0x10, 0x26, 0xf4,
	0x2a, 0x57, 0x2c, 0x4c, 0x21, 0x59, 0x7f, 0x2f, 0xa3, 0x18, 0xba, 0xc3, 0xb6, 0xca, 0xe8, 0x91,
	0xf1, 0x87, 0x36, 0x1b, 0xde, 0x4a, 0xc0, 0x2d, 0x8d, 0xf1, 0x95, 0xf8, 0x01, 0x8a, 0xa6, 0xde,
	0x47, 0xa1, 0x0d, 0x61, 0xb0, 0x8e, 0x7f, 0x57, 0x77, 0xdc, 0x9b, 0xd5, 0x8f, 0x6b, 0x48, 0x84,
	0x71, 0x48, 0xb1, 0x51, 0x48, 0xaf, 0x98, 0x3c, 0x48, 0xc2, 0x9c, 0x21, 0xdc, 0x9b, 0x13, 0x33,
	0xe2, 0x3c, 0x0c, 0x01, 0xd4, 0x31, 0x1d, 0x8c, 0x16, 0xbe, 0x5f, 0x43, 0x12, 0x9c, 0x86, 0xf8,
	0xb2, 0xdf, 0xb7, 0x09, 0x68, 0x8c, 0x03, 0x24, 0x21, 0xc6, 0xe6, 0x70, 0xa2, 0xcf, 0x1b, 0x4d,
	0x10, 0x20, 0xb1, 0xce, 0xbb, 0x96, 0x5e, 0x59, 0x9f, 0x18, 0x08, 0x0d, 0xc2, 0x54, 0x2d, 0x0a,
	0xc3, 0x87, 0xfc, 0x60, 0xe6, 0xb1, 0x3b, 0xe5, 0xfa, 0xc1, 0x4c, 0x4d, 0xa5, 0x31, 0x6a, 0x91,
	0x8e, 0xab, 0x72, 0xd4, 0x29, 0x2f, 0xd6, 0xb9, 0xd6, 0x83, 0xd1, 0x7c, 0x13, 0x46, 0x5b, 0xe0,
	0xaa, 0x2e, 0xc3, 0x8a, 0x76, 0xc4, 0x1a, 0x6e, 0xc2, 0xaa, 0xba, 0x2b, 0x16, 0x5e, 0x04, 0x6c,
	0x52, 0xa5, 0xc5, 0xfb, 0xf7, 0x4f, 0xc9, 0x0e, 0xe1, 0xe6, 0xa6, 0x0e, 0xe2, 0x6f, 0xc2, 0x50,
	0x2b, 0x42, 0xdf, 0xb1, 0x0d, 0x5b, 0xfc, 0xd1, 0xc3, 0x56, 0xee, 0x65, 0x24, 0x0f, 0x36, 0x45,
	0x0d, 0x24, 0x11, 0xc6, 0x5b, 0x23, 0x14, 0xba, 0x15, 0x6c, 0x46, 0x43, 0x21, 0xf3, 0x2f, 0x9a,
	0x15, 0x73, 0xd2, 0xd5, 0xc3, 0xf1, 0x0c, 0x9f, 0x74, 0xe4, 0x49, 0x0d, 0xf5, 0xee, 0xd7, 0x50,
	0x8c, 0x91, 0xe6, 0xc5, 0x79, 0xb6, 0x84, 0xea, 0xa7, 0x5d, 0x2c, 0xd5, 0x3b, 0xf5, 0x1d, 0x04,
	0xf8, 0xf0, 0xbb, 0x29, 0xfc, 0x75, 0x18, 0x30, 0xa9, 0xab, 0x94, 0xb9, 0x85, 0xaa, 0xf9, 0x53,
	0x36, 0x7b, 0xec, 0x88, 0x3f, 0xd5, 0xb8, 0x4e, 0x7a, 0x4b, 0x76, 0xb9, 0x47, 0x06, 0x93, 0xba,
	0x9e, 0xb5, 0xab, 0x31, 0xf3, 0x91, 0xda, 0xc5, 0x6d, 0xe2, 0xb8, 0x36, 0x57, 0xcf, 0xb0, 0x79,
	0x17, 0xf4, 0x0a, 0x65, 0x3f, 0xab, 0x0b, 0x3a, 0xf5, 0x67, 0x08, 0x86, 0x5a, 0xde, 0x75, 0x3d,
	0x57, 0xf2, 0xfd, 0x7e, 0x04, 0x86, 0x5a, 0x5e, 0x9f, 0xfd, 0x12, 0xe5, 0xc3, 0x04, 0xfa, 0x03,
	0x58, 0x4f, 0xfb, 0xe7, 0x4f, 0xf0, 0x8e, 0xcf, 0x07, 0x61, 0x07, 0x8a, 0x34, 0xfc, 0x93, 0x87,
	0xa0, 0x91, 0x32, 0xcd, 0x88, 0x2e, 0x71, 0xdc, 0x7d, 0xaf, 0xa5, 0x00, 0xfb, 0xe4, 0xc3, 0xf0,
	0x17, 0x08, 0x86, 0x0f, 0xbd, 0xf6, 0x7b, 0xee, 0x14, 0xa9, 0xe5, 0x3d, 0xe2, 0x73, 0x25, 0xdf,
	0x5f, 0x21, 0x18, 0x6b, 0xfb, 0xee, 0xf0, 0xb9, 0x1b, 0xc5, 0x96, 0x57, 0x90, 0xcf, 0x95, 0x7c,
	0x7f, 0x89, 0x60, 0xa4, 0xcd, 0xcb, 0xdd, 0xe7, 0x6e, 0xa6, 0xdb, 0xbe, 0x73, 0x7d, 0xee, 0x46,
	0xb2, 0xcd, 0xcb, 0xdb, 0xe7, 0x4a, 0xc6, 0xbf, 0x8f, 0x40, 0x3c, 0x40, 0xc4, 0xdf, 0x8d, 0x40,
	0x82, 0xbb, 0xf6, 0xdc, 0xde, 0x42, 0xdc, 0xde, 0x12, 0x4f, 0x22, 0x97, 0xf4, 0x09, 0x6a, 0x6b,
	0x6b, 0x1d, 0xfc, 0xe8, 0x9f, 0xa3, 0xff, 0x80, 0x3e, 0x78, 0x8c, 0xfe, 0x16, 0x4d, 0xfd, 0x0d,
	0x7a, 0xb0, 0x4d, 0x6c, 0x92, 0x56, 0x6d, 0x92, 0x36, 0x69, 0x9a, 0xb1, 0x39, 0x69, 0x55, 0xd3,
	0x88, 0x96, 0xde, 0x23, 0xee, 0x0c, 0x2f, 0x48, 0x6f, 0x51, 0x3b, 0xed, 0x6e, 0x13, 0x2f, 0x34,
	0x44, 0xd2, 0xec, 0x60, 0xf7, 0x82, 0x49, 0x8c, 0xcb, 0x23, 0xae, 0xea, 0x6a, 0x9a, 0xbc, 0xe7,
	0x45, 0xb2, 0xd2, 0x41, 0x84, 0x27, 0x5d, 0xae, 0xc7, 0x84, 0xd2, 0x45, 0x6a, 0x3a, 0xd4, 0x60,
	0xe0, 0xa6, 0x96, 0xde, 0xd5, 0x0d, 0x23, 0xad, 0x56, 0x5c, 0xca, 0x6c, 0xba, 0xa2, 0x6a, 0x18,
	0x7b, 0x69, 0xd5, 0xb2, 0x88, 0x6a, 0xa7, 0xb9, 0x30, 0xbb, 0xdb, 0xc4, 0x64, 0x0d, 0xee, 0xf1,
	0x06, 0x34, 0xdd, 0x29, 0xd2, 0x2a, 0xb1, 0x89, 0x36, 0xc3, 0x24, 0xef, 0xfb, 0xe0, 0x31, 0x37,
	0x18, 0xe3, 0xa6, 0x3f, 0x50, 0x53, 0x9f, 0x5e, 0x80, 0xe4, 0xa2, 0x4d, 0x54, 0x97, 0x74, 0x6f,
	0xb6, 0x74, 0x6f, 0xb6, 0x74, 0x6f, 0xb6, 0x74, 0x6f, 0xb6, 0x74, 0x6f, 0xb6, 0x74, 0x6f, 0xb6,
	0x74, 0x6f, 0xb6, 0x74, 0x6f, 0xb6, 0x34, 0xdf, 0x6c, 0x99, 0xe9, 0x70, 0xb3, 0xa5, 0x7b, 0x99,
	0xa5, 0x7b, 0x99, 0xe5, 0xd7, 0xf8, 0x32, 0xcb, 0xd2, 0xcf, 0x7b, 0x99, 0xe5, 0x97, 0x79, 0x4d,
	0xe5, 0x57, 0x79, 0x21, 0xe4, 0x57, 0x72, 0xa5, 0x43, 0xfd, 0x22, 0xaf, 0x74, 0x74, 0x2f, 0x72,
	0xe8, 0xa5, 0x9b, 0xc3, 0xdf, 0x7f, 0xbd, 0xe5, 0xa3, 0x04, 0xe9, 0xd2, 0xe1, 0x1b, 0x02, 0x23,
	0x8f, 0x9e, 0xa2, 0xd6, 0x42, 0x29, 0x7b, 0xd4, 0x7d, 0x80, 0xf1, 0x47, 0x4f, 0x51, 0xfb, 0x2a,
	0x69, 0xf6, 0x88, 0x7b, 0x01, 0xc2, 0xa3, 0xa7, 0xa8, 0x6d, 0x0d, 0xe3, 0x68, 0x7b, 0x3d, 0x80,
	0x73, 0xb4, 0xab, 0x91, 0xe6, 0x8f, 0xbe, 0x25, 0x70, 0xf6, 0xd1, 0x53, 0x74, 0x54, 0xa5, 0xf4,
	0x7a, 0xe7, 0xfb, 0x02, 0x17, 0x1e, 0x3d, 0x45, 0x9d, 0x08, 0x8e, 0xe0, 0xa7, 0xcf, 0xe2, 0x0f,
	0x08, 0xa4, 0x8b, 0x87, 0x2e, 0x12, 0xe0, 0x47, 0x4f, 0x51, 0x4b, 0x19, 0xeb, 0xdd, 0x51, 0xb7,
	0x08, 0x78, 0xef, 0x8e, 0xa8, 0xfc, 0xb9, 0x2f, 0x16, 0xcc, 0xa5, 0xf2, 0xfe, 0xf5, 0x82, 0x7f,
	0xbb, 0x00, 0x43, 0x32, 0xb1, 0x0c, 0xb5, 0xd8, 0x75, 0xf3, 0xbb, 0x6e, 0x7e, 0xd7, 0xcd, 0xef,
	0xba, 0xf9, 0x5d, 0x37, 0xbf, 0xeb, 0xe6, 0x77, 0xdd, 0xfc, 0xae, 0x9b, 0xdf, 0x75, 0xf3, 0xbb,
	0x6e, 0x7e, 0xd7, 0xcd, 0xef, 0xba, 0xf9, 0x5d, 0x37, 0xbf, 0xeb, 0xe6, 0x77, 0xdd, 0xfc, 0x5f,
	0x73, 0x37, 0xff, 0x0f, 0x5f, 0x80, 0x81, 0x37, 0x89, 0xdb, 0x75, 0xf1, 0xbb, 0x2e, 0x7e, 0xd7,
	0xc5, 0xef, 0xba, 0xf8, 0x5d, 0x17, 0xbf, 0xeb, 0xe2, 0x77, 0x5d, 0xfc, 0xae, 0x8b, 0xdf, 0x75,
	0xf1, 0xbb, 0x2e, 0x7e, 0xd7, 0xc5, 0xff, 0xff, 0x72, 0xf1, 0x6f, 0x3e, 0x33, 0xe1, 0xc4, 0xd1,
	0x09, 0x26, 0xae, 0x3f, 0x2b, 0xc1, 0x44, 0x37, 0xa1, 0x44, 0x37, 0x2c, 0xd1, 0x0d, 0x4b, 0x74,
	0xc3, 0x12, 0xcf, 0x61, 0x58, 0xe2, 0xd5, 0xd4, 0xad, 0xa9, 0x1f, 0x8e, 0x41, 0xa2, 0xfe, 0xa5,
	0x29, 0x16, 0x61, 0x40, 0x23, 0x4e, 0xd1, 0xd6, 0x79, 0x16, 0x50, 0xff, 0xb3, 0xdc, 0xf0, 0x37,
	0xb3, 0xe1, 0x6a, 0xfc, 0xc7, 0x08, 0xfa, 0x0c, 0x75, 0x93, 0x18, 0x8e, 0x10, 0xe1, 0xdf, 0x6f,
	0xbc, 0x76, 0xe2, 0xef, 0x65, 0x67, 0xee, 0x72, 0xfe, 0x3b, 0xa6, 0x6b, 0xef, 0x49, 0xaf, 0x7d,
	0xf8, 0x18, 0xc5, 0x20, 0xe2, 0x7d, 0x03, 0x3f, 0xf0, 0x21, 0x8a, 0x4f, 0xf5, 0xd9, 0xb1, 0x14,
	0x12, 0xbc, 0x2f, 0xeb, 0x3f, 0x44, 0x91, 0x54, 0x2a, 0xa8, 0x99, 0xf6, 0x6b, 0xf8, 0x27, 0x13,
	0xdf, 0x7a, 0x8c, 0x22, 0xf1, 0x1e, 0xd9, 0x97, 0x05, 0x9b, 0x80, 0x89, 0xbb, 0xcd, 0xbf, 0x3b,
	0x6e, 0xa4, 0x5b, 0xf5, 0xe3, 0x17, 0xc7, 0x96, 0xf0, 0x8e, 0x8f, 0x50, 0x97, 0xd4, 0x77, 0x33,
	0x87, 0x49, 0x6b, 0x05, 0xde, 0x84, 0x64, 0xd5, 0x50, 0xcd, 0x50, 0x5b, 0x27, 0x0c, 0x6e, 0x6c,
	0x18, 0xaa, 0xd9, 0xda, 0xce, 0x60, 0x35, 0x5c, 0x88, 0xbf, 0x02, 0xc9, 0x4d, 0x6a, 0x6a, 0xa1,
	0x36, 0xfa, 0xda, 0x7e, 0x02, 0xee, 0x59, 0xd9, 0x6f, 0xb0, 0x7f, 0x25, 0x6a, 0x6a, 0x4b, 0x84,
	0x2d, 0x83, 0x00, 0x92, 0x21, 0x34, 0x20, 0x17, 0x60, 0x40, 0xdb, 0x2e, 0x5a, 0x4a, 0xd1, 0xd0,
	0x89, 0xe9, 0xfa, 0x31, 0x89, 0xa3, 0x3c, 0x64, 0x60, 0xa4, 0x8b, 0x9c, 0x12, 0xbf, 0x03, 0x09,
	0x76, 0x8e, 0x78, 0x1f, 0x08, 0x27, 0xda, 0x5a, 0x07, 0x87, 0xb2, 0xdd, 0xce, 0x14, 0x38, 0xc7,
	0x8a, 0xb5, 0xae, 0xda, 0x6a, 0x99, 0xb8, 0xc4, 0x76, 0xd6, 0x7c, 0x73, 0x78, 0x19, 0xc9, 0x71,
	0xc7, 0xaf, 0xc5, 0x9b, 0xbe, 0x50, 0x5e, 0x92, 0x05, 0xdf, 0xba, 0xbf, 0xf1, 0x4c, 0xf4, 0xa5,
	0xe5, 0x45, 0x7f, 0x27, 0x6c, 0xe0, 0x87, 0x82, 0x24, 0xbe, 0xfc, 0x1e, 0x05, 0x7e, 0x1d, 0x86,
	0x4c, 0xaa, 0xe8, 0x56, 0x75, 0xae, 0x9e, 0x7f, 0x21, 0xdd, 0xb1, 0xf3, 0x83, 0x26, 0x5d, 0xb1,
	0xaa, 0x73, 0x41, 0x1e, 0x86, 0x49, 0x88, 0xf1, 0xcf, 0xcf, 0xe1, 0xd0, 0xea, 0xe0, 0xe5, 0x78,
	0x06, 0xa2, 0x65, 0xb7, 0x22, 0x0c, 0xf0, 0x04, 0x0d, 0xe7, 0x3e, 0xa9, 0xa1, 0x58, 0x26, 0x3f,
	0x3b, 0xcb, 0xc8, 0x86, 0xa6, 0x07, 0xa5, 0x81, 0x59, 0x31, 0x9f, 0xc9, 0x5e, 0xcd, 0xcc, 0xe7,
	0xae, 0xcf, 0xc9, 0x8c, 0x10, 0x17, 0x20, 0x19, 0xf4, 0xc8, 0xcb, 0xbe, 0xeb, 0x47, 0x2b, 0x2e,
	0xb5, 0xd5, 0x1f, 0x3f, 0x50, 0xe1, 0x99, 0x2e, 0x0d, 0xdf, 0x49, 0x1e, 0xf4, 0x31, 0xee, 0x7b,
	0x6b, 0xf3, 0x36, 0xa4, 0xfc, 0x43, 0xb4, 0xe1, 0x81, 0x0e, 0x77, 0x8c, 0x14, 0x0c, 0xf9, 0xf4,
	0x75, 0xdf, 0xf3, 0x6d, 0xe8, 0xf7, 0x8b, 0x04, 0x7c, 0xcc, 0x79, 0xb8, 0xab, 0x9b, 0x3b, 0x5f,
	0xa9, 0xa8, 0x9e, 0x27, 0xc3, 0x59, 0xbd, 0xb3, 0x68, 0x39, 0x22, 0x07, 0x58, 0xf8, 0x12, 0xc4,
	0x2d, 0x5b, 0xa7, 0xb6, 0xee, 0xee, 0x09, 0x23, 0x7c, 0x8c, 0xbc, 0x21, 0x9c, 0x8e, 0x0a, 0x9f,
	0x23, 0xb9, 0x5e, 0x87, 0x2b, 0x20, 0x7a, 0x19, 0x83, 0xfd, 0x4f, 0xc0, 0x9b, 0xf6, 0xd6, 0xc6,
	0xe7, 0xfa, 0xf5, 0xde, 0x8d, 0x75, 0xf4, 0xaf, 0x5f, 0x76, 0xea, 0x46, 0x65, 0xd8, 0x94, 0xaf,
	0x2f, 0x87, 0x7a, 0xaf, 0x1d, 0x78, 0xe5, 0x38, 0xcd, 0x7a, 0xa6, 0xd5, 0xb3, 0xbc, 0xfa, 0x4b,
	0xcf, 0x68, 0xf5, 0x8e, 0x87, 0x82, 0x5f, 0x04, 0xd0, 0x1d, 0xc5, 0xb2, 0xf5, 0xb2, 0x6a, 0xef,
	0x71, 0x27, 0x3f, 0xee, 0xe7, 0x68, 0x4a, 0xe8, 0xce, 0xba, 0x57, 0x8c, 0xaf, 0xc0, 0xa0, 0xee,
	0x28, 0x8d, 0x8f, 0xce, 0xb8, 0xa3, 0x1d, 0xd0, 0x9d, 0xd2, 0x9d, 0x50, 0x8a, 0xa2, 0xba, 0x8a,
	0xcf, 0xd7, 0x55, 0xfc, 0x7c, 0x47, 0xcf, 0xde, 0x53, 0xf1, 0xf9, 0x40, 0xc5, 0x75, 0x18, 0xa9,
	0x2f, 0xf1, 0x10, 0xc6, 0x64, 0xdb, 0xc0, 0xe2, 0x91, 0x8b, 0x7d, 0xbd, 0x79, 0x31, 0x2e, 0xc7,
	0xe4, 0xe1, 0x60, 0xa1, 0x37, 0x9a, 0x52, 0x20, 0xe5, 0xb5, 0x51, 0x71, 0x69, 0x60, 0x09, 0x5d,
	0x68, 0x6b, 0x65, 0x1d, 0x6e, 0x67, 0x65, 0x7d, 0x63, 0xfe, 0x76, 0xc5, 0xa5, 0x9e, 0x92, 0xf9,
	0x6d, 0x24, 0x19, 0x5c, 0xa3, 0x74, 0xe2, 0x06, 0x0c, 0x84, 0x0e, 0x19, 0x9c, 0x82, 0xe8, 0x0e,
	0xd9, 0xf3, 0x8e, 0x36, 0x99, 0xfd, 0xc4, 0xa3, 0xd0, 0x5b, 0x55, 0x8d, 0x8a, 0x17, 0x82, 0x4f,
	0xc8, 0xde, 0xc3, 0xcd, 0xc8, 0x75, 0x74, 0xf3, 0x7f, 0x62, 0x1f, 0xd7, 0x10, 0x05, 0x0c, 0xf1,
	0x7b, 0xc4, 0x55, 0x35, 0xd5, 0x55, 0x71, 0x5f, 0x66, 0x56, 0xcc, 0x88, 0x59, 0x18, 0x87, 0x51,
	0x6f, 0x73, 0x4d, 0x7b, 0xcd, 0x54, 0xbc, 0x6f, 0x20, 0x31, 0xca, 0x81, 0x00, 0xa9, 0x95, 0xf5,
	0x96, 0xe2, 0xd8, 0x82, 0x98, 0xbd, 0x0e, 0x17, 0x01, 0xd7, 0xa7, 0x3e, 0x5d, 0x8f, 0x19, 0x25,
	0x33, 0x59, 0x31, 0x93, 0x11, 0x33, 0xf3, 0x62, 0xe6, 0x86, 0x98, 0x9d, 0xfd, 0x7e, 0x0d, 0x7d,
	0x1e, 0x85, 0x24, 0xc4, 0xd6, 0xd4, 0x32, 0xcf, 0xe9, 0xc0, 0x73, 0x3c, 0xbc, 0xe3, 0xe5, 0x78,
	0x98, 0x96, 0x61, 0x1d, 0x26, 0xdb, 0x1d, 0x70, 0xd9, 0x78, 0x70, 0x64, 0xc1, 0xe9, 0xd6, 0x03,
	0x29, 0x1b, 0xdb, 0xb8, 0x7b, 0x7b, 0x8d, 0x95, 0x37, 0x1f, 0x22, 0xd9, 0x18, 0x3b, 0x24, 0xe0,
	0xeb, 0xd0, 0xe7, 0xf5, 0x65, 0xfa, 0x3e, 0xdc, 0x83, 0xb3, 0x30, 0x7e, 0x18, 0x7d, 0x46, 0xe3,
	0x04, 0x70, 0x06, 0xc6, 0x9a, 0xa1, 0x83, 0x8a, 0x31, 0x18, 0x69, 0xc6, 0x9e, 0xe1, 0x62, 0xdf,
	0x83, 0xe8, 0xbd, 0xdb, 0x8b, 0xd3, 0x6f, 0xc0, 0x12, 0x08, 0x70, 0xba, 0x0d, 0x6e, 0x59, 0x2d,
	0xc2, 0xc8, 0x21, 0x79, 0xd1, 0x55, 0x56, 0xd8, 0x22, 0x2c, 0xba, 0x0a, 0x32, 0xf0, 0x9e, 0x4c,
	0xaf, 0xc2, 0x32, 0xc3, 0x6b, 0x11, 0xc5, 0x7b, 0xd4, 0xe0, 0x4c, 0xdb, 0xf1, 0x39, 0x0a, 0xf3,
	0x03, 0x04, 0x43, 0x1b, 0x5e, 0x66, 0xf1, 0x20, 0xc5, 0xd8, 0xf4, 0xef, 0xc1, 0x43, 0xb8, 0x0c,
	0x2f, 0x34, 0x6f, 0xcb, 0xdc, 0x43, 0x52, 0x3c, 0xc7, 0xd8, 0xaf, 0xc9, 0x46, 0x0b, 0x77, 0xef,
	0xc3, 0x35, 0xb8, 0x7c, 0x34, 0xa5, 0x6e, 0x3a, 0xba, 0x46, 0xc2, 0x0c, 0x2b, 0x90, 0x86, 0xc9,
	0x56, 0x06, 0x52, 0xe2, 0x31, 0x2d, 0xbf, 0x58, 0xba, 0x02, 0xa9, 0xc6, 0x5e, 0x13, 0xca, 0x7c,
	0xc5, 0x33, 0x24, 0x1d, 0xd4, 0x50, 0x2f, 0xcf, 0x22, 0xc6, 0x33, 0x5f, 0xbd, 0x0c, 0x49, 0x7f,
	0x7d, 0x86, 0x09, 0xe3, 0xfb, 0x35, 0xd4, 0x7f, 0x50, 0x43, 0x89, 0xeb, 0xe2, 0x0d, 0x31, 0xbb,
	0x20, 0xe6, 0xb2, 0xd2, 0x25, 0x18, 0x6e, 0xf8, 0x55, 0xe1, 0x8f, 0x75, 0x87, 0xf7, 0x6b, 0x28,
	0xc5, 0x73, 0x86, 0x2d, 0x88, 0x99, 0xeb, 0xd2, 0x97, 0x60, 0xfa, 0x38, 0x3b, 0x60, 0x08, 0x60,
	0x6c, 0xbf, 0x86, 0x46, 0x79, 0x6e, 0xb0, 0x8c, 0x98, 0xcd, 0x4a, 0x65, 0x18, 0x09, 0x6f, 0x1b,
	0x01, 0xe5, 0xc6, 0x93, 0x1a, 0x3a, 0xbf, 0x5f, 0x43, 0xe7, 0x0e, 0x6a, 0x28, 0x9e, 0xbd, 0x21,
	0xe6, 0x66, 0xc5, 0x5c, 0xe6, 0x83, 0xc7, 0x08, 0x6f, 0xe5, 0xdf, 0x2b, 0x5e, 0x65, 0x1c, 0x57,
	0x1d, 0x57, 0x35, 0x35, 0xd5, 0xd6, 0xbe, 0xf5, 0x14, 0x5d, 0x6e, 0xa4, 0x3b, 0x10, 0x8b, 0xb6,
	0x2b, 0x3a, 0xae, 0x5a, 0xd2, 0xcd, 0x92, 0xc8, 0x1c, 0xf4, 0x4d, 0xd5, 0xdc, 0x51, 0xca, 0xa4,
	0x28, 0x5a, 0x36, 0xd5, 0xea, 0x49, 0xa0, 0xfa, 0x53, 0xf1, 0xd5, 0x58, 0x3c, 0x95, 0x1a, 0x5e,
	0x8d, 0xc5, 0x47, 0x53, 0x63, 0xab, 0xb1, 0xf8, 0xb9, 0xd4, 0xf9, 0xa9, 0xdf, 0x85, 0xb1, 0xb6,
	0xb6, 0x1c, 0x7e, 0x0d, 0xfa, 0x3c, 0xdd, 0xf5, 0xcd, 0xdc, 0x97, 0x78, 0xf6, 0xa5, 0xc7, 0x28,
	0x19, 0x8f, 0xcc, 0xa2, 0x9b, 0x71, 0x9b, 0x94, 0x74, 0xc7, 0x25, 0x76, 0x90, 0x5d, 0xc6, 0x37,
	0x38, 0x65, 0x9f, 0x09, 0x5f, 0x84, 0x68, 0x59, 0x2d, 0x7a, 0x7b, 0x86, 0x84, 0x19, 0x6f, 0x28,
	0x0f, 0xcd, 0x3f, 0x22, 0x24, 0xb3, 0xea, 0xa9, 0x3d, 0x18, 0x3e, 0x64, 0xdd, 0xfd, 0xa2, 0x2d,
	0xbf, 0x04, 0xfd, 0xbe, 0xa6, 0xfb, 0x49, 0xa0, 0x4e, 0x31, 0xaa, 0xfe, 0xe9, 0x5e, 0xe1, 0xf3,
	0x0b, 0x97, 0x91, 0xdc, 0xc7, 0x2d, 0x47, 0x6d, 0xea, 0xbf, 0xe2, 0x70, 0xd6, 0xd7, 0x6b, 0x5f,
	0xad, 0x9b, 0xb7, 0xa4, 0xef, 0x36, 0xac, 0x77, 0xef, 0xeb, 0xeb, 0xfb, 0xc7, 0xb6, 0x57, 0x8f,
	0x46, 0xfd, 0x65, 0xd8, 0xf3, 0x67, 0x21, 0x5a, 0xd5, 0xbd, 0xbc, 0x2f, 0x09, 0x29, 0xd1, 0xc8,
	0x8f, 0xc5, 0x4a, 0xf1, 0x26, 0xf4, 0xf1, 0xfc, 0x4d, 0xf3, 0xdc, 0xba, 0x49, 0x48, 0x6f, 0xfd,
	0xe4, 0xe1, 0xb1, 0x35, 0xe7, 0x5b, 0xdf, 0x6b, 0xa7, 0x7b, 0xfe, 0x14, 0xbe, 0x8f, 0x90, 0xdc,
	0x5b, 0xd5, 0xad, 0x8d, 0x79, 0x7c, 0x05, 0x80, 0x6d, 0x66, 0xbe, 0x4d, 0xda, 0xd7, 0x2a, 0x47,
	0xa8, 0x12, 0x5b, 0x30, 0xd8, 0x78, 0x62, 0x52, 0xe1, 0x2f, 0x5e, 0xaa, 0x53, 0x8d, 0x16, 0x36,
	0xe6, 0xfd, 0x57, 0x42, 0xfe, 0x69, 0x6d, 0xd3, 0x8a, 0x4b, 0x9c, 0x8e, 0xb6, 0x7c, 0x8f, 0x9c,
	0x34, 0xa9, 0x77, 0x40, 0xcb, 0x9c, 0x1a, 0x17, 0x61, 0xb0, 0x99, 0x3d, 0x71, 0xc2, 0x57, 0x30,
	0x21, 0xb0, 0x20, 0xa0, 0xbf, 0xdc, 0x23, 0x9f, 0x72, 0xc2, 0x8d, 0xdc, 0x81, 0x11, 0x93, 0x2a,
	0xd5, 0xf9, 0x16, 0x49, 0x87, 0x3a, 0x1a, 0xde, 0x29, 0x93, 0x6e, 0xcc, 0x37, 0xc9, 0xaa, 0x42,
	0xca, 0x07, 0xa8, 0xce, 0x07, 0x18, 0xde, 0x0b, 0xab, 0xfc, 0x21, 0x71, 0x9b, 0xfe, 0x58, 0x84,
	0x2f, 0xe5, 0xc6, 0x7c, 0x8b, 0x9c, 0x48, 0x4e, 0x3a, 0x4d, 0x35, 0xbf, 0x88, 0xbd, 0xf0, 0x8d,
	0x8f, 0x6b, 0xe8, 0x1d, 0x18, 0x6b, 0x64, 0x9b, 0xac, 0x9b, 0x0d, 0x28, 0x03, 0x63, 0x30, 0xe8,
	0xc9, 0x90, 0xf6, 0xfb, 0x12, 0x5b, 0x10, 0x33, 0x73, 0xec, 0x50, 0xbe, 0x4b, 0x55, 0x2d, 0xdd,
	0x08, 0xb2, 0xc7, 0xf2, 0x62, 0x66, 0x01, 0x30, 0xc0, 0xd2, 0x5a, 0x21, 0xed, 0xfb, 0x2c, 0xb1,
	0x79, 0xb6, 0x33, 0x5f, 0xaa, 0x9b, 0x65, 0xbc, 0xeb, 0xe1, 0x1c, 0x43, 0xc1, 0x7e, 0x1f, 0xbd,
	0x2e, 0xde, 0x90, 0xca, 0x70, 0xba, 0x65, 0x94, 0x02, 0xd2, 0xc2, 0xa1, 0x14, 0x91, 0x5f, 0xc8,
	0x06, 0xec, 0x6d, 0xbd, 0xc9, 0xd4, 0xd0, 0xd4, 0x1f, 0x21, 0x18, 0x6d, 0xa7, 0x10, 0x78, 0xb7,
	0x55, 0xcb, 0xbc, 0x4d, 0x27, 0x7b, 0xac, 0x69, 0xe3, 0x58, 0x1b, 0x3a, 0xd9, 0xe5, 0x0e, 0xcf,
	0x64, 0x3d, 0xe7, 0x5e, 0x2a, 0xf8, 0x15, 0x0f, 0x27, 0xdb, 0x6a, 0xd2, 0xbc, 0xa9, 0xc7, 0x51,
	0x18, 0x69, 0x13, 0x94, 0xc6, 0xaf, 0x41, 0xd2, 0x4f, 0x8c, 0x18, 0x98, 0x9d, 0x9d, 0x93, 0x5d,
	0x0d, 0xfa, 0xd4, 0x7e, 0xe2, 0xc7, 0x77, 0x01, 0x78, 0x80, 0xc7, 0x63, 0xf5, 0xae, 0x5a, 0x2c,
	0x7e, 0x01, 0x3b, 0xa8, 0x14, 0xf3, 0xb3, 0xfb, 0x24, 0x1c, 0xc3, 0x37, 0x61, 0xf1, 0x12, 0xe0,
	0x40, 0x54, 0x1e, 0x94, 0xf2, 0xda, 0xec, 0x9c, 0x08, 0x2b, 0xe5, 0x73, 0x14, 0x0c, 0x3d, 0x2c,
	0x71, 0x9d, 0xbb, 0xef, 0x8b, 0x96, 0x18, 0x31, 0x89, 0xfd, 0xb6, 0xa4, 0xf3, 0xfe, 0xe8, 0x1c,
	0x91, 0x04, 0xeb, 0xbc, 0x2f, 0x4a, 0xa3, 0x3a, 0x9c, 0xf8, 0x2a, 0x9c, 0xf4, 0x4a, 0xfa, 0x10,
	0xed, 0xff, 0x78, 0xb2, 0xe7, 0x07, 0x3f, 0x9e, 0xec, 0xf9, 0xe9, 0x8f, 0x27, 0xd1, 0xfb, 0x07,
	0x93, 0xe8, 0xaf, 0x0f, 0x26, 0xd1, 0xbf, 0x1c, 0x4c, 0xa2, 0xfd, 0x83, 0x49, 0xf4, 0x83, 0x83,
	0x49, 0xf4, 0xa3, 0x83, 0x49, 0xf4, 0xd9, 0xc1, 0x64, 0xcf, 0x4f, 0x0f, 0x26, 0xd1, 0xb7, 0x3f,
	0x9d, 0xec, 0x79, 0xf2, 0xe9, 0x24, 0xda, 0xff, 0x74, 0xb2, 0xe7, 0x07, 0x9f, 0x4e, 0xf6, 0xbc,
	0xf3, 0x1b, 0x25, 0x6a, 0xed, 0x94, 0x66, 0x82, 0xf0, 0xfd, 0x4c, 0xc5, 0xb9, 0xc6, 0x7f, 0x6c,
	0x51, 0xbb, 0x7c, 0x35, 0x08, 0x7b, 0x5e, 0x0d, 0xaa, 0xaf, 0x59, 0x9b, 0x25, 0x7a, 0x8d, 0xbc,
	0xe7, 0x06, 0x7f, 0x6b, 0xa7, 0xf3, 0xdf, 0xbd, 0xd9, 0xec, 0xe3, 0x7f, 0x7c, 0x26, 0xf7, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x20, 0xb3, 0xb7, 0x16, 0xc5, 0x68, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProviderChoice == nil {
		if this.ProviderChoice != nil {
			return false
		}
	} else if this.ProviderChoice == nil {
		return false
	} else if !this.ProviderChoice.Equal(that1.ProviderChoice) {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if !this.SoftwareSettings.Equal(that1.SoftwareSettings) {
		return false
	}
	if !this.UpgradeSettings.Equal(that1.UpgradeSettings) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if this.TunnelDeadTimeout != that1.TunnelDeadTimeout {
		return false
	}
	if !this.LoadBalancing.Equal(that1.LoadBalancing) {
		return false
	}
	if that1.S2SConnectivitySliChoice == nil {
		if this.S2SConnectivitySliChoice != nil {
			return false
		}
	} else if this.S2SConnectivitySliChoice == nil {
		return false
	} else if !this.S2SConnectivitySliChoice.Equal(that1.S2SConnectivitySliChoice) {
		return false
	}
	if that1.S2SConnectivitySloChoice == nil {
		if this.S2SConnectivitySloChoice != nil {
			return false
		}
	} else if this.S2SConnectivitySloChoice == nil {
		return false
	} else if !this.S2SConnectivitySloChoice.Equal(that1.S2SConnectivitySloChoice) {
		return false
	}
	if !this.LocalVrf.Equal(that1.LocalVrf) {
		return false
	}
	if this.TunnelType != that1.TunnelType {
		return false
	}
	if !this.ReSelect.Equal(that1.ReSelect) {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if that1.NodeHaChoice == nil {
		if this.NodeHaChoice != nil {
			return false
		}
	} else if this.NodeHaChoice == nil {
		return false
	} else if !this.NodeHaChoice.Equal(that1.NodeHaChoice) {
		return false
	}
	if this.SiteState != that1.SiteState {
		return false
	}
	if !this.AdminUserCredentials.Equal(that1.AdminUserCredentials) {
		return false
	}
	if !this.ProactiveMonitoring.Equal(that1.ProactiveMonitoring) {
		return false
	}
	if that1.EnterpriseProxyChoice == nil {
		if this.EnterpriseProxyChoice != nil {
			return false
		}
	} else if this.EnterpriseProxyChoice == nil {
		return false
	} else if !this.EnterpriseProxyChoice.Equal(that1.EnterpriseProxyChoice) {
		return false
	}
	if !this.DnsNtpConfig.Equal(that1.DnsNtpConfig) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Vmware) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Vmware)
	if !ok {
		that2, ok := that.(GlobalSpecType_Vmware)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vmware.Equal(that1.Vmware) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Kvm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Kvm)
	if !ok {
		that2, ok := that.(GlobalSpecType_Kvm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Kvm.Equal(that1.Kvm) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Aws)
	if !ok {
		that2, ok := that.(GlobalSpecType_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Azure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Azure)
	if !ok {
		that2, ok := that.(GlobalSpecType_Azure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Azure.Equal(that1.Azure) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Gcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Gcp)
	if !ok {
		that2, ok := that.(GlobalSpecType_Gcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gcp.Equal(that1.Gcp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Rseries) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Rseries)
	if !ok {
		that2, ok := that.(GlobalSpecType_Rseries)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rseries.Equal(that1.Rseries) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Baremetal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Baremetal)
	if !ok {
		that2, ok := that.(GlobalSpecType_Baremetal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Baremetal.Equal(that1.Baremetal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Oci) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Oci)
	if !ok {
		that2, ok := that.(GlobalSpecType_Oci)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Oci.Equal(that1.Oci) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Openstack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Openstack)
	if !ok {
		that2, ok := that.(GlobalSpecType_Openstack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Openstack.Equal(that1.Openstack) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Nutanix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Nutanix)
	if !ok {
		that2, ok := that.(GlobalSpecType_Nutanix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Nutanix.Equal(that1.Nutanix) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(GlobalSpecType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoForwardProxy)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(GlobalSpecType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BlockAllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BlockAllServices)
	if !ok {
		that2, ok := that.(GlobalSpecType_BlockAllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockAllServices.Equal(that1.BlockAllServices) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(GlobalSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoS2SConnectivitySli) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoS2SConnectivitySli)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoS2SConnectivitySli)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoS2SConnectivitySli.Equal(that1.NoS2SConnectivitySli) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DcClusterGroupSli) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DcClusterGroupSli)
	if !ok {
		that2, ok := that.(GlobalSpecType_DcClusterGroupSli)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupSli.Equal(that1.DcClusterGroupSli) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoS2SConnectivitySlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoS2SConnectivitySlo)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoS2SConnectivitySlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoS2SConnectivitySlo.Equal(that1.NoS2SConnectivitySlo) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SiteMeshGroupOnSlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SiteMeshGroupOnSlo)
	if !ok {
		that2, ok := that.(GlobalSpecType_SiteMeshGroupOnSlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteMeshGroupOnSlo.Equal(that1.SiteMeshGroupOnSlo) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DcClusterGroupSlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DcClusterGroupSlo)
	if !ok {
		that2, ok := that.(GlobalSpecType_DcClusterGroupSlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupSlo.Equal(that1.DcClusterGroupSlo) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableHa) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableHa)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableHa)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHa.Equal(that1.DisableHa) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableHa) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableHa)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableHa)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableHa.Equal(that1.EnableHa) {
		return false
	}
	return true
}
func (this *GlobalSpecType_F5Proxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_F5Proxy)
	if !ok {
		that2, ok := that.(GlobalSpecType_F5Proxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5Proxy.Equal(that1.F5Proxy) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CustomProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CustomProxy)
	if !ok {
		that2, ok := that.(GlobalSpecType_CustomProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomProxy.Equal(that1.CustomProxy) {
		return false
	}
	return true
}
func (this *DNSNTPServerConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSNTPServerConfig)
	if !ok {
		that2, ok := that.(DNSNTPServerConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DnsServerChoice == nil {
		if this.DnsServerChoice != nil {
			return false
		}
	} else if this.DnsServerChoice == nil {
		return false
	} else if !this.DnsServerChoice.Equal(that1.DnsServerChoice) {
		return false
	}
	if that1.NtpServerChoice == nil {
		if this.NtpServerChoice != nil {
			return false
		}
	} else if this.NtpServerChoice == nil {
		return false
	} else if !this.NtpServerChoice.Equal(that1.NtpServerChoice) {
		return false
	}
	return true
}
func (this *DNSNTPServerConfig_F5DnsDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSNTPServerConfig_F5DnsDefault)
	if !ok {
		that2, ok := that.(DNSNTPServerConfig_F5DnsDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5DnsDefault.Equal(that1.F5DnsDefault) {
		return false
	}
	return true
}
func (this *DNSNTPServerConfig_CustomDns) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSNTPServerConfig_CustomDns)
	if !ok {
		that2, ok := that.(DNSNTPServerConfig_CustomDns)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomDns.Equal(that1.CustomDns) {
		return false
	}
	return true
}
func (this *DNSNTPServerConfig_F5NtpDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSNTPServerConfig_F5NtpDefault)
	if !ok {
		that2, ok := that.(DNSNTPServerConfig_F5NtpDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5NtpDefault.Equal(that1.F5NtpDefault) {
		return false
	}
	return true
}
func (this *DNSNTPServerConfig_CustomNtp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSNTPServerConfig_CustomNtp)
	if !ok {
		that2, ok := that.(DNSNTPServerConfig_CustomNtp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomNtp.Equal(that1.CustomNtp) {
		return false
	}
	return true
}
func (this *CustomDNSSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomDNSSettings)
	if !ok {
		that2, ok := that.(CustomDNSSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DnsServers) != len(that1.DnsServers) {
		return false
	}
	for i := range this.DnsServers {
		if this.DnsServers[i] != that1.DnsServers[i] {
			return false
		}
	}
	return true
}
func (this *CustomNTPSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomNTPSettings)
	if !ok {
		that2, ok := that.(CustomNTPSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NtpServers) != len(that1.NtpServers) {
		return false
	}
	for i := range this.NtpServers {
		if this.NtpServers[i] != that1.NtpServers[i] {
			return false
		}
	}
	return true
}
func (this *CustomProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomProxy)
	if !ok {
		that2, ok := that.(CustomProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProxyIpAddress != that1.ProxyIpAddress {
		return false
	}
	if this.ProxyPort != that1.ProxyPort {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if !this.Password.Equal(that1.Password) {
		return false
	}
	if that1.UseForReTunnelChoice == nil {
		if this.UseForReTunnelChoice != nil {
			return false
		}
	} else if this.UseForReTunnelChoice == nil {
		return false
	} else if !this.UseForReTunnelChoice.Equal(that1.UseForReTunnelChoice) {
		return false
	}
	return true
}
func (this *CustomProxy_DisableReTunnel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomProxy_DisableReTunnel)
	if !ok {
		that2, ok := that.(CustomProxy_DisableReTunnel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableReTunnel.Equal(that1.DisableReTunnel) {
		return false
	}
	return true
}
func (this *CustomProxy_EnableReTunnel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomProxy_EnableReTunnel)
	if !ok {
		that2, ok := that.(CustomProxy_EnableReTunnel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableReTunnel.Equal(that1.EnableReTunnel) {
		return false
	}
	return true
}
func (this *LoadBalancingSettingsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoadBalancingSettingsType)
	if !ok {
		that2, ok := that.(LoadBalancingSettingsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VipVrrpMode != that1.VipVrrpMode {
		return false
	}
	return true
}
func (this *SoftwareSettingsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SoftwareSettingsType)
	if !ok {
		that2, ok := that.(SoftwareSettingsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sw.Equal(that1.Sw) {
		return false
	}
	if !this.Os.Equal(that1.Os) {
		return false
	}
	return true
}
func (this *UpgradeSettingsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpgradeSettingsType)
	if !ok {
		that2, ok := that.(UpgradeSettingsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.KubernetesUpgradeDrain.Equal(that1.KubernetesUpgradeDrain) {
		return false
	}
	return true
}
func (this *Node) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Node)
	if !ok {
		that2, ok := that.(Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Hostname != that1.Hostname {
		return false
	}
	if this.PublicIp != that1.PublicIp {
		return false
	}
	if len(this.InterfaceList) != len(that1.InterfaceList) {
		return false
	}
	for i := range this.InterfaceList {
		if !this.InterfaceList[i].Equal(that1.InterfaceList[i]) {
			return false
		}
	}
	return true
}
func (this *SiteMeshGroupType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteMeshGroupType)
	if !ok {
		that2, ok := that.(SiteMeshGroupType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SiteMeshGroupIpChoice == nil {
		if this.SiteMeshGroupIpChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupIpChoice == nil {
		return false
	} else if !this.SiteMeshGroupIpChoice.Equal(that1.SiteMeshGroupIpChoice) {
		return false
	}
	if that1.SiteMeshGroupChoice == nil {
		if this.SiteMeshGroupChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupChoice == nil {
		return false
	} else if !this.SiteMeshGroupChoice.Equal(that1.SiteMeshGroupChoice) {
		return false
	}
	return true
}
func (this *SiteMeshGroupType_SmConnectionPublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteMeshGroupType_SmConnectionPublicIp)
	if !ok {
		that2, ok := that.(SiteMeshGroupType_SmConnectionPublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPublicIp.Equal(that1.SmConnectionPublicIp) {
		return false
	}
	return true
}
func (this *SiteMeshGroupType_SmConnectionPvtIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteMeshGroupType_SmConnectionPvtIp)
	if !ok {
		that2, ok := that.(SiteMeshGroupType_SmConnectionPvtIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPvtIp.Equal(that1.SmConnectionPvtIp) {
		return false
	}
	return true
}
func (this *SiteMeshGroupType_NoSiteMeshGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteMeshGroupType_NoSiteMeshGroup)
	if !ok {
		that2, ok := that.(SiteMeshGroupType_NoSiteMeshGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoSiteMeshGroup.Equal(that1.NoSiteMeshGroup) {
		return false
	}
	return true
}
func (this *SiteMeshGroupType_SiteMeshGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteMeshGroupType_SiteMeshGroup)
	if !ok {
		that2, ok := that.(SiteMeshGroupType_SiteMeshGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteMeshGroup.Equal(that1.SiteMeshGroup) {
		return false
	}
	return true
}
func (this *VMwareProviderType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VMwareProviderType)
	if !ok {
		that2, ok := that.(VMwareProviderType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.OrchestrationChoice == nil {
		if this.OrchestrationChoice != nil {
			return false
		}
	} else if this.OrchestrationChoice == nil {
		return false
	} else if !this.OrchestrationChoice.Equal(that1.OrchestrationChoice) {
		return false
	}
	return true
}
func (this *VMwareProviderType_NotManaged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VMwareProviderType_NotManaged)
	if !ok {
		that2, ok := that.(VMwareProviderType_NotManaged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotManaged.Equal(that1.NotManaged) {
		return false
	}
	return true
}
func (this *KVMProviderType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KVMProviderType)
	if !ok {
		that2, ok := that.(KVMProviderType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.OrchestrationChoice == nil {
		if this.OrchestrationChoice != nil {
			return false
		}
	} else if this.OrchestrationChoice == nil {
		return false
	} else if !this.OrchestrationChoice.Equal(that1.OrchestrationChoice) {
		return false
	}
	return true
}
func (this *KVMProviderType_NotManaged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KVMProviderType_NotManaged)
	if !ok {
		that2, ok := that.(KVMProviderType_NotManaged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotManaged.Equal(that1.NotManaged) {
		return false
	}
	return true
}
func (this *AWSProviderType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSProviderType)
	if !ok {
		that2, ok := that.(AWSProviderType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.OrchestrationChoice == nil {
		if this.OrchestrationChoice != nil {
			return false
		}
	} else if this.OrchestrationChoice == nil {
		return false
	} else if !this.OrchestrationChoice.Equal(that1.OrchestrationChoice) {
		return false
	}
	return true
}
func (this *AWSProviderType_NotManaged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSProviderType_NotManaged)
	if !ok {
		that2, ok := that.(AWSProviderType_NotManaged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotManaged.Equal(that1.NotManaged) {
		return false
	}
	return true
}
func (this *AWSProviderType_Managed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSProviderType_Managed)
	if !ok {
		that2, ok := that.(AWSProviderType_Managed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Managed.Equal(that1.Managed) {
		return false
	}
	return true
}
func (this *AzureProviderType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureProviderType)
	if !ok {
		that2, ok := that.(AzureProviderType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.OrchestrationChoice == nil {
		if this.OrchestrationChoice != nil {
			return false
		}
	} else if this.OrchestrationChoice == nil {
		return false
	} else if !this.OrchestrationChoice.Equal(that1.OrchestrationChoice) {
		return false
	}
	return true
}
func (this *AzureProviderType_NotManaged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AzureProviderType_NotManaged)
	if !ok {
		that2, ok := that.(AzureProviderType_NotManaged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotManaged.Equal(that1.NotManaged) {
		return false
	}
	return true
}
func (this *GCPProviderType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GCPProviderType)
	if !ok {
		that2, ok := that.(GCPProviderType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.OrchestrationChoice == nil {
		if this.OrchestrationChoice != nil {
			return false
		}
	} else if this.OrchestrationChoice == nil {
		return false
	} else if !this.OrchestrationChoice.Equal(that1.OrchestrationChoice) {
		return false
	}
	return true
}
func (this *GCPProviderType_NotManaged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GCPProviderType_NotManaged)
	if !ok {
		that2, ok := that.(GCPProviderType_NotManaged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotManaged.Equal(that1.NotManaged) {
		return false
	}
	return true
}
func (this *BaremetalProviderType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BaremetalProviderType)
	if !ok {
		that2, ok := that.(BaremetalProviderType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.OrchestrationChoice == nil {
		if this.OrchestrationChoice != nil {
			return false
		}
	} else if this.OrchestrationChoice == nil {
		return false
	} else if !this.OrchestrationChoice.Equal(that1.OrchestrationChoice) {
		return false
	}
	return true
}
func (this *BaremetalProviderType_NotManaged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BaremetalProviderType_NotManaged)
	if !ok {
		that2, ok := that.(BaremetalProviderType_NotManaged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotManaged.Equal(that1.NotManaged) {
		return false
	}
	return true
}
func (this *OCIProviderType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OCIProviderType)
	if !ok {
		that2, ok := that.(OCIProviderType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.OrchestrationChoice == nil {
		if this.OrchestrationChoice != nil {
			return false
		}
	} else if this.OrchestrationChoice == nil {
		return false
	} else if !this.OrchestrationChoice.Equal(that1.OrchestrationChoice) {
		return false
	}
	return true
}
func (this *OCIProviderType_NotManaged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OCIProviderType_NotManaged)
	if !ok {
		that2, ok := that.(OCIProviderType_NotManaged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotManaged.Equal(that1.NotManaged) {
		return false
	}
	return true
}
func (this *RSeriesProviderType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RSeriesProviderType)
	if !ok {
		that2, ok := that.(RSeriesProviderType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.OrchestrationChoice == nil {
		if this.OrchestrationChoice != nil {
			return false
		}
	} else if this.OrchestrationChoice == nil {
		return false
	} else if !this.OrchestrationChoice.Equal(that1.OrchestrationChoice) {
		return false
	}
	return true
}
func (this *RSeriesProviderType_NotManaged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RSeriesProviderType_NotManaged)
	if !ok {
		that2, ok := that.(RSeriesProviderType_NotManaged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotManaged.Equal(that1.NotManaged) {
		return false
	}
	return true
}
func (this *OpenstackProviderType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenstackProviderType)
	if !ok {
		that2, ok := that.(OpenstackProviderType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.OrchestrationChoice == nil {
		if this.OrchestrationChoice != nil {
			return false
		}
	} else if this.OrchestrationChoice == nil {
		return false
	} else if !this.OrchestrationChoice.Equal(that1.OrchestrationChoice) {
		return false
	}
	return true
}
func (this *OpenstackProviderType_NotManaged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenstackProviderType_NotManaged)
	if !ok {
		that2, ok := that.(OpenstackProviderType_NotManaged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotManaged.Equal(that1.NotManaged) {
		return false
	}
	return true
}
func (this *NutanixProviderType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NutanixProviderType)
	if !ok {
		that2, ok := that.(NutanixProviderType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.OrchestrationChoice == nil {
		if this.OrchestrationChoice != nil {
			return false
		}
	} else if this.OrchestrationChoice == nil {
		return false
	} else if !this.OrchestrationChoice.Equal(that1.OrchestrationChoice) {
		return false
	}
	return true
}
func (this *NutanixProviderType_NotManaged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NutanixProviderType_NotManaged)
	if !ok {
		that2, ok := that.(NutanixProviderType_NotManaged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotManaged.Equal(that1.NotManaged) {
		return false
	}
	return true
}
func (this *NodeList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeList)
	if !ok {
		that2, ok := that.(NodeList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NodeList) != len(that1.NodeList) {
		return false
	}
	for i := range this.NodeList {
		if !this.NodeList[i].Equal(that1.NodeList[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProviderChoice == nil {
		if this.ProviderChoice != nil {
			return false
		}
	} else if this.ProviderChoice == nil {
		return false
	} else if !this.ProviderChoice.Equal(that1.ProviderChoice) {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if !this.SoftwareSettings.Equal(that1.SoftwareSettings) {
		return false
	}
	if !this.UpgradeSettings.Equal(that1.UpgradeSettings) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if this.TunnelDeadTimeout != that1.TunnelDeadTimeout {
		return false
	}
	if !this.LoadBalancing.Equal(that1.LoadBalancing) {
		return false
	}
	if that1.S2SConnectivitySliChoice == nil {
		if this.S2SConnectivitySliChoice != nil {
			return false
		}
	} else if this.S2SConnectivitySliChoice == nil {
		return false
	} else if !this.S2SConnectivitySliChoice.Equal(that1.S2SConnectivitySliChoice) {
		return false
	}
	if that1.S2SConnectivitySloChoice == nil {
		if this.S2SConnectivitySloChoice != nil {
			return false
		}
	} else if this.S2SConnectivitySloChoice == nil {
		return false
	} else if !this.S2SConnectivitySloChoice.Equal(that1.S2SConnectivitySloChoice) {
		return false
	}
	if !this.LocalVrf.Equal(that1.LocalVrf) {
		return false
	}
	if this.TunnelType != that1.TunnelType {
		return false
	}
	if !this.ReSelect.Equal(that1.ReSelect) {
		return false
	}
	if that1.NodeHaChoice == nil {
		if this.NodeHaChoice != nil {
			return false
		}
	} else if this.NodeHaChoice == nil {
		return false
	} else if !this.NodeHaChoice.Equal(that1.NodeHaChoice) {
		return false
	}
	if !this.AdminUserCredentials.Equal(that1.AdminUserCredentials) {
		return false
	}
	if !this.ProactiveMonitoring.Equal(that1.ProactiveMonitoring) {
		return false
	}
	if that1.EnterpriseProxyChoice == nil {
		if this.EnterpriseProxyChoice != nil {
			return false
		}
	} else if this.EnterpriseProxyChoice == nil {
		return false
	} else if !this.EnterpriseProxyChoice.Equal(that1.EnterpriseProxyChoice) {
		return false
	}
	if !this.DnsNtpConfig.Equal(that1.DnsNtpConfig) {
		return false
	}
	return true
}
func (this *CreateSpecType_Vmware) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Vmware)
	if !ok {
		that2, ok := that.(CreateSpecType_Vmware)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vmware.Equal(that1.Vmware) {
		return false
	}
	return true
}
func (this *CreateSpecType_Kvm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Kvm)
	if !ok {
		that2, ok := that.(CreateSpecType_Kvm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Kvm.Equal(that1.Kvm) {
		return false
	}
	return true
}
func (this *CreateSpecType_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Aws)
	if !ok {
		that2, ok := that.(CreateSpecType_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *CreateSpecType_Azure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Azure)
	if !ok {
		that2, ok := that.(CreateSpecType_Azure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Azure.Equal(that1.Azure) {
		return false
	}
	return true
}
func (this *CreateSpecType_Gcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Gcp)
	if !ok {
		that2, ok := that.(CreateSpecType_Gcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gcp.Equal(that1.Gcp) {
		return false
	}
	return true
}
func (this *CreateSpecType_Rseries) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Rseries)
	if !ok {
		that2, ok := that.(CreateSpecType_Rseries)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rseries.Equal(that1.Rseries) {
		return false
	}
	return true
}
func (this *CreateSpecType_Baremetal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Baremetal)
	if !ok {
		that2, ok := that.(CreateSpecType_Baremetal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Baremetal.Equal(that1.Baremetal) {
		return false
	}
	return true
}
func (this *CreateSpecType_Oci) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Oci)
	if !ok {
		that2, ok := that.(CreateSpecType_Oci)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Oci.Equal(that1.Oci) {
		return false
	}
	return true
}
func (this *CreateSpecType_Openstack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Openstack)
	if !ok {
		that2, ok := that.(CreateSpecType_Openstack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Openstack.Equal(that1.Openstack) {
		return false
	}
	return true
}
func (this *CreateSpecType_Nutanix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Nutanix)
	if !ok {
		that2, ok := that.(CreateSpecType_Nutanix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Nutanix.Equal(that1.Nutanix) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(CreateSpecType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *CreateSpecType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(CreateSpecType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoForwardProxy)
	if !ok {
		that2, ok := that.(CreateSpecType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *CreateSpecType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(CreateSpecType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(CreateSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(CreateSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *CreateSpecType_BlockAllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BlockAllServices)
	if !ok {
		that2, ok := that.(CreateSpecType_BlockAllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockAllServices.Equal(that1.BlockAllServices) {
		return false
	}
	return true
}
func (this *CreateSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(CreateSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoS2SConnectivitySli) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoS2SConnectivitySli)
	if !ok {
		that2, ok := that.(CreateSpecType_NoS2SConnectivitySli)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoS2SConnectivitySli.Equal(that1.NoS2SConnectivitySli) {
		return false
	}
	return true
}
func (this *CreateSpecType_DcClusterGroupSli) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DcClusterGroupSli)
	if !ok {
		that2, ok := that.(CreateSpecType_DcClusterGroupSli)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupSli.Equal(that1.DcClusterGroupSli) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoS2SConnectivitySlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoS2SConnectivitySlo)
	if !ok {
		that2, ok := that.(CreateSpecType_NoS2SConnectivitySlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoS2SConnectivitySlo.Equal(that1.NoS2SConnectivitySlo) {
		return false
	}
	return true
}
func (this *CreateSpecType_SiteMeshGroupOnSlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SiteMeshGroupOnSlo)
	if !ok {
		that2, ok := that.(CreateSpecType_SiteMeshGroupOnSlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteMeshGroupOnSlo.Equal(that1.SiteMeshGroupOnSlo) {
		return false
	}
	return true
}
func (this *CreateSpecType_DcClusterGroupSlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DcClusterGroupSlo)
	if !ok {
		that2, ok := that.(CreateSpecType_DcClusterGroupSlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupSlo.Equal(that1.DcClusterGroupSlo) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableHa) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableHa)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableHa)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHa.Equal(that1.DisableHa) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableHa) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableHa)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableHa)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableHa.Equal(that1.EnableHa) {
		return false
	}
	return true
}
func (this *CreateSpecType_F5Proxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_F5Proxy)
	if !ok {
		that2, ok := that.(CreateSpecType_F5Proxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5Proxy.Equal(that1.F5Proxy) {
		return false
	}
	return true
}
func (this *CreateSpecType_CustomProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CustomProxy)
	if !ok {
		that2, ok := that.(CreateSpecType_CustomProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomProxy.Equal(that1.CustomProxy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProviderChoice == nil {
		if this.ProviderChoice != nil {
			return false
		}
	} else if this.ProviderChoice == nil {
		return false
	} else if !this.ProviderChoice.Equal(that1.ProviderChoice) {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if !this.SoftwareSettings.Equal(that1.SoftwareSettings) {
		return false
	}
	if !this.UpgradeSettings.Equal(that1.UpgradeSettings) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if this.TunnelDeadTimeout != that1.TunnelDeadTimeout {
		return false
	}
	if !this.LoadBalancing.Equal(that1.LoadBalancing) {
		return false
	}
	if that1.S2SConnectivitySliChoice == nil {
		if this.S2SConnectivitySliChoice != nil {
			return false
		}
	} else if this.S2SConnectivitySliChoice == nil {
		return false
	} else if !this.S2SConnectivitySliChoice.Equal(that1.S2SConnectivitySliChoice) {
		return false
	}
	if that1.S2SConnectivitySloChoice == nil {
		if this.S2SConnectivitySloChoice != nil {
			return false
		}
	} else if this.S2SConnectivitySloChoice == nil {
		return false
	} else if !this.S2SConnectivitySloChoice.Equal(that1.S2SConnectivitySloChoice) {
		return false
	}
	if !this.LocalVrf.Equal(that1.LocalVrf) {
		return false
	}
	if this.TunnelType != that1.TunnelType {
		return false
	}
	if !this.ReSelect.Equal(that1.ReSelect) {
		return false
	}
	if that1.NodeHaChoice == nil {
		if this.NodeHaChoice != nil {
			return false
		}
	} else if this.NodeHaChoice == nil {
		return false
	} else if !this.NodeHaChoice.Equal(that1.NodeHaChoice) {
		return false
	}
	if !this.AdminUserCredentials.Equal(that1.AdminUserCredentials) {
		return false
	}
	if !this.ProactiveMonitoring.Equal(that1.ProactiveMonitoring) {
		return false
	}
	if that1.EnterpriseProxyChoice == nil {
		if this.EnterpriseProxyChoice != nil {
			return false
		}
	} else if this.EnterpriseProxyChoice == nil {
		return false
	} else if !this.EnterpriseProxyChoice.Equal(that1.EnterpriseProxyChoice) {
		return false
	}
	if !this.DnsNtpConfig.Equal(that1.DnsNtpConfig) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Vmware) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Vmware)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Vmware)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vmware.Equal(that1.Vmware) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Kvm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Kvm)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Kvm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Kvm.Equal(that1.Kvm) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Aws)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Azure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Azure)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Azure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Azure.Equal(that1.Azure) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Gcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Gcp)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Gcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gcp.Equal(that1.Gcp) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Rseries) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Rseries)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Rseries)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rseries.Equal(that1.Rseries) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Baremetal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Baremetal)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Baremetal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Baremetal.Equal(that1.Baremetal) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Oci) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Oci)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Oci)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Oci.Equal(that1.Oci) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Openstack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Openstack)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Openstack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Openstack.Equal(that1.Openstack) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Nutanix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Nutanix)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Nutanix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Nutanix.Equal(that1.Nutanix) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoForwardProxy)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BlockAllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BlockAllServices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BlockAllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockAllServices.Equal(that1.BlockAllServices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoS2SConnectivitySli) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoS2SConnectivitySli)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoS2SConnectivitySli)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoS2SConnectivitySli.Equal(that1.NoS2SConnectivitySli) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DcClusterGroupSli) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DcClusterGroupSli)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DcClusterGroupSli)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupSli.Equal(that1.DcClusterGroupSli) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoS2SConnectivitySlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoS2SConnectivitySlo)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoS2SConnectivitySlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoS2SConnectivitySlo.Equal(that1.NoS2SConnectivitySlo) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SiteMeshGroupOnSlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SiteMeshGroupOnSlo)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SiteMeshGroupOnSlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteMeshGroupOnSlo.Equal(that1.SiteMeshGroupOnSlo) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DcClusterGroupSlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DcClusterGroupSlo)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DcClusterGroupSlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupSlo.Equal(that1.DcClusterGroupSlo) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableHa) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableHa)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableHa)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHa.Equal(that1.DisableHa) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableHa) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableHa)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableHa)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableHa.Equal(that1.EnableHa) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_F5Proxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_F5Proxy)
	if !ok {
		that2, ok := that.(ReplaceSpecType_F5Proxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5Proxy.Equal(that1.F5Proxy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CustomProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CustomProxy)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CustomProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomProxy.Equal(that1.CustomProxy) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProviderChoice == nil {
		if this.ProviderChoice != nil {
			return false
		}
	} else if this.ProviderChoice == nil {
		return false
	} else if !this.ProviderChoice.Equal(that1.ProviderChoice) {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if !this.SoftwareSettings.Equal(that1.SoftwareSettings) {
		return false
	}
	if !this.UpgradeSettings.Equal(that1.UpgradeSettings) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if this.TunnelDeadTimeout != that1.TunnelDeadTimeout {
		return false
	}
	if !this.LoadBalancing.Equal(that1.LoadBalancing) {
		return false
	}
	if that1.S2SConnectivitySliChoice == nil {
		if this.S2SConnectivitySliChoice != nil {
			return false
		}
	} else if this.S2SConnectivitySliChoice == nil {
		return false
	} else if !this.S2SConnectivitySliChoice.Equal(that1.S2SConnectivitySliChoice) {
		return false
	}
	if that1.S2SConnectivitySloChoice == nil {
		if this.S2SConnectivitySloChoice != nil {
			return false
		}
	} else if this.S2SConnectivitySloChoice == nil {
		return false
	} else if !this.S2SConnectivitySloChoice.Equal(that1.S2SConnectivitySloChoice) {
		return false
	}
	if !this.LocalVrf.Equal(that1.LocalVrf) {
		return false
	}
	if this.TunnelType != that1.TunnelType {
		return false
	}
	if !this.ReSelect.Equal(that1.ReSelect) {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if that1.NodeHaChoice == nil {
		if this.NodeHaChoice != nil {
			return false
		}
	} else if this.NodeHaChoice == nil {
		return false
	} else if !this.NodeHaChoice.Equal(that1.NodeHaChoice) {
		return false
	}
	if this.SiteState != that1.SiteState {
		return false
	}
	if !this.AdminUserCredentials.Equal(that1.AdminUserCredentials) {
		return false
	}
	if !this.ProactiveMonitoring.Equal(that1.ProactiveMonitoring) {
		return false
	}
	if that1.EnterpriseProxyChoice == nil {
		if this.EnterpriseProxyChoice != nil {
			return false
		}
	} else if this.EnterpriseProxyChoice == nil {
		return false
	} else if !this.EnterpriseProxyChoice.Equal(that1.EnterpriseProxyChoice) {
		return false
	}
	if !this.DnsNtpConfig.Equal(that1.DnsNtpConfig) {
		return false
	}
	return true
}
func (this *GetSpecType_Vmware) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Vmware)
	if !ok {
		that2, ok := that.(GetSpecType_Vmware)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vmware.Equal(that1.Vmware) {
		return false
	}
	return true
}
func (this *GetSpecType_Kvm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Kvm)
	if !ok {
		that2, ok := that.(GetSpecType_Kvm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Kvm.Equal(that1.Kvm) {
		return false
	}
	return true
}
func (this *GetSpecType_Aws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Aws)
	if !ok {
		that2, ok := that.(GetSpecType_Aws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Aws.Equal(that1.Aws) {
		return false
	}
	return true
}
func (this *GetSpecType_Azure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Azure)
	if !ok {
		that2, ok := that.(GetSpecType_Azure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Azure.Equal(that1.Azure) {
		return false
	}
	return true
}
func (this *GetSpecType_Gcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Gcp)
	if !ok {
		that2, ok := that.(GetSpecType_Gcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gcp.Equal(that1.Gcp) {
		return false
	}
	return true
}
func (this *GetSpecType_Rseries) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Rseries)
	if !ok {
		that2, ok := that.(GetSpecType_Rseries)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rseries.Equal(that1.Rseries) {
		return false
	}
	return true
}
func (this *GetSpecType_Baremetal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Baremetal)
	if !ok {
		that2, ok := that.(GetSpecType_Baremetal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Baremetal.Equal(that1.Baremetal) {
		return false
	}
	return true
}
func (this *GetSpecType_Oci) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Oci)
	if !ok {
		that2, ok := that.(GetSpecType_Oci)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Oci.Equal(that1.Oci) {
		return false
	}
	return true
}
func (this *GetSpecType_Openstack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Openstack)
	if !ok {
		that2, ok := that.(GetSpecType_Openstack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Openstack.Equal(that1.Openstack) {
		return false
	}
	return true
}
func (this *GetSpecType_Nutanix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Nutanix)
	if !ok {
		that2, ok := that.(GetSpecType_Nutanix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Nutanix.Equal(that1.Nutanix) {
		return false
	}
	return true
}
func (this *GetSpecType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(GetSpecType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *GetSpecType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(GetSpecType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *GetSpecType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoForwardProxy)
	if !ok {
		that2, ok := that.(GetSpecType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *GetSpecType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(GetSpecType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *GetSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GetSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GetSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GetSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *GetSpecType_BlockAllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BlockAllServices)
	if !ok {
		that2, ok := that.(GetSpecType_BlockAllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockAllServices.Equal(that1.BlockAllServices) {
		return false
	}
	return true
}
func (this *GetSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(GetSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *GetSpecType_NoS2SConnectivitySli) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoS2SConnectivitySli)
	if !ok {
		that2, ok := that.(GetSpecType_NoS2SConnectivitySli)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoS2SConnectivitySli.Equal(that1.NoS2SConnectivitySli) {
		return false
	}
	return true
}
func (this *GetSpecType_DcClusterGroupSli) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DcClusterGroupSli)
	if !ok {
		that2, ok := that.(GetSpecType_DcClusterGroupSli)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupSli.Equal(that1.DcClusterGroupSli) {
		return false
	}
	return true
}
func (this *GetSpecType_NoS2SConnectivitySlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoS2SConnectivitySlo)
	if !ok {
		that2, ok := that.(GetSpecType_NoS2SConnectivitySlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoS2SConnectivitySlo.Equal(that1.NoS2SConnectivitySlo) {
		return false
	}
	return true
}
func (this *GetSpecType_SiteMeshGroupOnSlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SiteMeshGroupOnSlo)
	if !ok {
		that2, ok := that.(GetSpecType_SiteMeshGroupOnSlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteMeshGroupOnSlo.Equal(that1.SiteMeshGroupOnSlo) {
		return false
	}
	return true
}
func (this *GetSpecType_DcClusterGroupSlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DcClusterGroupSlo)
	if !ok {
		that2, ok := that.(GetSpecType_DcClusterGroupSlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupSlo.Equal(that1.DcClusterGroupSlo) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableHa) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableHa)
	if !ok {
		that2, ok := that.(GetSpecType_DisableHa)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHa.Equal(that1.DisableHa) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableHa) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableHa)
	if !ok {
		that2, ok := that.(GetSpecType_EnableHa)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableHa.Equal(that1.EnableHa) {
		return false
	}
	return true
}
func (this *GetSpecType_F5Proxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_F5Proxy)
	if !ok {
		that2, ok := that.(GetSpecType_F5Proxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5Proxy.Equal(that1.F5Proxy) {
		return false
	}
	return true
}
func (this *GetSpecType_CustomProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CustomProxy)
	if !ok {
		that2, ok := that.(GetSpecType_CustomProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomProxy.Equal(that1.CustomProxy) {
		return false
	}
	return true
}
func (this *Interface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface)
	if !ok {
		that2, ok := that.(Interface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if that1.InterfaceChoice == nil {
		if this.InterfaceChoice != nil {
			return false
		}
	} else if this.InterfaceChoice == nil {
		return false
	} else if !this.InterfaceChoice.Equal(that1.InterfaceChoice) {
		return false
	}
	if that1.AddressChoice == nil {
		if this.AddressChoice != nil {
			return false
		}
	} else if this.AddressChoice == nil {
		return false
	} else if !this.AddressChoice.Equal(that1.AddressChoice) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Mtu != that1.Mtu {
		return false
	}
	if !this.NetworkOption.Equal(that1.NetworkOption) {
		return false
	}
	if that1.MonitoringChoice == nil {
		if this.MonitoringChoice != nil {
			return false
		}
	} else if this.MonitoringChoice == nil {
		return false
	} else if !this.MonitoringChoice.Equal(that1.MonitoringChoice) {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if that1.SiteToSiteConnectivityInterfaceChoice == nil {
		if this.SiteToSiteConnectivityInterfaceChoice != nil {
			return false
		}
	} else if this.SiteToSiteConnectivityInterfaceChoice == nil {
		return false
	} else if !this.SiteToSiteConnectivityInterfaceChoice.Equal(that1.SiteToSiteConnectivityInterfaceChoice) {
		return false
	}
	if this.IsPrimary != that1.IsPrimary {
		return false
	}
	if this.IsManagement != that1.IsManagement {
		return false
	}
	if that1.Ipv6AddressChoice == nil {
		if this.Ipv6AddressChoice != nil {
			return false
		}
	} else if this.Ipv6AddressChoice == nil {
		return false
	} else if !this.Ipv6AddressChoice.Equal(that1.Ipv6AddressChoice) {
		return false
	}
	return true
}
func (this *Interface_EthernetInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_EthernetInterface)
	if !ok {
		that2, ok := that.(Interface_EthernetInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EthernetInterface.Equal(that1.EthernetInterface) {
		return false
	}
	return true
}
func (this *Interface_VlanInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_VlanInterface)
	if !ok {
		that2, ok := that.(Interface_VlanInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VlanInterface.Equal(that1.VlanInterface) {
		return false
	}
	return true
}
func (this *Interface_BondInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_BondInterface)
	if !ok {
		that2, ok := that.(Interface_BondInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BondInterface.Equal(that1.BondInterface) {
		return false
	}
	return true
}
func (this *Interface_DhcpClient) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_DhcpClient)
	if !ok {
		that2, ok := that.(Interface_DhcpClient)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DhcpClient.Equal(that1.DhcpClient) {
		return false
	}
	return true
}
func (this *Interface_StaticIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_StaticIp)
	if !ok {
		that2, ok := that.(Interface_StaticIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StaticIp.Equal(that1.StaticIp) {
		return false
	}
	return true
}
func (this *Interface_DhcpServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_DhcpServer)
	if !ok {
		that2, ok := that.(Interface_DhcpServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DhcpServer.Equal(that1.DhcpServer) {
		return false
	}
	return true
}
func (this *Interface_NoIpv4Address) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_NoIpv4Address)
	if !ok {
		that2, ok := that.(Interface_NoIpv4Address)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoIpv4Address.Equal(that1.NoIpv4Address) {
		return false
	}
	return true
}
func (this *Interface_MonitorDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_MonitorDisabled)
	if !ok {
		that2, ok := that.(Interface_MonitorDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MonitorDisabled.Equal(that1.MonitorDisabled) {
		return false
	}
	return true
}
func (this *Interface_Monitor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_Monitor)
	if !ok {
		that2, ok := that.(Interface_Monitor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Monitor.Equal(that1.Monitor) {
		return false
	}
	return true
}
func (this *Interface_SiteToSiteConnectivityInterfaceDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_SiteToSiteConnectivityInterfaceDisabled)
	if !ok {
		that2, ok := that.(Interface_SiteToSiteConnectivityInterfaceDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteToSiteConnectivityInterfaceDisabled.Equal(that1.SiteToSiteConnectivityInterfaceDisabled) {
		return false
	}
	return true
}
func (this *Interface_SiteToSiteConnectivityInterfaceEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_SiteToSiteConnectivityInterfaceEnabled)
	if !ok {
		that2, ok := that.(Interface_SiteToSiteConnectivityInterfaceEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SiteToSiteConnectivityInterfaceEnabled.Equal(that1.SiteToSiteConnectivityInterfaceEnabled) {
		return false
	}
	return true
}
func (this *Interface_NoIpv6Address) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_NoIpv6Address)
	if !ok {
		that2, ok := that.(Interface_NoIpv6Address)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoIpv6Address.Equal(that1.NoIpv6Address) {
		return false
	}
	return true
}
func (this *Interface_StaticIpv6Address) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_StaticIpv6Address)
	if !ok {
		that2, ok := that.(Interface_StaticIpv6Address)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StaticIpv6Address.Equal(that1.StaticIpv6Address) {
		return false
	}
	return true
}
func (this *Interface_Ipv6AutoConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_Ipv6AutoConfig)
	if !ok {
		that2, ok := that.(Interface_Ipv6AutoConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ipv6AutoConfig.Equal(that1.Ipv6AutoConfig) {
		return false
	}
	return true
}
func (this *EthernetInterfaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EthernetInterfaceType)
	if !ok {
		that2, ok := that.(EthernetInterfaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Device != that1.Device {
		return false
	}
	if this.Mac != that1.Mac {
		return false
	}
	return true
}
func (this *VlanInterfaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VlanInterfaceType)
	if !ok {
		that2, ok := that.(VlanInterfaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Device != that1.Device {
		return false
	}
	if this.VlanId != that1.VlanId {
		return false
	}
	return true
}
func (this *VirtualNetworkConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualNetworkConfiguration)
	if !ok {
		that2, ok := that.(VirtualNetworkConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if this.Vip != that1.Vip {
		return false
	}
	if this.VipV6 != that1.VipV6 {
		return false
	}
	if this.Nameserver != that1.Nameserver {
		return false
	}
	if this.NameserverV6 != that1.NameserverV6 {
		return false
	}
	if that1.StaticRouteChoice == nil {
		if this.StaticRouteChoice != nil {
			return false
		}
	} else if this.StaticRouteChoice == nil {
		return false
	} else if !this.StaticRouteChoice.Equal(that1.StaticRouteChoice) {
		return false
	}
	if that1.StaticV6RouteChoice == nil {
		if this.StaticV6RouteChoice != nil {
			return false
		}
	} else if this.StaticV6RouteChoice == nil {
		return false
	} else if !this.StaticV6RouteChoice.Equal(that1.StaticV6RouteChoice) {
		return false
	}
	return true
}
func (this *VirtualNetworkConfiguration_NoStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualNetworkConfiguration_NoStaticRoutes)
	if !ok {
		that2, ok := that.(VirtualNetworkConfiguration_NoStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoStaticRoutes.Equal(that1.NoStaticRoutes) {
		return false
	}
	return true
}
func (this *VirtualNetworkConfiguration_StaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualNetworkConfiguration_StaticRoutes)
	if !ok {
		that2, ok := that.(VirtualNetworkConfiguration_StaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StaticRoutes.Equal(that1.StaticRoutes) {
		return false
	}
	return true
}
func (this *VirtualNetworkConfiguration_NoV6StaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualNetworkConfiguration_NoV6StaticRoutes)
	if !ok {
		that2, ok := that.(VirtualNetworkConfiguration_NoV6StaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoV6StaticRoutes.Equal(that1.NoV6StaticRoutes) {
		return false
	}
	return true
}
func (this *VirtualNetworkConfiguration_StaticV6Routes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualNetworkConfiguration_StaticV6Routes)
	if !ok {
		that2, ok := that.(VirtualNetworkConfiguration_StaticV6Routes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StaticV6Routes.Equal(that1.StaticV6Routes) {
		return false
	}
	return true
}
func (this *StaticRoutesListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StaticRoutesListType)
	if !ok {
		that2, ok := that.(StaticRoutesListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StaticRoutes) != len(that1.StaticRoutes) {
		return false
	}
	for i := range this.StaticRoutes {
		if !this.StaticRoutes[i].Equal(that1.StaticRoutes[i]) {
			return false
		}
	}
	return true
}
func (this *LocalVRFSettingType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalVRFSettingType)
	if !ok {
		that2, ok := that.(LocalVRFSettingType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SloChoice == nil {
		if this.SloChoice != nil {
			return false
		}
	} else if this.SloChoice == nil {
		return false
	} else if !this.SloChoice.Equal(that1.SloChoice) {
		return false
	}
	if that1.SliChoice == nil {
		if this.SliChoice != nil {
			return false
		}
	} else if this.SliChoice == nil {
		return false
	} else if !this.SliChoice.Equal(that1.SliChoice) {
		return false
	}
	return true
}
func (this *LocalVRFSettingType_DefaultConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalVRFSettingType_DefaultConfig)
	if !ok {
		that2, ok := that.(LocalVRFSettingType_DefaultConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultConfig.Equal(that1.DefaultConfig) {
		return false
	}
	return true
}
func (this *LocalVRFSettingType_SloConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalVRFSettingType_SloConfig)
	if !ok {
		that2, ok := that.(LocalVRFSettingType_SloConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SloConfig.Equal(that1.SloConfig) {
		return false
	}
	return true
}
func (this *LocalVRFSettingType_DefaultSliConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalVRFSettingType_DefaultSliConfig)
	if !ok {
		that2, ok := that.(LocalVRFSettingType_DefaultSliConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSliConfig.Equal(that1.DefaultSliConfig) {
		return false
	}
	return true
}
func (this *LocalVRFSettingType_SliConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalVRFSettingType_SliConfig)
	if !ok {
		that2, ok := that.(LocalVRFSettingType_SliConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SliConfig.Equal(that1.SliConfig) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 49)
	s = append(s, "&securemesh_site_v2.GlobalSpecType{")
	if this.ProviderChoice != nil {
		s = append(s, "ProviderChoice: "+fmt.Sprintf("%#v", this.ProviderChoice)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.SoftwareSettings != nil {
		s = append(s, "SoftwareSettings: "+fmt.Sprintf("%#v", this.SoftwareSettings)+",\n")
	}
	if this.UpgradeSettings != nil {
		s = append(s, "UpgradeSettings: "+fmt.Sprintf("%#v", this.UpgradeSettings)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	s = append(s, "TunnelDeadTimeout: "+fmt.Sprintf("%#v", this.TunnelDeadTimeout)+",\n")
	if this.LoadBalancing != nil {
		s = append(s, "LoadBalancing: "+fmt.Sprintf("%#v", this.LoadBalancing)+",\n")
	}
	if this.S2SConnectivitySliChoice != nil {
		s = append(s, "S2SConnectivitySliChoice: "+fmt.Sprintf("%#v", this.S2SConnectivitySliChoice)+",\n")
	}
	if this.S2SConnectivitySloChoice != nil {
		s = append(s, "S2SConnectivitySloChoice: "+fmt.Sprintf("%#v", this.S2SConnectivitySloChoice)+",\n")
	}
	if this.LocalVrf != nil {
		s = append(s, "LocalVrf: "+fmt.Sprintf("%#v", this.LocalVrf)+",\n")
	}
	s = append(s, "TunnelType: "+fmt.Sprintf("%#v", this.TunnelType)+",\n")
	if this.ReSelect != nil {
		s = append(s, "ReSelect: "+fmt.Sprintf("%#v", this.ReSelect)+",\n")
	}
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	if this.NodeHaChoice != nil {
		s = append(s, "NodeHaChoice: "+fmt.Sprintf("%#v", this.NodeHaChoice)+",\n")
	}
	s = append(s, "SiteState: "+fmt.Sprintf("%#v", this.SiteState)+",\n")
	if this.AdminUserCredentials != nil {
		s = append(s, "AdminUserCredentials: "+fmt.Sprintf("%#v", this.AdminUserCredentials)+",\n")
	}
	if this.ProactiveMonitoring != nil {
		s = append(s, "ProactiveMonitoring: "+fmt.Sprintf("%#v", this.ProactiveMonitoring)+",\n")
	}
	if this.EnterpriseProxyChoice != nil {
		s = append(s, "EnterpriseProxyChoice: "+fmt.Sprintf("%#v", this.EnterpriseProxyChoice)+",\n")
	}
	if this.DnsNtpConfig != nil {
		s = append(s, "DnsNtpConfig: "+fmt.Sprintf("%#v", this.DnsNtpConfig)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Vmware) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_Vmware{` +
		`Vmware:` + fmt.Sprintf("%#v", this.Vmware) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Kvm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_Kvm{` +
		`Kvm:` + fmt.Sprintf("%#v", this.Kvm) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Aws) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_Aws{` +
		`Aws:` + fmt.Sprintf("%#v", this.Aws) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Azure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_Azure{` +
		`Azure:` + fmt.Sprintf("%#v", this.Azure) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Gcp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_Gcp{` +
		`Gcp:` + fmt.Sprintf("%#v", this.Gcp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Rseries) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_Rseries{` +
		`Rseries:` + fmt.Sprintf("%#v", this.Rseries) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Baremetal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_Baremetal{` +
		`Baremetal:` + fmt.Sprintf("%#v", this.Baremetal) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Oci) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_Oci{` +
		`Oci:` + fmt.Sprintf("%#v", this.Oci) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Openstack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_Openstack{` +
		`Openstack:` + fmt.Sprintf("%#v", this.Openstack) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Nutanix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_Nutanix{` +
		`Nutanix:` + fmt.Sprintf("%#v", this.Nutanix) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BlockAllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_BlockAllServices{` +
		`BlockAllServices:` + fmt.Sprintf("%#v", this.BlockAllServices) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoS2SConnectivitySli) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_NoS2SConnectivitySli{` +
		`NoS2SConnectivitySli:` + fmt.Sprintf("%#v", this.NoS2SConnectivitySli) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DcClusterGroupSli) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_DcClusterGroupSli{` +
		`DcClusterGroupSli:` + fmt.Sprintf("%#v", this.DcClusterGroupSli) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoS2SConnectivitySlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_NoS2SConnectivitySlo{` +
		`NoS2SConnectivitySlo:` + fmt.Sprintf("%#v", this.NoS2SConnectivitySlo) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SiteMeshGroupOnSlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_SiteMeshGroupOnSlo{` +
		`SiteMeshGroupOnSlo:` + fmt.Sprintf("%#v", this.SiteMeshGroupOnSlo) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DcClusterGroupSlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_DcClusterGroupSlo{` +
		`DcClusterGroupSlo:` + fmt.Sprintf("%#v", this.DcClusterGroupSlo) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableHa) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_DisableHa{` +
		`DisableHa:` + fmt.Sprintf("%#v", this.DisableHa) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableHa) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_EnableHa{` +
		`EnableHa:` + fmt.Sprintf("%#v", this.EnableHa) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_F5Proxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_F5Proxy{` +
		`F5Proxy:` + fmt.Sprintf("%#v", this.F5Proxy) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CustomProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GlobalSpecType_CustomProxy{` +
		`CustomProxy:` + fmt.Sprintf("%#v", this.CustomProxy) + `}`}, ", ")
	return s
}
func (this *DNSNTPServerConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&securemesh_site_v2.DNSNTPServerConfig{")
	if this.DnsServerChoice != nil {
		s = append(s, "DnsServerChoice: "+fmt.Sprintf("%#v", this.DnsServerChoice)+",\n")
	}
	if this.NtpServerChoice != nil {
		s = append(s, "NtpServerChoice: "+fmt.Sprintf("%#v", this.NtpServerChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSNTPServerConfig_F5DnsDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.DNSNTPServerConfig_F5DnsDefault{` +
		`F5DnsDefault:` + fmt.Sprintf("%#v", this.F5DnsDefault) + `}`}, ", ")
	return s
}
func (this *DNSNTPServerConfig_CustomDns) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.DNSNTPServerConfig_CustomDns{` +
		`CustomDns:` + fmt.Sprintf("%#v", this.CustomDns) + `}`}, ", ")
	return s
}
func (this *DNSNTPServerConfig_F5NtpDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.DNSNTPServerConfig_F5NtpDefault{` +
		`F5NtpDefault:` + fmt.Sprintf("%#v", this.F5NtpDefault) + `}`}, ", ")
	return s
}
func (this *DNSNTPServerConfig_CustomNtp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.DNSNTPServerConfig_CustomNtp{` +
		`CustomNtp:` + fmt.Sprintf("%#v", this.CustomNtp) + `}`}, ", ")
	return s
}
func (this *CustomDNSSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site_v2.CustomDNSSettings{")
	s = append(s, "DnsServers: "+fmt.Sprintf("%#v", this.DnsServers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomNTPSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site_v2.CustomNTPSettings{")
	s = append(s, "NtpServers: "+fmt.Sprintf("%#v", this.NtpServers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&securemesh_site_v2.CustomProxy{")
	s = append(s, "ProxyIpAddress: "+fmt.Sprintf("%#v", this.ProxyIpAddress)+",\n")
	s = append(s, "ProxyPort: "+fmt.Sprintf("%#v", this.ProxyPort)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	if this.Password != nil {
		s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	}
	if this.UseForReTunnelChoice != nil {
		s = append(s, "UseForReTunnelChoice: "+fmt.Sprintf("%#v", this.UseForReTunnelChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomProxy_DisableReTunnel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CustomProxy_DisableReTunnel{` +
		`DisableReTunnel:` + fmt.Sprintf("%#v", this.DisableReTunnel) + `}`}, ", ")
	return s
}
func (this *CustomProxy_EnableReTunnel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CustomProxy_EnableReTunnel{` +
		`EnableReTunnel:` + fmt.Sprintf("%#v", this.EnableReTunnel) + `}`}, ", ")
	return s
}
func (this *LoadBalancingSettingsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site_v2.LoadBalancingSettingsType{")
	s = append(s, "VipVrrpMode: "+fmt.Sprintf("%#v", this.VipVrrpMode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SoftwareSettingsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&securemesh_site_v2.SoftwareSettingsType{")
	if this.Sw != nil {
		s = append(s, "Sw: "+fmt.Sprintf("%#v", this.Sw)+",\n")
	}
	if this.Os != nil {
		s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpgradeSettingsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site_v2.UpgradeSettingsType{")
	if this.KubernetesUpgradeDrain != nil {
		s = append(s, "KubernetesUpgradeDrain: "+fmt.Sprintf("%#v", this.KubernetesUpgradeDrain)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Node) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&securemesh_site_v2.Node{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Hostname: "+fmt.Sprintf("%#v", this.Hostname)+",\n")
	s = append(s, "PublicIp: "+fmt.Sprintf("%#v", this.PublicIp)+",\n")
	if this.InterfaceList != nil {
		s = append(s, "InterfaceList: "+fmt.Sprintf("%#v", this.InterfaceList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SiteMeshGroupType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&securemesh_site_v2.SiteMeshGroupType{")
	if this.SiteMeshGroupIpChoice != nil {
		s = append(s, "SiteMeshGroupIpChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupIpChoice)+",\n")
	}
	if this.SiteMeshGroupChoice != nil {
		s = append(s, "SiteMeshGroupChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SiteMeshGroupType_SmConnectionPublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.SiteMeshGroupType_SmConnectionPublicIp{` +
		`SmConnectionPublicIp:` + fmt.Sprintf("%#v", this.SmConnectionPublicIp) + `}`}, ", ")
	return s
}
func (this *SiteMeshGroupType_SmConnectionPvtIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.SiteMeshGroupType_SmConnectionPvtIp{` +
		`SmConnectionPvtIp:` + fmt.Sprintf("%#v", this.SmConnectionPvtIp) + `}`}, ", ")
	return s
}
func (this *SiteMeshGroupType_NoSiteMeshGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.SiteMeshGroupType_NoSiteMeshGroup{` +
		`NoSiteMeshGroup:` + fmt.Sprintf("%#v", this.NoSiteMeshGroup) + `}`}, ", ")
	return s
}
func (this *SiteMeshGroupType_SiteMeshGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.SiteMeshGroupType_SiteMeshGroup{` +
		`SiteMeshGroup:` + fmt.Sprintf("%#v", this.SiteMeshGroup) + `}`}, ", ")
	return s
}
func (this *VMwareProviderType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site_v2.VMwareProviderType{")
	if this.OrchestrationChoice != nil {
		s = append(s, "OrchestrationChoice: "+fmt.Sprintf("%#v", this.OrchestrationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VMwareProviderType_NotManaged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.VMwareProviderType_NotManaged{` +
		`NotManaged:` + fmt.Sprintf("%#v", this.NotManaged) + `}`}, ", ")
	return s
}
func (this *KVMProviderType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site_v2.KVMProviderType{")
	if this.OrchestrationChoice != nil {
		s = append(s, "OrchestrationChoice: "+fmt.Sprintf("%#v", this.OrchestrationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KVMProviderType_NotManaged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.KVMProviderType_NotManaged{` +
		`NotManaged:` + fmt.Sprintf("%#v", this.NotManaged) + `}`}, ", ")
	return s
}
func (this *AWSProviderType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&securemesh_site_v2.AWSProviderType{")
	if this.OrchestrationChoice != nil {
		s = append(s, "OrchestrationChoice: "+fmt.Sprintf("%#v", this.OrchestrationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSProviderType_NotManaged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.AWSProviderType_NotManaged{` +
		`NotManaged:` + fmt.Sprintf("%#v", this.NotManaged) + `}`}, ", ")
	return s
}
func (this *AWSProviderType_Managed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.AWSProviderType_Managed{` +
		`Managed:` + fmt.Sprintf("%#v", this.Managed) + `}`}, ", ")
	return s
}
func (this *AzureProviderType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site_v2.AzureProviderType{")
	if this.OrchestrationChoice != nil {
		s = append(s, "OrchestrationChoice: "+fmt.Sprintf("%#v", this.OrchestrationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AzureProviderType_NotManaged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.AzureProviderType_NotManaged{` +
		`NotManaged:` + fmt.Sprintf("%#v", this.NotManaged) + `}`}, ", ")
	return s
}
func (this *GCPProviderType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site_v2.GCPProviderType{")
	if this.OrchestrationChoice != nil {
		s = append(s, "OrchestrationChoice: "+fmt.Sprintf("%#v", this.OrchestrationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GCPProviderType_NotManaged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GCPProviderType_NotManaged{` +
		`NotManaged:` + fmt.Sprintf("%#v", this.NotManaged) + `}`}, ", ")
	return s
}
func (this *BaremetalProviderType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site_v2.BaremetalProviderType{")
	if this.OrchestrationChoice != nil {
		s = append(s, "OrchestrationChoice: "+fmt.Sprintf("%#v", this.OrchestrationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BaremetalProviderType_NotManaged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.BaremetalProviderType_NotManaged{` +
		`NotManaged:` + fmt.Sprintf("%#v", this.NotManaged) + `}`}, ", ")
	return s
}
func (this *OCIProviderType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site_v2.OCIProviderType{")
	if this.OrchestrationChoice != nil {
		s = append(s, "OrchestrationChoice: "+fmt.Sprintf("%#v", this.OrchestrationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OCIProviderType_NotManaged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.OCIProviderType_NotManaged{` +
		`NotManaged:` + fmt.Sprintf("%#v", this.NotManaged) + `}`}, ", ")
	return s
}
func (this *RSeriesProviderType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site_v2.RSeriesProviderType{")
	if this.OrchestrationChoice != nil {
		s = append(s, "OrchestrationChoice: "+fmt.Sprintf("%#v", this.OrchestrationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RSeriesProviderType_NotManaged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.RSeriesProviderType_NotManaged{` +
		`NotManaged:` + fmt.Sprintf("%#v", this.NotManaged) + `}`}, ", ")
	return s
}
func (this *OpenstackProviderType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site_v2.OpenstackProviderType{")
	if this.OrchestrationChoice != nil {
		s = append(s, "OrchestrationChoice: "+fmt.Sprintf("%#v", this.OrchestrationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenstackProviderType_NotManaged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.OpenstackProviderType_NotManaged{` +
		`NotManaged:` + fmt.Sprintf("%#v", this.NotManaged) + `}`}, ", ")
	return s
}
func (this *NutanixProviderType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site_v2.NutanixProviderType{")
	if this.OrchestrationChoice != nil {
		s = append(s, "OrchestrationChoice: "+fmt.Sprintf("%#v", this.OrchestrationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NutanixProviderType_NotManaged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.NutanixProviderType_NotManaged{` +
		`NotManaged:` + fmt.Sprintf("%#v", this.NotManaged) + `}`}, ", ")
	return s
}
func (this *NodeList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site_v2.NodeList{")
	if this.NodeList != nil {
		s = append(s, "NodeList: "+fmt.Sprintf("%#v", this.NodeList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 43)
	s = append(s, "&securemesh_site_v2.CreateSpecType{")
	if this.ProviderChoice != nil {
		s = append(s, "ProviderChoice: "+fmt.Sprintf("%#v", this.ProviderChoice)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.SoftwareSettings != nil {
		s = append(s, "SoftwareSettings: "+fmt.Sprintf("%#v", this.SoftwareSettings)+",\n")
	}
	if this.UpgradeSettings != nil {
		s = append(s, "UpgradeSettings: "+fmt.Sprintf("%#v", this.UpgradeSettings)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	s = append(s, "TunnelDeadTimeout: "+fmt.Sprintf("%#v", this.TunnelDeadTimeout)+",\n")
	if this.LoadBalancing != nil {
		s = append(s, "LoadBalancing: "+fmt.Sprintf("%#v", this.LoadBalancing)+",\n")
	}
	if this.S2SConnectivitySliChoice != nil {
		s = append(s, "S2SConnectivitySliChoice: "+fmt.Sprintf("%#v", this.S2SConnectivitySliChoice)+",\n")
	}
	if this.S2SConnectivitySloChoice != nil {
		s = append(s, "S2SConnectivitySloChoice: "+fmt.Sprintf("%#v", this.S2SConnectivitySloChoice)+",\n")
	}
	if this.LocalVrf != nil {
		s = append(s, "LocalVrf: "+fmt.Sprintf("%#v", this.LocalVrf)+",\n")
	}
	s = append(s, "TunnelType: "+fmt.Sprintf("%#v", this.TunnelType)+",\n")
	if this.ReSelect != nil {
		s = append(s, "ReSelect: "+fmt.Sprintf("%#v", this.ReSelect)+",\n")
	}
	if this.NodeHaChoice != nil {
		s = append(s, "NodeHaChoice: "+fmt.Sprintf("%#v", this.NodeHaChoice)+",\n")
	}
	if this.AdminUserCredentials != nil {
		s = append(s, "AdminUserCredentials: "+fmt.Sprintf("%#v", this.AdminUserCredentials)+",\n")
	}
	if this.ProactiveMonitoring != nil {
		s = append(s, "ProactiveMonitoring: "+fmt.Sprintf("%#v", this.ProactiveMonitoring)+",\n")
	}
	if this.EnterpriseProxyChoice != nil {
		s = append(s, "EnterpriseProxyChoice: "+fmt.Sprintf("%#v", this.EnterpriseProxyChoice)+",\n")
	}
	if this.DnsNtpConfig != nil {
		s = append(s, "DnsNtpConfig: "+fmt.Sprintf("%#v", this.DnsNtpConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Vmware) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_Vmware{` +
		`Vmware:` + fmt.Sprintf("%#v", this.Vmware) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Kvm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_Kvm{` +
		`Kvm:` + fmt.Sprintf("%#v", this.Kvm) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Aws) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_Aws{` +
		`Aws:` + fmt.Sprintf("%#v", this.Aws) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Azure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_Azure{` +
		`Azure:` + fmt.Sprintf("%#v", this.Azure) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Gcp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_Gcp{` +
		`Gcp:` + fmt.Sprintf("%#v", this.Gcp) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Rseries) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_Rseries{` +
		`Rseries:` + fmt.Sprintf("%#v", this.Rseries) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Baremetal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_Baremetal{` +
		`Baremetal:` + fmt.Sprintf("%#v", this.Baremetal) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Oci) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_Oci{` +
		`Oci:` + fmt.Sprintf("%#v", this.Oci) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Openstack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_Openstack{` +
		`Openstack:` + fmt.Sprintf("%#v", this.Openstack) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Nutanix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_Nutanix{` +
		`Nutanix:` + fmt.Sprintf("%#v", this.Nutanix) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BlockAllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_BlockAllServices{` +
		`BlockAllServices:` + fmt.Sprintf("%#v", this.BlockAllServices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoS2SConnectivitySli) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_NoS2SConnectivitySli{` +
		`NoS2SConnectivitySli:` + fmt.Sprintf("%#v", this.NoS2SConnectivitySli) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DcClusterGroupSli) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_DcClusterGroupSli{` +
		`DcClusterGroupSli:` + fmt.Sprintf("%#v", this.DcClusterGroupSli) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoS2SConnectivitySlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_NoS2SConnectivitySlo{` +
		`NoS2SConnectivitySlo:` + fmt.Sprintf("%#v", this.NoS2SConnectivitySlo) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SiteMeshGroupOnSlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_SiteMeshGroupOnSlo{` +
		`SiteMeshGroupOnSlo:` + fmt.Sprintf("%#v", this.SiteMeshGroupOnSlo) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DcClusterGroupSlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_DcClusterGroupSlo{` +
		`DcClusterGroupSlo:` + fmt.Sprintf("%#v", this.DcClusterGroupSlo) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableHa) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_DisableHa{` +
		`DisableHa:` + fmt.Sprintf("%#v", this.DisableHa) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableHa) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_EnableHa{` +
		`EnableHa:` + fmt.Sprintf("%#v", this.EnableHa) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_F5Proxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_F5Proxy{` +
		`F5Proxy:` + fmt.Sprintf("%#v", this.F5Proxy) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CustomProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.CreateSpecType_CustomProxy{` +
		`CustomProxy:` + fmt.Sprintf("%#v", this.CustomProxy) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 43)
	s = append(s, "&securemesh_site_v2.ReplaceSpecType{")
	if this.ProviderChoice != nil {
		s = append(s, "ProviderChoice: "+fmt.Sprintf("%#v", this.ProviderChoice)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.SoftwareSettings != nil {
		s = append(s, "SoftwareSettings: "+fmt.Sprintf("%#v", this.SoftwareSettings)+",\n")
	}
	if this.UpgradeSettings != nil {
		s = append(s, "UpgradeSettings: "+fmt.Sprintf("%#v", this.UpgradeSettings)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	s = append(s, "TunnelDeadTimeout: "+fmt.Sprintf("%#v", this.TunnelDeadTimeout)+",\n")
	if this.LoadBalancing != nil {
		s = append(s, "LoadBalancing: "+fmt.Sprintf("%#v", this.LoadBalancing)+",\n")
	}
	if this.S2SConnectivitySliChoice != nil {
		s = append(s, "S2SConnectivitySliChoice: "+fmt.Sprintf("%#v", this.S2SConnectivitySliChoice)+",\n")
	}
	if this.S2SConnectivitySloChoice != nil {
		s = append(s, "S2SConnectivitySloChoice: "+fmt.Sprintf("%#v", this.S2SConnectivitySloChoice)+",\n")
	}
	if this.LocalVrf != nil {
		s = append(s, "LocalVrf: "+fmt.Sprintf("%#v", this.LocalVrf)+",\n")
	}
	s = append(s, "TunnelType: "+fmt.Sprintf("%#v", this.TunnelType)+",\n")
	if this.ReSelect != nil {
		s = append(s, "ReSelect: "+fmt.Sprintf("%#v", this.ReSelect)+",\n")
	}
	if this.NodeHaChoice != nil {
		s = append(s, "NodeHaChoice: "+fmt.Sprintf("%#v", this.NodeHaChoice)+",\n")
	}
	if this.AdminUserCredentials != nil {
		s = append(s, "AdminUserCredentials: "+fmt.Sprintf("%#v", this.AdminUserCredentials)+",\n")
	}
	if this.ProactiveMonitoring != nil {
		s = append(s, "ProactiveMonitoring: "+fmt.Sprintf("%#v", this.ProactiveMonitoring)+",\n")
	}
	if this.EnterpriseProxyChoice != nil {
		s = append(s, "EnterpriseProxyChoice: "+fmt.Sprintf("%#v", this.EnterpriseProxyChoice)+",\n")
	}
	if this.DnsNtpConfig != nil {
		s = append(s, "DnsNtpConfig: "+fmt.Sprintf("%#v", this.DnsNtpConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Vmware) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_Vmware{` +
		`Vmware:` + fmt.Sprintf("%#v", this.Vmware) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Kvm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_Kvm{` +
		`Kvm:` + fmt.Sprintf("%#v", this.Kvm) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Aws) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_Aws{` +
		`Aws:` + fmt.Sprintf("%#v", this.Aws) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Azure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_Azure{` +
		`Azure:` + fmt.Sprintf("%#v", this.Azure) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Gcp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_Gcp{` +
		`Gcp:` + fmt.Sprintf("%#v", this.Gcp) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Rseries) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_Rseries{` +
		`Rseries:` + fmt.Sprintf("%#v", this.Rseries) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Baremetal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_Baremetal{` +
		`Baremetal:` + fmt.Sprintf("%#v", this.Baremetal) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Oci) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_Oci{` +
		`Oci:` + fmt.Sprintf("%#v", this.Oci) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Openstack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_Openstack{` +
		`Openstack:` + fmt.Sprintf("%#v", this.Openstack) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Nutanix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_Nutanix{` +
		`Nutanix:` + fmt.Sprintf("%#v", this.Nutanix) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BlockAllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_BlockAllServices{` +
		`BlockAllServices:` + fmt.Sprintf("%#v", this.BlockAllServices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoS2SConnectivitySli) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_NoS2SConnectivitySli{` +
		`NoS2SConnectivitySli:` + fmt.Sprintf("%#v", this.NoS2SConnectivitySli) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DcClusterGroupSli) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_DcClusterGroupSli{` +
		`DcClusterGroupSli:` + fmt.Sprintf("%#v", this.DcClusterGroupSli) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoS2SConnectivitySlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_NoS2SConnectivitySlo{` +
		`NoS2SConnectivitySlo:` + fmt.Sprintf("%#v", this.NoS2SConnectivitySlo) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SiteMeshGroupOnSlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_SiteMeshGroupOnSlo{` +
		`SiteMeshGroupOnSlo:` + fmt.Sprintf("%#v", this.SiteMeshGroupOnSlo) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DcClusterGroupSlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_DcClusterGroupSlo{` +
		`DcClusterGroupSlo:` + fmt.Sprintf("%#v", this.DcClusterGroupSlo) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableHa) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_DisableHa{` +
		`DisableHa:` + fmt.Sprintf("%#v", this.DisableHa) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableHa) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_EnableHa{` +
		`EnableHa:` + fmt.Sprintf("%#v", this.EnableHa) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_F5Proxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_F5Proxy{` +
		`F5Proxy:` + fmt.Sprintf("%#v", this.F5Proxy) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CustomProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.ReplaceSpecType_CustomProxy{` +
		`CustomProxy:` + fmt.Sprintf("%#v", this.CustomProxy) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 46)
	s = append(s, "&securemesh_site_v2.GetSpecType{")
	if this.ProviderChoice != nil {
		s = append(s, "ProviderChoice: "+fmt.Sprintf("%#v", this.ProviderChoice)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.SoftwareSettings != nil {
		s = append(s, "SoftwareSettings: "+fmt.Sprintf("%#v", this.SoftwareSettings)+",\n")
	}
	if this.UpgradeSettings != nil {
		s = append(s, "UpgradeSettings: "+fmt.Sprintf("%#v", this.UpgradeSettings)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	s = append(s, "TunnelDeadTimeout: "+fmt.Sprintf("%#v", this.TunnelDeadTimeout)+",\n")
	if this.LoadBalancing != nil {
		s = append(s, "LoadBalancing: "+fmt.Sprintf("%#v", this.LoadBalancing)+",\n")
	}
	if this.S2SConnectivitySliChoice != nil {
		s = append(s, "S2SConnectivitySliChoice: "+fmt.Sprintf("%#v", this.S2SConnectivitySliChoice)+",\n")
	}
	if this.S2SConnectivitySloChoice != nil {
		s = append(s, "S2SConnectivitySloChoice: "+fmt.Sprintf("%#v", this.S2SConnectivitySloChoice)+",\n")
	}
	if this.LocalVrf != nil {
		s = append(s, "LocalVrf: "+fmt.Sprintf("%#v", this.LocalVrf)+",\n")
	}
	s = append(s, "TunnelType: "+fmt.Sprintf("%#v", this.TunnelType)+",\n")
	if this.ReSelect != nil {
		s = append(s, "ReSelect: "+fmt.Sprintf("%#v", this.ReSelect)+",\n")
	}
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	if this.NodeHaChoice != nil {
		s = append(s, "NodeHaChoice: "+fmt.Sprintf("%#v", this.NodeHaChoice)+",\n")
	}
	s = append(s, "SiteState: "+fmt.Sprintf("%#v", this.SiteState)+",\n")
	if this.AdminUserCredentials != nil {
		s = append(s, "AdminUserCredentials: "+fmt.Sprintf("%#v", this.AdminUserCredentials)+",\n")
	}
	if this.ProactiveMonitoring != nil {
		s = append(s, "ProactiveMonitoring: "+fmt.Sprintf("%#v", this.ProactiveMonitoring)+",\n")
	}
	if this.EnterpriseProxyChoice != nil {
		s = append(s, "EnterpriseProxyChoice: "+fmt.Sprintf("%#v", this.EnterpriseProxyChoice)+",\n")
	}
	if this.DnsNtpConfig != nil {
		s = append(s, "DnsNtpConfig: "+fmt.Sprintf("%#v", this.DnsNtpConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Vmware) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_Vmware{` +
		`Vmware:` + fmt.Sprintf("%#v", this.Vmware) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Kvm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_Kvm{` +
		`Kvm:` + fmt.Sprintf("%#v", this.Kvm) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Aws) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_Aws{` +
		`Aws:` + fmt.Sprintf("%#v", this.Aws) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Azure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_Azure{` +
		`Azure:` + fmt.Sprintf("%#v", this.Azure) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Gcp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_Gcp{` +
		`Gcp:` + fmt.Sprintf("%#v", this.Gcp) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Rseries) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_Rseries{` +
		`Rseries:` + fmt.Sprintf("%#v", this.Rseries) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Baremetal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_Baremetal{` +
		`Baremetal:` + fmt.Sprintf("%#v", this.Baremetal) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Oci) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_Oci{` +
		`Oci:` + fmt.Sprintf("%#v", this.Oci) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Openstack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_Openstack{` +
		`Openstack:` + fmt.Sprintf("%#v", this.Openstack) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Nutanix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_Nutanix{` +
		`Nutanix:` + fmt.Sprintf("%#v", this.Nutanix) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BlockAllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_BlockAllServices{` +
		`BlockAllServices:` + fmt.Sprintf("%#v", this.BlockAllServices) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoS2SConnectivitySli) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_NoS2SConnectivitySli{` +
		`NoS2SConnectivitySli:` + fmt.Sprintf("%#v", this.NoS2SConnectivitySli) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DcClusterGroupSli) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_DcClusterGroupSli{` +
		`DcClusterGroupSli:` + fmt.Sprintf("%#v", this.DcClusterGroupSli) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoS2SConnectivitySlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_NoS2SConnectivitySlo{` +
		`NoS2SConnectivitySlo:` + fmt.Sprintf("%#v", this.NoS2SConnectivitySlo) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SiteMeshGroupOnSlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_SiteMeshGroupOnSlo{` +
		`SiteMeshGroupOnSlo:` + fmt.Sprintf("%#v", this.SiteMeshGroupOnSlo) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DcClusterGroupSlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_DcClusterGroupSlo{` +
		`DcClusterGroupSlo:` + fmt.Sprintf("%#v", this.DcClusterGroupSlo) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableHa) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_DisableHa{` +
		`DisableHa:` + fmt.Sprintf("%#v", this.DisableHa) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableHa) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_EnableHa{` +
		`EnableHa:` + fmt.Sprintf("%#v", this.EnableHa) + `}`}, ", ")
	return s
}
func (this *GetSpecType_F5Proxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_F5Proxy{` +
		`F5Proxy:` + fmt.Sprintf("%#v", this.F5Proxy) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CustomProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.GetSpecType_CustomProxy{` +
		`CustomProxy:` + fmt.Sprintf("%#v", this.CustomProxy) + `}`}, ", ")
	return s
}
func (this *Interface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&securemesh_site_v2.Interface{")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	if this.InterfaceChoice != nil {
		s = append(s, "InterfaceChoice: "+fmt.Sprintf("%#v", this.InterfaceChoice)+",\n")
	}
	if this.AddressChoice != nil {
		s = append(s, "AddressChoice: "+fmt.Sprintf("%#v", this.AddressChoice)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Mtu: "+fmt.Sprintf("%#v", this.Mtu)+",\n")
	if this.NetworkOption != nil {
		s = append(s, "NetworkOption: "+fmt.Sprintf("%#v", this.NetworkOption)+",\n")
	}
	if this.MonitoringChoice != nil {
		s = append(s, "MonitoringChoice: "+fmt.Sprintf("%#v", this.MonitoringChoice)+",\n")
	}
	s = append(s, "Priority: "+fmt.Sprintf("%#v", this.Priority)+",\n")
	if this.SiteToSiteConnectivityInterfaceChoice != nil {
		s = append(s, "SiteToSiteConnectivityInterfaceChoice: "+fmt.Sprintf("%#v", this.SiteToSiteConnectivityInterfaceChoice)+",\n")
	}
	s = append(s, "IsPrimary: "+fmt.Sprintf("%#v", this.IsPrimary)+",\n")
	s = append(s, "IsManagement: "+fmt.Sprintf("%#v", this.IsManagement)+",\n")
	if this.Ipv6AddressChoice != nil {
		s = append(s, "Ipv6AddressChoice: "+fmt.Sprintf("%#v", this.Ipv6AddressChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Interface_EthernetInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.Interface_EthernetInterface{` +
		`EthernetInterface:` + fmt.Sprintf("%#v", this.EthernetInterface) + `}`}, ", ")
	return s
}
func (this *Interface_VlanInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.Interface_VlanInterface{` +
		`VlanInterface:` + fmt.Sprintf("%#v", this.VlanInterface) + `}`}, ", ")
	return s
}
func (this *Interface_BondInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.Interface_BondInterface{` +
		`BondInterface:` + fmt.Sprintf("%#v", this.BondInterface) + `}`}, ", ")
	return s
}
func (this *Interface_DhcpClient) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.Interface_DhcpClient{` +
		`DhcpClient:` + fmt.Sprintf("%#v", this.DhcpClient) + `}`}, ", ")
	return s
}
func (this *Interface_StaticIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.Interface_StaticIp{` +
		`StaticIp:` + fmt.Sprintf("%#v", this.StaticIp) + `}`}, ", ")
	return s
}
func (this *Interface_DhcpServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.Interface_DhcpServer{` +
		`DhcpServer:` + fmt.Sprintf("%#v", this.DhcpServer) + `}`}, ", ")
	return s
}
func (this *Interface_NoIpv4Address) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.Interface_NoIpv4Address{` +
		`NoIpv4Address:` + fmt.Sprintf("%#v", this.NoIpv4Address) + `}`}, ", ")
	return s
}
func (this *Interface_MonitorDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.Interface_MonitorDisabled{` +
		`MonitorDisabled:` + fmt.Sprintf("%#v", this.MonitorDisabled) + `}`}, ", ")
	return s
}
func (this *Interface_Monitor) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.Interface_Monitor{` +
		`Monitor:` + fmt.Sprintf("%#v", this.Monitor) + `}`}, ", ")
	return s
}
func (this *Interface_SiteToSiteConnectivityInterfaceDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.Interface_SiteToSiteConnectivityInterfaceDisabled{` +
		`SiteToSiteConnectivityInterfaceDisabled:` + fmt.Sprintf("%#v", this.SiteToSiteConnectivityInterfaceDisabled) + `}`}, ", ")
	return s
}
func (this *Interface_SiteToSiteConnectivityInterfaceEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.Interface_SiteToSiteConnectivityInterfaceEnabled{` +
		`SiteToSiteConnectivityInterfaceEnabled:` + fmt.Sprintf("%#v", this.SiteToSiteConnectivityInterfaceEnabled) + `}`}, ", ")
	return s
}
func (this *Interface_NoIpv6Address) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.Interface_NoIpv6Address{` +
		`NoIpv6Address:` + fmt.Sprintf("%#v", this.NoIpv6Address) + `}`}, ", ")
	return s
}
func (this *Interface_StaticIpv6Address) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.Interface_StaticIpv6Address{` +
		`StaticIpv6Address:` + fmt.Sprintf("%#v", this.StaticIpv6Address) + `}`}, ", ")
	return s
}
func (this *Interface_Ipv6AutoConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.Interface_Ipv6AutoConfig{` +
		`Ipv6AutoConfig:` + fmt.Sprintf("%#v", this.Ipv6AutoConfig) + `}`}, ", ")
	return s
}
func (this *EthernetInterfaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&securemesh_site_v2.EthernetInterfaceType{")
	s = append(s, "Device: "+fmt.Sprintf("%#v", this.Device)+",\n")
	s = append(s, "Mac: "+fmt.Sprintf("%#v", this.Mac)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VlanInterfaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&securemesh_site_v2.VlanInterfaceType{")
	s = append(s, "Device: "+fmt.Sprintf("%#v", this.Device)+",\n")
	s = append(s, "VlanId: "+fmt.Sprintf("%#v", this.VlanId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VirtualNetworkConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&securemesh_site_v2.VirtualNetworkConfiguration{")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	s = append(s, "Vip: "+fmt.Sprintf("%#v", this.Vip)+",\n")
	s = append(s, "VipV6: "+fmt.Sprintf("%#v", this.VipV6)+",\n")
	s = append(s, "Nameserver: "+fmt.Sprintf("%#v", this.Nameserver)+",\n")
	s = append(s, "NameserverV6: "+fmt.Sprintf("%#v", this.NameserverV6)+",\n")
	if this.StaticRouteChoice != nil {
		s = append(s, "StaticRouteChoice: "+fmt.Sprintf("%#v", this.StaticRouteChoice)+",\n")
	}
	if this.StaticV6RouteChoice != nil {
		s = append(s, "StaticV6RouteChoice: "+fmt.Sprintf("%#v", this.StaticV6RouteChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VirtualNetworkConfiguration_NoStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.VirtualNetworkConfiguration_NoStaticRoutes{` +
		`NoStaticRoutes:` + fmt.Sprintf("%#v", this.NoStaticRoutes) + `}`}, ", ")
	return s
}
func (this *VirtualNetworkConfiguration_StaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.VirtualNetworkConfiguration_StaticRoutes{` +
		`StaticRoutes:` + fmt.Sprintf("%#v", this.StaticRoutes) + `}`}, ", ")
	return s
}
func (this *VirtualNetworkConfiguration_NoV6StaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.VirtualNetworkConfiguration_NoV6StaticRoutes{` +
		`NoV6StaticRoutes:` + fmt.Sprintf("%#v", this.NoV6StaticRoutes) + `}`}, ", ")
	return s
}
func (this *VirtualNetworkConfiguration_StaticV6Routes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.VirtualNetworkConfiguration_StaticV6Routes{` +
		`StaticV6Routes:` + fmt.Sprintf("%#v", this.StaticV6Routes) + `}`}, ", ")
	return s
}
func (this *StaticRoutesListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site_v2.StaticRoutesListType{")
	if this.StaticRoutes != nil {
		s = append(s, "StaticRoutes: "+fmt.Sprintf("%#v", this.StaticRoutes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LocalVRFSettingType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&securemesh_site_v2.LocalVRFSettingType{")
	if this.SloChoice != nil {
		s = append(s, "SloChoice: "+fmt.Sprintf("%#v", this.SloChoice)+",\n")
	}
	if this.SliChoice != nil {
		s = append(s, "SliChoice: "+fmt.Sprintf("%#v", this.SliChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LocalVRFSettingType_DefaultConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.LocalVRFSettingType_DefaultConfig{` +
		`DefaultConfig:` + fmt.Sprintf("%#v", this.DefaultConfig) + `}`}, ", ")
	return s
}
func (this *LocalVRFSettingType_SloConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.LocalVRFSettingType_SloConfig{` +
		`SloConfig:` + fmt.Sprintf("%#v", this.SloConfig) + `}`}, ", ")
	return s
}
func (this *LocalVRFSettingType_DefaultSliConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.LocalVRFSettingType_DefaultSliConfig{` +
		`DefaultSliConfig:` + fmt.Sprintf("%#v", this.DefaultSliConfig) + `}`}, ", ")
	return s
}
func (this *LocalVRFSettingType_SliConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site_v2.LocalVRFSettingType_SliConfig{` +
		`SliConfig:` + fmt.Sprintf("%#v", this.SliConfig) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xba
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xb2
	}
	if m.DnsNtpConfig != nil {
		{
			size, err := m.DnsNtpConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf2
	}
	if m.EnterpriseProxyChoice != nil {
		{
			size := m.EnterpriseProxyChoice.Size()
			i -= size
			if _, err := m.EnterpriseProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ProactiveMonitoring != nil {
		{
			size, err := m.ProactiveMonitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if m.ProviderChoice != nil {
		{
			size := m.ProviderChoice.Size()
			i -= size
			if _, err := m.ProviderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AdminUserCredentials != nil {
		{
			size, err := m.AdminUserCredentials.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.SiteState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteState))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.NodeHaChoice != nil {
		{
			size := m.NodeHaChoice.Size()
			i -= size
			if _, err := m.NodeHaChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.OperatingSystemVersion) > 0 {
		i -= len(m.OperatingSystemVersion)
		copy(dAtA[i:], m.OperatingSystemVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		i -= len(m.VolterraSoftwareVersion)
		copy(dAtA[i:], m.VolterraSoftwareVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.ReSelect != nil {
		{
			size, err := m.ReSelect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.TunnelType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe0
	}
	if m.LocalVrf != nil {
		{
			size, err := m.LocalVrf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if m.S2SConnectivitySloChoice != nil {
		{
			size := m.S2SConnectivitySloChoice.Size()
			i -= size
			if _, err := m.S2SConnectivitySloChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.S2SConnectivitySliChoice != nil {
		{
			size := m.S2SConnectivitySliChoice.Size()
			i -= size
			if _, err := m.S2SConnectivitySliChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LoadBalancing != nil {
		{
			size, err := m.LoadBalancing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.TunnelDeadTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelDeadTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UpgradeSettings != nil {
		{
			size, err := m.UpgradeSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.SoftwareSettings != nil {
		{
			size, err := m.SoftwareSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_Vmware) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Vmware) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vmware != nil {
		{
			size, err := m.Vmware.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Kvm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Kvm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Kvm != nil {
		{
			size, err := m.Kvm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Aws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Aws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Aws != nil {
		{
			size, err := m.Aws.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Azure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Azure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Azure != nil {
		{
			size, err := m.Azure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Gcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Gcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Gcp != nil {
		{
			size, err := m.Gcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Rseries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Rseries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Rseries != nil {
		{
			size, err := m.Rseries.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Baremetal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Baremetal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Baremetal != nil {
		{
			size, err := m.Baremetal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Oci) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Oci) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Oci != nil {
		{
			size, err := m.Oci.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BlockAllServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BlockAllServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockAllServices != nil {
		{
			size, err := m.BlockAllServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoS2SConnectivitySli) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoS2SConnectivitySli) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoS2SConnectivitySli != nil {
		{
			size, err := m.NoS2SConnectivitySli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DcClusterGroupSli) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DcClusterGroupSli) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupSli != nil {
		{
			size, err := m.DcClusterGroupSli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoS2SConnectivitySlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoS2SConnectivitySlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoS2SConnectivitySlo != nil {
		{
			size, err := m.NoS2SConnectivitySlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SiteMeshGroupOnSlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SiteMeshGroupOnSlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteMeshGroupOnSlo != nil {
		{
			size, err := m.SiteMeshGroupOnSlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DcClusterGroupSlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DcClusterGroupSlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupSlo != nil {
		{
			size, err := m.DcClusterGroupSlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableHa) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableHa) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableHa != nil {
		{
			size, err := m.DisableHa.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableHa) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableHa) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableHa != nil {
		{
			size, err := m.EnableHa.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Openstack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Openstack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Openstack != nil {
		{
			size, err := m.Openstack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Nutanix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Nutanix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Nutanix != nil {
		{
			size, err := m.Nutanix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_F5Proxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_F5Proxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5Proxy != nil {
		{
			size, err := m.F5Proxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_CustomProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_CustomProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomProxy != nil {
		{
			size, err := m.CustomProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *DNSNTPServerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSNTPServerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSNTPServerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NtpServerChoice != nil {
		{
			size := m.NtpServerChoice.Size()
			i -= size
			if _, err := m.NtpServerChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DnsServerChoice != nil {
		{
			size := m.DnsServerChoice.Size()
			i -= size
			if _, err := m.DnsServerChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DNSNTPServerConfig_F5DnsDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSNTPServerConfig_F5DnsDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5DnsDefault != nil {
		{
			size, err := m.F5DnsDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DNSNTPServerConfig_CustomDns) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSNTPServerConfig_CustomDns) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomDns != nil {
		{
			size, err := m.CustomDns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DNSNTPServerConfig_F5NtpDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSNTPServerConfig_F5NtpDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5NtpDefault != nil {
		{
			size, err := m.F5NtpDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *DNSNTPServerConfig_CustomNtp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSNTPServerConfig_CustomNtp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomNtp != nil {
		{
			size, err := m.CustomNtp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *CustomDNSSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomDNSSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomDNSSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DnsServers) > 0 {
		for iNdEx := len(m.DnsServers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DnsServers[iNdEx])
			copy(dAtA[i:], m.DnsServers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.DnsServers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomNTPSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomNTPSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomNTPSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NtpServers) > 0 {
		for iNdEx := len(m.NtpServers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NtpServers[iNdEx])
			copy(dAtA[i:], m.NtpServers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.NtpServers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomProxy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UseForReTunnelChoice != nil {
		{
			size := m.UseForReTunnelChoice.Size()
			i -= size
			if _, err := m.UseForReTunnelChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Password != nil {
		{
			size, err := m.Password.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ProxyPort != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ProxyPort))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProxyIpAddress) > 0 {
		i -= len(m.ProxyIpAddress)
		copy(dAtA[i:], m.ProxyIpAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ProxyIpAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustomProxy_DisableReTunnel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomProxy_DisableReTunnel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableReTunnel != nil {
		{
			size, err := m.DisableReTunnel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CustomProxy_EnableReTunnel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomProxy_EnableReTunnel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableReTunnel != nil {
		{
			size, err := m.EnableReTunnel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *LoadBalancingSettingsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadBalancingSettingsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadBalancingSettingsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VipVrrpMode != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VipVrrpMode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SoftwareSettingsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwareSettingsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoftwareSettingsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Os != nil {
		{
			size, err := m.Os.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Sw != nil {
		{
			size, err := m.Sw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradeSettingsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeSettingsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeSettingsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KubernetesUpgradeDrain != nil {
		{
			size, err := m.KubernetesUpgradeDrain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InterfaceList) > 0 {
		for iNdEx := len(m.InterfaceList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InterfaceList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.PublicIp) > 0 {
		i -= len(m.PublicIp)
		copy(dAtA[i:], m.PublicIp)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PublicIp)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SiteMeshGroupType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteMeshGroupType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteMeshGroupType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SiteMeshGroupChoice != nil {
		{
			size := m.SiteMeshGroupChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteMeshGroupIpChoice != nil {
		{
			size := m.SiteMeshGroupIpChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupIpChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SiteMeshGroupType_SmConnectionPublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteMeshGroupType_SmConnectionPublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPublicIp != nil {
		{
			size, err := m.SmConnectionPublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SiteMeshGroupType_SmConnectionPvtIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteMeshGroupType_SmConnectionPvtIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPvtIp != nil {
		{
			size, err := m.SmConnectionPvtIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SiteMeshGroupType_NoSiteMeshGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteMeshGroupType_NoSiteMeshGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoSiteMeshGroup != nil {
		{
			size, err := m.NoSiteMeshGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *SiteMeshGroupType_SiteMeshGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteMeshGroupType_SiteMeshGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteMeshGroup != nil {
		{
			size, err := m.SiteMeshGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *VMwareProviderType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMwareProviderType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMwareProviderType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		{
			size := m.OrchestrationChoice.Size()
			i -= size
			if _, err := m.OrchestrationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VMwareProviderType_NotManaged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VMwareProviderType_NotManaged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotManaged != nil {
		{
			size, err := m.NotManaged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *KVMProviderType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVMProviderType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KVMProviderType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		{
			size := m.OrchestrationChoice.Size()
			i -= size
			if _, err := m.OrchestrationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *KVMProviderType_NotManaged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KVMProviderType_NotManaged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotManaged != nil {
		{
			size, err := m.NotManaged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AWSProviderType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSProviderType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSProviderType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		{
			size := m.OrchestrationChoice.Size()
			i -= size
			if _, err := m.OrchestrationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AWSProviderType_NotManaged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSProviderType_NotManaged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotManaged != nil {
		{
			size, err := m.NotManaged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AWSProviderType_Managed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSProviderType_Managed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Managed != nil {
		{
			size, err := m.Managed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AzureProviderType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureProviderType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureProviderType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		{
			size := m.OrchestrationChoice.Size()
			i -= size
			if _, err := m.OrchestrationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AzureProviderType_NotManaged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureProviderType_NotManaged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotManaged != nil {
		{
			size, err := m.NotManaged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GCPProviderType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GCPProviderType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GCPProviderType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		{
			size := m.OrchestrationChoice.Size()
			i -= size
			if _, err := m.OrchestrationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GCPProviderType_NotManaged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GCPProviderType_NotManaged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotManaged != nil {
		{
			size, err := m.NotManaged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BaremetalProviderType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaremetalProviderType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaremetalProviderType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		{
			size := m.OrchestrationChoice.Size()
			i -= size
			if _, err := m.OrchestrationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BaremetalProviderType_NotManaged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaremetalProviderType_NotManaged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotManaged != nil {
		{
			size, err := m.NotManaged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *OCIProviderType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OCIProviderType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OCIProviderType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		{
			size := m.OrchestrationChoice.Size()
			i -= size
			if _, err := m.OrchestrationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OCIProviderType_NotManaged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OCIProviderType_NotManaged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotManaged != nil {
		{
			size, err := m.NotManaged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RSeriesProviderType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RSeriesProviderType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RSeriesProviderType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		{
			size := m.OrchestrationChoice.Size()
			i -= size
			if _, err := m.OrchestrationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RSeriesProviderType_NotManaged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RSeriesProviderType_NotManaged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotManaged != nil {
		{
			size, err := m.NotManaged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *OpenstackProviderType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenstackProviderType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenstackProviderType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		{
			size := m.OrchestrationChoice.Size()
			i -= size
			if _, err := m.OrchestrationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OpenstackProviderType_NotManaged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenstackProviderType_NotManaged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotManaged != nil {
		{
			size, err := m.NotManaged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *NutanixProviderType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NutanixProviderType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NutanixProviderType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		{
			size := m.OrchestrationChoice.Size()
			i -= size
			if _, err := m.OrchestrationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *NutanixProviderType_NotManaged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NutanixProviderType_NotManaged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotManaged != nil {
		{
			size, err := m.NotManaged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *NodeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeList) > 0 {
		for iNdEx := len(m.NodeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DnsNtpConfig != nil {
		{
			size, err := m.DnsNtpConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf2
	}
	if m.EnterpriseProxyChoice != nil {
		{
			size := m.EnterpriseProxyChoice.Size()
			i -= size
			if _, err := m.EnterpriseProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ProactiveMonitoring != nil {
		{
			size, err := m.ProactiveMonitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if m.ProviderChoice != nil {
		{
			size := m.ProviderChoice.Size()
			i -= size
			if _, err := m.ProviderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AdminUserCredentials != nil {
		{
			size, err := m.AdminUserCredentials.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.NodeHaChoice != nil {
		{
			size := m.NodeHaChoice.Size()
			i -= size
			if _, err := m.NodeHaChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ReSelect != nil {
		{
			size, err := m.ReSelect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.TunnelType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe0
	}
	if m.LocalVrf != nil {
		{
			size, err := m.LocalVrf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if m.S2SConnectivitySloChoice != nil {
		{
			size := m.S2SConnectivitySloChoice.Size()
			i -= size
			if _, err := m.S2SConnectivitySloChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.S2SConnectivitySliChoice != nil {
		{
			size := m.S2SConnectivitySliChoice.Size()
			i -= size
			if _, err := m.S2SConnectivitySliChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LoadBalancing != nil {
		{
			size, err := m.LoadBalancing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.TunnelDeadTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelDeadTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UpgradeSettings != nil {
		{
			size, err := m.UpgradeSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.SoftwareSettings != nil {
		{
			size, err := m.SoftwareSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_Vmware) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Vmware) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vmware != nil {
		{
			size, err := m.Vmware.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Kvm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Kvm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Kvm != nil {
		{
			size, err := m.Kvm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Aws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Aws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Aws != nil {
		{
			size, err := m.Aws.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Azure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Azure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Azure != nil {
		{
			size, err := m.Azure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Gcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Gcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Gcp != nil {
		{
			size, err := m.Gcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Rseries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Rseries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Rseries != nil {
		{
			size, err := m.Rseries.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Baremetal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Baremetal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Baremetal != nil {
		{
			size, err := m.Baremetal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Oci) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Oci) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Oci != nil {
		{
			size, err := m.Oci.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BlockAllServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BlockAllServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockAllServices != nil {
		{
			size, err := m.BlockAllServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoS2SConnectivitySli) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoS2SConnectivitySli) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoS2SConnectivitySli != nil {
		{
			size, err := m.NoS2SConnectivitySli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DcClusterGroupSli) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DcClusterGroupSli) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupSli != nil {
		{
			size, err := m.DcClusterGroupSli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoS2SConnectivitySlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoS2SConnectivitySlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoS2SConnectivitySlo != nil {
		{
			size, err := m.NoS2SConnectivitySlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SiteMeshGroupOnSlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SiteMeshGroupOnSlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteMeshGroupOnSlo != nil {
		{
			size, err := m.SiteMeshGroupOnSlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DcClusterGroupSlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DcClusterGroupSlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupSlo != nil {
		{
			size, err := m.DcClusterGroupSlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableHa) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableHa) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableHa != nil {
		{
			size, err := m.DisableHa.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableHa) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableHa) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableHa != nil {
		{
			size, err := m.EnableHa.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Openstack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Openstack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Openstack != nil {
		{
			size, err := m.Openstack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Nutanix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Nutanix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Nutanix != nil {
		{
			size, err := m.Nutanix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_F5Proxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_F5Proxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5Proxy != nil {
		{
			size, err := m.F5Proxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_CustomProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_CustomProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomProxy != nil {
		{
			size, err := m.CustomProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DnsNtpConfig != nil {
		{
			size, err := m.DnsNtpConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf2
	}
	if m.EnterpriseProxyChoice != nil {
		{
			size := m.EnterpriseProxyChoice.Size()
			i -= size
			if _, err := m.EnterpriseProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ProactiveMonitoring != nil {
		{
			size, err := m.ProactiveMonitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if m.ProviderChoice != nil {
		{
			size := m.ProviderChoice.Size()
			i -= size
			if _, err := m.ProviderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AdminUserCredentials != nil {
		{
			size, err := m.AdminUserCredentials.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.NodeHaChoice != nil {
		{
			size := m.NodeHaChoice.Size()
			i -= size
			if _, err := m.NodeHaChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ReSelect != nil {
		{
			size, err := m.ReSelect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.TunnelType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe0
	}
	if m.LocalVrf != nil {
		{
			size, err := m.LocalVrf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if m.S2SConnectivitySloChoice != nil {
		{
			size := m.S2SConnectivitySloChoice.Size()
			i -= size
			if _, err := m.S2SConnectivitySloChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.S2SConnectivitySliChoice != nil {
		{
			size := m.S2SConnectivitySliChoice.Size()
			i -= size
			if _, err := m.S2SConnectivitySliChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LoadBalancing != nil {
		{
			size, err := m.LoadBalancing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.TunnelDeadTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelDeadTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UpgradeSettings != nil {
		{
			size, err := m.UpgradeSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.SoftwareSettings != nil {
		{
			size, err := m.SoftwareSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_Vmware) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Vmware) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vmware != nil {
		{
			size, err := m.Vmware.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Kvm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Kvm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Kvm != nil {
		{
			size, err := m.Kvm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Aws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Aws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Aws != nil {
		{
			size, err := m.Aws.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Azure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Azure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Azure != nil {
		{
			size, err := m.Azure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Gcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Gcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Gcp != nil {
		{
			size, err := m.Gcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Rseries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Rseries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Rseries != nil {
		{
			size, err := m.Rseries.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Baremetal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Baremetal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Baremetal != nil {
		{
			size, err := m.Baremetal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Oci) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Oci) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Oci != nil {
		{
			size, err := m.Oci.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BlockAllServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BlockAllServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockAllServices != nil {
		{
			size, err := m.BlockAllServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoS2SConnectivitySli) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoS2SConnectivitySli) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoS2SConnectivitySli != nil {
		{
			size, err := m.NoS2SConnectivitySli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DcClusterGroupSli) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DcClusterGroupSli) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupSli != nil {
		{
			size, err := m.DcClusterGroupSli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoS2SConnectivitySlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoS2SConnectivitySlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoS2SConnectivitySlo != nil {
		{
			size, err := m.NoS2SConnectivitySlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SiteMeshGroupOnSlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SiteMeshGroupOnSlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteMeshGroupOnSlo != nil {
		{
			size, err := m.SiteMeshGroupOnSlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DcClusterGroupSlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DcClusterGroupSlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupSlo != nil {
		{
			size, err := m.DcClusterGroupSlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableHa) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableHa) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableHa != nil {
		{
			size, err := m.DisableHa.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableHa) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableHa) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableHa != nil {
		{
			size, err := m.EnableHa.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Openstack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Openstack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Openstack != nil {
		{
			size, err := m.Openstack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Nutanix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Nutanix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Nutanix != nil {
		{
			size, err := m.Nutanix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_F5Proxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_F5Proxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5Proxy != nil {
		{
			size, err := m.F5Proxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_CustomProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_CustomProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomProxy != nil {
		{
			size, err := m.CustomProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DnsNtpConfig != nil {
		{
			size, err := m.DnsNtpConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf2
	}
	if m.EnterpriseProxyChoice != nil {
		{
			size := m.EnterpriseProxyChoice.Size()
			i -= size
			if _, err := m.EnterpriseProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ProactiveMonitoring != nil {
		{
			size, err := m.ProactiveMonitoring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if m.ProviderChoice != nil {
		{
			size := m.ProviderChoice.Size()
			i -= size
			if _, err := m.ProviderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AdminUserCredentials != nil {
		{
			size, err := m.AdminUserCredentials.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.SiteState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteState))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.NodeHaChoice != nil {
		{
			size := m.NodeHaChoice.Size()
			i -= size
			if _, err := m.NodeHaChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.OperatingSystemVersion) > 0 {
		i -= len(m.OperatingSystemVersion)
		copy(dAtA[i:], m.OperatingSystemVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		i -= len(m.VolterraSoftwareVersion)
		copy(dAtA[i:], m.VolterraSoftwareVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.ReSelect != nil {
		{
			size, err := m.ReSelect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.TunnelType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe0
	}
	if m.LocalVrf != nil {
		{
			size, err := m.LocalVrf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if m.S2SConnectivitySloChoice != nil {
		{
			size := m.S2SConnectivitySloChoice.Size()
			i -= size
			if _, err := m.S2SConnectivitySloChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.S2SConnectivitySliChoice != nil {
		{
			size := m.S2SConnectivitySliChoice.Size()
			i -= size
			if _, err := m.S2SConnectivitySliChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LoadBalancing != nil {
		{
			size, err := m.LoadBalancing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.TunnelDeadTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelDeadTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UpgradeSettings != nil {
		{
			size, err := m.UpgradeSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.SoftwareSettings != nil {
		{
			size, err := m.SoftwareSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_Vmware) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Vmware) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vmware != nil {
		{
			size, err := m.Vmware.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Kvm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Kvm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Kvm != nil {
		{
			size, err := m.Kvm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Aws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Aws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Aws != nil {
		{
			size, err := m.Aws.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Azure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Azure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Azure != nil {
		{
			size, err := m.Azure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Gcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Gcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Gcp != nil {
		{
			size, err := m.Gcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Rseries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Rseries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Rseries != nil {
		{
			size, err := m.Rseries.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Baremetal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Baremetal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Baremetal != nil {
		{
			size, err := m.Baremetal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Oci) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Oci) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Oci != nil {
		{
			size, err := m.Oci.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BlockAllServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BlockAllServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockAllServices != nil {
		{
			size, err := m.BlockAllServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoS2SConnectivitySli) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoS2SConnectivitySli) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoS2SConnectivitySli != nil {
		{
			size, err := m.NoS2SConnectivitySli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DcClusterGroupSli) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DcClusterGroupSli) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupSli != nil {
		{
			size, err := m.DcClusterGroupSli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoS2SConnectivitySlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoS2SConnectivitySlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoS2SConnectivitySlo != nil {
		{
			size, err := m.NoS2SConnectivitySlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SiteMeshGroupOnSlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SiteMeshGroupOnSlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteMeshGroupOnSlo != nil {
		{
			size, err := m.SiteMeshGroupOnSlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DcClusterGroupSlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DcClusterGroupSlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupSlo != nil {
		{
			size, err := m.DcClusterGroupSlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableHa) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableHa) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableHa != nil {
		{
			size, err := m.DisableHa.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableHa) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableHa) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableHa != nil {
		{
			size, err := m.EnableHa.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Openstack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Openstack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Openstack != nil {
		{
			size, err := m.Openstack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Nutanix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Nutanix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Nutanix != nil {
		{
			size, err := m.Nutanix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_F5Proxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_F5Proxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5Proxy != nil {
		{
			size, err := m.F5Proxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_CustomProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_CustomProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomProxy != nil {
		{
			size, err := m.CustomProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *Interface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressChoice != nil {
		{
			size := m.AddressChoice.Size()
			i -= size
			if _, err := m.AddressChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Ipv6AddressChoice != nil {
		{
			size := m.Ipv6AddressChoice.Size()
			i -= size
			if _, err := m.Ipv6AddressChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IsManagement {
		i--
		if m.IsManagement {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.IsPrimary {
		i--
		if m.IsPrimary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.SiteToSiteConnectivityInterfaceChoice != nil {
		{
			size := m.SiteToSiteConnectivityInterfaceChoice.Size()
			i -= size
			if _, err := m.SiteToSiteConnectivityInterfaceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Priority != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.MonitoringChoice != nil {
		{
			size := m.MonitoringChoice.Size()
			i -= size
			if _, err := m.MonitoringChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.NetworkOption != nil {
		{
			size, err := m.NetworkOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Mtu != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Mtu))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x52
	}
	if m.InterfaceChoice != nil {
		{
			size := m.InterfaceChoice.Size()
			i -= size
			if _, err := m.InterfaceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
		for iNdEx := len(keysForLabels) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Labels[string(keysForLabels[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForLabels[iNdEx])
			copy(dAtA[i:], keysForLabels[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForLabels[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Interface_EthernetInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_EthernetInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EthernetInterface != nil {
		{
			size, err := m.EthernetInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Interface_VlanInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_VlanInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VlanInterface != nil {
		{
			size, err := m.VlanInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Interface_BondInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_BondInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BondInterface != nil {
		{
			size, err := m.BondInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Interface_DhcpClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_DhcpClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DhcpClient != nil {
		{
			size, err := m.DhcpClient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Interface_StaticIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_StaticIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StaticIp != nil {
		{
			size, err := m.StaticIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Interface_MonitorDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_MonitorDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MonitorDisabled != nil {
		{
			size, err := m.MonitorDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *Interface_Monitor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_Monitor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Monitor != nil {
		{
			size, err := m.Monitor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *Interface_SiteToSiteConnectivityInterfaceDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_SiteToSiteConnectivityInterfaceDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteToSiteConnectivityInterfaceDisabled != nil {
		{
			size, err := m.SiteToSiteConnectivityInterfaceDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *Interface_SiteToSiteConnectivityInterfaceEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_SiteToSiteConnectivityInterfaceEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SiteToSiteConnectivityInterfaceEnabled != nil {
		{
			size, err := m.SiteToSiteConnectivityInterfaceEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *Interface_DhcpServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_DhcpServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DhcpServer != nil {
		{
			size, err := m.DhcpServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *Interface_NoIpv6Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_NoIpv6Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoIpv6Address != nil {
		{
			size, err := m.NoIpv6Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *Interface_StaticIpv6Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_StaticIpv6Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StaticIpv6Address != nil {
		{
			size, err := m.StaticIpv6Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *Interface_Ipv6AutoConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_Ipv6AutoConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ipv6AutoConfig != nil {
		{
			size, err := m.Ipv6AutoConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *Interface_NoIpv4Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_NoIpv4Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoIpv4Address != nil {
		{
			size, err := m.NoIpv4Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *EthernetInterfaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthernetInterfaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EthernetInterfaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mac) > 0 {
		i -= len(m.Mac)
		copy(dAtA[i:], m.Mac)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Mac)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VlanInterfaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanInterfaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VlanInterfaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VlanId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VlanId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VirtualNetworkConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualNetworkConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualNetworkConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NameserverV6) > 0 {
		i -= len(m.NameserverV6)
		copy(dAtA[i:], m.NameserverV6)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NameserverV6)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.VipV6) > 0 {
		i -= len(m.VipV6)
		copy(dAtA[i:], m.VipV6)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VipV6)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.StaticV6RouteChoice != nil {
		{
			size := m.StaticV6RouteChoice.Size()
			i -= size
			if _, err := m.StaticV6RouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.StaticRouteChoice != nil {
		{
			size := m.StaticRouteChoice.Size()
			i -= size
			if _, err := m.StaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Nameserver) > 0 {
		i -= len(m.Nameserver)
		copy(dAtA[i:], m.Nameserver)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Nameserver)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Vip) > 0 {
		i -= len(m.Vip)
		copy(dAtA[i:], m.Vip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Vip)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
		for iNdEx := len(keysForLabels) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Labels[string(keysForLabels[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForLabels[iNdEx])
			copy(dAtA[i:], keysForLabels[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForLabels[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VirtualNetworkConfiguration_NoStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualNetworkConfiguration_NoStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoStaticRoutes != nil {
		{
			size, err := m.NoStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *VirtualNetworkConfiguration_StaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualNetworkConfiguration_StaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StaticRoutes != nil {
		{
			size, err := m.StaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *VirtualNetworkConfiguration_NoV6StaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualNetworkConfiguration_NoV6StaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoV6StaticRoutes != nil {
		{
			size, err := m.NoV6StaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *VirtualNetworkConfiguration_StaticV6Routes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualNetworkConfiguration_StaticV6Routes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StaticV6Routes != nil {
		{
			size, err := m.StaticV6Routes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *StaticRoutesListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaticRoutesListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StaticRoutesListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StaticRoutes) > 0 {
		for iNdEx := len(m.StaticRoutes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StaticRoutes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LocalVRFSettingType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalVRFSettingType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalVRFSettingType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SliChoice != nil {
		{
			size := m.SliChoice.Size()
			i -= size
			if _, err := m.SliChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SloChoice != nil {
		{
			size := m.SloChoice.Size()
			i -= size
			if _, err := m.SloChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *LocalVRFSettingType_DefaultConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalVRFSettingType_DefaultConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultConfig != nil {
		{
			size, err := m.DefaultConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *LocalVRFSettingType_SloConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalVRFSettingType_SloConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SloConfig != nil {
		{
			size, err := m.SloConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *LocalVRFSettingType_DefaultSliConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalVRFSettingType_DefaultSliConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSliConfig != nil {
		{
			size, err := m.DefaultSliConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *LocalVRFSettingType_SliConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalVRFSettingType_SliConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SliConfig != nil {
		{
			size, err := m.SliConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProviderChoice != nil {
		n += m.ProviderChoice.Size()
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.SoftwareSettings != nil {
		l = m.SoftwareSettings.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UpgradeSettings != nil {
		l = m.UpgradeSettings.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TunnelDeadTimeout != 0 {
		n += 2 + sovTypes(uint64(m.TunnelDeadTimeout))
	}
	if m.LoadBalancing != nil {
		l = m.LoadBalancing.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.S2SConnectivitySliChoice != nil {
		n += m.S2SConnectivitySliChoice.Size()
	}
	if m.S2SConnectivitySloChoice != nil {
		n += m.S2SConnectivitySloChoice.Size()
	}
	if m.LocalVrf != nil {
		l = m.LocalVrf.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TunnelType != 0 {
		n += 2 + sovTypes(uint64(m.TunnelType))
	}
	if m.ReSelect != nil {
		l = m.ReSelect.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.NodeHaChoice != nil {
		n += m.NodeHaChoice.Size()
	}
	if m.SiteState != 0 {
		n += 2 + sovTypes(uint64(m.SiteState))
	}
	if m.AdminUserCredentials != nil {
		l = m.AdminUserCredentials.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ProactiveMonitoring != nil {
		l = m.ProactiveMonitoring.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.EnterpriseProxyChoice != nil {
		n += m.EnterpriseProxyChoice.Size()
	}
	if m.DnsNtpConfig != nil {
		l = m.DnsNtpConfig.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_Vmware) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vmware != nil {
		l = m.Vmware.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Kvm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kvm != nil {
		l = m.Kvm.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Aws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aws != nil {
		l = m.Aws.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Azure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Azure != nil {
		l = m.Azure.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Gcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gcp != nil {
		l = m.Gcp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Rseries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rseries != nil {
		l = m.Rseries.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Baremetal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Baremetal != nil {
		l = m.Baremetal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Oci) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oci != nil {
		l = m.Oci.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BlockAllServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockAllServices != nil {
		l = m.BlockAllServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoS2SConnectivitySli) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoS2SConnectivitySli != nil {
		l = m.NoS2SConnectivitySli.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DcClusterGroupSli) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupSli != nil {
		l = m.DcClusterGroupSli.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoS2SConnectivitySlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoS2SConnectivitySlo != nil {
		l = m.NoS2SConnectivitySlo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SiteMeshGroupOnSlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteMeshGroupOnSlo != nil {
		l = m.SiteMeshGroupOnSlo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DcClusterGroupSlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupSlo != nil {
		l = m.DcClusterGroupSlo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableHa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableHa != nil {
		l = m.DisableHa.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableHa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableHa != nil {
		l = m.EnableHa.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Openstack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Openstack != nil {
		l = m.Openstack.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Nutanix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nutanix != nil {
		l = m.Nutanix.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_F5Proxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5Proxy != nil {
		l = m.F5Proxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CustomProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomProxy != nil {
		l = m.CustomProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DNSNTPServerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsServerChoice != nil {
		n += m.DnsServerChoice.Size()
	}
	if m.NtpServerChoice != nil {
		n += m.NtpServerChoice.Size()
	}
	return n
}

func (m *DNSNTPServerConfig_F5DnsDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5DnsDefault != nil {
		l = m.F5DnsDefault.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DNSNTPServerConfig_CustomDns) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomDns != nil {
		l = m.CustomDns.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DNSNTPServerConfig_F5NtpDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5NtpDefault != nil {
		l = m.F5NtpDefault.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DNSNTPServerConfig_CustomNtp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomNtp != nil {
		l = m.CustomNtp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CustomDNSSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DnsServers) > 0 {
		for _, s := range m.DnsServers {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CustomNTPSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NtpServers) > 0 {
		for _, s := range m.NtpServers {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CustomProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProxyIpAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProxyPort != 0 {
		n += 1 + sovTypes(uint64(m.ProxyPort))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.UseForReTunnelChoice != nil {
		n += m.UseForReTunnelChoice.Size()
	}
	return n
}

func (m *CustomProxy_DisableReTunnel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableReTunnel != nil {
		l = m.DisableReTunnel.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CustomProxy_EnableReTunnel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableReTunnel != nil {
		l = m.EnableReTunnel.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *LoadBalancingSettingsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VipVrrpMode != 0 {
		n += 1 + sovTypes(uint64(m.VipVrrpMode))
	}
	return n
}

func (m *SoftwareSettingsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sw != nil {
		l = m.Sw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Os != nil {
		l = m.Os.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *UpgradeSettingsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KubernetesUpgradeDrain != nil {
		l = m.KubernetesUpgradeDrain.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PublicIp)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.InterfaceList) > 0 {
		for _, e := range m.InterfaceList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SiteMeshGroupType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteMeshGroupIpChoice != nil {
		n += m.SiteMeshGroupIpChoice.Size()
	}
	if m.SiteMeshGroupChoice != nil {
		n += m.SiteMeshGroupChoice.Size()
	}
	return n
}

func (m *SiteMeshGroupType_SmConnectionPublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPublicIp != nil {
		l = m.SmConnectionPublicIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SiteMeshGroupType_SmConnectionPvtIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPvtIp != nil {
		l = m.SmConnectionPvtIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SiteMeshGroupType_NoSiteMeshGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoSiteMeshGroup != nil {
		l = m.NoSiteMeshGroup.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SiteMeshGroupType_SiteMeshGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteMeshGroup != nil {
		l = m.SiteMeshGroup.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VMwareProviderType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		n += m.OrchestrationChoice.Size()
	}
	return n
}

func (m *VMwareProviderType_NotManaged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotManaged != nil {
		l = m.NotManaged.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *KVMProviderType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		n += m.OrchestrationChoice.Size()
	}
	return n
}

func (m *KVMProviderType_NotManaged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotManaged != nil {
		l = m.NotManaged.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSProviderType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		n += m.OrchestrationChoice.Size()
	}
	return n
}

func (m *AWSProviderType_NotManaged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotManaged != nil {
		l = m.NotManaged.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSProviderType_Managed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Managed != nil {
		l = m.Managed.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AzureProviderType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		n += m.OrchestrationChoice.Size()
	}
	return n
}

func (m *AzureProviderType_NotManaged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotManaged != nil {
		l = m.NotManaged.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GCPProviderType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		n += m.OrchestrationChoice.Size()
	}
	return n
}

func (m *GCPProviderType_NotManaged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotManaged != nil {
		l = m.NotManaged.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *BaremetalProviderType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		n += m.OrchestrationChoice.Size()
	}
	return n
}

func (m *BaremetalProviderType_NotManaged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotManaged != nil {
		l = m.NotManaged.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OCIProviderType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		n += m.OrchestrationChoice.Size()
	}
	return n
}

func (m *OCIProviderType_NotManaged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotManaged != nil {
		l = m.NotManaged.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RSeriesProviderType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		n += m.OrchestrationChoice.Size()
	}
	return n
}

func (m *RSeriesProviderType_NotManaged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotManaged != nil {
		l = m.NotManaged.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OpenstackProviderType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		n += m.OrchestrationChoice.Size()
	}
	return n
}

func (m *OpenstackProviderType_NotManaged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotManaged != nil {
		l = m.NotManaged.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *NutanixProviderType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrchestrationChoice != nil {
		n += m.OrchestrationChoice.Size()
	}
	return n
}

func (m *NutanixProviderType_NotManaged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotManaged != nil {
		l = m.NotManaged.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *NodeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeList) > 0 {
		for _, e := range m.NodeList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProviderChoice != nil {
		n += m.ProviderChoice.Size()
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.SoftwareSettings != nil {
		l = m.SoftwareSettings.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UpgradeSettings != nil {
		l = m.UpgradeSettings.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TunnelDeadTimeout != 0 {
		n += 2 + sovTypes(uint64(m.TunnelDeadTimeout))
	}
	if m.LoadBalancing != nil {
		l = m.LoadBalancing.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.S2SConnectivitySliChoice != nil {
		n += m.S2SConnectivitySliChoice.Size()
	}
	if m.S2SConnectivitySloChoice != nil {
		n += m.S2SConnectivitySloChoice.Size()
	}
	if m.LocalVrf != nil {
		l = m.LocalVrf.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TunnelType != 0 {
		n += 2 + sovTypes(uint64(m.TunnelType))
	}
	if m.ReSelect != nil {
		l = m.ReSelect.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.NodeHaChoice != nil {
		n += m.NodeHaChoice.Size()
	}
	if m.AdminUserCredentials != nil {
		l = m.AdminUserCredentials.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ProactiveMonitoring != nil {
		l = m.ProactiveMonitoring.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.EnterpriseProxyChoice != nil {
		n += m.EnterpriseProxyChoice.Size()
	}
	if m.DnsNtpConfig != nil {
		l = m.DnsNtpConfig.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType_Vmware) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vmware != nil {
		l = m.Vmware.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Kvm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kvm != nil {
		l = m.Kvm.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Aws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aws != nil {
		l = m.Aws.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Azure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Azure != nil {
		l = m.Azure.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Gcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gcp != nil {
		l = m.Gcp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Rseries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rseries != nil {
		l = m.Rseries.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Baremetal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Baremetal != nil {
		l = m.Baremetal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Oci) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oci != nil {
		l = m.Oci.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BlockAllServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockAllServices != nil {
		l = m.BlockAllServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoS2SConnectivitySli) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoS2SConnectivitySli != nil {
		l = m.NoS2SConnectivitySli.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DcClusterGroupSli) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupSli != nil {
		l = m.DcClusterGroupSli.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoS2SConnectivitySlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoS2SConnectivitySlo != nil {
		l = m.NoS2SConnectivitySlo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SiteMeshGroupOnSlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteMeshGroupOnSlo != nil {
		l = m.SiteMeshGroupOnSlo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DcClusterGroupSlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupSlo != nil {
		l = m.DcClusterGroupSlo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableHa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableHa != nil {
		l = m.DisableHa.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableHa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableHa != nil {
		l = m.EnableHa.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Openstack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Openstack != nil {
		l = m.Openstack.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Nutanix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nutanix != nil {
		l = m.Nutanix.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_F5Proxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5Proxy != nil {
		l = m.F5Proxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CustomProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomProxy != nil {
		l = m.CustomProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProviderChoice != nil {
		n += m.ProviderChoice.Size()
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.SoftwareSettings != nil {
		l = m.SoftwareSettings.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UpgradeSettings != nil {
		l = m.UpgradeSettings.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TunnelDeadTimeout != 0 {
		n += 2 + sovTypes(uint64(m.TunnelDeadTimeout))
	}
	if m.LoadBalancing != nil {
		l = m.LoadBalancing.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.S2SConnectivitySliChoice != nil {
		n += m.S2SConnectivitySliChoice.Size()
	}
	if m.S2SConnectivitySloChoice != nil {
		n += m.S2SConnectivitySloChoice.Size()
	}
	if m.LocalVrf != nil {
		l = m.LocalVrf.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TunnelType != 0 {
		n += 2 + sovTypes(uint64(m.TunnelType))
	}
	if m.ReSelect != nil {
		l = m.ReSelect.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.NodeHaChoice != nil {
		n += m.NodeHaChoice.Size()
	}
	if m.AdminUserCredentials != nil {
		l = m.AdminUserCredentials.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ProactiveMonitoring != nil {
		l = m.ProactiveMonitoring.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.EnterpriseProxyChoice != nil {
		n += m.EnterpriseProxyChoice.Size()
	}
	if m.DnsNtpConfig != nil {
		l = m.DnsNtpConfig.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType_Vmware) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vmware != nil {
		l = m.Vmware.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Kvm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kvm != nil {
		l = m.Kvm.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Aws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aws != nil {
		l = m.Aws.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Azure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Azure != nil {
		l = m.Azure.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Gcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gcp != nil {
		l = m.Gcp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Rseries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rseries != nil {
		l = m.Rseries.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Baremetal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Baremetal != nil {
		l = m.Baremetal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Oci) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oci != nil {
		l = m.Oci.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BlockAllServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockAllServices != nil {
		l = m.BlockAllServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoS2SConnectivitySli) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoS2SConnectivitySli != nil {
		l = m.NoS2SConnectivitySli.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DcClusterGroupSli) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupSli != nil {
		l = m.DcClusterGroupSli.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoS2SConnectivitySlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoS2SConnectivitySlo != nil {
		l = m.NoS2SConnectivitySlo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SiteMeshGroupOnSlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteMeshGroupOnSlo != nil {
		l = m.SiteMeshGroupOnSlo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DcClusterGroupSlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupSlo != nil {
		l = m.DcClusterGroupSlo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableHa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableHa != nil {
		l = m.DisableHa.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableHa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableHa != nil {
		l = m.EnableHa.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Openstack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Openstack != nil {
		l = m.Openstack.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Nutanix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nutanix != nil {
		l = m.Nutanix.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_F5Proxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5Proxy != nil {
		l = m.F5Proxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CustomProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomProxy != nil {
		l = m.CustomProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProviderChoice != nil {
		n += m.ProviderChoice.Size()
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.SoftwareSettings != nil {
		l = m.SoftwareSettings.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UpgradeSettings != nil {
		l = m.UpgradeSettings.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TunnelDeadTimeout != 0 {
		n += 2 + sovTypes(uint64(m.TunnelDeadTimeout))
	}
	if m.LoadBalancing != nil {
		l = m.LoadBalancing.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.S2SConnectivitySliChoice != nil {
		n += m.S2SConnectivitySliChoice.Size()
	}
	if m.S2SConnectivitySloChoice != nil {
		n += m.S2SConnectivitySloChoice.Size()
	}
	if m.LocalVrf != nil {
		l = m.LocalVrf.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.TunnelType != 0 {
		n += 2 + sovTypes(uint64(m.TunnelType))
	}
	if m.ReSelect != nil {
		l = m.ReSelect.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.NodeHaChoice != nil {
		n += m.NodeHaChoice.Size()
	}
	if m.SiteState != 0 {
		n += 2 + sovTypes(uint64(m.SiteState))
	}
	if m.AdminUserCredentials != nil {
		l = m.AdminUserCredentials.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ProactiveMonitoring != nil {
		l = m.ProactiveMonitoring.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.EnterpriseProxyChoice != nil {
		n += m.EnterpriseProxyChoice.Size()
	}
	if m.DnsNtpConfig != nil {
		l = m.DnsNtpConfig.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType_Vmware) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vmware != nil {
		l = m.Vmware.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Kvm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kvm != nil {
		l = m.Kvm.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Aws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aws != nil {
		l = m.Aws.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Azure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Azure != nil {
		l = m.Azure.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Gcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gcp != nil {
		l = m.Gcp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Rseries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rseries != nil {
		l = m.Rseries.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Baremetal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Baremetal != nil {
		l = m.Baremetal.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Oci) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oci != nil {
		l = m.Oci.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BlockAllServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockAllServices != nil {
		l = m.BlockAllServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoS2SConnectivitySli) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoS2SConnectivitySli != nil {
		l = m.NoS2SConnectivitySli.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DcClusterGroupSli) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupSli != nil {
		l = m.DcClusterGroupSli.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoS2SConnectivitySlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoS2SConnectivitySlo != nil {
		l = m.NoS2SConnectivitySlo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SiteMeshGroupOnSlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteMeshGroupOnSlo != nil {
		l = m.SiteMeshGroupOnSlo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DcClusterGroupSlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupSlo != nil {
		l = m.DcClusterGroupSlo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableHa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableHa != nil {
		l = m.DisableHa.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableHa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableHa != nil {
		l = m.EnableHa.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Openstack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Openstack != nil {
		l = m.Openstack.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Nutanix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nutanix != nil {
		l = m.Nutanix.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_F5Proxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5Proxy != nil {
		l = m.F5Proxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CustomProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomProxy != nil {
		l = m.CustomProxy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.InterfaceChoice != nil {
		n += m.InterfaceChoice.Size()
	}
	if m.AddressChoice != nil {
		n += m.AddressChoice.Size()
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Mtu != 0 {
		n += 1 + sovTypes(uint64(m.Mtu))
	}
	if m.NetworkOption != nil {
		l = m.NetworkOption.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MonitoringChoice != nil {
		n += m.MonitoringChoice.Size()
	}
	if m.Priority != 0 {
		n += 2 + sovTypes(uint64(m.Priority))
	}
	if m.SiteToSiteConnectivityInterfaceChoice != nil {
		n += m.SiteToSiteConnectivityInterfaceChoice.Size()
	}
	if m.IsPrimary {
		n += 3
	}
	if m.IsManagement {
		n += 3
	}
	if m.Ipv6AddressChoice != nil {
		n += m.Ipv6AddressChoice.Size()
	}
	return n
}

func (m *Interface_EthernetInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EthernetInterface != nil {
		l = m.EthernetInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_VlanInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VlanInterface != nil {
		l = m.VlanInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_BondInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BondInterface != nil {
		l = m.BondInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_DhcpClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DhcpClient != nil {
		l = m.DhcpClient.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_StaticIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StaticIp != nil {
		l = m.StaticIp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_MonitorDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MonitorDisabled != nil {
		l = m.MonitorDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_Monitor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Monitor != nil {
		l = m.Monitor.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_SiteToSiteConnectivityInterfaceDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteToSiteConnectivityInterfaceDisabled != nil {
		l = m.SiteToSiteConnectivityInterfaceDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_SiteToSiteConnectivityInterfaceEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SiteToSiteConnectivityInterfaceEnabled != nil {
		l = m.SiteToSiteConnectivityInterfaceEnabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_DhcpServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DhcpServer != nil {
		l = m.DhcpServer.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_NoIpv6Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoIpv6Address != nil {
		l = m.NoIpv6Address.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_StaticIpv6Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StaticIpv6Address != nil {
		l = m.StaticIpv6Address.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_Ipv6AutoConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv6AutoConfig != nil {
		l = m.Ipv6AutoConfig.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_NoIpv4Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoIpv4Address != nil {
		l = m.NoIpv4Address.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *EthernetInterfaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Mac)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *VlanInterfaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VlanId != 0 {
		n += 1 + sovTypes(uint64(m.VlanId))
	}
	return n
}

func (m *VirtualNetworkConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	l = len(m.Vip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Nameserver)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StaticRouteChoice != nil {
		n += m.StaticRouteChoice.Size()
	}
	if m.StaticV6RouteChoice != nil {
		n += m.StaticV6RouteChoice.Size()
	}
	l = len(m.VipV6)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.NameserverV6)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *VirtualNetworkConfiguration_NoStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoStaticRoutes != nil {
		l = m.NoStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VirtualNetworkConfiguration_StaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StaticRoutes != nil {
		l = m.StaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VirtualNetworkConfiguration_NoV6StaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoV6StaticRoutes != nil {
		l = m.NoV6StaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VirtualNetworkConfiguration_StaticV6Routes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StaticV6Routes != nil {
		l = m.StaticV6Routes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *StaticRoutesListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StaticRoutes) > 0 {
		for _, e := range m.StaticRoutes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *LocalVRFSettingType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SloChoice != nil {
		n += m.SloChoice.Size()
	}
	if m.SliChoice != nil {
		n += m.SliChoice.Size()
	}
	return n
}

func (m *LocalVRFSettingType_DefaultConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultConfig != nil {
		l = m.DefaultConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *LocalVRFSettingType_SloConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SloConfig != nil {
		l = m.SloConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *LocalVRFSettingType_DefaultSliConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSliConfig != nil {
		l = m.DefaultSliConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *LocalVRFSettingType_SliConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SliConfig != nil {
		l = m.SliConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`ProviderChoice:` + fmt.Sprintf("%v", this.ProviderChoice) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`SoftwareSettings:` + strings.Replace(this.SoftwareSettings.String(), "SoftwareSettingsType", "SoftwareSettingsType", 1) + `,`,
		`UpgradeSettings:` + strings.Replace(this.UpgradeSettings.String(), "UpgradeSettingsType", "UpgradeSettingsType", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`TunnelDeadTimeout:` + fmt.Sprintf("%v", this.TunnelDeadTimeout) + `,`,
		`LoadBalancing:` + strings.Replace(this.LoadBalancing.String(), "LoadBalancingSettingsType", "LoadBalancingSettingsType", 1) + `,`,
		`S2SConnectivitySliChoice:` + fmt.Sprintf("%v", this.S2SConnectivitySliChoice) + `,`,
		`S2SConnectivitySloChoice:` + fmt.Sprintf("%v", this.S2SConnectivitySloChoice) + `,`,
		`LocalVrf:` + strings.Replace(this.LocalVrf.String(), "LocalVRFSettingType", "LocalVRFSettingType", 1) + `,`,
		`TunnelType:` + fmt.Sprintf("%v", this.TunnelType) + `,`,
		`ReSelect:` + strings.Replace(fmt.Sprintf("%v", this.ReSelect), "RegionalEdgeSelection", "views.RegionalEdgeSelection", 1) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`NodeHaChoice:` + fmt.Sprintf("%v", this.NodeHaChoice) + `,`,
		`SiteState:` + fmt.Sprintf("%v", this.SiteState) + `,`,
		`AdminUserCredentials:` + strings.Replace(fmt.Sprintf("%v", this.AdminUserCredentials), "AdminUserCredentialsType", "views.AdminUserCredentialsType", 1) + `,`,
		`ProactiveMonitoring:` + strings.Replace(fmt.Sprintf("%v", this.ProactiveMonitoring), "ProactiveMonitoringChoice", "views.ProactiveMonitoringChoice", 1) + `,`,
		`EnterpriseProxyChoice:` + fmt.Sprintf("%v", this.EnterpriseProxyChoice) + `,`,
		`DnsNtpConfig:` + strings.Replace(this.DnsNtpConfig.String(), "DNSNTPServerConfig", "DNSNTPServerConfig", 1) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Vmware) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Vmware{`,
		`Vmware:` + strings.Replace(fmt.Sprintf("%v", this.Vmware), "VMwareProviderType", "VMwareProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Kvm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Kvm{`,
		`Kvm:` + strings.Replace(fmt.Sprintf("%v", this.Kvm), "KVMProviderType", "KVMProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Aws) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Aws{`,
		`Aws:` + strings.Replace(fmt.Sprintf("%v", this.Aws), "AWSProviderType", "AWSProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Azure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Azure{`,
		`Azure:` + strings.Replace(fmt.Sprintf("%v", this.Azure), "AzureProviderType", "AzureProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Gcp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Gcp{`,
		`Gcp:` + strings.Replace(fmt.Sprintf("%v", this.Gcp), "GCPProviderType", "GCPProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Rseries) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Rseries{`,
		`Rseries:` + strings.Replace(fmt.Sprintf("%v", this.Rseries), "RSeriesProviderType", "RSeriesProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Baremetal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Baremetal{`,
		`Baremetal:` + strings.Replace(fmt.Sprintf("%v", this.Baremetal), "BaremetalProviderType", "BaremetalProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Oci) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Oci{`,
		`Oci:` + strings.Replace(fmt.Sprintf("%v", this.Oci), "OCIProviderType", "OCIProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BlockAllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BlockAllServices{`,
		`BlockAllServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockAllServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoS2SConnectivitySli) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoS2SConnectivitySli{`,
		`NoS2SConnectivitySli:` + strings.Replace(fmt.Sprintf("%v", this.NoS2SConnectivitySli), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DcClusterGroupSli) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DcClusterGroupSli{`,
		`DcClusterGroupSli:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupSli), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoS2SConnectivitySlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoS2SConnectivitySlo{`,
		`NoS2SConnectivitySlo:` + strings.Replace(fmt.Sprintf("%v", this.NoS2SConnectivitySlo), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SiteMeshGroupOnSlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SiteMeshGroupOnSlo{`,
		`SiteMeshGroupOnSlo:` + strings.Replace(fmt.Sprintf("%v", this.SiteMeshGroupOnSlo), "SiteMeshGroupType", "SiteMeshGroupType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DcClusterGroupSlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DcClusterGroupSlo{`,
		`DcClusterGroupSlo:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupSlo), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableHa) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableHa{`,
		`DisableHa:` + strings.Replace(fmt.Sprintf("%v", this.DisableHa), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableHa) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableHa{`,
		`EnableHa:` + strings.Replace(fmt.Sprintf("%v", this.EnableHa), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Openstack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Openstack{`,
		`Openstack:` + strings.Replace(fmt.Sprintf("%v", this.Openstack), "OpenstackProviderType", "OpenstackProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Nutanix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Nutanix{`,
		`Nutanix:` + strings.Replace(fmt.Sprintf("%v", this.Nutanix), "NutanixProviderType", "NutanixProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_F5Proxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_F5Proxy{`,
		`F5Proxy:` + strings.Replace(fmt.Sprintf("%v", this.F5Proxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CustomProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CustomProxy{`,
		`CustomProxy:` + strings.Replace(fmt.Sprintf("%v", this.CustomProxy), "CustomProxy", "CustomProxy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSNTPServerConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSNTPServerConfig{`,
		`DnsServerChoice:` + fmt.Sprintf("%v", this.DnsServerChoice) + `,`,
		`NtpServerChoice:` + fmt.Sprintf("%v", this.NtpServerChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSNTPServerConfig_F5DnsDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSNTPServerConfig_F5DnsDefault{`,
		`F5DnsDefault:` + strings.Replace(fmt.Sprintf("%v", this.F5DnsDefault), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSNTPServerConfig_CustomDns) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSNTPServerConfig_CustomDns{`,
		`CustomDns:` + strings.Replace(fmt.Sprintf("%v", this.CustomDns), "CustomDNSSettings", "CustomDNSSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSNTPServerConfig_F5NtpDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSNTPServerConfig_F5NtpDefault{`,
		`F5NtpDefault:` + strings.Replace(fmt.Sprintf("%v", this.F5NtpDefault), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSNTPServerConfig_CustomNtp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSNTPServerConfig_CustomNtp{`,
		`CustomNtp:` + strings.Replace(fmt.Sprintf("%v", this.CustomNtp), "CustomNTPSettings", "CustomNTPSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomDNSSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomDNSSettings{`,
		`DnsServers:` + fmt.Sprintf("%v", this.DnsServers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomNTPSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomNTPSettings{`,
		`NtpServers:` + fmt.Sprintf("%v", this.NtpServers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomProxy{`,
		`ProxyIpAddress:` + fmt.Sprintf("%v", this.ProxyIpAddress) + `,`,
		`ProxyPort:` + fmt.Sprintf("%v", this.ProxyPort) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + strings.Replace(fmt.Sprintf("%v", this.Password), "SecretType", "schema.SecretType", 1) + `,`,
		`UseForReTunnelChoice:` + fmt.Sprintf("%v", this.UseForReTunnelChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomProxy_DisableReTunnel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomProxy_DisableReTunnel{`,
		`DisableReTunnel:` + strings.Replace(fmt.Sprintf("%v", this.DisableReTunnel), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomProxy_EnableReTunnel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomProxy_EnableReTunnel{`,
		`EnableReTunnel:` + strings.Replace(fmt.Sprintf("%v", this.EnableReTunnel), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadBalancingSettingsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadBalancingSettingsType{`,
		`VipVrrpMode:` + fmt.Sprintf("%v", this.VipVrrpMode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SoftwareSettingsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SoftwareSettingsType{`,
		`Sw:` + strings.Replace(fmt.Sprintf("%v", this.Sw), "VolterraSoftwareType", "views.VolterraSoftwareType", 1) + `,`,
		`Os:` + strings.Replace(fmt.Sprintf("%v", this.Os), "OperatingSystemType", "views.OperatingSystemType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpgradeSettingsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpgradeSettingsType{`,
		`KubernetesUpgradeDrain:` + strings.Replace(fmt.Sprintf("%v", this.KubernetesUpgradeDrain), "KubernetesUpgradeDrain", "views.KubernetesUpgradeDrain", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Node) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInterfaceList := "[]*Interface{"
	for _, f := range this.InterfaceList {
		repeatedStringForInterfaceList += strings.Replace(f.String(), "Interface", "Interface", 1) + ","
	}
	repeatedStringForInterfaceList += "}"
	s := strings.Join([]string{`&Node{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`PublicIp:` + fmt.Sprintf("%v", this.PublicIp) + `,`,
		`InterfaceList:` + repeatedStringForInterfaceList + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteMeshGroupType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteMeshGroupType{`,
		`SiteMeshGroupIpChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupIpChoice) + `,`,
		`SiteMeshGroupChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteMeshGroupType_SmConnectionPublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteMeshGroupType_SmConnectionPublicIp{`,
		`SmConnectionPublicIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPublicIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteMeshGroupType_SmConnectionPvtIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteMeshGroupType_SmConnectionPvtIp{`,
		`SmConnectionPvtIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPvtIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteMeshGroupType_NoSiteMeshGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteMeshGroupType_NoSiteMeshGroup{`,
		`NoSiteMeshGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoSiteMeshGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteMeshGroupType_SiteMeshGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteMeshGroupType_SiteMeshGroup{`,
		`SiteMeshGroup:` + strings.Replace(fmt.Sprintf("%v", this.SiteMeshGroup), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VMwareProviderType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VMwareProviderType{`,
		`OrchestrationChoice:` + fmt.Sprintf("%v", this.OrchestrationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VMwareProviderType_NotManaged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VMwareProviderType_NotManaged{`,
		`NotManaged:` + strings.Replace(fmt.Sprintf("%v", this.NotManaged), "NodeList", "NodeList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KVMProviderType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KVMProviderType{`,
		`OrchestrationChoice:` + fmt.Sprintf("%v", this.OrchestrationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KVMProviderType_NotManaged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KVMProviderType_NotManaged{`,
		`NotManaged:` + strings.Replace(fmt.Sprintf("%v", this.NotManaged), "NodeList", "NodeList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSProviderType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSProviderType{`,
		`OrchestrationChoice:` + fmt.Sprintf("%v", this.OrchestrationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSProviderType_NotManaged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSProviderType_NotManaged{`,
		`NotManaged:` + strings.Replace(fmt.Sprintf("%v", this.NotManaged), "NodeList", "NodeList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSProviderType_Managed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSProviderType_Managed{`,
		`Managed:` + strings.Replace(fmt.Sprintf("%v", this.Managed), "AWSManagedMode", "AWSManagedMode", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureProviderType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureProviderType{`,
		`OrchestrationChoice:` + fmt.Sprintf("%v", this.OrchestrationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureProviderType_NotManaged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureProviderType_NotManaged{`,
		`NotManaged:` + strings.Replace(fmt.Sprintf("%v", this.NotManaged), "NodeList", "NodeList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GCPProviderType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GCPProviderType{`,
		`OrchestrationChoice:` + fmt.Sprintf("%v", this.OrchestrationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GCPProviderType_NotManaged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GCPProviderType_NotManaged{`,
		`NotManaged:` + strings.Replace(fmt.Sprintf("%v", this.NotManaged), "NodeList", "NodeList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BaremetalProviderType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BaremetalProviderType{`,
		`OrchestrationChoice:` + fmt.Sprintf("%v", this.OrchestrationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BaremetalProviderType_NotManaged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BaremetalProviderType_NotManaged{`,
		`NotManaged:` + strings.Replace(fmt.Sprintf("%v", this.NotManaged), "NodeList", "NodeList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OCIProviderType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OCIProviderType{`,
		`OrchestrationChoice:` + fmt.Sprintf("%v", this.OrchestrationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OCIProviderType_NotManaged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OCIProviderType_NotManaged{`,
		`NotManaged:` + strings.Replace(fmt.Sprintf("%v", this.NotManaged), "NodeList", "NodeList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RSeriesProviderType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RSeriesProviderType{`,
		`OrchestrationChoice:` + fmt.Sprintf("%v", this.OrchestrationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RSeriesProviderType_NotManaged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RSeriesProviderType_NotManaged{`,
		`NotManaged:` + strings.Replace(fmt.Sprintf("%v", this.NotManaged), "NodeList", "NodeList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenstackProviderType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenstackProviderType{`,
		`OrchestrationChoice:` + fmt.Sprintf("%v", this.OrchestrationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenstackProviderType_NotManaged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenstackProviderType_NotManaged{`,
		`NotManaged:` + strings.Replace(fmt.Sprintf("%v", this.NotManaged), "NodeList", "NodeList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NutanixProviderType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NutanixProviderType{`,
		`OrchestrationChoice:` + fmt.Sprintf("%v", this.OrchestrationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NutanixProviderType_NotManaged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NutanixProviderType_NotManaged{`,
		`NotManaged:` + strings.Replace(fmt.Sprintf("%v", this.NotManaged), "NodeList", "NodeList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodeList := "[]*Node{"
	for _, f := range this.NodeList {
		repeatedStringForNodeList += strings.Replace(f.String(), "Node", "Node", 1) + ","
	}
	repeatedStringForNodeList += "}"
	s := strings.Join([]string{`&NodeList{`,
		`NodeList:` + repeatedStringForNodeList + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`ProviderChoice:` + fmt.Sprintf("%v", this.ProviderChoice) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`SoftwareSettings:` + strings.Replace(this.SoftwareSettings.String(), "SoftwareSettingsType", "SoftwareSettingsType", 1) + `,`,
		`UpgradeSettings:` + strings.Replace(this.UpgradeSettings.String(), "UpgradeSettingsType", "UpgradeSettingsType", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`TunnelDeadTimeout:` + fmt.Sprintf("%v", this.TunnelDeadTimeout) + `,`,
		`LoadBalancing:` + strings.Replace(this.LoadBalancing.String(), "LoadBalancingSettingsType", "LoadBalancingSettingsType", 1) + `,`,
		`S2SConnectivitySliChoice:` + fmt.Sprintf("%v", this.S2SConnectivitySliChoice) + `,`,
		`S2SConnectivitySloChoice:` + fmt.Sprintf("%v", this.S2SConnectivitySloChoice) + `,`,
		`LocalVrf:` + strings.Replace(this.LocalVrf.String(), "LocalVRFSettingType", "LocalVRFSettingType", 1) + `,`,
		`TunnelType:` + fmt.Sprintf("%v", this.TunnelType) + `,`,
		`ReSelect:` + strings.Replace(fmt.Sprintf("%v", this.ReSelect), "RegionalEdgeSelection", "views.RegionalEdgeSelection", 1) + `,`,
		`NodeHaChoice:` + fmt.Sprintf("%v", this.NodeHaChoice) + `,`,
		`AdminUserCredentials:` + strings.Replace(fmt.Sprintf("%v", this.AdminUserCredentials), "AdminUserCredentialsType", "views.AdminUserCredentialsType", 1) + `,`,
		`ProactiveMonitoring:` + strings.Replace(fmt.Sprintf("%v", this.ProactiveMonitoring), "ProactiveMonitoringChoice", "views.ProactiveMonitoringChoice", 1) + `,`,
		`EnterpriseProxyChoice:` + fmt.Sprintf("%v", this.EnterpriseProxyChoice) + `,`,
		`DnsNtpConfig:` + strings.Replace(this.DnsNtpConfig.String(), "DNSNTPServerConfig", "DNSNTPServerConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Vmware) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Vmware{`,
		`Vmware:` + strings.Replace(fmt.Sprintf("%v", this.Vmware), "VMwareProviderType", "VMwareProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Kvm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Kvm{`,
		`Kvm:` + strings.Replace(fmt.Sprintf("%v", this.Kvm), "KVMProviderType", "KVMProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Aws) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Aws{`,
		`Aws:` + strings.Replace(fmt.Sprintf("%v", this.Aws), "AWSProviderType", "AWSProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Azure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Azure{`,
		`Azure:` + strings.Replace(fmt.Sprintf("%v", this.Azure), "AzureProviderType", "AzureProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Gcp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Gcp{`,
		`Gcp:` + strings.Replace(fmt.Sprintf("%v", this.Gcp), "GCPProviderType", "GCPProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Rseries) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Rseries{`,
		`Rseries:` + strings.Replace(fmt.Sprintf("%v", this.Rseries), "RSeriesProviderType", "RSeriesProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Baremetal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Baremetal{`,
		`Baremetal:` + strings.Replace(fmt.Sprintf("%v", this.Baremetal), "BaremetalProviderType", "BaremetalProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Oci) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Oci{`,
		`Oci:` + strings.Replace(fmt.Sprintf("%v", this.Oci), "OCIProviderType", "OCIProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BlockAllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BlockAllServices{`,
		`BlockAllServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockAllServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoS2SConnectivitySli) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoS2SConnectivitySli{`,
		`NoS2SConnectivitySli:` + strings.Replace(fmt.Sprintf("%v", this.NoS2SConnectivitySli), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DcClusterGroupSli) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DcClusterGroupSli{`,
		`DcClusterGroupSli:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupSli), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoS2SConnectivitySlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoS2SConnectivitySlo{`,
		`NoS2SConnectivitySlo:` + strings.Replace(fmt.Sprintf("%v", this.NoS2SConnectivitySlo), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SiteMeshGroupOnSlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SiteMeshGroupOnSlo{`,
		`SiteMeshGroupOnSlo:` + strings.Replace(fmt.Sprintf("%v", this.SiteMeshGroupOnSlo), "SiteMeshGroupType", "SiteMeshGroupType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DcClusterGroupSlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DcClusterGroupSlo{`,
		`DcClusterGroupSlo:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupSlo), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableHa) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableHa{`,
		`DisableHa:` + strings.Replace(fmt.Sprintf("%v", this.DisableHa), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableHa) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableHa{`,
		`EnableHa:` + strings.Replace(fmt.Sprintf("%v", this.EnableHa), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Openstack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Openstack{`,
		`Openstack:` + strings.Replace(fmt.Sprintf("%v", this.Openstack), "OpenstackProviderType", "OpenstackProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Nutanix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Nutanix{`,
		`Nutanix:` + strings.Replace(fmt.Sprintf("%v", this.Nutanix), "NutanixProviderType", "NutanixProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_F5Proxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_F5Proxy{`,
		`F5Proxy:` + strings.Replace(fmt.Sprintf("%v", this.F5Proxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CustomProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CustomProxy{`,
		`CustomProxy:` + strings.Replace(fmt.Sprintf("%v", this.CustomProxy), "CustomProxy", "CustomProxy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`ProviderChoice:` + fmt.Sprintf("%v", this.ProviderChoice) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`SoftwareSettings:` + strings.Replace(this.SoftwareSettings.String(), "SoftwareSettingsType", "SoftwareSettingsType", 1) + `,`,
		`UpgradeSettings:` + strings.Replace(this.UpgradeSettings.String(), "UpgradeSettingsType", "UpgradeSettingsType", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`TunnelDeadTimeout:` + fmt.Sprintf("%v", this.TunnelDeadTimeout) + `,`,
		`LoadBalancing:` + strings.Replace(this.LoadBalancing.String(), "LoadBalancingSettingsType", "LoadBalancingSettingsType", 1) + `,`,
		`S2SConnectivitySliChoice:` + fmt.Sprintf("%v", this.S2SConnectivitySliChoice) + `,`,
		`S2SConnectivitySloChoice:` + fmt.Sprintf("%v", this.S2SConnectivitySloChoice) + `,`,
		`LocalVrf:` + strings.Replace(this.LocalVrf.String(), "LocalVRFSettingType", "LocalVRFSettingType", 1) + `,`,
		`TunnelType:` + fmt.Sprintf("%v", this.TunnelType) + `,`,
		`ReSelect:` + strings.Replace(fmt.Sprintf("%v", this.ReSelect), "RegionalEdgeSelection", "views.RegionalEdgeSelection", 1) + `,`,
		`NodeHaChoice:` + fmt.Sprintf("%v", this.NodeHaChoice) + `,`,
		`AdminUserCredentials:` + strings.Replace(fmt.Sprintf("%v", this.AdminUserCredentials), "AdminUserCredentialsType", "views.AdminUserCredentialsType", 1) + `,`,
		`ProactiveMonitoring:` + strings.Replace(fmt.Sprintf("%v", this.ProactiveMonitoring), "ProactiveMonitoringChoice", "views.ProactiveMonitoringChoice", 1) + `,`,
		`EnterpriseProxyChoice:` + fmt.Sprintf("%v", this.EnterpriseProxyChoice) + `,`,
		`DnsNtpConfig:` + strings.Replace(this.DnsNtpConfig.String(), "DNSNTPServerConfig", "DNSNTPServerConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Vmware) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Vmware{`,
		`Vmware:` + strings.Replace(fmt.Sprintf("%v", this.Vmware), "VMwareProviderType", "VMwareProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Kvm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Kvm{`,
		`Kvm:` + strings.Replace(fmt.Sprintf("%v", this.Kvm), "KVMProviderType", "KVMProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Aws) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Aws{`,
		`Aws:` + strings.Replace(fmt.Sprintf("%v", this.Aws), "AWSProviderType", "AWSProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Azure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Azure{`,
		`Azure:` + strings.Replace(fmt.Sprintf("%v", this.Azure), "AzureProviderType", "AzureProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Gcp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Gcp{`,
		`Gcp:` + strings.Replace(fmt.Sprintf("%v", this.Gcp), "GCPProviderType", "GCPProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Rseries) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Rseries{`,
		`Rseries:` + strings.Replace(fmt.Sprintf("%v", this.Rseries), "RSeriesProviderType", "RSeriesProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Baremetal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Baremetal{`,
		`Baremetal:` + strings.Replace(fmt.Sprintf("%v", this.Baremetal), "BaremetalProviderType", "BaremetalProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Oci) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Oci{`,
		`Oci:` + strings.Replace(fmt.Sprintf("%v", this.Oci), "OCIProviderType", "OCIProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BlockAllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BlockAllServices{`,
		`BlockAllServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockAllServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoS2SConnectivitySli) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoS2SConnectivitySli{`,
		`NoS2SConnectivitySli:` + strings.Replace(fmt.Sprintf("%v", this.NoS2SConnectivitySli), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DcClusterGroupSli) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DcClusterGroupSli{`,
		`DcClusterGroupSli:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupSli), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoS2SConnectivitySlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoS2SConnectivitySlo{`,
		`NoS2SConnectivitySlo:` + strings.Replace(fmt.Sprintf("%v", this.NoS2SConnectivitySlo), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SiteMeshGroupOnSlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SiteMeshGroupOnSlo{`,
		`SiteMeshGroupOnSlo:` + strings.Replace(fmt.Sprintf("%v", this.SiteMeshGroupOnSlo), "SiteMeshGroupType", "SiteMeshGroupType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DcClusterGroupSlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DcClusterGroupSlo{`,
		`DcClusterGroupSlo:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupSlo), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableHa) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableHa{`,
		`DisableHa:` + strings.Replace(fmt.Sprintf("%v", this.DisableHa), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableHa) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableHa{`,
		`EnableHa:` + strings.Replace(fmt.Sprintf("%v", this.EnableHa), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Openstack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Openstack{`,
		`Openstack:` + strings.Replace(fmt.Sprintf("%v", this.Openstack), "OpenstackProviderType", "OpenstackProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Nutanix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Nutanix{`,
		`Nutanix:` + strings.Replace(fmt.Sprintf("%v", this.Nutanix), "NutanixProviderType", "NutanixProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_F5Proxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_F5Proxy{`,
		`F5Proxy:` + strings.Replace(fmt.Sprintf("%v", this.F5Proxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CustomProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CustomProxy{`,
		`CustomProxy:` + strings.Replace(fmt.Sprintf("%v", this.CustomProxy), "CustomProxy", "CustomProxy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`ProviderChoice:` + fmt.Sprintf("%v", this.ProviderChoice) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`SoftwareSettings:` + strings.Replace(this.SoftwareSettings.String(), "SoftwareSettingsType", "SoftwareSettingsType", 1) + `,`,
		`UpgradeSettings:` + strings.Replace(this.UpgradeSettings.String(), "UpgradeSettingsType", "UpgradeSettingsType", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`TunnelDeadTimeout:` + fmt.Sprintf("%v", this.TunnelDeadTimeout) + `,`,
		`LoadBalancing:` + strings.Replace(this.LoadBalancing.String(), "LoadBalancingSettingsType", "LoadBalancingSettingsType", 1) + `,`,
		`S2SConnectivitySliChoice:` + fmt.Sprintf("%v", this.S2SConnectivitySliChoice) + `,`,
		`S2SConnectivitySloChoice:` + fmt.Sprintf("%v", this.S2SConnectivitySloChoice) + `,`,
		`LocalVrf:` + strings.Replace(this.LocalVrf.String(), "LocalVRFSettingType", "LocalVRFSettingType", 1) + `,`,
		`TunnelType:` + fmt.Sprintf("%v", this.TunnelType) + `,`,
		`ReSelect:` + strings.Replace(fmt.Sprintf("%v", this.ReSelect), "RegionalEdgeSelection", "views.RegionalEdgeSelection", 1) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`NodeHaChoice:` + fmt.Sprintf("%v", this.NodeHaChoice) + `,`,
		`SiteState:` + fmt.Sprintf("%v", this.SiteState) + `,`,
		`AdminUserCredentials:` + strings.Replace(fmt.Sprintf("%v", this.AdminUserCredentials), "AdminUserCredentialsType", "views.AdminUserCredentialsType", 1) + `,`,
		`ProactiveMonitoring:` + strings.Replace(fmt.Sprintf("%v", this.ProactiveMonitoring), "ProactiveMonitoringChoice", "views.ProactiveMonitoringChoice", 1) + `,`,
		`EnterpriseProxyChoice:` + fmt.Sprintf("%v", this.EnterpriseProxyChoice) + `,`,
		`DnsNtpConfig:` + strings.Replace(this.DnsNtpConfig.String(), "DNSNTPServerConfig", "DNSNTPServerConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Vmware) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Vmware{`,
		`Vmware:` + strings.Replace(fmt.Sprintf("%v", this.Vmware), "VMwareProviderType", "VMwareProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Kvm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Kvm{`,
		`Kvm:` + strings.Replace(fmt.Sprintf("%v", this.Kvm), "KVMProviderType", "KVMProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Aws) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Aws{`,
		`Aws:` + strings.Replace(fmt.Sprintf("%v", this.Aws), "AWSProviderType", "AWSProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Azure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Azure{`,
		`Azure:` + strings.Replace(fmt.Sprintf("%v", this.Azure), "AzureProviderType", "AzureProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Gcp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Gcp{`,
		`Gcp:` + strings.Replace(fmt.Sprintf("%v", this.Gcp), "GCPProviderType", "GCPProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Rseries) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Rseries{`,
		`Rseries:` + strings.Replace(fmt.Sprintf("%v", this.Rseries), "RSeriesProviderType", "RSeriesProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Baremetal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Baremetal{`,
		`Baremetal:` + strings.Replace(fmt.Sprintf("%v", this.Baremetal), "BaremetalProviderType", "BaremetalProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Oci) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Oci{`,
		`Oci:` + strings.Replace(fmt.Sprintf("%v", this.Oci), "OCIProviderType", "OCIProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BlockAllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BlockAllServices{`,
		`BlockAllServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockAllServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoS2SConnectivitySli) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoS2SConnectivitySli{`,
		`NoS2SConnectivitySli:` + strings.Replace(fmt.Sprintf("%v", this.NoS2SConnectivitySli), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DcClusterGroupSli) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DcClusterGroupSli{`,
		`DcClusterGroupSli:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupSli), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoS2SConnectivitySlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoS2SConnectivitySlo{`,
		`NoS2SConnectivitySlo:` + strings.Replace(fmt.Sprintf("%v", this.NoS2SConnectivitySlo), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SiteMeshGroupOnSlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SiteMeshGroupOnSlo{`,
		`SiteMeshGroupOnSlo:` + strings.Replace(fmt.Sprintf("%v", this.SiteMeshGroupOnSlo), "SiteMeshGroupType", "SiteMeshGroupType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DcClusterGroupSlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DcClusterGroupSlo{`,
		`DcClusterGroupSlo:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupSlo), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableHa) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableHa{`,
		`DisableHa:` + strings.Replace(fmt.Sprintf("%v", this.DisableHa), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableHa) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableHa{`,
		`EnableHa:` + strings.Replace(fmt.Sprintf("%v", this.EnableHa), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Openstack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Openstack{`,
		`Openstack:` + strings.Replace(fmt.Sprintf("%v", this.Openstack), "OpenstackProviderType", "OpenstackProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Nutanix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Nutanix{`,
		`Nutanix:` + strings.Replace(fmt.Sprintf("%v", this.Nutanix), "NutanixProviderType", "NutanixProviderType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_F5Proxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_F5Proxy{`,
		`F5Proxy:` + strings.Replace(fmt.Sprintf("%v", this.F5Proxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CustomProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CustomProxy{`,
		`CustomProxy:` + strings.Replace(fmt.Sprintf("%v", this.CustomProxy), "CustomProxy", "CustomProxy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&Interface{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`InterfaceChoice:` + fmt.Sprintf("%v", this.InterfaceChoice) + `,`,
		`AddressChoice:` + fmt.Sprintf("%v", this.AddressChoice) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Mtu:` + fmt.Sprintf("%v", this.Mtu) + `,`,
		`NetworkOption:` + strings.Replace(fmt.Sprintf("%v", this.NetworkOption), "NetworkSelectType", "views.NetworkSelectType", 1) + `,`,
		`MonitoringChoice:` + fmt.Sprintf("%v", this.MonitoringChoice) + `,`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`SiteToSiteConnectivityInterfaceChoice:` + fmt.Sprintf("%v", this.SiteToSiteConnectivityInterfaceChoice) + `,`,
		`IsPrimary:` + fmt.Sprintf("%v", this.IsPrimary) + `,`,
		`IsManagement:` + fmt.Sprintf("%v", this.IsManagement) + `,`,
		`Ipv6AddressChoice:` + fmt.Sprintf("%v", this.Ipv6AddressChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_EthernetInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_EthernetInterface{`,
		`EthernetInterface:` + strings.Replace(fmt.Sprintf("%v", this.EthernetInterface), "EthernetInterfaceType", "EthernetInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_VlanInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_VlanInterface{`,
		`VlanInterface:` + strings.Replace(fmt.Sprintf("%v", this.VlanInterface), "VlanInterfaceType", "VlanInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_BondInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_BondInterface{`,
		`BondInterface:` + strings.Replace(fmt.Sprintf("%v", this.BondInterface), "FleetBondDeviceType", "fleet.FleetBondDeviceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_DhcpClient) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_DhcpClient{`,
		`DhcpClient:` + strings.Replace(fmt.Sprintf("%v", this.DhcpClient), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_StaticIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_StaticIp{`,
		`StaticIp:` + strings.Replace(fmt.Sprintf("%v", this.StaticIp), "StaticIpParametersNodeType", "network_interface.StaticIpParametersNodeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_MonitorDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_MonitorDisabled{`,
		`MonitorDisabled:` + strings.Replace(fmt.Sprintf("%v", this.MonitorDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_Monitor) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_Monitor{`,
		`Monitor:` + strings.Replace(fmt.Sprintf("%v", this.Monitor), "LinkQualityMonitorConfig", "network_interface.LinkQualityMonitorConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_SiteToSiteConnectivityInterfaceDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_SiteToSiteConnectivityInterfaceDisabled{`,
		`SiteToSiteConnectivityInterfaceDisabled:` + strings.Replace(fmt.Sprintf("%v", this.SiteToSiteConnectivityInterfaceDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_SiteToSiteConnectivityInterfaceEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_SiteToSiteConnectivityInterfaceEnabled{`,
		`SiteToSiteConnectivityInterfaceEnabled:` + strings.Replace(fmt.Sprintf("%v", this.SiteToSiteConnectivityInterfaceEnabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_DhcpServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_DhcpServer{`,
		`DhcpServer:` + strings.Replace(fmt.Sprintf("%v", this.DhcpServer), "DHCPServerParametersType", "network_interface.DHCPServerParametersType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_NoIpv6Address) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_NoIpv6Address{`,
		`NoIpv6Address:` + strings.Replace(fmt.Sprintf("%v", this.NoIpv6Address), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_StaticIpv6Address) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_StaticIpv6Address{`,
		`StaticIpv6Address:` + strings.Replace(fmt.Sprintf("%v", this.StaticIpv6Address), "StaticIPParametersType", "network_interface.StaticIPParametersType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_Ipv6AutoConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_Ipv6AutoConfig{`,
		`Ipv6AutoConfig:` + strings.Replace(fmt.Sprintf("%v", this.Ipv6AutoConfig), "IPV6AutoConfigType", "network_interface.IPV6AutoConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_NoIpv4Address) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_NoIpv4Address{`,
		`NoIpv4Address:` + strings.Replace(fmt.Sprintf("%v", this.NoIpv4Address), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EthernetInterfaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EthernetInterfaceType{`,
		`Device:` + fmt.Sprintf("%v", this.Device) + `,`,
		`Mac:` + fmt.Sprintf("%v", this.Mac) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VlanInterfaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VlanInterfaceType{`,
		`Device:` + fmt.Sprintf("%v", this.Device) + `,`,
		`VlanId:` + fmt.Sprintf("%v", this.VlanId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&VirtualNetworkConfiguration{`,
		`Labels:` + mapStringForLabels + `,`,
		`Vip:` + fmt.Sprintf("%v", this.Vip) + `,`,
		`Nameserver:` + fmt.Sprintf("%v", this.Nameserver) + `,`,
		`StaticRouteChoice:` + fmt.Sprintf("%v", this.StaticRouteChoice) + `,`,
		`StaticV6RouteChoice:` + fmt.Sprintf("%v", this.StaticV6RouteChoice) + `,`,
		`VipV6:` + fmt.Sprintf("%v", this.VipV6) + `,`,
		`NameserverV6:` + fmt.Sprintf("%v", this.NameserverV6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkConfiguration_NoStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkConfiguration_NoStaticRoutes{`,
		`NoStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkConfiguration_StaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkConfiguration_StaticRoutes{`,
		`StaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.StaticRoutes), "StaticRoutesListType", "StaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkConfiguration_NoV6StaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkConfiguration_NoV6StaticRoutes{`,
		`NoV6StaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoV6StaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkConfiguration_StaticV6Routes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkConfiguration_StaticV6Routes{`,
		`StaticV6Routes:` + strings.Replace(fmt.Sprintf("%v", this.StaticV6Routes), "StaticV6RoutesListType", "virtual_network.StaticV6RoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StaticRoutesListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStaticRoutes := "[]*StaticRouteViewType{"
	for _, f := range this.StaticRoutes {
		repeatedStringForStaticRoutes += strings.Replace(fmt.Sprintf("%v", f), "StaticRouteViewType", "virtual_network.StaticRouteViewType", 1) + ","
	}
	repeatedStringForStaticRoutes += "}"
	s := strings.Join([]string{`&StaticRoutesListType{`,
		`StaticRoutes:` + repeatedStringForStaticRoutes + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocalVRFSettingType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalVRFSettingType{`,
		`SloChoice:` + fmt.Sprintf("%v", this.SloChoice) + `,`,
		`SliChoice:` + fmt.Sprintf("%v", this.SliChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocalVRFSettingType_DefaultConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalVRFSettingType_DefaultConfig{`,
		`DefaultConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocalVRFSettingType_SloConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalVRFSettingType_SloConfig{`,
		`SloConfig:` + strings.Replace(fmt.Sprintf("%v", this.SloConfig), "VirtualNetworkConfiguration", "VirtualNetworkConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocalVRFSettingType_DefaultSliConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalVRFSettingType_DefaultSliConfig{`,
		`DefaultSliConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSliConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocalVRFSettingType_SliConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalVRFSettingType_SliConfig{`,
		`SliConfig:` + strings.Replace(fmt.Sprintf("%v", this.SliConfig), "VirtualNetworkConfiguration", "VirtualNetworkConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vmware", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VMwareProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GlobalSpecType_Vmware{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kvm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KVMProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GlobalSpecType_Kvm{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GlobalSpecType_Aws{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GlobalSpecType_Azure{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GCPProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GlobalSpecType_Gcp{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rseries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RSeriesProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GlobalSpecType_Rseries{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baremetal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BaremetalProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GlobalSpecType_Baremetal{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oci", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OCIProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GlobalSpecType_Oci{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &GlobalSpecType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &GlobalSpecType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &GlobalSpecType_NoForwardProxy{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &GlobalSpecType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SoftwareSettings == nil {
				m.SoftwareSettings = &SoftwareSettingsType{}
			}
			if err := m.SoftwareSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpgradeSettings == nil {
				m.UpgradeSettings = &UpgradeSettingsType{}
			}
			if err := m.UpgradeSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GlobalSpecType_BlockAllServices{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GlobalSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelDeadTimeout", wireType)
			}
			m.TunnelDeadTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelDeadTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadBalancing == nil {
				m.LoadBalancing = &LoadBalancingSettingsType{}
			}
			if err := m.LoadBalancing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoS2SConnectivitySli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySliChoice = &GlobalSpecType_NoS2SConnectivitySli{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupSli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySliChoice = &GlobalSpecType_DcClusterGroupSli{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoS2SConnectivitySlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySloChoice = &GlobalSpecType_NoS2SConnectivitySlo{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteMeshGroupOnSlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SiteMeshGroupType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySloChoice = &GlobalSpecType_SiteMeshGroupOnSlo{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupSlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySloChoice = &GlobalSpecType_DcClusterGroupSlo{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalVrf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalVrf == nil {
				m.LocalVrf = &LocalVRFSettingType{}
			}
			if err := m.LocalVrf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelType", wireType)
			}
			m.TunnelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelType |= schema.SiteToSiteTunnelType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReSelect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReSelect == nil {
				m.ReSelect = &views.RegionalEdgeSelection{}
			}
			if err := m.ReSelect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeHaChoice = &GlobalSpecType_DisableHa{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableHa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeHaChoice = &GlobalSpecType_EnableHa{v}
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteState", wireType)
			}
			m.SiteState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SiteState |= site.SiteState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUserCredentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminUserCredentials == nil {
				m.AdminUserCredentials = &views.AdminUserCredentialsType{}
			}
			if err := m.AdminUserCredentials.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openstack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpenstackProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GlobalSpecType_Openstack{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nutanix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NutanixProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GlobalSpecType_Nutanix{v}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProactiveMonitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProactiveMonitoring == nil {
				m.ProactiveMonitoring = &views.ProactiveMonitoringChoice{}
			}
			if err := m.ProactiveMonitoring.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5Proxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnterpriseProxyChoice = &GlobalSpecType_F5Proxy{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomProxy{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnterpriseProxyChoice = &GlobalSpecType_CustomProxy{v}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsNtpConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnsNtpConfig == nil {
				m.DnsNtpConfig = &DNSNTPServerConfig{}
			}
			if err := m.DnsNtpConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 998:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 999:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSNTPServerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSNTPServerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSNTPServerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5DnsDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsServerChoice = &DNSNTPServerConfig_F5DnsDefault{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomDNSSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DnsServerChoice = &DNSNTPServerConfig_CustomDns{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5NtpDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NtpServerChoice = &DNSNTPServerConfig_F5NtpDefault{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomNtp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomNTPSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NtpServerChoice = &DNSNTPServerConfig_CustomNtp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomDNSSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomDNSSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomDNSSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsServers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsServers = append(m.DnsServers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomNTPSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomNTPSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomNTPSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NtpServers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NtpServers = append(m.NtpServers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomProxy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomProxy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomProxy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyIpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyIpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyPort", wireType)
			}
			m.ProxyPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &schema.SecretType{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableReTunnel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UseForReTunnelChoice = &CustomProxy_DisableReTunnel{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableReTunnel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UseForReTunnelChoice = &CustomProxy_EnableReTunnel{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadBalancingSettingsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadBalancingSettingsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadBalancingSettingsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipVrrpMode", wireType)
			}
			m.VipVrrpMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipVrrpMode |= schema.VipVrrpType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwareSettingsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwareSettingsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwareSettingsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sw == nil {
				m.Sw = &views.VolterraSoftwareType{}
			}
			if err := m.Sw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Os == nil {
				m.Os = &views.OperatingSystemType{}
			}
			if err := m.Os.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeSettingsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeSettingsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeSettingsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesUpgradeDrain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KubernetesUpgradeDrain == nil {
				m.KubernetesUpgradeDrain = &views.KubernetesUpgradeDrain{}
			}
			if err := m.KubernetesUpgradeDrain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceList = append(m.InterfaceList, &Interface{})
			if err := m.InterfaceList[len(m.InterfaceList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SiteMeshGroupType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteMeshGroupType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteMeshGroupType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupIpChoice = &SiteMeshGroupType_SmConnectionPublicIp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPvtIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupIpChoice = &SiteMeshGroupType_SmConnectionPvtIp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSiteMeshGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &SiteMeshGroupType_NoSiteMeshGroup{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteMeshGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &SiteMeshGroupType_SiteMeshGroup{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMwareProviderType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMwareProviderType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMwareProviderType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotManaged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OrchestrationChoice = &VMwareProviderType_NotManaged{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KVMProviderType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVMProviderType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVMProviderType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotManaged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OrchestrationChoice = &KVMProviderType_NotManaged{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSProviderType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSProviderType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSProviderType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotManaged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OrchestrationChoice = &AWSProviderType_NotManaged{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Managed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSManagedMode{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OrchestrationChoice = &AWSProviderType_Managed{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureProviderType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureProviderType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureProviderType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotManaged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OrchestrationChoice = &AzureProviderType_NotManaged{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GCPProviderType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GCPProviderType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GCPProviderType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotManaged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OrchestrationChoice = &GCPProviderType_NotManaged{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaremetalProviderType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaremetalProviderType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaremetalProviderType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotManaged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OrchestrationChoice = &BaremetalProviderType_NotManaged{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OCIProviderType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OCIProviderType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OCIProviderType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotManaged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OrchestrationChoice = &OCIProviderType_NotManaged{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RSeriesProviderType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RSeriesProviderType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RSeriesProviderType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotManaged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OrchestrationChoice = &RSeriesProviderType_NotManaged{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenstackProviderType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenstackProviderType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenstackProviderType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotManaged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OrchestrationChoice = &OpenstackProviderType_NotManaged{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NutanixProviderType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NutanixProviderType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NutanixProviderType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotManaged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OrchestrationChoice = &NutanixProviderType_NotManaged{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeList = append(m.NodeList, &Node{})
			if err := m.NodeList[len(m.NodeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vmware", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VMwareProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &CreateSpecType_Vmware{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kvm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KVMProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &CreateSpecType_Kvm{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &CreateSpecType_Aws{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &CreateSpecType_Azure{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GCPProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &CreateSpecType_Gcp{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rseries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RSeriesProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &CreateSpecType_Rseries{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baremetal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BaremetalProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &CreateSpecType_Baremetal{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oci", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OCIProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &CreateSpecType_Oci{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &CreateSpecType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &CreateSpecType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &CreateSpecType_NoForwardProxy{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &CreateSpecType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SoftwareSettings == nil {
				m.SoftwareSettings = &SoftwareSettingsType{}
			}
			if err := m.SoftwareSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpgradeSettings == nil {
				m.UpgradeSettings = &UpgradeSettingsType{}
			}
			if err := m.UpgradeSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &CreateSpecType_BlockAllServices{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &CreateSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelDeadTimeout", wireType)
			}
			m.TunnelDeadTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelDeadTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadBalancing == nil {
				m.LoadBalancing = &LoadBalancingSettingsType{}
			}
			if err := m.LoadBalancing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoS2SConnectivitySli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySliChoice = &CreateSpecType_NoS2SConnectivitySli{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupSli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySliChoice = &CreateSpecType_DcClusterGroupSli{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoS2SConnectivitySlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySloChoice = &CreateSpecType_NoS2SConnectivitySlo{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteMeshGroupOnSlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SiteMeshGroupType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySloChoice = &CreateSpecType_SiteMeshGroupOnSlo{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupSlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySloChoice = &CreateSpecType_DcClusterGroupSlo{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalVrf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalVrf == nil {
				m.LocalVrf = &LocalVRFSettingType{}
			}
			if err := m.LocalVrf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelType", wireType)
			}
			m.TunnelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelType |= schema.SiteToSiteTunnelType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReSelect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReSelect == nil {
				m.ReSelect = &views.RegionalEdgeSelection{}
			}
			if err := m.ReSelect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeHaChoice = &CreateSpecType_DisableHa{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableHa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeHaChoice = &CreateSpecType_EnableHa{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUserCredentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminUserCredentials == nil {
				m.AdminUserCredentials = &views.AdminUserCredentialsType{}
			}
			if err := m.AdminUserCredentials.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openstack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpenstackProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &CreateSpecType_Openstack{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nutanix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NutanixProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &CreateSpecType_Nutanix{v}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProactiveMonitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProactiveMonitoring == nil {
				m.ProactiveMonitoring = &views.ProactiveMonitoringChoice{}
			}
			if err := m.ProactiveMonitoring.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5Proxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnterpriseProxyChoice = &CreateSpecType_F5Proxy{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomProxy{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnterpriseProxyChoice = &CreateSpecType_CustomProxy{v}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsNtpConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnsNtpConfig == nil {
				m.DnsNtpConfig = &DNSNTPServerConfig{}
			}
			if err := m.DnsNtpConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vmware", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VMwareProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &ReplaceSpecType_Vmware{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kvm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KVMProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &ReplaceSpecType_Kvm{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &ReplaceSpecType_Aws{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &ReplaceSpecType_Azure{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GCPProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &ReplaceSpecType_Gcp{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rseries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RSeriesProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &ReplaceSpecType_Rseries{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baremetal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BaremetalProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &ReplaceSpecType_Baremetal{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oci", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OCIProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &ReplaceSpecType_Oci{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &ReplaceSpecType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &ReplaceSpecType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &ReplaceSpecType_NoForwardProxy{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &ReplaceSpecType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SoftwareSettings == nil {
				m.SoftwareSettings = &SoftwareSettingsType{}
			}
			if err := m.SoftwareSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpgradeSettings == nil {
				m.UpgradeSettings = &UpgradeSettingsType{}
			}
			if err := m.UpgradeSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &ReplaceSpecType_BlockAllServices{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &ReplaceSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelDeadTimeout", wireType)
			}
			m.TunnelDeadTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelDeadTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadBalancing == nil {
				m.LoadBalancing = &LoadBalancingSettingsType{}
			}
			if err := m.LoadBalancing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoS2SConnectivitySli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySliChoice = &ReplaceSpecType_NoS2SConnectivitySli{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupSli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySliChoice = &ReplaceSpecType_DcClusterGroupSli{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoS2SConnectivitySlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySloChoice = &ReplaceSpecType_NoS2SConnectivitySlo{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteMeshGroupOnSlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SiteMeshGroupType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySloChoice = &ReplaceSpecType_SiteMeshGroupOnSlo{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupSlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySloChoice = &ReplaceSpecType_DcClusterGroupSlo{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalVrf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalVrf == nil {
				m.LocalVrf = &LocalVRFSettingType{}
			}
			if err := m.LocalVrf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelType", wireType)
			}
			m.TunnelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelType |= schema.SiteToSiteTunnelType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReSelect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReSelect == nil {
				m.ReSelect = &views.RegionalEdgeSelection{}
			}
			if err := m.ReSelect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeHaChoice = &ReplaceSpecType_DisableHa{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableHa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeHaChoice = &ReplaceSpecType_EnableHa{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUserCredentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminUserCredentials == nil {
				m.AdminUserCredentials = &views.AdminUserCredentialsType{}
			}
			if err := m.AdminUserCredentials.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openstack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpenstackProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &ReplaceSpecType_Openstack{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nutanix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NutanixProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &ReplaceSpecType_Nutanix{v}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProactiveMonitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProactiveMonitoring == nil {
				m.ProactiveMonitoring = &views.ProactiveMonitoringChoice{}
			}
			if err := m.ProactiveMonitoring.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5Proxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnterpriseProxyChoice = &ReplaceSpecType_F5Proxy{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomProxy{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnterpriseProxyChoice = &ReplaceSpecType_CustomProxy{v}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsNtpConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnsNtpConfig == nil {
				m.DnsNtpConfig = &DNSNTPServerConfig{}
			}
			if err := m.DnsNtpConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vmware", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VMwareProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GetSpecType_Vmware{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kvm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KVMProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GetSpecType_Kvm{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AWSProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GetSpecType_Aws{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzureProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GetSpecType_Azure{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GCPProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GetSpecType_Gcp{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rseries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RSeriesProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GetSpecType_Rseries{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baremetal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BaremetalProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GetSpecType_Baremetal{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oci", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OCIProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GetSpecType_Oci{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &GetSpecType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &GetSpecType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &GetSpecType_NoForwardProxy{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &GetSpecType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SoftwareSettings == nil {
				m.SoftwareSettings = &SoftwareSettingsType{}
			}
			if err := m.SoftwareSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpgradeSettings == nil {
				m.UpgradeSettings = &UpgradeSettingsType{}
			}
			if err := m.UpgradeSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GetSpecType_BlockAllServices{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GetSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelDeadTimeout", wireType)
			}
			m.TunnelDeadTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelDeadTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadBalancing == nil {
				m.LoadBalancing = &LoadBalancingSettingsType{}
			}
			if err := m.LoadBalancing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoS2SConnectivitySli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySliChoice = &GetSpecType_NoS2SConnectivitySli{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupSli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySliChoice = &GetSpecType_DcClusterGroupSli{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoS2SConnectivitySlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySloChoice = &GetSpecType_NoS2SConnectivitySlo{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteMeshGroupOnSlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SiteMeshGroupType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySloChoice = &GetSpecType_SiteMeshGroupOnSlo{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupSlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.S2SConnectivitySloChoice = &GetSpecType_DcClusterGroupSlo{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalVrf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalVrf == nil {
				m.LocalVrf = &LocalVRFSettingType{}
			}
			if err := m.LocalVrf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelType", wireType)
			}
			m.TunnelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelType |= schema.SiteToSiteTunnelType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReSelect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReSelect == nil {
				m.ReSelect = &views.RegionalEdgeSelection{}
			}
			if err := m.ReSelect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeHaChoice = &GetSpecType_DisableHa{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableHa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeHaChoice = &GetSpecType_EnableHa{v}
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteState", wireType)
			}
			m.SiteState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SiteState |= site.SiteState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUserCredentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminUserCredentials == nil {
				m.AdminUserCredentials = &views.AdminUserCredentialsType{}
			}
			if err := m.AdminUserCredentials.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openstack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpenstackProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GetSpecType_Openstack{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nutanix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NutanixProviderType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProviderChoice = &GetSpecType_Nutanix{v}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProactiveMonitoring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProactiveMonitoring == nil {
				m.ProactiveMonitoring = &views.ProactiveMonitoringChoice{}
			}
			if err := m.ProactiveMonitoring.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5Proxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnterpriseProxyChoice = &GetSpecType_F5Proxy{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomProxy{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnterpriseProxyChoice = &GetSpecType_CustomProxy{v}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsNtpConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnsNtpConfig == nil {
				m.DnsNtpConfig = &DNSNTPServerConfig{}
			}
			if err := m.DnsNtpConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthernetInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EthernetInterfaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &Interface_EthernetInterface{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VlanInterfaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &Interface_VlanInterface{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.FleetBondDeviceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &Interface_BondInterface{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DhcpClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AddressChoice = &Interface_DhcpClient{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_interface.StaticIpParametersNodeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AddressChoice = &Interface_StaticIp{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtu", wireType)
			}
			m.Mtu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkOption == nil {
				m.NetworkOption = &views.NetworkSelectType{}
			}
			if err := m.NetworkOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitorDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MonitoringChoice = &Interface_MonitorDisabled{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_interface.LinkQualityMonitorConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MonitoringChoice = &Interface_Monitor{v}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteToSiteConnectivityInterfaceDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteToSiteConnectivityInterfaceChoice = &Interface_SiteToSiteConnectivityInterfaceDisabled{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteToSiteConnectivityInterfaceEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteToSiteConnectivityInterfaceChoice = &Interface_SiteToSiteConnectivityInterfaceEnabled{v}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrimary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrimary = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsManagement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsManagement = bool(v != 0)
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DhcpServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_interface.DHCPServerParametersType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AddressChoice = &Interface_DhcpServer{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoIpv6Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ipv6AddressChoice = &Interface_NoIpv6Address{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticIpv6Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_interface.StaticIPParametersType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ipv6AddressChoice = &Interface_StaticIpv6Address{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6AutoConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_interface.IPV6AutoConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ipv6AddressChoice = &Interface_Ipv6AutoConfig{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoIpv4Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AddressChoice = &Interface_NoIpv4Address{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EthernetInterfaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthernetInterfaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthernetInterfaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanInterfaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanInterfaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanInterfaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanId", wireType)
			}
			m.VlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VlanId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualNetworkConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualNetworkConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualNetworkConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nameserver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nameserver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticRouteChoice = &VirtualNetworkConfiguration_NoStaticRoutes{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticRouteChoice = &VirtualNetworkConfiguration_StaticRoutes{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoV6StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticV6RouteChoice = &VirtualNetworkConfiguration_NoV6StaticRoutes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticV6Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_network.StaticV6RoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticV6RouteChoice = &VirtualNetworkConfiguration_StaticV6Routes{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipV6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipV6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameserverV6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameserverV6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaticRoutesListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaticRoutesListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaticRoutesListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticRoutes = append(m.StaticRoutes, &virtual_network.StaticRouteViewType{})
			if err := m.StaticRoutes[len(m.StaticRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalVRFSettingType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalVRFSettingType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalVRFSettingType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SloChoice = &LocalVRFSettingType_DefaultConfig{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SloConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VirtualNetworkConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SloChoice = &LocalVRFSettingType_SloConfig{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSliConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SliChoice = &LocalVRFSettingType_DefaultSliConfig{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VirtualNetworkConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SliChoice = &LocalVRFSettingType_SliConfig{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

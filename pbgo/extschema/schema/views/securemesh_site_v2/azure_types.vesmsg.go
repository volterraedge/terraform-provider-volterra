// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package securemesh_site_v2

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AzureManagedMode) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureManagedMode) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureManagedMode) DeepCopy() *AzureManagedMode {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureManagedMode{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureManagedMode) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureManagedMode) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureManagedModeValidator().Validate(ctx, m, opts...)
}

func (m *AzureManagedMode) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAzureCredDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAzureCredDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *AzureManagedMode) GetAzureCredDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetAzureCred()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("cloud_credentials.Object")
	dri := db.DRefInfo{
		RefdType:   "cloud_credentials.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "azure_cred",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetAzureCredDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AzureManagedMode) GetAzureCredDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
	}

	vref := m.GetAzureCred()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "cloud_credentials.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AzureManagedMode) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteType() == nil {
		return nil, nil
	}
	switch m.GetSiteType().(type) {
	case *AzureManagedMode_SingleInterface:

		drInfos, err := m.GetSingleInterface().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSingleInterface().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "single_interface." + dri.DRField
		}
		return drInfos, err

	case *AzureManagedMode_MultipleInterface:

		drInfos, err := m.GetMultipleInterface().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetMultipleInterface().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "multiple_interface." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateAzureManagedMode struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureManagedMode) CloudConnectAttachmentsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cloud_connect_attachments")
	}
	return validatorFn, nil
}

func (v *ValidateAzureManagedMode) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateAzureManagedMode) AzureRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_region")
	}

	return validatorFn, nil
}

func (v *ValidateAzureManagedMode) ResourceGroupValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for resource_group")
	}

	return validatorFn, nil
}

func (v *ValidateAzureManagedMode) VnetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for vnet")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.AzureVnetChoiceTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureManagedMode) AzureCredValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for azure_cred")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureManagedMode) TagsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for tags")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for tags")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for tags")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map tags")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tags")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureManagedMode) MachineTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for machine_type")
	}

	return validatorFn, nil
}

func (v *ValidateAzureManagedMode) DiskSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disk_size")
	}

	return validatorFn, nil
}

func (v *ValidateAzureManagedMode) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureManagedMode)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureManagedMode got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["accelerated_networking"]; exists {

		vOpts := append(opts, db.WithValidateField("accelerated_networking"))
		if err := fv(ctx, m.GetAcceleratedNetworking(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["azure_cred"]; exists {

		vOpts := append(opts, db.WithValidateField("azure_cred"))
		if err := fv(ctx, m.GetAzureCred(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["azure_region"]; exists {

		vOpts := append(opts, db.WithValidateField("azure_region"))
		if err := fv(ctx, m.GetAzureRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["cloud_connect_attachments"]; exists {
		val := m.GetCloudConnectAttachments()
		vOpts := append(opts,
			db.WithValidateField("cloud_connect_attachments"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetCloudConnectAttachments().(type) {
	case *AzureManagedMode_Disabled:
		if fv, exists := v.FldValidators["cloud_connect_attachments.disabled"]; exists {
			val := m.GetCloudConnectAttachments().(*AzureManagedMode_Disabled).Disabled
			vOpts := append(opts,
				db.WithValidateField("cloud_connect_attachments"),
				db.WithValidateField("disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureManagedMode_Enabled:
		if fv, exists := v.FldValidators["cloud_connect_attachments.enabled"]; exists {
			val := m.GetCloudConnectAttachments().(*AzureManagedMode_Enabled).Enabled
			vOpts := append(opts,
				db.WithValidateField("cloud_connect_attachments"),
				db.WithValidateField("enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["machine_type"]; exists {

		vOpts := append(opts, db.WithValidateField("machine_type"))
		if err := fv(ctx, m.GetMachineType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["resource_group"]; exists {

		vOpts := append(opts, db.WithValidateField("resource_group"))
		if err := fv(ctx, m.GetResourceGroup(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *AzureManagedMode_SingleInterface:
		if fv, exists := v.FldValidators["site_type.single_interface"]; exists {
			val := m.GetSiteType().(*AzureManagedMode_SingleInterface).SingleInterface
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("single_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureManagedMode_MultipleInterface:
		if fv, exists := v.FldValidators["site_type.multiple_interface"]; exists {
			val := m.GetSiteType().(*AzureManagedMode_MultipleInterface).MultipleInterface
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("multiple_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tags"]; exists {
		vOpts := append(opts, db.WithValidateField("tags"))
		if err := fv(ctx, m.GetTags(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vnet"]; exists {

		vOpts := append(opts, db.WithValidateField("vnet"))
		if err := fv(ctx, m.GetVnet(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureManagedModeValidator = func() *ValidateAzureManagedMode {
	v := &ValidateAzureManagedMode{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhCloudConnectAttachments := v.CloudConnectAttachmentsValidationRuleHandler
	rulesCloudConnectAttachments := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhCloudConnectAttachments(rulesCloudConnectAttachments)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureManagedMode.cloud_connect_attachments: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cloud_connect_attachments"] = vFn

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureManagedMode.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhAzureRegion := v.AzureRegionValidationRuleHandler
	rulesAzureRegion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhAzureRegion(rulesAzureRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureManagedMode.azure_region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["azure_region"] = vFn

	vrhResourceGroup := v.ResourceGroupValidationRuleHandler
	rulesResourceGroup := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFn, err = vrhResourceGroup(rulesResourceGroup)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureManagedMode.resource_group: %s", err)
		panic(errMsg)
	}
	v.FldValidators["resource_group"] = vFn

	vrhVnet := v.VnetValidationRuleHandler
	rulesVnet := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhVnet(rulesVnet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureManagedMode.vnet: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vnet"] = vFn

	vrhAzureCred := v.AzureCredValidationRuleHandler
	rulesAzureCred := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAzureCred(rulesAzureCred)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureManagedMode.azure_cred: %s", err)
		panic(errMsg)
	}
	v.FldValidators["azure_cred"] = vFn

	vrhTags := v.TagsValidationRuleHandler
	rulesTags := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "127",
		"ves.io.schema.rules.map.max_pairs":             "40",
		"ves.io.schema.rules.map.values.string.max_len": "255",
	}
	vFn, err = vrhTags(rulesTags)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureManagedMode.tags: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tags"] = vFn

	vrhMachineType := v.MachineTypeValidationRuleHandler
	rulesMachineType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhMachineType(rulesMachineType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureManagedMode.machine_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["machine_type"] = vFn

	vrhDiskSize := v.DiskSizeValidationRuleHandler
	rulesDiskSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "64000",
	}
	vFn, err = vrhDiskSize(rulesDiskSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureManagedMode.disk_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disk_size"] = vFn

	v.FldValidators["site_type.single_interface"] = AzureSingleInterfaceValidator().Validate
	v.FldValidators["site_type.multiple_interface"] = AzureMultipleInterfaceValidator().Validate

	v.FldValidators["accelerated_networking"] = ves_io_schema_views.AcceleratedNetworkingTypeValidator().Validate

	return v
}()

func AzureManagedModeValidator() db.Validator {
	return DefaultAzureManagedModeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureManagedNode) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureManagedNode) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureManagedNode) DeepCopy() *AzureManagedNode {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureManagedNode{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureManagedNode) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureManagedNode) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureManagedNodeValidator().Validate(ctx, m, opts...)
}

func (m *AzureManagedNode) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInterfaceListDRefInfo()

}

// GetDRefInfo for the field's type
func (m *AzureManagedNode) GetInterfaceListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInterfaceList() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetInterfaceList() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInterfaceList() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("interface_list[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateAzureManagedNode struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureManagedNode) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateAzureManagedNode) HostnameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hostname")
	}

	return validatorFn, nil
}

func (v *ValidateAzureManagedNode) AzureAzValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for azure_az")
	}

	return validatorFn, nil
}

func (v *ValidateAzureManagedNode) InterfaceListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for interface_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*AzureOrchestratedInterface, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := AzureOrchestratedInterfaceValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for interface_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*AzureOrchestratedInterface)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*AzureOrchestratedInterface, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated interface_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items interface_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureManagedNode) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureManagedNode)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureManagedNode got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["azure_az"]; exists {

		vOpts := append(opts, db.WithValidateField("azure_az"))
		if err := fv(ctx, m.GetAzureAz(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hostname"]; exists {

		vOpts := append(opts, db.WithValidateField("hostname"))
		if err := fv(ctx, m.GetHostname(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["interface_list"]; exists {
		vOpts := append(opts, db.WithValidateField("interface_list"))
		if err := fv(ctx, m.GetInterfaceList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureManagedNodeValidator = func() *ValidateAzureManagedNode {
	v := &ValidateAzureManagedNode{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureManagedNode.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	vrhHostname := v.HostnameValidationRuleHandler
	rulesHostname := map[string]string{
		"ves.io.schema.rules.string.max_len": "512",
	}
	vFn, err = vrhHostname(rulesHostname)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureManagedNode.hostname: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hostname"] = vFn

	vrhAzureAz := v.AzureAzValidationRuleHandler
	rulesAzureAz := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"1\",\"2\",\"3\"]",
	}
	vFn, err = vrhAzureAz(rulesAzureAz)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureManagedNode.azure_az: %s", err)
		panic(errMsg)
	}
	v.FldValidators["azure_az"] = vFn

	vrhInterfaceList := v.InterfaceListValidationRuleHandler
	rulesInterfaceList := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "2",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhInterfaceList(rulesInterfaceList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureManagedNode.interface_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interface_list"] = vFn

	return v
}()

func AzureManagedNodeValidator() db.Validator {
	return DefaultAzureManagedNodeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureManagedNodeList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureManagedNodeList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureManagedNodeList) DeepCopy() *AzureManagedNodeList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureManagedNodeList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureManagedNodeList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureManagedNodeList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureManagedNodeListValidator().Validate(ctx, m, opts...)
}

func (m *AzureManagedNodeList) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetNodeListDRefInfo()

}

// GetDRefInfo for the field's type
func (m *AzureManagedNodeList) GetNodeListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNodeList() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetNodeList() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetNodeList() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("node_list[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateAzureManagedNodeList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureManagedNodeList) NodeListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for node_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*AzureManagedNode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := AzureManagedNodeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for node_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*AzureManagedNode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*AzureManagedNode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated node_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items node_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureManagedNodeList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureManagedNodeList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureManagedNodeList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["node_list"]; exists {
		vOpts := append(opts, db.WithValidateField("node_list"))
		if err := fv(ctx, m.GetNodeList(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureManagedNodeListValidator = func() *ValidateAzureManagedNodeList {
	v := &ValidateAzureManagedNodeList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNodeList := v.NodeListValidationRuleHandler
	rulesNodeList := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhNodeList(rulesNodeList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureManagedNodeList.node_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["node_list"] = vFn

	return v
}()

func AzureManagedNodeListValidator() db.Validator {
	return DefaultAzureManagedNodeListValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureMultipleInterface) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureMultipleInterface) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureMultipleInterface) DeepCopy() *AzureMultipleInterface {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureMultipleInterface{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureMultipleInterface) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureMultipleInterface) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureMultipleInterfaceValidator().Validate(ctx, m, opts...)
}

func (m *AzureMultipleInterface) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetNodeListDRefInfo()

}

// GetDRefInfo for the field's type
func (m *AzureMultipleInterface) GetNodeListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNodeList() == nil {
		return nil, nil
	}

	drInfos, err := m.GetNodeList().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetNodeList().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "node_list." + dri.DRField
	}
	return drInfos, err

}

type ValidateAzureMultipleInterface struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureMultipleInterface) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureMultipleInterface)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureMultipleInterface got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["node_list"]; exists {

		vOpts := append(opts, db.WithValidateField("node_list"))
		if err := fv(ctx, m.GetNodeList(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureMultipleInterfaceValidator = func() *ValidateAzureMultipleInterface {
	v := &ValidateAzureMultipleInterface{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["node_list"] = AzureManagedNodeListValidator().Validate

	return v
}()

func AzureMultipleInterfaceValidator() db.Validator {
	return DefaultAzureMultipleInterfaceValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureOrchestratedInterface) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureOrchestratedInterface) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureOrchestratedInterface) DeepCopy() *AzureOrchestratedInterface {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureOrchestratedInterface{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureOrchestratedInterface) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureOrchestratedInterface) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureOrchestratedInterfaceValidator().Validate(ctx, m, opts...)
}

func (m *AzureOrchestratedInterface) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetNetworkOptionDRefInfo()

}

// GetDRefInfo for the field's type
func (m *AzureOrchestratedInterface) GetNetworkOptionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkOption() == nil {
		return nil, nil
	}

	drInfos, err := m.GetNetworkOption().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetNetworkOption().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "network_option." + dri.DRField
	}
	return drInfos, err

}

type ValidateAzureOrchestratedInterface struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureOrchestratedInterface) NetworkOptionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for network_option")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAzureOrchestratedInterface) MtuValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mtu")
	}

	return validatorFn, nil
}

func (v *ValidateAzureOrchestratedInterface) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureOrchestratedInterface)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureOrchestratedInterface got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["mtu"]; exists {

		vOpts := append(opts, db.WithValidateField("mtu"))
		if err := fv(ctx, m.GetMtu(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_option"]; exists {

		vOpts := append(opts, db.WithValidateField("network_option"))
		if err := fv(ctx, m.GetNetworkOption(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetSiteToSiteConnectivityInterfaceChoice().(type) {
	case *AzureOrchestratedInterface_SiteToSiteConnectivityInterfaceDisabled:
		if fv, exists := v.FldValidators["site_to_site_connectivity_interface_choice.site_to_site_connectivity_interface_disabled"]; exists {
			val := m.GetSiteToSiteConnectivityInterfaceChoice().(*AzureOrchestratedInterface_SiteToSiteConnectivityInterfaceDisabled).SiteToSiteConnectivityInterfaceDisabled
			vOpts := append(opts,
				db.WithValidateField("site_to_site_connectivity_interface_choice"),
				db.WithValidateField("site_to_site_connectivity_interface_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureOrchestratedInterface_SiteToSiteConnectivityInterfaceEnabled:
		if fv, exists := v.FldValidators["site_to_site_connectivity_interface_choice.site_to_site_connectivity_interface_enabled"]; exists {
			val := m.GetSiteToSiteConnectivityInterfaceChoice().(*AzureOrchestratedInterface_SiteToSiteConnectivityInterfaceEnabled).SiteToSiteConnectivityInterfaceEnabled
			vOpts := append(opts,
				db.WithValidateField("site_to_site_connectivity_interface_choice"),
				db.WithValidateField("site_to_site_connectivity_interface_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["subnet"]; exists {

		vOpts := append(opts, db.WithValidateField("subnet"))
		if err := fv(ctx, m.GetSubnet(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureOrchestratedInterfaceValidator = func() *ValidateAzureOrchestratedInterface {
	v := &ValidateAzureOrchestratedInterface{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNetworkOption := v.NetworkOptionValidationRuleHandler
	rulesNetworkOption := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNetworkOption(rulesNetworkOption)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureOrchestratedInterface.network_option: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_option"] = vFn

	vrhMtu := v.MtuValidationRuleHandler
	rulesMtu := map[string]string{
		"ves.io.schema.rules.uint32.ranges": "0,512-16384",
	}
	vFn, err = vrhMtu(rulesMtu)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureOrchestratedInterface.mtu: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mtu"] = vFn

	v.FldValidators["subnet"] = AzureSubnetChoiceTypeValidator().Validate

	return v
}()

func AzureOrchestratedInterfaceValidator() db.Validator {
	return DefaultAzureOrchestratedInterfaceValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureSingleInterface) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureSingleInterface) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureSingleInterface) DeepCopy() *AzureSingleInterface {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureSingleInterface{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureSingleInterface) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureSingleInterface) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureSingleInterfaceValidator().Validate(ctx, m, opts...)
}

func (m *AzureSingleInterface) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetNodeListDRefInfo()

}

// GetDRefInfo for the field's type
func (m *AzureSingleInterface) GetNodeListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNodeList() == nil {
		return nil, nil
	}

	drInfos, err := m.GetNodeList().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetNodeList().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "node_list." + dri.DRField
	}
	return drInfos, err

}

type ValidateAzureSingleInterface struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureSingleInterface) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureSingleInterface)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureSingleInterface got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["node_list"]; exists {

		vOpts := append(opts, db.WithValidateField("node_list"))
		if err := fv(ctx, m.GetNodeList(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureSingleInterfaceValidator = func() *ValidateAzureSingleInterface {
	v := &ValidateAzureSingleInterface{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["node_list"] = AzureManagedNodeListValidator().Validate

	return v
}()

func AzureSingleInterfaceValidator() db.Validator {
	return DefaultAzureSingleInterfaceValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureSubnetChoiceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureSubnetChoiceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureSubnetChoiceType) DeepCopy() *AzureSubnetChoiceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureSubnetChoiceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureSubnetChoiceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureSubnetChoiceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureSubnetChoiceTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAzureSubnetChoiceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureSubnetChoiceType) ChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for choice")
	}
	return validatorFn, nil
}

func (v *ValidateAzureSubnetChoiceType) ChoiceSubnetParamValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return CloudSubnetParamTypeValidator().Validate, nil
}
func (v *ValidateAzureSubnetChoiceType) ChoiceExistingSubnetValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	return AzureSubnetTypeValidator().Validate, nil
}

func (v *ValidateAzureSubnetChoiceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureSubnetChoiceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureSubnetChoiceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["choice"]; exists {
		val := m.GetChoice()
		vOpts := append(opts,
			db.WithValidateField("choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChoice().(type) {
	case *AzureSubnetChoiceType_SubnetParam:
		if fv, exists := v.FldValidators["choice.subnet_param"]; exists {
			val := m.GetChoice().(*AzureSubnetChoiceType_SubnetParam).SubnetParam
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("subnet_param"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AzureSubnetChoiceType_ExistingSubnet:
		if fv, exists := v.FldValidators["choice.existing_subnet"]; exists {
			val := m.GetChoice().(*AzureSubnetChoiceType_ExistingSubnet).ExistingSubnet
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("existing_subnet"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureSubnetChoiceTypeValidator = func() *ValidateAzureSubnetChoiceType {
	v := &ValidateAzureSubnetChoiceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhChoice := v.ChoiceValidationRuleHandler
	rulesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChoice(rulesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureSubnetChoiceType.choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["choice"] = vFn

	vrhChoiceSubnetParam := v.ChoiceSubnetParamValidationRuleHandler
	rulesChoiceSubnetParam := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFnMap["choice.subnet_param"], err = vrhChoiceSubnetParam(rulesChoiceSubnetParam)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field AzureSubnetChoiceType.choice_subnet_param: %s", err)
		panic(errMsg)
	}
	vrhChoiceExistingSubnet := v.ChoiceExistingSubnetValidationRuleHandler
	rulesChoiceExistingSubnet := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFnMap["choice.existing_subnet"], err = vrhChoiceExistingSubnet(rulesChoiceExistingSubnet)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field AzureSubnetChoiceType.choice_existing_subnet: %s", err)
		panic(errMsg)
	}

	v.FldValidators["choice.subnet_param"] = vFnMap["choice.subnet_param"]
	v.FldValidators["choice.existing_subnet"] = vFnMap["choice.existing_subnet"]

	return v
}()

func AzureSubnetChoiceTypeValidator() db.Validator {
	return DefaultAzureSubnetChoiceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AzureSubnetType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AzureSubnetType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AzureSubnetType) DeepCopy() *AzureSubnetType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AzureSubnetType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AzureSubnetType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AzureSubnetType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AzureSubnetTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAzureSubnetType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAzureSubnetType) SubnetNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for subnet_name")
	}

	return validatorFn, nil
}

func (v *ValidateAzureSubnetType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AzureSubnetType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AzureSubnetType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetResourceGroupChoice().(type) {
	case *AzureSubnetType_VnetResourceGroup:
		if fv, exists := v.FldValidators["resource_group_choice.vnet_resource_group"]; exists {
			val := m.GetResourceGroupChoice().(*AzureSubnetType_VnetResourceGroup).VnetResourceGroup
			vOpts := append(opts,
				db.WithValidateField("resource_group_choice"),
				db.WithValidateField("vnet_resource_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["subnet_name"]; exists {

		vOpts := append(opts, db.WithValidateField("subnet_name"))
		if err := fv(ctx, m.GetSubnetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAzureSubnetTypeValidator = func() *ValidateAzureSubnetType {
	v := &ValidateAzureSubnetType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSubnetName := v.SubnetNameValidationRuleHandler
	rulesSubnetName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhSubnetName(rulesSubnetName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AzureSubnetType.subnet_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["subnet_name"] = vFn

	return v
}()

func AzureSubnetTypeValidator() db.Validator {
	return DefaultAzureSubnetTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CloudSubnetParamType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CloudSubnetParamType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CloudSubnetParamType) DeepCopy() *CloudSubnetParamType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CloudSubnetParamType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CloudSubnetParamType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CloudSubnetParamType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CloudSubnetParamTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCloudSubnetParamType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCloudSubnetParamType) NameChoiceNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Name, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}
	return oValidatorFn_Name, nil
}

func (v *ValidateCloudSubnetParamType) Ipv4ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ipv4")
	}

	return validatorFn, nil
}

func (v *ValidateCloudSubnetParamType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CloudSubnetParamType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CloudSubnetParamType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ipv4"]; exists {

		vOpts := append(opts, db.WithValidateField("ipv4"))
		if err := fv(ctx, m.GetIpv4(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetNameChoice().(type) {
	case *CloudSubnetParamType_Name:
		if fv, exists := v.FldValidators["name_choice.name"]; exists {
			val := m.GetNameChoice().(*CloudSubnetParamType_Name).Name
			vOpts := append(opts,
				db.WithValidateField("name_choice"),
				db.WithValidateField("name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CloudSubnetParamType_Autogenerate:
		if fv, exists := v.FldValidators["name_choice.autogenerate"]; exists {
			val := m.GetNameChoice().(*CloudSubnetParamType_Autogenerate).Autogenerate
			vOpts := append(opts,
				db.WithValidateField("name_choice"),
				db.WithValidateField("autogenerate"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCloudSubnetParamTypeValidator = func() *ValidateCloudSubnetParamType {
	v := &ValidateCloudSubnetParamType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNameChoiceName := v.NameChoiceNameValidationRuleHandler
	rulesNameChoiceName := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
		"ves.io.schema.rules.string.min_len": "1",
		"ves.io.schema.rules.string.pattern": "^(subnet-)([a-z0-9]{8}|[a-z0-9]{17})$",
	}
	vFnMap["name_choice.name"], err = vrhNameChoiceName(rulesNameChoiceName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field CloudSubnetParamType.name_choice_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["name_choice.name"] = vFnMap["name_choice.name"]

	vrhIpv4 := v.Ipv4ValidationRuleHandler
	rulesIpv4 := map[string]string{
		"ves.io.schema.rules.message.required":            "true",
		"ves.io.schema.rules.string.ipv4_prefix":          "true",
		"ves.io.schema.rules.string.max_ip_prefix_length": "28",
	}
	vFn, err = vrhIpv4(rulesIpv4)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CloudSubnetParamType.ipv4: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ipv4"] = vFn

	return v
}()

func CloudSubnetParamTypeValidator() db.Validator {
	return DefaultCloudSubnetParamTypeValidator
}

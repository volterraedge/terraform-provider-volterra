// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package securemesh_site_v2

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AWSCloudSubnetParamType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSCloudSubnetParamType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSCloudSubnetParamType) DeepCopy() *AWSCloudSubnetParamType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSCloudSubnetParamType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSCloudSubnetParamType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSCloudSubnetParamType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSCloudSubnetParamTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAWSCloudSubnetParamType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSCloudSubnetParamType) NameChoiceNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_Name, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}
	return oValidatorFn_Name, nil
}

func (v *ValidateAWSCloudSubnetParamType) Ipv4ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ipv4")
	}

	return validatorFn, nil
}

func (v *ValidateAWSCloudSubnetParamType) Ipv6ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for ipv6")
	}

	return validatorFn, nil
}

func (v *ValidateAWSCloudSubnetParamType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSCloudSubnetParamType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSCloudSubnetParamType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ipv4"]; exists {

		vOpts := append(opts, db.WithValidateField("ipv4"))
		if err := fv(ctx, m.GetIpv4(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["ipv6"]; exists {

		vOpts := append(opts, db.WithValidateField("ipv6"))
		if err := fv(ctx, m.GetIpv6(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetNameChoice().(type) {
	case *AWSCloudSubnetParamType_Name:
		if fv, exists := v.FldValidators["name_choice.name"]; exists {
			val := m.GetNameChoice().(*AWSCloudSubnetParamType_Name).Name
			vOpts := append(opts,
				db.WithValidateField("name_choice"),
				db.WithValidateField("name"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSCloudSubnetParamType_Autogenerate:
		if fv, exists := v.FldValidators["name_choice.autogenerate"]; exists {
			val := m.GetNameChoice().(*AWSCloudSubnetParamType_Autogenerate).Autogenerate
			vOpts := append(opts,
				db.WithValidateField("name_choice"),
				db.WithValidateField("autogenerate"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSCloudSubnetParamTypeValidator = func() *ValidateAWSCloudSubnetParamType {
	v := &ValidateAWSCloudSubnetParamType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNameChoiceName := v.NameChoiceNameValidationRuleHandler
	rulesNameChoiceName := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
		"ves.io.schema.rules.string.min_len": "1",
		"ves.io.schema.rules.string.pattern": "^(subnet-)([a-z0-9]{8}|[a-z0-9]{17})$",
	}
	vFnMap["name_choice.name"], err = vrhNameChoiceName(rulesNameChoiceName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field AWSCloudSubnetParamType.name_choice_name: %s", err)
		panic(errMsg)
	}

	v.FldValidators["name_choice.name"] = vFnMap["name_choice.name"]

	vrhIpv4 := v.Ipv4ValidationRuleHandler
	rulesIpv4 := map[string]string{
		"ves.io.schema.rules.message.required":            "true",
		"ves.io.schema.rules.string.ipv4_prefix":          "true",
		"ves.io.schema.rules.string.max_ip_prefix_length": "28",
	}
	vFn, err = vrhIpv4(rulesIpv4)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSCloudSubnetParamType.ipv4: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ipv4"] = vFn

	vrhIpv6 := v.Ipv6ValidationRuleHandler
	rulesIpv6 := map[string]string{
		"ves.io.schema.rules.string.ipv6_prefix": "true",
	}
	vFn, err = vrhIpv6(rulesIpv6)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSCloudSubnetParamType.ipv6: %s", err)
		panic(errMsg)
	}
	v.FldValidators["ipv6"] = vFn

	return v
}()

func AWSCloudSubnetParamTypeValidator() db.Validator {
	return DefaultAWSCloudSubnetParamTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSManagedMode) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSManagedMode) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSManagedMode) DeepCopy() *AWSManagedMode {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSManagedMode{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSManagedMode) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSManagedMode) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSManagedModeValidator().Validate(ctx, m, opts...)
}

func (m *AWSManagedMode) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAwsCredDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetAwsCredDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetPrivateConnectivityChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetPrivateConnectivityChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteTypeDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteTypeDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *AWSManagedMode) GetAwsCredDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetAwsCred()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("cloud_credentials.Object")
	dri := db.DRefInfo{
		RefdType:   "cloud_credentials.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "aws_cred",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetAwsCredDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *AWSManagedMode) GetAwsCredDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
	}

	vref := m.GetAwsCred()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "cloud_credentials.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *AWSManagedMode) GetPrivateConnectivityChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetPrivateConnectivityChoice() == nil {
		return nil, nil
	}
	switch m.GetPrivateConnectivityChoice().(type) {
	case *AWSManagedMode_PrivateConnectivityDisabled:

		return nil, nil

	case *AWSManagedMode_PrivateConnectivity:

		drInfos, err := m.GetPrivateConnectivity().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetPrivateConnectivity().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "private_connectivity." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *AWSManagedMode) GetSiteTypeDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteType() == nil {
		return nil, nil
	}
	switch m.GetSiteType().(type) {
	case *AWSManagedMode_SingleInterface:

		drInfos, err := m.GetSingleInterface().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSingleInterface().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "single_interface." + dri.DRField
		}
		return drInfos, err

	case *AWSManagedMode_MultipleInterface:

		drInfos, err := m.GetMultipleInterface().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetMultipleInterface().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "multiple_interface." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateAWSManagedMode struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSManagedMode) ServiceVpcChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for service_vpc_choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSManagedMode) ServiceVpcChoiceVpcIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_VpcId, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vpc_id")
	}
	return oValidatorFn_VpcId, nil
}

func (v *ValidateAWSManagedMode) SiteTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_type")
	}
	return validatorFn, nil
}

func (v *ValidateAWSManagedMode) AwsRegionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for aws_region")
	}

	return validatorFn, nil
}

func (v *ValidateAWSManagedMode) AwsCredValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for aws_cred")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSManagedMode) TagsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for tags")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for tags")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for tags")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map tags")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tags")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSManagedMode) InstanceTypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for instance_type")
	}

	return validatorFn, nil
}

func (v *ValidateAWSManagedMode) DiskSizeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for disk_size")
	}

	return validatorFn, nil
}

func (v *ValidateAWSManagedMode) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSManagedMode)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSManagedMode got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["aws_cred"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_cred"))
		if err := fv(ctx, m.GetAwsCred(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["aws_region"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_region"))
		if err := fv(ctx, m.GetAwsRegion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["disk_size"]; exists {

		vOpts := append(opts, db.WithValidateField("disk_size"))
		if err := fv(ctx, m.GetDiskSize(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetEgressGatewayChoice().(type) {
	case *AWSManagedMode_EgressGatewayDefault:
		if fv, exists := v.FldValidators["egress_gateway_choice.egress_gateway_default"]; exists {
			val := m.GetEgressGatewayChoice().(*AWSManagedMode_EgressGatewayDefault).EgressGatewayDefault
			vOpts := append(opts,
				db.WithValidateField("egress_gateway_choice"),
				db.WithValidateField("egress_gateway_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSManagedMode_EgressNatGw:
		if fv, exists := v.FldValidators["egress_gateway_choice.egress_nat_gw"]; exists {
			val := m.GetEgressGatewayChoice().(*AWSManagedMode_EgressNatGw).EgressNatGw
			vOpts := append(opts,
				db.WithValidateField("egress_gateway_choice"),
				db.WithValidateField("egress_nat_gw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSManagedMode_EgressVirtualPrivateGateway:
		if fv, exists := v.FldValidators["egress_gateway_choice.egress_virtual_private_gateway"]; exists {
			val := m.GetEgressGatewayChoice().(*AWSManagedMode_EgressVirtualPrivateGateway).EgressVirtualPrivateGateway
			vOpts := append(opts,
				db.WithValidateField("egress_gateway_choice"),
				db.WithValidateField("egress_virtual_private_gateway"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["instance_type"]; exists {

		vOpts := append(opts, db.WithValidateField("instance_type"))
		if err := fv(ctx, m.GetInstanceType(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetPrivateConnectivityChoice().(type) {
	case *AWSManagedMode_PrivateConnectivityDisabled:
		if fv, exists := v.FldValidators["private_connectivity_choice.private_connectivity_disabled"]; exists {
			val := m.GetPrivateConnectivityChoice().(*AWSManagedMode_PrivateConnectivityDisabled).PrivateConnectivityDisabled
			vOpts := append(opts,
				db.WithValidateField("private_connectivity_choice"),
				db.WithValidateField("private_connectivity_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSManagedMode_PrivateConnectivity:
		if fv, exists := v.FldValidators["private_connectivity_choice.private_connectivity"]; exists {
			val := m.GetPrivateConnectivityChoice().(*AWSManagedMode_PrivateConnectivity).PrivateConnectivity
			vOpts := append(opts,
				db.WithValidateField("private_connectivity_choice"),
				db.WithValidateField("private_connectivity"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetSecurityGroupChoice().(type) {
	case *AWSManagedMode_F5XcSecurityGroup:
		if fv, exists := v.FldValidators["security_group_choice.f5xc_security_group"]; exists {
			val := m.GetSecurityGroupChoice().(*AWSManagedMode_F5XcSecurityGroup).F5XcSecurityGroup
			vOpts := append(opts,
				db.WithValidateField("security_group_choice"),
				db.WithValidateField("f5xc_security_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSManagedMode_CustomSecurityGroup:
		if fv, exists := v.FldValidators["security_group_choice.custom_security_group"]; exists {
			val := m.GetSecurityGroupChoice().(*AWSManagedMode_CustomSecurityGroup).CustomSecurityGroup
			vOpts := append(opts,
				db.WithValidateField("security_group_choice"),
				db.WithValidateField("custom_security_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["service_vpc_choice"]; exists {
		val := m.GetServiceVpcChoice()
		vOpts := append(opts,
			db.WithValidateField("service_vpc_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetServiceVpcChoice().(type) {
	case *AWSManagedMode_NewVpc:
		if fv, exists := v.FldValidators["service_vpc_choice.new_vpc"]; exists {
			val := m.GetServiceVpcChoice().(*AWSManagedMode_NewVpc).NewVpc
			vOpts := append(opts,
				db.WithValidateField("service_vpc_choice"),
				db.WithValidateField("new_vpc"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSManagedMode_VpcId:
		if fv, exists := v.FldValidators["service_vpc_choice.vpc_id"]; exists {
			val := m.GetServiceVpcChoice().(*AWSManagedMode_VpcId).VpcId
			vOpts := append(opts,
				db.WithValidateField("service_vpc_choice"),
				db.WithValidateField("vpc_id"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_type"]; exists {
		val := m.GetSiteType()
		vOpts := append(opts,
			db.WithValidateField("site_type"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteType().(type) {
	case *AWSManagedMode_SingleInterface:
		if fv, exists := v.FldValidators["site_type.single_interface"]; exists {
			val := m.GetSiteType().(*AWSManagedMode_SingleInterface).SingleInterface
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("single_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSManagedMode_MultipleInterface:
		if fv, exists := v.FldValidators["site_type.multiple_interface"]; exists {
			val := m.GetSiteType().(*AWSManagedMode_MultipleInterface).MultipleInterface
			vOpts := append(opts,
				db.WithValidateField("site_type"),
				db.WithValidateField("multiple_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tags"]; exists {
		vOpts := append(opts, db.WithValidateField("tags"))
		if err := fv(ctx, m.GetTags(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSManagedModeValidator = func() *ValidateAWSManagedMode {
	v := &ValidateAWSManagedMode{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhServiceVpcChoice := v.ServiceVpcChoiceValidationRuleHandler
	rulesServiceVpcChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhServiceVpcChoice(rulesServiceVpcChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSManagedMode.service_vpc_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["service_vpc_choice"] = vFn

	vrhServiceVpcChoiceVpcId := v.ServiceVpcChoiceVpcIdValidationRuleHandler
	rulesServiceVpcChoiceVpcId := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
		"ves.io.schema.rules.string.pattern": "^(vpc-)([a-z0-9]{8}|[a-z0-9]{17})$",
	}
	vFnMap["service_vpc_choice.vpc_id"], err = vrhServiceVpcChoiceVpcId(rulesServiceVpcChoiceVpcId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field AWSManagedMode.service_vpc_choice_vpc_id: %s", err)
		panic(errMsg)
	}

	v.FldValidators["service_vpc_choice.vpc_id"] = vFnMap["service_vpc_choice.vpc_id"]

	vrhSiteType := v.SiteTypeValidationRuleHandler
	rulesSiteType := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteType(rulesSiteType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSManagedMode.site_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_type"] = vFn

	vrhAwsRegion := v.AwsRegionValidationRuleHandler
	rulesAwsRegion := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAwsRegion(rulesAwsRegion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSManagedMode.aws_region: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_region"] = vFn

	vrhAwsCred := v.AwsCredValidationRuleHandler
	rulesAwsCred := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAwsCred(rulesAwsCred)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSManagedMode.aws_cred: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_cred"] = vFn

	vrhTags := v.TagsValidationRuleHandler
	rulesTags := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "127",
		"ves.io.schema.rules.map.max_pairs":             "40",
		"ves.io.schema.rules.map.values.string.max_len": "255",
	}
	vFn, err = vrhTags(rulesTags)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSManagedMode.tags: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tags"] = vFn

	vrhInstanceType := v.InstanceTypeValidationRuleHandler
	rulesInstanceType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "64",
	}
	vFn, err = vrhInstanceType(rulesInstanceType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSManagedMode.instance_type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["instance_type"] = vFn

	vrhDiskSize := v.DiskSizeValidationRuleHandler
	rulesDiskSize := map[string]string{
		"ves.io.schema.rules.uint32.lte": "64000",
	}
	vFn, err = vrhDiskSize(rulesDiskSize)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSManagedMode.disk_size: %s", err)
		panic(errMsg)
	}
	v.FldValidators["disk_size"] = vFn

	v.FldValidators["egress_gateway_choice.egress_nat_gw"] = ves_io_schema_views.AWSNATGatewaychoiceTypeValidator().Validate
	v.FldValidators["egress_gateway_choice.egress_virtual_private_gateway"] = ves_io_schema_views.AWSVirtualPrivateGatewaychoiceTypeValidator().Validate

	v.FldValidators["private_connectivity_choice.private_connectivity"] = ves_io_schema_views.PrivateConnectConfigTypeValidator().Validate

	v.FldValidators["security_group_choice.custom_security_group"] = ves_io_schema_views.SecurityGroupTypeValidator().Validate

	v.FldValidators["service_vpc_choice.new_vpc"] = ves_io_schema_views.AWSVPCParamsTypeValidator().Validate

	v.FldValidators["site_type.single_interface"] = SingleInterfaceValidator().Validate
	v.FldValidators["site_type.multiple_interface"] = MultipleInterfaceValidator().Validate

	return v
}()

func AWSManagedModeValidator() db.Validator {
	return DefaultAWSManagedModeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSManagedNode) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSManagedNode) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSManagedNode) DeepCopy() *AWSManagedNode {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSManagedNode{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSManagedNode) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSManagedNode) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSManagedNodeValidator().Validate(ctx, m, opts...)
}

func (m *AWSManagedNode) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInterfaceListDRefInfo()

}

// GetDRefInfo for the field's type
func (m *AWSManagedNode) GetInterfaceListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInterfaceList() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetInterfaceList() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInterfaceList() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("interface_list[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateAWSManagedNode struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSManagedNode) TypeValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for type")
	}

	return validatorFn, nil
}

func (v *ValidateAWSManagedNode) HostnameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hostname")
	}

	return validatorFn, nil
}

func (v *ValidateAWSManagedNode) AwsAzNameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for aws_az_name")
	}

	return validatorFn, nil
}

func (v *ValidateAWSManagedNode) InterfaceListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for interface_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*AWSOrchestratedInterface, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := AWSOrchestratedInterfaceValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for interface_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*AWSOrchestratedInterface)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*AWSOrchestratedInterface, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated interface_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items interface_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSManagedNode) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSManagedNode)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSManagedNode got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["aws_az_name"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_az_name"))
		if err := fv(ctx, m.GetAwsAzName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hostname"]; exists {

		vOpts := append(opts, db.WithValidateField("hostname"))
		if err := fv(ctx, m.GetHostname(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["interface_list"]; exists {
		vOpts := append(opts, db.WithValidateField("interface_list"))
		if err := fv(ctx, m.GetInterfaceList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["type"]; exists {

		vOpts := append(opts, db.WithValidateField("type"))
		if err := fv(ctx, m.GetType(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSManagedNodeValidator = func() *ValidateAWSManagedNode {
	v := &ValidateAWSManagedNode{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhType := v.TypeValidationRuleHandler
	rulesType := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.in":        "[\"Control\"]",
	}
	vFn, err = vrhType(rulesType)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSManagedNode.type: %s", err)
		panic(errMsg)
	}
	v.FldValidators["type"] = vFn

	vrhHostname := v.HostnameValidationRuleHandler
	rulesHostname := map[string]string{
		"ves.io.schema.rules.string.max_len": "512",
	}
	vFn, err = vrhHostname(rulesHostname)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSManagedNode.hostname: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hostname"] = vFn

	vrhAwsAzName := v.AwsAzNameValidationRuleHandler
	rulesAwsAzName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAwsAzName(rulesAwsAzName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSManagedNode.aws_az_name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_az_name"] = vFn

	vrhInterfaceList := v.InterfaceListValidationRuleHandler
	rulesInterfaceList := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "2",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhInterfaceList(rulesInterfaceList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSManagedNode.interface_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interface_list"] = vFn

	return v
}()

func AWSManagedNodeValidator() db.Validator {
	return DefaultAWSManagedNodeValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSManagedNodeList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSManagedNodeList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSManagedNodeList) DeepCopy() *AWSManagedNodeList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSManagedNodeList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSManagedNodeList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSManagedNodeList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSManagedNodeListValidator().Validate(ctx, m, opts...)
}

func (m *AWSManagedNodeList) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetNodeListDRefInfo()

}

// GetDRefInfo for the field's type
func (m *AWSManagedNodeList) GetNodeListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNodeList() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetNodeList() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetNodeList() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("node_list[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateAWSManagedNodeList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSManagedNodeList) NodeListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for node_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*AWSManagedNode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := AWSManagedNodeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for node_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*AWSManagedNode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*AWSManagedNode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated node_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items node_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSManagedNodeList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSManagedNodeList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSManagedNodeList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["node_list"]; exists {
		vOpts := append(opts, db.WithValidateField("node_list"))
		if err := fv(ctx, m.GetNodeList(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSManagedNodeListValidator = func() *ValidateAWSManagedNodeList {
	v := &ValidateAWSManagedNodeList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNodeList := v.NodeListValidationRuleHandler
	rulesNodeList := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhNodeList(rulesNodeList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSManagedNodeList.node_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["node_list"] = vFn

	return v
}()

func AWSManagedNodeListValidator() db.Validator {
	return DefaultAWSManagedNodeListValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSOrchestratedInterface) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSOrchestratedInterface) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSOrchestratedInterface) DeepCopy() *AWSOrchestratedInterface {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSOrchestratedInterface{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSOrchestratedInterface) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSOrchestratedInterface) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSOrchestratedInterfaceValidator().Validate(ctx, m, opts...)
}

func (m *AWSOrchestratedInterface) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetNetworkOptionDRefInfo()

}

// GetDRefInfo for the field's type
func (m *AWSOrchestratedInterface) GetNetworkOptionDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkOption() == nil {
		return nil, nil
	}

	drInfos, err := m.GetNetworkOption().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetNetworkOption().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "network_option." + dri.DRField
	}
	return drInfos, err

}

type ValidateAWSOrchestratedInterface struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSOrchestratedInterface) NetworkOptionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for network_option")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAWSOrchestratedInterface) MtuValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for mtu")
	}

	return validatorFn, nil
}

func (v *ValidateAWSOrchestratedInterface) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSOrchestratedInterface)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSOrchestratedInterface got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["mtu"]; exists {

		vOpts := append(opts, db.WithValidateField("mtu"))
		if err := fv(ctx, m.GetMtu(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_option"]; exists {

		vOpts := append(opts, db.WithValidateField("network_option"))
		if err := fv(ctx, m.GetNetworkOption(), vOpts...); err != nil {
			return err
		}

	}

	switch m.GetSiteToSiteConnectivityInterfaceChoice().(type) {
	case *AWSOrchestratedInterface_SiteToSiteConnectivityInterfaceDisabled:
		if fv, exists := v.FldValidators["site_to_site_connectivity_interface_choice.site_to_site_connectivity_interface_disabled"]; exists {
			val := m.GetSiteToSiteConnectivityInterfaceChoice().(*AWSOrchestratedInterface_SiteToSiteConnectivityInterfaceDisabled).SiteToSiteConnectivityInterfaceDisabled
			vOpts := append(opts,
				db.WithValidateField("site_to_site_connectivity_interface_choice"),
				db.WithValidateField("site_to_site_connectivity_interface_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSOrchestratedInterface_SiteToSiteConnectivityInterfaceEnabled:
		if fv, exists := v.FldValidators["site_to_site_connectivity_interface_choice.site_to_site_connectivity_interface_enabled"]; exists {
			val := m.GetSiteToSiteConnectivityInterfaceChoice().(*AWSOrchestratedInterface_SiteToSiteConnectivityInterfaceEnabled).SiteToSiteConnectivityInterfaceEnabled
			vOpts := append(opts,
				db.WithValidateField("site_to_site_connectivity_interface_choice"),
				db.WithValidateField("site_to_site_connectivity_interface_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["subnet"]; exists {

		vOpts := append(opts, db.WithValidateField("subnet"))
		if err := fv(ctx, m.GetSubnet(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSOrchestratedInterfaceValidator = func() *ValidateAWSOrchestratedInterface {
	v := &ValidateAWSOrchestratedInterface{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNetworkOption := v.NetworkOptionValidationRuleHandler
	rulesNetworkOption := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhNetworkOption(rulesNetworkOption)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSOrchestratedInterface.network_option: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_option"] = vFn

	vrhMtu := v.MtuValidationRuleHandler
	rulesMtu := map[string]string{
		"ves.io.schema.rules.uint32.ranges": "0,512-16384",
	}
	vFn, err = vrhMtu(rulesMtu)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSOrchestratedInterface.mtu: %s", err)
		panic(errMsg)
	}
	v.FldValidators["mtu"] = vFn

	v.FldValidators["subnet"] = AWSSubnetChoiceTypeValidator().Validate

	return v
}()

func AWSOrchestratedInterfaceValidator() db.Validator {
	return DefaultAWSOrchestratedInterfaceValidator
}

// augmented methods on protoc/std generated struct

func (m *AWSSubnetChoiceType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AWSSubnetChoiceType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AWSSubnetChoiceType) DeepCopy() *AWSSubnetChoiceType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AWSSubnetChoiceType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AWSSubnetChoiceType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AWSSubnetChoiceType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AWSSubnetChoiceTypeValidator().Validate(ctx, m, opts...)
}

type ValidateAWSSubnetChoiceType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAWSSubnetChoiceType) ChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for choice")
	}
	return validatorFn, nil
}

func (v *ValidateAWSSubnetChoiceType) ChoiceExistingSubnetIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ExistingSubnetId, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for existing_subnet_id")
	}
	return oValidatorFn_ExistingSubnetId, nil
}

func (v *ValidateAWSSubnetChoiceType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AWSSubnetChoiceType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AWSSubnetChoiceType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["choice"]; exists {
		val := m.GetChoice()
		vOpts := append(opts,
			db.WithValidateField("choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetChoice().(type) {
	case *AWSSubnetChoiceType_SubnetParam:
		if fv, exists := v.FldValidators["choice.subnet_param"]; exists {
			val := m.GetChoice().(*AWSSubnetChoiceType_SubnetParam).SubnetParam
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("subnet_param"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AWSSubnetChoiceType_ExistingSubnetId:
		if fv, exists := v.FldValidators["choice.existing_subnet_id"]; exists {
			val := m.GetChoice().(*AWSSubnetChoiceType_ExistingSubnetId).ExistingSubnetId
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("existing_subnet_id"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAWSSubnetChoiceTypeValidator = func() *ValidateAWSSubnetChoiceType {
	v := &ValidateAWSSubnetChoiceType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhChoice := v.ChoiceValidationRuleHandler
	rulesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhChoice(rulesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for AWSSubnetChoiceType.choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["choice"] = vFn

	vrhChoiceExistingSubnetId := v.ChoiceExistingSubnetIdValidationRuleHandler
	rulesChoiceExistingSubnetId := map[string]string{
		"ves.io.schema.rules.string.max_len": "64",
		"ves.io.schema.rules.string.pattern": "^(subnet-)([a-z0-9]{8}|[a-z0-9]{17})$",
	}
	vFnMap["choice.existing_subnet_id"], err = vrhChoiceExistingSubnetId(rulesChoiceExistingSubnetId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field AWSSubnetChoiceType.choice_existing_subnet_id: %s", err)
		panic(errMsg)
	}

	v.FldValidators["choice.existing_subnet_id"] = vFnMap["choice.existing_subnet_id"]

	v.FldValidators["choice.subnet_param"] = AWSCloudSubnetParamTypeValidator().Validate

	return v
}()

func AWSSubnetChoiceTypeValidator() db.Validator {
	return DefaultAWSSubnetChoiceTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *MultipleInterface) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *MultipleInterface) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *MultipleInterface) DeepCopy() *MultipleInterface {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &MultipleInterface{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *MultipleInterface) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *MultipleInterface) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return MultipleInterfaceValidator().Validate(ctx, m, opts...)
}

func (m *MultipleInterface) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetNodeListDRefInfo()

}

// GetDRefInfo for the field's type
func (m *MultipleInterface) GetNodeListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNodeList() == nil {
		return nil, nil
	}

	drInfos, err := m.GetNodeList().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetNodeList().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "node_list." + dri.DRField
	}
	return drInfos, err

}

type ValidateMultipleInterface struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateMultipleInterface) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*MultipleInterface)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *MultipleInterface got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["node_list"]; exists {

		vOpts := append(opts, db.WithValidateField("node_list"))
		if err := fv(ctx, m.GetNodeList(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultMultipleInterfaceValidator = func() *ValidateMultipleInterface {
	v := &ValidateMultipleInterface{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["node_list"] = AWSManagedNodeListValidator().Validate

	return v
}()

func MultipleInterfaceValidator() db.Validator {
	return DefaultMultipleInterfaceValidator
}

// augmented methods on protoc/std generated struct

func (m *SingleInterface) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SingleInterface) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SingleInterface) DeepCopy() *SingleInterface {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SingleInterface{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SingleInterface) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SingleInterface) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SingleInterfaceValidator().Validate(ctx, m, opts...)
}

func (m *SingleInterface) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetNodeListDRefInfo()

}

// GetDRefInfo for the field's type
func (m *SingleInterface) GetNodeListDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNodeList() == nil {
		return nil, nil
	}

	drInfos, err := m.GetNodeList().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetNodeList().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "node_list." + dri.DRField
	}
	return drInfos, err

}

type ValidateSingleInterface struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSingleInterface) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SingleInterface)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SingleInterface got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["node_list"]; exists {

		vOpts := append(opts, db.WithValidateField("node_list"))
		if err := fv(ctx, m.GetNodeList(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSingleInterfaceValidator = func() *ValidateSingleInterface {
	v := &ValidateSingleInterface{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["node_list"] = AWSManagedNodeListValidator().Validate

	return v
}()

func SingleInterfaceValidator() db.Validator {
	return DefaultSingleInterfaceValidator
}

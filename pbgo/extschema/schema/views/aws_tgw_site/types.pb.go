// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/aws_tgw_site/types.proto

package aws_tgw_site

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/cloud_connect"
	fleet "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet"
	network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"
	site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VPN Tunnel Type
//
// x-displayName: "VPN Tunnel Type"
// This defines VPN Tunnel type for which the config exists
type VPNTunnelType int32

const (
	// x-displayName: "VPN Tunnel Hub"
	// VPN Tunnel Type - HUB
	HUB VPNTunnelType = 0
	// x-displayName: "VPN Tunnel Services"
	// VPN Tunnel Type - Services
	SERVICES VPNTunnelType = 1
)

var VPNTunnelType_name = map[int32]string{
	0: "HUB",
	1: "SERVICES",
}

var VPNTunnelType_value = map[string]int32{
	"HUB":      0,
	"SERVICES": 1,
}

func (VPNTunnelType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{0}
}

// TGW Assigned ASN Type
//
// x-displayName: "TGW Assigned ASN Type"
// Information needed when ASNs are assigned by the user
type TGWAssignedASNType struct {
	// TGW ASN
	//
	// x-displayName: "Enter TGW ASN"
	// x-example: "64512"
	// TGW ASN. Allowed range for 16-bit private ASNs include 64512 to 65534.
	TgwAsn uint32 `protobuf:"varint,1,opt,name=tgw_asn,json=tgwAsn,proto3" json:"tgw_asn,omitempty"`
	// F5XC Site ASN
	//
	// x-displayName: "Enter F5XC Site ASN"
	// x-example: "64500"
	// F5XC Site ASN.
	VolterraSiteAsn uint32 `protobuf:"varint,2,opt,name=volterra_site_asn,json=volterraSiteAsn,proto3" json:"volterra_site_asn,omitempty"`
}

func (m *TGWAssignedASNType) Reset()      { *m = TGWAssignedASNType{} }
func (*TGWAssignedASNType) ProtoMessage() {}
func (*TGWAssignedASNType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{0}
}
func (m *TGWAssignedASNType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TGWAssignedASNType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TGWAssignedASNType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TGWAssignedASNType.Merge(m, src)
}
func (m *TGWAssignedASNType) XXX_Size() int {
	return m.Size()
}
func (m *TGWAssignedASNType) XXX_DiscardUnknown() {
	xxx_messageInfo_TGWAssignedASNType.DiscardUnknown(m)
}

var xxx_messageInfo_TGWAssignedASNType proto.InternalMessageInfo

func (m *TGWAssignedASNType) GetTgwAsn() uint32 {
	if m != nil {
		return m.TgwAsn
	}
	return 0
}

func (m *TGWAssignedASNType) GetVolterraSiteAsn() uint32 {
	if m != nil {
		return m.VolterraSiteAsn
	}
	return 0
}

// Existing TGW Type
//
// x-displayName: "Existing TGW Type"
// Information needed for existing TGW
type ExistingTGWType struct {
	// Existing TGW ID
	//
	// x-displayName: "Existing TGW ID"
	// x-example: "tgw-12345678901234567"
	// Existing TGW ID
	TgwId string `protobuf:"bytes,1,opt,name=tgw_id,json=tgwId,proto3" json:"tgw_id,omitempty"`
	// TGW ASN
	//
	// x-displayName: "Enter TGW ASN"
	// x-example: "64500"
	// TGW ASN.
	TgwAsn uint32 `protobuf:"varint,2,opt,name=tgw_asn,json=tgwAsn,proto3" json:"tgw_asn,omitempty"`
	// F5XC Site ASN
	//
	// x-displayName: "Enter F5XC Site ASN"
	// x-example: "64501"
	// F5XC Site ASN.
	VolterraSiteAsn uint32 `protobuf:"varint,3,opt,name=volterra_site_asn,json=volterraSiteAsn,proto3" json:"volterra_site_asn,omitempty"`
}

func (m *ExistingTGWType) Reset()      { *m = ExistingTGWType{} }
func (*ExistingTGWType) ProtoMessage() {}
func (*ExistingTGWType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{1}
}
func (m *ExistingTGWType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExistingTGWType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExistingTGWType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistingTGWType.Merge(m, src)
}
func (m *ExistingTGWType) XXX_Size() int {
	return m.Size()
}
func (m *ExistingTGWType) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistingTGWType.DiscardUnknown(m)
}

var xxx_messageInfo_ExistingTGWType proto.InternalMessageInfo

func (m *ExistingTGWType) GetTgwId() string {
	if m != nil {
		return m.TgwId
	}
	return ""
}

func (m *ExistingTGWType) GetTgwAsn() uint32 {
	if m != nil {
		return m.TgwAsn
	}
	return 0
}

func (m *ExistingTGWType) GetVolterraSiteAsn() uint32 {
	if m != nil {
		return m.VolterraSiteAsn
	}
	return 0
}

// TGWParamsType
//
// x-displayName: "TGWParamsType"
type TGWParamsType struct {
	// BGP ASN config
	//
	// x-displayName: "Select BGP ASN"
	// x-required
	// Select BGP ASN config mode
	//
	// Types that are valid to be assigned to AsnChoice:
	//	*TGWParamsType_SystemGenerated
	//	*TGWParamsType_UserAssigned
	AsnChoice isTGWParamsType_AsnChoice `protobuf_oneof:"asn_choice"`
}

func (m *TGWParamsType) Reset()      { *m = TGWParamsType{} }
func (*TGWParamsType) ProtoMessage() {}
func (*TGWParamsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{2}
}
func (m *TGWParamsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TGWParamsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TGWParamsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TGWParamsType.Merge(m, src)
}
func (m *TGWParamsType) XXX_Size() int {
	return m.Size()
}
func (m *TGWParamsType) XXX_DiscardUnknown() {
	xxx_messageInfo_TGWParamsType.DiscardUnknown(m)
}

var xxx_messageInfo_TGWParamsType proto.InternalMessageInfo

type isTGWParamsType_AsnChoice interface {
	isTGWParamsType_AsnChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TGWParamsType_SystemGenerated struct {
	SystemGenerated *schema.Empty `protobuf:"bytes,2,opt,name=system_generated,json=systemGenerated,proto3,oneof" json:"system_generated,omitempty"`
}
type TGWParamsType_UserAssigned struct {
	UserAssigned *TGWAssignedASNType `protobuf:"bytes,3,opt,name=user_assigned,json=userAssigned,proto3,oneof" json:"user_assigned,omitempty"`
}

func (*TGWParamsType_SystemGenerated) isTGWParamsType_AsnChoice() {}
func (*TGWParamsType_UserAssigned) isTGWParamsType_AsnChoice()    {}

func (m *TGWParamsType) GetAsnChoice() isTGWParamsType_AsnChoice {
	if m != nil {
		return m.AsnChoice
	}
	return nil
}

func (m *TGWParamsType) GetSystemGenerated() *schema.Empty {
	if x, ok := m.GetAsnChoice().(*TGWParamsType_SystemGenerated); ok {
		return x.SystemGenerated
	}
	return nil
}

func (m *TGWParamsType) GetUserAssigned() *TGWAssignedASNType {
	if x, ok := m.GetAsnChoice().(*TGWParamsType_UserAssigned); ok {
		return x.UserAssigned
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TGWParamsType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TGWParamsType_SystemGenerated)(nil),
		(*TGWParamsType_UserAssigned)(nil),
	}
}

// AWS Service VPC and TGW
//
// x-displayName: "AWS Service VPC and TGW"
// Setup AWS services VPC, transit gateway and site
type ServicesVPCType struct {
	// AWS Region
	//
	// x-displayName: "AWS Region"
	// x-example: "us-east-1"
	// x-required
	// AWS Region of your services vpc, where F5XC site will be deployed.
	AwsRegion string `protobuf:"bytes,1,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	// New/Existing Services VPC
	//
	// x-displayName: "New/Existing Services VPC"
	// x-required
	// Services VPC where F5XC site will be deployed can be an existing VPC
	// or F5XC can orchestrate a new VPC and create required cloud resources within that VPC.
	//
	// Types that are valid to be assigned to ServiceVpcChoice:
	//	*ServicesVPCType_NewVpc
	//	*ServicesVPCType_VpcId
	ServiceVpcChoice isServicesVPCType_ServiceVpcChoice `protobuf_oneof:"service_vpc_choice"`
	// New/Existing Transit Gateway
	//
	// x-displayName: "New/Existing Transit Gateway"
	// x-required
	// F5XC Site can work with an existing Transit Gateway(TGW) and orchestrate attachments, TGW routing and propagation
	// or F5XC can orchestrate new TGW, attachments, TGW routing and propagation
	//
	// Types that are valid to be assigned to TgwChoice:
	//	*ServicesVPCType_NewTgw
	//	*ServicesVPCType_ExistingTgw
	TgwChoice isServicesVPCType_TgwChoice `protobuf_oneof:"tgw_choice"`
	// AWS Certified Hardware
	//
	// x-displayName: "AWS Certified Hardware"
	// x-example: "aws-byol-multi-nic-voltmesh"
	// Name for AWS certified hardware.
	AwsCertifiedHw string `protobuf:"bytes,8,opt,name=aws_certified_hw,json=awsCertifiedHw,proto3" json:"aws_certified_hw,omitempty"` // Deprecated: Do not use.
	// AWS Instance Type
	//
	// x-displayName: "AWS Instance Type for Node"
	// x-example: "a1.xlarge"
	// x-required
	// Instance size based on the performance.
	InstanceType string `protobuf:"bytes,9,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// Public SSH key
	//
	// x-displayName: "Public SSH key"
	// x-example: "ssh-rsa AAAAB..."
	// x-required
	// Public SSH key for accessing nodes of the site.
	SshKey string `protobuf:"bytes,10,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	// Nodes
	//
	// x-displayName: "Ingress/Egress Gateway (two Interface) Nodes in AZ"
	// x-required
	// Only Single AZ or Three AZ(s) nodes are supported currently.
	AzNodes []*views.AWSVPCTwoInterfaceNodeType `protobuf:"bytes,11,rep,name=az_nodes,json=azNodes,proto3" json:"az_nodes,omitempty"`
	// Desired Worker Nodes Selection
	//
	// x-displayName: "Desired Worker Nodes for the site"
	// x-required
	// Desired number of worker nodes to be deployed on the site.
	//
	// Types that are valid to be assigned to WorkerNodes:
	//	*ServicesVPCType_NodesPerAz
	//	*ServicesVPCType_TotalNodes
	//	*ServicesVPCType_NoWorkerNodes
	WorkerNodes isServicesVPCType_WorkerNodes `protobuf_oneof:"worker_nodes"`
	// Node Disk size
	//
	// x-displayName: "Node Disk Size"
	// x-example: "80"
	// Node disk size for all node in the F5XC site. Unit is GiB
	DiskSize uint32 `protobuf:"varint,22,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// Cloud Credential Selection
	//
	// x-displayName: "Credential Reference"
	// x-required
	// Reference to AWS cloud credential object used to deploy cloud resources
	//
	// Types that are valid to be assigned to Deployment:
	//	*ServicesVPCType_AwsCred
	//	*ServicesVPCType_Assisted
	Deployment isServicesVPCType_Deployment `protobuf_oneof:"deployment"`
	// Advertise VIPs to Internet
	//
	// x-displayName: "Advertise VIPs to Internet on Site"
	// x-required
	// Manage Advertising VIP to Internet on Site
	//
	// Types that are valid to be assigned to InternetVipChoice:
	//	*ServicesVPCType_DisableInternetVip
	//	*ServicesVPCType_EnableInternetVip
	InternetVipChoice isServicesVPCType_InternetVipChoice `protobuf_oneof:"internet_vip_choice"`
	// Security Group
	//
	// x-displayName: "Security Group"
	// x-required
	// Select the security group for slo and sli interfaces.
	//
	// Types that are valid to be assigned to SecurityGroupChoice:
	//	*ServicesVPCType_F5XcSecurityGroup
	//	*ServicesVPCType_CustomSecurityGroup
	SecurityGroupChoice isServicesVPCType_SecurityGroupChoice `protobuf_oneof:"security_group_choice"`
}

func (m *ServicesVPCType) Reset()      { *m = ServicesVPCType{} }
func (*ServicesVPCType) ProtoMessage() {}
func (*ServicesVPCType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{3}
}
func (m *ServicesVPCType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicesVPCType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServicesVPCType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesVPCType.Merge(m, src)
}
func (m *ServicesVPCType) XXX_Size() int {
	return m.Size()
}
func (m *ServicesVPCType) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesVPCType.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesVPCType proto.InternalMessageInfo

type isServicesVPCType_ServiceVpcChoice interface {
	isServicesVPCType_ServiceVpcChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServicesVPCType_TgwChoice interface {
	isServicesVPCType_TgwChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServicesVPCType_WorkerNodes interface {
	isServicesVPCType_WorkerNodes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServicesVPCType_Deployment interface {
	isServicesVPCType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServicesVPCType_InternetVipChoice interface {
	isServicesVPCType_InternetVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServicesVPCType_SecurityGroupChoice interface {
	isServicesVPCType_SecurityGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServicesVPCType_NewVpc struct {
	NewVpc *views.AWSVPCParamsType `protobuf:"bytes,3,opt,name=new_vpc,json=newVpc,proto3,oneof" json:"new_vpc,omitempty"`
}
type ServicesVPCType_VpcId struct {
	VpcId string `protobuf:"bytes,4,opt,name=vpc_id,json=vpcId,proto3,oneof" json:"vpc_id,omitempty"`
}
type ServicesVPCType_NewTgw struct {
	NewTgw *TGWParamsType `protobuf:"bytes,6,opt,name=new_tgw,json=newTgw,proto3,oneof" json:"new_tgw,omitempty"`
}
type ServicesVPCType_ExistingTgw struct {
	ExistingTgw *ExistingTGWType `protobuf:"bytes,7,opt,name=existing_tgw,json=existingTgw,proto3,oneof" json:"existing_tgw,omitempty"`
}
type ServicesVPCType_NodesPerAz struct {
	NodesPerAz uint32 `protobuf:"varint,12,opt,name=nodes_per_az,json=nodesPerAz,proto3,oneof" json:"nodes_per_az,omitempty"`
}
type ServicesVPCType_TotalNodes struct {
	TotalNodes uint32 `protobuf:"varint,27,opt,name=total_nodes,json=totalNodes,proto3,oneof" json:"total_nodes,omitempty"`
}
type ServicesVPCType_NoWorkerNodes struct {
	NoWorkerNodes *schema.Empty `protobuf:"bytes,28,opt,name=no_worker_nodes,json=noWorkerNodes,proto3,oneof" json:"no_worker_nodes,omitempty"`
}
type ServicesVPCType_AwsCred struct {
	AwsCred *views.ObjectRefType `protobuf:"bytes,14,opt,name=aws_cred,json=awsCred,proto3,oneof" json:"aws_cred,omitempty"`
}
type ServicesVPCType_Assisted struct {
	Assisted *schema.Empty `protobuf:"bytes,15,opt,name=assisted,proto3,oneof" json:"assisted,omitempty"`
}
type ServicesVPCType_DisableInternetVip struct {
	DisableInternetVip *schema.Empty `protobuf:"bytes,31,opt,name=disable_internet_vip,json=disableInternetVip,proto3,oneof" json:"disable_internet_vip,omitempty"`
}
type ServicesVPCType_EnableInternetVip struct {
	EnableInternetVip *schema.Empty `protobuf:"bytes,33,opt,name=enable_internet_vip,json=enableInternetVip,proto3,oneof" json:"enable_internet_vip,omitempty"`
}
type ServicesVPCType_F5XcSecurityGroup struct {
	F5XcSecurityGroup *schema.Empty `protobuf:"bytes,35,opt,name=f5xc_security_group,json=f5xcSecurityGroup,proto3,oneof" json:"f5xc_security_group,omitempty"`
}
type ServicesVPCType_CustomSecurityGroup struct {
	CustomSecurityGroup *views.SecurityGroupType `protobuf:"bytes,36,opt,name=custom_security_group,json=customSecurityGroup,proto3,oneof" json:"custom_security_group,omitempty"`
}

func (*ServicesVPCType_NewVpc) isServicesVPCType_ServiceVpcChoice()                 {}
func (*ServicesVPCType_VpcId) isServicesVPCType_ServiceVpcChoice()                  {}
func (*ServicesVPCType_NewTgw) isServicesVPCType_TgwChoice()                        {}
func (*ServicesVPCType_ExistingTgw) isServicesVPCType_TgwChoice()                   {}
func (*ServicesVPCType_NodesPerAz) isServicesVPCType_WorkerNodes()                  {}
func (*ServicesVPCType_TotalNodes) isServicesVPCType_WorkerNodes()                  {}
func (*ServicesVPCType_NoWorkerNodes) isServicesVPCType_WorkerNodes()               {}
func (*ServicesVPCType_AwsCred) isServicesVPCType_Deployment()                      {}
func (*ServicesVPCType_Assisted) isServicesVPCType_Deployment()                     {}
func (*ServicesVPCType_DisableInternetVip) isServicesVPCType_InternetVipChoice()    {}
func (*ServicesVPCType_EnableInternetVip) isServicesVPCType_InternetVipChoice()     {}
func (*ServicesVPCType_F5XcSecurityGroup) isServicesVPCType_SecurityGroupChoice()   {}
func (*ServicesVPCType_CustomSecurityGroup) isServicesVPCType_SecurityGroupChoice() {}

func (m *ServicesVPCType) GetServiceVpcChoice() isServicesVPCType_ServiceVpcChoice {
	if m != nil {
		return m.ServiceVpcChoice
	}
	return nil
}
func (m *ServicesVPCType) GetTgwChoice() isServicesVPCType_TgwChoice {
	if m != nil {
		return m.TgwChoice
	}
	return nil
}
func (m *ServicesVPCType) GetWorkerNodes() isServicesVPCType_WorkerNodes {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}
func (m *ServicesVPCType) GetDeployment() isServicesVPCType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}
func (m *ServicesVPCType) GetInternetVipChoice() isServicesVPCType_InternetVipChoice {
	if m != nil {
		return m.InternetVipChoice
	}
	return nil
}
func (m *ServicesVPCType) GetSecurityGroupChoice() isServicesVPCType_SecurityGroupChoice {
	if m != nil {
		return m.SecurityGroupChoice
	}
	return nil
}

func (m *ServicesVPCType) GetAwsRegion() string {
	if m != nil {
		return m.AwsRegion
	}
	return ""
}

func (m *ServicesVPCType) GetNewVpc() *views.AWSVPCParamsType {
	if x, ok := m.GetServiceVpcChoice().(*ServicesVPCType_NewVpc); ok {
		return x.NewVpc
	}
	return nil
}

func (m *ServicesVPCType) GetVpcId() string {
	if x, ok := m.GetServiceVpcChoice().(*ServicesVPCType_VpcId); ok {
		return x.VpcId
	}
	return ""
}

func (m *ServicesVPCType) GetNewTgw() *TGWParamsType {
	if x, ok := m.GetTgwChoice().(*ServicesVPCType_NewTgw); ok {
		return x.NewTgw
	}
	return nil
}

func (m *ServicesVPCType) GetExistingTgw() *ExistingTGWType {
	if x, ok := m.GetTgwChoice().(*ServicesVPCType_ExistingTgw); ok {
		return x.ExistingTgw
	}
	return nil
}

// Deprecated: Do not use.
func (m *ServicesVPCType) GetAwsCertifiedHw() string {
	if m != nil {
		return m.AwsCertifiedHw
	}
	return ""
}

func (m *ServicesVPCType) GetInstanceType() string {
	if m != nil {
		return m.InstanceType
	}
	return ""
}

func (m *ServicesVPCType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *ServicesVPCType) GetAzNodes() []*views.AWSVPCTwoInterfaceNodeType {
	if m != nil {
		return m.AzNodes
	}
	return nil
}

func (m *ServicesVPCType) GetNodesPerAz() uint32 {
	if x, ok := m.GetWorkerNodes().(*ServicesVPCType_NodesPerAz); ok {
		return x.NodesPerAz
	}
	return 0
}

func (m *ServicesVPCType) GetTotalNodes() uint32 {
	if x, ok := m.GetWorkerNodes().(*ServicesVPCType_TotalNodes); ok {
		return x.TotalNodes
	}
	return 0
}

func (m *ServicesVPCType) GetNoWorkerNodes() *schema.Empty {
	if x, ok := m.GetWorkerNodes().(*ServicesVPCType_NoWorkerNodes); ok {
		return x.NoWorkerNodes
	}
	return nil
}

func (m *ServicesVPCType) GetDiskSize() uint32 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *ServicesVPCType) GetAwsCred() *views.ObjectRefType {
	if x, ok := m.GetDeployment().(*ServicesVPCType_AwsCred); ok {
		return x.AwsCred
	}
	return nil
}

// Deprecated: Do not use.
func (m *ServicesVPCType) GetAssisted() *schema.Empty {
	if x, ok := m.GetDeployment().(*ServicesVPCType_Assisted); ok {
		return x.Assisted
	}
	return nil
}

func (m *ServicesVPCType) GetDisableInternetVip() *schema.Empty {
	if x, ok := m.GetInternetVipChoice().(*ServicesVPCType_DisableInternetVip); ok {
		return x.DisableInternetVip
	}
	return nil
}

func (m *ServicesVPCType) GetEnableInternetVip() *schema.Empty {
	if x, ok := m.GetInternetVipChoice().(*ServicesVPCType_EnableInternetVip); ok {
		return x.EnableInternetVip
	}
	return nil
}

func (m *ServicesVPCType) GetF5XcSecurityGroup() *schema.Empty {
	if x, ok := m.GetSecurityGroupChoice().(*ServicesVPCType_F5XcSecurityGroup); ok {
		return x.F5XcSecurityGroup
	}
	return nil
}

func (m *ServicesVPCType) GetCustomSecurityGroup() *views.SecurityGroupType {
	if x, ok := m.GetSecurityGroupChoice().(*ServicesVPCType_CustomSecurityGroup); ok {
		return x.CustomSecurityGroup
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ServicesVPCType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ServicesVPCType_NewVpc)(nil),
		(*ServicesVPCType_VpcId)(nil),
		(*ServicesVPCType_NewTgw)(nil),
		(*ServicesVPCType_ExistingTgw)(nil),
		(*ServicesVPCType_NodesPerAz)(nil),
		(*ServicesVPCType_TotalNodes)(nil),
		(*ServicesVPCType_NoWorkerNodes)(nil),
		(*ServicesVPCType_AwsCred)(nil),
		(*ServicesVPCType_Assisted)(nil),
		(*ServicesVPCType_DisableInternetVip)(nil),
		(*ServicesVPCType_EnableInternetVip)(nil),
		(*ServicesVPCType_F5XcSecurityGroup)(nil),
		(*ServicesVPCType_CustomSecurityGroup)(nil),
	}
}

// Virtual Network Configuration
//
// x-displayName: "Virtual Network Configuration"
// Virtual Network Configuration
type VnConfiguration struct {
	// Manage Static Routes for Inside Network
	//
	// x-displayName: "Manage Static Routes for Inside Network"
	// x-required
	// Manage static routes for inside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to InsideStaticRouteChoice:
	//	*VnConfiguration_NoInsideStaticRoutes
	//	*VnConfiguration_InsideStaticRoutes
	InsideStaticRouteChoice isVnConfiguration_InsideStaticRouteChoice `protobuf_oneof:"inside_static_route_choice"`
	// Manage Static Routes for Outside Network
	//
	// x-displayName: "Manage Static Routes for Outside Network"
	// x-required
	// Manage static routes for outside network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to OutsideStaticRouteChoice:
	//	*VnConfiguration_NoOutsideStaticRoutes
	//	*VnConfiguration_OutsideStaticRoutes
	OutsideStaticRouteChoice isVnConfiguration_OutsideStaticRouteChoice `protobuf_oneof:"outside_static_route_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Select Global Networks to Connect"
	// x-required
	// Select global networks to connect via inside or outside network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*VnConfiguration_NoGlobalNetwork
	//	*VnConfiguration_GlobalNetworkList
	GlobalNetworkChoice isVnConfiguration_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// Select DC Cluster Group
	//
	// x-displayName: "Select DC Cluster Group"
	// x-required
	// Is this site member of a dc cluster group via selected network type
	//
	// Types that are valid to be assigned to DcClusterGroupChoice:
	//	*VnConfiguration_NoDcClusterGroup
	//	*VnConfiguration_DcClusterGroupOutsideVn
	//	*VnConfiguration_DcClusterGroupInsideVn
	DcClusterGroupChoice isVnConfiguration_DcClusterGroupChoice `protobuf_oneof:"dc_cluster_group_choice"`
	// Site Mesh Group Connection Type
	//
	// x-displayName: "Site Mesh Group Connection Type"
	// x-required
	// Select how the site mesh group needs to be connected
	//
	// Types that are valid to be assigned to SiteMeshGroupChoice:
	//	*VnConfiguration_SmConnectionPublicIp
	//	*VnConfiguration_SmConnectionPvtIp
	SiteMeshGroupChoice isVnConfiguration_SiteMeshGroupChoice `protobuf_oneof:"site_mesh_group_choice"`
	// Allowed VIP Port Configuration
	//
	// x-displayName: "Allowed VIP Port Configuration"
	// Allowed VIP Port Configuration
	AllowedVipPort *views.AllowedVIPPorts `protobuf:"bytes,10,opt,name=allowed_vip_port,json=allowedVipPort,proto3" json:"allowed_vip_port,omitempty"`
	// Allowed VIP Port Configuration for Inside Network
	//
	// x-displayName: "Allowed VIP Port Configuration for Inside Network"
	// Allowed VIP Port Configuration for Inside Network
	AllowedVipPortSli *views.AllowedVIPPorts `protobuf:"bytes,18,opt,name=allowed_vip_port_sli,json=allowedVipPortSli,proto3" json:"allowed_vip_port_sli,omitempty"`
}

func (m *VnConfiguration) Reset()      { *m = VnConfiguration{} }
func (*VnConfiguration) ProtoMessage() {}
func (*VnConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{4}
}
func (m *VnConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VnConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VnConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VnConfiguration.Merge(m, src)
}
func (m *VnConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *VnConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_VnConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_VnConfiguration proto.InternalMessageInfo

type isVnConfiguration_InsideStaticRouteChoice interface {
	isVnConfiguration_InsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVnConfiguration_OutsideStaticRouteChoice interface {
	isVnConfiguration_OutsideStaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVnConfiguration_GlobalNetworkChoice interface {
	isVnConfiguration_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVnConfiguration_DcClusterGroupChoice interface {
	isVnConfiguration_DcClusterGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVnConfiguration_SiteMeshGroupChoice interface {
	isVnConfiguration_SiteMeshGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VnConfiguration_NoInsideStaticRoutes struct {
	NoInsideStaticRoutes *schema.Empty `protobuf:"bytes,2,opt,name=no_inside_static_routes,json=noInsideStaticRoutes,proto3,oneof" json:"no_inside_static_routes,omitempty"`
}
type VnConfiguration_InsideStaticRoutes struct {
	InsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,3,opt,name=inside_static_routes,json=insideStaticRoutes,proto3,oneof" json:"inside_static_routes,omitempty"`
}
type VnConfiguration_NoOutsideStaticRoutes struct {
	NoOutsideStaticRoutes *schema.Empty `protobuf:"bytes,5,opt,name=no_outside_static_routes,json=noOutsideStaticRoutes,proto3,oneof" json:"no_outside_static_routes,omitempty"`
}
type VnConfiguration_OutsideStaticRoutes struct {
	OutsideStaticRoutes *views.SiteStaticRoutesListType `protobuf:"bytes,6,opt,name=outside_static_routes,json=outsideStaticRoutes,proto3,oneof" json:"outside_static_routes,omitempty"`
}
type VnConfiguration_NoGlobalNetwork struct {
	NoGlobalNetwork *schema.Empty `protobuf:"bytes,8,opt,name=no_global_network,json=noGlobalNetwork,proto3,oneof" json:"no_global_network,omitempty"`
}
type VnConfiguration_GlobalNetworkList struct {
	GlobalNetworkList *views.GlobalNetworkConnectionListType `protobuf:"bytes,9,opt,name=global_network_list,json=globalNetworkList,proto3,oneof" json:"global_network_list,omitempty"`
}
type VnConfiguration_NoDcClusterGroup struct {
	NoDcClusterGroup *schema.Empty `protobuf:"bytes,12,opt,name=no_dc_cluster_group,json=noDcClusterGroup,proto3,oneof" json:"no_dc_cluster_group,omitempty"`
}
type VnConfiguration_DcClusterGroupOutsideVn struct {
	DcClusterGroupOutsideVn *views.ObjectRefType `protobuf:"bytes,13,opt,name=dc_cluster_group_outside_vn,json=dcClusterGroupOutsideVn,proto3,oneof" json:"dc_cluster_group_outside_vn,omitempty"`
}
type VnConfiguration_DcClusterGroupInsideVn struct {
	DcClusterGroupInsideVn *views.ObjectRefType `protobuf:"bytes,14,opt,name=dc_cluster_group_inside_vn,json=dcClusterGroupInsideVn,proto3,oneof" json:"dc_cluster_group_inside_vn,omitempty"`
}
type VnConfiguration_SmConnectionPublicIp struct {
	SmConnectionPublicIp *schema.Empty `protobuf:"bytes,16,opt,name=sm_connection_public_ip,json=smConnectionPublicIp,proto3,oneof" json:"sm_connection_public_ip,omitempty"`
}
type VnConfiguration_SmConnectionPvtIp struct {
	SmConnectionPvtIp *schema.Empty `protobuf:"bytes,17,opt,name=sm_connection_pvt_ip,json=smConnectionPvtIp,proto3,oneof" json:"sm_connection_pvt_ip,omitempty"`
}

func (*VnConfiguration_NoInsideStaticRoutes) isVnConfiguration_InsideStaticRouteChoice()   {}
func (*VnConfiguration_InsideStaticRoutes) isVnConfiguration_InsideStaticRouteChoice()     {}
func (*VnConfiguration_NoOutsideStaticRoutes) isVnConfiguration_OutsideStaticRouteChoice() {}
func (*VnConfiguration_OutsideStaticRoutes) isVnConfiguration_OutsideStaticRouteChoice()   {}
func (*VnConfiguration_NoGlobalNetwork) isVnConfiguration_GlobalNetworkChoice()            {}
func (*VnConfiguration_GlobalNetworkList) isVnConfiguration_GlobalNetworkChoice()          {}
func (*VnConfiguration_NoDcClusterGroup) isVnConfiguration_DcClusterGroupChoice()          {}
func (*VnConfiguration_DcClusterGroupOutsideVn) isVnConfiguration_DcClusterGroupChoice()   {}
func (*VnConfiguration_DcClusterGroupInsideVn) isVnConfiguration_DcClusterGroupChoice()    {}
func (*VnConfiguration_SmConnectionPublicIp) isVnConfiguration_SiteMeshGroupChoice()       {}
func (*VnConfiguration_SmConnectionPvtIp) isVnConfiguration_SiteMeshGroupChoice()          {}

func (m *VnConfiguration) GetInsideStaticRouteChoice() isVnConfiguration_InsideStaticRouteChoice {
	if m != nil {
		return m.InsideStaticRouteChoice
	}
	return nil
}
func (m *VnConfiguration) GetOutsideStaticRouteChoice() isVnConfiguration_OutsideStaticRouteChoice {
	if m != nil {
		return m.OutsideStaticRouteChoice
	}
	return nil
}
func (m *VnConfiguration) GetGlobalNetworkChoice() isVnConfiguration_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}
func (m *VnConfiguration) GetDcClusterGroupChoice() isVnConfiguration_DcClusterGroupChoice {
	if m != nil {
		return m.DcClusterGroupChoice
	}
	return nil
}
func (m *VnConfiguration) GetSiteMeshGroupChoice() isVnConfiguration_SiteMeshGroupChoice {
	if m != nil {
		return m.SiteMeshGroupChoice
	}
	return nil
}

func (m *VnConfiguration) GetNoInsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetInsideStaticRouteChoice().(*VnConfiguration_NoInsideStaticRoutes); ok {
		return x.NoInsideStaticRoutes
	}
	return nil
}

func (m *VnConfiguration) GetInsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetInsideStaticRouteChoice().(*VnConfiguration_InsideStaticRoutes); ok {
		return x.InsideStaticRoutes
	}
	return nil
}

func (m *VnConfiguration) GetNoOutsideStaticRoutes() *schema.Empty {
	if x, ok := m.GetOutsideStaticRouteChoice().(*VnConfiguration_NoOutsideStaticRoutes); ok {
		return x.NoOutsideStaticRoutes
	}
	return nil
}

func (m *VnConfiguration) GetOutsideStaticRoutes() *views.SiteStaticRoutesListType {
	if x, ok := m.GetOutsideStaticRouteChoice().(*VnConfiguration_OutsideStaticRoutes); ok {
		return x.OutsideStaticRoutes
	}
	return nil
}

func (m *VnConfiguration) GetNoGlobalNetwork() *schema.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*VnConfiguration_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *VnConfiguration) GetGlobalNetworkList() *views.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*VnConfiguration_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *VnConfiguration) GetNoDcClusterGroup() *schema.Empty {
	if x, ok := m.GetDcClusterGroupChoice().(*VnConfiguration_NoDcClusterGroup); ok {
		return x.NoDcClusterGroup
	}
	return nil
}

func (m *VnConfiguration) GetDcClusterGroupOutsideVn() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*VnConfiguration_DcClusterGroupOutsideVn); ok {
		return x.DcClusterGroupOutsideVn
	}
	return nil
}

func (m *VnConfiguration) GetDcClusterGroupInsideVn() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*VnConfiguration_DcClusterGroupInsideVn); ok {
		return x.DcClusterGroupInsideVn
	}
	return nil
}

func (m *VnConfiguration) GetSmConnectionPublicIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*VnConfiguration_SmConnectionPublicIp); ok {
		return x.SmConnectionPublicIp
	}
	return nil
}

func (m *VnConfiguration) GetSmConnectionPvtIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*VnConfiguration_SmConnectionPvtIp); ok {
		return x.SmConnectionPvtIp
	}
	return nil
}

func (m *VnConfiguration) GetAllowedVipPort() *views.AllowedVIPPorts {
	if m != nil {
		return m.AllowedVipPort
	}
	return nil
}

func (m *VnConfiguration) GetAllowedVipPortSli() *views.AllowedVIPPorts {
	if m != nil {
		return m.AllowedVipPortSli
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VnConfiguration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VnConfiguration_NoInsideStaticRoutes)(nil),
		(*VnConfiguration_InsideStaticRoutes)(nil),
		(*VnConfiguration_NoOutsideStaticRoutes)(nil),
		(*VnConfiguration_OutsideStaticRoutes)(nil),
		(*VnConfiguration_NoGlobalNetwork)(nil),
		(*VnConfiguration_GlobalNetworkList)(nil),
		(*VnConfiguration_NoDcClusterGroup)(nil),
		(*VnConfiguration_DcClusterGroupOutsideVn)(nil),
		(*VnConfiguration_DcClusterGroupInsideVn)(nil),
		(*VnConfiguration_SmConnectionPublicIp)(nil),
		(*VnConfiguration_SmConnectionPvtIp)(nil),
	}
}

// AWS Services VPC Config
//
// x-displayName: "AWS Services VPC Config"
// AWS Services VPC Replace config
type ServicesVPCReplaceType struct {
	// AWS Region
	//
	// x-displayName: "AWS Region"
	// x-example: "us-east-1"
	// x-required
	// AWS Region of your services vpc, where F5XC site will be deployed.
	AwsRegion string `protobuf:"bytes,1,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	// New/Existing Services VPC
	//
	// x-displayName: "New/Existing Services VPC"
	// x-required
	// Services VPC where F5XC site will be deployed can be an existing VPC
	// or F5XC can orchestrate a new VPC and create required cloud resources within that VPC.
	//
	// Types that are valid to be assigned to ServiceVpcChoice:
	//	*ServicesVPCReplaceType_NewVpc
	//	*ServicesVPCReplaceType_VpcId
	ServiceVpcChoice isServicesVPCReplaceType_ServiceVpcChoice `protobuf_oneof:"service_vpc_choice"`
	// New/Existing Transit Gateway
	//
	// x-displayName: "New/Existing Transit Gateway"
	// x-required
	// F5XC Site can work with an existing Transit Gateway(TGW) and orchestrate attachments, TGW routing and propagation
	// or F5XC can orchestrate new TGW, attachments, TGW routing and propagation
	//
	// Types that are valid to be assigned to TgwChoice:
	//	*ServicesVPCReplaceType_NewTgw
	//	*ServicesVPCReplaceType_ExistingTgw
	TgwChoice    isServicesVPCReplaceType_TgwChoice  `protobuf_oneof:"tgw_choice"`
	InstanceType string                              `protobuf:"bytes,9,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	AzNodes      []*views.AWSVPCTwoInterfaceNodeType `protobuf:"bytes,11,rep,name=az_nodes,json=azNodes,proto3" json:"az_nodes,omitempty"`
	// Automatic Deployment
	//
	// x-displayName: "Automatic Deployment"
	// x-required
	// Deploying automatic via volterra.
	//
	// Types that are valid to be assigned to Deployment:
	//	*ServicesVPCReplaceType_AwsCred
	//	*ServicesVPCReplaceType_Assisted
	Deployment isServicesVPCReplaceType_Deployment `protobuf_oneof:"deployment"`
	// Public SSH key
	//
	// x-displayName: "Public SSH key"
	// x-example: "ssh-rsa AAAAB..."
	// x-required
	// Public SSH key for accessing nodes of the site.
	SshKey string `protobuf:"bytes,10,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	// Node Disk size
	//
	// x-displayName: "Node Disk Size"
	// x-example: "80"
	// Node disk size for all node in the F5XC site. Unit is GiB
	DiskSize uint32 `protobuf:"varint,22,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// Desired Worker Nodes Selection
	//
	// x-displayName: "Desired Worker Nodes Selection"
	// x-required
	// Choice of deploying desired number of worker nodes.
	//
	// Types that are valid to be assigned to WorkerNodes:
	//	*ServicesVPCReplaceType_NodesPerAz
	//	*ServicesVPCReplaceType_TotalNodes
	//	*ServicesVPCReplaceType_NoWorkerNodes
	WorkerNodes isServicesVPCReplaceType_WorkerNodes `protobuf_oneof:"worker_nodes"`
	// Internet VIP choice
	//
	// x-displayName: "Internet VIP choice"
	// x-required
	// x-example: "Internet VIP choice"
	// Internet VIP Choice
	//
	// Types that are valid to be assigned to InternetVipChoice:
	//	*ServicesVPCReplaceType_DisableInternetVip
	//	*ServicesVPCReplaceType_EnableInternetVip
	InternetVipChoice isServicesVPCReplaceType_InternetVipChoice `protobuf_oneof:"internet_vip_choice"`
	// Security Group
	//
	// x-displayName: "Security Group"
	// x-required
	// Select the security group for slo and sli interfaces.
	//
	// Types that are valid to be assigned to SecurityGroupChoice:
	//	*ServicesVPCReplaceType_F5XcSecurityGroup
	//	*ServicesVPCReplaceType_CustomSecurityGroup
	SecurityGroupChoice isServicesVPCReplaceType_SecurityGroupChoice `protobuf_oneof:"security_group_choice"`
}

func (m *ServicesVPCReplaceType) Reset()      { *m = ServicesVPCReplaceType{} }
func (*ServicesVPCReplaceType) ProtoMessage() {}
func (*ServicesVPCReplaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{5}
}
func (m *ServicesVPCReplaceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicesVPCReplaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServicesVPCReplaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesVPCReplaceType.Merge(m, src)
}
func (m *ServicesVPCReplaceType) XXX_Size() int {
	return m.Size()
}
func (m *ServicesVPCReplaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesVPCReplaceType.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesVPCReplaceType proto.InternalMessageInfo

type isServicesVPCReplaceType_ServiceVpcChoice interface {
	isServicesVPCReplaceType_ServiceVpcChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServicesVPCReplaceType_TgwChoice interface {
	isServicesVPCReplaceType_TgwChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServicesVPCReplaceType_Deployment interface {
	isServicesVPCReplaceType_Deployment()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServicesVPCReplaceType_WorkerNodes interface {
	isServicesVPCReplaceType_WorkerNodes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServicesVPCReplaceType_InternetVipChoice interface {
	isServicesVPCReplaceType_InternetVipChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServicesVPCReplaceType_SecurityGroupChoice interface {
	isServicesVPCReplaceType_SecurityGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServicesVPCReplaceType_NewVpc struct {
	NewVpc *views.AWSVPCParamsType `protobuf:"bytes,3,opt,name=new_vpc,json=newVpc,proto3,oneof" json:"new_vpc,omitempty"`
}
type ServicesVPCReplaceType_VpcId struct {
	VpcId string `protobuf:"bytes,4,opt,name=vpc_id,json=vpcId,proto3,oneof" json:"vpc_id,omitempty"`
}
type ServicesVPCReplaceType_NewTgw struct {
	NewTgw *TGWParamsType `protobuf:"bytes,6,opt,name=new_tgw,json=newTgw,proto3,oneof" json:"new_tgw,omitempty"`
}
type ServicesVPCReplaceType_ExistingTgw struct {
	ExistingTgw *ExistingTGWType `protobuf:"bytes,7,opt,name=existing_tgw,json=existingTgw,proto3,oneof" json:"existing_tgw,omitempty"`
}
type ServicesVPCReplaceType_AwsCred struct {
	AwsCred *views.ObjectRefType `protobuf:"bytes,14,opt,name=aws_cred,json=awsCred,proto3,oneof" json:"aws_cred,omitempty"`
}
type ServicesVPCReplaceType_Assisted struct {
	Assisted *schema.Empty `protobuf:"bytes,15,opt,name=assisted,proto3,oneof" json:"assisted,omitempty"`
}
type ServicesVPCReplaceType_NodesPerAz struct {
	NodesPerAz uint32 `protobuf:"varint,12,opt,name=nodes_per_az,json=nodesPerAz,proto3,oneof" json:"nodes_per_az,omitempty"`
}
type ServicesVPCReplaceType_TotalNodes struct {
	TotalNodes uint32 `protobuf:"varint,27,opt,name=total_nodes,json=totalNodes,proto3,oneof" json:"total_nodes,omitempty"`
}
type ServicesVPCReplaceType_NoWorkerNodes struct {
	NoWorkerNodes *schema.Empty `protobuf:"bytes,28,opt,name=no_worker_nodes,json=noWorkerNodes,proto3,oneof" json:"no_worker_nodes,omitempty"`
}
type ServicesVPCReplaceType_DisableInternetVip struct {
	DisableInternetVip *schema.Empty `protobuf:"bytes,31,opt,name=disable_internet_vip,json=disableInternetVip,proto3,oneof" json:"disable_internet_vip,omitempty"`
}
type ServicesVPCReplaceType_EnableInternetVip struct {
	EnableInternetVip *schema.Empty `protobuf:"bytes,33,opt,name=enable_internet_vip,json=enableInternetVip,proto3,oneof" json:"enable_internet_vip,omitempty"`
}
type ServicesVPCReplaceType_F5XcSecurityGroup struct {
	F5XcSecurityGroup *schema.Empty `protobuf:"bytes,35,opt,name=f5xc_security_group,json=f5xcSecurityGroup,proto3,oneof" json:"f5xc_security_group,omitempty"`
}
type ServicesVPCReplaceType_CustomSecurityGroup struct {
	CustomSecurityGroup *views.SecurityGroupType `protobuf:"bytes,36,opt,name=custom_security_group,json=customSecurityGroup,proto3,oneof" json:"custom_security_group,omitempty"`
}

func (*ServicesVPCReplaceType_NewVpc) isServicesVPCReplaceType_ServiceVpcChoice()                 {}
func (*ServicesVPCReplaceType_VpcId) isServicesVPCReplaceType_ServiceVpcChoice()                  {}
func (*ServicesVPCReplaceType_NewTgw) isServicesVPCReplaceType_TgwChoice()                        {}
func (*ServicesVPCReplaceType_ExistingTgw) isServicesVPCReplaceType_TgwChoice()                   {}
func (*ServicesVPCReplaceType_AwsCred) isServicesVPCReplaceType_Deployment()                      {}
func (*ServicesVPCReplaceType_Assisted) isServicesVPCReplaceType_Deployment()                     {}
func (*ServicesVPCReplaceType_NodesPerAz) isServicesVPCReplaceType_WorkerNodes()                  {}
func (*ServicesVPCReplaceType_TotalNodes) isServicesVPCReplaceType_WorkerNodes()                  {}
func (*ServicesVPCReplaceType_NoWorkerNodes) isServicesVPCReplaceType_WorkerNodes()               {}
func (*ServicesVPCReplaceType_DisableInternetVip) isServicesVPCReplaceType_InternetVipChoice()    {}
func (*ServicesVPCReplaceType_EnableInternetVip) isServicesVPCReplaceType_InternetVipChoice()     {}
func (*ServicesVPCReplaceType_F5XcSecurityGroup) isServicesVPCReplaceType_SecurityGroupChoice()   {}
func (*ServicesVPCReplaceType_CustomSecurityGroup) isServicesVPCReplaceType_SecurityGroupChoice() {}

func (m *ServicesVPCReplaceType) GetServiceVpcChoice() isServicesVPCReplaceType_ServiceVpcChoice {
	if m != nil {
		return m.ServiceVpcChoice
	}
	return nil
}
func (m *ServicesVPCReplaceType) GetTgwChoice() isServicesVPCReplaceType_TgwChoice {
	if m != nil {
		return m.TgwChoice
	}
	return nil
}
func (m *ServicesVPCReplaceType) GetDeployment() isServicesVPCReplaceType_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}
func (m *ServicesVPCReplaceType) GetWorkerNodes() isServicesVPCReplaceType_WorkerNodes {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}
func (m *ServicesVPCReplaceType) GetInternetVipChoice() isServicesVPCReplaceType_InternetVipChoice {
	if m != nil {
		return m.InternetVipChoice
	}
	return nil
}
func (m *ServicesVPCReplaceType) GetSecurityGroupChoice() isServicesVPCReplaceType_SecurityGroupChoice {
	if m != nil {
		return m.SecurityGroupChoice
	}
	return nil
}

func (m *ServicesVPCReplaceType) GetAwsRegion() string {
	if m != nil {
		return m.AwsRegion
	}
	return ""
}

func (m *ServicesVPCReplaceType) GetNewVpc() *views.AWSVPCParamsType {
	if x, ok := m.GetServiceVpcChoice().(*ServicesVPCReplaceType_NewVpc); ok {
		return x.NewVpc
	}
	return nil
}

func (m *ServicesVPCReplaceType) GetVpcId() string {
	if x, ok := m.GetServiceVpcChoice().(*ServicesVPCReplaceType_VpcId); ok {
		return x.VpcId
	}
	return ""
}

func (m *ServicesVPCReplaceType) GetNewTgw() *TGWParamsType {
	if x, ok := m.GetTgwChoice().(*ServicesVPCReplaceType_NewTgw); ok {
		return x.NewTgw
	}
	return nil
}

func (m *ServicesVPCReplaceType) GetExistingTgw() *ExistingTGWType {
	if x, ok := m.GetTgwChoice().(*ServicesVPCReplaceType_ExistingTgw); ok {
		return x.ExistingTgw
	}
	return nil
}

func (m *ServicesVPCReplaceType) GetInstanceType() string {
	if m != nil {
		return m.InstanceType
	}
	return ""
}

func (m *ServicesVPCReplaceType) GetAzNodes() []*views.AWSVPCTwoInterfaceNodeType {
	if m != nil {
		return m.AzNodes
	}
	return nil
}

func (m *ServicesVPCReplaceType) GetAwsCred() *views.ObjectRefType {
	if x, ok := m.GetDeployment().(*ServicesVPCReplaceType_AwsCred); ok {
		return x.AwsCred
	}
	return nil
}

// Deprecated: Do not use.
func (m *ServicesVPCReplaceType) GetAssisted() *schema.Empty {
	if x, ok := m.GetDeployment().(*ServicesVPCReplaceType_Assisted); ok {
		return x.Assisted
	}
	return nil
}

func (m *ServicesVPCReplaceType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *ServicesVPCReplaceType) GetDiskSize() uint32 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

func (m *ServicesVPCReplaceType) GetNodesPerAz() uint32 {
	if x, ok := m.GetWorkerNodes().(*ServicesVPCReplaceType_NodesPerAz); ok {
		return x.NodesPerAz
	}
	return 0
}

func (m *ServicesVPCReplaceType) GetTotalNodes() uint32 {
	if x, ok := m.GetWorkerNodes().(*ServicesVPCReplaceType_TotalNodes); ok {
		return x.TotalNodes
	}
	return 0
}

func (m *ServicesVPCReplaceType) GetNoWorkerNodes() *schema.Empty {
	if x, ok := m.GetWorkerNodes().(*ServicesVPCReplaceType_NoWorkerNodes); ok {
		return x.NoWorkerNodes
	}
	return nil
}

func (m *ServicesVPCReplaceType) GetDisableInternetVip() *schema.Empty {
	if x, ok := m.GetInternetVipChoice().(*ServicesVPCReplaceType_DisableInternetVip); ok {
		return x.DisableInternetVip
	}
	return nil
}

func (m *ServicesVPCReplaceType) GetEnableInternetVip() *schema.Empty {
	if x, ok := m.GetInternetVipChoice().(*ServicesVPCReplaceType_EnableInternetVip); ok {
		return x.EnableInternetVip
	}
	return nil
}

func (m *ServicesVPCReplaceType) GetF5XcSecurityGroup() *schema.Empty {
	if x, ok := m.GetSecurityGroupChoice().(*ServicesVPCReplaceType_F5XcSecurityGroup); ok {
		return x.F5XcSecurityGroup
	}
	return nil
}

func (m *ServicesVPCReplaceType) GetCustomSecurityGroup() *views.SecurityGroupType {
	if x, ok := m.GetSecurityGroupChoice().(*ServicesVPCReplaceType_CustomSecurityGroup); ok {
		return x.CustomSecurityGroup
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ServicesVPCReplaceType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ServicesVPCReplaceType_NewVpc)(nil),
		(*ServicesVPCReplaceType_VpcId)(nil),
		(*ServicesVPCReplaceType_NewTgw)(nil),
		(*ServicesVPCReplaceType_ExistingTgw)(nil),
		(*ServicesVPCReplaceType_AwsCred)(nil),
		(*ServicesVPCReplaceType_Assisted)(nil),
		(*ServicesVPCReplaceType_NodesPerAz)(nil),
		(*ServicesVPCReplaceType_TotalNodes)(nil),
		(*ServicesVPCReplaceType_NoWorkerNodes)(nil),
		(*ServicesVPCReplaceType_DisableInternetVip)(nil),
		(*ServicesVPCReplaceType_EnableInternetVip)(nil),
		(*ServicesVPCReplaceType_F5XcSecurityGroup)(nil),
		(*ServicesVPCReplaceType_CustomSecurityGroup)(nil),
	}
}

// VPC attachment
//
// x-displayName: "VPC"
// VPC attachments to transit gateway
type VPCAttachmentType struct {
	// VPC ID
	//
	// x-displayName: "VPC ID"
	// x-example: "vpc-12345678901234567"
	// Information about existing VPC
	VpcId string `protobuf:"bytes,1,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// Labels
	//
	// x-displayName: "Labels"
	// x-example: "value"
	// Add labels for the VPC attachment. These labels can then be used in policies such as enhanced firewall.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *VPCAttachmentType) Reset()      { *m = VPCAttachmentType{} }
func (*VPCAttachmentType) ProtoMessage() {}
func (*VPCAttachmentType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{6}
}
func (m *VPCAttachmentType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPCAttachmentType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VPCAttachmentType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPCAttachmentType.Merge(m, src)
}
func (m *VPCAttachmentType) XXX_Size() int {
	return m.Size()
}
func (m *VPCAttachmentType) XXX_DiscardUnknown() {
	xxx_messageInfo_VPCAttachmentType.DiscardUnknown(m)
}

var xxx_messageInfo_VPCAttachmentType proto.InternalMessageInfo

func (m *VPCAttachmentType) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

func (m *VPCAttachmentType) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// VPC IP prefixes
//
// x-displayName: "VPC IP prefixes"
// VPC IP prefixes
type VPCIpPrefixesType struct {
	// IP prefixes
	//
	// x-displayName: "Prefixes"
	// x-required
	// x-example: "['10.2.1.0/24', '192.168.8.0/29', '10.7.64.160/27']"
	// An unordered list of IP prefixes.
	Prefixes []string `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (m *VPCIpPrefixesType) Reset()      { *m = VPCIpPrefixesType{} }
func (*VPCIpPrefixesType) ProtoMessage() {}
func (*VPCIpPrefixesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{7}
}
func (m *VPCIpPrefixesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPCIpPrefixesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VPCIpPrefixesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPCIpPrefixesType.Merge(m, src)
}
func (m *VPCIpPrefixesType) XXX_Size() int {
	return m.Size()
}
func (m *VPCIpPrefixesType) XXX_DiscardUnknown() {
	xxx_messageInfo_VPCIpPrefixesType.DiscardUnknown(m)
}

var xxx_messageInfo_VPCIpPrefixesType proto.InternalMessageInfo

func (m *VPCIpPrefixesType) GetPrefixes() []string {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

// Spoke VPCs
//
// x-displayName: "Spoke VPCs"
// Spoke VPCs to be attached to the AWS TGW Site
type VPCAttachmentListType struct {
	// vpc_list
	//
	// x-displayName: "VPC List"
	// List of VPC attachments to transit gateway
	VpcList []*VPCAttachmentType `protobuf:"bytes,1,rep,name=vpc_list,json=vpcList,proto3" json:"vpc_list,omitempty"`
}

func (m *VPCAttachmentListType) Reset()      { *m = VPCAttachmentListType{} }
func (*VPCAttachmentListType) ProtoMessage() {}
func (*VPCAttachmentListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{8}
}
func (m *VPCAttachmentListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VPCAttachmentListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VPCAttachmentListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPCAttachmentListType.Merge(m, src)
}
func (m *VPCAttachmentListType) XXX_Size() int {
	return m.Size()
}
func (m *VPCAttachmentListType) XXX_DiscardUnknown() {
	xxx_messageInfo_VPCAttachmentListType.DiscardUnknown(m)
}

var xxx_messageInfo_VPCAttachmentListType proto.InternalMessageInfo

func (m *VPCAttachmentListType) GetVpcList() []*VPCAttachmentType {
	if m != nil {
		return m.VpcList
	}
	return nil
}

// Active Service Policies
//
// x-displayName: "Active Service Policies"
// Active service policies for the east-west  proxy
type ActiveServicePoliciesType struct {
	// service_policies
	//
	// x-displayName: "Service Policies"
	// A list of references to service_policy objects.
	ServicePolicies []*views.ObjectRefType `protobuf:"bytes,1,rep,name=service_policies,json=servicePolicies,proto3" json:"service_policies,omitempty"`
}

func (m *ActiveServicePoliciesType) Reset()      { *m = ActiveServicePoliciesType{} }
func (*ActiveServicePoliciesType) ProtoMessage() {}
func (*ActiveServicePoliciesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{9}
}
func (m *ActiveServicePoliciesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveServicePoliciesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ActiveServicePoliciesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveServicePoliciesType.Merge(m, src)
}
func (m *ActiveServicePoliciesType) XXX_Size() int {
	return m.Size()
}
func (m *ActiveServicePoliciesType) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveServicePoliciesType.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveServicePoliciesType proto.InternalMessageInfo

func (m *ActiveServicePoliciesType) GetServicePolicies() []*views.ObjectRefType {
	if m != nil {
		return m.ServicePolicies
	}
	return nil
}

// TGW Security Configuration
//
// x-displayName: "TGW Security Configuration"
// Security Configuration for transit gateway
type SecurityConfigType struct {
	// Manage Forward Proxy
	//
	// x-displayName: "Manage Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*SecurityConfigType_NoForwardProxy
	//	*SecurityConfigType_ActiveForwardProxyPolicies
	//	*SecurityConfigType_ForwardProxyAllowAll
	ForwardProxyChoice isSecurityConfigType_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Manage East-West Service Policy
	//
	// x-displayName: "Manage East-West Service Policy"
	// x-required
	// Select service policy between east-west traffic between spoke VPC(s), traffic goes via proxy when service policy is enabled.
	//
	// Types that are valid to be assigned to EastWestServicePolicyChoice:
	//	*SecurityConfigType_NoEastWestPolicy
	//	*SecurityConfigType_ActiveEastWestServicePolicies
	//	*SecurityConfigType_EastWestServicePolicyAllowAll
	EastWestServicePolicyChoice isSecurityConfigType_EastWestServicePolicyChoice `protobuf_oneof:"east_west_service_policy_choice"`
	// Manage Firewall Policy
	//
	// x-displayName: "Manage Firewall Policy"
	// x-required
	// Manage Firewall Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*SecurityConfigType_NoNetworkPolicy
	//	*SecurityConfigType_ActiveNetworkPolicies
	//	*SecurityConfigType_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isSecurityConfigType_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
}

func (m *SecurityConfigType) Reset()      { *m = SecurityConfigType{} }
func (*SecurityConfigType) ProtoMessage() {}
func (*SecurityConfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{10}
}
func (m *SecurityConfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityConfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SecurityConfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityConfigType.Merge(m, src)
}
func (m *SecurityConfigType) XXX_Size() int {
	return m.Size()
}
func (m *SecurityConfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityConfigType.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityConfigType proto.InternalMessageInfo

type isSecurityConfigType_ForwardProxyChoice interface {
	isSecurityConfigType_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSecurityConfigType_EastWestServicePolicyChoice interface {
	isSecurityConfigType_EastWestServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSecurityConfigType_NetworkPolicyChoice interface {
	isSecurityConfigType_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SecurityConfigType_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,2,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type SecurityConfigType_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,3,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type SecurityConfigType_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *schema.Empty `protobuf:"bytes,7,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,proto3,oneof" json:"forward_proxy_allow_all,omitempty"`
}
type SecurityConfigType_NoEastWestPolicy struct {
	NoEastWestPolicy *schema.Empty `protobuf:"bytes,9,opt,name=no_east_west_policy,json=noEastWestPolicy,proto3,oneof" json:"no_east_west_policy,omitempty"`
}
type SecurityConfigType_ActiveEastWestServicePolicies struct {
	ActiveEastWestServicePolicies *ActiveServicePoliciesType `protobuf:"bytes,10,opt,name=active_east_west_service_policies,json=activeEastWestServicePolicies,proto3,oneof" json:"active_east_west_service_policies,omitempty"`
}
type SecurityConfigType_EastWestServicePolicyAllowAll struct {
	EastWestServicePolicyAllowAll *schema.Empty `protobuf:"bytes,11,opt,name=east_west_service_policy_allow_all,json=eastWestServicePolicyAllowAll,proto3,oneof" json:"east_west_service_policy_allow_all,omitempty"`
}
type SecurityConfigType_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,5,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type SecurityConfigType_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,6,opt,name=active_network_policies,json=activeNetworkPolicies,proto3,oneof" json:"active_network_policies,omitempty"`
}
type SecurityConfigType_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,12,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}

func (*SecurityConfigType_NoForwardProxy) isSecurityConfigType_ForwardProxyChoice()             {}
func (*SecurityConfigType_ActiveForwardProxyPolicies) isSecurityConfigType_ForwardProxyChoice() {}
func (*SecurityConfigType_ForwardProxyAllowAll) isSecurityConfigType_ForwardProxyChoice()       {}
func (*SecurityConfigType_NoEastWestPolicy) isSecurityConfigType_EastWestServicePolicyChoice()  {}
func (*SecurityConfigType_ActiveEastWestServicePolicies) isSecurityConfigType_EastWestServicePolicyChoice() {
}
func (*SecurityConfigType_EastWestServicePolicyAllowAll) isSecurityConfigType_EastWestServicePolicyChoice() {
}
func (*SecurityConfigType_NoNetworkPolicy) isSecurityConfigType_NetworkPolicyChoice()       {}
func (*SecurityConfigType_ActiveNetworkPolicies) isSecurityConfigType_NetworkPolicyChoice() {}
func (*SecurityConfigType_ActiveEnhancedFirewallPolicies) isSecurityConfigType_NetworkPolicyChoice() {
}

func (m *SecurityConfigType) GetForwardProxyChoice() isSecurityConfigType_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *SecurityConfigType) GetEastWestServicePolicyChoice() isSecurityConfigType_EastWestServicePolicyChoice {
	if m != nil {
		return m.EastWestServicePolicyChoice
	}
	return nil
}
func (m *SecurityConfigType) GetNetworkPolicyChoice() isSecurityConfigType_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}

func (m *SecurityConfigType) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*SecurityConfigType_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *SecurityConfigType) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*SecurityConfigType_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *SecurityConfigType) GetForwardProxyAllowAll() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*SecurityConfigType_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *SecurityConfigType) GetNoEastWestPolicy() *schema.Empty {
	if x, ok := m.GetEastWestServicePolicyChoice().(*SecurityConfigType_NoEastWestPolicy); ok {
		return x.NoEastWestPolicy
	}
	return nil
}

func (m *SecurityConfigType) GetActiveEastWestServicePolicies() *ActiveServicePoliciesType {
	if x, ok := m.GetEastWestServicePolicyChoice().(*SecurityConfigType_ActiveEastWestServicePolicies); ok {
		return x.ActiveEastWestServicePolicies
	}
	return nil
}

func (m *SecurityConfigType) GetEastWestServicePolicyAllowAll() *schema.Empty {
	if x, ok := m.GetEastWestServicePolicyChoice().(*SecurityConfigType_EastWestServicePolicyAllowAll); ok {
		return x.EastWestServicePolicyAllowAll
	}
	return nil
}

func (m *SecurityConfigType) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*SecurityConfigType_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *SecurityConfigType) GetActiveNetworkPolicies() *network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*SecurityConfigType_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *SecurityConfigType) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*SecurityConfigType_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SecurityConfigType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SecurityConfigType_NoForwardProxy)(nil),
		(*SecurityConfigType_ActiveForwardProxyPolicies)(nil),
		(*SecurityConfigType_ForwardProxyAllowAll)(nil),
		(*SecurityConfigType_NoEastWestPolicy)(nil),
		(*SecurityConfigType_ActiveEastWestServicePolicies)(nil),
		(*SecurityConfigType_EastWestServicePolicyAllowAll)(nil),
		(*SecurityConfigType_NoNetworkPolicy)(nil),
		(*SecurityConfigType_ActiveNetworkPolicies)(nil),
		(*SecurityConfigType_ActiveEnhancedFirewallPolicies)(nil),
	}
}

// AWS VPN Tunnel Config
//
// x-displayName: "AWS VPN Tunnel Config"
// Remote IP for VPN tunnels of a node
type AWSVPNTunnelConfigType struct {
	// Name of the Node
	//
	// x-displayName: "Name of the Node"
	// x-example: "master-0"
	// x-required
	// Name of the node for which this tunnel is configured
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Remote IP(s)
	//
	// x-displayName: "Remote IP(s)"
	// x-example: "3.4.5.6"
	// x-required
	// Remote IP(s) for up to two tunnels
	TunnelRemoteIp []string `protobuf:"bytes,2,rep,name=tunnel_remote_ip,json=tunnelRemoteIp,proto3" json:"tunnel_remote_ip,omitempty"`
	// F5XC Node ID
	//
	// x-displayName: "F5XC Node ID"
	// x-example: "ves-node-id-xxxxxx"
	// x-required
	// F5XC Node ID for which this tunnel is configured
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// VPN Tunnel Type
	//
	// x-displayName: "VPN Tunnel Type"
	// x-required
	// VPN Tunnel Type
	Type VPNTunnelType `protobuf:"varint,4,opt,name=type,proto3,enum=ves.io.schema.views.aws_tgw_site.VPNTunnelType" json:"type,omitempty"`
}

func (m *AWSVPNTunnelConfigType) Reset()      { *m = AWSVPNTunnelConfigType{} }
func (*AWSVPNTunnelConfigType) ProtoMessage() {}
func (*AWSVPNTunnelConfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{11}
}
func (m *AWSVPNTunnelConfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSVPNTunnelConfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSVPNTunnelConfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSVPNTunnelConfigType.Merge(m, src)
}
func (m *AWSVPNTunnelConfigType) XXX_Size() int {
	return m.Size()
}
func (m *AWSVPNTunnelConfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSVPNTunnelConfigType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSVPNTunnelConfigType proto.InternalMessageInfo

func (m *AWSVPNTunnelConfigType) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *AWSVPNTunnelConfigType) GetTunnelRemoteIp() []string {
	if m != nil {
		return m.TunnelRemoteIp
	}
	return nil
}

func (m *AWSVPNTunnelConfigType) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *AWSVPNTunnelConfigType) GetType() VPNTunnelType {
	if m != nil {
		return m.Type
	}
	return HUB
}

// AWS TGW Information Config
//
// x-displayName: "AWS TGW Information Config"
// AWS tgw information like tgw-id and site's vpc-id
type AWSTGWInfoConfigType struct {
	// TGW ID
	//
	// x-displayName: "TGW ID"
	// x-example: "tgw-12345678"
	// x-required
	// TGW ID populated by AWS
	TgwId string `protobuf:"bytes,1,opt,name=tgw_id,json=tgwId,proto3" json:"tgw_id,omitempty"`
	// VPC ID
	//
	// x-displayName: "VPC ID"
	// x-example: "vpc-12345678"
	// x-required
	// VPC ID where the volterra site exists
	VpcId string `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// AWS Subnet Ids Info
	//
	// x-displayName: "AWS Subnet Ids"
	// x-required
	// AWS Subnet Ids used by volterra site
	SubnetIds []*views.AWSSubnetIdsType `protobuf:"bytes,3,rep,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
	// AWS Node Elastic IPs
	//
	// x-displayName: "AWS Node Elastic IPs"
	// x-required
	// x-example: "1.1.1.1, 2.2.2.2, 3.3.3.3"
	// AWS Elastic IPs used by the nodes
	PublicIps []string `protobuf:"bytes,4,rep,name=public_ips,json=publicIps,proto3" json:"public_ips,omitempty"`
	// AWS Node Private IPs
	//
	// x-displayName: "AWS Node Private IPs"
	// x-required
	// x-example: "10.0.0.1, 10.0.0.2, 10.0.0.3"
	// AWS Private IPs used by the nodes
	PrivateIps []string `protobuf:"bytes,6,rep,name=private_ips,json=privateIps,proto3" json:"private_ips,omitempty"`
	// VPC Name
	//
	// x-displayName: "VPC Name"
	// VPC Name where the volterra site exists
	VpcName string `protobuf:"bytes,7,opt,name=vpc_name,json=vpcName,proto3" json:"vpc_name,omitempty"`
}

func (m *AWSTGWInfoConfigType) Reset()      { *m = AWSTGWInfoConfigType{} }
func (*AWSTGWInfoConfigType) ProtoMessage() {}
func (*AWSTGWInfoConfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{12}
}
func (m *AWSTGWInfoConfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSTGWInfoConfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSTGWInfoConfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSTGWInfoConfigType.Merge(m, src)
}
func (m *AWSTGWInfoConfigType) XXX_Size() int {
	return m.Size()
}
func (m *AWSTGWInfoConfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSTGWInfoConfigType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSTGWInfoConfigType proto.InternalMessageInfo

func (m *AWSTGWInfoConfigType) GetTgwId() string {
	if m != nil {
		return m.TgwId
	}
	return ""
}

func (m *AWSTGWInfoConfigType) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

func (m *AWSTGWInfoConfigType) GetSubnetIds() []*views.AWSSubnetIdsType {
	if m != nil {
		return m.SubnetIds
	}
	return nil
}

func (m *AWSTGWInfoConfigType) GetPublicIps() []string {
	if m != nil {
		return m.PublicIps
	}
	return nil
}

func (m *AWSTGWInfoConfigType) GetPrivateIps() []string {
	if m != nil {
		return m.PrivateIps
	}
	return nil
}

func (m *AWSTGWInfoConfigType) GetVpcName() string {
	if m != nil {
		return m.VpcName
	}
	return ""
}

// AWS Resource Share Status Type
//
// x-displayName: "AWS Resource Share Status"
// AWS Resource Share Status Type
type AWSTGWResourceShareType struct {
	// Resource Share Name
	//
	// x-displayName: "Resource Share Name"
	// Resource Share Name
	ResourceShareName string `protobuf:"bytes,1,opt,name=resource_share_name,json=resourceShareName,proto3" json:"resource_share_name,omitempty"`
	// Resource Share Creation Time
	//
	// x-displayName: "Resource Share Creation Time"
	// Resource Share Creation Time
	CreationTime *types.Timestamp `protobuf:"bytes,2,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// Resource Share Last Update Time
	//
	// x-displayName: "Resource Share Last Update Time"
	// Resource Share Last Update Time
	LastUpdatedTime *types.Timestamp `protobuf:"bytes,3,opt,name=last_updated_time,json=lastUpdatedTime,proto3" json:"last_updated_time,omitempty"`
	// Resource Share ARN
	//
	// x-displayName: "Resource Share ARN"
	// Resource Share ARN
	ResourceShareArn string `protobuf:"bytes,4,opt,name=resource_share_arn,json=resourceShareArn,proto3" json:"resource_share_arn,omitempty"`
	// Resource Share Acceptor Account ID
	//
	// x-displayName: "Resource Share Acceptor Account ID"
	// Resource Share Acceptor Account ID
	ReceiverAccountId []string `protobuf:"bytes,16,rep,name=receiver_account_id,json=receiverAccountId,proto3" json:"receiver_account_id,omitempty"`
	// Resource Share Invititation ARN
	//
	// x-displayName: "Resource Share Invititation ARN"
	// Resource Share Invititation ARN
	ResourceShareInvitationArn string `protobuf:"bytes,8,opt,name=resource_share_invitation_arn,json=resourceShareInvitationArn,proto3" json:"resource_share_invitation_arn,omitempty"`
	// Resource Share Owner Account ID
	//
	// x-displayName: "Resource Share Owner Account ID"
	// Resource Share Owner Account ID
	OwnerAccountId string `protobuf:"bytes,9,opt,name=owner_account_id,json=ownerAccountId,proto3" json:"owner_account_id,omitempty"`
	// Allow External Principles
	//
	// x-displayName: "Allow External Principles"
	// Manage Sharing Outside AWS Organization
	AllowExternalPrinciples bool `protobuf:"varint,10,opt,name=allow_external_principles,json=allowExternalPrinciples,proto3" json:"allow_external_principles,omitempty"`
	// Resource Share Invitation State
	//
	// x-displayName: "Resource Share Invitation State"
	// Resource Share Invitation State
	InvitationStatus string `protobuf:"bytes,12,opt,name=invitation_status,json=invitationStatus,proto3" json:"invitation_status,omitempty"`
	// Resource Share State
	//
	// x-displayName: "Resource Share State"
	// Resource Share State
	Status string `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// Attachment Deployment Status
	//
	// x-displayName: "Attachment Deployment Status"
	// Attachment Deployment Status
	DeploymentStatus string `protobuf:"bytes,14,opt,name=deployment_status,json=deploymentStatus,proto3" json:"deployment_status,omitempty"`
	// Resource Share Tags
	//
	// x-displayName: "Resource Share Tags"
	// Resource Share Tags
	Tags map[string]string `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *AWSTGWResourceShareType) Reset()      { *m = AWSTGWResourceShareType{} }
func (*AWSTGWResourceShareType) ProtoMessage() {}
func (*AWSTGWResourceShareType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{13}
}
func (m *AWSTGWResourceShareType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSTGWResourceShareType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSTGWResourceShareType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSTGWResourceShareType.Merge(m, src)
}
func (m *AWSTGWResourceShareType) XXX_Size() int {
	return m.Size()
}
func (m *AWSTGWResourceShareType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSTGWResourceShareType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSTGWResourceShareType proto.InternalMessageInfo

func (m *AWSTGWResourceShareType) GetResourceShareName() string {
	if m != nil {
		return m.ResourceShareName
	}
	return ""
}

func (m *AWSTGWResourceShareType) GetCreationTime() *types.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *AWSTGWResourceShareType) GetLastUpdatedTime() *types.Timestamp {
	if m != nil {
		return m.LastUpdatedTime
	}
	return nil
}

func (m *AWSTGWResourceShareType) GetResourceShareArn() string {
	if m != nil {
		return m.ResourceShareArn
	}
	return ""
}

func (m *AWSTGWResourceShareType) GetReceiverAccountId() []string {
	if m != nil {
		return m.ReceiverAccountId
	}
	return nil
}

func (m *AWSTGWResourceShareType) GetResourceShareInvitationArn() string {
	if m != nil {
		return m.ResourceShareInvitationArn
	}
	return ""
}

func (m *AWSTGWResourceShareType) GetOwnerAccountId() string {
	if m != nil {
		return m.OwnerAccountId
	}
	return ""
}

func (m *AWSTGWResourceShareType) GetAllowExternalPrinciples() bool {
	if m != nil {
		return m.AllowExternalPrinciples
	}
	return false
}

func (m *AWSTGWResourceShareType) GetInvitationStatus() string {
	if m != nil {
		return m.InvitationStatus
	}
	return ""
}

func (m *AWSTGWResourceShareType) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *AWSTGWResourceShareType) GetDeploymentStatus() string {
	if m != nil {
		return m.DeploymentStatus
	}
	return ""
}

func (m *AWSTGWResourceShareType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// AWS Transit Gateway Status Type
//
// x-displayName: "AWS TGW Status"
// AWS Transit Gateway Status Type
type AWSTGWStatusType struct {
	// TGW ID
	//
	// x-displayName: "TGW ID"
	// TGW ID
	TgwId string `protobuf:"bytes,1,opt,name=tgw_id,json=tgwId,proto3" json:"tgw_id,omitempty"`
	// TGW ARN
	//
	// x-displayName: "TGW ARN"
	// TGW ARN
	TgwArn string `protobuf:"bytes,2,opt,name=tgw_arn,json=tgwArn,proto3" json:"tgw_arn,omitempty"`
	// TGW Owner
	//
	// x-displayName: "TGW Owner Account"
	// TGW Owner Account
	TgwOwnerAccount string `protobuf:"bytes,3,opt,name=tgw_owner_account,json=tgwOwnerAccount,proto3" json:"tgw_owner_account,omitempty"`
	// AWS Side ASN of TGW
	//
	// x-displayName: "AWS Side ASN of TGW"
	// AWS Side ASN of TGW
	TgwAmazonAsn int64 `protobuf:"varint,4,opt,name=tgw_amazon_asn,json=tgwAmazonAsn,proto3" json:"tgw_amazon_asn,omitempty"`
	// TGW creation time
	//
	// x-displayName: "TGW Creation Time"
	// TGW Creation Time
	TgwCreationTime *types.Timestamp `protobuf:"bytes,5,opt,name=tgw_creation_time,json=tgwCreationTime,proto3" json:"tgw_creation_time,omitempty"`
	// TGW Region
	//
	// x-displayName: "TGW Region"
	// TGW Region
	TgwRegion string `protobuf:"bytes,6,opt,name=tgw_region,json=tgwRegion,proto3" json:"tgw_region,omitempty"`
	// TGW State
	//
	// x-displayName: "TGW State"
	// TGW State
	TgwState string `protobuf:"bytes,7,opt,name=tgw_state,json=tgwState,proto3" json:"tgw_state,omitempty"`
	// TGW Tags
	//
	// x-displayName: "TGW Tags"
	// TGW Tags
	Tags map[string]string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// TGW Deployment Status
	//
	// x-displayName "TGW Deployment Status"
	// TGW Deployment Status
	StatusMsg string `protobuf:"bytes,9,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
}

func (m *AWSTGWStatusType) Reset()      { *m = AWSTGWStatusType{} }
func (*AWSTGWStatusType) ProtoMessage() {}
func (*AWSTGWStatusType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{14}
}
func (m *AWSTGWStatusType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AWSTGWStatusType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AWSTGWStatusType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AWSTGWStatusType.Merge(m, src)
}
func (m *AWSTGWStatusType) XXX_Size() int {
	return m.Size()
}
func (m *AWSTGWStatusType) XXX_DiscardUnknown() {
	xxx_messageInfo_AWSTGWStatusType.DiscardUnknown(m)
}

var xxx_messageInfo_AWSTGWStatusType proto.InternalMessageInfo

func (m *AWSTGWStatusType) GetTgwId() string {
	if m != nil {
		return m.TgwId
	}
	return ""
}

func (m *AWSTGWStatusType) GetTgwArn() string {
	if m != nil {
		return m.TgwArn
	}
	return ""
}

func (m *AWSTGWStatusType) GetTgwOwnerAccount() string {
	if m != nil {
		return m.TgwOwnerAccount
	}
	return ""
}

func (m *AWSTGWStatusType) GetTgwAmazonAsn() int64 {
	if m != nil {
		return m.TgwAmazonAsn
	}
	return 0
}

func (m *AWSTGWStatusType) GetTgwCreationTime() *types.Timestamp {
	if m != nil {
		return m.TgwCreationTime
	}
	return nil
}

func (m *AWSTGWStatusType) GetTgwRegion() string {
	if m != nil {
		return m.TgwRegion
	}
	return ""
}

func (m *AWSTGWStatusType) GetTgwState() string {
	if m != nil {
		return m.TgwState
	}
	return ""
}

func (m *AWSTGWStatusType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *AWSTGWStatusType) GetStatusMsg() string {
	if m != nil {
		return m.StatusMsg
	}
	return ""
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the AWS TGW site specification
type GlobalSpecType struct {
	// AWS Credentials and Resources
	//
	// x-displayName: "AWS Credentials and Resources"
	// x-required
	// Section to provide information related to AWS credentials and AWS resources orchestrated and managed by F5XC.
	// Example of the managed AWS resources to name few are VPC, TGW, Route Tables etc
	AwsParameters *ServicesVPCType `protobuf:"bytes,1,opt,name=aws_parameters,json=awsParameters,proto3" json:"aws_parameters,omitempty"`
	// Spoke VPCs
	//
	// x-displayName: "Spoke VPCs"
	// Spoke VPCs to be attached to the AWS TGW Site.
	// Note that this choice would be deprecated in the near release.
	VpcAttachments *VPCAttachmentListType `protobuf:"bytes,2,opt,name=vpc_attachments,json=vpcAttachments,proto3" json:"vpc_attachments,omitempty"`
	// Site Security
	//
	// x-displayName: "Site Security"
	// Security Configuration for transit gateway
	TgwSecurity *SecurityConfigType `protobuf:"bytes,3,opt,name=tgw_security,json=tgwSecurity,proto3" json:"tgw_security,omitempty"`
	// volterra_software_version
	//
	// x-displayName: "Software Version"
	// x-example: "value"
	// Desired F5XC software version for this site, a string matching released set of software components.
	VolterraSoftwareVersion string `protobuf:"bytes,4,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	// operating_system_version
	//
	// x-displayName: "Operating System Version"
	// x-example: "value"
	// Desired Operating System version for this site.
	OperatingSystemVersion string `protobuf:"bytes,5,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	// VPC IP Prefixes
	//
	// x-displayName: "VPC IP Prefixes"
	// All IP prefixes of subnets in the VPC. These are managed by custom API.
	VpcIpPrefixes map[string]*VPCIpPrefixesType `protobuf:"bytes,6,rep,name=vpc_ip_prefixes,json=vpcIpPrefixes,proto3" json:"vpc_ip_prefixes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Site Networking
	//
	// x-displayName: "Site Networking"
	// Site Network related details will be configured
	VnConfig *VnConfiguration `protobuf:"bytes,7,opt,name=vn_config,json=vnConfig,proto3" json:"vn_config,omitempty"`
	// address
	//
	// x-displayName: "Geographical Address"
	// x-example: "123 Street, city, country, postal code"
	// Site's geographical address that can be used determine its latitude and longitude.
	Address string `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"` // Deprecated: Do not use.
	// coordinates
	//
	// x-displayName: "Site Co-ordinates"
	// Site longitude and latitude co-ordinates
	Coordinates *site.Coordinates `protobuf:"bytes,9,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// user_modification_timestamp
	//
	// x-displayName: "User Modification Timestamp"
	// ModificationTimestamp is a timestamp representing time when the user
	// last modified the object.
	UserModificationTimestamp *types.Timestamp `protobuf:"bytes,10,opt,name=user_modification_timestamp,json=userModificationTimestamp,proto3" json:"user_modification_timestamp,omitempty"`
	// site_to_site_tunnel_ip
	//
	// x-displayName: "Site To Site Tunnel IP"
	// x-example: "10.1.1.1"
	// Optional, VIP in the site_to_site_network_type configured above used for terminating IPSec/SSL tunnels created with SiteMeshGroup.
	SiteToSiteTunnelIp string `protobuf:"bytes,29,opt,name=site_to_site_tunnel_ip,json=siteToSiteTunnelIp,proto3" json:"site_to_site_tunnel_ip,omitempty"` // Deprecated: Do not use.
	// TGW information
	//
	// x-displayName: "TGW Site Information"
	// TGW Site information obtained after creating the site and TGW
	TgwInfo *AWSTGWInfoConfigType `protobuf:"bytes,11,opt,name=tgw_info,json=tgwInfo,proto3" json:"tgw_info,omitempty"`
	// Logs Streaming
	//
	// x-displayName: "Logs Streaming"
	// x-required
	// Select Logs receiver for logs streaming
	//
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GlobalSpecType_LogsStreamingDisabled
	//	*GlobalSpecType_LogReceiver
	LogsReceiverChoice isGlobalSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// F5XC Software
	//
	// x-displayName: "F5XC Software"
	// F5XC Software Details
	Sw *views.VolterraSoftwareType `protobuf:"bytes,15,opt,name=sw,proto3" json:"sw,omitempty"`
	// Operating System
	//
	// x-displayName: "Operating System"
	// Operating System Details
	Os *views.OperatingSystemType `protobuf:"bytes,16,opt,name=os,proto3" json:"os,omitempty"`
	// AWS Tags
	//
	// x-displayName: "AWS Tags"
	// x-example: "dev: staging"
	// AWS Tags is a label consisting of a user-defined key and value.
	// It helps to manage, identify, organize, search for, and filter resources in AWS console.
	Tags map[string]string `protobuf:"bytes,30,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// VIP Params Per Az
	//
	// x-displayName: "VIP Params Per AZ"
	// VIP Parameters Per AZ.
	VipParamsPerAz []*site.PublishVIPParamsPerAz `protobuf:"bytes,17,rep,name=vip_params_per_az,json=vipParamsPerAz,proto3" json:"vip_params_per_az,omitempty"`
	// Private Connectivity To Site
	//
	// x-displayName: "Private Connectivity To Site"
	// x-required
	// Select Private Connectivity To Site
	//
	// Types that are valid to be assigned to DirectConnectChoice:
	//	*GlobalSpecType_DirectConnectDisabled
	//	*GlobalSpecType_DirectConnectEnabled
	//	*GlobalSpecType_PrivateConnectivity
	DirectConnectChoice isGlobalSpecType_DirectConnectChoice `protobuf_oneof:"direct_connect_choice"`
	// Blocked Services on Site
	//
	// x-displayName: "Services to be blocked on site"
	// x-required
	// By default webui, ssh and dns are all blocked, you can choose other options to unblock.
	//
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*GlobalSpecType_DefaultBlockedServices
	//	*GlobalSpecType_BlockAllServices
	//	*GlobalSpecType_BlockedServices
	BlockedServicesChoice isGlobalSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	// Offline Survivability Mode
	//
	// x-displayName: "Offline Survivability Mode"
	// Enable/Disable offline survivability mode
	OfflineSurvivabilityMode *views.OfflineSurvivabilityModeType `protobuf:"bytes,38,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	// Performance Enhancement Choice
	//
	// x-displayName: "Performance Enhancement Mode"
	// Performance Enhancement Mode to optimize for L3 or L7 networking
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,45,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
	// suggested_action
	//
	// x-displayName: "Suggested Action"
	// x-example: "value"
	// Suggested action for customer on error
	SuggestedAction string `protobuf:"bytes,46,opt,name=suggested_action,json=suggestedAction,proto3" json:"suggested_action,omitempty"`
	// error_description
	//
	// x-displayName: "Error Description"
	// x-example: "value"
	// Description of error on site
	ErrorDescription string `protobuf:"bytes,47,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	// site_errors
	//
	// x-displayName: "Site Errors"
	// x-example: "Site Errors"
	// Errors on site including suggested action
	SiteErrors []*views.SiteError `protobuf:"bytes,52,rep,name=site_errors,json=siteErrors,proto3" json:"site_errors,omitempty"`
	// validation_state
	//
	// x-displayName: "Validation State"
	// x-example: "Validation State"
	// Validation State of the Site
	ValidationState views.ConfigValidationState `protobuf:"varint,53,opt,name=validation_state,json=validationState,proto3,enum=ves.io.schema.views.ConfigValidationState" json:"validation_state,omitempty"`
	// custom_dns
	//
	// x-displayName: "Custom DNS"
	// custom dns configure to the CE site
	CustomDns *views.CustomDNS `protobuf:"bytes,54,opt,name=custom_dns,json=customDns,proto3" json:"custom_dns,omitempty"`
	// Enable Drain
	//
	// x-displayName: "Kubernetes Upgrade Drain"
	// Enable Kubernetes Drain during OS or SW upgrade
	KubernetesUpgradeDrain *views.KubernetesUpgradeDrain `protobuf:"bytes,55,opt,name=kubernetes_upgrade_drain,json=kubernetesUpgradeDrain,proto3" json:"kubernetes_upgrade_drain,omitempty"`
	// AWS VPN tunnel config
	//
	// x-displayName: "AWS VPN Tunnel Config"
	// AWS VPN Tunnel Config
	Tunnels []*AWSVPNTunnelConfigType `protobuf:"bytes,998,rep,name=tunnels,proto3" json:"tunnels,omitempty"`
	// Direct Connect information
	//
	// x-displayName: "Direct Connect Information"
	// Direct Connect information obtained after creating the site and TGW
	DirectConnectInfo *views.DirectConnectInfo `protobuf:"bytes,1001,opt,name=direct_connect_info,json=directConnectInfo,proto3" json:"direct_connect_info,omitempty"`
	// Reference to terraform parameters
	//
	// x-displayName: "Terraform Parameters"
	// Reference to terraform parameters object
	TfParams *views.ObjectRefType `protobuf:"bytes,999,opt,name=tf_params,json=tfParams,proto3" json:"tf_params,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
	// site_state
	//
	// x-displayName: "Site State"
	// Site state defines its state machine and in which operational phase it is. It is for both Regional Edge
	// as well as Customer Edge. Example flow is site is in PROVISIONING then goest to STANDBY and ONLINE. In case of
	// switching to different Connected RE it goes back to PROVISIONING and ONLINE. If any of phase failes then it
	// goest to FAILED.
	SiteState site.SiteState `protobuf:"varint,1002,opt,name=site_state,json=siteState,proto3,enum=ves.io.schema.site.SiteState" json:"site_state,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{15}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_LogsReceiverChoice interface {
	isGlobalSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_DirectConnectChoice interface {
	isGlobalSpecType_DirectConnectChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_BlockedServicesChoice interface {
	isGlobalSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,13,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type GlobalSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,14,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type GlobalSpecType_DirectConnectDisabled struct {
	DirectConnectDisabled *schema.Empty `protobuf:"bytes,20,opt,name=direct_connect_disabled,json=directConnectDisabled,proto3,oneof" json:"direct_connect_disabled,omitempty"`
}
type GlobalSpecType_DirectConnectEnabled struct {
	DirectConnectEnabled *views.DirectConnectConfigType `protobuf:"bytes,24,opt,name=direct_connect_enabled,json=directConnectEnabled,proto3,oneof" json:"direct_connect_enabled,omitempty"`
}
type GlobalSpecType_PrivateConnectivity struct {
	PrivateConnectivity *views.PrivateConnectConfigType `protobuf:"bytes,51,opt,name=private_connectivity,json=privateConnectivity,proto3,oneof" json:"private_connectivity,omitempty"`
}
type GlobalSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,33,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type GlobalSpecType_BlockAllServices struct {
	BlockAllServices *schema.Empty `protobuf:"bytes,39,opt,name=block_all_services,json=blockAllServices,proto3,oneof" json:"block_all_services,omitempty"`
}
type GlobalSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,36,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}

func (*GlobalSpecType_LogsStreamingDisabled) isGlobalSpecType_LogsReceiverChoice()     {}
func (*GlobalSpecType_LogReceiver) isGlobalSpecType_LogsReceiverChoice()               {}
func (*GlobalSpecType_DirectConnectDisabled) isGlobalSpecType_DirectConnectChoice()    {}
func (*GlobalSpecType_DirectConnectEnabled) isGlobalSpecType_DirectConnectChoice()     {}
func (*GlobalSpecType_PrivateConnectivity) isGlobalSpecType_DirectConnectChoice()      {}
func (*GlobalSpecType_DefaultBlockedServices) isGlobalSpecType_BlockedServicesChoice() {}
func (*GlobalSpecType_BlockAllServices) isGlobalSpecType_BlockedServicesChoice()       {}
func (*GlobalSpecType_BlockedServices) isGlobalSpecType_BlockedServicesChoice()        {}

func (m *GlobalSpecType) GetLogsReceiverChoice() isGlobalSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *GlobalSpecType) GetDirectConnectChoice() isGlobalSpecType_DirectConnectChoice {
	if m != nil {
		return m.DirectConnectChoice
	}
	return nil
}
func (m *GlobalSpecType) GetBlockedServicesChoice() isGlobalSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}

func (m *GlobalSpecType) GetAwsParameters() *ServicesVPCType {
	if m != nil {
		return m.AwsParameters
	}
	return nil
}

func (m *GlobalSpecType) GetVpcAttachments() *VPCAttachmentListType {
	if m != nil {
		return m.VpcAttachments
	}
	return nil
}

func (m *GlobalSpecType) GetTgwSecurity() *SecurityConfigType {
	if m != nil {
		return m.TgwSecurity
	}
	return nil
}

func (m *GlobalSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GlobalSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GlobalSpecType) GetVpcIpPrefixes() map[string]*VPCIpPrefixesType {
	if m != nil {
		return m.VpcIpPrefixes
	}
	return nil
}

func (m *GlobalSpecType) GetVnConfig() *VnConfiguration {
	if m != nil {
		return m.VnConfig
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GlobalSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GlobalSpecType) GetUserModificationTimestamp() *types.Timestamp {
	if m != nil {
		return m.UserModificationTimestamp
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetSiteToSiteTunnelIp() string {
	if m != nil {
		return m.SiteToSiteTunnelIp
	}
	return ""
}

func (m *GlobalSpecType) GetTgwInfo() *AWSTGWInfoConfigType {
	if m != nil {
		return m.TgwInfo
	}
	return nil
}

func (m *GlobalSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GlobalSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GlobalSpecType) GetSw() *views.VolterraSoftwareType {
	if m != nil {
		return m.Sw
	}
	return nil
}

func (m *GlobalSpecType) GetOs() *views.OperatingSystemType {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *GlobalSpecType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *GlobalSpecType) GetVipParamsPerAz() []*site.PublishVIPParamsPerAz {
	if m != nil {
		return m.VipParamsPerAz
	}
	return nil
}

func (m *GlobalSpecType) GetDirectConnectDisabled() *schema.Empty {
	if x, ok := m.GetDirectConnectChoice().(*GlobalSpecType_DirectConnectDisabled); ok {
		return x.DirectConnectDisabled
	}
	return nil
}

func (m *GlobalSpecType) GetDirectConnectEnabled() *views.DirectConnectConfigType {
	if x, ok := m.GetDirectConnectChoice().(*GlobalSpecType_DirectConnectEnabled); ok {
		return x.DirectConnectEnabled
	}
	return nil
}

func (m *GlobalSpecType) GetPrivateConnectivity() *views.PrivateConnectConfigType {
	if x, ok := m.GetDirectConnectChoice().(*GlobalSpecType_PrivateConnectivity); ok {
		return x.PrivateConnectivity
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GlobalSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *GlobalSpecType) GetBlockAllServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockAllServices); ok {
		return x.BlockAllServices
	}
	return nil
}

func (m *GlobalSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *GlobalSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *GlobalSpecType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

func (m *GlobalSpecType) GetSuggestedAction() string {
	if m != nil {
		return m.SuggestedAction
	}
	return ""
}

func (m *GlobalSpecType) GetErrorDescription() string {
	if m != nil {
		return m.ErrorDescription
	}
	return ""
}

func (m *GlobalSpecType) GetSiteErrors() []*views.SiteError {
	if m != nil {
		return m.SiteErrors
	}
	return nil
}

func (m *GlobalSpecType) GetValidationState() views.ConfigValidationState {
	if m != nil {
		return m.ValidationState
	}
	return views.VALIDATION_STATE_NONE
}

func (m *GlobalSpecType) GetCustomDns() *views.CustomDNS {
	if m != nil {
		return m.CustomDns
	}
	return nil
}

func (m *GlobalSpecType) GetKubernetesUpgradeDrain() *views.KubernetesUpgradeDrain {
	if m != nil {
		return m.KubernetesUpgradeDrain
	}
	return nil
}

func (m *GlobalSpecType) GetTunnels() []*AWSVPNTunnelConfigType {
	if m != nil {
		return m.Tunnels
	}
	return nil
}

func (m *GlobalSpecType) GetDirectConnectInfo() *views.DirectConnectInfo {
	if m != nil {
		return m.DirectConnectInfo
	}
	return nil
}

func (m *GlobalSpecType) GetTfParams() *views.ObjectRefType {
	if m != nil {
		return m.TfParams
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetSiteState() site.SiteState {
	if m != nil {
		return m.SiteState
	}
	return site.ONLINE
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_LogsStreamingDisabled)(nil),
		(*GlobalSpecType_LogReceiver)(nil),
		(*GlobalSpecType_DirectConnectDisabled)(nil),
		(*GlobalSpecType_DirectConnectEnabled)(nil),
		(*GlobalSpecType_PrivateConnectivity)(nil),
		(*GlobalSpecType_DefaultBlockedServices)(nil),
		(*GlobalSpecType_BlockAllServices)(nil),
		(*GlobalSpecType_BlockedServices)(nil),
	}
}

// CreateSpecType
//
// x-displayName: "Create AWS TGW site"
// Shape of the AWS TGW site specification
type CreateSpecType struct {
	AwsParameters  *ServicesVPCType       `protobuf:"bytes,1,opt,name=aws_parameters,json=awsParameters,proto3" json:"aws_parameters,omitempty"`
	VpcAttachments *VPCAttachmentListType `protobuf:"bytes,2,opt,name=vpc_attachments,json=vpcAttachments,proto3" json:"vpc_attachments,omitempty"`
	VnConfig       *VnConfiguration       `protobuf:"bytes,7,opt,name=vn_config,json=vnConfig,proto3" json:"vn_config,omitempty"`
	TgwSecurity    *SecurityConfigType    `protobuf:"bytes,3,opt,name=tgw_security,json=tgwSecurity,proto3" json:"tgw_security,omitempty"`
	Coordinates    *site.Coordinates      `protobuf:"bytes,9,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*CreateSpecType_LogsStreamingDisabled
	//	*CreateSpecType_LogReceiver
	LogsReceiverChoice isCreateSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// F5XC Software
	//
	// x-displayName: "F5XC Software"
	// F5XC Software Details
	Sw *views.VolterraSoftwareType `protobuf:"bytes,15,opt,name=sw,proto3" json:"sw,omitempty"`
	// Operating System
	//
	// x-displayName: "Operating System"
	// Operating System Details
	Os   *views.OperatingSystemType `protobuf:"bytes,16,opt,name=os,proto3" json:"os,omitempty"`
	Tags map[string]string          `protobuf:"bytes,30,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*CreateSpecType_DefaultBlockedServices
	//	*CreateSpecType_BlockAllServices
	//	*CreateSpecType_BlockedServices
	BlockedServicesChoice isCreateSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	// Types that are valid to be assigned to DirectConnectChoice:
	//	*CreateSpecType_DirectConnectDisabled
	//	*CreateSpecType_DirectConnectEnabled
	//	*CreateSpecType_PrivateConnectivity
	DirectConnectChoice        isCreateSpecType_DirectConnectChoice  `protobuf_oneof:"direct_connect_choice"`
	OfflineSurvivabilityMode   *views.OfflineSurvivabilityModeType   `protobuf:"bytes,38,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,45,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
	// custom_dns
	//
	// x-displayName: "Custom DNS"
	// custom dns configure to the CE site
	CustomDns              *views.CustomDNS              `protobuf:"bytes,54,opt,name=custom_dns,json=customDns,proto3" json:"custom_dns,omitempty"`
	KubernetesUpgradeDrain *views.KubernetesUpgradeDrain `protobuf:"bytes,55,opt,name=kubernetes_upgrade_drain,json=kubernetesUpgradeDrain,proto3" json:"kubernetes_upgrade_drain,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{16}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_LogsReceiverChoice interface {
	isCreateSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_BlockedServicesChoice interface {
	isCreateSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_DirectConnectChoice interface {
	isCreateSpecType_DirectConnectChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,13,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type CreateSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,14,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type CreateSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,33,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type CreateSpecType_BlockAllServices struct {
	BlockAllServices *schema.Empty `protobuf:"bytes,39,opt,name=block_all_services,json=blockAllServices,proto3,oneof" json:"block_all_services,omitempty"`
}
type CreateSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,36,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}
type CreateSpecType_DirectConnectDisabled struct {
	DirectConnectDisabled *schema.Empty `protobuf:"bytes,20,opt,name=direct_connect_disabled,json=directConnectDisabled,proto3,oneof" json:"direct_connect_disabled,omitempty"`
}
type CreateSpecType_DirectConnectEnabled struct {
	DirectConnectEnabled *views.DirectConnectConfigType `protobuf:"bytes,24,opt,name=direct_connect_enabled,json=directConnectEnabled,proto3,oneof" json:"direct_connect_enabled,omitempty"`
}
type CreateSpecType_PrivateConnectivity struct {
	PrivateConnectivity *views.PrivateConnectConfigType `protobuf:"bytes,51,opt,name=private_connectivity,json=privateConnectivity,proto3,oneof" json:"private_connectivity,omitempty"`
}

func (*CreateSpecType_LogsStreamingDisabled) isCreateSpecType_LogsReceiverChoice()     {}
func (*CreateSpecType_LogReceiver) isCreateSpecType_LogsReceiverChoice()               {}
func (*CreateSpecType_DefaultBlockedServices) isCreateSpecType_BlockedServicesChoice() {}
func (*CreateSpecType_BlockAllServices) isCreateSpecType_BlockedServicesChoice()       {}
func (*CreateSpecType_BlockedServices) isCreateSpecType_BlockedServicesChoice()        {}
func (*CreateSpecType_DirectConnectDisabled) isCreateSpecType_DirectConnectChoice()    {}
func (*CreateSpecType_DirectConnectEnabled) isCreateSpecType_DirectConnectChoice()     {}
func (*CreateSpecType_PrivateConnectivity) isCreateSpecType_DirectConnectChoice()      {}

func (m *CreateSpecType) GetLogsReceiverChoice() isCreateSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *CreateSpecType) GetBlockedServicesChoice() isCreateSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}
func (m *CreateSpecType) GetDirectConnectChoice() isCreateSpecType_DirectConnectChoice {
	if m != nil {
		return m.DirectConnectChoice
	}
	return nil
}

func (m *CreateSpecType) GetAwsParameters() *ServicesVPCType {
	if m != nil {
		return m.AwsParameters
	}
	return nil
}

func (m *CreateSpecType) GetVpcAttachments() *VPCAttachmentListType {
	if m != nil {
		return m.VpcAttachments
	}
	return nil
}

func (m *CreateSpecType) GetVnConfig() *VnConfiguration {
	if m != nil {
		return m.VnConfig
	}
	return nil
}

func (m *CreateSpecType) GetTgwSecurity() *SecurityConfigType {
	if m != nil {
		return m.TgwSecurity
	}
	return nil
}

func (m *CreateSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *CreateSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *CreateSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *CreateSpecType) GetSw() *views.VolterraSoftwareType {
	if m != nil {
		return m.Sw
	}
	return nil
}

func (m *CreateSpecType) GetOs() *views.OperatingSystemType {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *CreateSpecType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CreateSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*CreateSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *CreateSpecType) GetBlockAllServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*CreateSpecType_BlockAllServices); ok {
		return x.BlockAllServices
	}
	return nil
}

func (m *CreateSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*CreateSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *CreateSpecType) GetDirectConnectDisabled() *schema.Empty {
	if x, ok := m.GetDirectConnectChoice().(*CreateSpecType_DirectConnectDisabled); ok {
		return x.DirectConnectDisabled
	}
	return nil
}

func (m *CreateSpecType) GetDirectConnectEnabled() *views.DirectConnectConfigType {
	if x, ok := m.GetDirectConnectChoice().(*CreateSpecType_DirectConnectEnabled); ok {
		return x.DirectConnectEnabled
	}
	return nil
}

func (m *CreateSpecType) GetPrivateConnectivity() *views.PrivateConnectConfigType {
	if x, ok := m.GetDirectConnectChoice().(*CreateSpecType_PrivateConnectivity); ok {
		return x.PrivateConnectivity
	}
	return nil
}

func (m *CreateSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *CreateSpecType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

func (m *CreateSpecType) GetCustomDns() *views.CustomDNS {
	if m != nil {
		return m.CustomDns
	}
	return nil
}

func (m *CreateSpecType) GetKubernetesUpgradeDrain() *views.KubernetesUpgradeDrain {
	if m != nil {
		return m.KubernetesUpgradeDrain
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_LogsStreamingDisabled)(nil),
		(*CreateSpecType_LogReceiver)(nil),
		(*CreateSpecType_DefaultBlockedServices)(nil),
		(*CreateSpecType_BlockAllServices)(nil),
		(*CreateSpecType_BlockedServices)(nil),
		(*CreateSpecType_DirectConnectDisabled)(nil),
		(*CreateSpecType_DirectConnectEnabled)(nil),
		(*CreateSpecType_PrivateConnectivity)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace AWS TGW site"
// Shape of the AWS TGW site replace specification
type ReplaceSpecType struct {
	AwsParameters  *ServicesVPCReplaceType `protobuf:"bytes,16,opt,name=aws_parameters,json=awsParameters,proto3" json:"aws_parameters,omitempty"`
	VpcAttachments *VPCAttachmentListType  `protobuf:"bytes,2,opt,name=vpc_attachments,json=vpcAttachments,proto3" json:"vpc_attachments,omitempty"`
	VnConfig       *VnConfiguration        `protobuf:"bytes,7,opt,name=vn_config,json=vnConfig,proto3" json:"vn_config,omitempty"`
	TgwSecurity    *SecurityConfigType     `protobuf:"bytes,3,opt,name=tgw_security,json=tgwSecurity,proto3" json:"tgw_security,omitempty"`
	Coordinates    *site.Coordinates       `protobuf:"bytes,9,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*ReplaceSpecType_LogsStreamingDisabled
	//	*ReplaceSpecType_LogReceiver
	LogsReceiverChoice isReplaceSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Types that are valid to be assigned to DirectConnectChoice:
	//	*ReplaceSpecType_DirectConnectDisabled
	//	*ReplaceSpecType_DirectConnectEnabled
	//	*ReplaceSpecType_PrivateConnectivity
	DirectConnectChoice isReplaceSpecType_DirectConnectChoice `protobuf_oneof:"direct_connect_choice"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*ReplaceSpecType_DefaultBlockedServices
	//	*ReplaceSpecType_BlockAllServices
	//	*ReplaceSpecType_BlockedServices
	BlockedServicesChoice      isReplaceSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	OfflineSurvivabilityMode   *views.OfflineSurvivabilityModeType     `protobuf:"bytes,38,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType   `protobuf:"bytes,45,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
	// custom_dns
	//
	// x-displayName: "Custom DNS"
	// custom dns configure to the CE site
	CustomDns              *views.CustomDNS              `protobuf:"bytes,54,opt,name=custom_dns,json=customDns,proto3" json:"custom_dns,omitempty"`
	KubernetesUpgradeDrain *views.KubernetesUpgradeDrain `protobuf:"bytes,55,opt,name=kubernetes_upgrade_drain,json=kubernetesUpgradeDrain,proto3" json:"kubernetes_upgrade_drain,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{17}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_LogsReceiverChoice interface {
	isReplaceSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_DirectConnectChoice interface {
	isReplaceSpecType_DirectConnectChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_BlockedServicesChoice interface {
	isReplaceSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,13,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type ReplaceSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,14,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type ReplaceSpecType_DirectConnectDisabled struct {
	DirectConnectDisabled *schema.Empty `protobuf:"bytes,20,opt,name=direct_connect_disabled,json=directConnectDisabled,proto3,oneof" json:"direct_connect_disabled,omitempty"`
}
type ReplaceSpecType_DirectConnectEnabled struct {
	DirectConnectEnabled *views.DirectConnectConfigType `protobuf:"bytes,24,opt,name=direct_connect_enabled,json=directConnectEnabled,proto3,oneof" json:"direct_connect_enabled,omitempty"`
}
type ReplaceSpecType_PrivateConnectivity struct {
	PrivateConnectivity *views.PrivateConnectConfigType `protobuf:"bytes,51,opt,name=private_connectivity,json=privateConnectivity,proto3,oneof" json:"private_connectivity,omitempty"`
}
type ReplaceSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,33,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type ReplaceSpecType_BlockAllServices struct {
	BlockAllServices *schema.Empty `protobuf:"bytes,39,opt,name=block_all_services,json=blockAllServices,proto3,oneof" json:"block_all_services,omitempty"`
}
type ReplaceSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,36,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}

func (*ReplaceSpecType_LogsStreamingDisabled) isReplaceSpecType_LogsReceiverChoice()     {}
func (*ReplaceSpecType_LogReceiver) isReplaceSpecType_LogsReceiverChoice()               {}
func (*ReplaceSpecType_DirectConnectDisabled) isReplaceSpecType_DirectConnectChoice()    {}
func (*ReplaceSpecType_DirectConnectEnabled) isReplaceSpecType_DirectConnectChoice()     {}
func (*ReplaceSpecType_PrivateConnectivity) isReplaceSpecType_DirectConnectChoice()      {}
func (*ReplaceSpecType_DefaultBlockedServices) isReplaceSpecType_BlockedServicesChoice() {}
func (*ReplaceSpecType_BlockAllServices) isReplaceSpecType_BlockedServicesChoice()       {}
func (*ReplaceSpecType_BlockedServices) isReplaceSpecType_BlockedServicesChoice()        {}

func (m *ReplaceSpecType) GetLogsReceiverChoice() isReplaceSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetDirectConnectChoice() isReplaceSpecType_DirectConnectChoice {
	if m != nil {
		return m.DirectConnectChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetBlockedServicesChoice() isReplaceSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetAwsParameters() *ServicesVPCReplaceType {
	if m != nil {
		return m.AwsParameters
	}
	return nil
}

func (m *ReplaceSpecType) GetVpcAttachments() *VPCAttachmentListType {
	if m != nil {
		return m.VpcAttachments
	}
	return nil
}

func (m *ReplaceSpecType) GetVnConfig() *VnConfiguration {
	if m != nil {
		return m.VnConfig
	}
	return nil
}

func (m *ReplaceSpecType) GetTgwSecurity() *SecurityConfigType {
	if m != nil {
		return m.TgwSecurity
	}
	return nil
}

func (m *ReplaceSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *ReplaceSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *ReplaceSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *ReplaceSpecType) GetDirectConnectDisabled() *schema.Empty {
	if x, ok := m.GetDirectConnectChoice().(*ReplaceSpecType_DirectConnectDisabled); ok {
		return x.DirectConnectDisabled
	}
	return nil
}

func (m *ReplaceSpecType) GetDirectConnectEnabled() *views.DirectConnectConfigType {
	if x, ok := m.GetDirectConnectChoice().(*ReplaceSpecType_DirectConnectEnabled); ok {
		return x.DirectConnectEnabled
	}
	return nil
}

func (m *ReplaceSpecType) GetPrivateConnectivity() *views.PrivateConnectConfigType {
	if x, ok := m.GetDirectConnectChoice().(*ReplaceSpecType_PrivateConnectivity); ok {
		return x.PrivateConnectivity
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*ReplaceSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *ReplaceSpecType) GetBlockAllServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockAllServices); ok {
		return x.BlockAllServices
	}
	return nil
}

func (m *ReplaceSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *ReplaceSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *ReplaceSpecType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

func (m *ReplaceSpecType) GetCustomDns() *views.CustomDNS {
	if m != nil {
		return m.CustomDns
	}
	return nil
}

func (m *ReplaceSpecType) GetKubernetesUpgradeDrain() *views.KubernetesUpgradeDrain {
	if m != nil {
		return m.KubernetesUpgradeDrain
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_LogsStreamingDisabled)(nil),
		(*ReplaceSpecType_LogReceiver)(nil),
		(*ReplaceSpecType_DirectConnectDisabled)(nil),
		(*ReplaceSpecType_DirectConnectEnabled)(nil),
		(*ReplaceSpecType_PrivateConnectivity)(nil),
		(*ReplaceSpecType_DefaultBlockedServices)(nil),
		(*ReplaceSpecType_BlockAllServices)(nil),
		(*ReplaceSpecType_BlockedServices)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get AWS TGW site"
// Shape of the AWS TGW site specification
type GetSpecType struct {
	AwsParameters             *ServicesVPCType              `protobuf:"bytes,1,opt,name=aws_parameters,json=awsParameters,proto3" json:"aws_parameters,omitempty"`
	VpcAttachments            *VPCAttachmentListType        `protobuf:"bytes,2,opt,name=vpc_attachments,json=vpcAttachments,proto3" json:"vpc_attachments,omitempty"`
	VnConfig                  *VnConfiguration              `protobuf:"bytes,7,opt,name=vn_config,json=vnConfig,proto3" json:"vn_config,omitempty"`
	TgwSecurity               *SecurityConfigType           `protobuf:"bytes,3,opt,name=tgw_security,json=tgwSecurity,proto3" json:"tgw_security,omitempty"`
	VolterraSoftwareVersion   string                        `protobuf:"bytes,4,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	OperatingSystemVersion    string                        `protobuf:"bytes,5,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	VpcIpPrefixes             map[string]*VPCIpPrefixesType `protobuf:"bytes,6,rep,name=vpc_ip_prefixes,json=vpcIpPrefixes,proto3" json:"vpc_ip_prefixes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tunnels                   []*AWSVPNTunnelConfigType     `protobuf:"bytes,998,rep,name=tunnels,proto3" json:"tunnels,omitempty"`
	Coordinates               *site.Coordinates             `protobuf:"bytes,9,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	UserModificationTimestamp *types.Timestamp              `protobuf:"bytes,10,opt,name=user_modification_timestamp,json=userModificationTimestamp,proto3" json:"user_modification_timestamp,omitempty"`
	TgwInfo                   *AWSTGWInfoConfigType         `protobuf:"bytes,11,opt,name=tgw_info,json=tgwInfo,proto3" json:"tgw_info,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GetSpecType_LogsStreamingDisabled
	//	*GetSpecType_LogReceiver
	LogsReceiverChoice isGetSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	VipParamsPerAz     []*site.PublishVIPParamsPerAz    `protobuf:"bytes,17,rep,name=vip_params_per_az,json=vipParamsPerAz,proto3" json:"vip_params_per_az,omitempty"`
	Tags               map[string]string                `protobuf:"bytes,30,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// site_state
	//
	// x-displayName: "Site State"
	// The operational phase of the site state machine.
	SiteState site.SiteState `protobuf:"varint,1002,opt,name=site_state,json=siteState,proto3,enum=ves.io.schema.site.SiteState" json:"site_state,omitempty"`
	// Types that are valid to be assigned to DirectConnectChoice:
	//	*GetSpecType_DirectConnectDisabled
	//	*GetSpecType_DirectConnectEnabled
	//	*GetSpecType_PrivateConnectivity
	DirectConnectChoice isGetSpecType_DirectConnectChoice `protobuf_oneof:"direct_connect_choice"`
	DirectConnectInfo   *views.DirectConnectInfo          `protobuf:"bytes,1001,opt,name=direct_connect_info,json=directConnectInfo,proto3" json:"direct_connect_info,omitempty"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*GetSpecType_DefaultBlockedServices
	//	*GetSpecType_BlockAllServices
	//	*GetSpecType_BlockedServices
	BlockedServicesChoice      isGetSpecType_BlockedServicesChoice   `protobuf_oneof:"blocked_services_choice"`
	OfflineSurvivabilityMode   *views.OfflineSurvivabilityModeType   `protobuf:"bytes,38,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,45,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
	SuggestedAction            string                                `protobuf:"bytes,46,opt,name=suggested_action,json=suggestedAction,proto3" json:"suggested_action,omitempty"`
	ErrorDescription           string                                `protobuf:"bytes,47,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	SiteErrors                 []*views.SiteError                    `protobuf:"bytes,52,rep,name=site_errors,json=siteErrors,proto3" json:"site_errors,omitempty"`
	ValidationState            views.ConfigValidationState           `protobuf:"varint,53,opt,name=validation_state,json=validationState,proto3,enum=ves.io.schema.views.ConfigValidationState" json:"validation_state,omitempty"`
	// custom_dns
	//
	// x-displayName: "Custom DNS"
	// custom dns configure to the CE site
	CustomDns              *views.CustomDNS              `protobuf:"bytes,54,opt,name=custom_dns,json=customDns,proto3" json:"custom_dns,omitempty"`
	KubernetesUpgradeDrain *views.KubernetesUpgradeDrain `protobuf:"bytes,55,opt,name=kubernetes_upgrade_drain,json=kubernetesUpgradeDrain,proto3" json:"kubernetes_upgrade_drain,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_69fc9b3c28dbc20f, []int{18}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_LogsReceiverChoice interface {
	isGetSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_DirectConnectChoice interface {
	isGetSpecType_DirectConnectChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_BlockedServicesChoice interface {
	isGetSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,13,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type GetSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,14,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type GetSpecType_DirectConnectDisabled struct {
	DirectConnectDisabled *schema.Empty `protobuf:"bytes,20,opt,name=direct_connect_disabled,json=directConnectDisabled,proto3,oneof" json:"direct_connect_disabled,omitempty"`
}
type GetSpecType_DirectConnectEnabled struct {
	DirectConnectEnabled *views.DirectConnectConfigType `protobuf:"bytes,24,opt,name=direct_connect_enabled,json=directConnectEnabled,proto3,oneof" json:"direct_connect_enabled,omitempty"`
}
type GetSpecType_PrivateConnectivity struct {
	PrivateConnectivity *views.PrivateConnectConfigType `protobuf:"bytes,51,opt,name=private_connectivity,json=privateConnectivity,proto3,oneof" json:"private_connectivity,omitempty"`
}
type GetSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,33,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type GetSpecType_BlockAllServices struct {
	BlockAllServices *schema.Empty `protobuf:"bytes,39,opt,name=block_all_services,json=blockAllServices,proto3,oneof" json:"block_all_services,omitempty"`
}
type GetSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,36,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}

func (*GetSpecType_LogsStreamingDisabled) isGetSpecType_LogsReceiverChoice()     {}
func (*GetSpecType_LogReceiver) isGetSpecType_LogsReceiverChoice()               {}
func (*GetSpecType_DirectConnectDisabled) isGetSpecType_DirectConnectChoice()    {}
func (*GetSpecType_DirectConnectEnabled) isGetSpecType_DirectConnectChoice()     {}
func (*GetSpecType_PrivateConnectivity) isGetSpecType_DirectConnectChoice()      {}
func (*GetSpecType_DefaultBlockedServices) isGetSpecType_BlockedServicesChoice() {}
func (*GetSpecType_BlockAllServices) isGetSpecType_BlockedServicesChoice()       {}
func (*GetSpecType_BlockedServices) isGetSpecType_BlockedServicesChoice()        {}

func (m *GetSpecType) GetLogsReceiverChoice() isGetSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *GetSpecType) GetDirectConnectChoice() isGetSpecType_DirectConnectChoice {
	if m != nil {
		return m.DirectConnectChoice
	}
	return nil
}
func (m *GetSpecType) GetBlockedServicesChoice() isGetSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}

func (m *GetSpecType) GetAwsParameters() *ServicesVPCType {
	if m != nil {
		return m.AwsParameters
	}
	return nil
}

func (m *GetSpecType) GetVpcAttachments() *VPCAttachmentListType {
	if m != nil {
		return m.VpcAttachments
	}
	return nil
}

func (m *GetSpecType) GetVnConfig() *VnConfiguration {
	if m != nil {
		return m.VnConfig
	}
	return nil
}

func (m *GetSpecType) GetTgwSecurity() *SecurityConfigType {
	if m != nil {
		return m.TgwSecurity
	}
	return nil
}

func (m *GetSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GetSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GetSpecType) GetVpcIpPrefixes() map[string]*VPCIpPrefixesType {
	if m != nil {
		return m.VpcIpPrefixes
	}
	return nil
}

func (m *GetSpecType) GetTunnels() []*AWSVPNTunnelConfigType {
	if m != nil {
		return m.Tunnels
	}
	return nil
}

func (m *GetSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GetSpecType) GetUserModificationTimestamp() *types.Timestamp {
	if m != nil {
		return m.UserModificationTimestamp
	}
	return nil
}

func (m *GetSpecType) GetTgwInfo() *AWSTGWInfoConfigType {
	if m != nil {
		return m.TgwInfo
	}
	return nil
}

func (m *GetSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GetSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GetSpecType) GetVipParamsPerAz() []*site.PublishVIPParamsPerAz {
	if m != nil {
		return m.VipParamsPerAz
	}
	return nil
}

func (m *GetSpecType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *GetSpecType) GetSiteState() site.SiteState {
	if m != nil {
		return m.SiteState
	}
	return site.ONLINE
}

func (m *GetSpecType) GetDirectConnectDisabled() *schema.Empty {
	if x, ok := m.GetDirectConnectChoice().(*GetSpecType_DirectConnectDisabled); ok {
		return x.DirectConnectDisabled
	}
	return nil
}

func (m *GetSpecType) GetDirectConnectEnabled() *views.DirectConnectConfigType {
	if x, ok := m.GetDirectConnectChoice().(*GetSpecType_DirectConnectEnabled); ok {
		return x.DirectConnectEnabled
	}
	return nil
}

func (m *GetSpecType) GetPrivateConnectivity() *views.PrivateConnectConfigType {
	if x, ok := m.GetDirectConnectChoice().(*GetSpecType_PrivateConnectivity); ok {
		return x.PrivateConnectivity
	}
	return nil
}

func (m *GetSpecType) GetDirectConnectInfo() *views.DirectConnectInfo {
	if m != nil {
		return m.DirectConnectInfo
	}
	return nil
}

func (m *GetSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GetSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *GetSpecType) GetBlockAllServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GetSpecType_BlockAllServices); ok {
		return x.BlockAllServices
	}
	return nil
}

func (m *GetSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*GetSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *GetSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *GetSpecType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

func (m *GetSpecType) GetSuggestedAction() string {
	if m != nil {
		return m.SuggestedAction
	}
	return ""
}

func (m *GetSpecType) GetErrorDescription() string {
	if m != nil {
		return m.ErrorDescription
	}
	return ""
}

func (m *GetSpecType) GetSiteErrors() []*views.SiteError {
	if m != nil {
		return m.SiteErrors
	}
	return nil
}

func (m *GetSpecType) GetValidationState() views.ConfigValidationState {
	if m != nil {
		return m.ValidationState
	}
	return views.VALIDATION_STATE_NONE
}

func (m *GetSpecType) GetCustomDns() *views.CustomDNS {
	if m != nil {
		return m.CustomDns
	}
	return nil
}

func (m *GetSpecType) GetKubernetesUpgradeDrain() *views.KubernetesUpgradeDrain {
	if m != nil {
		return m.KubernetesUpgradeDrain
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_LogsStreamingDisabled)(nil),
		(*GetSpecType_LogReceiver)(nil),
		(*GetSpecType_DirectConnectDisabled)(nil),
		(*GetSpecType_DirectConnectEnabled)(nil),
		(*GetSpecType_PrivateConnectivity)(nil),
		(*GetSpecType_DefaultBlockedServices)(nil),
		(*GetSpecType_BlockAllServices)(nil),
		(*GetSpecType_BlockedServices)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.views.aws_tgw_site.VPNTunnelType", VPNTunnelType_name, VPNTunnelType_value)
	golang_proto.RegisterEnum("ves.io.schema.views.aws_tgw_site.VPNTunnelType", VPNTunnelType_name, VPNTunnelType_value)
	proto.RegisterType((*TGWAssignedASNType)(nil), "ves.io.schema.views.aws_tgw_site.TGWAssignedASNType")
	golang_proto.RegisterType((*TGWAssignedASNType)(nil), "ves.io.schema.views.aws_tgw_site.TGWAssignedASNType")
	proto.RegisterType((*ExistingTGWType)(nil), "ves.io.schema.views.aws_tgw_site.ExistingTGWType")
	golang_proto.RegisterType((*ExistingTGWType)(nil), "ves.io.schema.views.aws_tgw_site.ExistingTGWType")
	proto.RegisterType((*TGWParamsType)(nil), "ves.io.schema.views.aws_tgw_site.TGWParamsType")
	golang_proto.RegisterType((*TGWParamsType)(nil), "ves.io.schema.views.aws_tgw_site.TGWParamsType")
	proto.RegisterType((*ServicesVPCType)(nil), "ves.io.schema.views.aws_tgw_site.ServicesVPCType")
	golang_proto.RegisterType((*ServicesVPCType)(nil), "ves.io.schema.views.aws_tgw_site.ServicesVPCType")
	proto.RegisterType((*VnConfiguration)(nil), "ves.io.schema.views.aws_tgw_site.VnConfiguration")
	golang_proto.RegisterType((*VnConfiguration)(nil), "ves.io.schema.views.aws_tgw_site.VnConfiguration")
	proto.RegisterType((*ServicesVPCReplaceType)(nil), "ves.io.schema.views.aws_tgw_site.ServicesVPCReplaceType")
	golang_proto.RegisterType((*ServicesVPCReplaceType)(nil), "ves.io.schema.views.aws_tgw_site.ServicesVPCReplaceType")
	proto.RegisterType((*VPCAttachmentType)(nil), "ves.io.schema.views.aws_tgw_site.VPCAttachmentType")
	golang_proto.RegisterType((*VPCAttachmentType)(nil), "ves.io.schema.views.aws_tgw_site.VPCAttachmentType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_tgw_site.VPCAttachmentType.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_tgw_site.VPCAttachmentType.LabelsEntry")
	proto.RegisterType((*VPCIpPrefixesType)(nil), "ves.io.schema.views.aws_tgw_site.VPCIpPrefixesType")
	golang_proto.RegisterType((*VPCIpPrefixesType)(nil), "ves.io.schema.views.aws_tgw_site.VPCIpPrefixesType")
	proto.RegisterType((*VPCAttachmentListType)(nil), "ves.io.schema.views.aws_tgw_site.VPCAttachmentListType")
	golang_proto.RegisterType((*VPCAttachmentListType)(nil), "ves.io.schema.views.aws_tgw_site.VPCAttachmentListType")
	proto.RegisterType((*ActiveServicePoliciesType)(nil), "ves.io.schema.views.aws_tgw_site.ActiveServicePoliciesType")
	golang_proto.RegisterType((*ActiveServicePoliciesType)(nil), "ves.io.schema.views.aws_tgw_site.ActiveServicePoliciesType")
	proto.RegisterType((*SecurityConfigType)(nil), "ves.io.schema.views.aws_tgw_site.SecurityConfigType")
	golang_proto.RegisterType((*SecurityConfigType)(nil), "ves.io.schema.views.aws_tgw_site.SecurityConfigType")
	proto.RegisterType((*AWSVPNTunnelConfigType)(nil), "ves.io.schema.views.aws_tgw_site.AWSVPNTunnelConfigType")
	golang_proto.RegisterType((*AWSVPNTunnelConfigType)(nil), "ves.io.schema.views.aws_tgw_site.AWSVPNTunnelConfigType")
	proto.RegisterType((*AWSTGWInfoConfigType)(nil), "ves.io.schema.views.aws_tgw_site.AWSTGWInfoConfigType")
	golang_proto.RegisterType((*AWSTGWInfoConfigType)(nil), "ves.io.schema.views.aws_tgw_site.AWSTGWInfoConfigType")
	proto.RegisterType((*AWSTGWResourceShareType)(nil), "ves.io.schema.views.aws_tgw_site.AWSTGWResourceShareType")
	golang_proto.RegisterType((*AWSTGWResourceShareType)(nil), "ves.io.schema.views.aws_tgw_site.AWSTGWResourceShareType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_tgw_site.AWSTGWResourceShareType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_tgw_site.AWSTGWResourceShareType.TagsEntry")
	proto.RegisterType((*AWSTGWStatusType)(nil), "ves.io.schema.views.aws_tgw_site.AWSTGWStatusType")
	golang_proto.RegisterType((*AWSTGWStatusType)(nil), "ves.io.schema.views.aws_tgw_site.AWSTGWStatusType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_tgw_site.AWSTGWStatusType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_tgw_site.AWSTGWStatusType.TagsEntry")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.aws_tgw_site.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.aws_tgw_site.GlobalSpecType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_tgw_site.GlobalSpecType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_tgw_site.GlobalSpecType.TagsEntry")
	proto.RegisterMapType((map[string]*VPCIpPrefixesType)(nil), "ves.io.schema.views.aws_tgw_site.GlobalSpecType.VpcIpPrefixesEntry")
	golang_proto.RegisterMapType((map[string]*VPCIpPrefixesType)(nil), "ves.io.schema.views.aws_tgw_site.GlobalSpecType.VpcIpPrefixesEntry")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.aws_tgw_site.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.aws_tgw_site.CreateSpecType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_tgw_site.CreateSpecType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_tgw_site.CreateSpecType.TagsEntry")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.aws_tgw_site.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.aws_tgw_site.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.aws_tgw_site.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.aws_tgw_site.GetSpecType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_tgw_site.GetSpecType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.aws_tgw_site.GetSpecType.TagsEntry")
	proto.RegisterMapType((map[string]*VPCIpPrefixesType)(nil), "ves.io.schema.views.aws_tgw_site.GetSpecType.VpcIpPrefixesEntry")
	golang_proto.RegisterMapType((map[string]*VPCIpPrefixesType)(nil), "ves.io.schema.views.aws_tgw_site.GetSpecType.VpcIpPrefixesEntry")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/aws_tgw_site/types.proto", fileDescriptor_69fc9b3c28dbc20f)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/aws_tgw_site/types.proto", fileDescriptor_69fc9b3c28dbc20f)
}

var fileDescriptor_69fc9b3c28dbc20f = []byte{
	// 5724 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7c, 0x5d, 0x6c, 0x1b, 0xd9,
	0x75, 0xbf, 0x2e, 0x49, 0x51, 0xa3, 0xab, 0x0f, 0x8e, 0xae, 0x28, 0x79, 0x2c, 0xaf, 0x65, 0x46,
	0xeb, 0xdd, 0x95, 0x65, 0x9a, 0x16, 0xa9, 0x4f, 0x2b, 0xff, 0xfd, 0x10, 0x65, 0xaf, 0x25, 0x26,
	0xeb, 0xd5, 0x7f, 0xa4, 0x95, 0x36, 0xd9, 0x26, 0x93, 0x11, 0xe7, 0x8a, 0x9a, 0x98, 0x9a, 0x99,
	0xce, 0x0c, 0x49, 0xcb, 0xa9, 0xd1, 0x85, 0xfb, 0x50, 0x60, 0x81, 0x02, 0xa9, 0xd1, 0x02, 0xc5,
	0x22, 0x0f, 0x6d, 0x1f, 0x8a, 0xc2, 0x4f, 0x29, 0x5a, 0xf4, 0x21, 0x34, 0x50, 0xd7, 0x40, 0x82,
	0x60, 0x5f, 0xaa, 0x87, 0xb6, 0x58, 0xe4, 0x29, 0xd1, 0x02, 0xed, 0x26, 0x7d, 0xc9, 0x43, 0x0b,
	0x6c, 0xfd, 0xd0, 0x2d, 0xee, 0xc7, 0x90, 0x33, 0xfc, 0x90, 0x65, 0x45, 0x0e, 0x36, 0xa9, 0x5f,
	0x6c, 0xf2, 0xde, 0x73, 0xce, 0xfd, 0x3a, 0xf7, 0x9c, 0xf3, 0x3b, 0xe7, 0x52, 0x30, 0x59, 0xc6,
	0x4e, 0x4a, 0x37, 0x2f, 0x3b, 0xf9, 0x1d, 0xbc, 0xab, 0x5e, 0x2e, 0xeb, 0xb8, 0xe2, 0x5c, 0x56,
	0x2b, 0x8e, 0xe2, 0x16, 0x2a, 0x8a, 0xa3, 0xbb, 0xf8, 0xb2, 0xbb, 0x67, 0x61, 0x27, 0x65, 0xd9,
	0xa6, 0x6b, 0xa2, 0x04, 0xa3, 0x4e, 0x31, 0xea, 0x14, 0xa5, 0x4e, 0xf9, 0xa9, 0x47, 0x2e, 0x15,
	0x74, 0x77, 0xa7, 0xb4, 0x95, 0xca, 0x9b, 0xbb, 0x97, 0x0b, 0x66, 0xc1, 0xbc, 0x4c, 0x19, 0xb7,
	0x4a, 0xdb, 0xf4, 0x1b, 0xfd, 0x42, 0x3f, 0x31, 0x81, 0x23, 0xe7, 0x0a, 0xa6, 0x59, 0x28, 0xe2,
	0x3a, 0x95, 0xab, 0xef, 0x62, 0xc7, 0x55, 0x77, 0x2d, 0x4e, 0xf0, 0x4a, 0x70, 0x7e, 0xf9, 0xa2,
	0x59, 0xd2, 0x94, 0xbc, 0x69, 0x18, 0x38, 0xef, 0xfa, 0xa7, 0x36, 0x72, 0x2e, 0x48, 0xb8, 0x5d,
	0xc4, 0x38, 0x48, 0x30, 0x11, 0x24, 0x30, 0xb0, 0x5b, 0x31, 0xed, 0x9b, 0xca, 0xb6, 0x6e, 0xe3,
	0x8a, 0x5a, 0x2c, 0x06, 0x68, 0xcf, 0x04, 0x69, 0x4d, 0xcb, 0xd5, 0x4d, 0xc3, 0xeb, 0x1c, 0x0d,
	0x76, 0x36, 0x6e, 0xd2, 0xc8, 0xe9, 0x60, 0xbf, 0xbf, 0xeb, 0x85, 0x86, 0xdd, 0x56, 0x8b, 0xba,
	0xa6, 0xba, 0x98, 0xf7, 0x26, 0x9a, 0xcf, 0x42, 0x09, 0x0e, 0x7d, 0xbe, 0xd5, 0x69, 0x91, 0x09,
	0x28, 0x87, 0x6c, 0x05, 0xa3, 0xf2, 0x11, 0x8c, 0x55, 0x20, 0x5a, 0xbf, 0xbe, 0xb9, 0xe8, 0x38,
	0x7a, 0xc1, 0xc0, 0xda, 0xe2, 0xda, 0x8d, 0xf5, 0x3d, 0x0b, 0xa3, 0x71, 0xd8, 0x45, 0x8e, 0x51,
	0x75, 0x0c, 0x09, 0x24, 0xc0, 0x78, 0x5f, 0x36, 0xf6, 0x83, 0x9f, 0x3f, 0x0c, 0xc3, 0x09, 0x41,
	0xfa, 0x9f, 0xcf, 0xc3, 0x89, 0xf7, 0x3f, 0x0b, 0xcb, 0x51, 0xb7, 0x50, 0x59, 0x74, 0x0c, 0x34,
	0x07, 0x07, 0xca, 0x66, 0xd1, 0xc5, 0xb6, 0xad, 0xd2, 0x53, 0xa7, 0x3c, 0x21, 0xca, 0xd3, 0x43,
	0x78, 0xa2, 0x13, 0x11, 0xe9, 0xf3, 0xcf, 0xc3, 0x72, 0xcc, 0xa3, 0x5a, 0xd3, 0x5d, 0xbc, 0xe8,
	0x18, 0x63, 0xff, 0x02, 0x60, 0xec, 0xda, 0x2d, 0xdd, 0x71, 0x75, 0xa3, 0xb0, 0x7e, 0x7d, 0x93,
	0x0e, 0x9b, 0x87, 0x44, 0xac, 0xa2, 0x6b, 0x74, 0xd4, 0xee, 0xec, 0x57, 0x3f, 0xab, 0x82, 0x8e,
	0x1f, 0x3c, 0x00, 0xa2, 0x00, 0x26, 0xc1, 0x02, 0xa4, 0x27, 0x7e, 0x49, 0x53, 0x5d, 0x95, 0x48,
	0x8e, 0xd8, 0x21, 0xe9, 0x0d, 0xf2, 0xe1, 0x65, 0xfb, 0x7c, 0x66, 0xec, 0x9b, 0xe3, 0x6e, 0xa1,
	0x72, 0xe9, 0xc2, 0xf8, 0x7b, 0xea, 0xa5, 0xdb, 0x93, 0x97, 0xae, 0x7c, 0xe3, 0x3b, 0xf3, 0x77,
	0x7e, 0xaf, 0xf6, 0x39, 0x3d, 0x77, 0xe7, 0xc2, 0x79, 0xb9, 0xd3, 0x2d, 0x54, 0x56, 0x34, 0x74,
	0xbe, 0xbe, 0xb6, 0x16, 0xf3, 0x3c, 0x74, 0x5d, 0xe1, 0x23, 0xac, 0xeb, 0x9f, 0x01, 0xec, 0x5b,
	0xbf, 0xbe, 0xb9, 0xaa, 0xda, 0xea, 0xae, 0x43, 0x57, 0xb5, 0x08, 0x45, 0x67, 0xcf, 0x71, 0xf1,
	0xae, 0x52, 0xc0, 0x06, 0xb6, 0x55, 0x17, 0x6b, 0x74, 0xe4, 0x9e, 0x4c, 0x3c, 0x15, 0xbc, 0x44,
	0xd7, 0x76, 0x2d, 0x77, 0x6f, 0xb9, 0x43, 0x8e, 0x31, 0xfa, 0xeb, 0x1e, 0x39, 0x7a, 0x0f, 0xf6,
	0x95, 0x1c, 0x6c, 0x2b, 0x2a, 0x3f, 0x27, 0x3a, 0x93, 0x9e, 0xcc, 0x74, 0xea, 0x49, 0x97, 0x30,
	0xd5, 0x7c, 0xb8, 0xcb, 0x1d, 0x72, 0x2f, 0x11, 0xe6, 0x35, 0x67, 0xcf, 0x42, 0xa8, 0x3a, 0x86,
	0x92, 0xdf, 0x31, 0xf5, 0x3c, 0x46, 0xb1, 0x87, 0x55, 0x10, 0xda, 0xaf, 0x02, 0x70, 0x50, 0x05,
	0xe1, 0x4c, 0x72, 0x2a, 0x17, 0x11, 0x80, 0x18, 0x1a, 0xfb, 0xd7, 0x18, 0x8c, 0xad, 0x61, 0xbb,
	0xac, 0xe7, 0xb1, 0xb3, 0xb1, 0xba, 0x44, 0x17, 0x36, 0x05, 0x21, 0x19, 0xcb, 0xc6, 0x05, 0xdd,
	0x34, 0xf8, 0x91, 0xc5, 0xf9, 0x91, 0xf5, 0x8e, 0x93, 0x23, 0x8b, 0xe6, 0x4d, 0x63, 0x5b, 0x2f,
	0xc8, 0xdd, 0x6a, 0xc5, 0x91, 0x29, 0x19, 0x7a, 0x13, 0x76, 0x19, 0xb8, 0xa2, 0x94, 0xad, 0x3c,
	0x5f, 0xc4, 0x4b, 0x2d, 0x17, 0xb1, 0xb8, 0xb9, 0xb6, 0xb1, 0xba, 0x54, 0xdf, 0xc5, 0x6c, 0xe4,
	0xfb, 0x0f, 0x00, 0x58, 0xee, 0x90, 0xa3, 0x06, 0xae, 0x6c, 0x58, 0x79, 0xa2, 0x2b, 0x65, 0x2b,
	0x4f, 0x74, 0x25, 0x42, 0x07, 0xce, 0xf1, 0x81, 0xfb, 0x9f, 0xac, 0x29, 0x65, 0x2b, 0x7f, 0xa8,
	0xa6, 0x2c, 0x77, 0xc8, 0x9d, 0x65, 0x2b, 0xbf, 0xa2, 0xa1, 0x1c, 0x9b, 0xac, 0x5b, 0xa8, 0x48,
	0x51, 0x3a, 0xd9, 0xcb, 0x47, 0xda, 0xf1, 0xfa, 0xb4, 0x97, 0x01, 0x9d, 0xf0, 0x7a, 0xa1, 0x82,
	0x36, 0x60, 0x2f, 0xe6, 0xfa, 0x4e, 0x05, 0x76, 0x51, 0x81, 0xe9, 0x27, 0x0b, 0x6c, 0xb8, 0x25,
	0xcb, 0x40, 0xee, 0xf1, 0x04, 0x11, 0xb9, 0x93, 0x50, 0x24, 0xe4, 0x79, 0x6c, 0xbb, 0xfa, 0xb6,
	0x8e, 0x35, 0x65, 0xa7, 0x22, 0x09, 0x74, 0x4b, 0xa2, 0x9f, 0x56, 0x01, 0x90, 0x80, 0xdc, 0xaf,
	0x56, 0x9c, 0x25, 0xaf, 0x7b, 0xb9, 0x82, 0xfe, 0x03, 0xc0, 0x3e, 0xdd, 0x70, 0x5c, 0xd5, 0xc8,
	0x33, 0x6b, 0x21, 0x75, 0x53, 0xfa, 0x1f, 0x82, 0x9f, 0x54, 0x41, 0xb7, 0x3b, 0x95, 0xba, 0x55,
	0x54, 0xed, 0x02, 0x26, 0x1b, 0x7a, 0xef, 0x01, 0xf8, 0x2b, 0x00, 0xa7, 0x61, 0xbd, 0x15, 0xbd,
	0x32, 0x3e, 0x9d, 0xb8, 0x95, 0x28, 0x2f, 0xad, 0xbe, 0x93, 0x4c, 0xa4, 0x67, 0xaf, 0x67, 0x13,
	0xf2, 0xe2, 0x5b, 0x17, 0x12, 0xbb, 0x58, 0xd3, 0x4b, 0xbb, 0x09, 0x0b, 0xdb, 0xdb, 0xa6, 0xbd,
	0x4b, 0x24, 0xc3, 0x29, 0x08, 0xdd, 0xa9, 0x54, 0x86, 0xb3, 0xbd, 0x34, 0x3e, 0x5f, 0x63, 0x9b,
	0xca, 0x78, 0x6c, 0x3b, 0x7a, 0x61, 0x27, 0xc0, 0x74, 0x05, 0xc2, 0xdd, 0x99, 0xd4, 0x34, 0x67,
	0xba, 0x38, 0x9e, 0x9e, 0xad, 0x71, 0xcd, 0x4e, 0x7b, 0x5c, 0x65, 0x6c, 0xef, 0x35, 0xb1, 0xd6,
	0x4e, 0x5a, 0xee, 0xf5, 0x16, 0x47, 0xb5, 0xf4, 0x02, 0xec, 0x72, 0x9c, 0x1d, 0xe5, 0x26, 0xde,
	0x93, 0x20, 0x5d, 0xa6, 0xf8, 0x59, 0x15, 0x84, 0x09, 0x75, 0x97, 0xdd, 0x29, 0x02, 0xe9, 0xfd,
	0x37, 0xe4, 0xa8, 0xe3, 0xec, 0x7c, 0x05, 0xef, 0xa1, 0xaf, 0x41, 0x41, 0xbd, 0xad, 0x18, 0xa6,
	0x86, 0x1d, 0xa9, 0x27, 0x11, 0x6e, 0x7b, 0xde, 0x4c, 0x39, 0xd7, 0x2b, 0xe6, 0x8a, 0xe1, 0x62,
	0x7b, 0x5b, 0xcd, 0xe3, 0x1b, 0xa6, 0x46, 0x47, 0xcb, 0xf6, 0x11, 0xc1, 0xc2, 0x3d, 0xd0, 0x39,
	0x11, 0x4e, 0x27, 0xa7, 0xe4, 0x2e, 0xf5, 0x36, 0xe9, 0x72, 0xd0, 0x2c, 0xec, 0xa5, 0x72, 0x15,
	0x8b, 0x5c, 0xe3, 0xdb, 0x52, 0x2f, 0x35, 0x25, 0xe8, 0x27, 0x55, 0x00, 0x26, 0xa9, 0xe6, 0x92,
	0xd9, 0x4f, 0x84, 0xa4, 0xa1, 0xe5, 0x90, 0x0c, 0x29, 0xe5, 0x2a, 0xb6, 0x17, 0x6f, 0xa3, 0x19,
	0xd8, 0xe3, 0x9a, 0xae, 0x5a, 0xe4, 0xb3, 0x3a, 0xd3, 0x86, 0xed, 0x55, 0xc2, 0x46, 0x09, 0xd9,
	0x70, 0xaf, 0xc1, 0x98, 0x61, 0x2a, 0xc4, 0xab, 0x61, 0x9b, 0xb3, 0xbe, 0x70, 0x88, 0xc9, 0x09,
	0xc9, 0x7d, 0x86, 0xb9, 0x49, 0xa9, 0x19, 0x7f, 0x06, 0x76, 0x6b, 0xba, 0x73, 0x53, 0x71, 0xf4,
	0xdb, 0x58, 0x1a, 0xa6, 0x83, 0x0e, 0xfd, 0xa4, 0x0a, 0x42, 0xf3, 0xb5, 0x51, 0x89, 0x01, 0x7c,
	0xff, 0x3f, 0xc3, 0xb2, 0x40, 0xe8, 0xd6, 0xf4, 0xdb, 0x18, 0x15, 0xa0, 0x40, 0x15, 0xd1, 0xc6,
	0x9a, 0xd4, 0x4f, 0x07, 0x1b, 0x6b, 0xb9, 0x7b, 0x6f, 0x6f, 0x7d, 0x1b, 0xe7, 0x5d, 0x19, 0x6f,
	0xd3, 0x0d, 0x7b, 0xf9, 0xfe, 0x9d, 0x01, 0xee, 0xca, 0x6d, 0xac, 0x61, 0xc3, 0xd5, 0xd5, 0xa2,
	0x43, 0xee, 0xb1, 0x00, 0xfc, 0x26, 0x64, 0x39, 0x2c, 0x77, 0x11, 0x35, 0xb6, 0xb1, 0x86, 0x5e,
	0x85, 0x02, 0x31, 0x84, 0x0e, 0x31, 0xa4, 0xb1, 0xf6, 0xab, 0xca, 0x76, 0x7f, 0x7c, 0x07, 0xb0,
	0x2b, 0xb0, 0x1c, 0x96, 0x6b, 0x2c, 0x68, 0x19, 0xc6, 0x35, 0xdd, 0x51, 0xb7, 0x8a, 0x58, 0xd1,
	0xc9, 0xf9, 0x19, 0xd8, 0x55, 0xca, 0xba, 0x25, 0x9d, 0x3b, 0x64, 0x83, 0x22, 0x32, 0xe2, 0x3c,
	0x2b, 0x9c, 0x65, 0x43, 0xb7, 0xd0, 0x9b, 0x70, 0x10, 0x1b, 0xcd, 0x82, 0xbe, 0x74, 0xa8, 0xa0,
	0x01, 0xc6, 0xd2, 0x20, 0x67, 0x7b, 0xe6, 0x56, 0x5e, 0x71, 0x70, 0xbe, 0x64, 0xeb, 0xee, 0x9e,
	0x52, 0xb0, 0xcd, 0x92, 0x25, 0xbd, 0x78, 0x88, 0x9c, 0x4e, 0x79, 0x80, 0xb0, 0xac, 0x71, 0x8e,
	0xeb, 0x84, 0x01, 0xfd, 0x0e, 0x1c, 0xca, 0x97, 0x1c, 0xd7, 0xdc, 0x6d, 0x94, 0x74, 0x9e, 0x4a,
	0x7a, 0xb9, 0xe5, 0x71, 0x04, 0x44, 0x50, 0x03, 0xd3, 0x29, 0x0f, 0x32, 0x31, 0x81, 0xae, 0x85,
	0xbf, 0x00, 0x8f, 0xaa, 0xe0, 0x7b, 0x00, 0x0e, 0xc1, 0xd8, 0xe2, 0xe6, 0x5a, 0x62, 0xa9, 0x7e,
	0x5c, 0x28, 0x94, 0x9e, 0x82, 0xe7, 0xe0, 0x10, 0x33, 0xf1, 0x89, 0x97, 0x13, 0x9e, 0xa7, 0x48,
	0x6c, 0xac, 0x2e, 0xa1, 0x68, 0x3a, 0x99, 0x49, 0x4e, 0x4d, 0xc3, 0x38, 0x8c, 0xad, 0xdb, 0xaa,
	0xe1, 0xe8, 0x6e, 0xe2, 0xba, 0xea, 0xe2, 0x8a, 0xba, 0x87, 0xc0, 0x0c, 0x1c, 0x83, 0x71, 0xe2,
	0x3a, 0x13, 0x44, 0xef, 0x12, 0xd4, 0x70, 0x62, 0x17, 0xdb, 0x0e, 0x82, 0x57, 0x92, 0xe9, 0x74,
	0x32, 0x93, 0x49, 0xa6, 0x27, 0x21, 0x82, 0xbd, 0x4c, 0x39, 0x13, 0x4c, 0x3b, 0x43, 0x99, 0x2b,
	0x30, 0x0e, 0xfb, 0x17, 0xb5, 0x32, 0xb1, 0x6a, 0x0e, 0x4e, 0x6c, 0xac, 0xac, 0x3a, 0x28, 0x34,
	0x35, 0x99, 0x7d, 0x09, 0x22, 0x87, 0x8d, 0x4d, 0x3c, 0x8c, 0xdf, 0xa7, 0x85, 0xf7, 0xab, 0x20,
	0x44, 0x7c, 0xda, 0x54, 0x72, 0x9a, 0xb8, 0x3c, 0x62, 0x5e, 0x7d, 0xdd, 0xd1, 0xfd, 0x2a, 0xe8,
	0x24, 0xdd, 0xb3, 0xc9, 0xb9, 0xec, 0x79, 0xd8, 0xeb, 0xbf, 0x3a, 0x28, 0xfe, 0xb0, 0x0a, 0x5e,
	0xd8, 0xaf, 0x82, 0xb3, 0x07, 0x55, 0x20, 0xa4, 0x33, 0xc9, 0xcc, 0x5c, 0x32, 0x33, 0x9f, 0x4d,
	0x40, 0xa8, 0x61, 0xab, 0x68, 0xee, 0xed, 0x62, 0xc3, 0x45, 0xe8, 0x61, 0x15, 0xf4, 0xef, 0x57,
	0x41, 0xdf, 0x41, 0x15, 0x84, 0xd2, 0xd3, 0x7f, 0xfe, 0x00, 0x80, 0xec, 0x38, 0x1c, 0xf4, 0x2b,
	0x86, 0x37, 0xde, 0xc0, 0xc3, 0x2a, 0x38, 0xb7, 0x5f, 0x05, 0xa3, 0x07, 0x55, 0xd0, 0x39, 0x95,
	0x4e, 0x4e, 0x4d, 0x65, 0x27, 0xe0, 0x50, 0xf0, 0xc8, 0xfc, 0xb4, 0x2f, 0xee, 0x57, 0xc1, 0x18,
	0xa5, 0x9d, 0x49, 0x4e, 0xcd, 0xe6, 0x22, 0x42, 0x48, 0x0c, 0xe7, 0x22, 0x42, 0xa7, 0x18, 0xcd,
	0x45, 0x84, 0xb3, 0xe2, 0x68, 0x2e, 0x22, 0xf4, 0x89, 0xfd, 0xb9, 0x88, 0x20, 0x8a, 0x03, 0xb9,
	0x88, 0x30, 0x20, 0xa2, 0x5c, 0x44, 0x40, 0xe2, 0x60, 0x2e, 0x22, 0x0c, 0x8a, 0xf1, 0x5c, 0x44,
	0x88, 0x8b, 0x43, 0xb9, 0x88, 0x30, 0x24, 0x0e, 0xe7, 0x22, 0xc2, 0xa8, 0x78, 0x2e, 0x17, 0x11,
	0x12, 0xe2, 0x97, 0x72, 0x11, 0x61, 0x4c, 0x7c, 0x71, 0xec, 0x7e, 0x2f, 0x8c, 0x6d, 0x18, 0x4b,
	0xf4, 0x92, 0x95, 0x6c, 0x95, 0x84, 0x98, 0xe8, 0x2d, 0x78, 0xca, 0x30, 0x15, 0xdd, 0x70, 0x74,
	0x0d, 0x2b, 0x8e, 0xab, 0xba, 0x7a, 0x5e, 0xb1, 0xcd, 0x92, 0x8b, 0x9d, 0x27, 0x04, 0x2e, 0x71,
	0xc3, 0x5c, 0xa1, 0x5c, 0x6b, 0x94, 0x49, 0xa6, 0x3c, 0xa8, 0x00, 0xe3, 0x2d, 0x65, 0x31, 0xff,
	0x7f, 0xa9, 0xb5, 0x56, 0xea, 0x6e, 0x40, 0xc8, 0x57, 0x75, 0xc7, 0x0d, 0xc4, 0x01, 0x48, 0x6f,
	0x1e, 0xe8, 0x6d, 0x28, 0x19, 0xa6, 0x62, 0x96, 0xdc, 0x16, 0x83, 0x75, 0x1e, 0x32, 0x71, 0x20,
	0x0f, 0x19, 0xe6, 0xdb, 0x8c, 0x2d, 0x20, 0x50, 0x87, 0x43, 0xad, 0xa5, 0x45, 0x8f, 0x3f, 0x75,
	0x20, 0x0f, 0x9a, 0x2d, 0x86, 0xca, 0xc2, 0x01, 0xc3, 0x54, 0x0a, 0x45, 0x73, 0x8b, 0x18, 0x7b,
	0x86, 0x48, 0xa8, 0x1f, 0x6f, 0x6f, 0xb3, 0x63, 0x86, 0x79, 0x9d, 0xd2, 0xdf, 0x60, 0xe4, 0xa8,
	0x08, 0x07, 0x83, 0x02, 0x94, 0xa2, 0xee, 0xb8, 0xd4, 0xbb, 0xb7, 0x0b, 0x16, 0x03, 0x02, 0x96,
	0x18, 0x98, 0xd2, 0x4d, 0xa3, 0x61, 0xce, 0x21, 0x79, 0xa0, 0xe0, 0x27, 0x24, 0xdd, 0xe8, 0x1a,
	0x1c, 0x34, 0x4c, 0x45, 0xcb, 0x2b, 0xf9, 0x62, 0xc9, 0x71, 0xb1, 0xcd, 0x6d, 0x4d, 0xef, 0x21,
	0x73, 0x0e, 0xcb, 0xa2, 0x61, 0x5e, 0xcd, 0x2f, 0x31, 0x06, 0x66, 0xb4, 0x2a, 0xf0, 0x4c, 0xa3,
	0x8c, 0xda, 0x11, 0x96, 0x0d, 0xa9, 0xef, 0xc8, 0x9e, 0x64, 0xf0, 0xfe, 0x1d, 0xb1, 0x51, 0xd2,
	0x72, 0x58, 0x3e, 0xa5, 0x05, 0xc6, 0xe3, 0xc7, 0xbc, 0x61, 0xa0, 0x12, 0x1c, 0x69, 0x1a, 0x98,
	0xeb, 0x69, 0xd9, 0x78, 0x0a, 0x0f, 0xd6, 0x66, 0xdc, 0xe1, 0xe0, 0xb8, 0xec, 0x5e, 0x6c, 0xd0,
	0xcb, 0xe5, 0xec, 0x7a, 0xb8, 0x55, 0x37, 0x0d, 0xc5, 0x2a, 0x6d, 0x15, 0xf5, 0xbc, 0xa2, 0x5b,
	0x92, 0x78, 0xa8, 0xe3, 0x88, 0x3b, 0xbb, 0xf5, 0x03, 0x5a, 0xa5, 0x4c, 0x2b, 0x16, 0xba, 0x0e,
	0xe3, 0x0d, 0xe2, 0xca, 0x2e, 0x91, 0x35, 0x70, 0xb8, 0x13, 0x0a, 0xc8, 0x2a, 0xbb, 0x2b, 0x16,
	0x5a, 0x87, 0xa2, 0x5a, 0x2c, 0x9a, 0x15, 0xac, 0x51, 0x5b, 0x65, 0x99, 0xb6, 0x4b, 0x03, 0xa6,
	0x9e, 0xcc, 0xf9, 0xd6, 0x41, 0x10, 0x23, 0xde, 0x58, 0x59, 0x5d, 0x35, 0x6d, 0xd7, 0x61, 0x9a,
	0x22, 0xf7, 0x73, 0x19, 0x1b, 0xba, 0x45, 0x9a, 0xd1, 0x7b, 0x30, 0xde, 0x28, 0x55, 0x71, 0x8a,
	0xba, 0x84, 0x9e, 0x5a, 0xf2, 0x40, 0x50, 0xf2, 0x5a, 0x51, 0x5f, 0x78, 0xf7, 0x51, 0x15, 0xac,
	0xc3, 0xf3, 0xf0, 0x34, 0xf5, 0x20, 0xeb, 0x66, 0x82, 0xfe, 0xef, 0x2d, 0xac, 0xac, 0xbb, 0x7b,
	0xa8, 0x6b, 0x2e, 0x99, 0x9e, 0x49, 0xa6, 0xd3, 0x30, 0x0e, 0xfb, 0xd8, 0x7d, 0x4b, 0xf0, 0x0b,
	0x17, 0x4e, 0x27, 0xa7, 0xe1, 0x30, 0xec, 0xe3, 0xa3, 0x25, 0xe8, 0x58, 0xa8, 0x33, 0x3d, 0x99,
	0x4c, 0xcf, 0x67, 0x2f, 0xc1, 0x91, 0x16, 0x26, 0xab, 0x1d, 0x46, 0xca, 0xa6, 0xe0, 0x99, 0x56,
	0x76, 0xc2, 0x4f, 0xdf, 0xb9, 0x5f, 0x05, 0x11, 0x42, 0x3f, 0x93, 0x9c, 0xcd, 0x8e, 0xc3, 0xa1,
	0x86, 0x8b, 0xea, 0xa3, 0x14, 0xf6, 0xab, 0xa0, 0x8b, 0x50, 0xce, 0x27, 0xaf, 0x64, 0x2f, 0xc3,
	0x53, 0x4d, 0x4a, 0xca, 0x69, 0x89, 0x57, 0xea, 0xdd, 0xaf, 0x82, 0x1e, 0xee, 0x95, 0xd2, 0x53,
	0xc9, 0xf4, 0x74, 0xf6, 0x22, 0x1c, 0xa6, 0x78, 0x75, 0x17, 0x3b, 0x3b, 0xcd, 0xae, 0x44, 0xdc,
	0xaf, 0x82, 0x18, 0x71, 0x25, 0xe9, 0xd9, 0x64, 0x7a, 0x8e, 0x61, 0xbb, 0x5c, 0x44, 0x88, 0x88,
	0x9d, 0xb9, 0x88, 0xd0, 0x25, 0x0a, 0xb9, 0x88, 0xd0, 0x23, 0xf6, 0xe6, 0x22, 0x42, 0x4c, 0x14,
	0x9b, 0xdd, 0xc7, 0xd8, 0x7f, 0xc7, 0xe0, 0xb0, 0x0f, 0x05, 0xca, 0xd8, 0x2a, 0xaa, 0x3c, 0xcc,
	0x7e, 0x0e, 0x06, 0xbf, 0x08, 0x60, 0xf0, 0xff, 0x16, 0xb4, 0x7b, 0x86, 0x78, 0xed, 0xd9, 0x82,
	0x99, 0xd0, 0xaf, 0x04, 0x66, 0x42, 0x3e, 0x30, 0xf3, 0x14, 0xe8, 0xf6, 0x38, 0x98, 0x6e, 0xbe,
	0x25, 0x6c, 0x8d, 0x13, 0xfc, 0x99, 0xf6, 0x73, 0x0d, 0x8d, 0x13, 0x8c, 0xe5, 0x07, 0xae, 0x73,
	0xad, 0x80, 0x6b, 0x33, 0xe3, 0xab, 0x8c, 0xf1, 0xf8, 0xd0, 0x35, 0xdc, 0x08, 0x5d, 0x9f, 0xc3,
	0xbb, 0xe3, 0xc1, 0xbb, 0xbf, 0x01, 0x1f, 0xbd, 0xd6, 0x98, 0xe2, 0x7b, 0x54, 0x05, 0x1f, 0x7e,
	0x51, 0x00, 0x1f, 0x82, 0xbd, 0xde, 0xa6, 0x12, 0xbc, 0x47, 0xe1, 0xde, 0x97, 0x5b, 0xc2, 0xbd,
	0x97, 0x1a, 0xe0, 0xde, 0xdd, 0xc7, 0xa0, 0x05, 0x59, 0xf6, 0x62, 0x00, 0x04, 0x9e, 0x6d, 0x00,
	0x81, 0x77, 0x1f, 0x03, 0x5f, 0x77, 0x36, 0x15, 0x00, 0x7b, 0x89, 0x66, 0xb0, 0x47, 0xe8, 0xeb,
	0x14, 0xd9, 0xf9, 0x06, 0x08, 0x39, 0x4e, 0x20, 0xe4, 0x8f, 0xab, 0x00, 0x34, 0xc2, 0xc8, 0xbb,
	0x8f, 0x41, 0x80, 0x32, 0xfb, 0x7a, 0x6b, 0xd0, 0x38, 0xde, 0x04, 0x1a, 0xef, 0x3e, 0x06, 0xad,
	0x28, 0xb3, 0x4b, 0xed, 0xb0, 0xe4, 0x44, 0x13, 0x96, 0xbc, 0xfb, 0x18, 0xb4, 0xa6, 0x6d, 0x00,
	0x99, 0x04, 0x28, 0xfe, 0x53, 0x08, 0x0e, 0x6c, 0xac, 0x2e, 0x2d, 0xba, 0xae, 0x9a, 0xdf, 0x21,
	0x6b, 0xa4, 0x26, 0x58, 0xad, 0x79, 0x5e, 0x70, 0xd2, 0x9e, 0xd7, 0xf3, 0xbb, 0x45, 0x18, 0x2d,
	0xaa, 0x5b, 0xb8, 0x48, 0xc0, 0x27, 0xb1, 0xf1, 0xaf, 0x3f, 0xd9, 0x4b, 0x36, 0xcd, 0x33, 0xf5,
	0x55, 0x2a, 0xe1, 0x9a, 0xe1, 0xda, 0x7b, 0xd9, 0xc1, 0x0f, 0x1f, 0x80, 0x08, 0x0c, 0x81, 0x8e,
	0x83, 0x9f, 0xfe, 0x30, 0x1c, 0xfd, 0xe0, 0x01, 0x08, 0x09, 0x1d, 0x32, 0x1f, 0x63, 0xe4, 0x0a,
	0xec, 0xf1, 0xd1, 0x22, 0x11, 0x86, 0x89, 0x6d, 0xa5, 0x8b, 0x93, 0xc9, 0x47, 0x14, 0x87, 0x9d,
	0x65, 0xb5, 0x58, 0xc2, 0x14, 0x0a, 0x77, 0xcb, 0xec, 0xcb, 0x42, 0x68, 0x1e, 0x2c, 0xa4, 0x3e,
	0xaa, 0x82, 0x09, 0x88, 0x60, 0x74, 0x63, 0x75, 0x29, 0xb1, 0x72, 0x75, 0x44, 0xf0, 0xf6, 0x06,
	0xc6, 0x61, 0x94, 0x09, 0xcd, 0x41, 0x6f, 0x31, 0x62, 0xe7, 0x58, 0x81, 0x6e, 0xe8, 0x8a, 0xb5,
	0x6a, 0xe3, 0x6d, 0xfd, 0x16, 0x66, 0xd5, 0x82, 0x1c, 0x14, 0x2c, 0xfe, 0x5d, 0x02, 0x89, 0xf0,
	0x78, 0x77, 0x36, 0x45, 0x6b, 0x2f, 0xf7, 0x40, 0xd7, 0x58, 0xa7, 0x1d, 0xfe, 0x0c, 0x00, 0x6a,
	0x3a, 0xef, 0x81, 0xb0, 0xf8, 0xbe, 0x40, 0x3e, 0x76, 0xde, 0x03, 0x21, 0x01, 0x78, 0x9f, 0x24,
	0x20, 0xd7, 0xf8, 0x17, 0xa2, 0x1f, 0x55, 0x41, 0x48, 0x04, 0x63, 0xdf, 0x05, 0x70, 0x28, 0xb0,
	0x25, 0x1e, 0xbc, 0x43, 0xef, 0x41, 0x81, 0x4c, 0x91, 0xc2, 0x44, 0x40, 0x77, 0x77, 0xea, 0x18,
	0xbb, 0xcb, 0x4b, 0x22, 0x74, 0x4e, 0x40, 0xee, 0x2a, 0x5b, 0x79, 0x32, 0xc0, 0xc2, 0xc8, 0xa3,
	0x2a, 0x18, 0x26, 0x56, 0x80, 0xec, 0x87, 0x5a, 0xe3, 0x70, 0x10, 0x48, 0x8f, 0xfd, 0x31, 0x80,
	0xa7, 0x17, 0x49, 0x90, 0x8e, 0xb9, 0xe9, 0x58, 0x35, 0x8b, 0x7a, 0x5e, 0xe7, 0x9b, 0xe0, 0x42,
	0xd1, 0xbb, 0xb0, 0x16, 0x6f, 0xe7, 0xd3, 0x3b, 0x8a, 0x17, 0x7e, 0xe9, 0xfe, 0x9d, 0xfe, 0x00,
	0xfb, 0x9e, 0xb7, 0x3b, 0x62, 0xc2, 0xb7, 0x4f, 0x31, 0x27, 0x38, 0xf2, 0xd8, 0x67, 0x02, 0x44,
	0x9e, 0x4d, 0x64, 0x09, 0x11, 0x3a, 0x99, 0x37, 0xa0, 0x68, 0x98, 0xca, 0xb6, 0x69, 0x57, 0x54,
	0x5b, 0x53, 0x2c, 0xdb, 0xbc, 0xb5, 0xf7, 0x84, 0x34, 0x48, 0xbf, 0x61, 0xbe, 0xc9, 0xc8, 0x57,
	0x09, 0x35, 0xfa, 0x03, 0x00, 0xcf, 0xaa, 0x74, 0xb1, 0x41, 0x31, 0xf5, 0xc5, 0xb1, 0xe8, 0xf7,
	0xb5, 0x06, 0x79, 0x8d, 0x85, 0xc9, 0x14, 0xdb, 0x31, 0xbf, 0x6c, 0xff, 0xb6, 0x2d, 0x77, 0xc8,
	0x23, 0x6a, 0x5b, 0x0a, 0x02, 0x3c, 0x83, 0xa3, 0x53, 0x40, 0x45, 0xfe, 0xe5, 0xe1, 0x67, 0xdb,
	0xac, 0xce, 0xb6, 0x4f, 0x1c, 0x85, 0x4b, 0x8b, 0xc5, 0x22, 0x87, 0xff, 0x58, 0x75, 0x5c, 0xa5,
	0x82, 0x1d, 0x97, 0xef, 0x34, 0x4f, 0x36, 0xb4, 0xcb, 0xb3, 0x88, 0x86, 0x79, 0x4d, 0x75, 0xdc,
	0x4d, 0xec, 0xb8, 0x74, 0x5e, 0x7b, 0xe8, 0x0f, 0x01, 0xfc, 0x12, 0xdf, 0x9b, 0xba, 0xac, 0xa6,
	0xc3, 0x67, 0x40, 0xf4, 0xcb, 0x4f, 0xd6, 0xcd, 0xb6, 0x3a, 0xb5, 0x0c, 0x64, 0x7e, 0x06, 0xde,
	0x04, 0x1a, 0x88, 0x90, 0x0a, 0xc7, 0xda, 0xcc, 0xc0, 0xbf, 0x55, 0x3d, 0x87, 0xae, 0xef, 0x2c,
	0x6e, 0x21, 0xbc, 0xbe, 0x67, 0x2c, 0xc9, 0xe3, 0x1d, 0x2b, 0xdf, 0xb1, 0xce, 0x27, 0x25, 0x79,
	0x78, 0xd2, 0x85, 0x6f, 0xd8, 0x1e, 0x3c, 0xc5, 0xf7, 0x2b, 0x20, 0x47, 0xaf, 0x65, 0xa5, 0xae,
	0x1c, 0x4d, 0x8b, 0xfc, 0x52, 0xf9, 0x1e, 0xd5, 0xb2, 0x3d, 0x43, 0x6a, 0x2b, 0x12, 0xf4, 0xa7,
	0xbe, 0xb3, 0x32, 0x76, 0x48, 0x18, 0xae, 0xd5, 0xa4, 0xd6, 0x67, 0xc1, 0x12, 0x40, 0xd9, 0xa3,
	0xcd, 0xe2, 0x1a, 0x97, 0xf3, 0x26, 0x6f, 0x6e, 0x39, 0x9d, 0x51, 0xf5, 0x50, 0xda, 0x85, 0xd1,
	0x47, 0x55, 0x30, 0x02, 0x25, 0x18, 0xf3, 0x6e, 0x6f, 0x82, 0xef, 0x55, 0x67, 0x3a, 0x39, 0x9d,
	0x9c, 0xcf, 0x5e, 0x80, 0xf1, 0xa0, 0xe6, 0xfb, 0x10, 0xb1, 0x87, 0xe3, 0x3b, 0x33, 0xc9, 0xb9,
	0xe4, 0x54, 0x76, 0x16, 0x9e, 0x6b, 0xab, 0x04, 0x9c, 0x6b, 0xf0, 0x61, 0x15, 0x74, 0xef, 0x57,
	0x81, 0x70, 0x50, 0x05, 0x5d, 0x57, 0x92, 0xe9, 0xc9, 0x64, 0x3a, 0x9d, 0xbd, 0x08, 0x87, 0x82,
	0xc7, 0xea, 0x51, 0x23, 0x1f, 0xf6, 0x8f, 0xce, 0x24, 0xd3, 0x99, 0xe4, 0x6c, 0x0d, 0x76, 0x0b,
	0x62, 0x37, 0x03, 0xdf, 0x63, 0x7f, 0x14, 0x82, 0xc3, 0x14, 0xa5, 0xdc, 0x58, 0x2f, 0x19, 0x06,
	0x2e, 0xfa, 0xcc, 0xcf, 0x38, 0xec, 0x26, 0x81, 0x81, 0x62, 0xa8, 0xbb, 0x98, 0x3b, 0x59, 0x66,
	0x6e, 0xed, 0x88, 0x08, 0xa4, 0x37, 0x64, 0x81, 0xf4, 0xde, 0x50, 0x77, 0x31, 0xda, 0x80, 0xa2,
	0x4b, 0xb9, 0x15, 0x1b, 0xef, 0x9a, 0x2e, 0x56, 0x74, 0x8b, 0xba, 0xcc, 0xee, 0x6c, 0x92, 0x30,
	0x74, 0xdf, 0x03, 0xd1, 0xb1, 0x88, 0x1d, 0xba, 0x55, 0x73, 0x16, 0x62, 0xa8, 0xa5, 0x03, 0xe9,
	0x67, 0x52, 0x64, 0x2a, 0x64, 0xc5, 0x42, 0xe7, 0x61, 0x17, 0x9d, 0x81, 0xce, 0xea, 0xce, 0x0d,
	0xe3, 0x47, 0x49, 0xdf, 0x8a, 0x86, 0x96, 0x60, 0x84, 0x02, 0x4e, 0x82, 0xc0, 0xfb, 0x8f, 0x82,
	0x8d, 0x6b, 0x8b, 0x25, 0xcb, 0x94, 0x29, 0x73, 0xcd, 0x63, 0xfd, 0x65, 0x18, 0xc6, 0x17, 0x37,
	0xd7, 0xd6, 0xaf, 0x6f, 0xae, 0x18, 0xdb, 0xa6, 0x6f, 0x37, 0xb2, 0x0d, 0x4f, 0x04, 0x2e, 0x1e,
	0xe3, 0x05, 0x40, 0xb6, 0x16, 0xb3, 0x84, 0x9a, 0x64, 0x1c, 0x35, 0x28, 0x79, 0x07, 0x42, 0xa7,
	0xb4, 0x45, 0x22, 0x2f, 0x5d, 0x23, 0xe6, 0x3b, 0x7c, 0x58, 0xf2, 0x62, 0x8d, 0x52, 0xae, 0x68,
	0x4c, 0xab, 0x63, 0x9e, 0x3f, 0x9f, 0xe8, 0x9c, 0x4c, 0x12, 0xd0, 0xd9, 0xed, 0x78, 0xfd, 0xe8,
	0x4d, 0x08, 0x6b, 0xe9, 0x40, 0x47, 0x8a, 0xd0, 0xc3, 0x7b, 0xc5, 0x7f, 0x78, 0x16, 0x68, 0xe0,
	0xf6, 0x9d, 0x5b, 0xb7, 0xc5, 0x93, 0x82, 0x04, 0x04, 0xf5, 0x58, 0xb6, 0x5e, 0x56, 0xa9, 0x12,
	0x10, 0xc3, 0xf0, 0x54, 0x82, 0x20, 0xe7, 0x25, 0x92, 0x4e, 0xb3, 0x08, 0x81, 0x6a, 0x5f, 0x17,
	0x8d, 0x78, 0x88, 0x7f, 0x27, 0xfa, 0x36, 0xf6, 0x5f, 0x9d, 0xf0, 0x14, 0x3b, 0x24, 0x19, 0x3b,
	0x66, 0xc9, 0xce, 0xe3, 0xb5, 0x1d, 0xd5, 0x66, 0xd0, 0x3c, 0x05, 0x07, 0x6d, 0xde, 0xa8, 0x38,
	0xa4, 0xd5, 0xa7, 0xbf, 0xf2, 0x80, 0xed, 0xa7, 0xa7, 0xba, 0xfb, 0x3a, 0xec, 0xcb, 0xdb, 0x98,
	0x96, 0x1f, 0x14, 0x57, 0xdf, 0xc5, 0xdc, 0xc3, 0x8e, 0xa4, 0xd8, 0xab, 0xa0, 0x94, 0xf7, 0x2a,
	0x28, 0xb5, 0xee, 0xbd, 0x0a, 0x92, 0x7b, 0x3d, 0x06, 0xd2, 0x84, 0xde, 0x84, 0x03, 0x45, 0x72,
	0x71, 0x4b, 0x96, 0xa6, 0xba, 0x58, 0x63, 0x42, 0xc2, 0x4f, 0x14, 0x12, 0x23, 0x4c, 0xef, 0x30,
	0x1e, 0x2a, 0x27, 0x09, 0x51, 0xc3, 0xc4, 0x55, 0xdb, 0x60, 0x69, 0x25, 0x59, 0x0c, 0xcc, 0x7b,
	0xd1, 0x36, 0xd8, 0x32, 0xf3, 0x58, 0x2f, 0x13, 0x78, 0x9c, 0xcf, 0x9b, 0x25, 0x83, 0x28, 0x84,
	0x24, 0x92, 0xfd, 0x26, 0xcb, 0x64, 0x5d, 0x8b, 0xac, 0x67, 0x45, 0x43, 0x8b, 0xf0, 0x6c, 0x83,
	0x74, 0xdd, 0x28, 0xeb, 0x2e, 0x5b, 0x37, 0x19, 0x88, 0x56, 0xee, 0xe5, 0x91, 0xc0, 0x40, 0x2b,
	0x35, 0x12, 0x32, 0xe4, 0x38, 0x14, 0xcd, 0x8a, 0x11, 0x1c, 0x8f, 0x26, 0x79, 0xe4, 0x7e, 0xda,
	0x5e, 0x1f, 0x6c, 0x01, 0x9e, 0x66, 0x7e, 0x0b, 0xdf, 0x22, 0x28, 0x41, 0x2d, 0x2a, 0x96, 0xad,
	0x1b, 0x79, 0xdd, 0x2a, 0x72, 0x8f, 0x2a, 0xc8, 0xa7, 0x28, 0xc1, 0x35, 0xde, 0xbf, 0x5a, 0xeb,
	0x46, 0x17, 0xe1, 0x80, 0x6f, 0x66, 0x8e, 0xab, 0xba, 0x25, 0x66, 0xd9, 0xbb, 0x65, 0xb1, 0xde,
	0xb1, 0x46, 0xdb, 0xd1, 0x30, 0x8c, 0x72, 0x8a, 0x3e, 0x4a, 0xc1, 0xbf, 0x11, 0x21, 0x75, 0x48,
	0xe4, 0x09, 0xe9, 0x67, 0x42, 0xea, 0x1d, 0x5c, 0xc8, 0x26, 0x8c, 0xb8, 0x6a, 0xc1, 0x91, 0x62,
	0xf4, 0x2e, 0x2d, 0x1d, 0xc1, 0xd5, 0xb7, 0x56, 0xbd, 0xd4, 0xba, 0x5a, 0x60, 0xc1, 0xbb, 0x4c,
	0x05, 0x8e, 0xcc, 0xc1, 0xee, 0x5a, 0xd3, 0xd3, 0xc4, 0xf3, 0x35, 0xf4, 0x13, 0x15, 0xbb, 0xfc,
	0xd9, 0xd1, 0xb1, 0x47, 0x61, 0x28, 0xb2, 0xc1, 0xd9, 0xd4, 0xa9, 0xc2, 0x0f, 0x05, 0x0d, 0x93,
	0x67, 0x6b, 0x4e, 0xf1, 0xd7, 0x46, 0xb6, 0xc1, 0xe5, 0xd3, 0x07, 0x46, 0xb6, 0x81, 0x26, 0xe0,
	0x00, 0xe9, 0x08, 0x1c, 0x25, 0x33, 0xaf, 0x72, 0xcc, 0x2d, 0x54, 0xde, 0xf6, 0x1d, 0x25, 0x3a,
	0x0f, 0xfb, 0xa9, 0x90, 0x5d, 0xf5, 0x36, 0x51, 0x13, 0x87, 0xe9, 0x63, 0x58, 0xee, 0x25, 0xb2,
	0x68, 0xe3, 0xa2, 0x63, 0x90, 0x1b, 0x40, 0x01, 0x6b, 0xe0, 0x1a, 0x75, 0x3e, 0xf9, 0x06, 0xb8,
	0x85, 0xca, 0x92, 0xff, 0x26, 0xf1, 0xe2, 0x28, 0xcf, 0xe4, 0x46, 0xe9, 0x94, 0xba, 0xdd, 0x42,
	0x85, 0xe7, 0x6c, 0xcf, 0xc0, 0x6e, 0x7a, 0x04, 0xae, 0xea, 0x7a, 0x16, 0x41, 0x70, 0x0b, 0x15,
	0xb2, 0x15, 0x18, 0xad, 0xf2, 0x43, 0x14, 0xe8, 0x21, 0xfe, 0xbf, 0xa3, 0x1e, 0x62, 0x7d, 0x1f,
	0x1b, 0x4f, 0x8f, 0xcc, 0x86, 0x29, 0x8e, 0xb2, 0xeb, 0x14, 0xb8, 0xa2, 0x77, 0xb3, 0x96, 0xb7,
	0x9c, 0xc2, 0xb1, 0x0f, 0x77, 0xec, 0x6f, 0xcf, 0xc1, 0x7e, 0x56, 0xfc, 0x5a, 0xb3, 0x70, 0x9e,
	0x1e, 0xe1, 0x37, 0x61, 0x3f, 0x99, 0x9b, 0x55, 0xcb, 0x49, 0x50, 0x49, 0x47, 0x4a, 0xcb, 0x36,
	0xe4, 0x4d, 0xb2, 0x11, 0x12, 0x55, 0xc8, 0x7d, 0x6a, 0xc5, 0xf1, 0x65, 0x38, 0xb6, 0x61, 0x8c,
	0x98, 0x52, 0x1f, 0x12, 0xe2, 0x56, 0x6e, 0xee, 0x29, 0x31, 0x57, 0xbd, 0x3a, 0x47, 0x87, 0xe9,
	0x2f, 0x5b, 0xf9, 0x45, 0x1f, 0xbc, 0xfa, 0x06, 0xec, 0xa5, 0x7c, 0x3c, 0x18, 0x3a, 0xfa, 0x63,
	0xb1, 0x66, 0xf0, 0xc3, 0x47, 0xe8, 0x21, 0x07, 0xcc, 0x3b, 0xd1, 0x2a, 0x3c, 0x5d, 0x7f, 0x1a,
	0x67, 0x6e, 0xbb, 0x15, 0x62, 0xc6, 0xca, 0xd8, 0x76, 0x88, 0xba, 0xb0, 0xfc, 0x7b, 0x9c, 0x27,
	0x2b, 0x6b, 0x4f, 0x54, 0x68, 0xf2, 0xf6, 0x54, 0xed, 0xad, 0x1c, 0xe7, 0xda, 0x60, 0x4c, 0xe8,
	0x06, 0x94, 0x4c, 0x0b, 0xdb, 0x2a, 0x4d, 0x87, 0xf3, 0xb7, 0x72, 0x9e, 0xc0, 0xce, 0x43, 0x04,
	0x0e, 0xd7, 0xb8, 0xd6, 0x28, 0x93, 0x27, 0xef, 0xef, 0x42, 0x6c, 0xa7, 0x75, 0x4b, 0xa9, 0x61,
	0xe9, 0xe8, 0x51, 0xcd, 0x4a, 0x50, 0x29, 0x52, 0x1b, 0x56, 0xbe, 0x8e, 0xd0, 0x59, 0xfe, 0xe0,
	0x47, 0x80, 0xcf, 0xe6, 0xe0, 0xa7, 0x3f, 0x0c, 0xc7, 0x3f, 0x78, 0x00, 0x44, 0xd4, 0xff, 0x8b,
	0x2a, 0x80, 0x8b, 0x9b, 0x6b, 0x09, 0x06, 0xfd, 0x7d, 0x1d, 0x07, 0x4d, 0x1d, 0xf0, 0x83, 0x07,
	0x20, 0x8a, 0x22, 0x3f, 0xae, 0xfa, 0x13, 0x10, 0x54, 0xd6, 0xe2, 0x07, 0x0f, 0xc0, 0xab, 0x23,
	0x5f, 0xfe, 0x45, 0x15, 0xcc, 0xad, 0xb9, 0xb6, 0x6e, 0x14, 0x12, 0x36, 0xb6, 0x6c, 0xec, 0x60,
	0x83, 0xac, 0x31, 0x81, 0x6d, 0xdb, 0xb4, 0x13, 0x36, 0x76, 0x2c, 0xd3, 0x70, 0x70, 0x32, 0x51,
	0x72, 0x4a, 0x6a, 0xb1, 0xb8, 0x97, 0x50, 0x13, 0x3b, 0xee, 0x6e, 0x31, 0x91, 0x37, 0x35, 0x4c,
	0xa4, 0x8c, 0x7f, 0xf0, 0x00, 0x9c, 0x1f, 0x19, 0x3b, 0xa8, 0x82, 0x51, 0xa2, 0x28, 0x09, 0x73,
	0x3b, 0xc1, 0x02, 0x0c, 0x27, 0xa1, 0x1b, 0x09, 0x35, 0x51, 0xd0, 0xcb, 0xd8, 0x20, 0xf3, 0x91,
	0xfb, 0xca, 0xfe, 0xc5, 0xa1, 0x75, 0xd8, 0x5d, 0x36, 0x14, 0x96, 0xa2, 0x3e, 0x7a, 0x45, 0xa2,
	0xe1, 0xf1, 0x00, 0xd7, 0x18, 0xa1, 0xcc, 0x9b, 0xd1, 0x04, 0xec, 0x52, 0x35, 0xcd, 0xc6, 0x8e,
	0xc3, 0x9f, 0xa5, 0x89, 0x64, 0xeb, 0x68, 0xb4, 0x61, 0x87, 0xa5, 0xf7, 0x49, 0xbc, 0xe1, 0x11,
	0xa0, 0x45, 0xd8, 0x93, 0x37, 0x4d, 0x5b, 0xd3, 0x0d, 0xd5, 0xc5, 0x0e, 0xc7, 0x92, 0xe7, 0x1a,
	0xe6, 0x40, 0x47, 0x5d, 0xaa, 0x93, 0xc9, 0x7e, 0x1e, 0xf4, 0x2d, 0x78, 0x86, 0x3e, 0x95, 0xdc,
	0x35, 0x35, 0x7d, 0x5b, 0xcf, 0xd7, 0x4d, 0x21, 0xb5, 0x76, 0x1c, 0x48, 0x1e, 0x62, 0x0f, 0xb3,
	0x11, 0x32, 0x3d, 0xf9, 0x34, 0x11, 0xf2, 0x96, 0x4f, 0x46, 0x8d, 0x00, 0xbd, 0xca, 0x2b, 0x6c,
	0xae, 0xc9, 0x5e, 0x86, 0xf2, 0x98, 0x5b, 0xb7, 0xa4, 0xb3, 0x74, 0x7d, 0xf5, 0x4c, 0xbd, 0x8c,
	0x08, 0xc1, 0xba, 0xb9, 0x46, 0xfe, 0xa5, 0x54, 0x2b, 0x16, 0xfa, 0xff, 0x50, 0xa0, 0x8e, 0xc2,
	0xd8, 0x36, 0x39, 0x98, 0x9c, 0x3d, 0xaa, 0x99, 0x0c, 0xc6, 0xc2, 0x32, 0xf1, 0x2c, 0xa4, 0x09,
	0xdd, 0x80, 0xa7, 0x8a, 0x66, 0xc1, 0x51, 0x1c, 0xd7, 0xc6, 0xea, 0x2e, 0xb9, 0x44, 0x3c, 0x9b,
	0xad, 0xf1, 0xf2, 0x79, 0x3b, 0x64, 0x3f, 0x44, 0xd8, 0xd6, 0x3c, 0xae, 0xab, 0x9c, 0x09, 0x5d,
	0x87, 0xbd, 0x45, 0xb3, 0xa0, 0x78, 0xe1, 0xcb, 0xd1, 0x0b, 0x20, 0xcb, 0x1d, 0x72, 0x4f, 0xd1,
	0x2c, 0xc8, 0x9c, 0x11, 0xbd, 0x0e, 0x43, 0x4e, 0x85, 0x97, 0x35, 0x2e, 0xb4, 0x64, 0xdf, 0x68,
	0x30, 0x09, 0xcc, 0xe8, 0xfc, 0x92, 0x1c, 0x41, 0xc8, 0xa9, 0xa0, 0xd7, 0x60, 0xc8, 0x74, 0x78,
	0x5d, 0x7c, 0xbc, 0xf5, 0xf8, 0x41, 0x13, 0xe0, 0xe7, 0x37, 0x1d, 0x74, 0x17, 0x70, 0x87, 0x34,
	0x4a, 0xaf, 0xff, 0xc2, 0x53, 0x5f, 0xff, 0x9a, 0x73, 0xc9, 0x66, 0x68, 0xf4, 0xfc, 0x21, 0x8b,
	0x9e, 0xa5, 0xdf, 0xa7, 0x0a, 0xfc, 0x21, 0x08, 0x89, 0xe3, 0x34, 0x8e, 0xfe, 0x90, 0xc4, 0xd1,
	0x76, 0x58, 0xfa, 0x1c, 0xf8, 0x93, 0x8a, 0xcc, 0x85, 0xfd, 0x2e, 0x1c, 0xa0, 0xb5, 0x6f, 0x5a,
	0x08, 0xf4, 0x2a, 0x29, 0x03, 0x74, 0x42, 0x17, 0x5a, 0xe9, 0x36, 0xad, 0xed, 0x3b, 0x3b, 0x1b,
	0x2b, 0xab, 0xac, 0x76, 0x48, 0x0b, 0x2a, 0xd9, 0x33, 0x64, 0x9c, 0xde, 0x7b, 0xa0, 0x7b, 0xa2,
	0x8b, 0xc4, 0xeb, 0x99, 0x40, 0xc4, 0xde, 0x5f, 0xd6, 0x2d, 0x1f, 0x31, 0xd1, 0x08, 0x4d, 0xb7,
	0x71, 0xde, 0xf5, 0x5e, 0x06, 0xd4, 0x35, 0x22, 0x7e, 0xf8, 0x43, 0x18, 0xc6, 0xc6, 0x6b, 0xe8,
	0x35, 0x8d, 0xf8, 0x36, 0x1c, 0x6e, 0x90, 0xc7, 0xca, 0x1c, 0x9a, 0x24, 0x51, 0x71, 0xc9, 0x96,
	0x1b, 0x7b, 0xd5, 0x2f, 0xab, 0xd1, 0xa9, 0x2c, 0x03, 0x39, 0x1e, 0x18, 0xec, 0x1a, 0x93, 0x88,
	0x76, 0x60, 0xdc, 0xc3, 0x2e, 0x79, 0x5f, 0x29, 0x5f, 0x9a, 0x3a, 0xe4, 0xcd, 0xcd, 0x2a, 0x63,
	0x68, 0x3f, 0xd4, 0xa0, 0x15, 0xa0, 0x60, 0x8f, 0x03, 0xde, 0x85, 0x92, 0x86, 0xb7, 0xd5, 0x52,
	0xd1, 0x55, 0xb6, 0x8a, 0x66, 0xfe, 0x26, 0xd6, 0x3c, 0xc8, 0xef, 0x1c, 0x56, 0xe5, 0xc9, 0x46,
	0x1f, 0x7a, 0x85, 0xb8, 0x61, 0xce, 0x9f, 0x65, 0xec, 0x5e, 0x18, 0x80, 0xae, 0x42, 0x44, 0x25,
	0x2a, 0x6a, 0xb1, 0x58, 0x97, 0xf9, 0xca, 0xa1, 0x99, 0x1e, 0x91, 0x72, 0x2c, 0x16, 0x8b, 0x35,
	0x29, 0x0a, 0x14, 0x9b, 0xe6, 0x75, 0xbe, 0xe5, 0x7e, 0xd3, 0xdf, 0x38, 0xa4, 0x1a, 0x66, 0xd1,
	0xf4, 0x88, 0x27, 0xb6, 0xd5, 0x30, 0xcd, 0x12, 0x1c, 0x31, 0xb7, 0xb7, 0x8b, 0xba, 0x81, 0x15,
	0xa7, 0x64, 0x97, 0xf5, 0xb2, 0xba, 0xa5, 0x17, 0x75, 0x77, 0x8f, 0x58, 0x4f, 0x2c, 0xbd, 0x7c,
	0x88, 0x0b, 0x78, 0x9b, 0xb1, 0xad, 0xf9, 0xb9, 0xde, 0xf2, 0x8a, 0xaa, 0xec, 0xc1, 0x86, 0x64,
	0xb6, 0xa1, 0x41, 0xdf, 0x81, 0x2f, 0xf8, 0xaa, 0xbb, 0x5e, 0x2e, 0x89, 0x82, 0x04, 0x3a, 0xf0,
	0x25, 0x3a, 0x70, 0xeb, 0x4c, 0xf4, 0x6a, 0x9d, 0xf1, 0x5a, 0x9d, 0xaf, 0x3e, 0x34, 0xbd, 0xfa,
	0x23, 0x56, 0x5b, 0x2a, 0x74, 0x01, 0x8a, 0x4e, 0xa9, 0x50, 0xc0, 0x0e, 0x41, 0x89, 0x2a, 0x7d,
	0x00, 0x23, 0xa5, 0x58, 0xdc, 0x5d, 0x6b, 0x5f, 0xa4, 0xcd, 0x04, 0xbf, 0x50, 0x9f, 0xab, 0x68,
	0xd8, 0xc9, 0xdb, 0x3a, 0xfd, 0xfd, 0x85, 0x74, 0x99, 0xe1, 0x17, 0xda, 0x71, 0xb5, 0xde, 0x8e,
	0x5e, 0x87, 0x3d, 0xd4, 0x1d, 0xd0, 0x0e, 0x47, 0x9a, 0xa6, 0xf7, 0x7b, 0xb4, 0xed, 0x0b, 0xb1,
	0x6b, 0x84, 0x4c, 0x86, 0x8e, 0xf7, 0xd1, 0x41, 0xef, 0x40, 0x91, 0xff, 0x0a, 0xc4, 0x83, 0x5c,
	0x58, 0x9a, 0xa1, 0xc9, 0x94, 0x89, 0x96, 0x52, 0x98, 0x96, 0x6f, 0xd4, 0x58, 0x68, 0x04, 0x2e,
	0xc7, 0xca, 0xc1, 0x06, 0xb4, 0x04, 0x21, 0xaf, 0x1a, 0x6a, 0x86, 0x23, 0xcd, 0xd2, 0xad, 0x6d,
	0x3d, 0xad, 0x25, 0x4a, 0x76, 0xf5, 0xc6, 0x5a, 0x36, 0x42, 0x14, 0x5c, 0xee, 0x66, 0x7c, 0x57,
	0x0d, 0x07, 0xdd, 0x84, 0xd2, 0xcd, 0xd2, 0x16, 0x2d, 0x35, 0x61, 0x47, 0x29, 0x59, 0x05, 0x5b,
	0xd5, 0xb0, 0xa2, 0xd9, 0xaa, 0x6e, 0x48, 0x73, 0x54, 0xe4, 0xc5, 0x96, 0x22, 0xbf, 0x52, 0x63,
	0x7a, 0x87, 0xf1, 0x5c, 0x25, 0x2c, 0xfc, 0x94, 0x86, 0x6f, 0xb6, 0xec, 0x45, 0x16, 0xec, 0x62,
	0x3e, 0xd5, 0x91, 0xfe, 0xad, 0x8b, 0x6e, 0xe3, 0xfc, 0x91, 0x3c, 0x64, 0x8b, 0xec, 0x59, 0xf6,
	0x0c, 0x77, 0xc6, 0xb5, 0x94, 0xd7, 0x1b, 0x3e, 0xab, 0xe9, 0x0d, 0x83, 0x36, 0xe1, 0x60, 0x83,
	0x79, 0xa3, 0xee, 0xf9, 0xe7, 0x5d, 0x87, 0x14, 0x56, 0x03, 0xc6, 0x8d, 0xb8, 0x61, 0x79, 0x40,
	0x6b, 0x6c, 0x42, 0xdf, 0x82, 0xdd, 0xee, 0x36, 0xb7, 0xfc, 0xd2, 0xbf, 0x77, 0x1d, 0xf9, 0x21,
	0xc1, 0xe8, 0xfd, 0x3b, 0x71, 0xea, 0x17, 0x89, 0x16, 0xfb, 0x10, 0x09, 0x5f, 0x8d, 0x2c, 0xb8,
	0xdb, 0xcc, 0xdc, 0xa3, 0x6f, 0xc2, 0x3e, 0xfa, 0xeb, 0x20, 0x56, 0x09, 0x54, 0x8b, 0xd2, 0xa7,
	0x47, 0x1f, 0x25, 0x7e, 0xff, 0x4e, 0x90, 0x99, 0xca, 0xee, 0x25, 0x4d, 0x2b, 0xbc, 0x05, 0xbd,
	0x0a, 0xa9, 0x8e, 0x72, 0x7d, 0xfc, 0x45, 0x17, 0x55, 0xc8, 0xb3, 0xad, 0xdc, 0x96, 0xf7, 0xee,
	0x11, 0xcb, 0xdd, 0x8e, 0xf7, 0x71, 0xa4, 0x04, 0x51, 0x73, 0x04, 0xdd, 0x02, 0xa8, 0xad, 0xf8,
	0x81, 0xda, 0x51, 0xab, 0x50, 0xc1, 0xd2, 0x99, 0x0f, 0xdd, 0x1d, 0x1b, 0x16, 0x2e, 0xfc, 0x08,
	0x3c, 0xaa, 0x82, 0x7f, 0x04, 0x10, 0xc1, 0x3e, 0x12, 0xb5, 0x7b, 0xd9, 0x05, 0x07, 0x81, 0xb4,
	0x57, 0xc9, 0xf2, 0x43, 0x2d, 0x90, 0x81, 0x09, 0xfe, 0xfc, 0x8c, 0x27, 0xcb, 0x13, 0xaa, 0xa1,
	0x25, 0x6a, 0x58, 0x29, 0x3c, 0x97, 0x9c, 0x82, 0x23, 0x30, 0xce, 0xfd, 0x53, 0xf0, 0x6d, 0x5a,
	0x28, 0x7d, 0x05, 0x9e, 0x86, 0xa2, 0x17, 0xfa, 0x24, 0x3c, 0xf8, 0xd2, 0x99, 0x9e, 0x49, 0xa6,
	0x67, 0xe1, 0x18, 0x14, 0x16, 0xb5, 0x32, 0xcd, 0x78, 0xa3, 0xe1, 0xa9, 0xc9, 0x64, 0x3a, 0x93,
	0x9c, 0x99, 0x49, 0x5e, 0x49, 0x4e, 0x65, 0x92, 0x53, 0xf3, 0xc9, 0xe9, 0x99, 0xe4, 0xcc, 0x34,
	0x94, 0x20, 0x5c, 0x2a, 0x9a, 0x25, 0x2d, 0x41, 0xb5, 0x0d, 0xa6, 0xd3, 0xc9, 0xf4, 0x5c, 0x32,
	0x3d, 0x39, 0x99, 0xce, 0x5e, 0x80, 0x71, 0x1a, 0x13, 0xd6, 0xd2, 0x53, 0xbe, 0x9c, 0x77, 0xdf,
	0x7e, 0x15, 0xf4, 0xd2, 0x57, 0x60, 0xf4, 0xc9, 0xd8, 0x25, 0x38, 0xd4, 0xa0, 0xfd, 0xbe, 0x17,
	0x66, 0xf1, 0xfd, 0x2a, 0x18, 0x3c, 0xa8, 0x02, 0x21, 0x33, 0x99, 0x9c, 0x49, 0x27, 0x33, 0xd3,
	0xd9, 0x24, 0x3c, 0xd5, 0xe8, 0x95, 0xfc, 0xc2, 0x5f, 0xd9, 0xaf, 0x82, 0x04, 0xad, 0x30, 0x5f,
	0x61, 0xaf, 0x95, 0xd3, 0x62, 0x26, 0x17, 0x11, 0x32, 0xe2, 0x54, 0x2e, 0x22, 0x4c, 0x8a, 0xe9,
	0x5c, 0x44, 0xe8, 0x15, 0xfb, 0x1a, 0x5e, 0x28, 0xb3, 0xb7, 0xc9, 0xc3, 0xe2, 0xa9, 0x5c, 0x44,
	0x38, 0x25, 0x4a, 0xfe, 0x17, 0xca, 0xb9, 0x88, 0xf0, 0xa2, 0x78, 0x3e, 0x17, 0x11, 0x5e, 0x12,
	0x5f, 0x1e, 0xfb, 0xbe, 0x08, 0xfb, 0x69, 0xb2, 0x02, 0xd7, 0x50, 0xfb, 0xbb, 0x27, 0x86, 0xda,
	0x1b, 0xf1, 0xfa, 0xb7, 0x4e, 0x1a, 0xaf, 0x37, 0x21, 0xf5, 0x1b, 0x27, 0x81, 0xb8, 0x7c, 0x58,
	0x6b, 0xf3, 0xe4, 0x90, 0x7f, 0x10, 0xf3, 0x9f, 0x00, 0x30, 0x3b, 0x69, 0x90, 0xf2, 0xee, 0x71,
	0x41, 0x4a, 0x36, 0x76, 0xff, 0x4e, 0x80, 0xf5, 0x0b, 0x87, 0x5a, 0x6e, 0x3c, 0x2d, 0x68, 0x09,
	0x5e, 0x89, 0xa6, 0x1c, 0xda, 0xea, 0xf1, 0xe2, 0xdc, 0x65, 0x70, 0x82, 0xf1, 0x2d, 0x68, 0x11,
	0xdf, 0x7e, 0xed, 0x64, 0xe2, 0xdb, 0x65, 0xd0, 0x1c, 0xd9, 0x1e, 0x13, 0x00, 0x85, 0xda, 0x01,
	0x20, 0xed, 0x24, 0x01, 0xd0, 0x72, 0xa8, 0x0d, 0xf4, 0xd9, 0x3a, 0x41, 0xe8, 0xb3, 0x1c, 0x6a,
	0x0d, 0x7a, 0xcc, 0x67, 0x12, 0xf3, 0x1f, 0x12, 0xed, 0x97, 0x9e, 0x59, 0xb4, 0x7f, 0x68, 0x9c,
	0xff, 0x1b, 0x17, 0xf7, 0x1e, 0x3f, 0x68, 0x19, 0xf8, 0xe8, 0xb5, 0x86, 0x5c, 0x76, 0x76, 0xb2,
	0x8d, 0xfb, 0x97, 0xee, 0x3e, 0x06, 0x2d, 0x7b, 0xb2, 0xb3, 0xed, 0xdd, 0xfa, 0x99, 0xbb, 0x8f,
	0x41, 0xbb, 0xce, 0x6c, 0xa6, 0x5d, 0xf4, 0x70, 0xfa, 0xee, 0x63, 0xd0, 0xba, 0xab, 0x16, 0x08,
	0xf8, 0x43, 0x03, 0xf6, 0x06, 0x9d, 0x55, 0x5c, 0x58, 0x61, 0x9c, 0x85, 0x09, 0xec, 0x07, 0x4e,
	0xe7, 0xc4, 0x44, 0x2d, 0x64, 0xf0, 0x87, 0x06, 0xed, 0xc2, 0x87, 0x7a, 0xc8, 0xf0, 0xf7, 0x31,
	0x18, 0xe3, 0x0f, 0xd5, 0x6b, 0x31, 0x83, 0xd2, 0x14, 0x33, 0x30, 0x63, 0x3d, 0xff, 0x54, 0x31,
	0x83, 0xef, 0xf9, 0xfb, 0xf3, 0xd0, 0xe1, 0x79, 0xe8, 0x40, 0x42, 0x87, 0x93, 0xce, 0xbb, 0x9d,
	0xac, 0xdb, 0x01, 0xbf, 0x0e, 0xb7, 0xd3, 0x26, 0xd7, 0x76, 0xdc, 0x18, 0xe4, 0x59, 0xe7, 0xd8,
	0x4e, 0x2a, 0x06, 0x69, 0x91, 0x5d, 0x7b, 0xee, 0x69, 0xbf, 0xa0, 0x9e, 0x76, 0xe1, 0xcf, 0x40,
	0x93, 0xc7, 0x7c, 0x54, 0x05, 0x77, 0x01, 0x1c, 0x6c, 0x84, 0xfd, 0xa1, 0xf4, 0xec, 0xb1, 0x71,
	0x7f, 0x1c, 0xf6, 0xb3, 0x9b, 0xe8, 0xc1, 0x7e, 0x8a, 0xf8, 0xcf, 0xfa, 0x60, 0xfd, 0x00, 0xc3,
	0xf4, 0x3e, 0x44, 0x7f, 0x0c, 0xc7, 0x7d, 0x0c, 0x07, 0x7c, 0x5c, 0x67, 0x5f, 0x7b, 0xb9, 0x76,
	0x74, 0xf7, 0xcd, 0x5c, 0x36, 0x73, 0xe2, 0x4f, 0x87, 0xf5, 0xbf, 0x77, 0x1a, 0xf6, 0x5c, 0xc7,
	0xee, 0x73, 0xa0, 0xff, 0xeb, 0xf4, 0xd6, 0x0b, 0x4f, 0x2c, 0xee, 0xb7, 0x2f, 0xe3, 0xcf, 0x3f,
	0xa9, 0x8c, 0xdf, 0xb6, 0x60, 0x7f, 0xbf, 0x6d, 0xc1, 0xfe, 0x8d, 0x23, 0x54, 0xec, 0xea, 0x3a,
	0xd2, 0xaa, 0x5a, 0xff, 0x0f, 0xbf, 0x6d, 0x65, 0xfa, 0xb5, 0x93, 0x4b, 0x8f, 0xd7, 0x33, 0xe0,
	0x27, 0x10, 0xa5, 0x7d, 0xfd, 0x57, 0xac, 0xbc, 0x1f, 0x56, 0x73, 0xff, 0x0d, 0x28, 0x9a, 0x3f,
	0xbb, 0xa0, 0x72, 0xfd, 0x24, 0xea, 0xc7, 0x4d, 0x25, 0xe2, 0xaf, 0x04, 0x92, 0x4c, 0x73, 0x4f,
	0x77, 0xcf, 0x1a, 0x33, 0x4c, 0xbf, 0x5a, 0x95, 0xe0, 0x79, 0xd8, 0xdc, 0x36, 0x6c, 0x7e, 0x66,
	0x95, 0xa9, 0xe7, 0xf1, 0xf8, 0x6f, 0x6d, 0x3c, 0xfe, 0xbc, 0xc2, 0xfd, 0x45, 0xcf, 0xf4, 0xfd,
	0xa6, 0x55, 0x45, 0xe3, 0x4d, 0x70, 0xe9, 0xd3, 0xd7, 0xc0, 0x17, 0x1e, 0xaa, 0x34, 0x83, 0x14,
	0x06, 0x4c, 0x18, 0x18, 0xf1, 0xc3, 0x13, 0xff, 0x5f, 0xbb, 0x38, 0x22, 0x3c, 0x99, 0x48, 0xc2,
	0xbe, 0xc0, 0x2f, 0x58, 0x50, 0x17, 0x0c, 0x2f, 0xbf, 0x93, 0x15, 0x3b, 0x50, 0x2f, 0x14, 0xd6,
	0xae, 0xc9, 0x1b, 0x2b, 0x4b, 0xd7, 0xd6, 0x44, 0x30, 0x42, 0x34, 0xad, 0x23, 0xfb, 0x27, 0x60,
	0xff, 0x67, 0xa3, 0x1d, 0x1f, 0xff, 0x6c, 0xb4, 0xe3, 0x97, 0x3f, 0x1b, 0x05, 0xef, 0x1f, 0x8c,
	0x82, 0xbf, 0x3e, 0x18, 0x05, 0x3f, 0x3e, 0x18, 0x05, 0xfb, 0x07, 0xa3, 0xe0, 0xe3, 0x83, 0x51,
	0xf0, 0xd3, 0x83, 0x51, 0xf0, 0xe9, 0xc1, 0x68, 0xc7, 0x2f, 0x0f, 0x46, 0xc1, 0x77, 0x3f, 0x19,
	0xed, 0x78, 0xf8, 0xc9, 0x28, 0xd8, 0xff, 0x64, 0xb4, 0xe3, 0xe3, 0x4f, 0x46, 0x3b, 0xbe, 0xbe,
	0x51, 0x30, 0xad, 0x9b, 0x85, 0x94, 0x17, 0x79, 0xa7, 0x4a, 0xce, 0xe5, 0xda, 0xf3, 0x80, 0x4b,
	0x96, 0x6d, 0x96, 0x75, 0x0d, 0xdb, 0x97, 0xbc, 0xee, 0xcb, 0xd6, 0x56, 0xc1, 0xbc, 0x8c, 0x6f,
	0xb9, 0xde, 0xdf, 0x25, 0x6d, 0xf7, 0x17, 0x5d, 0xb7, 0xa2, 0x34, 0x0c, 0x9b, 0xfa, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x1c, 0xb3, 0xb9, 0xc2, 0xfc, 0x55, 0x00, 0x00,
}

func (x VPNTunnelType) String() string {
	s, ok := VPNTunnelType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TGWAssignedASNType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TGWAssignedASNType)
	if !ok {
		that2, ok := that.(TGWAssignedASNType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TgwAsn != that1.TgwAsn {
		return false
	}
	if this.VolterraSiteAsn != that1.VolterraSiteAsn {
		return false
	}
	return true
}
func (this *ExistingTGWType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExistingTGWType)
	if !ok {
		that2, ok := that.(ExistingTGWType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TgwId != that1.TgwId {
		return false
	}
	if this.TgwAsn != that1.TgwAsn {
		return false
	}
	if this.VolterraSiteAsn != that1.VolterraSiteAsn {
		return false
	}
	return true
}
func (this *TGWParamsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TGWParamsType)
	if !ok {
		that2, ok := that.(TGWParamsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AsnChoice == nil {
		if this.AsnChoice != nil {
			return false
		}
	} else if this.AsnChoice == nil {
		return false
	} else if !this.AsnChoice.Equal(that1.AsnChoice) {
		return false
	}
	return true
}
func (this *TGWParamsType_SystemGenerated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TGWParamsType_SystemGenerated)
	if !ok {
		that2, ok := that.(TGWParamsType_SystemGenerated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SystemGenerated.Equal(that1.SystemGenerated) {
		return false
	}
	return true
}
func (this *TGWParamsType_UserAssigned) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TGWParamsType_UserAssigned)
	if !ok {
		that2, ok := that.(TGWParamsType_UserAssigned)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserAssigned.Equal(that1.UserAssigned) {
		return false
	}
	return true
}
func (this *ServicesVPCType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType)
	if !ok {
		that2, ok := that.(ServicesVPCType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AwsRegion != that1.AwsRegion {
		return false
	}
	if that1.ServiceVpcChoice == nil {
		if this.ServiceVpcChoice != nil {
			return false
		}
	} else if this.ServiceVpcChoice == nil {
		return false
	} else if !this.ServiceVpcChoice.Equal(that1.ServiceVpcChoice) {
		return false
	}
	if that1.TgwChoice == nil {
		if this.TgwChoice != nil {
			return false
		}
	} else if this.TgwChoice == nil {
		return false
	} else if !this.TgwChoice.Equal(that1.TgwChoice) {
		return false
	}
	if this.AwsCertifiedHw != that1.AwsCertifiedHw {
		return false
	}
	if this.InstanceType != that1.InstanceType {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if len(this.AzNodes) != len(that1.AzNodes) {
		return false
	}
	for i := range this.AzNodes {
		if !this.AzNodes[i].Equal(that1.AzNodes[i]) {
			return false
		}
	}
	if that1.WorkerNodes == nil {
		if this.WorkerNodes != nil {
			return false
		}
	} else if this.WorkerNodes == nil {
		return false
	} else if !this.WorkerNodes.Equal(that1.WorkerNodes) {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	if that1.InternetVipChoice == nil {
		if this.InternetVipChoice != nil {
			return false
		}
	} else if this.InternetVipChoice == nil {
		return false
	} else if !this.InternetVipChoice.Equal(that1.InternetVipChoice) {
		return false
	}
	if that1.SecurityGroupChoice == nil {
		if this.SecurityGroupChoice != nil {
			return false
		}
	} else if this.SecurityGroupChoice == nil {
		return false
	} else if !this.SecurityGroupChoice.Equal(that1.SecurityGroupChoice) {
		return false
	}
	return true
}
func (this *ServicesVPCType_NewVpc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_NewVpc)
	if !ok {
		that2, ok := that.(ServicesVPCType_NewVpc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NewVpc.Equal(that1.NewVpc) {
		return false
	}
	return true
}
func (this *ServicesVPCType_VpcId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_VpcId)
	if !ok {
		that2, ok := that.(ServicesVPCType_VpcId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	return true
}
func (this *ServicesVPCType_NewTgw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_NewTgw)
	if !ok {
		that2, ok := that.(ServicesVPCType_NewTgw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NewTgw.Equal(that1.NewTgw) {
		return false
	}
	return true
}
func (this *ServicesVPCType_ExistingTgw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_ExistingTgw)
	if !ok {
		that2, ok := that.(ServicesVPCType_ExistingTgw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExistingTgw.Equal(that1.ExistingTgw) {
		return false
	}
	return true
}
func (this *ServicesVPCType_NodesPerAz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_NodesPerAz)
	if !ok {
		that2, ok := that.(ServicesVPCType_NodesPerAz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	return true
}
func (this *ServicesVPCType_TotalNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_TotalNodes)
	if !ok {
		that2, ok := that.(ServicesVPCType_TotalNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalNodes != that1.TotalNodes {
		return false
	}
	return true
}
func (this *ServicesVPCType_NoWorkerNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_NoWorkerNodes)
	if !ok {
		that2, ok := that.(ServicesVPCType_NoWorkerNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoWorkerNodes.Equal(that1.NoWorkerNodes) {
		return false
	}
	return true
}
func (this *ServicesVPCType_AwsCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_AwsCred)
	if !ok {
		that2, ok := that.(ServicesVPCType_AwsCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsCred.Equal(that1.AwsCred) {
		return false
	}
	return true
}
func (this *ServicesVPCType_Assisted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_Assisted)
	if !ok {
		that2, ok := that.(ServicesVPCType_Assisted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Assisted.Equal(that1.Assisted) {
		return false
	}
	return true
}
func (this *ServicesVPCType_DisableInternetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_DisableInternetVip)
	if !ok {
		that2, ok := that.(ServicesVPCType_DisableInternetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableInternetVip.Equal(that1.DisableInternetVip) {
		return false
	}
	return true
}
func (this *ServicesVPCType_EnableInternetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_EnableInternetVip)
	if !ok {
		that2, ok := that.(ServicesVPCType_EnableInternetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableInternetVip.Equal(that1.EnableInternetVip) {
		return false
	}
	return true
}
func (this *ServicesVPCType_F5XcSecurityGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_F5XcSecurityGroup)
	if !ok {
		that2, ok := that.(ServicesVPCType_F5XcSecurityGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5XcSecurityGroup.Equal(that1.F5XcSecurityGroup) {
		return false
	}
	return true
}
func (this *ServicesVPCType_CustomSecurityGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCType_CustomSecurityGroup)
	if !ok {
		that2, ok := that.(ServicesVPCType_CustomSecurityGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomSecurityGroup.Equal(that1.CustomSecurityGroup) {
		return false
	}
	return true
}
func (this *VnConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration)
	if !ok {
		that2, ok := that.(VnConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.InsideStaticRouteChoice == nil {
		if this.InsideStaticRouteChoice != nil {
			return false
		}
	} else if this.InsideStaticRouteChoice == nil {
		return false
	} else if !this.InsideStaticRouteChoice.Equal(that1.InsideStaticRouteChoice) {
		return false
	}
	if that1.OutsideStaticRouteChoice == nil {
		if this.OutsideStaticRouteChoice != nil {
			return false
		}
	} else if this.OutsideStaticRouteChoice == nil {
		return false
	} else if !this.OutsideStaticRouteChoice.Equal(that1.OutsideStaticRouteChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if that1.DcClusterGroupChoice == nil {
		if this.DcClusterGroupChoice != nil {
			return false
		}
	} else if this.DcClusterGroupChoice == nil {
		return false
	} else if !this.DcClusterGroupChoice.Equal(that1.DcClusterGroupChoice) {
		return false
	}
	if that1.SiteMeshGroupChoice == nil {
		if this.SiteMeshGroupChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupChoice == nil {
		return false
	} else if !this.SiteMeshGroupChoice.Equal(that1.SiteMeshGroupChoice) {
		return false
	}
	if !this.AllowedVipPort.Equal(that1.AllowedVipPort) {
		return false
	}
	if !this.AllowedVipPortSli.Equal(that1.AllowedVipPortSli) {
		return false
	}
	return true
}
func (this *VnConfiguration_NoInsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_NoInsideStaticRoutes)
	if !ok {
		that2, ok := that.(VnConfiguration_NoInsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoInsideStaticRoutes.Equal(that1.NoInsideStaticRoutes) {
		return false
	}
	return true
}
func (this *VnConfiguration_InsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_InsideStaticRoutes)
	if !ok {
		that2, ok := that.(VnConfiguration_InsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideStaticRoutes.Equal(that1.InsideStaticRoutes) {
		return false
	}
	return true
}
func (this *VnConfiguration_NoOutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_NoOutsideStaticRoutes)
	if !ok {
		that2, ok := that.(VnConfiguration_NoOutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoOutsideStaticRoutes.Equal(that1.NoOutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *VnConfiguration_OutsideStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_OutsideStaticRoutes)
	if !ok {
		that2, ok := that.(VnConfiguration_OutsideStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OutsideStaticRoutes.Equal(that1.OutsideStaticRoutes) {
		return false
	}
	return true
}
func (this *VnConfiguration_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(VnConfiguration_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *VnConfiguration_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_GlobalNetworkList)
	if !ok {
		that2, ok := that.(VnConfiguration_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *VnConfiguration_NoDcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_NoDcClusterGroup)
	if !ok {
		that2, ok := that.(VnConfiguration_NoDcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoDcClusterGroup.Equal(that1.NoDcClusterGroup) {
		return false
	}
	return true
}
func (this *VnConfiguration_DcClusterGroupOutsideVn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_DcClusterGroupOutsideVn)
	if !ok {
		that2, ok := that.(VnConfiguration_DcClusterGroupOutsideVn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupOutsideVn.Equal(that1.DcClusterGroupOutsideVn) {
		return false
	}
	return true
}
func (this *VnConfiguration_DcClusterGroupInsideVn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_DcClusterGroupInsideVn)
	if !ok {
		that2, ok := that.(VnConfiguration_DcClusterGroupInsideVn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupInsideVn.Equal(that1.DcClusterGroupInsideVn) {
		return false
	}
	return true
}
func (this *VnConfiguration_SmConnectionPublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_SmConnectionPublicIp)
	if !ok {
		that2, ok := that.(VnConfiguration_SmConnectionPublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPublicIp.Equal(that1.SmConnectionPublicIp) {
		return false
	}
	return true
}
func (this *VnConfiguration_SmConnectionPvtIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_SmConnectionPvtIp)
	if !ok {
		that2, ok := that.(VnConfiguration_SmConnectionPvtIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPvtIp.Equal(that1.SmConnectionPvtIp) {
		return false
	}
	return true
}
func (this *ServicesVPCReplaceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCReplaceType)
	if !ok {
		that2, ok := that.(ServicesVPCReplaceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AwsRegion != that1.AwsRegion {
		return false
	}
	if that1.ServiceVpcChoice == nil {
		if this.ServiceVpcChoice != nil {
			return false
		}
	} else if this.ServiceVpcChoice == nil {
		return false
	} else if !this.ServiceVpcChoice.Equal(that1.ServiceVpcChoice) {
		return false
	}
	if that1.TgwChoice == nil {
		if this.TgwChoice != nil {
			return false
		}
	} else if this.TgwChoice == nil {
		return false
	} else if !this.TgwChoice.Equal(that1.TgwChoice) {
		return false
	}
	if this.InstanceType != that1.InstanceType {
		return false
	}
	if len(this.AzNodes) != len(that1.AzNodes) {
		return false
	}
	for i := range this.AzNodes {
		if !this.AzNodes[i].Equal(that1.AzNodes[i]) {
			return false
		}
	}
	if that1.Deployment == nil {
		if this.Deployment != nil {
			return false
		}
	} else if this.Deployment == nil {
		return false
	} else if !this.Deployment.Equal(that1.Deployment) {
		return false
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if this.DiskSize != that1.DiskSize {
		return false
	}
	if that1.WorkerNodes == nil {
		if this.WorkerNodes != nil {
			return false
		}
	} else if this.WorkerNodes == nil {
		return false
	} else if !this.WorkerNodes.Equal(that1.WorkerNodes) {
		return false
	}
	if that1.InternetVipChoice == nil {
		if this.InternetVipChoice != nil {
			return false
		}
	} else if this.InternetVipChoice == nil {
		return false
	} else if !this.InternetVipChoice.Equal(that1.InternetVipChoice) {
		return false
	}
	if that1.SecurityGroupChoice == nil {
		if this.SecurityGroupChoice != nil {
			return false
		}
	} else if this.SecurityGroupChoice == nil {
		return false
	} else if !this.SecurityGroupChoice.Equal(that1.SecurityGroupChoice) {
		return false
	}
	return true
}
func (this *ServicesVPCReplaceType_NewVpc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCReplaceType_NewVpc)
	if !ok {
		that2, ok := that.(ServicesVPCReplaceType_NewVpc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NewVpc.Equal(that1.NewVpc) {
		return false
	}
	return true
}
func (this *ServicesVPCReplaceType_VpcId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCReplaceType_VpcId)
	if !ok {
		that2, ok := that.(ServicesVPCReplaceType_VpcId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	return true
}
func (this *ServicesVPCReplaceType_NewTgw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCReplaceType_NewTgw)
	if !ok {
		that2, ok := that.(ServicesVPCReplaceType_NewTgw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NewTgw.Equal(that1.NewTgw) {
		return false
	}
	return true
}
func (this *ServicesVPCReplaceType_ExistingTgw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCReplaceType_ExistingTgw)
	if !ok {
		that2, ok := that.(ServicesVPCReplaceType_ExistingTgw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExistingTgw.Equal(that1.ExistingTgw) {
		return false
	}
	return true
}
func (this *ServicesVPCReplaceType_AwsCred) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCReplaceType_AwsCred)
	if !ok {
		that2, ok := that.(ServicesVPCReplaceType_AwsCred)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsCred.Equal(that1.AwsCred) {
		return false
	}
	return true
}
func (this *ServicesVPCReplaceType_Assisted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCReplaceType_Assisted)
	if !ok {
		that2, ok := that.(ServicesVPCReplaceType_Assisted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Assisted.Equal(that1.Assisted) {
		return false
	}
	return true
}
func (this *ServicesVPCReplaceType_NodesPerAz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCReplaceType_NodesPerAz)
	if !ok {
		that2, ok := that.(ServicesVPCReplaceType_NodesPerAz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodesPerAz != that1.NodesPerAz {
		return false
	}
	return true
}
func (this *ServicesVPCReplaceType_TotalNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCReplaceType_TotalNodes)
	if !ok {
		that2, ok := that.(ServicesVPCReplaceType_TotalNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalNodes != that1.TotalNodes {
		return false
	}
	return true
}
func (this *ServicesVPCReplaceType_NoWorkerNodes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCReplaceType_NoWorkerNodes)
	if !ok {
		that2, ok := that.(ServicesVPCReplaceType_NoWorkerNodes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoWorkerNodes.Equal(that1.NoWorkerNodes) {
		return false
	}
	return true
}
func (this *ServicesVPCReplaceType_DisableInternetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCReplaceType_DisableInternetVip)
	if !ok {
		that2, ok := that.(ServicesVPCReplaceType_DisableInternetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableInternetVip.Equal(that1.DisableInternetVip) {
		return false
	}
	return true
}
func (this *ServicesVPCReplaceType_EnableInternetVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCReplaceType_EnableInternetVip)
	if !ok {
		that2, ok := that.(ServicesVPCReplaceType_EnableInternetVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableInternetVip.Equal(that1.EnableInternetVip) {
		return false
	}
	return true
}
func (this *ServicesVPCReplaceType_F5XcSecurityGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCReplaceType_F5XcSecurityGroup)
	if !ok {
		that2, ok := that.(ServicesVPCReplaceType_F5XcSecurityGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.F5XcSecurityGroup.Equal(that1.F5XcSecurityGroup) {
		return false
	}
	return true
}
func (this *ServicesVPCReplaceType_CustomSecurityGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesVPCReplaceType_CustomSecurityGroup)
	if !ok {
		that2, ok := that.(ServicesVPCReplaceType_CustomSecurityGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomSecurityGroup.Equal(that1.CustomSecurityGroup) {
		return false
	}
	return true
}
func (this *VPCAttachmentType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VPCAttachmentType)
	if !ok {
		that2, ok := that.(VPCAttachmentType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	return true
}
func (this *VPCIpPrefixesType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VPCIpPrefixesType)
	if !ok {
		that2, ok := that.(VPCIpPrefixesType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Prefixes) != len(that1.Prefixes) {
		return false
	}
	for i := range this.Prefixes {
		if this.Prefixes[i] != that1.Prefixes[i] {
			return false
		}
	}
	return true
}
func (this *VPCAttachmentListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VPCAttachmentListType)
	if !ok {
		that2, ok := that.(VPCAttachmentListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VpcList) != len(that1.VpcList) {
		return false
	}
	for i := range this.VpcList {
		if !this.VpcList[i].Equal(that1.VpcList[i]) {
			return false
		}
	}
	return true
}
func (this *ActiveServicePoliciesType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActiveServicePoliciesType)
	if !ok {
		that2, ok := that.(ActiveServicePoliciesType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ServicePolicies) != len(that1.ServicePolicies) {
		return false
	}
	for i := range this.ServicePolicies {
		if !this.ServicePolicies[i].Equal(that1.ServicePolicies[i]) {
			return false
		}
	}
	return true
}
func (this *SecurityConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType)
	if !ok {
		that2, ok := that.(SecurityConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.EastWestServicePolicyChoice == nil {
		if this.EastWestServicePolicyChoice != nil {
			return false
		}
	} else if this.EastWestServicePolicyChoice == nil {
		return false
	} else if !this.EastWestServicePolicyChoice.Equal(that1.EastWestServicePolicyChoice) {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	return true
}
func (this *SecurityConfigType_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_NoForwardProxy)
	if !ok {
		that2, ok := that.(SecurityConfigType_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *SecurityConfigType_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(SecurityConfigType_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *SecurityConfigType_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(SecurityConfigType_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *SecurityConfigType_NoEastWestPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_NoEastWestPolicy)
	if !ok {
		that2, ok := that.(SecurityConfigType_NoEastWestPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoEastWestPolicy.Equal(that1.NoEastWestPolicy) {
		return false
	}
	return true
}
func (this *SecurityConfigType_ActiveEastWestServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_ActiveEastWestServicePolicies)
	if !ok {
		that2, ok := that.(SecurityConfigType_ActiveEastWestServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEastWestServicePolicies.Equal(that1.ActiveEastWestServicePolicies) {
		return false
	}
	return true
}
func (this *SecurityConfigType_EastWestServicePolicyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_EastWestServicePolicyAllowAll)
	if !ok {
		that2, ok := that.(SecurityConfigType_EastWestServicePolicyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EastWestServicePolicyAllowAll.Equal(that1.EastWestServicePolicyAllowAll) {
		return false
	}
	return true
}
func (this *SecurityConfigType_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(SecurityConfigType_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *SecurityConfigType_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(SecurityConfigType_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *SecurityConfigType_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityConfigType_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(SecurityConfigType_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *AWSVPNTunnelConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSVPNTunnelConfigType)
	if !ok {
		that2, ok := that.(AWSVPNTunnelConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeName != that1.NodeName {
		return false
	}
	if len(this.TunnelRemoteIp) != len(that1.TunnelRemoteIp) {
		return false
	}
	for i := range this.TunnelRemoteIp {
		if this.TunnelRemoteIp[i] != that1.TunnelRemoteIp[i] {
			return false
		}
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *AWSTGWInfoConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSTGWInfoConfigType)
	if !ok {
		that2, ok := that.(AWSTGWInfoConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TgwId != that1.TgwId {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if len(this.SubnetIds) != len(that1.SubnetIds) {
		return false
	}
	for i := range this.SubnetIds {
		if !this.SubnetIds[i].Equal(that1.SubnetIds[i]) {
			return false
		}
	}
	if len(this.PublicIps) != len(that1.PublicIps) {
		return false
	}
	for i := range this.PublicIps {
		if this.PublicIps[i] != that1.PublicIps[i] {
			return false
		}
	}
	if len(this.PrivateIps) != len(that1.PrivateIps) {
		return false
	}
	for i := range this.PrivateIps {
		if this.PrivateIps[i] != that1.PrivateIps[i] {
			return false
		}
	}
	if this.VpcName != that1.VpcName {
		return false
	}
	return true
}
func (this *AWSTGWResourceShareType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSTGWResourceShareType)
	if !ok {
		that2, ok := that.(AWSTGWResourceShareType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResourceShareName != that1.ResourceShareName {
		return false
	}
	if !this.CreationTime.Equal(that1.CreationTime) {
		return false
	}
	if !this.LastUpdatedTime.Equal(that1.LastUpdatedTime) {
		return false
	}
	if this.ResourceShareArn != that1.ResourceShareArn {
		return false
	}
	if len(this.ReceiverAccountId) != len(that1.ReceiverAccountId) {
		return false
	}
	for i := range this.ReceiverAccountId {
		if this.ReceiverAccountId[i] != that1.ReceiverAccountId[i] {
			return false
		}
	}
	if this.ResourceShareInvitationArn != that1.ResourceShareInvitationArn {
		return false
	}
	if this.OwnerAccountId != that1.OwnerAccountId {
		return false
	}
	if this.AllowExternalPrinciples != that1.AllowExternalPrinciples {
		return false
	}
	if this.InvitationStatus != that1.InvitationStatus {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.DeploymentStatus != that1.DeploymentStatus {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	return true
}
func (this *AWSTGWStatusType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AWSTGWStatusType)
	if !ok {
		that2, ok := that.(AWSTGWStatusType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TgwId != that1.TgwId {
		return false
	}
	if this.TgwArn != that1.TgwArn {
		return false
	}
	if this.TgwOwnerAccount != that1.TgwOwnerAccount {
		return false
	}
	if this.TgwAmazonAsn != that1.TgwAmazonAsn {
		return false
	}
	if !this.TgwCreationTime.Equal(that1.TgwCreationTime) {
		return false
	}
	if this.TgwRegion != that1.TgwRegion {
		return false
	}
	if this.TgwState != that1.TgwState {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if this.StatusMsg != that1.StatusMsg {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsParameters.Equal(that1.AwsParameters) {
		return false
	}
	if !this.VpcAttachments.Equal(that1.VpcAttachments) {
		return false
	}
	if !this.TgwSecurity.Equal(that1.TgwSecurity) {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if len(this.VpcIpPrefixes) != len(that1.VpcIpPrefixes) {
		return false
	}
	for i := range this.VpcIpPrefixes {
		if !this.VpcIpPrefixes[i].Equal(that1.VpcIpPrefixes[i]) {
			return false
		}
	}
	if !this.VnConfig.Equal(that1.VnConfig) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if !this.UserModificationTimestamp.Equal(that1.UserModificationTimestamp) {
		return false
	}
	if this.SiteToSiteTunnelIp != that1.SiteToSiteTunnelIp {
		return false
	}
	if !this.TgwInfo.Equal(that1.TgwInfo) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if !this.Sw.Equal(that1.Sw) {
		return false
	}
	if !this.Os.Equal(that1.Os) {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if len(this.VipParamsPerAz) != len(that1.VipParamsPerAz) {
		return false
	}
	for i := range this.VipParamsPerAz {
		if !this.VipParamsPerAz[i].Equal(that1.VipParamsPerAz[i]) {
			return false
		}
	}
	if that1.DirectConnectChoice == nil {
		if this.DirectConnectChoice != nil {
			return false
		}
	} else if this.DirectConnectChoice == nil {
		return false
	} else if !this.DirectConnectChoice.Equal(that1.DirectConnectChoice) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	if this.SuggestedAction != that1.SuggestedAction {
		return false
	}
	if this.ErrorDescription != that1.ErrorDescription {
		return false
	}
	if len(this.SiteErrors) != len(that1.SiteErrors) {
		return false
	}
	for i := range this.SiteErrors {
		if !this.SiteErrors[i].Equal(that1.SiteErrors[i]) {
			return false
		}
	}
	if this.ValidationState != that1.ValidationState {
		return false
	}
	if !this.CustomDns.Equal(that1.CustomDns) {
		return false
	}
	if !this.KubernetesUpgradeDrain.Equal(that1.KubernetesUpgradeDrain) {
		return false
	}
	if len(this.Tunnels) != len(that1.Tunnels) {
		return false
	}
	for i := range this.Tunnels {
		if !this.Tunnels[i].Equal(that1.Tunnels[i]) {
			return false
		}
	}
	if !this.DirectConnectInfo.Equal(that1.DirectConnectInfo) {
		return false
	}
	if !this.TfParams.Equal(that1.TfParams) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if this.SiteState != that1.SiteState {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DirectConnectDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DirectConnectDisabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_DirectConnectDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnectDisabled.Equal(that1.DirectConnectDisabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DirectConnectEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DirectConnectEnabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_DirectConnectEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnectEnabled.Equal(that1.DirectConnectEnabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_PrivateConnectivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PrivateConnectivity)
	if !ok {
		that2, ok := that.(GlobalSpecType_PrivateConnectivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateConnectivity.Equal(that1.PrivateConnectivity) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BlockAllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BlockAllServices)
	if !ok {
		that2, ok := that.(GlobalSpecType_BlockAllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockAllServices.Equal(that1.BlockAllServices) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(GlobalSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsParameters.Equal(that1.AwsParameters) {
		return false
	}
	if !this.VpcAttachments.Equal(that1.VpcAttachments) {
		return false
	}
	if !this.VnConfig.Equal(that1.VnConfig) {
		return false
	}
	if !this.TgwSecurity.Equal(that1.TgwSecurity) {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if !this.Sw.Equal(that1.Sw) {
		return false
	}
	if !this.Os.Equal(that1.Os) {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if that1.DirectConnectChoice == nil {
		if this.DirectConnectChoice != nil {
			return false
		}
	} else if this.DirectConnectChoice == nil {
		return false
	} else if !this.DirectConnectChoice.Equal(that1.DirectConnectChoice) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	if !this.CustomDns.Equal(that1.CustomDns) {
		return false
	}
	if !this.KubernetesUpgradeDrain.Equal(that1.KubernetesUpgradeDrain) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(CreateSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(CreateSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *CreateSpecType_BlockAllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BlockAllServices)
	if !ok {
		that2, ok := that.(CreateSpecType_BlockAllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockAllServices.Equal(that1.BlockAllServices) {
		return false
	}
	return true
}
func (this *CreateSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(CreateSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *CreateSpecType_DirectConnectDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DirectConnectDisabled)
	if !ok {
		that2, ok := that.(CreateSpecType_DirectConnectDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnectDisabled.Equal(that1.DirectConnectDisabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_DirectConnectEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DirectConnectEnabled)
	if !ok {
		that2, ok := that.(CreateSpecType_DirectConnectEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnectEnabled.Equal(that1.DirectConnectEnabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_PrivateConnectivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_PrivateConnectivity)
	if !ok {
		that2, ok := that.(CreateSpecType_PrivateConnectivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateConnectivity.Equal(that1.PrivateConnectivity) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsParameters.Equal(that1.AwsParameters) {
		return false
	}
	if !this.VpcAttachments.Equal(that1.VpcAttachments) {
		return false
	}
	if !this.VnConfig.Equal(that1.VnConfig) {
		return false
	}
	if !this.TgwSecurity.Equal(that1.TgwSecurity) {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.DirectConnectChoice == nil {
		if this.DirectConnectChoice != nil {
			return false
		}
	} else if this.DirectConnectChoice == nil {
		return false
	} else if !this.DirectConnectChoice.Equal(that1.DirectConnectChoice) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	if !this.CustomDns.Equal(that1.CustomDns) {
		return false
	}
	if !this.KubernetesUpgradeDrain.Equal(that1.KubernetesUpgradeDrain) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DirectConnectDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DirectConnectDisabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DirectConnectDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnectDisabled.Equal(that1.DirectConnectDisabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DirectConnectEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DirectConnectEnabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DirectConnectEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnectEnabled.Equal(that1.DirectConnectEnabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_PrivateConnectivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_PrivateConnectivity)
	if !ok {
		that2, ok := that.(ReplaceSpecType_PrivateConnectivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateConnectivity.Equal(that1.PrivateConnectivity) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BlockAllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BlockAllServices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BlockAllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockAllServices.Equal(that1.BlockAllServices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AwsParameters.Equal(that1.AwsParameters) {
		return false
	}
	if !this.VpcAttachments.Equal(that1.VpcAttachments) {
		return false
	}
	if !this.VnConfig.Equal(that1.VnConfig) {
		return false
	}
	if !this.TgwSecurity.Equal(that1.TgwSecurity) {
		return false
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if len(this.VpcIpPrefixes) != len(that1.VpcIpPrefixes) {
		return false
	}
	for i := range this.VpcIpPrefixes {
		if !this.VpcIpPrefixes[i].Equal(that1.VpcIpPrefixes[i]) {
			return false
		}
	}
	if len(this.Tunnels) != len(that1.Tunnels) {
		return false
	}
	for i := range this.Tunnels {
		if !this.Tunnels[i].Equal(that1.Tunnels[i]) {
			return false
		}
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if !this.UserModificationTimestamp.Equal(that1.UserModificationTimestamp) {
		return false
	}
	if !this.TgwInfo.Equal(that1.TgwInfo) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if len(this.VipParamsPerAz) != len(that1.VipParamsPerAz) {
		return false
	}
	for i := range this.VipParamsPerAz {
		if !this.VipParamsPerAz[i].Equal(that1.VipParamsPerAz[i]) {
			return false
		}
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if this.SiteState != that1.SiteState {
		return false
	}
	if that1.DirectConnectChoice == nil {
		if this.DirectConnectChoice != nil {
			return false
		}
	} else if this.DirectConnectChoice == nil {
		return false
	} else if !this.DirectConnectChoice.Equal(that1.DirectConnectChoice) {
		return false
	}
	if !this.DirectConnectInfo.Equal(that1.DirectConnectInfo) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	if this.SuggestedAction != that1.SuggestedAction {
		return false
	}
	if this.ErrorDescription != that1.ErrorDescription {
		return false
	}
	if len(this.SiteErrors) != len(that1.SiteErrors) {
		return false
	}
	for i := range this.SiteErrors {
		if !this.SiteErrors[i].Equal(that1.SiteErrors[i]) {
			return false
		}
	}
	if this.ValidationState != that1.ValidationState {
		return false
	}
	if !this.CustomDns.Equal(that1.CustomDns) {
		return false
	}
	if !this.KubernetesUpgradeDrain.Equal(that1.KubernetesUpgradeDrain) {
		return false
	}
	return true
}
func (this *GetSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GetSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GetSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GetSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *GetSpecType_DirectConnectDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DirectConnectDisabled)
	if !ok {
		that2, ok := that.(GetSpecType_DirectConnectDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnectDisabled.Equal(that1.DirectConnectDisabled) {
		return false
	}
	return true
}
func (this *GetSpecType_DirectConnectEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DirectConnectEnabled)
	if !ok {
		that2, ok := that.(GetSpecType_DirectConnectEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectConnectEnabled.Equal(that1.DirectConnectEnabled) {
		return false
	}
	return true
}
func (this *GetSpecType_PrivateConnectivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_PrivateConnectivity)
	if !ok {
		that2, ok := that.(GetSpecType_PrivateConnectivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateConnectivity.Equal(that1.PrivateConnectivity) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *GetSpecType_BlockAllServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BlockAllServices)
	if !ok {
		that2, ok := that.(GetSpecType_BlockAllServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockAllServices.Equal(that1.BlockAllServices) {
		return false
	}
	return true
}
func (this *GetSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(GetSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *TGWAssignedASNType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aws_tgw_site.TGWAssignedASNType{")
	s = append(s, "TgwAsn: "+fmt.Sprintf("%#v", this.TgwAsn)+",\n")
	s = append(s, "VolterraSiteAsn: "+fmt.Sprintf("%#v", this.VolterraSiteAsn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExistingTGWType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aws_tgw_site.ExistingTGWType{")
	s = append(s, "TgwId: "+fmt.Sprintf("%#v", this.TgwId)+",\n")
	s = append(s, "TgwAsn: "+fmt.Sprintf("%#v", this.TgwAsn)+",\n")
	s = append(s, "VolterraSiteAsn: "+fmt.Sprintf("%#v", this.VolterraSiteAsn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TGWParamsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aws_tgw_site.TGWParamsType{")
	if this.AsnChoice != nil {
		s = append(s, "AsnChoice: "+fmt.Sprintf("%#v", this.AsnChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TGWParamsType_SystemGenerated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.TGWParamsType_SystemGenerated{` +
		`SystemGenerated:` + fmt.Sprintf("%#v", this.SystemGenerated) + `}`}, ", ")
	return s
}
func (this *TGWParamsType_UserAssigned) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.TGWParamsType_UserAssigned{` +
		`UserAssigned:` + fmt.Sprintf("%#v", this.UserAssigned) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 23)
	s = append(s, "&aws_tgw_site.ServicesVPCType{")
	s = append(s, "AwsRegion: "+fmt.Sprintf("%#v", this.AwsRegion)+",\n")
	if this.ServiceVpcChoice != nil {
		s = append(s, "ServiceVpcChoice: "+fmt.Sprintf("%#v", this.ServiceVpcChoice)+",\n")
	}
	if this.TgwChoice != nil {
		s = append(s, "TgwChoice: "+fmt.Sprintf("%#v", this.TgwChoice)+",\n")
	}
	s = append(s, "AwsCertifiedHw: "+fmt.Sprintf("%#v", this.AwsCertifiedHw)+",\n")
	s = append(s, "InstanceType: "+fmt.Sprintf("%#v", this.InstanceType)+",\n")
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	if this.AzNodes != nil {
		s = append(s, "AzNodes: "+fmt.Sprintf("%#v", this.AzNodes)+",\n")
	}
	if this.WorkerNodes != nil {
		s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	}
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	if this.InternetVipChoice != nil {
		s = append(s, "InternetVipChoice: "+fmt.Sprintf("%#v", this.InternetVipChoice)+",\n")
	}
	if this.SecurityGroupChoice != nil {
		s = append(s, "SecurityGroupChoice: "+fmt.Sprintf("%#v", this.SecurityGroupChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServicesVPCType_NewVpc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_NewVpc{` +
		`NewVpc:` + fmt.Sprintf("%#v", this.NewVpc) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_VpcId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_VpcId{` +
		`VpcId:` + fmt.Sprintf("%#v", this.VpcId) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_NewTgw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_NewTgw{` +
		`NewTgw:` + fmt.Sprintf("%#v", this.NewTgw) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_ExistingTgw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_ExistingTgw{` +
		`ExistingTgw:` + fmt.Sprintf("%#v", this.ExistingTgw) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_NodesPerAz) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_NodesPerAz{` +
		`NodesPerAz:` + fmt.Sprintf("%#v", this.NodesPerAz) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_TotalNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_TotalNodes{` +
		`TotalNodes:` + fmt.Sprintf("%#v", this.TotalNodes) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_NoWorkerNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_NoWorkerNodes{` +
		`NoWorkerNodes:` + fmt.Sprintf("%#v", this.NoWorkerNodes) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_AwsCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_AwsCred{` +
		`AwsCred:` + fmt.Sprintf("%#v", this.AwsCred) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_Assisted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_Assisted{` +
		`Assisted:` + fmt.Sprintf("%#v", this.Assisted) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_DisableInternetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_DisableInternetVip{` +
		`DisableInternetVip:` + fmt.Sprintf("%#v", this.DisableInternetVip) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_EnableInternetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_EnableInternetVip{` +
		`EnableInternetVip:` + fmt.Sprintf("%#v", this.EnableInternetVip) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_F5XcSecurityGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_F5XcSecurityGroup{` +
		`F5XcSecurityGroup:` + fmt.Sprintf("%#v", this.F5XcSecurityGroup) + `}`}, ", ")
	return s
}
func (this *ServicesVPCType_CustomSecurityGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCType_CustomSecurityGroup{` +
		`CustomSecurityGroup:` + fmt.Sprintf("%#v", this.CustomSecurityGroup) + `}`}, ", ")
	return s
}
func (this *VnConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&aws_tgw_site.VnConfiguration{")
	if this.InsideStaticRouteChoice != nil {
		s = append(s, "InsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.InsideStaticRouteChoice)+",\n")
	}
	if this.OutsideStaticRouteChoice != nil {
		s = append(s, "OutsideStaticRouteChoice: "+fmt.Sprintf("%#v", this.OutsideStaticRouteChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	if this.DcClusterGroupChoice != nil {
		s = append(s, "DcClusterGroupChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupChoice)+",\n")
	}
	if this.SiteMeshGroupChoice != nil {
		s = append(s, "SiteMeshGroupChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupChoice)+",\n")
	}
	if this.AllowedVipPort != nil {
		s = append(s, "AllowedVipPort: "+fmt.Sprintf("%#v", this.AllowedVipPort)+",\n")
	}
	if this.AllowedVipPortSli != nil {
		s = append(s, "AllowedVipPortSli: "+fmt.Sprintf("%#v", this.AllowedVipPortSli)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VnConfiguration_NoInsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_NoInsideStaticRoutes{` +
		`NoInsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoInsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_InsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_InsideStaticRoutes{` +
		`InsideStaticRoutes:` + fmt.Sprintf("%#v", this.InsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_NoOutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_NoOutsideStaticRoutes{` +
		`NoOutsideStaticRoutes:` + fmt.Sprintf("%#v", this.NoOutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_OutsideStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_OutsideStaticRoutes{` +
		`OutsideStaticRoutes:` + fmt.Sprintf("%#v", this.OutsideStaticRoutes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_NoDcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_NoDcClusterGroup{` +
		`NoDcClusterGroup:` + fmt.Sprintf("%#v", this.NoDcClusterGroup) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_DcClusterGroupOutsideVn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_DcClusterGroupOutsideVn{` +
		`DcClusterGroupOutsideVn:` + fmt.Sprintf("%#v", this.DcClusterGroupOutsideVn) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_DcClusterGroupInsideVn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_DcClusterGroupInsideVn{` +
		`DcClusterGroupInsideVn:` + fmt.Sprintf("%#v", this.DcClusterGroupInsideVn) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_SmConnectionPublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_SmConnectionPublicIp{` +
		`SmConnectionPublicIp:` + fmt.Sprintf("%#v", this.SmConnectionPublicIp) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_SmConnectionPvtIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.VnConfiguration_SmConnectionPvtIp{` +
		`SmConnectionPvtIp:` + fmt.Sprintf("%#v", this.SmConnectionPvtIp) + `}`}, ", ")
	return s
}
func (this *ServicesVPCReplaceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 22)
	s = append(s, "&aws_tgw_site.ServicesVPCReplaceType{")
	s = append(s, "AwsRegion: "+fmt.Sprintf("%#v", this.AwsRegion)+",\n")
	if this.ServiceVpcChoice != nil {
		s = append(s, "ServiceVpcChoice: "+fmt.Sprintf("%#v", this.ServiceVpcChoice)+",\n")
	}
	if this.TgwChoice != nil {
		s = append(s, "TgwChoice: "+fmt.Sprintf("%#v", this.TgwChoice)+",\n")
	}
	s = append(s, "InstanceType: "+fmt.Sprintf("%#v", this.InstanceType)+",\n")
	if this.AzNodes != nil {
		s = append(s, "AzNodes: "+fmt.Sprintf("%#v", this.AzNodes)+",\n")
	}
	if this.Deployment != nil {
		s = append(s, "Deployment: "+fmt.Sprintf("%#v", this.Deployment)+",\n")
	}
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	s = append(s, "DiskSize: "+fmt.Sprintf("%#v", this.DiskSize)+",\n")
	if this.WorkerNodes != nil {
		s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	}
	if this.InternetVipChoice != nil {
		s = append(s, "InternetVipChoice: "+fmt.Sprintf("%#v", this.InternetVipChoice)+",\n")
	}
	if this.SecurityGroupChoice != nil {
		s = append(s, "SecurityGroupChoice: "+fmt.Sprintf("%#v", this.SecurityGroupChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServicesVPCReplaceType_NewVpc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCReplaceType_NewVpc{` +
		`NewVpc:` + fmt.Sprintf("%#v", this.NewVpc) + `}`}, ", ")
	return s
}
func (this *ServicesVPCReplaceType_VpcId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCReplaceType_VpcId{` +
		`VpcId:` + fmt.Sprintf("%#v", this.VpcId) + `}`}, ", ")
	return s
}
func (this *ServicesVPCReplaceType_NewTgw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCReplaceType_NewTgw{` +
		`NewTgw:` + fmt.Sprintf("%#v", this.NewTgw) + `}`}, ", ")
	return s
}
func (this *ServicesVPCReplaceType_ExistingTgw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCReplaceType_ExistingTgw{` +
		`ExistingTgw:` + fmt.Sprintf("%#v", this.ExistingTgw) + `}`}, ", ")
	return s
}
func (this *ServicesVPCReplaceType_AwsCred) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCReplaceType_AwsCred{` +
		`AwsCred:` + fmt.Sprintf("%#v", this.AwsCred) + `}`}, ", ")
	return s
}
func (this *ServicesVPCReplaceType_Assisted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCReplaceType_Assisted{` +
		`Assisted:` + fmt.Sprintf("%#v", this.Assisted) + `}`}, ", ")
	return s
}
func (this *ServicesVPCReplaceType_NodesPerAz) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCReplaceType_NodesPerAz{` +
		`NodesPerAz:` + fmt.Sprintf("%#v", this.NodesPerAz) + `}`}, ", ")
	return s
}
func (this *ServicesVPCReplaceType_TotalNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCReplaceType_TotalNodes{` +
		`TotalNodes:` + fmt.Sprintf("%#v", this.TotalNodes) + `}`}, ", ")
	return s
}
func (this *ServicesVPCReplaceType_NoWorkerNodes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCReplaceType_NoWorkerNodes{` +
		`NoWorkerNodes:` + fmt.Sprintf("%#v", this.NoWorkerNodes) + `}`}, ", ")
	return s
}
func (this *ServicesVPCReplaceType_DisableInternetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCReplaceType_DisableInternetVip{` +
		`DisableInternetVip:` + fmt.Sprintf("%#v", this.DisableInternetVip) + `}`}, ", ")
	return s
}
func (this *ServicesVPCReplaceType_EnableInternetVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCReplaceType_EnableInternetVip{` +
		`EnableInternetVip:` + fmt.Sprintf("%#v", this.EnableInternetVip) + `}`}, ", ")
	return s
}
func (this *ServicesVPCReplaceType_F5XcSecurityGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCReplaceType_F5XcSecurityGroup{` +
		`F5XcSecurityGroup:` + fmt.Sprintf("%#v", this.F5XcSecurityGroup) + `}`}, ", ")
	return s
}
func (this *ServicesVPCReplaceType_CustomSecurityGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ServicesVPCReplaceType_CustomSecurityGroup{` +
		`CustomSecurityGroup:` + fmt.Sprintf("%#v", this.CustomSecurityGroup) + `}`}, ", ")
	return s
}
func (this *VPCAttachmentType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aws_tgw_site.VPCAttachmentType{")
	s = append(s, "VpcId: "+fmt.Sprintf("%#v", this.VpcId)+",\n")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VPCIpPrefixesType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aws_tgw_site.VPCIpPrefixesType{")
	s = append(s, "Prefixes: "+fmt.Sprintf("%#v", this.Prefixes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VPCAttachmentListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aws_tgw_site.VPCAttachmentListType{")
	if this.VpcList != nil {
		s = append(s, "VpcList: "+fmt.Sprintf("%#v", this.VpcList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActiveServicePoliciesType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aws_tgw_site.ActiveServicePoliciesType{")
	if this.ServicePolicies != nil {
		s = append(s, "ServicePolicies: "+fmt.Sprintf("%#v", this.ServicePolicies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&aws_tgw_site.SecurityConfigType{")
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.EastWestServicePolicyChoice != nil {
		s = append(s, "EastWestServicePolicyChoice: "+fmt.Sprintf("%#v", this.EastWestServicePolicyChoice)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityConfigType_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *SecurityConfigType_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *SecurityConfigType_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *SecurityConfigType_NoEastWestPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_NoEastWestPolicy{` +
		`NoEastWestPolicy:` + fmt.Sprintf("%#v", this.NoEastWestPolicy) + `}`}, ", ")
	return s
}
func (this *SecurityConfigType_ActiveEastWestServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_ActiveEastWestServicePolicies{` +
		`ActiveEastWestServicePolicies:` + fmt.Sprintf("%#v", this.ActiveEastWestServicePolicies) + `}`}, ", ")
	return s
}
func (this *SecurityConfigType_EastWestServicePolicyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_EastWestServicePolicyAllowAll{` +
		`EastWestServicePolicyAllowAll:` + fmt.Sprintf("%#v", this.EastWestServicePolicyAllowAll) + `}`}, ", ")
	return s
}
func (this *SecurityConfigType_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *SecurityConfigType_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *SecurityConfigType_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.SecurityConfigType_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *AWSVPNTunnelConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&aws_tgw_site.AWSVPNTunnelConfigType{")
	s = append(s, "NodeName: "+fmt.Sprintf("%#v", this.NodeName)+",\n")
	s = append(s, "TunnelRemoteIp: "+fmt.Sprintf("%#v", this.TunnelRemoteIp)+",\n")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSTGWInfoConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&aws_tgw_site.AWSTGWInfoConfigType{")
	s = append(s, "TgwId: "+fmt.Sprintf("%#v", this.TgwId)+",\n")
	s = append(s, "VpcId: "+fmt.Sprintf("%#v", this.VpcId)+",\n")
	if this.SubnetIds != nil {
		s = append(s, "SubnetIds: "+fmt.Sprintf("%#v", this.SubnetIds)+",\n")
	}
	s = append(s, "PublicIps: "+fmt.Sprintf("%#v", this.PublicIps)+",\n")
	s = append(s, "PrivateIps: "+fmt.Sprintf("%#v", this.PrivateIps)+",\n")
	s = append(s, "VpcName: "+fmt.Sprintf("%#v", this.VpcName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSTGWResourceShareType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&aws_tgw_site.AWSTGWResourceShareType{")
	s = append(s, "ResourceShareName: "+fmt.Sprintf("%#v", this.ResourceShareName)+",\n")
	if this.CreationTime != nil {
		s = append(s, "CreationTime: "+fmt.Sprintf("%#v", this.CreationTime)+",\n")
	}
	if this.LastUpdatedTime != nil {
		s = append(s, "LastUpdatedTime: "+fmt.Sprintf("%#v", this.LastUpdatedTime)+",\n")
	}
	s = append(s, "ResourceShareArn: "+fmt.Sprintf("%#v", this.ResourceShareArn)+",\n")
	s = append(s, "ReceiverAccountId: "+fmt.Sprintf("%#v", this.ReceiverAccountId)+",\n")
	s = append(s, "ResourceShareInvitationArn: "+fmt.Sprintf("%#v", this.ResourceShareInvitationArn)+",\n")
	s = append(s, "OwnerAccountId: "+fmt.Sprintf("%#v", this.OwnerAccountId)+",\n")
	s = append(s, "AllowExternalPrinciples: "+fmt.Sprintf("%#v", this.AllowExternalPrinciples)+",\n")
	s = append(s, "InvitationStatus: "+fmt.Sprintf("%#v", this.InvitationStatus)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "DeploymentStatus: "+fmt.Sprintf("%#v", this.DeploymentStatus)+",\n")
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AWSTGWStatusType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&aws_tgw_site.AWSTGWStatusType{")
	s = append(s, "TgwId: "+fmt.Sprintf("%#v", this.TgwId)+",\n")
	s = append(s, "TgwArn: "+fmt.Sprintf("%#v", this.TgwArn)+",\n")
	s = append(s, "TgwOwnerAccount: "+fmt.Sprintf("%#v", this.TgwOwnerAccount)+",\n")
	s = append(s, "TgwAmazonAsn: "+fmt.Sprintf("%#v", this.TgwAmazonAsn)+",\n")
	if this.TgwCreationTime != nil {
		s = append(s, "TgwCreationTime: "+fmt.Sprintf("%#v", this.TgwCreationTime)+",\n")
	}
	s = append(s, "TgwRegion: "+fmt.Sprintf("%#v", this.TgwRegion)+",\n")
	s = append(s, "TgwState: "+fmt.Sprintf("%#v", this.TgwState)+",\n")
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	s = append(s, "StatusMsg: "+fmt.Sprintf("%#v", this.StatusMsg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 41)
	s = append(s, "&aws_tgw_site.GlobalSpecType{")
	if this.AwsParameters != nil {
		s = append(s, "AwsParameters: "+fmt.Sprintf("%#v", this.AwsParameters)+",\n")
	}
	if this.VpcAttachments != nil {
		s = append(s, "VpcAttachments: "+fmt.Sprintf("%#v", this.VpcAttachments)+",\n")
	}
	if this.TgwSecurity != nil {
		s = append(s, "TgwSecurity: "+fmt.Sprintf("%#v", this.TgwSecurity)+",\n")
	}
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	keysForVpcIpPrefixes := make([]string, 0, len(this.VpcIpPrefixes))
	for k, _ := range this.VpcIpPrefixes {
		keysForVpcIpPrefixes = append(keysForVpcIpPrefixes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVpcIpPrefixes)
	mapStringForVpcIpPrefixes := "map[string]*VPCIpPrefixesType{"
	for _, k := range keysForVpcIpPrefixes {
		mapStringForVpcIpPrefixes += fmt.Sprintf("%#v: %#v,", k, this.VpcIpPrefixes[k])
	}
	mapStringForVpcIpPrefixes += "}"
	if this.VpcIpPrefixes != nil {
		s = append(s, "VpcIpPrefixes: "+mapStringForVpcIpPrefixes+",\n")
	}
	if this.VnConfig != nil {
		s = append(s, "VnConfig: "+fmt.Sprintf("%#v", this.VnConfig)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.UserModificationTimestamp != nil {
		s = append(s, "UserModificationTimestamp: "+fmt.Sprintf("%#v", this.UserModificationTimestamp)+",\n")
	}
	s = append(s, "SiteToSiteTunnelIp: "+fmt.Sprintf("%#v", this.SiteToSiteTunnelIp)+",\n")
	if this.TgwInfo != nil {
		s = append(s, "TgwInfo: "+fmt.Sprintf("%#v", this.TgwInfo)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.Sw != nil {
		s = append(s, "Sw: "+fmt.Sprintf("%#v", this.Sw)+",\n")
	}
	if this.Os != nil {
		s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	if this.VipParamsPerAz != nil {
		s = append(s, "VipParamsPerAz: "+fmt.Sprintf("%#v", this.VipParamsPerAz)+",\n")
	}
	if this.DirectConnectChoice != nil {
		s = append(s, "DirectConnectChoice: "+fmt.Sprintf("%#v", this.DirectConnectChoice)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	s = append(s, "SuggestedAction: "+fmt.Sprintf("%#v", this.SuggestedAction)+",\n")
	s = append(s, "ErrorDescription: "+fmt.Sprintf("%#v", this.ErrorDescription)+",\n")
	if this.SiteErrors != nil {
		s = append(s, "SiteErrors: "+fmt.Sprintf("%#v", this.SiteErrors)+",\n")
	}
	s = append(s, "ValidationState: "+fmt.Sprintf("%#v", this.ValidationState)+",\n")
	if this.CustomDns != nil {
		s = append(s, "CustomDns: "+fmt.Sprintf("%#v", this.CustomDns)+",\n")
	}
	if this.KubernetesUpgradeDrain != nil {
		s = append(s, "KubernetesUpgradeDrain: "+fmt.Sprintf("%#v", this.KubernetesUpgradeDrain)+",\n")
	}
	if this.Tunnels != nil {
		s = append(s, "Tunnels: "+fmt.Sprintf("%#v", this.Tunnels)+",\n")
	}
	if this.DirectConnectInfo != nil {
		s = append(s, "DirectConnectInfo: "+fmt.Sprintf("%#v", this.DirectConnectInfo)+",\n")
	}
	if this.TfParams != nil {
		s = append(s, "TfParams: "+fmt.Sprintf("%#v", this.TfParams)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "SiteState: "+fmt.Sprintf("%#v", this.SiteState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GlobalSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GlobalSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DirectConnectDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GlobalSpecType_DirectConnectDisabled{` +
		`DirectConnectDisabled:` + fmt.Sprintf("%#v", this.DirectConnectDisabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DirectConnectEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GlobalSpecType_DirectConnectEnabled{` +
		`DirectConnectEnabled:` + fmt.Sprintf("%#v", this.DirectConnectEnabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_PrivateConnectivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GlobalSpecType_PrivateConnectivity{` +
		`PrivateConnectivity:` + fmt.Sprintf("%#v", this.PrivateConnectivity) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GlobalSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BlockAllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GlobalSpecType_BlockAllServices{` +
		`BlockAllServices:` + fmt.Sprintf("%#v", this.BlockAllServices) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GlobalSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 24)
	s = append(s, "&aws_tgw_site.CreateSpecType{")
	if this.AwsParameters != nil {
		s = append(s, "AwsParameters: "+fmt.Sprintf("%#v", this.AwsParameters)+",\n")
	}
	if this.VpcAttachments != nil {
		s = append(s, "VpcAttachments: "+fmt.Sprintf("%#v", this.VpcAttachments)+",\n")
	}
	if this.VnConfig != nil {
		s = append(s, "VnConfig: "+fmt.Sprintf("%#v", this.VnConfig)+",\n")
	}
	if this.TgwSecurity != nil {
		s = append(s, "TgwSecurity: "+fmt.Sprintf("%#v", this.TgwSecurity)+",\n")
	}
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.Sw != nil {
		s = append(s, "Sw: "+fmt.Sprintf("%#v", this.Sw)+",\n")
	}
	if this.Os != nil {
		s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.DirectConnectChoice != nil {
		s = append(s, "DirectConnectChoice: "+fmt.Sprintf("%#v", this.DirectConnectChoice)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	if this.CustomDns != nil {
		s = append(s, "CustomDns: "+fmt.Sprintf("%#v", this.CustomDns)+",\n")
	}
	if this.KubernetesUpgradeDrain != nil {
		s = append(s, "KubernetesUpgradeDrain: "+fmt.Sprintf("%#v", this.KubernetesUpgradeDrain)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.CreateSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.CreateSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.CreateSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BlockAllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.CreateSpecType_BlockAllServices{` +
		`BlockAllServices:` + fmt.Sprintf("%#v", this.BlockAllServices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.CreateSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DirectConnectDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.CreateSpecType_DirectConnectDisabled{` +
		`DirectConnectDisabled:` + fmt.Sprintf("%#v", this.DirectConnectDisabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DirectConnectEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.CreateSpecType_DirectConnectEnabled{` +
		`DirectConnectEnabled:` + fmt.Sprintf("%#v", this.DirectConnectEnabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_PrivateConnectivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.CreateSpecType_PrivateConnectivity{` +
		`PrivateConnectivity:` + fmt.Sprintf("%#v", this.PrivateConnectivity) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&aws_tgw_site.ReplaceSpecType{")
	if this.AwsParameters != nil {
		s = append(s, "AwsParameters: "+fmt.Sprintf("%#v", this.AwsParameters)+",\n")
	}
	if this.VpcAttachments != nil {
		s = append(s, "VpcAttachments: "+fmt.Sprintf("%#v", this.VpcAttachments)+",\n")
	}
	if this.VnConfig != nil {
		s = append(s, "VnConfig: "+fmt.Sprintf("%#v", this.VnConfig)+",\n")
	}
	if this.TgwSecurity != nil {
		s = append(s, "TgwSecurity: "+fmt.Sprintf("%#v", this.TgwSecurity)+",\n")
	}
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.DirectConnectChoice != nil {
		s = append(s, "DirectConnectChoice: "+fmt.Sprintf("%#v", this.DirectConnectChoice)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	if this.CustomDns != nil {
		s = append(s, "CustomDns: "+fmt.Sprintf("%#v", this.CustomDns)+",\n")
	}
	if this.KubernetesUpgradeDrain != nil {
		s = append(s, "KubernetesUpgradeDrain: "+fmt.Sprintf("%#v", this.KubernetesUpgradeDrain)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ReplaceSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ReplaceSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DirectConnectDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ReplaceSpecType_DirectConnectDisabled{` +
		`DirectConnectDisabled:` + fmt.Sprintf("%#v", this.DirectConnectDisabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DirectConnectEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ReplaceSpecType_DirectConnectEnabled{` +
		`DirectConnectEnabled:` + fmt.Sprintf("%#v", this.DirectConnectEnabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_PrivateConnectivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ReplaceSpecType_PrivateConnectivity{` +
		`PrivateConnectivity:` + fmt.Sprintf("%#v", this.PrivateConnectivity) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ReplaceSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BlockAllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ReplaceSpecType_BlockAllServices{` +
		`BlockAllServices:` + fmt.Sprintf("%#v", this.BlockAllServices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.ReplaceSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 35)
	s = append(s, "&aws_tgw_site.GetSpecType{")
	if this.AwsParameters != nil {
		s = append(s, "AwsParameters: "+fmt.Sprintf("%#v", this.AwsParameters)+",\n")
	}
	if this.VpcAttachments != nil {
		s = append(s, "VpcAttachments: "+fmt.Sprintf("%#v", this.VpcAttachments)+",\n")
	}
	if this.VnConfig != nil {
		s = append(s, "VnConfig: "+fmt.Sprintf("%#v", this.VnConfig)+",\n")
	}
	if this.TgwSecurity != nil {
		s = append(s, "TgwSecurity: "+fmt.Sprintf("%#v", this.TgwSecurity)+",\n")
	}
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	keysForVpcIpPrefixes := make([]string, 0, len(this.VpcIpPrefixes))
	for k, _ := range this.VpcIpPrefixes {
		keysForVpcIpPrefixes = append(keysForVpcIpPrefixes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVpcIpPrefixes)
	mapStringForVpcIpPrefixes := "map[string]*VPCIpPrefixesType{"
	for _, k := range keysForVpcIpPrefixes {
		mapStringForVpcIpPrefixes += fmt.Sprintf("%#v: %#v,", k, this.VpcIpPrefixes[k])
	}
	mapStringForVpcIpPrefixes += "}"
	if this.VpcIpPrefixes != nil {
		s = append(s, "VpcIpPrefixes: "+mapStringForVpcIpPrefixes+",\n")
	}
	if this.Tunnels != nil {
		s = append(s, "Tunnels: "+fmt.Sprintf("%#v", this.Tunnels)+",\n")
	}
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.UserModificationTimestamp != nil {
		s = append(s, "UserModificationTimestamp: "+fmt.Sprintf("%#v", this.UserModificationTimestamp)+",\n")
	}
	if this.TgwInfo != nil {
		s = append(s, "TgwInfo: "+fmt.Sprintf("%#v", this.TgwInfo)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.VipParamsPerAz != nil {
		s = append(s, "VipParamsPerAz: "+fmt.Sprintf("%#v", this.VipParamsPerAz)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	s = append(s, "SiteState: "+fmt.Sprintf("%#v", this.SiteState)+",\n")
	if this.DirectConnectChoice != nil {
		s = append(s, "DirectConnectChoice: "+fmt.Sprintf("%#v", this.DirectConnectChoice)+",\n")
	}
	if this.DirectConnectInfo != nil {
		s = append(s, "DirectConnectInfo: "+fmt.Sprintf("%#v", this.DirectConnectInfo)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	s = append(s, "SuggestedAction: "+fmt.Sprintf("%#v", this.SuggestedAction)+",\n")
	s = append(s, "ErrorDescription: "+fmt.Sprintf("%#v", this.ErrorDescription)+",\n")
	if this.SiteErrors != nil {
		s = append(s, "SiteErrors: "+fmt.Sprintf("%#v", this.SiteErrors)+",\n")
	}
	s = append(s, "ValidationState: "+fmt.Sprintf("%#v", this.ValidationState)+",\n")
	if this.CustomDns != nil {
		s = append(s, "CustomDns: "+fmt.Sprintf("%#v", this.CustomDns)+",\n")
	}
	if this.KubernetesUpgradeDrain != nil {
		s = append(s, "KubernetesUpgradeDrain: "+fmt.Sprintf("%#v", this.KubernetesUpgradeDrain)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GetSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GetSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DirectConnectDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GetSpecType_DirectConnectDisabled{` +
		`DirectConnectDisabled:` + fmt.Sprintf("%#v", this.DirectConnectDisabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DirectConnectEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GetSpecType_DirectConnectEnabled{` +
		`DirectConnectEnabled:` + fmt.Sprintf("%#v", this.DirectConnectEnabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_PrivateConnectivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GetSpecType_PrivateConnectivity{` +
		`PrivateConnectivity:` + fmt.Sprintf("%#v", this.PrivateConnectivity) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GetSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BlockAllServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GetSpecType_BlockAllServices{` +
		`BlockAllServices:` + fmt.Sprintf("%#v", this.BlockAllServices) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&aws_tgw_site.GetSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TGWAssignedASNType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TGWAssignedASNType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TGWAssignedASNType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VolterraSiteAsn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VolterraSiteAsn))
		i--
		dAtA[i] = 0x10
	}
	if m.TgwAsn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TgwAsn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExistingTGWType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExistingTGWType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExistingTGWType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VolterraSiteAsn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VolterraSiteAsn))
		i--
		dAtA[i] = 0x18
	}
	if m.TgwAsn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TgwAsn))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TgwId) > 0 {
		i -= len(m.TgwId)
		copy(dAtA[i:], m.TgwId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TgwId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TGWParamsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TGWParamsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TGWParamsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AsnChoice != nil {
		{
			size := m.AsnChoice.Size()
			i -= size
			if _, err := m.AsnChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TGWParamsType_SystemGenerated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TGWParamsType_SystemGenerated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemGenerated != nil {
		{
			size, err := m.SystemGenerated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *TGWParamsType_UserAssigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TGWParamsType_UserAssigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserAssigned != nil {
		{
			size, err := m.UserAssigned.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicesVPCType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecurityGroupChoice != nil {
		{
			size := m.SecurityGroupChoice.Size()
			i -= size
			if _, err := m.SecurityGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InternetVipChoice != nil {
		{
			size := m.InternetVipChoice.Size()
			i -= size
			if _, err := m.InternetVipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WorkerNodes != nil {
		{
			size := m.WorkerNodes.Size()
			i -= size
			if _, err := m.WorkerNodes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DiskSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.Deployment != nil {
		{
			size := m.Deployment.Size()
			i -= size
			if _, err := m.Deployment.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AzNodes) > 0 {
		for iNdEx := len(m.AzNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AzNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.SshKey) > 0 {
		i -= len(m.SshKey)
		copy(dAtA[i:], m.SshKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.InstanceType) > 0 {
		i -= len(m.InstanceType)
		copy(dAtA[i:], m.InstanceType)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InstanceType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AwsCertifiedHw) > 0 {
		i -= len(m.AwsCertifiedHw)
		copy(dAtA[i:], m.AwsCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsCertifiedHw)))
		i--
		dAtA[i] = 0x42
	}
	if m.TgwChoice != nil {
		{
			size := m.TgwChoice.Size()
			i -= size
			if _, err := m.TgwChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServiceVpcChoice != nil {
		{
			size := m.ServiceVpcChoice.Size()
			i -= size
			if _, err := m.ServiceVpcChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AwsRegion) > 0 {
		i -= len(m.AwsRegion)
		copy(dAtA[i:], m.AwsRegion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsRegion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServicesVPCType_NewVpc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCType_NewVpc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NewVpc != nil {
		{
			size, err := m.NewVpc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCType_VpcId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCType_VpcId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.VpcId)
	copy(dAtA[i:], m.VpcId)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.VpcId)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *ServicesVPCType_NewTgw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCType_NewTgw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NewTgw != nil {
		{
			size, err := m.NewTgw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCType_ExistingTgw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCType_ExistingTgw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExistingTgw != nil {
		{
			size, err := m.ExistingTgw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCType_NodesPerAz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCType_NodesPerAz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	i--
	dAtA[i] = 0x60
	return len(dAtA) - i, nil
}
func (m *ServicesVPCType_AwsCred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCType_AwsCred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AwsCred != nil {
		{
			size, err := m.AwsCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCType_Assisted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCType_Assisted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Assisted != nil {
		{
			size, err := m.Assisted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCType_TotalNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCType_TotalNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.TotalNodes))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd8
	return len(dAtA) - i, nil
}
func (m *ServicesVPCType_NoWorkerNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCType_NoWorkerNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoWorkerNodes != nil {
		{
			size, err := m.NoWorkerNodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCType_DisableInternetVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCType_DisableInternetVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableInternetVip != nil {
		{
			size, err := m.DisableInternetVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCType_EnableInternetVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCType_EnableInternetVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableInternetVip != nil {
		{
			size, err := m.EnableInternetVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCType_F5XcSecurityGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCType_F5XcSecurityGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5XcSecurityGroup != nil {
		{
			size, err := m.F5XcSecurityGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCType_CustomSecurityGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCType_CustomSecurityGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomSecurityGroup != nil {
		{
			size, err := m.CustomSecurityGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VnConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowedVipPortSli != nil {
		{
			size, err := m.AllowedVipPortSli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.SiteMeshGroupChoice != nil {
		{
			size := m.SiteMeshGroupChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DcClusterGroupChoice != nil {
		{
			size := m.DcClusterGroupChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AllowedVipPort != nil {
		{
			size, err := m.AllowedVipPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.GlobalNetworkChoice != nil {
		{
			size := m.GlobalNetworkChoice.Size()
			i -= size
			if _, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OutsideStaticRouteChoice != nil {
		{
			size := m.OutsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.OutsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InsideStaticRouteChoice != nil {
		{
			size := m.InsideStaticRouteChoice.Size()
			i -= size
			if _, err := m.InsideStaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *VnConfiguration_NoInsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_NoInsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoInsideStaticRoutes != nil {
		{
			size, err := m.NoInsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_InsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_InsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InsideStaticRoutes != nil {
		{
			size, err := m.InsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_NoOutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_NoOutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoOutsideStaticRoutes != nil {
		{
			size, err := m.NoOutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_OutsideStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_OutsideStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OutsideStaticRoutes != nil {
		{
			size, err := m.OutsideStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_NoGlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoGlobalNetwork != nil {
		{
			size, err := m.NoGlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_GlobalNetworkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetworkList != nil {
		{
			size, err := m.GlobalNetworkList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_NoDcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_NoDcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoDcClusterGroup != nil {
		{
			size, err := m.NoDcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_DcClusterGroupOutsideVn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_DcClusterGroupOutsideVn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupOutsideVn != nil {
		{
			size, err := m.DcClusterGroupOutsideVn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_DcClusterGroupInsideVn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_DcClusterGroupInsideVn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupInsideVn != nil {
		{
			size, err := m.DcClusterGroupInsideVn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_SmConnectionPublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_SmConnectionPublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPublicIp != nil {
		{
			size, err := m.SmConnectionPublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_SmConnectionPvtIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_SmConnectionPvtIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPvtIp != nil {
		{
			size, err := m.SmConnectionPvtIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCReplaceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicesVPCReplaceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCReplaceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecurityGroupChoice != nil {
		{
			size := m.SecurityGroupChoice.Size()
			i -= size
			if _, err := m.SecurityGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InternetVipChoice != nil {
		{
			size := m.InternetVipChoice.Size()
			i -= size
			if _, err := m.InternetVipChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WorkerNodes != nil {
		{
			size := m.WorkerNodes.Size()
			i -= size
			if _, err := m.WorkerNodes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DiskSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.DiskSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.Deployment != nil {
		{
			size := m.Deployment.Size()
			i -= size
			if _, err := m.Deployment.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AzNodes) > 0 {
		for iNdEx := len(m.AzNodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AzNodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.SshKey) > 0 {
		i -= len(m.SshKey)
		copy(dAtA[i:], m.SshKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SshKey)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.InstanceType) > 0 {
		i -= len(m.InstanceType)
		copy(dAtA[i:], m.InstanceType)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InstanceType)))
		i--
		dAtA[i] = 0x4a
	}
	if m.TgwChoice != nil {
		{
			size := m.TgwChoice.Size()
			i -= size
			if _, err := m.TgwChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServiceVpcChoice != nil {
		{
			size := m.ServiceVpcChoice.Size()
			i -= size
			if _, err := m.ServiceVpcChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AwsRegion) > 0 {
		i -= len(m.AwsRegion)
		copy(dAtA[i:], m.AwsRegion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsRegion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServicesVPCReplaceType_NewVpc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCReplaceType_NewVpc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NewVpc != nil {
		{
			size, err := m.NewVpc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCReplaceType_VpcId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCReplaceType_VpcId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.VpcId)
	copy(dAtA[i:], m.VpcId)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.VpcId)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *ServicesVPCReplaceType_NewTgw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCReplaceType_NewTgw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NewTgw != nil {
		{
			size, err := m.NewTgw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCReplaceType_ExistingTgw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCReplaceType_ExistingTgw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExistingTgw != nil {
		{
			size, err := m.ExistingTgw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCReplaceType_NodesPerAz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCReplaceType_NodesPerAz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.NodesPerAz))
	i--
	dAtA[i] = 0x60
	return len(dAtA) - i, nil
}
func (m *ServicesVPCReplaceType_AwsCred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCReplaceType_AwsCred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AwsCred != nil {
		{
			size, err := m.AwsCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCReplaceType_Assisted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCReplaceType_Assisted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Assisted != nil {
		{
			size, err := m.Assisted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCReplaceType_TotalNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCReplaceType_TotalNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.TotalNodes))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xd8
	return len(dAtA) - i, nil
}
func (m *ServicesVPCReplaceType_NoWorkerNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCReplaceType_NoWorkerNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoWorkerNodes != nil {
		{
			size, err := m.NoWorkerNodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCReplaceType_DisableInternetVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCReplaceType_DisableInternetVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableInternetVip != nil {
		{
			size, err := m.DisableInternetVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCReplaceType_EnableInternetVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCReplaceType_EnableInternetVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableInternetVip != nil {
		{
			size, err := m.EnableInternetVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCReplaceType_F5XcSecurityGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCReplaceType_F5XcSecurityGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.F5XcSecurityGroup != nil {
		{
			size, err := m.F5XcSecurityGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ServicesVPCReplaceType_CustomSecurityGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesVPCReplaceType_CustomSecurityGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomSecurityGroup != nil {
		{
			size, err := m.CustomSecurityGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *VPCAttachmentType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCAttachmentType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VPCAttachmentType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
		for iNdEx := len(keysForLabels) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Labels[string(keysForLabels[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForLabels[iNdEx])
			copy(dAtA[i:], keysForLabels[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForLabels[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.VpcId) > 0 {
		i -= len(m.VpcId)
		copy(dAtA[i:], m.VpcId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VpcId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VPCIpPrefixesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCIpPrefixesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VPCIpPrefixesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefixes) > 0 {
		for iNdEx := len(m.Prefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Prefixes[iNdEx])
			copy(dAtA[i:], m.Prefixes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Prefixes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VPCAttachmentListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCAttachmentListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VPCAttachmentListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VpcList) > 0 {
		for iNdEx := len(m.VpcList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VpcList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActiveServicePoliciesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveServicePoliciesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveServicePoliciesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServicePolicies) > 0 {
		for iNdEx := len(m.ServicePolicies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServicePolicies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SecurityConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityConfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityConfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EastWestServicePolicyChoice != nil {
		{
			size := m.EastWestServicePolicyChoice.Size()
			i -= size
			if _, err := m.EastWestServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SecurityConfigType_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityConfigType_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SecurityConfigType_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityConfigType_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SecurityConfigType_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityConfigType_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *SecurityConfigType_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityConfigType_ActiveNetworkPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveNetworkPolicies != nil {
		{
			size, err := m.ActiveNetworkPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *SecurityConfigType_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityConfigType_ForwardProxyAllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardProxyAllowAll != nil {
		{
			size, err := m.ForwardProxyAllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *SecurityConfigType_NoEastWestPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityConfigType_NoEastWestPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoEastWestPolicy != nil {
		{
			size, err := m.NoEastWestPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *SecurityConfigType_ActiveEastWestServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityConfigType_ActiveEastWestServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEastWestServicePolicies != nil {
		{
			size, err := m.ActiveEastWestServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *SecurityConfigType_EastWestServicePolicyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityConfigType_EastWestServicePolicyAllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EastWestServicePolicyAllowAll != nil {
		{
			size, err := m.EastWestServicePolicyAllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *SecurityConfigType_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityConfigType_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *AWSVPNTunnelConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSVPNTunnelConfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSVPNTunnelConfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TunnelRemoteIp) > 0 {
		for iNdEx := len(m.TunnelRemoteIp) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TunnelRemoteIp[iNdEx])
			copy(dAtA[i:], m.TunnelRemoteIp[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.TunnelRemoteIp[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AWSTGWInfoConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSTGWInfoConfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSTGWInfoConfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VpcName) > 0 {
		i -= len(m.VpcName)
		copy(dAtA[i:], m.VpcName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VpcName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PrivateIps) > 0 {
		for iNdEx := len(m.PrivateIps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PrivateIps[iNdEx])
			copy(dAtA[i:], m.PrivateIps[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.PrivateIps[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.PublicIps) > 0 {
		for iNdEx := len(m.PublicIps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PublicIps[iNdEx])
			copy(dAtA[i:], m.PublicIps[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.PublicIps[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SubnetIds) > 0 {
		for iNdEx := len(m.SubnetIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubnetIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.VpcId) > 0 {
		i -= len(m.VpcId)
		copy(dAtA[i:], m.VpcId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VpcId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TgwId) > 0 {
		i -= len(m.TgwId)
		copy(dAtA[i:], m.TgwId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TgwId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AWSTGWResourceShareType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSTGWResourceShareType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSTGWResourceShareType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReceiverAccountId) > 0 {
		for iNdEx := len(m.ReceiverAccountId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReceiverAccountId[iNdEx])
			copy(dAtA[i:], m.ReceiverAccountId[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ReceiverAccountId[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.DeploymentStatus) > 0 {
		i -= len(m.DeploymentStatus)
		copy(dAtA[i:], m.DeploymentStatus)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DeploymentStatus)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.InvitationStatus) > 0 {
		i -= len(m.InvitationStatus)
		copy(dAtA[i:], m.InvitationStatus)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InvitationStatus)))
		i--
		dAtA[i] = 0x62
	}
	if m.AllowExternalPrinciples {
		i--
		if m.AllowExternalPrinciples {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.OwnerAccountId) > 0 {
		i -= len(m.OwnerAccountId)
		copy(dAtA[i:], m.OwnerAccountId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OwnerAccountId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ResourceShareInvitationArn) > 0 {
		i -= len(m.ResourceShareInvitationArn)
		copy(dAtA[i:], m.ResourceShareInvitationArn)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ResourceShareInvitationArn)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ResourceShareArn) > 0 {
		i -= len(m.ResourceShareArn)
		copy(dAtA[i:], m.ResourceShareArn)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ResourceShareArn)))
		i--
		dAtA[i] = 0x22
	}
	if m.LastUpdatedTime != nil {
		{
			size, err := m.LastUpdatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CreationTime != nil {
		{
			size, err := m.CreationTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ResourceShareName) > 0 {
		i -= len(m.ResourceShareName)
		copy(dAtA[i:], m.ResourceShareName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ResourceShareName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AWSTGWStatusType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSTGWStatusType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AWSTGWStatusType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatusMsg) > 0 {
		i -= len(m.StatusMsg)
		copy(dAtA[i:], m.StatusMsg)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.StatusMsg)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.TgwState) > 0 {
		i -= len(m.TgwState)
		copy(dAtA[i:], m.TgwState)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TgwState)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TgwRegion) > 0 {
		i -= len(m.TgwRegion)
		copy(dAtA[i:], m.TgwRegion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TgwRegion)))
		i--
		dAtA[i] = 0x32
	}
	if m.TgwCreationTime != nil {
		{
			size, err := m.TgwCreationTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TgwAmazonAsn != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TgwAmazonAsn))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TgwOwnerAccount) > 0 {
		i -= len(m.TgwOwnerAccount)
		copy(dAtA[i:], m.TgwOwnerAccount)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TgwOwnerAccount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TgwArn) > 0 {
		i -= len(m.TgwArn)
		copy(dAtA[i:], m.TgwArn)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TgwArn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TgwId) > 0 {
		i -= len(m.TgwId)
		copy(dAtA[i:], m.TgwId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TgwId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SiteState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteState))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xd0
	}
	if m.DirectConnectInfo != nil {
		{
			size, err := m.DirectConnectInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.TfParams != nil {
		{
			size, err := m.TfParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xba
	}
	if len(m.Tunnels) > 0 {
		for iNdEx := len(m.Tunnels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tunnels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.KubernetesUpgradeDrain != nil {
		{
			size, err := m.KubernetesUpgradeDrain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.CustomDns != nil {
		{
			size, err := m.CustomDns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.ValidationState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidationState))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if len(m.SiteErrors) > 0 {
		for iNdEx := len(m.SiteErrors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SiteErrors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.DirectConnectChoice != nil {
		{
			size := m.DirectConnectChoice.Size()
			i -= size
			if _, err := m.DirectConnectChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ErrorDescription) > 0 {
		i -= len(m.ErrorDescription)
		copy(dAtA[i:], m.ErrorDescription)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ErrorDescription)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if len(m.SuggestedAction) > 0 {
		i -= len(m.SuggestedAction)
		copy(dAtA[i:], m.SuggestedAction)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SuggestedAction)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.SiteToSiteTunnelIp) > 0 {
		i -= len(m.SiteToSiteTunnelIp)
		copy(dAtA[i:], m.SiteToSiteTunnelIp)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SiteToSiteTunnelIp)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if len(m.VipParamsPerAz) > 0 {
		for iNdEx := len(m.VipParamsPerAz) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VipParamsPerAz[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.Os != nil {
		{
			size, err := m.Os.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Sw != nil {
		{
			size, err := m.Sw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TgwInfo != nil {
		{
			size, err := m.TgwInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.UserModificationTimestamp != nil {
		{
			size, err := m.UserModificationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x42
	}
	if m.VnConfig != nil {
		{
			size, err := m.VnConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.VpcIpPrefixes) > 0 {
		keysForVpcIpPrefixes := make([]string, 0, len(m.VpcIpPrefixes))
		for k := range m.VpcIpPrefixes {
			keysForVpcIpPrefixes = append(keysForVpcIpPrefixes, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForVpcIpPrefixes)
		for iNdEx := len(keysForVpcIpPrefixes) - 1; iNdEx >= 0; iNdEx-- {
			v := m.VpcIpPrefixes[string(keysForVpcIpPrefixes[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForVpcIpPrefixes[iNdEx])
			copy(dAtA[i:], keysForVpcIpPrefixes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForVpcIpPrefixes[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.OperatingSystemVersion) > 0 {
		i -= len(m.OperatingSystemVersion)
		copy(dAtA[i:], m.OperatingSystemVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		i -= len(m.VolterraSoftwareVersion)
		copy(dAtA[i:], m.VolterraSoftwareVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.TgwSecurity != nil {
		{
			size, err := m.TgwSecurity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VpcAttachments != nil {
		{
			size, err := m.VpcAttachments.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AwsParameters != nil {
		{
			size, err := m.AwsParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DirectConnectDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DirectConnectDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnectDisabled != nil {
		{
			size, err := m.DirectConnectDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DirectConnectEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DirectConnectEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnectEnabled != nil {
		{
			size, err := m.DirectConnectEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BlockAllServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BlockAllServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockAllServices != nil {
		{
			size, err := m.BlockAllServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_PrivateConnectivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_PrivateConnectivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateConnectivity != nil {
		{
			size, err := m.PrivateConnectivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KubernetesUpgradeDrain != nil {
		{
			size, err := m.KubernetesUpgradeDrain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.CustomDns != nil {
		{
			size, err := m.CustomDns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.DirectConnectChoice != nil {
		{
			size := m.DirectConnectChoice.Size()
			i -= size
			if _, err := m.DirectConnectChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.Os != nil {
		{
			size, err := m.Os.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Sw != nil {
		{
			size, err := m.Sw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.VnConfig != nil {
		{
			size, err := m.VnConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TgwSecurity != nil {
		{
			size, err := m.TgwSecurity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VpcAttachments != nil {
		{
			size, err := m.VpcAttachments.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AwsParameters != nil {
		{
			size, err := m.AwsParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DirectConnectDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DirectConnectDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnectDisabled != nil {
		{
			size, err := m.DirectConnectDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DirectConnectEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DirectConnectEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnectEnabled != nil {
		{
			size, err := m.DirectConnectEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BlockAllServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BlockAllServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockAllServices != nil {
		{
			size, err := m.BlockAllServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_PrivateConnectivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_PrivateConnectivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateConnectivity != nil {
		{
			size, err := m.PrivateConnectivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KubernetesUpgradeDrain != nil {
		{
			size, err := m.KubernetesUpgradeDrain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.CustomDns != nil {
		{
			size, err := m.CustomDns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.DirectConnectChoice != nil {
		{
			size := m.DirectConnectChoice.Size()
			i -= size
			if _, err := m.DirectConnectChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if m.AwsParameters != nil {
		{
			size, err := m.AwsParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.VnConfig != nil {
		{
			size, err := m.VnConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TgwSecurity != nil {
		{
			size, err := m.TgwSecurity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VpcAttachments != nil {
		{
			size, err := m.VpcAttachments.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DirectConnectDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DirectConnectDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnectDisabled != nil {
		{
			size, err := m.DirectConnectDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DirectConnectEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DirectConnectEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnectEnabled != nil {
		{
			size, err := m.DirectConnectEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BlockAllServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BlockAllServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockAllServices != nil {
		{
			size, err := m.BlockAllServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_PrivateConnectivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_PrivateConnectivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateConnectivity != nil {
		{
			size, err := m.PrivateConnectivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SiteState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteState))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xd0
	}
	if m.DirectConnectInfo != nil {
		{
			size, err := m.DirectConnectInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if len(m.Tunnels) > 0 {
		for iNdEx := len(m.Tunnels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tunnels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.KubernetesUpgradeDrain != nil {
		{
			size, err := m.KubernetesUpgradeDrain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.CustomDns != nil {
		{
			size, err := m.CustomDns.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.ValidationState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidationState))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if len(m.SiteErrors) > 0 {
		for iNdEx := len(m.SiteErrors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SiteErrors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.DirectConnectChoice != nil {
		{
			size := m.DirectConnectChoice.Size()
			i -= size
			if _, err := m.DirectConnectChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.ErrorDescription) > 0 {
		i -= len(m.ErrorDescription)
		copy(dAtA[i:], m.ErrorDescription)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ErrorDescription)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if len(m.SuggestedAction) > 0 {
		i -= len(m.SuggestedAction)
		copy(dAtA[i:], m.SuggestedAction)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SuggestedAction)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.VipParamsPerAz) > 0 {
		for iNdEx := len(m.VipParamsPerAz) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VipParamsPerAz[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TgwInfo != nil {
		{
			size, err := m.TgwInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.UserModificationTimestamp != nil {
		{
			size, err := m.UserModificationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.VnConfig != nil {
		{
			size, err := m.VnConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.VpcIpPrefixes) > 0 {
		keysForVpcIpPrefixes := make([]string, 0, len(m.VpcIpPrefixes))
		for k := range m.VpcIpPrefixes {
			keysForVpcIpPrefixes = append(keysForVpcIpPrefixes, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForVpcIpPrefixes)
		for iNdEx := len(keysForVpcIpPrefixes) - 1; iNdEx >= 0; iNdEx-- {
			v := m.VpcIpPrefixes[string(keysForVpcIpPrefixes[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTypes(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForVpcIpPrefixes[iNdEx])
			copy(dAtA[i:], keysForVpcIpPrefixes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForVpcIpPrefixes[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.OperatingSystemVersion) > 0 {
		i -= len(m.OperatingSystemVersion)
		copy(dAtA[i:], m.OperatingSystemVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		i -= len(m.VolterraSoftwareVersion)
		copy(dAtA[i:], m.VolterraSoftwareVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.TgwSecurity != nil {
		{
			size, err := m.TgwSecurity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VpcAttachments != nil {
		{
			size, err := m.VpcAttachments.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AwsParameters != nil {
		{
			size, err := m.AwsParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DirectConnectDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DirectConnectDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnectDisabled != nil {
		{
			size, err := m.DirectConnectDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DirectConnectEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DirectConnectEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectConnectEnabled != nil {
		{
			size, err := m.DirectConnectEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BlockAllServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BlockAllServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockAllServices != nil {
		{
			size, err := m.BlockAllServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_PrivateConnectivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_PrivateConnectivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateConnectivity != nil {
		{
			size, err := m.PrivateConnectivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TGWAssignedASNType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TgwAsn != 0 {
		n += 1 + sovTypes(uint64(m.TgwAsn))
	}
	if m.VolterraSiteAsn != 0 {
		n += 1 + sovTypes(uint64(m.VolterraSiteAsn))
	}
	return n
}

func (m *ExistingTGWType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TgwId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwAsn != 0 {
		n += 1 + sovTypes(uint64(m.TgwAsn))
	}
	if m.VolterraSiteAsn != 0 {
		n += 1 + sovTypes(uint64(m.VolterraSiteAsn))
	}
	return n
}

func (m *TGWParamsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsnChoice != nil {
		n += m.AsnChoice.Size()
	}
	return n
}

func (m *TGWParamsType_SystemGenerated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemGenerated != nil {
		l = m.SystemGenerated.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *TGWParamsType_UserAssigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserAssigned != nil {
		l = m.UserAssigned.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AwsRegion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServiceVpcChoice != nil {
		n += m.ServiceVpcChoice.Size()
	}
	if m.TgwChoice != nil {
		n += m.TgwChoice.Size()
	}
	l = len(m.AwsCertifiedHw)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.InstanceType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AzNodes) > 0 {
		for _, e := range m.AzNodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.WorkerNodes != nil {
		n += m.WorkerNodes.Size()
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	if m.DiskSize != 0 {
		n += 2 + sovTypes(uint64(m.DiskSize))
	}
	if m.InternetVipChoice != nil {
		n += m.InternetVipChoice.Size()
	}
	if m.SecurityGroupChoice != nil {
		n += m.SecurityGroupChoice.Size()
	}
	return n
}

func (m *ServicesVPCType_NewVpc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewVpc != nil {
		l = m.NewVpc.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCType_VpcId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VpcId)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ServicesVPCType_NewTgw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewTgw != nil {
		l = m.NewTgw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCType_ExistingTgw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExistingTgw != nil {
		l = m.ExistingTgw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCType_NodesPerAz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.NodesPerAz))
	return n
}
func (m *ServicesVPCType_AwsCred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsCred != nil {
		l = m.AwsCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCType_Assisted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Assisted != nil {
		l = m.Assisted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCType_TotalNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.TotalNodes))
	return n
}
func (m *ServicesVPCType_NoWorkerNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWorkerNodes != nil {
		l = m.NoWorkerNodes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCType_DisableInternetVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableInternetVip != nil {
		l = m.DisableInternetVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCType_EnableInternetVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableInternetVip != nil {
		l = m.EnableInternetVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCType_F5XcSecurityGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5XcSecurityGroup != nil {
		l = m.F5XcSecurityGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCType_CustomSecurityGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomSecurityGroup != nil {
		l = m.CustomSecurityGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsideStaticRouteChoice != nil {
		n += m.InsideStaticRouteChoice.Size()
	}
	if m.OutsideStaticRouteChoice != nil {
		n += m.OutsideStaticRouteChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	if m.AllowedVipPort != nil {
		l = m.AllowedVipPort.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DcClusterGroupChoice != nil {
		n += m.DcClusterGroupChoice.Size()
	}
	if m.SiteMeshGroupChoice != nil {
		n += m.SiteMeshGroupChoice.Size()
	}
	if m.AllowedVipPortSli != nil {
		l = m.AllowedVipPortSli.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *VnConfiguration_NoInsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoInsideStaticRoutes != nil {
		l = m.NoInsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_InsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsideStaticRoutes != nil {
		l = m.InsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_NoOutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoOutsideStaticRoutes != nil {
		l = m.NoOutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_OutsideStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutsideStaticRoutes != nil {
		l = m.OutsideStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_NoGlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_GlobalNetworkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_NoDcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoDcClusterGroup != nil {
		l = m.NoDcClusterGroup.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_DcClusterGroupOutsideVn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupOutsideVn != nil {
		l = m.DcClusterGroupOutsideVn.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_DcClusterGroupInsideVn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupInsideVn != nil {
		l = m.DcClusterGroupInsideVn.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_SmConnectionPublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPublicIp != nil {
		l = m.SmConnectionPublicIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_SmConnectionPvtIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPvtIp != nil {
		l = m.SmConnectionPvtIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCReplaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AwsRegion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServiceVpcChoice != nil {
		n += m.ServiceVpcChoice.Size()
	}
	if m.TgwChoice != nil {
		n += m.TgwChoice.Size()
	}
	l = len(m.InstanceType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AzNodes) > 0 {
		for _, e := range m.AzNodes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.WorkerNodes != nil {
		n += m.WorkerNodes.Size()
	}
	if m.Deployment != nil {
		n += m.Deployment.Size()
	}
	if m.DiskSize != 0 {
		n += 2 + sovTypes(uint64(m.DiskSize))
	}
	if m.InternetVipChoice != nil {
		n += m.InternetVipChoice.Size()
	}
	if m.SecurityGroupChoice != nil {
		n += m.SecurityGroupChoice.Size()
	}
	return n
}

func (m *ServicesVPCReplaceType_NewVpc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewVpc != nil {
		l = m.NewVpc.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCReplaceType_VpcId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VpcId)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ServicesVPCReplaceType_NewTgw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewTgw != nil {
		l = m.NewTgw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCReplaceType_ExistingTgw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExistingTgw != nil {
		l = m.ExistingTgw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCReplaceType_NodesPerAz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.NodesPerAz))
	return n
}
func (m *ServicesVPCReplaceType_AwsCred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsCred != nil {
		l = m.AwsCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCReplaceType_Assisted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Assisted != nil {
		l = m.Assisted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCReplaceType_TotalNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovTypes(uint64(m.TotalNodes))
	return n
}
func (m *ServicesVPCReplaceType_NoWorkerNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWorkerNodes != nil {
		l = m.NoWorkerNodes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCReplaceType_DisableInternetVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableInternetVip != nil {
		l = m.DisableInternetVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCReplaceType_EnableInternetVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableInternetVip != nil {
		l = m.EnableInternetVip.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCReplaceType_F5XcSecurityGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.F5XcSecurityGroup != nil {
		l = m.F5XcSecurityGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicesVPCReplaceType_CustomSecurityGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomSecurityGroup != nil {
		l = m.CustomSecurityGroup.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VPCAttachmentType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *VPCIpPrefixesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Prefixes) > 0 {
		for _, s := range m.Prefixes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *VPCAttachmentListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VpcList) > 0 {
		for _, e := range m.VpcList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ActiveServicePoliciesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ServicePolicies) > 0 {
		for _, e := range m.ServicePolicies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SecurityConfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.EastWestServicePolicyChoice != nil {
		n += m.EastWestServicePolicyChoice.Size()
	}
	return n
}

func (m *SecurityConfigType_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityConfigType_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityConfigType_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityConfigType_ActiveNetworkPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityConfigType_ForwardProxyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityConfigType_NoEastWestPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoEastWestPolicy != nil {
		l = m.NoEastWestPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityConfigType_ActiveEastWestServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEastWestServicePolicies != nil {
		l = m.ActiveEastWestServicePolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityConfigType_EastWestServicePolicyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EastWestServicePolicyAllowAll != nil {
		l = m.EastWestServicePolicyAllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SecurityConfigType_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AWSVPNTunnelConfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.TunnelRemoteIp) > 0 {
		for _, s := range m.TunnelRemoteIp {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	return n
}

func (m *AWSTGWInfoConfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TgwId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.SubnetIds) > 0 {
		for _, e := range m.SubnetIds {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.PublicIps) > 0 {
		for _, s := range m.PublicIps {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.PrivateIps) > 0 {
		for _, s := range m.PrivateIps {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.VpcName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AWSTGWResourceShareType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ResourceShareName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CreationTime != nil {
		l = m.CreationTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LastUpdatedTime != nil {
		l = m.LastUpdatedTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ResourceShareArn)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ResourceShareInvitationArn)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OwnerAccountId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AllowExternalPrinciples {
		n += 2
	}
	l = len(m.InvitationStatus)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.DeploymentStatus)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if len(m.ReceiverAccountId) > 0 {
		for _, s := range m.ReceiverAccountId {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AWSTGWStatusType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TgwId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TgwArn)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TgwOwnerAccount)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwAmazonAsn != 0 {
		n += 1 + sovTypes(uint64(m.TgwAmazonAsn))
	}
	if m.TgwCreationTime != nil {
		l = m.TgwCreationTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TgwRegion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TgwState)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	l = len(m.StatusMsg)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsParameters != nil {
		l = m.AwsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VpcAttachments != nil {
		l = m.VpcAttachments.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwSecurity != nil {
		l = m.TgwSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.VpcIpPrefixes) > 0 {
		for k, v := range m.VpcIpPrefixes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.VnConfig != nil {
		l = m.VnConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.UserModificationTimestamp != nil {
		l = m.UserModificationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwInfo != nil {
		l = m.TgwInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.Sw != nil {
		l = m.Sw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Os != nil {
		l = m.Os.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.VipParamsPerAz) > 0 {
		for _, e := range m.VipParamsPerAz {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.DirectConnectChoice != nil {
		n += m.DirectConnectChoice.Size()
	}
	l = len(m.SiteToSiteTunnelIp)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.SuggestedAction)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.ErrorDescription)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.SiteErrors) > 0 {
		for _, e := range m.SiteErrors {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ValidationState != 0 {
		n += 2 + sovTypes(uint64(m.ValidationState))
	}
	if m.CustomDns != nil {
		l = m.CustomDns.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.KubernetesUpgradeDrain != nil {
		l = m.KubernetesUpgradeDrain.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.Tunnels) > 0 {
		for _, e := range m.Tunnels {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.TfParams != nil {
		l = m.TfParams.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DirectConnectInfo != nil {
		l = m.DirectConnectInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.SiteState != 0 {
		n += 2 + sovTypes(uint64(m.SiteState))
	}
	return n
}

func (m *GlobalSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DirectConnectDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnectDisabled != nil {
		l = m.DirectConnectDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DirectConnectEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnectEnabled != nil {
		l = m.DirectConnectEnabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BlockAllServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockAllServices != nil {
		l = m.BlockAllServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_PrivateConnectivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateConnectivity != nil {
		l = m.PrivateConnectivity.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsParameters != nil {
		l = m.AwsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VpcAttachments != nil {
		l = m.VpcAttachments.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwSecurity != nil {
		l = m.TgwSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VnConfig != nil {
		l = m.VnConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.Sw != nil {
		l = m.Sw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Os != nil {
		l = m.Os.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DirectConnectChoice != nil {
		n += m.DirectConnectChoice.Size()
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.CustomDns != nil {
		l = m.CustomDns.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.KubernetesUpgradeDrain != nil {
		l = m.KubernetesUpgradeDrain.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DirectConnectDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnectDisabled != nil {
		l = m.DirectConnectDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DirectConnectEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnectEnabled != nil {
		l = m.DirectConnectEnabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BlockAllServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockAllServices != nil {
		l = m.BlockAllServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_PrivateConnectivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateConnectivity != nil {
		l = m.PrivateConnectivity.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VpcAttachments != nil {
		l = m.VpcAttachments.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwSecurity != nil {
		l = m.TgwSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VnConfig != nil {
		l = m.VnConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.AwsParameters != nil {
		l = m.AwsParameters.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.DirectConnectChoice != nil {
		n += m.DirectConnectChoice.Size()
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.CustomDns != nil {
		l = m.CustomDns.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.KubernetesUpgradeDrain != nil {
		l = m.KubernetesUpgradeDrain.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DirectConnectDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnectDisabled != nil {
		l = m.DirectConnectDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DirectConnectEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnectEnabled != nil {
		l = m.DirectConnectEnabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BlockAllServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockAllServices != nil {
		l = m.BlockAllServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_PrivateConnectivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateConnectivity != nil {
		l = m.PrivateConnectivity.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AwsParameters != nil {
		l = m.AwsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VpcAttachments != nil {
		l = m.VpcAttachments.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwSecurity != nil {
		l = m.TgwSecurity.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.VpcIpPrefixes) > 0 {
		for k, v := range m.VpcIpPrefixes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.VnConfig != nil {
		l = m.VnConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.UserModificationTimestamp != nil {
		l = m.UserModificationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TgwInfo != nil {
		l = m.TgwInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if len(m.VipParamsPerAz) > 0 {
		for _, e := range m.VipParamsPerAz {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.DirectConnectChoice != nil {
		n += m.DirectConnectChoice.Size()
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.SuggestedAction)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.ErrorDescription)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.SiteErrors) > 0 {
		for _, e := range m.SiteErrors {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ValidationState != 0 {
		n += 2 + sovTypes(uint64(m.ValidationState))
	}
	if m.CustomDns != nil {
		l = m.CustomDns.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.KubernetesUpgradeDrain != nil {
		l = m.KubernetesUpgradeDrain.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.Tunnels) > 0 {
		for _, e := range m.Tunnels {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.DirectConnectInfo != nil {
		l = m.DirectConnectInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.SiteState != 0 {
		n += 2 + sovTypes(uint64(m.SiteState))
	}
	return n
}

func (m *GetSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DirectConnectDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnectDisabled != nil {
		l = m.DirectConnectDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DirectConnectEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectConnectEnabled != nil {
		l = m.DirectConnectEnabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BlockAllServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockAllServices != nil {
		l = m.BlockAllServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_PrivateConnectivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateConnectivity != nil {
		l = m.PrivateConnectivity.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TGWAssignedASNType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TGWAssignedASNType{`,
		`TgwAsn:` + fmt.Sprintf("%v", this.TgwAsn) + `,`,
		`VolterraSiteAsn:` + fmt.Sprintf("%v", this.VolterraSiteAsn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExistingTGWType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExistingTGWType{`,
		`TgwId:` + fmt.Sprintf("%v", this.TgwId) + `,`,
		`TgwAsn:` + fmt.Sprintf("%v", this.TgwAsn) + `,`,
		`VolterraSiteAsn:` + fmt.Sprintf("%v", this.VolterraSiteAsn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TGWParamsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TGWParamsType{`,
		`AsnChoice:` + fmt.Sprintf("%v", this.AsnChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TGWParamsType_SystemGenerated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TGWParamsType_SystemGenerated{`,
		`SystemGenerated:` + strings.Replace(fmt.Sprintf("%v", this.SystemGenerated), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TGWParamsType_UserAssigned) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TGWParamsType_UserAssigned{`,
		`UserAssigned:` + strings.Replace(fmt.Sprintf("%v", this.UserAssigned), "TGWAssignedASNType", "TGWAssignedASNType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAzNodes := "[]*AWSVPCTwoInterfaceNodeType{"
	for _, f := range this.AzNodes {
		repeatedStringForAzNodes += strings.Replace(fmt.Sprintf("%v", f), "AWSVPCTwoInterfaceNodeType", "views.AWSVPCTwoInterfaceNodeType", 1) + ","
	}
	repeatedStringForAzNodes += "}"
	s := strings.Join([]string{`&ServicesVPCType{`,
		`AwsRegion:` + fmt.Sprintf("%v", this.AwsRegion) + `,`,
		`ServiceVpcChoice:` + fmt.Sprintf("%v", this.ServiceVpcChoice) + `,`,
		`TgwChoice:` + fmt.Sprintf("%v", this.TgwChoice) + `,`,
		`AwsCertifiedHw:` + fmt.Sprintf("%v", this.AwsCertifiedHw) + `,`,
		`InstanceType:` + fmt.Sprintf("%v", this.InstanceType) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`AzNodes:` + repeatedStringForAzNodes + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`InternetVipChoice:` + fmt.Sprintf("%v", this.InternetVipChoice) + `,`,
		`SecurityGroupChoice:` + fmt.Sprintf("%v", this.SecurityGroupChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_NewVpc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_NewVpc{`,
		`NewVpc:` + strings.Replace(fmt.Sprintf("%v", this.NewVpc), "AWSVPCParamsType", "views.AWSVPCParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_VpcId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_VpcId{`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_NewTgw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_NewTgw{`,
		`NewTgw:` + strings.Replace(fmt.Sprintf("%v", this.NewTgw), "TGWParamsType", "TGWParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_ExistingTgw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_ExistingTgw{`,
		`ExistingTgw:` + strings.Replace(fmt.Sprintf("%v", this.ExistingTgw), "ExistingTGWType", "ExistingTGWType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_NodesPerAz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_NodesPerAz{`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_AwsCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_AwsCred{`,
		`AwsCred:` + strings.Replace(fmt.Sprintf("%v", this.AwsCred), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_Assisted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_Assisted{`,
		`Assisted:` + strings.Replace(fmt.Sprintf("%v", this.Assisted), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_TotalNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_TotalNodes{`,
		`TotalNodes:` + fmt.Sprintf("%v", this.TotalNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_NoWorkerNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_NoWorkerNodes{`,
		`NoWorkerNodes:` + strings.Replace(fmt.Sprintf("%v", this.NoWorkerNodes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_DisableInternetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_DisableInternetVip{`,
		`DisableInternetVip:` + strings.Replace(fmt.Sprintf("%v", this.DisableInternetVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_EnableInternetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_EnableInternetVip{`,
		`EnableInternetVip:` + strings.Replace(fmt.Sprintf("%v", this.EnableInternetVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_F5XcSecurityGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_F5XcSecurityGroup{`,
		`F5XcSecurityGroup:` + strings.Replace(fmt.Sprintf("%v", this.F5XcSecurityGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCType_CustomSecurityGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCType_CustomSecurityGroup{`,
		`CustomSecurityGroup:` + strings.Replace(fmt.Sprintf("%v", this.CustomSecurityGroup), "SecurityGroupType", "views.SecurityGroupType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration{`,
		`InsideStaticRouteChoice:` + fmt.Sprintf("%v", this.InsideStaticRouteChoice) + `,`,
		`OutsideStaticRouteChoice:` + fmt.Sprintf("%v", this.OutsideStaticRouteChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`AllowedVipPort:` + strings.Replace(fmt.Sprintf("%v", this.AllowedVipPort), "AllowedVIPPorts", "views.AllowedVIPPorts", 1) + `,`,
		`DcClusterGroupChoice:` + fmt.Sprintf("%v", this.DcClusterGroupChoice) + `,`,
		`SiteMeshGroupChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupChoice) + `,`,
		`AllowedVipPortSli:` + strings.Replace(fmt.Sprintf("%v", this.AllowedVipPortSli), "AllowedVIPPorts", "views.AllowedVIPPorts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_NoInsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_NoInsideStaticRoutes{`,
		`NoInsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoInsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_InsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_InsideStaticRoutes{`,
		`InsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.InsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_NoOutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_NoOutsideStaticRoutes{`,
		`NoOutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoOutsideStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_OutsideStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_OutsideStaticRoutes{`,
		`OutsideStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.OutsideStaticRoutes), "SiteStaticRoutesListType", "views.SiteStaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "views.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_NoDcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_NoDcClusterGroup{`,
		`NoDcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoDcClusterGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_DcClusterGroupOutsideVn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_DcClusterGroupOutsideVn{`,
		`DcClusterGroupOutsideVn:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupOutsideVn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_DcClusterGroupInsideVn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_DcClusterGroupInsideVn{`,
		`DcClusterGroupInsideVn:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupInsideVn), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_SmConnectionPublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_SmConnectionPublicIp{`,
		`SmConnectionPublicIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPublicIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_SmConnectionPvtIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_SmConnectionPvtIp{`,
		`SmConnectionPvtIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPvtIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCReplaceType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAzNodes := "[]*AWSVPCTwoInterfaceNodeType{"
	for _, f := range this.AzNodes {
		repeatedStringForAzNodes += strings.Replace(fmt.Sprintf("%v", f), "AWSVPCTwoInterfaceNodeType", "views.AWSVPCTwoInterfaceNodeType", 1) + ","
	}
	repeatedStringForAzNodes += "}"
	s := strings.Join([]string{`&ServicesVPCReplaceType{`,
		`AwsRegion:` + fmt.Sprintf("%v", this.AwsRegion) + `,`,
		`ServiceVpcChoice:` + fmt.Sprintf("%v", this.ServiceVpcChoice) + `,`,
		`TgwChoice:` + fmt.Sprintf("%v", this.TgwChoice) + `,`,
		`InstanceType:` + fmt.Sprintf("%v", this.InstanceType) + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`AzNodes:` + repeatedStringForAzNodes + `,`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`Deployment:` + fmt.Sprintf("%v", this.Deployment) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`InternetVipChoice:` + fmt.Sprintf("%v", this.InternetVipChoice) + `,`,
		`SecurityGroupChoice:` + fmt.Sprintf("%v", this.SecurityGroupChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCReplaceType_NewVpc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCReplaceType_NewVpc{`,
		`NewVpc:` + strings.Replace(fmt.Sprintf("%v", this.NewVpc), "AWSVPCParamsType", "views.AWSVPCParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCReplaceType_VpcId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCReplaceType_VpcId{`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCReplaceType_NewTgw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCReplaceType_NewTgw{`,
		`NewTgw:` + strings.Replace(fmt.Sprintf("%v", this.NewTgw), "TGWParamsType", "TGWParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCReplaceType_ExistingTgw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCReplaceType_ExistingTgw{`,
		`ExistingTgw:` + strings.Replace(fmt.Sprintf("%v", this.ExistingTgw), "ExistingTGWType", "ExistingTGWType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCReplaceType_NodesPerAz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCReplaceType_NodesPerAz{`,
		`NodesPerAz:` + fmt.Sprintf("%v", this.NodesPerAz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCReplaceType_AwsCred) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCReplaceType_AwsCred{`,
		`AwsCred:` + strings.Replace(fmt.Sprintf("%v", this.AwsCred), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCReplaceType_Assisted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCReplaceType_Assisted{`,
		`Assisted:` + strings.Replace(fmt.Sprintf("%v", this.Assisted), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCReplaceType_TotalNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCReplaceType_TotalNodes{`,
		`TotalNodes:` + fmt.Sprintf("%v", this.TotalNodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCReplaceType_NoWorkerNodes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCReplaceType_NoWorkerNodes{`,
		`NoWorkerNodes:` + strings.Replace(fmt.Sprintf("%v", this.NoWorkerNodes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCReplaceType_DisableInternetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCReplaceType_DisableInternetVip{`,
		`DisableInternetVip:` + strings.Replace(fmt.Sprintf("%v", this.DisableInternetVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCReplaceType_EnableInternetVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCReplaceType_EnableInternetVip{`,
		`EnableInternetVip:` + strings.Replace(fmt.Sprintf("%v", this.EnableInternetVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCReplaceType_F5XcSecurityGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCReplaceType_F5XcSecurityGroup{`,
		`F5XcSecurityGroup:` + strings.Replace(fmt.Sprintf("%v", this.F5XcSecurityGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicesVPCReplaceType_CustomSecurityGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicesVPCReplaceType_CustomSecurityGroup{`,
		`CustomSecurityGroup:` + strings.Replace(fmt.Sprintf("%v", this.CustomSecurityGroup), "SecurityGroupType", "views.SecurityGroupType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VPCAttachmentType) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&VPCAttachmentType{`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`}`,
	}, "")
	return s
}
func (this *VPCIpPrefixesType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VPCIpPrefixesType{`,
		`Prefixes:` + fmt.Sprintf("%v", this.Prefixes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VPCAttachmentListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVpcList := "[]*VPCAttachmentType{"
	for _, f := range this.VpcList {
		repeatedStringForVpcList += strings.Replace(f.String(), "VPCAttachmentType", "VPCAttachmentType", 1) + ","
	}
	repeatedStringForVpcList += "}"
	s := strings.Join([]string{`&VPCAttachmentListType{`,
		`VpcList:` + repeatedStringForVpcList + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActiveServicePoliciesType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServicePolicies := "[]*ObjectRefType{"
	for _, f := range this.ServicePolicies {
		repeatedStringForServicePolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForServicePolicies += "}"
	s := strings.Join([]string{`&ActiveServicePoliciesType{`,
		`ServicePolicies:` + repeatedStringForServicePolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType{`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`EastWestServicePolicyChoice:` + fmt.Sprintf("%v", this.EastWestServicePolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_NoEastWestPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_NoEastWestPolicy{`,
		`NoEastWestPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoEastWestPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_ActiveEastWestServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_ActiveEastWestServicePolicies{`,
		`ActiveEastWestServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEastWestServicePolicies), "ActiveServicePoliciesType", "ActiveServicePoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_EastWestServicePolicyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_EastWestServicePolicyAllowAll{`,
		`EastWestServicePolicyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.EastWestServicePolicyAllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityConfigType_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityConfigType_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSVPNTunnelConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSVPNTunnelConfigType{`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`TunnelRemoteIp:` + fmt.Sprintf("%v", this.TunnelRemoteIp) + `,`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSTGWInfoConfigType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubnetIds := "[]*AWSSubnetIdsType{"
	for _, f := range this.SubnetIds {
		repeatedStringForSubnetIds += strings.Replace(fmt.Sprintf("%v", f), "AWSSubnetIdsType", "views.AWSSubnetIdsType", 1) + ","
	}
	repeatedStringForSubnetIds += "}"
	s := strings.Join([]string{`&AWSTGWInfoConfigType{`,
		`TgwId:` + fmt.Sprintf("%v", this.TgwId) + `,`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`SubnetIds:` + repeatedStringForSubnetIds + `,`,
		`PublicIps:` + fmt.Sprintf("%v", this.PublicIps) + `,`,
		`PrivateIps:` + fmt.Sprintf("%v", this.PrivateIps) + `,`,
		`VpcName:` + fmt.Sprintf("%v", this.VpcName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSTGWResourceShareType) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&AWSTGWResourceShareType{`,
		`ResourceShareName:` + fmt.Sprintf("%v", this.ResourceShareName) + `,`,
		`CreationTime:` + strings.Replace(fmt.Sprintf("%v", this.CreationTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`LastUpdatedTime:` + strings.Replace(fmt.Sprintf("%v", this.LastUpdatedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`ResourceShareArn:` + fmt.Sprintf("%v", this.ResourceShareArn) + `,`,
		`ResourceShareInvitationArn:` + fmt.Sprintf("%v", this.ResourceShareInvitationArn) + `,`,
		`OwnerAccountId:` + fmt.Sprintf("%v", this.OwnerAccountId) + `,`,
		`AllowExternalPrinciples:` + fmt.Sprintf("%v", this.AllowExternalPrinciples) + `,`,
		`InvitationStatus:` + fmt.Sprintf("%v", this.InvitationStatus) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`DeploymentStatus:` + fmt.Sprintf("%v", this.DeploymentStatus) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`ReceiverAccountId:` + fmt.Sprintf("%v", this.ReceiverAccountId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSTGWStatusType) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&AWSTGWStatusType{`,
		`TgwId:` + fmt.Sprintf("%v", this.TgwId) + `,`,
		`TgwArn:` + fmt.Sprintf("%v", this.TgwArn) + `,`,
		`TgwOwnerAccount:` + fmt.Sprintf("%v", this.TgwOwnerAccount) + `,`,
		`TgwAmazonAsn:` + fmt.Sprintf("%v", this.TgwAmazonAsn) + `,`,
		`TgwCreationTime:` + strings.Replace(fmt.Sprintf("%v", this.TgwCreationTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`TgwRegion:` + fmt.Sprintf("%v", this.TgwRegion) + `,`,
		`TgwState:` + fmt.Sprintf("%v", this.TgwState) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`StatusMsg:` + fmt.Sprintf("%v", this.StatusMsg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVipParamsPerAz := "[]*PublishVIPParamsPerAz{"
	for _, f := range this.VipParamsPerAz {
		repeatedStringForVipParamsPerAz += strings.Replace(fmt.Sprintf("%v", f), "PublishVIPParamsPerAz", "site.PublishVIPParamsPerAz", 1) + ","
	}
	repeatedStringForVipParamsPerAz += "}"
	repeatedStringForSiteErrors := "[]*SiteError{"
	for _, f := range this.SiteErrors {
		repeatedStringForSiteErrors += strings.Replace(fmt.Sprintf("%v", f), "SiteError", "views.SiteError", 1) + ","
	}
	repeatedStringForSiteErrors += "}"
	repeatedStringForTunnels := "[]*AWSVPNTunnelConfigType{"
	for _, f := range this.Tunnels {
		repeatedStringForTunnels += strings.Replace(f.String(), "AWSVPNTunnelConfigType", "AWSVPNTunnelConfigType", 1) + ","
	}
	repeatedStringForTunnels += "}"
	keysForVpcIpPrefixes := make([]string, 0, len(this.VpcIpPrefixes))
	for k, _ := range this.VpcIpPrefixes {
		keysForVpcIpPrefixes = append(keysForVpcIpPrefixes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVpcIpPrefixes)
	mapStringForVpcIpPrefixes := "map[string]*VPCIpPrefixesType{"
	for _, k := range keysForVpcIpPrefixes {
		mapStringForVpcIpPrefixes += fmt.Sprintf("%v: %v,", k, this.VpcIpPrefixes[k])
	}
	mapStringForVpcIpPrefixes += "}"
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`AwsParameters:` + strings.Replace(this.AwsParameters.String(), "ServicesVPCType", "ServicesVPCType", 1) + `,`,
		`VpcAttachments:` + strings.Replace(this.VpcAttachments.String(), "VPCAttachmentListType", "VPCAttachmentListType", 1) + `,`,
		`TgwSecurity:` + strings.Replace(this.TgwSecurity.String(), "SecurityConfigType", "SecurityConfigType", 1) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`VpcIpPrefixes:` + mapStringForVpcIpPrefixes + `,`,
		`VnConfig:` + strings.Replace(this.VnConfig.String(), "VnConfiguration", "VnConfiguration", 1) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`UserModificationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.UserModificationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`TgwInfo:` + strings.Replace(this.TgwInfo.String(), "AWSTGWInfoConfigType", "AWSTGWInfoConfigType", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`Sw:` + strings.Replace(fmt.Sprintf("%v", this.Sw), "VolterraSoftwareType", "views.VolterraSoftwareType", 1) + `,`,
		`Os:` + strings.Replace(fmt.Sprintf("%v", this.Os), "OperatingSystemType", "views.OperatingSystemType", 1) + `,`,
		`VipParamsPerAz:` + repeatedStringForVipParamsPerAz + `,`,
		`DirectConnectChoice:` + fmt.Sprintf("%v", this.DirectConnectChoice) + `,`,
		`SiteToSiteTunnelIp:` + fmt.Sprintf("%v", this.SiteToSiteTunnelIp) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`SuggestedAction:` + fmt.Sprintf("%v", this.SuggestedAction) + `,`,
		`ErrorDescription:` + fmt.Sprintf("%v", this.ErrorDescription) + `,`,
		`SiteErrors:` + repeatedStringForSiteErrors + `,`,
		`ValidationState:` + fmt.Sprintf("%v", this.ValidationState) + `,`,
		`CustomDns:` + strings.Replace(fmt.Sprintf("%v", this.CustomDns), "CustomDNS", "views.CustomDNS", 1) + `,`,
		`KubernetesUpgradeDrain:` + strings.Replace(fmt.Sprintf("%v", this.KubernetesUpgradeDrain), "KubernetesUpgradeDrain", "views.KubernetesUpgradeDrain", 1) + `,`,
		`Tunnels:` + repeatedStringForTunnels + `,`,
		`TfParams:` + strings.Replace(fmt.Sprintf("%v", this.TfParams), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`DirectConnectInfo:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectInfo), "DirectConnectInfo", "views.DirectConnectInfo", 1) + `,`,
		`SiteState:` + fmt.Sprintf("%v", this.SiteState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DirectConnectDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DirectConnectDisabled{`,
		`DirectConnectDisabled:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DirectConnectEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DirectConnectEnabled{`,
		`DirectConnectEnabled:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectEnabled), "DirectConnectConfigType", "views.DirectConnectConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BlockAllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BlockAllServices{`,
		`BlockAllServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockAllServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PrivateConnectivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PrivateConnectivity{`,
		`PrivateConnectivity:` + strings.Replace(fmt.Sprintf("%v", this.PrivateConnectivity), "PrivateConnectConfigType", "views.PrivateConnectConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`AwsParameters:` + strings.Replace(this.AwsParameters.String(), "ServicesVPCType", "ServicesVPCType", 1) + `,`,
		`VpcAttachments:` + strings.Replace(this.VpcAttachments.String(), "VPCAttachmentListType", "VPCAttachmentListType", 1) + `,`,
		`TgwSecurity:` + strings.Replace(this.TgwSecurity.String(), "SecurityConfigType", "SecurityConfigType", 1) + `,`,
		`VnConfig:` + strings.Replace(this.VnConfig.String(), "VnConfiguration", "VnConfiguration", 1) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`Sw:` + strings.Replace(fmt.Sprintf("%v", this.Sw), "VolterraSoftwareType", "views.VolterraSoftwareType", 1) + `,`,
		`Os:` + strings.Replace(fmt.Sprintf("%v", this.Os), "OperatingSystemType", "views.OperatingSystemType", 1) + `,`,
		`DirectConnectChoice:` + fmt.Sprintf("%v", this.DirectConnectChoice) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`CustomDns:` + strings.Replace(fmt.Sprintf("%v", this.CustomDns), "CustomDNS", "views.CustomDNS", 1) + `,`,
		`KubernetesUpgradeDrain:` + strings.Replace(fmt.Sprintf("%v", this.KubernetesUpgradeDrain), "KubernetesUpgradeDrain", "views.KubernetesUpgradeDrain", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DirectConnectDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DirectConnectDisabled{`,
		`DirectConnectDisabled:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DirectConnectEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DirectConnectEnabled{`,
		`DirectConnectEnabled:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectEnabled), "DirectConnectConfigType", "views.DirectConnectConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BlockAllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BlockAllServices{`,
		`BlockAllServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockAllServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_PrivateConnectivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_PrivateConnectivity{`,
		`PrivateConnectivity:` + strings.Replace(fmt.Sprintf("%v", this.PrivateConnectivity), "PrivateConnectConfigType", "views.PrivateConnectConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`VpcAttachments:` + strings.Replace(this.VpcAttachments.String(), "VPCAttachmentListType", "VPCAttachmentListType", 1) + `,`,
		`TgwSecurity:` + strings.Replace(this.TgwSecurity.String(), "SecurityConfigType", "SecurityConfigType", 1) + `,`,
		`VnConfig:` + strings.Replace(this.VnConfig.String(), "VnConfiguration", "VnConfiguration", 1) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`AwsParameters:` + strings.Replace(this.AwsParameters.String(), "ServicesVPCReplaceType", "ServicesVPCReplaceType", 1) + `,`,
		`DirectConnectChoice:` + fmt.Sprintf("%v", this.DirectConnectChoice) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`CustomDns:` + strings.Replace(fmt.Sprintf("%v", this.CustomDns), "CustomDNS", "views.CustomDNS", 1) + `,`,
		`KubernetesUpgradeDrain:` + strings.Replace(fmt.Sprintf("%v", this.KubernetesUpgradeDrain), "KubernetesUpgradeDrain", "views.KubernetesUpgradeDrain", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DirectConnectDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DirectConnectDisabled{`,
		`DirectConnectDisabled:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DirectConnectEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DirectConnectEnabled{`,
		`DirectConnectEnabled:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectEnabled), "DirectConnectConfigType", "views.DirectConnectConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BlockAllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BlockAllServices{`,
		`BlockAllServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockAllServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_PrivateConnectivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_PrivateConnectivity{`,
		`PrivateConnectivity:` + strings.Replace(fmt.Sprintf("%v", this.PrivateConnectivity), "PrivateConnectConfigType", "views.PrivateConnectConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVipParamsPerAz := "[]*PublishVIPParamsPerAz{"
	for _, f := range this.VipParamsPerAz {
		repeatedStringForVipParamsPerAz += strings.Replace(fmt.Sprintf("%v", f), "PublishVIPParamsPerAz", "site.PublishVIPParamsPerAz", 1) + ","
	}
	repeatedStringForVipParamsPerAz += "}"
	repeatedStringForSiteErrors := "[]*SiteError{"
	for _, f := range this.SiteErrors {
		repeatedStringForSiteErrors += strings.Replace(fmt.Sprintf("%v", f), "SiteError", "views.SiteError", 1) + ","
	}
	repeatedStringForSiteErrors += "}"
	repeatedStringForTunnels := "[]*AWSVPNTunnelConfigType{"
	for _, f := range this.Tunnels {
		repeatedStringForTunnels += strings.Replace(f.String(), "AWSVPNTunnelConfigType", "AWSVPNTunnelConfigType", 1) + ","
	}
	repeatedStringForTunnels += "}"
	keysForVpcIpPrefixes := make([]string, 0, len(this.VpcIpPrefixes))
	for k, _ := range this.VpcIpPrefixes {
		keysForVpcIpPrefixes = append(keysForVpcIpPrefixes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVpcIpPrefixes)
	mapStringForVpcIpPrefixes := "map[string]*VPCIpPrefixesType{"
	for _, k := range keysForVpcIpPrefixes {
		mapStringForVpcIpPrefixes += fmt.Sprintf("%v: %v,", k, this.VpcIpPrefixes[k])
	}
	mapStringForVpcIpPrefixes += "}"
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`AwsParameters:` + strings.Replace(this.AwsParameters.String(), "ServicesVPCType", "ServicesVPCType", 1) + `,`,
		`VpcAttachments:` + strings.Replace(this.VpcAttachments.String(), "VPCAttachmentListType", "VPCAttachmentListType", 1) + `,`,
		`TgwSecurity:` + strings.Replace(this.TgwSecurity.String(), "SecurityConfigType", "SecurityConfigType", 1) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`VpcIpPrefixes:` + mapStringForVpcIpPrefixes + `,`,
		`VnConfig:` + strings.Replace(this.VnConfig.String(), "VnConfiguration", "VnConfiguration", 1) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`UserModificationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.UserModificationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`TgwInfo:` + strings.Replace(this.TgwInfo.String(), "AWSTGWInfoConfigType", "AWSTGWInfoConfigType", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`VipParamsPerAz:` + repeatedStringForVipParamsPerAz + `,`,
		`DirectConnectChoice:` + fmt.Sprintf("%v", this.DirectConnectChoice) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`SuggestedAction:` + fmt.Sprintf("%v", this.SuggestedAction) + `,`,
		`ErrorDescription:` + fmt.Sprintf("%v", this.ErrorDescription) + `,`,
		`SiteErrors:` + repeatedStringForSiteErrors + `,`,
		`ValidationState:` + fmt.Sprintf("%v", this.ValidationState) + `,`,
		`CustomDns:` + strings.Replace(fmt.Sprintf("%v", this.CustomDns), "CustomDNS", "views.CustomDNS", 1) + `,`,
		`KubernetesUpgradeDrain:` + strings.Replace(fmt.Sprintf("%v", this.KubernetesUpgradeDrain), "KubernetesUpgradeDrain", "views.KubernetesUpgradeDrain", 1) + `,`,
		`Tunnels:` + repeatedStringForTunnels + `,`,
		`DirectConnectInfo:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectInfo), "DirectConnectInfo", "views.DirectConnectInfo", 1) + `,`,
		`SiteState:` + fmt.Sprintf("%v", this.SiteState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DirectConnectDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DirectConnectDisabled{`,
		`DirectConnectDisabled:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DirectConnectEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DirectConnectEnabled{`,
		`DirectConnectEnabled:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectEnabled), "DirectConnectConfigType", "views.DirectConnectConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BlockAllServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BlockAllServices{`,
		`BlockAllServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockAllServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_PrivateConnectivity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_PrivateConnectivity{`,
		`PrivateConnectivity:` + strings.Replace(fmt.Sprintf("%v", this.PrivateConnectivity), "PrivateConnectConfigType", "views.PrivateConnectConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TGWAssignedASNType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TGWAssignedASNType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TGWAssignedASNType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwAsn", wireType)
			}
			m.TgwAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TgwAsn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSiteAsn", wireType)
			}
			m.VolterraSiteAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolterraSiteAsn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExistingTGWType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExistingTGWType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExistingTGWType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TgwId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwAsn", wireType)
			}
			m.TgwAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TgwAsn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSiteAsn", wireType)
			}
			m.VolterraSiteAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VolterraSiteAsn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TGWParamsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TGWParamsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TGWParamsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemGenerated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AsnChoice = &TGWParamsType_SystemGenerated{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAssigned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TGWAssignedASNType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AsnChoice = &TGWParamsType_UserAssigned{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicesVPCType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicesVPCType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicesVPCType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewVpc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AWSVPCParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceVpcChoice = &ServicesVPCType_NewVpc{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceVpcChoice = &ServicesVPCType_VpcId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTgw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TGWParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TgwChoice = &ServicesVPCType_NewTgw{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistingTgw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExistingTGWType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TgwChoice = &ServicesVPCType_ExistingTgw{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzNodes = append(m.AzNodes, &views.AWSVPCTwoInterfaceNodeType{})
			if err := m.AzNodes[len(m.AzNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &ServicesVPCType_NodesPerAz{v}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &ServicesVPCType_AwsCred{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &ServicesVPCType_Assisted{v}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &ServicesVPCType_TotalNodes{v}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWorkerNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WorkerNodes = &ServicesVPCType_NoWorkerNodes{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableInternetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InternetVipChoice = &ServicesVPCType_DisableInternetVip{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableInternetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InternetVipChoice = &ServicesVPCType_EnableInternetVip{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5XcSecurityGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SecurityGroupChoice = &ServicesVPCType_F5XcSecurityGroup{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomSecurityGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SecurityGroupType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SecurityGroupChoice = &ServicesVPCType_CustomSecurityGroup{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VnConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VnConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VnConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoInsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &VnConfiguration_NoInsideStaticRoutes{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InsideStaticRouteChoice = &VnConfiguration_InsideStaticRoutes{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &VnConfiguration_NoOutsideStaticRoutes{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutsideStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SiteStaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OutsideStaticRouteChoice = &VnConfiguration_OutsideStaticRoutes{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &VnConfiguration_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &VnConfiguration_GlobalNetworkList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedVipPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllowedVipPort == nil {
				m.AllowedVipPort = &views.AllowedVIPPorts{}
			}
			if err := m.AllowedVipPort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &VnConfiguration_NoDcClusterGroup{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupOutsideVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &VnConfiguration_DcClusterGroupOutsideVn{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupInsideVn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &VnConfiguration_DcClusterGroupInsideVn{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &VnConfiguration_SmConnectionPublicIp{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPvtIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &VnConfiguration_SmConnectionPvtIp{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedVipPortSli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllowedVipPortSli == nil {
				m.AllowedVipPortSli = &views.AllowedVIPPorts{}
			}
			if err := m.AllowedVipPortSli.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicesVPCReplaceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicesVPCReplaceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicesVPCReplaceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewVpc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AWSVPCParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceVpcChoice = &ServicesVPCReplaceType_NewVpc{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceVpcChoice = &ServicesVPCReplaceType_VpcId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTgw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TGWParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TgwChoice = &ServicesVPCReplaceType_NewTgw{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistingTgw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExistingTGWType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TgwChoice = &ServicesVPCReplaceType_ExistingTgw{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AzNodes = append(m.AzNodes, &views.AWSVPCTwoInterfaceNodeType{})
			if err := m.AzNodes[len(m.AzNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesPerAz", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &ServicesVPCReplaceType_NodesPerAz{v}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &ServicesVPCReplaceType_AwsCred{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Deployment = &ServicesVPCReplaceType_Assisted{v}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkerNodes = &ServicesVPCReplaceType_TotalNodes{v}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWorkerNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WorkerNodes = &ServicesVPCReplaceType_NoWorkerNodes{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableInternetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InternetVipChoice = &ServicesVPCReplaceType_DisableInternetVip{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableInternetVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InternetVipChoice = &ServicesVPCReplaceType_EnableInternetVip{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F5XcSecurityGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SecurityGroupChoice = &ServicesVPCReplaceType_F5XcSecurityGroup{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomSecurityGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.SecurityGroupType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SecurityGroupChoice = &ServicesVPCReplaceType_CustomSecurityGroup{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCAttachmentType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCAttachmentType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCAttachmentType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCIpPrefixesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCIpPrefixesType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCIpPrefixesType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefixes = append(m.Prefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCAttachmentListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCAttachmentListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCAttachmentListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcList = append(m.VpcList, &VPCAttachmentType{})
			if err := m.VpcList[len(m.VpcList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveServicePoliciesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveServicePoliciesType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveServicePoliciesType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicePolicies = append(m.ServicePolicies, &views.ObjectRefType{})
			if err := m.ServicePolicies[len(m.ServicePolicies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &SecurityConfigType_NoForwardProxy{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &SecurityConfigType_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &SecurityConfigType_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &SecurityConfigType_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &SecurityConfigType_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoEastWestPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EastWestServicePolicyChoice = &SecurityConfigType_NoEastWestPolicy{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEastWestServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActiveServicePoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EastWestServicePolicyChoice = &SecurityConfigType_ActiveEastWestServicePolicies{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EastWestServicePolicyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EastWestServicePolicyChoice = &SecurityConfigType_EastWestServicePolicyAllowAll{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &SecurityConfigType_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSVPNTunnelConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSVPNTunnelConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSVPNTunnelConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelRemoteIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TunnelRemoteIp = append(m.TunnelRemoteIp, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= VPNTunnelType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSTGWInfoConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSTGWInfoConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSTGWInfoConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TgwId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetIds = append(m.SubnetIds, &views.AWSSubnetIdsType{})
			if err := m.SubnetIds[len(m.SubnetIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIps = append(m.PublicIps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateIps = append(m.PrivateIps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSTGWResourceShareType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSTGWResourceShareType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSTGWResourceShareType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceShareName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceShareName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationTime == nil {
				m.CreationTime = &types.Timestamp{}
			}
			if err := m.CreationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdatedTime == nil {
				m.LastUpdatedTime = &types.Timestamp{}
			}
			if err := m.LastUpdatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceShareArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceShareArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceShareInvitationArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceShareInvitationArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowExternalPrinciples", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowExternalPrinciples = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitationStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvitationStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverAccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverAccountId = append(m.ReceiverAccountId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSTGWStatusType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSTGWStatusType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSTGWStatusType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TgwId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TgwArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwOwnerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TgwOwnerAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwAmazonAsn", wireType)
			}
			m.TgwAmazonAsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TgwAmazonAsn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwCreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TgwCreationTime == nil {
				m.TgwCreationTime = &types.Timestamp{}
			}
			if err := m.TgwCreationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TgwRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TgwState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwsParameters == nil {
				m.AwsParameters = &ServicesVPCType{}
			}
			if err := m.AwsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcAttachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcAttachments == nil {
				m.VpcAttachments = &VPCAttachmentListType{}
			}
			if err := m.VpcAttachments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TgwSecurity == nil {
				m.TgwSecurity = &SecurityConfigType{}
			}
			if err := m.TgwSecurity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcIpPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcIpPrefixes == nil {
				m.VpcIpPrefixes = make(map[string]*VPCIpPrefixesType)
			}
			var mapkey string
			var mapvalue *VPCIpPrefixesType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VPCIpPrefixesType{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.VpcIpPrefixes[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VnConfig == nil {
				m.VnConfig = &VnConfiguration{}
			}
			if err := m.VnConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserModificationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserModificationTimestamp == nil {
				m.UserModificationTimestamp = &types.Timestamp{}
			}
			if err := m.UserModificationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TgwInfo == nil {
				m.TgwInfo = &AWSTGWInfoConfigType{}
			}
			if err := m.TgwInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sw == nil {
				m.Sw = &views.VolterraSoftwareType{}
			}
			if err := m.Sw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Os == nil {
				m.Os = &views.OperatingSystemType{}
			}
			if err := m.Os.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipParamsPerAz", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipParamsPerAz = append(m.VipParamsPerAz, &site.PublishVIPParamsPerAz{})
			if err := m.VipParamsPerAz[len(m.VipParamsPerAz)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &GlobalSpecType_DirectConnectDisabled{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DirectConnectConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &GlobalSpecType_DirectConnectEnabled{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteToSiteTunnelIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteToSiteTunnelIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GlobalSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GlobalSpecType_BlockAllServices{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestedAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuggestedAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateConnectivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrivateConnectConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &GlobalSpecType_PrivateConnectivity{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteErrors = append(m.SiteErrors, &views.SiteError{})
			if err := m.SiteErrors[len(m.SiteErrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationState", wireType)
			}
			m.ValidationState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationState |= views.ConfigValidationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomDns == nil {
				m.CustomDns = &views.CustomDNS{}
			}
			if err := m.CustomDns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesUpgradeDrain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KubernetesUpgradeDrain == nil {
				m.KubernetesUpgradeDrain = &views.KubernetesUpgradeDrain{}
			}
			if err := m.KubernetesUpgradeDrain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 998:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tunnels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tunnels = append(m.Tunnels, &AWSVPNTunnelConfigType{})
			if err := m.Tunnels[len(m.Tunnels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 999:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TfParams == nil {
				m.TfParams = &views.ObjectRefType{}
			}
			if err := m.TfParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DirectConnectInfo == nil {
				m.DirectConnectInfo = &views.DirectConnectInfo{}
			}
			if err := m.DirectConnectInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1002:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteState", wireType)
			}
			m.SiteState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SiteState |= site.SiteState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwsParameters == nil {
				m.AwsParameters = &ServicesVPCType{}
			}
			if err := m.AwsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcAttachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcAttachments == nil {
				m.VpcAttachments = &VPCAttachmentListType{}
			}
			if err := m.VpcAttachments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TgwSecurity == nil {
				m.TgwSecurity = &SecurityConfigType{}
			}
			if err := m.TgwSecurity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VnConfig == nil {
				m.VnConfig = &VnConfiguration{}
			}
			if err := m.VnConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sw == nil {
				m.Sw = &views.VolterraSoftwareType{}
			}
			if err := m.Sw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Os == nil {
				m.Os = &views.OperatingSystemType{}
			}
			if err := m.Os.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &CreateSpecType_DirectConnectDisabled{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DirectConnectConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &CreateSpecType_DirectConnectEnabled{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &CreateSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &CreateSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &CreateSpecType_BlockAllServices{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateConnectivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrivateConnectConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &CreateSpecType_PrivateConnectivity{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomDns == nil {
				m.CustomDns = &views.CustomDNS{}
			}
			if err := m.CustomDns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesUpgradeDrain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KubernetesUpgradeDrain == nil {
				m.KubernetesUpgradeDrain = &views.KubernetesUpgradeDrain{}
			}
			if err := m.KubernetesUpgradeDrain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcAttachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcAttachments == nil {
				m.VpcAttachments = &VPCAttachmentListType{}
			}
			if err := m.VpcAttachments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TgwSecurity == nil {
				m.TgwSecurity = &SecurityConfigType{}
			}
			if err := m.TgwSecurity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VnConfig == nil {
				m.VnConfig = &VnConfiguration{}
			}
			if err := m.VnConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwsParameters == nil {
				m.AwsParameters = &ServicesVPCReplaceType{}
			}
			if err := m.AwsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &ReplaceSpecType_DirectConnectDisabled{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DirectConnectConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &ReplaceSpecType_DirectConnectEnabled{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &ReplaceSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &ReplaceSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &ReplaceSpecType_BlockAllServices{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateConnectivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrivateConnectConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &ReplaceSpecType_PrivateConnectivity{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomDns == nil {
				m.CustomDns = &views.CustomDNS{}
			}
			if err := m.CustomDns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesUpgradeDrain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KubernetesUpgradeDrain == nil {
				m.KubernetesUpgradeDrain = &views.KubernetesUpgradeDrain{}
			}
			if err := m.KubernetesUpgradeDrain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwsParameters == nil {
				m.AwsParameters = &ServicesVPCType{}
			}
			if err := m.AwsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcAttachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcAttachments == nil {
				m.VpcAttachments = &VPCAttachmentListType{}
			}
			if err := m.VpcAttachments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwSecurity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TgwSecurity == nil {
				m.TgwSecurity = &SecurityConfigType{}
			}
			if err := m.TgwSecurity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcIpPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcIpPrefixes == nil {
				m.VpcIpPrefixes = make(map[string]*VPCIpPrefixesType)
			}
			var mapkey string
			var mapvalue *VPCIpPrefixesType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VPCIpPrefixesType{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.VpcIpPrefixes[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VnConfig == nil {
				m.VnConfig = &VnConfiguration{}
			}
			if err := m.VnConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserModificationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserModificationTimestamp == nil {
				m.UserModificationTimestamp = &types.Timestamp{}
			}
			if err := m.UserModificationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TgwInfo == nil {
				m.TgwInfo = &AWSTGWInfoConfigType{}
			}
			if err := m.TgwInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipParamsPerAz", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipParamsPerAz = append(m.VipParamsPerAz, &site.PublishVIPParamsPerAz{})
			if err := m.VipParamsPerAz[len(m.VipParamsPerAz)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &GetSpecType_DirectConnectDisabled{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DirectConnectConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &GetSpecType_DirectConnectEnabled{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GetSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GetSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAllServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GetSpecType_BlockAllServices{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestedAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuggestedAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateConnectivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrivateConnectConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DirectConnectChoice = &GetSpecType_PrivateConnectivity{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteErrors = append(m.SiteErrors, &views.SiteError{})
			if err := m.SiteErrors[len(m.SiteErrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationState", wireType)
			}
			m.ValidationState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationState |= views.ConfigValidationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomDns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomDns == nil {
				m.CustomDns = &views.CustomDNS{}
			}
			if err := m.CustomDns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesUpgradeDrain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KubernetesUpgradeDrain == nil {
				m.KubernetesUpgradeDrain = &views.KubernetesUpgradeDrain{}
			}
			if err := m.KubernetesUpgradeDrain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 998:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tunnels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tunnels = append(m.Tunnels, &AWSVPNTunnelConfigType{})
			if err := m.Tunnels[len(m.Tunnels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DirectConnectInfo == nil {
				m.DirectConnectInfo = &views.DirectConnectInfo{}
			}
			if err := m.DirectConnectInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1002:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteState", wireType)
			}
			m.SiteState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SiteState |= site.SiteState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

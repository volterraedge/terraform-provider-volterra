// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/aws_tgw_site/public_customapi.proto

// AWS TGW site
//
// x-displayName: "Configure AWS TGW Site"
// AWS TGW site view defines a required parameters that can be used in CRUD, to create and manage a volterra site in AWS VPC.
// It can be used to either automatically create or Manually assisted site creation in AWS TGW.
//
// View will create following child objects.
//
// * Site
//

package aws_tgw_site

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Request to configure VPC IP prefix set
//
// x-displayName: "Request to configure VPC IP prefix set"
// Request to configure VPC IP prefix set
type SetVPCIpPrefixesRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "default"
	// Namespace for the object to be configured
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "aws-tgw-site-1"
	// Name of the object to be configured
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// VPC IP Prefixes
	//
	// x-displayName: "VPC IP Prefixes"
	// IP prefixes of subnets in the VPC.
	VpcIpPrefixes map[string]*VPCIpPrefixesType `protobuf:"bytes,3,rep,name=vpc_ip_prefixes,json=vpcIpPrefixes,proto3" json:"vpc_ip_prefixes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SetVPCIpPrefixesRequest) Reset()      { *m = SetVPCIpPrefixesRequest{} }
func (*SetVPCIpPrefixesRequest) ProtoMessage() {}
func (*SetVPCIpPrefixesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e82264232f27a80, []int{0}
}
func (m *SetVPCIpPrefixesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetVPCIpPrefixesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetVPCIpPrefixesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetVPCIpPrefixesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetVPCIpPrefixesRequest.Merge(m, src)
}
func (m *SetVPCIpPrefixesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetVPCIpPrefixesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetVPCIpPrefixesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetVPCIpPrefixesRequest proto.InternalMessageInfo

func (m *SetVPCIpPrefixesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetVPCIpPrefixesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetVPCIpPrefixesRequest) GetVpcIpPrefixes() map[string]*VPCIpPrefixesType {
	if m != nil {
		return m.VpcIpPrefixes
	}
	return nil
}

// Response to configure VPC IP prefix set
//
// x-displayName: "Response to configure VPC IP prefix set"
// Response to configure VPC IP prefix set
type SetVPCIpPrefixesResponse struct {
}

func (m *SetVPCIpPrefixesResponse) Reset()      { *m = SetVPCIpPrefixesResponse{} }
func (*SetVPCIpPrefixesResponse) ProtoMessage() {}
func (*SetVPCIpPrefixesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e82264232f27a80, []int{1}
}
func (m *SetVPCIpPrefixesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetVPCIpPrefixesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetVPCIpPrefixesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetVPCIpPrefixesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetVPCIpPrefixesResponse.Merge(m, src)
}
func (m *SetVPCIpPrefixesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetVPCIpPrefixesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetVPCIpPrefixesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetVPCIpPrefixesResponse proto.InternalMessageInfo

// Request to configure VPN Tunnels
//
// x-displayName: "Request to configure VPN Tunnels"
// Request to configure VPN Tunnels
type SetVPNTunnelsRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "default"
	// Namespace for the object to be configured
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "aws-tgw-site-1"
	// Name of the object to be configured
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// AWS VPN tunnel config
	//
	// x-displayName: "AWS VPN Tunnel Config"
	// AWS VPN Tunner Config
	Tunnels []*AWSVPNTunnelConfigType `protobuf:"bytes,998,rep,name=tunnels,proto3" json:"tunnels,omitempty"`
}

func (m *SetVPNTunnelsRequest) Reset()      { *m = SetVPNTunnelsRequest{} }
func (*SetVPNTunnelsRequest) ProtoMessage() {}
func (*SetVPNTunnelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e82264232f27a80, []int{2}
}
func (m *SetVPNTunnelsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetVPNTunnelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetVPNTunnelsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetVPNTunnelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetVPNTunnelsRequest.Merge(m, src)
}
func (m *SetVPNTunnelsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetVPNTunnelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetVPNTunnelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetVPNTunnelsRequest proto.InternalMessageInfo

func (m *SetVPNTunnelsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetVPNTunnelsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetVPNTunnelsRequest) GetTunnels() []*AWSVPNTunnelConfigType {
	if m != nil {
		return m.Tunnels
	}
	return nil
}

// Response to configure VPN Tunnels
//
// x-displayName: "Response to configure VPN Tunnels"
// Response to configure VPN Tunnels
type SetVPNTunnelsResponse struct {
}

func (m *SetVPNTunnelsResponse) Reset()      { *m = SetVPNTunnelsResponse{} }
func (*SetVPNTunnelsResponse) ProtoMessage() {}
func (*SetVPNTunnelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e82264232f27a80, []int{3}
}
func (m *SetVPNTunnelsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetVPNTunnelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetVPNTunnelsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetVPNTunnelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetVPNTunnelsResponse.Merge(m, src)
}
func (m *SetVPNTunnelsResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetVPNTunnelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetVPNTunnelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetVPNTunnelsResponse proto.InternalMessageInfo

// Request to configure TGW Information
//
// x-displayName: "Request to configure TGW Information"
// Request to configure TGW Information
type SetTGWInfoRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "default"
	// Namespace for the object to be configured
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "aws-tgw-site-1"
	// Name of the object to be configured
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// AWS TGW Info Config
	//
	// x-displayName: "AWS TGW Info Config"
	// AWS TGW Info Config
	TgwInfo *AWSTGWInfoConfigType `protobuf:"bytes,3,opt,name=tgw_info,json=tgwInfo,proto3" json:"tgw_info,omitempty"`
	// Direct Connect information
	//
	// x-displayName: "Direct Connect Information"
	// Direct Connect information obtained after creating the site and TGW
	DirectConnectInfo *views.DirectConnectInfo `protobuf:"bytes,4,opt,name=direct_connect_info,json=directConnectInfo,proto3" json:"direct_connect_info,omitempty"`
}

func (m *SetTGWInfoRequest) Reset()      { *m = SetTGWInfoRequest{} }
func (*SetTGWInfoRequest) ProtoMessage() {}
func (*SetTGWInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e82264232f27a80, []int{4}
}
func (m *SetTGWInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetTGWInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetTGWInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetTGWInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetTGWInfoRequest.Merge(m, src)
}
func (m *SetTGWInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetTGWInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetTGWInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetTGWInfoRequest proto.InternalMessageInfo

func (m *SetTGWInfoRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetTGWInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetTGWInfoRequest) GetTgwInfo() *AWSTGWInfoConfigType {
	if m != nil {
		return m.TgwInfo
	}
	return nil
}

func (m *SetTGWInfoRequest) GetDirectConnectInfo() *views.DirectConnectInfo {
	if m != nil {
		return m.DirectConnectInfo
	}
	return nil
}

// Response to configure TGW info
//
// x-displayName: "Response to configure TGW info"
// Response to configure TGW info
type SetTGWInfoResponse struct {
}

func (m *SetTGWInfoResponse) Reset()      { *m = SetTGWInfoResponse{} }
func (*SetTGWInfoResponse) ProtoMessage() {}
func (*SetTGWInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e82264232f27a80, []int{5}
}
func (m *SetTGWInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetTGWInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetTGWInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetTGWInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetTGWInfoResponse.Merge(m, src)
}
func (m *SetTGWInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetTGWInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetTGWInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetTGWInfoResponse proto.InternalMessageInfo

// Request to configure AWS TGW Site VIP information
//
// x-displayName: "Request to configure AWS TGW Site VIP information"
// Request to configure AWS TGW Site VIP information
type SetVIPInfoRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "default"
	// Namespace for the object to be configured
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "aws-tgw-site-1"
	// Name of the object to be configured
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// VIP Params Per AZ
	//
	// x-displayName: "VIP Params Per AZ"
	// x-example: "master-0"
	// VIP Parameters per AZ
	VipParamsPerAz []*site.PublishVIPParamsPerAz `protobuf:"bytes,3,rep,name=vip_params_per_az,json=vipParamsPerAz,proto3" json:"vip_params_per_az,omitempty"`
}

func (m *SetVIPInfoRequest) Reset()      { *m = SetVIPInfoRequest{} }
func (*SetVIPInfoRequest) ProtoMessage() {}
func (*SetVIPInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e82264232f27a80, []int{6}
}
func (m *SetVIPInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetVIPInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetVIPInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetVIPInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetVIPInfoRequest.Merge(m, src)
}
func (m *SetVIPInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetVIPInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetVIPInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetVIPInfoRequest proto.InternalMessageInfo

func (m *SetVIPInfoRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetVIPInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetVIPInfoRequest) GetVipParamsPerAz() []*site.PublishVIPParamsPerAz {
	if m != nil {
		return m.VipParamsPerAz
	}
	return nil
}

// Response to configure AWS TGW Site VIP Information
//
// x-displayName: "Response to configure AWS TGW Site VIP Information"
type SetVIPInfoResponse struct {
}

func (m *SetVIPInfoResponse) Reset()      { *m = SetVIPInfoResponse{} }
func (*SetVIPInfoResponse) ProtoMessage() {}
func (*SetVIPInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e82264232f27a80, []int{7}
}
func (m *SetVIPInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetVIPInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetVIPInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetVIPInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetVIPInfoResponse.Merge(m, src)
}
func (m *SetVIPInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetVIPInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetVIPInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetVIPInfoResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SetVPCIpPrefixesRequest)(nil), "ves.io.schema.views.aws_tgw_site.SetVPCIpPrefixesRequest")
	golang_proto.RegisterType((*SetVPCIpPrefixesRequest)(nil), "ves.io.schema.views.aws_tgw_site.SetVPCIpPrefixesRequest")
	proto.RegisterMapType((map[string]*VPCIpPrefixesType)(nil), "ves.io.schema.views.aws_tgw_site.SetVPCIpPrefixesRequest.VpcIpPrefixesEntry")
	golang_proto.RegisterMapType((map[string]*VPCIpPrefixesType)(nil), "ves.io.schema.views.aws_tgw_site.SetVPCIpPrefixesRequest.VpcIpPrefixesEntry")
	proto.RegisterType((*SetVPCIpPrefixesResponse)(nil), "ves.io.schema.views.aws_tgw_site.SetVPCIpPrefixesResponse")
	golang_proto.RegisterType((*SetVPCIpPrefixesResponse)(nil), "ves.io.schema.views.aws_tgw_site.SetVPCIpPrefixesResponse")
	proto.RegisterType((*SetVPNTunnelsRequest)(nil), "ves.io.schema.views.aws_tgw_site.SetVPNTunnelsRequest")
	golang_proto.RegisterType((*SetVPNTunnelsRequest)(nil), "ves.io.schema.views.aws_tgw_site.SetVPNTunnelsRequest")
	proto.RegisterType((*SetVPNTunnelsResponse)(nil), "ves.io.schema.views.aws_tgw_site.SetVPNTunnelsResponse")
	golang_proto.RegisterType((*SetVPNTunnelsResponse)(nil), "ves.io.schema.views.aws_tgw_site.SetVPNTunnelsResponse")
	proto.RegisterType((*SetTGWInfoRequest)(nil), "ves.io.schema.views.aws_tgw_site.SetTGWInfoRequest")
	golang_proto.RegisterType((*SetTGWInfoRequest)(nil), "ves.io.schema.views.aws_tgw_site.SetTGWInfoRequest")
	proto.RegisterType((*SetTGWInfoResponse)(nil), "ves.io.schema.views.aws_tgw_site.SetTGWInfoResponse")
	golang_proto.RegisterType((*SetTGWInfoResponse)(nil), "ves.io.schema.views.aws_tgw_site.SetTGWInfoResponse")
	proto.RegisterType((*SetVIPInfoRequest)(nil), "ves.io.schema.views.aws_tgw_site.SetVIPInfoRequest")
	golang_proto.RegisterType((*SetVIPInfoRequest)(nil), "ves.io.schema.views.aws_tgw_site.SetVIPInfoRequest")
	proto.RegisterType((*SetVIPInfoResponse)(nil), "ves.io.schema.views.aws_tgw_site.SetVIPInfoResponse")
	golang_proto.RegisterType((*SetVIPInfoResponse)(nil), "ves.io.schema.views.aws_tgw_site.SetVIPInfoResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/aws_tgw_site/public_customapi.proto", fileDescriptor_2e82264232f27a80)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/aws_tgw_site/public_customapi.proto", fileDescriptor_2e82264232f27a80)
}

var fileDescriptor_2e82264232f27a80 = []byte{
	// 984 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xd8, 0x2d, 0xa6, 0x53, 0xb5, 0x4d, 0x96, 0xa2, 0x5a, 0x26, 0x5a, 0x59, 0x16, 0x82,
	0x12, 0xb2, 0xbb, 0x22, 0xa1, 0x3f, 0x88, 0x90, 0x50, 0x92, 0x42, 0x65, 0x81, 0xc0, 0x38, 0x91,
	0x2b, 0x21, 0xa4, 0xd5, 0x78, 0xf3, 0xbc, 0x19, 0x6a, 0xef, 0x0c, 0x3b, 0xb3, 0xeb, 0xa4, 0x28,
	0x12, 0xaa, 0x38, 0x21, 0x21, 0x05, 0x38, 0x73, 0x45, 0x1c, 0xf8, 0x03, 0x10, 0xb9, 0xe4, 0x06,
	0x27, 0x14, 0xc1, 0x25, 0x47, 0xe2, 0x20, 0x54, 0x6e, 0xb9, 0x72, 0x02, 0xed, 0xec, 0x3a, 0xb1,
	0x37, 0xa9, 0xec, 0xba, 0x95, 0xe0, 0xe4, 0x99, 0x79, 0xdf, 0x7b, 0xf3, 0xbd, 0x6f, 0xfc, 0xde,
	0x3e, 0x7c, 0x23, 0x04, 0x61, 0x52, 0x66, 0x09, 0x67, 0x0d, 0xda, 0xc4, 0x0a, 0x29, 0x74, 0x84,
	0x45, 0x3a, 0xc2, 0x96, 0x6e, 0xc7, 0x16, 0x54, 0x82, 0xc5, 0x83, 0x46, 0x8b, 0x3a, 0xb6, 0x13,
	0x08, 0xc9, 0xda, 0x84, 0x53, 0x93, 0xfb, 0x4c, 0x32, 0xad, 0x14, 0x3b, 0x9a, 0xb1, 0xa3, 0xa9,
	0x1c, 0xcd, 0x7e, 0xc7, 0xa2, 0xe1, 0x52, 0xb9, 0x16, 0x34, 0x4c, 0x87, 0xb5, 0x2d, 0x97, 0xb9,
	0xcc, 0x52, 0x8e, 0x8d, 0xa0, 0xa9, 0x76, 0x6a, 0xa3, 0x56, 0x71, 0xc0, 0xe2, 0x94, 0xcb, 0x98,
	0xdb, 0x02, 0x8b, 0x70, 0x6a, 0x11, 0xcf, 0x63, 0x92, 0x48, 0xca, 0x3c, 0x91, 0x58, 0x9f, 0x1b,
	0xe4, 0xc9, 0x78, 0xbf, 0x51, 0x1f, 0x34, 0x2a, 0xda, 0x72, 0x83, 0x43, 0xcf, 0x3e, 0x95, 0x4a,
	0x92, 0xb4, 0xe8, 0x2a, 0x91, 0x90, 0x58, 0xcb, 0x29, 0x2b, 0x08, 0xf0, 0xc2, 0xd4, 0x0d, 0xa5,
	0x93, 0x32, 0xd9, 0x83, 0x08, 0x63, 0xa8, 0x90, 0xac, 0xf1, 0x11, 0x38, 0x32, 0x81, 0xcf, 0x0c,
	0x85, 0xf7, 0x27, 0xf0, 0xfc, 0x69, 0xe8, 0x08, 0x65, 0xf7, 0xa1, 0xca, 0x3f, 0x64, 0xf1, 0x95,
	0x65, 0x90, 0xf5, 0xea, 0x52, 0x85, 0x57, 0x7d, 0x68, 0xd2, 0x75, 0x10, 0x35, 0xf8, 0x38, 0x00,
	0x21, 0xb5, 0x29, 0x7c, 0xce, 0x23, 0x6d, 0x10, 0x9c, 0x38, 0x50, 0x40, 0x25, 0x74, 0xf5, 0x5c,
	0xed, 0xf8, 0x40, 0xd3, 0xf0, 0x99, 0x68, 0x53, 0xc8, 0x2a, 0x83, 0x5a, 0x6b, 0x12, 0x5f, 0x0a,
	0xb9, 0x63, 0x53, 0x6e, 0xf3, 0x24, 0x56, 0x21, 0x57, 0xca, 0x5d, 0x3d, 0x3f, 0xfb, 0x8e, 0x39,
	0xec, 0xe9, 0xcd, 0x87, 0xb0, 0x30, 0xeb, 0xdc, 0x39, 0x3e, 0x7c, 0xd3, 0x93, 0xfe, 0x46, 0xed,
	0x42, 0xd8, 0x7f, 0x56, 0x0c, 0xb0, 0x76, 0x12, 0xa4, 0x4d, 0xe0, 0xdc, 0x5d, 0xd8, 0x48, 0x78,
	0x47, 0x4b, 0xad, 0x82, 0xcf, 0x86, 0xa4, 0x15, 0xc4, 0x94, 0xcf, 0xcf, 0xce, 0x0d, 0xe7, 0x34,
	0x40, 0x68, 0x65, 0x83, 0x43, 0x2d, 0x8e, 0x30, 0x9f, 0xbd, 0x89, 0xca, 0x45, 0x5c, 0x38, 0xc9,
	0x59, 0x70, 0xe6, 0x09, 0x28, 0x7f, 0x8b, 0xf0, 0x65, 0x65, 0x7c, 0x77, 0x25, 0xf0, 0x3c, 0x68,
	0x3d, 0x86, 0xa6, 0x1f, 0xe2, 0xbc, 0x8c, 0x63, 0x14, 0xfe, 0xcc, 0x2b, 0x31, 0x6f, 0x0e, 0x27,
	0xbe, 0x70, 0x67, 0xf9, 0xe8, 0xee, 0x25, 0xe6, 0x35, 0xa9, 0x1b, 0xb1, 0x5f, 0xcc, 0xef, 0x6d,
	0xa2, 0x07, 0xdb, 0x08, 0xd5, 0x7a, 0x21, 0xcb, 0x57, 0xf0, 0xb3, 0x29, 0x9e, 0x49, 0x06, 0x87,
	0x08, 0x4f, 0x2e, 0x83, 0x5c, 0xb9, 0x7d, 0xa7, 0xe2, 0x35, 0xd9, 0xf8, 0xf4, 0xdf, 0xc7, 0x4f,
	0x47, 0xac, 0xa8, 0xd7, 0x64, 0x85, 0x9c, 0xd2, 0xfd, 0xfa, 0x48, 0xf4, 0x93, 0x8b, 0x8f, 0xc9,
	0xd7, 0xf2, 0xd2, 0xed, 0x44, 0x47, 0x5a, 0x1d, 0x3f, 0xb3, 0x4a, 0x7d, 0x70, 0xa4, 0xed, 0x30,
	0xcf, 0x8b, 0x7e, 0x55, 0xf4, 0x33, 0x2a, 0xfa, 0x0b, 0xa7, 0x46, 0xbf, 0xa5, 0xf0, 0x4b, 0x31,
	0x5c, 0x25, 0x34, 0xb9, 0x9a, 0x3e, 0x2a, 0x5f, 0xc6, 0x5a, 0x7f, 0xc6, 0x89, 0x10, 0xdf, 0xc7,
	0x42, 0xd4, 0x2b, 0xd5, 0xc7, 0x13, 0x02, 0xf0, 0x64, 0x18, 0x15, 0x06, 0xf1, 0x49, 0x5b, 0xd8,
	0x1c, 0x7c, 0x9b, 0xdc, 0x4b, 0xaa, 0xe3, 0xa5, 0x14, 0x67, 0xa5, 0x41, 0x35, 0xea, 0xa1, 0x62,
	0xad, 0x5e, 0xa9, 0x56, 0x95, 0x4b, 0x15, 0xfc, 0x85, 0x7b, 0x8b, 0x97, 0x7e, 0xfc, 0x6b, 0x27,
	0x87, 0xbf, 0x42, 0xf9, 0xe9, 0xb3, 0xaf, 0xcc, 0xcc, 0xce, 0xcc, 0xd5, 0x2e, 0x86, 0x94, 0xf7,
	0x01, 0x92, 0x24, 0x8e, 0xd8, 0xc6, 0x49, 0xcc, 0xfe, 0x83, 0xf1, 0xb9, 0x25, 0xd5, 0x8d, 0x17,
	0xaa, 0x15, 0xed, 0x9b, 0x2c, 0x9e, 0x48, 0xff, 0x75, 0xb5, 0xd7, 0xc6, 0x2e, 0xd1, 0xe2, 0xfc,
	0x38, 0xae, 0x89, 0xbc, 0x5f, 0xa2, 0xee, 0x4f, 0x85, 0xd7, 0x43, 0x10, 0x06, 0x65, 0x06, 0xf5,
	0x9a, 0x3e, 0x11, 0xd2, 0x0f, 0x1c, 0x19, 0xf8, 0x60, 0x74, 0x7c, 0x2a, 0x61, 0xa6, 0xd4, 0xbc,
	0xb6, 0xee, 0x18, 0x51, 0x14, 0xa3, 0x4d, 0x3c, 0xe2, 0x42, 0x1b, 0x3c, 0x69, 0x34, 0x88, 0xa0,
	0x8e, 0x11, 0x08, 0xf0, 0xef, 0xff, 0xf6, 0xc7, 0xd7, 0xd9, 0xb7, 0xcb, 0x6f, 0x25, 0x5f, 0x1d,
	0xeb, 0xe8, 0x19, 0x84, 0xf5, 0xc9, 0xd1, 0x7a, 0x73, 0xb0, 0x51, 0x2a, 0xc3, 0xa6, 0x25, 0x40,
	0xda, 0xa9, 0x86, 0x35, 0x8f, 0xa6, 0xb5, 0xad, 0x2c, 0xbe, 0x30, 0x50, 0x15, 0xda, 0xf5, 0x11,
	0x33, 0x4c, 0x95, 0x7b, 0xf1, 0xc6, 0x23, 0xfb, 0x25, 0xb2, 0x7c, 0xf1, 0x64, 0x64, 0xb9, 0x5d,
	0x5e, 0x1c, 0x5b, 0x16, 0xcf, 0x4e, 0x9a, 0x44, 0x24, 0xc9, 0x67, 0x59, 0x8c, 0x8f, 0x8b, 0x43,
	0x9b, 0x1b, 0x29, 0xaf, 0xc1, 0xe6, 0x51, 0x7c, 0xf5, 0xd1, 0x9c, 0x12, 0x25, 0x3e, 0x7f, 0x32,
	0x4a, 0xdc, 0x2a, 0xbf, 0x31, 0xa6, 0x12, 0xbd, 0xf6, 0xd5, 0x27, 0x43, 0x52, 0x5e, 0x23, 0xca,
	0x30, 0xd8, 0x3a, 0x46, 0x94, 0x21, 0x55, 0xc1, 0xff, 0xbd, 0x0c, 0x51, 0xf3, 0xea, 0xc9, 0xf0,
	0x37, 0xc2, 0x17, 0xeb, 0xc9, 0x44, 0x14, 0x77, 0x68, 0x6d, 0xfa, 0xd4, 0xac, 0x06, 0x41, 0x3d,
	0x05, 0x5e, 0x1e, 0x09, 0xfb, 0x7f, 0xa8, 0x84, 0xde, 0xd8, 0x17, 0x7d, 0x69, 0x9a, 0xd4, 0x9d,
	0x47, 0xd3, 0xc5, 0x6b, 0x3b, 0xdb, 0x28, 0xf7, 0xeb, 0x36, 0x7a, 0x71, 0xe8, 0x2b, 0xbe, 0xa7,
	0x86, 0xb7, 0xfb, 0xbf, 0x14, 0xb2, 0x13, 0x68, 0x71, 0x0b, 0xed, 0xee, 0xeb, 0x99, 0xbd, 0x7d,
	0x3d, 0x73, 0xb8, 0xaf, 0xa3, 0x4f, 0xbb, 0x3a, 0xfa, 0xae, 0xab, 0xa3, 0x9f, 0xbb, 0x3a, 0xda,
	0xed, 0xea, 0xe8, 0xf7, 0xae, 0x8e, 0x1e, 0x74, 0xf5, 0xcc, 0x61, 0x57, 0x47, 0x5b, 0x07, 0x7a,
	0x66, 0xe7, 0x40, 0x47, 0xbb, 0x07, 0x7a, 0x66, 0xef, 0x40, 0xcf, 0x7c, 0x50, 0x77, 0x19, 0xbf,
	0xeb, 0x9a, 0x21, 0x6b, 0x49, 0xf0, 0x7d, 0x62, 0x06, 0xc2, 0x52, 0x8b, 0x26, 0xf3, 0xdb, 0x06,
	0xf7, 0x59, 0x48, 0x57, 0xc1, 0x37, 0x7a, 0x66, 0x8b, 0x37, 0x5c, 0x66, 0xc1, 0xba, 0xec, 0x4d,
	0xb6, 0x0f, 0x9b, 0x16, 0x1b, 0x4f, 0xa9, 0x11, 0x70, 0xee, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x7d, 0x1b, 0xa1, 0xde, 0xd0, 0x0b, 0x00, 0x00,
}

func (this *SetVPCIpPrefixesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetVPCIpPrefixesRequest)
	if !ok {
		that2, ok := that.(SetVPCIpPrefixesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.VpcIpPrefixes) != len(that1.VpcIpPrefixes) {
		return false
	}
	for i := range this.VpcIpPrefixes {
		if !this.VpcIpPrefixes[i].Equal(that1.VpcIpPrefixes[i]) {
			return false
		}
	}
	return true
}
func (this *SetVPCIpPrefixesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetVPCIpPrefixesResponse)
	if !ok {
		that2, ok := that.(SetVPCIpPrefixesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetVPNTunnelsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetVPNTunnelsRequest)
	if !ok {
		that2, ok := that.(SetVPNTunnelsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Tunnels) != len(that1.Tunnels) {
		return false
	}
	for i := range this.Tunnels {
		if !this.Tunnels[i].Equal(that1.Tunnels[i]) {
			return false
		}
	}
	return true
}
func (this *SetVPNTunnelsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetVPNTunnelsResponse)
	if !ok {
		that2, ok := that.(SetVPNTunnelsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetTGWInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetTGWInfoRequest)
	if !ok {
		that2, ok := that.(SetTGWInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.TgwInfo.Equal(that1.TgwInfo) {
		return false
	}
	if !this.DirectConnectInfo.Equal(that1.DirectConnectInfo) {
		return false
	}
	return true
}
func (this *SetTGWInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetTGWInfoResponse)
	if !ok {
		that2, ok := that.(SetTGWInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetVIPInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetVIPInfoRequest)
	if !ok {
		that2, ok := that.(SetVIPInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.VipParamsPerAz) != len(that1.VipParamsPerAz) {
		return false
	}
	for i := range this.VipParamsPerAz {
		if !this.VipParamsPerAz[i].Equal(that1.VipParamsPerAz[i]) {
			return false
		}
	}
	return true
}
func (this *SetVIPInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetVIPInfoResponse)
	if !ok {
		that2, ok := that.(SetVIPInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetVPCIpPrefixesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aws_tgw_site.SetVPCIpPrefixesRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	keysForVpcIpPrefixes := make([]string, 0, len(this.VpcIpPrefixes))
	for k, _ := range this.VpcIpPrefixes {
		keysForVpcIpPrefixes = append(keysForVpcIpPrefixes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVpcIpPrefixes)
	mapStringForVpcIpPrefixes := "map[string]*VPCIpPrefixesType{"
	for _, k := range keysForVpcIpPrefixes {
		mapStringForVpcIpPrefixes += fmt.Sprintf("%#v: %#v,", k, this.VpcIpPrefixes[k])
	}
	mapStringForVpcIpPrefixes += "}"
	if this.VpcIpPrefixes != nil {
		s = append(s, "VpcIpPrefixes: "+mapStringForVpcIpPrefixes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetVPCIpPrefixesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&aws_tgw_site.SetVPCIpPrefixesResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetVPNTunnelsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aws_tgw_site.SetVPNTunnelsRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Tunnels != nil {
		s = append(s, "Tunnels: "+fmt.Sprintf("%#v", this.Tunnels)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetVPNTunnelsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&aws_tgw_site.SetVPNTunnelsResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetTGWInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&aws_tgw_site.SetTGWInfoRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.TgwInfo != nil {
		s = append(s, "TgwInfo: "+fmt.Sprintf("%#v", this.TgwInfo)+",\n")
	}
	if this.DirectConnectInfo != nil {
		s = append(s, "DirectConnectInfo: "+fmt.Sprintf("%#v", this.DirectConnectInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetTGWInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&aws_tgw_site.SetTGWInfoResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetVIPInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aws_tgw_site.SetVIPInfoRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.VipParamsPerAz != nil {
		s = append(s, "VipParamsPerAz: "+fmt.Sprintf("%#v", this.VipParamsPerAz)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetVIPInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&aws_tgw_site.SetVIPInfoResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Configure VPC IP prefixes
	//
	// x-displayName: "Configure VPC IP prefixes"
	// Configure VPC IP prefix set
	SetVPCIpPrefixes(ctx context.Context, in *SetVPCIpPrefixesRequest, opts ...grpc.CallOption) (*SetVPCIpPrefixesResponse, error)
	// Configure VPN tunnels
	//
	// x-displayName: "Configure VPN Tunnels"
	// Configure VPC IP prefix set
	SetVPNTunnels(ctx context.Context, in *SetVPNTunnelsRequest, opts ...grpc.CallOption) (*SetVPNTunnelsResponse, error)
	// Configure TGW Information
	//
	// x-displayName: "Configure TGW Information"
	// Configure TGW Information like tgw-id, volterra site's vpc-id
	SetTGWInfo(ctx context.Context, in *SetTGWInfoRequest, opts ...grpc.CallOption) (*SetTGWInfoResponse, error)
	// Configure AWS TGW Site VIP Information
	//
	// x-displayName: "Configure AWS TGW Site VIP Information"
	// Configure AWS TGW Site VIP Information
	SetVIPInfo(ctx context.Context, in *SetVIPInfoRequest, opts ...grpc.CallOption) (*SetVIPInfoResponse, error)
	// Validate AWS TGW Config
	//
	// x-displayName: "Validate AWS TGW Config"
	// Validate AWS TGW Config
	ValidateConfig(ctx context.Context, in *views.ValidateConfigRequest, opts ...grpc.CallOption) (*views.ValidateConfigResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) SetVPCIpPrefixes(ctx context.Context, in *SetVPCIpPrefixesRequest, opts ...grpc.CallOption) (*SetVPCIpPrefixesResponse, error) {
	out := new(SetVPCIpPrefixesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.aws_tgw_site.CustomAPI/SetVPCIpPrefixes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) SetVPNTunnels(ctx context.Context, in *SetVPNTunnelsRequest, opts ...grpc.CallOption) (*SetVPNTunnelsResponse, error) {
	out := new(SetVPNTunnelsResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.aws_tgw_site.CustomAPI/SetVPNTunnels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) SetTGWInfo(ctx context.Context, in *SetTGWInfoRequest, opts ...grpc.CallOption) (*SetTGWInfoResponse, error) {
	out := new(SetTGWInfoResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.aws_tgw_site.CustomAPI/SetTGWInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) SetVIPInfo(ctx context.Context, in *SetVIPInfoRequest, opts ...grpc.CallOption) (*SetVIPInfoResponse, error) {
	out := new(SetVIPInfoResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.aws_tgw_site.CustomAPI/SetVIPInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) ValidateConfig(ctx context.Context, in *views.ValidateConfigRequest, opts ...grpc.CallOption) (*views.ValidateConfigResponse, error) {
	out := new(views.ValidateConfigResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.aws_tgw_site.CustomAPI/ValidateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Configure VPC IP prefixes
	//
	// x-displayName: "Configure VPC IP prefixes"
	// Configure VPC IP prefix set
	SetVPCIpPrefixes(context.Context, *SetVPCIpPrefixesRequest) (*SetVPCIpPrefixesResponse, error)
	// Configure VPN tunnels
	//
	// x-displayName: "Configure VPN Tunnels"
	// Configure VPC IP prefix set
	SetVPNTunnels(context.Context, *SetVPNTunnelsRequest) (*SetVPNTunnelsResponse, error)
	// Configure TGW Information
	//
	// x-displayName: "Configure TGW Information"
	// Configure TGW Information like tgw-id, volterra site's vpc-id
	SetTGWInfo(context.Context, *SetTGWInfoRequest) (*SetTGWInfoResponse, error)
	// Configure AWS TGW Site VIP Information
	//
	// x-displayName: "Configure AWS TGW Site VIP Information"
	// Configure AWS TGW Site VIP Information
	SetVIPInfo(context.Context, *SetVIPInfoRequest) (*SetVIPInfoResponse, error)
	// Validate AWS TGW Config
	//
	// x-displayName: "Validate AWS TGW Config"
	// Validate AWS TGW Config
	ValidateConfig(context.Context, *views.ValidateConfigRequest) (*views.ValidateConfigResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) SetVPCIpPrefixes(ctx context.Context, req *SetVPCIpPrefixesRequest) (*SetVPCIpPrefixesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVPCIpPrefixes not implemented")
}
func (*UnimplementedCustomAPIServer) SetVPNTunnels(ctx context.Context, req *SetVPNTunnelsRequest) (*SetVPNTunnelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVPNTunnels not implemented")
}
func (*UnimplementedCustomAPIServer) SetTGWInfo(ctx context.Context, req *SetTGWInfoRequest) (*SetTGWInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTGWInfo not implemented")
}
func (*UnimplementedCustomAPIServer) SetVIPInfo(ctx context.Context, req *SetVIPInfoRequest) (*SetVIPInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVIPInfo not implemented")
}
func (*UnimplementedCustomAPIServer) ValidateConfig(ctx context.Context, req *views.ValidateConfigRequest) (*views.ValidateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateConfig not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_SetVPCIpPrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVPCIpPrefixesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).SetVPCIpPrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.aws_tgw_site.CustomAPI/SetVPCIpPrefixes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).SetVPCIpPrefixes(ctx, req.(*SetVPCIpPrefixesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_SetVPNTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVPNTunnelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).SetVPNTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.aws_tgw_site.CustomAPI/SetVPNTunnels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).SetVPNTunnels(ctx, req.(*SetVPNTunnelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_SetTGWInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTGWInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).SetTGWInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.aws_tgw_site.CustomAPI/SetTGWInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).SetTGWInfo(ctx, req.(*SetTGWInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_SetVIPInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVIPInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).SetVIPInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.aws_tgw_site.CustomAPI/SetVIPInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).SetVIPInfo(ctx, req.(*SetVIPInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_ValidateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(views.ValidateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).ValidateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.aws_tgw_site.CustomAPI/ValidateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).ValidateConfig(ctx, req.(*views.ValidateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.aws_tgw_site.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetVPCIpPrefixes",
			Handler:    _CustomAPI_SetVPCIpPrefixes_Handler,
		},
		{
			MethodName: "SetVPNTunnels",
			Handler:    _CustomAPI_SetVPNTunnels_Handler,
		},
		{
			MethodName: "SetTGWInfo",
			Handler:    _CustomAPI_SetTGWInfo_Handler,
		},
		{
			MethodName: "SetVIPInfo",
			Handler:    _CustomAPI_SetVIPInfo_Handler,
		},
		{
			MethodName: "ValidateConfig",
			Handler:    _CustomAPI_ValidateConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/aws_tgw_site/public_customapi.proto",
}

func (m *SetVPCIpPrefixesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetVPCIpPrefixesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetVPCIpPrefixesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VpcIpPrefixes) > 0 {
		for k := range m.VpcIpPrefixes {
			v := m.VpcIpPrefixes[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetVPCIpPrefixesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetVPCIpPrefixesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetVPCIpPrefixesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetVPNTunnelsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetVPNTunnelsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetVPNTunnelsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tunnels) > 0 {
		for iNdEx := len(m.Tunnels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tunnels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetVPNTunnelsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetVPNTunnelsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetVPNTunnelsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetTGWInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetTGWInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetTGWInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DirectConnectInfo != nil {
		{
			size, err := m.DirectConnectInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TgwInfo != nil {
		{
			size, err := m.TgwInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetTGWInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetTGWInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetTGWInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetVIPInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetVIPInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetVIPInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VipParamsPerAz) > 0 {
		for iNdEx := len(m.VipParamsPerAz) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VipParamsPerAz[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetVIPInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetVIPInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetVIPInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetVPCIpPrefixesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.VpcIpPrefixes) > 0 {
		for k, v := range m.VpcIpPrefixes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPublicCustomapi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPublicCustomapi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPublicCustomapi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SetVPCIpPrefixesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetVPNTunnelsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.Tunnels) > 0 {
		for _, e := range m.Tunnels {
			l = e.Size()
			n += 2 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *SetVPNTunnelsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetTGWInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.TgwInfo != nil {
		l = m.TgwInfo.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.DirectConnectInfo != nil {
		l = m.DirectConnectInfo.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *SetTGWInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetVIPInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.VipParamsPerAz) > 0 {
		for _, e := range m.VipParamsPerAz {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *SetVIPInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SetVPCIpPrefixesRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForVpcIpPrefixes := make([]string, 0, len(this.VpcIpPrefixes))
	for k, _ := range this.VpcIpPrefixes {
		keysForVpcIpPrefixes = append(keysForVpcIpPrefixes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVpcIpPrefixes)
	mapStringForVpcIpPrefixes := "map[string]*VPCIpPrefixesType{"
	for _, k := range keysForVpcIpPrefixes {
		mapStringForVpcIpPrefixes += fmt.Sprintf("%v: %v,", k, this.VpcIpPrefixes[k])
	}
	mapStringForVpcIpPrefixes += "}"
	s := strings.Join([]string{`&SetVPCIpPrefixesRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`VpcIpPrefixes:` + mapStringForVpcIpPrefixes + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetVPCIpPrefixesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetVPCIpPrefixesResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SetVPNTunnelsRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTunnels := "[]*AWSVPNTunnelConfigType{"
	for _, f := range this.Tunnels {
		repeatedStringForTunnels += strings.Replace(fmt.Sprintf("%v", f), "AWSVPNTunnelConfigType", "AWSVPNTunnelConfigType", 1) + ","
	}
	repeatedStringForTunnels += "}"
	s := strings.Join([]string{`&SetVPNTunnelsRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Tunnels:` + repeatedStringForTunnels + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetVPNTunnelsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetVPNTunnelsResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SetTGWInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetTGWInfoRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`TgwInfo:` + strings.Replace(fmt.Sprintf("%v", this.TgwInfo), "AWSTGWInfoConfigType", "AWSTGWInfoConfigType", 1) + `,`,
		`DirectConnectInfo:` + strings.Replace(fmt.Sprintf("%v", this.DirectConnectInfo), "DirectConnectInfo", "views.DirectConnectInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetTGWInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetTGWInfoResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SetVIPInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVipParamsPerAz := "[]*PublishVIPParamsPerAz{"
	for _, f := range this.VipParamsPerAz {
		repeatedStringForVipParamsPerAz += strings.Replace(fmt.Sprintf("%v", f), "PublishVIPParamsPerAz", "site.PublishVIPParamsPerAz", 1) + ","
	}
	repeatedStringForVipParamsPerAz += "}"
	s := strings.Join([]string{`&SetVIPInfoRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`VipParamsPerAz:` + repeatedStringForVipParamsPerAz + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetVIPInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetVIPInfoResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SetVPCIpPrefixesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetVPCIpPrefixesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetVPCIpPrefixesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcIpPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcIpPrefixes == nil {
				m.VpcIpPrefixes = make(map[string]*VPCIpPrefixesType)
			}
			var mapkey string
			var mapvalue *VPCIpPrefixesType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPublicCustomapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPublicCustomapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VPCIpPrefixesType{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPublicCustomapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.VpcIpPrefixes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetVPCIpPrefixesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetVPCIpPrefixesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetVPCIpPrefixesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetVPNTunnelsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetVPNTunnelsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetVPNTunnelsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 998:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tunnels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tunnels = append(m.Tunnels, &AWSVPNTunnelConfigType{})
			if err := m.Tunnels[len(m.Tunnels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetVPNTunnelsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetVPNTunnelsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetVPNTunnelsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetTGWInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetTGWInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetTGWInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TgwInfo == nil {
				m.TgwInfo = &AWSTGWInfoConfigType{}
			}
			if err := m.TgwInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectConnectInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DirectConnectInfo == nil {
				m.DirectConnectInfo = &views.DirectConnectInfo{}
			}
			if err := m.DirectConnectInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetTGWInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetTGWInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetTGWInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetVIPInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetVIPInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetVIPInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipParamsPerAz", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipParamsPerAz = append(m.VipParamsPerAz, &site.PublishVIPParamsPerAz{})
			if err := m.VipParamsPerAz[len(m.VipParamsPerAz)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetVIPInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetVIPInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetVIPInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)

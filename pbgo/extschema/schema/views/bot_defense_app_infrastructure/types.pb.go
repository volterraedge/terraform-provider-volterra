// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/bot_defense_app_infrastructure/types.proto

package bot_defense_app_infrastructure

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BotDefenseAdvancedRegion
//
// x-displayName: "Bot Defense Advanced Region"
// Defines a selection for Bot Defense Advanced region
type BotDefenseAdvancedRegion int32

const (
	// US
	//
	// x-displayName: "US"
	// US region
	US BotDefenseAdvancedRegion = 0
	// EU
	//
	// x-displayName: "EU"
	// European Union region
	EU BotDefenseAdvancedRegion = 1
	// ASIA
	//
	// x-displayName: "Asia"
	// Asia region
	ASIA BotDefenseAdvancedRegion = 2
)

var BotDefenseAdvancedRegion_name = map[int32]string{
	0: "US",
	1: "EU",
	2: "ASIA",
}

var BotDefenseAdvancedRegion_value = map[string]int32{
	"US":   0,
	"EU":   1,
	"ASIA": 2,
}

func (BotDefenseAdvancedRegion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2f7caa7ec4892083, []int{0}
}

// Location
//
// x-displayName: "Location"
// Region location
type Location int32

const (
	// x-displayName: "AWS_AP_NORTHEAST_1"
	// AWS_AP_NORTHEAST_1
	AWS_AP_NORTHEAST_1 Location = 0
	// x-displayName: "AWS_AP_NORTHEAST_3"
	// AWS_AP_NORTHEAST_3
	AWS_AP_NORTHEAST_3 Location = 1
	// x-displayName: "AWS_AP_SOUTH_1"
	// AWS_AP_SOUTH_1
	AWS_AP_SOUTH_1 Location = 2
	// x-displayName: "AWS_AP_SOUTH_2"
	// AWS_AP_SOUTH_2
	AWS_AP_SOUTH_2 Location = 3
	// x-displayName: "AWS_AP_SOUTHEAST_1"
	// AWS_AP_SOUTHEAST_1
	AWS_AP_SOUTHEAST_1 Location = 4
	// x-displayName: "AWS_AP_SOUTHEAST_2"
	// AWS_AP_SOUTHEAST_2
	AWS_AP_SOUTHEAST_2 Location = 5
	// x-displayName: "AWS_AP_SOUTHEAST_3"
	// AWS_AP_SOUTHEAST_3
	AWS_AP_SOUTHEAST_3 Location = 6
	// x-displayName: "AWS_EU_CENTRAL_1"
	// AWS_EU_CENTRAL_1
	AWS_EU_CENTRAL_1 Location = 7
	// x-displayName: "AWS_EU_NORTH_1"
	// AWS_EU_NORTH_1
	AWS_EU_NORTH_1 Location = 8
	// x-displayName: "AWS_EU_WEST_1"
	// AWS_EU_WEST_1
	AWS_EU_WEST_1 Location = 9
	// x-displayName: "AWS_ME_SOUTH_1"
	// AWS_ME_SOUTH_1
	AWS_ME_SOUTH_1 Location = 10
	// x-displayName: "AWS_SA_EAST_1"
	// AWS_SA_EAST_1
	AWS_SA_EAST_1 Location = 11
	// x-displayName: "AWS_US_EAST_1"
	// AWS_US_EAST_1
	AWS_US_EAST_1 Location = 12
	// x-displayName: "AWS_US_EAST_2"
	// AWS_US_EAST_2
	AWS_US_EAST_2 Location = 13
	// x-displayName: "AWS_US_WEST_1"
	// AWS_US_WEST_1
	AWS_US_WEST_1 Location = 14
	// x-displayName: "AWS_US_WEST_2"
	// AWS_US_WEST_2
	AWS_US_WEST_2 Location = 15
	// x-displayName: "GCP_ASIA_EAST_1"
	// GCP_ASIA_EAST_1
	GCP_ASIA_EAST_1 Location = 16
	// x-displayName: "GCP_ASIA_EAST_2"
	// GCP_ASIA_EAST_2
	GCP_ASIA_EAST_2 Location = 17
	// x-displayName: "GCP_ASIA_NORTHEAST_1"
	// GCP_ASIA_NORTHEAST_1
	GCP_ASIA_NORTHEAST_1 Location = 18
	// x-displayName: "GCP_ASIA_NORTHEAST_2"
	// GCP_ASIA_NORTHEAST_2
	GCP_ASIA_NORTHEAST_2 Location = 19
	// x-displayName: "GCP_ASIA_NORTHEAST_3"
	// GCP_ASIA_NORTHEAST_3
	GCP_ASIA_NORTHEAST_3 Location = 20
	// x-displayName: "GCP_ASIA_SOUTH_1"
	// GCP_ASIA_SOUTH_1
	GCP_ASIA_SOUTH_1 Location = 21
	// x-displayName: "GCP_ASIA_SOUTHEAST_1"
	// GCP_ASIA_SOUTHEAST_1
	GCP_ASIA_SOUTHEAST_1 Location = 22
	// x-displayName: "GCP_ASIA_SOUTHEAST_2"
	// GCP_ASIA_SOUTHEAST_2
	GCP_ASIA_SOUTHEAST_2 Location = 23
	// x-displayName: "GCP_AUSTRALIA_SOUTHEAST_1"
	// GCP_AUSTRALIA_SOUTHEAST_1
	GCP_AUSTRALIA_SOUTHEAST_1 Location = 24
	// x-displayName: "GCP_EUROPE_WEST_1"
	// GCP_EUROPE_WEST_1
	GCP_EUROPE_WEST_1 Location = 25
	// x-displayName: "GCP_EUROPE_WEST_2"
	// GCP_EUROPE_WEST_2
	GCP_EUROPE_WEST_2 Location = 26
	// x-displayName: "GCP_EUROPE_WEST_3"
	// GCP_EUROPE_WEST_3
	GCP_EUROPE_WEST_3 Location = 27
	// x-displayName: "GCP_NORTHAMERICA_NORTHEAST_1"
	// GCP_NORTHAMERICA_NORTHEAST_1
	GCP_NORTHAMERICA_NORTHEAST_1 Location = 28
	// x-displayName: "GCP_NORTHAMERICA_NORTHEAST_2"
	// GCP_NORTHAMERICA_NORTHEAST_2
	GCP_NORTHAMERICA_NORTHEAST_2 Location = 29
	// x-displayName: "GCP_SOUTHAMERICA_EAST_1"
	// GCP_SOUTHAMERICA_EAST_1
	GCP_SOUTHAMERICA_EAST_1 Location = 30
	// x-displayName: "GCP_SOUTHAMERICA_WEST_1"
	// GCP_SOUTHAMERICA_WEST_1
	GCP_SOUTHAMERICA_WEST_1 Location = 31
	// x-displayName: "GCP_US_CENTRAL_1"
	// GCP_US_CENTRAL_1
	GCP_US_CENTRAL_1 Location = 32
	// x-displayName: "GCP_US_EAST_1"
	// GCP_US_EAST_1
	GCP_US_EAST_1 Location = 33
	// x-displayName: "GCP_US_EAST_4"
	// GCP_US_EAST_4
	GCP_US_EAST_4 Location = 34
	// x-displayName: "GCP_US_WEST_1"
	// GCP_US_WEST_1
	GCP_US_WEST_1 Location = 35
	// x-displayName: "GCP_US_WEST_2"
	// GCP_US_WEST_2
	GCP_US_WEST_2 Location = 36
)

var Location_name = map[int32]string{
	0:  "AWS_AP_NORTHEAST_1",
	1:  "AWS_AP_NORTHEAST_3",
	2:  "AWS_AP_SOUTH_1",
	3:  "AWS_AP_SOUTH_2",
	4:  "AWS_AP_SOUTHEAST_1",
	5:  "AWS_AP_SOUTHEAST_2",
	6:  "AWS_AP_SOUTHEAST_3",
	7:  "AWS_EU_CENTRAL_1",
	8:  "AWS_EU_NORTH_1",
	9:  "AWS_EU_WEST_1",
	10: "AWS_ME_SOUTH_1",
	11: "AWS_SA_EAST_1",
	12: "AWS_US_EAST_1",
	13: "AWS_US_EAST_2",
	14: "AWS_US_WEST_1",
	15: "AWS_US_WEST_2",
	16: "GCP_ASIA_EAST_1",
	17: "GCP_ASIA_EAST_2",
	18: "GCP_ASIA_NORTHEAST_1",
	19: "GCP_ASIA_NORTHEAST_2",
	20: "GCP_ASIA_NORTHEAST_3",
	21: "GCP_ASIA_SOUTH_1",
	22: "GCP_ASIA_SOUTHEAST_1",
	23: "GCP_ASIA_SOUTHEAST_2",
	24: "GCP_AUSTRALIA_SOUTHEAST_1",
	25: "GCP_EUROPE_WEST_1",
	26: "GCP_EUROPE_WEST_2",
	27: "GCP_EUROPE_WEST_3",
	28: "GCP_NORTHAMERICA_NORTHEAST_1",
	29: "GCP_NORTHAMERICA_NORTHEAST_2",
	30: "GCP_SOUTHAMERICA_EAST_1",
	31: "GCP_SOUTHAMERICA_WEST_1",
	32: "GCP_US_CENTRAL_1",
	33: "GCP_US_EAST_1",
	34: "GCP_US_EAST_4",
	35: "GCP_US_WEST_1",
	36: "GCP_US_WEST_2",
}

var Location_value = map[string]int32{
	"AWS_AP_NORTHEAST_1":           0,
	"AWS_AP_NORTHEAST_3":           1,
	"AWS_AP_SOUTH_1":               2,
	"AWS_AP_SOUTH_2":               3,
	"AWS_AP_SOUTHEAST_1":           4,
	"AWS_AP_SOUTHEAST_2":           5,
	"AWS_AP_SOUTHEAST_3":           6,
	"AWS_EU_CENTRAL_1":             7,
	"AWS_EU_NORTH_1":               8,
	"AWS_EU_WEST_1":                9,
	"AWS_ME_SOUTH_1":               10,
	"AWS_SA_EAST_1":                11,
	"AWS_US_EAST_1":                12,
	"AWS_US_EAST_2":                13,
	"AWS_US_WEST_1":                14,
	"AWS_US_WEST_2":                15,
	"GCP_ASIA_EAST_1":              16,
	"GCP_ASIA_EAST_2":              17,
	"GCP_ASIA_NORTHEAST_1":         18,
	"GCP_ASIA_NORTHEAST_2":         19,
	"GCP_ASIA_NORTHEAST_3":         20,
	"GCP_ASIA_SOUTH_1":             21,
	"GCP_ASIA_SOUTHEAST_1":         22,
	"GCP_ASIA_SOUTHEAST_2":         23,
	"GCP_AUSTRALIA_SOUTHEAST_1":    24,
	"GCP_EUROPE_WEST_1":            25,
	"GCP_EUROPE_WEST_2":            26,
	"GCP_EUROPE_WEST_3":            27,
	"GCP_NORTHAMERICA_NORTHEAST_1": 28,
	"GCP_NORTHAMERICA_NORTHEAST_2": 29,
	"GCP_SOUTHAMERICA_EAST_1":      30,
	"GCP_SOUTHAMERICA_WEST_1":      31,
	"GCP_US_CENTRAL_1":             32,
	"GCP_US_EAST_1":                33,
	"GCP_US_EAST_4":                34,
	"GCP_US_WEST_1":                35,
	"GCP_US_WEST_2":                36,
}

func (Location) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2f7caa7ec4892083, []int{1}
}

// TrafficType
//
// x-displayName: "Traffic Type"
// Traffic Type
type TrafficType int32

const (
	// x-displayName: "Web"
	// Web traffic
	WEB TrafficType = 0
	// x-displayName: "Mobile"
	// Mobile traffic
	MOBILE TrafficType = 1
)

var TrafficType_name = map[int32]string{
	0: "WEB",
	1: "MOBILE",
}

var TrafficType_value = map[string]int32{
	"WEB":    0,
	"MOBILE": 1,
}

func (TrafficType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2f7caa7ec4892083, []int{2}
}

// EnvironmentType
//
// x-displayName: "Environment Type"
// Environment Type
type EnvironmentType int32

const (
	// x-displayName: "Production"
	// Production environment
	PRODUCTION EnvironmentType = 0
	// x-displayName: "Testing"
	// Testing environment
	TESTING EnvironmentType = 1
)

var EnvironmentType_name = map[int32]string{
	0: "PRODUCTION",
	1: "TESTING",
}

var EnvironmentType_value = map[string]int32{
	"PRODUCTION": 0,
	"TESTING":    1,
}

func (EnvironmentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2f7caa7ec4892083, []int{3}
}

// InfraF5Hosted
//
// x-displayName: "F5 Hosted"
// Infra F5 Hosted
type InfraF5Hosted struct {
	// Bot Defense Advanced Region
	//
	// x-displayName: "Bot Defense Advanced Region"
	// Specify Bot Defense Advanced region to use
	// x-required
	Region BotDefenseAdvancedRegion `protobuf:"varint,2,opt,name=region,proto3,enum=ves.io.schema.views.bot_defense_app_infrastructure.BotDefenseAdvancedRegion" json:"region,omitempty"`
	// Infra Host Name
	//
	// x-displayName: "Infra Host Name"
	// x-required
	// x-example: "www.example.com"
	// Infra Host Name
	InfraHostName string `protobuf:"bytes,3,opt,name=infra_host_name,json=infraHostName,proto3" json:"infra_host_name,omitempty"`
	// Ingress
	//
	// x-displayName: "Ingress"
	// x-required
	// Ingress
	Ingress []*Ingress `protobuf:"bytes,4,rep,name=ingress,proto3" json:"ingress,omitempty"`
	// Egress
	//
	// x-displayName: "Egress"
	// x-required
	// Egress
	Egress []*Egress `protobuf:"bytes,5,rep,name=egress,proto3" json:"egress,omitempty"`
}

func (m *InfraF5Hosted) Reset()      { *m = InfraF5Hosted{} }
func (*InfraF5Hosted) ProtoMessage() {}
func (*InfraF5Hosted) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f7caa7ec4892083, []int{0}
}
func (m *InfraF5Hosted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfraF5Hosted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InfraF5Hosted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfraF5Hosted.Merge(m, src)
}
func (m *InfraF5Hosted) XXX_Size() int {
	return m.Size()
}
func (m *InfraF5Hosted) XXX_DiscardUnknown() {
	xxx_messageInfo_InfraF5Hosted.DiscardUnknown(m)
}

var xxx_messageInfo_InfraF5Hosted proto.InternalMessageInfo

func (m *InfraF5Hosted) GetRegion() BotDefenseAdvancedRegion {
	if m != nil {
		return m.Region
	}
	return US
}

func (m *InfraF5Hosted) GetInfraHostName() string {
	if m != nil {
		return m.InfraHostName
	}
	return ""
}

func (m *InfraF5Hosted) GetIngress() []*Ingress {
	if m != nil {
		return m.Ingress
	}
	return nil
}

func (m *InfraF5Hosted) GetEgress() []*Egress {
	if m != nil {
		return m.Egress
	}
	return nil
}

// Ingress
//
// x-displayName: "Ingress"
// Ingress
type Ingress struct {
	// Type Choice
	//
	// x-displayName: "Type"
	// x-required
	// Hostname or IP
	//
	// Types that are valid to be assigned to TypeChoice:
	//	*Ingress_HostName
	//	*Ingress_IpAddress
	TypeChoice isIngress_TypeChoice `protobuf_oneof:"type_choice"`
	// Location
	//
	// x-displayName: "Location"
	// x-required
	// x-example: "AWS_US_WEST_1"
	// Bot infrastructure region
	Location Location `protobuf:"varint,5,opt,name=location,proto3,enum=ves.io.schema.views.bot_defense_app_infrastructure.Location" json:"location,omitempty"`
}

func (m *Ingress) Reset()      { *m = Ingress{} }
func (*Ingress) ProtoMessage() {}
func (*Ingress) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f7caa7ec4892083, []int{1}
}
func (m *Ingress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ingress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Ingress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ingress.Merge(m, src)
}
func (m *Ingress) XXX_Size() int {
	return m.Size()
}
func (m *Ingress) XXX_DiscardUnknown() {
	xxx_messageInfo_Ingress.DiscardUnknown(m)
}

var xxx_messageInfo_Ingress proto.InternalMessageInfo

type isIngress_TypeChoice interface {
	isIngress_TypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Ingress_HostName struct {
	HostName string `protobuf:"bytes,2,opt,name=host_name,json=hostName,proto3,oneof" json:"host_name,omitempty"`
}
type Ingress_IpAddress struct {
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3,oneof" json:"ip_address,omitempty"`
}

func (*Ingress_HostName) isIngress_TypeChoice()  {}
func (*Ingress_IpAddress) isIngress_TypeChoice() {}

func (m *Ingress) GetTypeChoice() isIngress_TypeChoice {
	if m != nil {
		return m.TypeChoice
	}
	return nil
}

func (m *Ingress) GetHostName() string {
	if x, ok := m.GetTypeChoice().(*Ingress_HostName); ok {
		return x.HostName
	}
	return ""
}

func (m *Ingress) GetIpAddress() string {
	if x, ok := m.GetTypeChoice().(*Ingress_IpAddress); ok {
		return x.IpAddress
	}
	return ""
}

func (m *Ingress) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return AWS_AP_NORTHEAST_1
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Ingress) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Ingress_HostName)(nil),
		(*Ingress_IpAddress)(nil),
	}
}

// Egress
//
// x-displayName: "Egress"
// Egress
type Egress struct {
	// IP Address
	//
	// x-displayName: "IP Address"
	// x-required
	// x-example: "101.0.0.101"
	// Egress IP address
	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Location
	//
	// x-displayName: "Location"
	// x-required
	// x-example: "AWS_US_WEST_1"
	// Region location
	Location Location `protobuf:"varint,3,opt,name=location,proto3,enum=ves.io.schema.views.bot_defense_app_infrastructure.Location" json:"location,omitempty"`
}

func (m *Egress) Reset()      { *m = Egress{} }
func (*Egress) ProtoMessage() {}
func (*Egress) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f7caa7ec4892083, []int{2}
}
func (m *Egress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Egress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Egress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Egress.Merge(m, src)
}
func (m *Egress) XXX_Size() int {
	return m.Size()
}
func (m *Egress) XXX_DiscardUnknown() {
	xxx_messageInfo_Egress.DiscardUnknown(m)
}

var xxx_messageInfo_Egress proto.InternalMessageInfo

func (m *Egress) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *Egress) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return AWS_AP_NORTHEAST_1
}

// GlobalSpecType
//
// x-displayName: "Global Configuration Specification"
// Configuration specification for Bot Defense App Infrastructure
type GlobalSpecType struct {
	// choice
	//
	// x-displayName: "Infra Type"
	// x-required
	// Choose an infra type
	//
	// Types that are valid to be assigned to InfraChoice:
	//	*GlobalSpecType_CloudHosted
	//	*GlobalSpecType_DataCenterHosted
	InfraChoice isGlobalSpecType_InfraChoice `protobuf_oneof:"infra_choice"`
	// Traffic Type
	//
	// x-displayName: "Traffic Type"
	// x-required
	// x-example: "web"
	// Traffic Type
	TrafficType TrafficType `protobuf:"varint,5,opt,name=traffic_type,json=trafficType,proto3,enum=ves.io.schema.views.bot_defense_app_infrastructure.TrafficType" json:"traffic_type,omitempty"`
	// Environment Type
	//
	// x-displayName: "Environment Type"
	// x-example: "Production"
	// Environment Type
	EnvironmentType EnvironmentType `protobuf:"varint,6,opt,name=environment_type,json=environmentType,proto3,enum=ves.io.schema.views.bot_defense_app_infrastructure.EnvironmentType" json:"environment_type,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f7caa7ec4892083, []int{3}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_InfraChoice interface {
	isGlobalSpecType_InfraChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_CloudHosted struct {
	CloudHosted *InfraF5Hosted `protobuf:"bytes,2,opt,name=cloud_hosted,json=cloudHosted,proto3,oneof" json:"cloud_hosted,omitempty"`
}
type GlobalSpecType_DataCenterHosted struct {
	DataCenterHosted *InfraF5Hosted `protobuf:"bytes,3,opt,name=data_center_hosted,json=dataCenterHosted,proto3,oneof" json:"data_center_hosted,omitempty"`
}

func (*GlobalSpecType_CloudHosted) isGlobalSpecType_InfraChoice()      {}
func (*GlobalSpecType_DataCenterHosted) isGlobalSpecType_InfraChoice() {}

func (m *GlobalSpecType) GetInfraChoice() isGlobalSpecType_InfraChoice {
	if m != nil {
		return m.InfraChoice
	}
	return nil
}

func (m *GlobalSpecType) GetCloudHosted() *InfraF5Hosted {
	if x, ok := m.GetInfraChoice().(*GlobalSpecType_CloudHosted); ok {
		return x.CloudHosted
	}
	return nil
}

func (m *GlobalSpecType) GetDataCenterHosted() *InfraF5Hosted {
	if x, ok := m.GetInfraChoice().(*GlobalSpecType_DataCenterHosted); ok {
		return x.DataCenterHosted
	}
	return nil
}

func (m *GlobalSpecType) GetTrafficType() TrafficType {
	if m != nil {
		return m.TrafficType
	}
	return WEB
}

func (m *GlobalSpecType) GetEnvironmentType() EnvironmentType {
	if m != nil {
		return m.EnvironmentType
	}
	return PRODUCTION
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_CloudHosted)(nil),
		(*GlobalSpecType_DataCenterHosted)(nil),
	}
}

// Get Bot Defense App Infrastructure
//
// x-displayName: "Bot Defense App Infrastructure"
// Get Bot Defense App Infrastructure from a given namespace.
type GetSpecType struct {
	// Types that are valid to be assigned to InfraChoice:
	//	*GetSpecType_CloudHosted
	//	*GetSpecType_DataCenterHosted
	InfraChoice     isGetSpecType_InfraChoice `protobuf_oneof:"infra_choice"`
	TrafficType     TrafficType               `protobuf:"varint,5,opt,name=traffic_type,json=trafficType,proto3,enum=ves.io.schema.views.bot_defense_app_infrastructure.TrafficType" json:"traffic_type,omitempty"`
	EnvironmentType EnvironmentType           `protobuf:"varint,6,opt,name=environment_type,json=environmentType,proto3,enum=ves.io.schema.views.bot_defense_app_infrastructure.EnvironmentType" json:"environment_type,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f7caa7ec4892083, []int{4}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_InfraChoice interface {
	isGetSpecType_InfraChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_CloudHosted struct {
	CloudHosted *InfraF5Hosted `protobuf:"bytes,2,opt,name=cloud_hosted,json=cloudHosted,proto3,oneof" json:"cloud_hosted,omitempty"`
}
type GetSpecType_DataCenterHosted struct {
	DataCenterHosted *InfraF5Hosted `protobuf:"bytes,3,opt,name=data_center_hosted,json=dataCenterHosted,proto3,oneof" json:"data_center_hosted,omitempty"`
}

func (*GetSpecType_CloudHosted) isGetSpecType_InfraChoice()      {}
func (*GetSpecType_DataCenterHosted) isGetSpecType_InfraChoice() {}

func (m *GetSpecType) GetInfraChoice() isGetSpecType_InfraChoice {
	if m != nil {
		return m.InfraChoice
	}
	return nil
}

func (m *GetSpecType) GetCloudHosted() *InfraF5Hosted {
	if x, ok := m.GetInfraChoice().(*GetSpecType_CloudHosted); ok {
		return x.CloudHosted
	}
	return nil
}

func (m *GetSpecType) GetDataCenterHosted() *InfraF5Hosted {
	if x, ok := m.GetInfraChoice().(*GetSpecType_DataCenterHosted); ok {
		return x.DataCenterHosted
	}
	return nil
}

func (m *GetSpecType) GetTrafficType() TrafficType {
	if m != nil {
		return m.TrafficType
	}
	return WEB
}

func (m *GetSpecType) GetEnvironmentType() EnvironmentType {
	if m != nil {
		return m.EnvironmentType
	}
	return PRODUCTION
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_CloudHosted)(nil),
		(*GetSpecType_DataCenterHosted)(nil),
	}
}

// Replace Bot Defense App Infrastructure
//
// x-displayName: "Replace Bot Defense App Infrastructure"
// Replace a given Bot Defense App Infrastructure in a given namespace.
type ReplaceSpecType struct {
	// Types that are valid to be assigned to InfraChoice:
	//	*ReplaceSpecType_CloudHosted
	//	*ReplaceSpecType_DataCenterHosted
	InfraChoice     isReplaceSpecType_InfraChoice `protobuf_oneof:"infra_choice"`
	TrafficType     TrafficType                   `protobuf:"varint,5,opt,name=traffic_type,json=trafficType,proto3,enum=ves.io.schema.views.bot_defense_app_infrastructure.TrafficType" json:"traffic_type,omitempty"`
	EnvironmentType EnvironmentType               `protobuf:"varint,6,opt,name=environment_type,json=environmentType,proto3,enum=ves.io.schema.views.bot_defense_app_infrastructure.EnvironmentType" json:"environment_type,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f7caa7ec4892083, []int{5}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_InfraChoice interface {
	isReplaceSpecType_InfraChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_CloudHosted struct {
	CloudHosted *InfraF5Hosted `protobuf:"bytes,2,opt,name=cloud_hosted,json=cloudHosted,proto3,oneof" json:"cloud_hosted,omitempty"`
}
type ReplaceSpecType_DataCenterHosted struct {
	DataCenterHosted *InfraF5Hosted `protobuf:"bytes,3,opt,name=data_center_hosted,json=dataCenterHosted,proto3,oneof" json:"data_center_hosted,omitempty"`
}

func (*ReplaceSpecType_CloudHosted) isReplaceSpecType_InfraChoice()      {}
func (*ReplaceSpecType_DataCenterHosted) isReplaceSpecType_InfraChoice() {}

func (m *ReplaceSpecType) GetInfraChoice() isReplaceSpecType_InfraChoice {
	if m != nil {
		return m.InfraChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetCloudHosted() *InfraF5Hosted {
	if x, ok := m.GetInfraChoice().(*ReplaceSpecType_CloudHosted); ok {
		return x.CloudHosted
	}
	return nil
}

func (m *ReplaceSpecType) GetDataCenterHosted() *InfraF5Hosted {
	if x, ok := m.GetInfraChoice().(*ReplaceSpecType_DataCenterHosted); ok {
		return x.DataCenterHosted
	}
	return nil
}

func (m *ReplaceSpecType) GetTrafficType() TrafficType {
	if m != nil {
		return m.TrafficType
	}
	return WEB
}

func (m *ReplaceSpecType) GetEnvironmentType() EnvironmentType {
	if m != nil {
		return m.EnvironmentType
	}
	return PRODUCTION
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_CloudHosted)(nil),
		(*ReplaceSpecType_DataCenterHosted)(nil),
	}
}

// Create Bot Defense App Infrastructure
//
// x-displayName: "Create Bot Defense App Infrastructure"
// Creates Bot Defense App Infrastructure in a given namespace.
type CreateSpecType struct {
	// Types that are valid to be assigned to InfraChoice:
	//	*CreateSpecType_CloudHosted
	//	*CreateSpecType_DataCenterHosted
	InfraChoice     isCreateSpecType_InfraChoice `protobuf_oneof:"infra_choice"`
	TrafficType     TrafficType                  `protobuf:"varint,5,opt,name=traffic_type,json=trafficType,proto3,enum=ves.io.schema.views.bot_defense_app_infrastructure.TrafficType" json:"traffic_type,omitempty"`
	EnvironmentType EnvironmentType              `protobuf:"varint,6,opt,name=environment_type,json=environmentType,proto3,enum=ves.io.schema.views.bot_defense_app_infrastructure.EnvironmentType" json:"environment_type,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f7caa7ec4892083, []int{6}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_InfraChoice interface {
	isCreateSpecType_InfraChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_CloudHosted struct {
	CloudHosted *InfraF5Hosted `protobuf:"bytes,2,opt,name=cloud_hosted,json=cloudHosted,proto3,oneof" json:"cloud_hosted,omitempty"`
}
type CreateSpecType_DataCenterHosted struct {
	DataCenterHosted *InfraF5Hosted `protobuf:"bytes,3,opt,name=data_center_hosted,json=dataCenterHosted,proto3,oneof" json:"data_center_hosted,omitempty"`
}

func (*CreateSpecType_CloudHosted) isCreateSpecType_InfraChoice()      {}
func (*CreateSpecType_DataCenterHosted) isCreateSpecType_InfraChoice() {}

func (m *CreateSpecType) GetInfraChoice() isCreateSpecType_InfraChoice {
	if m != nil {
		return m.InfraChoice
	}
	return nil
}

func (m *CreateSpecType) GetCloudHosted() *InfraF5Hosted {
	if x, ok := m.GetInfraChoice().(*CreateSpecType_CloudHosted); ok {
		return x.CloudHosted
	}
	return nil
}

func (m *CreateSpecType) GetDataCenterHosted() *InfraF5Hosted {
	if x, ok := m.GetInfraChoice().(*CreateSpecType_DataCenterHosted); ok {
		return x.DataCenterHosted
	}
	return nil
}

func (m *CreateSpecType) GetTrafficType() TrafficType {
	if m != nil {
		return m.TrafficType
	}
	return WEB
}

func (m *CreateSpecType) GetEnvironmentType() EnvironmentType {
	if m != nil {
		return m.EnvironmentType
	}
	return PRODUCTION
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_CloudHosted)(nil),
		(*CreateSpecType_DataCenterHosted)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.views.bot_defense_app_infrastructure.BotDefenseAdvancedRegion", BotDefenseAdvancedRegion_name, BotDefenseAdvancedRegion_value)
	golang_proto.RegisterEnum("ves.io.schema.views.bot_defense_app_infrastructure.BotDefenseAdvancedRegion", BotDefenseAdvancedRegion_name, BotDefenseAdvancedRegion_value)
	proto.RegisterEnum("ves.io.schema.views.bot_defense_app_infrastructure.Location", Location_name, Location_value)
	golang_proto.RegisterEnum("ves.io.schema.views.bot_defense_app_infrastructure.Location", Location_name, Location_value)
	proto.RegisterEnum("ves.io.schema.views.bot_defense_app_infrastructure.TrafficType", TrafficType_name, TrafficType_value)
	golang_proto.RegisterEnum("ves.io.schema.views.bot_defense_app_infrastructure.TrafficType", TrafficType_name, TrafficType_value)
	proto.RegisterEnum("ves.io.schema.views.bot_defense_app_infrastructure.EnvironmentType", EnvironmentType_name, EnvironmentType_value)
	golang_proto.RegisterEnum("ves.io.schema.views.bot_defense_app_infrastructure.EnvironmentType", EnvironmentType_name, EnvironmentType_value)
	proto.RegisterType((*InfraF5Hosted)(nil), "ves.io.schema.views.bot_defense_app_infrastructure.InfraF5Hosted")
	golang_proto.RegisterType((*InfraF5Hosted)(nil), "ves.io.schema.views.bot_defense_app_infrastructure.InfraF5Hosted")
	proto.RegisterType((*Ingress)(nil), "ves.io.schema.views.bot_defense_app_infrastructure.Ingress")
	golang_proto.RegisterType((*Ingress)(nil), "ves.io.schema.views.bot_defense_app_infrastructure.Ingress")
	proto.RegisterType((*Egress)(nil), "ves.io.schema.views.bot_defense_app_infrastructure.Egress")
	golang_proto.RegisterType((*Egress)(nil), "ves.io.schema.views.bot_defense_app_infrastructure.Egress")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.bot_defense_app_infrastructure.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.bot_defense_app_infrastructure.GlobalSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.bot_defense_app_infrastructure.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.bot_defense_app_infrastructure.GetSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.bot_defense_app_infrastructure.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.bot_defense_app_infrastructure.ReplaceSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.bot_defense_app_infrastructure.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.bot_defense_app_infrastructure.CreateSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/bot_defense_app_infrastructure/types.proto", fileDescriptor_2f7caa7ec4892083)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/bot_defense_app_infrastructure/types.proto", fileDescriptor_2f7caa7ec4892083)
}

var fileDescriptor_2f7caa7ec4892083 = []byte{
	// 1303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x4d, 0x6f, 0xdb, 0xc6,
	0x16, 0xe5, 0x88, 0xb2, 0x2c, 0x5f, 0x59, 0xd6, 0x78, 0xf2, 0xa5, 0x38, 0x0e, 0xad, 0xe7, 0xbc,
	0x85, 0x61, 0xc4, 0x12, 0x4c, 0x3b, 0x9b, 0xbc, 0x20, 0x0f, 0x92, 0xc2, 0x67, 0xeb, 0xc1, 0xb1,
	0x0c, 0x4a, 0x6a, 0x8a, 0x6c, 0x08, 0x4a, 0x1a, 0x49, 0x6c, 0x25, 0x91, 0xa5, 0x28, 0xa7, 0x59,
	0x14, 0x28, 0x82, 0xfe, 0x80, 0x20, 0x3f, 0xa2, 0x28, 0xfa, 0x0b, 0x8a, 0xba, 0x0b, 0xa3, 0x40,
	0x81, 0x22, 0x2b, 0x6f, 0x0a, 0x64, 0x99, 0xc8, 0x40, 0x91, 0xee, 0xb2, 0x6b, 0x91, 0x6e, 0x8a,
	0x19, 0x92, 0x36, 0x25, 0xcb, 0x29, 0x62, 0x64, 0x53, 0x24, 0x2b, 0x71, 0xce, 0xbd, 0xf7, 0xdc,
	0x33, 0xe7, 0x0e, 0x07, 0x02, 0xe1, 0xf6, 0x2e, 0xed, 0xa5, 0x0d, 0x33, 0xd3, 0xab, 0xb5, 0x68,
	0x47, 0xcf, 0xec, 0x1a, 0xf4, 0x41, 0x2f, 0x53, 0x35, 0x1d, 0xad, 0x4e, 0x1b, 0xb4, 0xdb, 0xa3,
	0x9a, 0x6e, 0x59, 0x9a, 0xd1, 0x6d, 0xd8, 0x7a, 0xcf, 0xb1, 0xfb, 0x35, 0xa7, 0x6f, 0xd3, 0x8c,
	0xf3, 0xd0, 0xa2, 0xbd, 0xb4, 0x65, 0x9b, 0x8e, 0x49, 0x64, 0xb7, 0x3e, 0xed, 0xd6, 0xa7, 0x79,
	0x7d, 0xfa, 0xcd, 0xf5, 0x73, 0x2b, 0x4d, 0xc3, 0x69, 0xf5, 0xab, 0xe9, 0x9a, 0xd9, 0xc9, 0x34,
	0xcd, 0xa6, 0x99, 0xe1, 0x54, 0xd5, 0x7e, 0x83, 0xaf, 0xf8, 0x82, 0x3f, 0xb9, 0x2d, 0xe6, 0xe6,
	0x9b, 0xa6, 0xd9, 0x6c, 0xd3, 0xe3, 0x2c, 0x97, 0xc9, 0x8b, 0x2e, 0x8c, 0x46, 0x1d, 0xa3, 0x43,
	0x7b, 0x8e, 0xde, 0xb1, 0xbc, 0x84, 0x2b, 0xc3, 0x3b, 0x34, 0x2d, 0xc7, 0x30, 0xbb, 0x9e, 0xfc,
	0xb9, 0xcb, 0xc3, 0xc1, 0xc0, 0xce, 0xe6, 0xe6, 0x47, 0x9c, 0xd1, 0xdb, 0x46, 0x5d, 0x77, 0xa8,
	0x17, 0x4d, 0x9d, 0xf4, 0x4d, 0x1b, 0xa6, 0x5e, 0x18, 0xe7, 0x6c, 0xa0, 0xc1, 0xe2, 0x77, 0x22,
	0xc4, 0x0b, 0xcc, 0x99, 0xff, 0xdd, 0xd8, 0x34, 0x7b, 0x0e, 0xad, 0x13, 0x0b, 0x22, 0x36, 0x6d,
	0x1a, 0x66, 0x37, 0x19, 0x4a, 0xa1, 0xa5, 0x19, 0x79, 0x2b, 0xfd, 0xf6, 0xee, 0xa6, 0x73, 0xa6,
	0x73, 0xc7, 0x8d, 0x66, 0xeb, 0xbb, 0x7a, 0xb7, 0x46, 0xeb, 0x2a, 0xe7, 0xcc, 0xc1, 0xf7, 0xbf,
	0xed, 0x8b, 0x13, 0x8f, 0x50, 0x08, 0x23, 0xd5, 0xeb, 0x43, 0x6e, 0x40, 0x82, 0x97, 0x6b, 0x2d,
	0xb3, 0xe7, 0x68, 0x5d, 0xbd, 0x43, 0x93, 0x62, 0x0a, 0x2d, 0x4d, 0xe5, 0xe2, 0x7f, 0xec, 0x21,
	0x81, 0x15, 0x84, 0xed, 0x50, 0x0b, 0xa9, 0x71, 0x9e, 0xc5, 0x64, 0x6e, 0xeb, 0x1d, 0x4a, 0xbe,
	0x42, 0x30, 0x69, 0x74, 0x9b, 0x36, 0xed, 0xf5, 0x92, 0xe1, 0x94, 0xb8, 0x14, 0x93, 0xff, 0x73,
	0x16, 0xa9, 0x05, 0x97, 0x22, 0xb7, 0x72, 0xb0, 0x87, 0x10, 0x57, 0xf7, 0x04, 0x85, 0xb0, 0xe8,
	0x3f, 0x45, 0x8f, 0xb0, 0x24, 0x1a, 0x3c, 0xff, 0x49, 0x8c, 0x3c, 0xf9, 0x81, 0x8b, 0xf7, 0x5b,
	0x93, 0x07, 0x10, 0xa1, 0xae, 0x88, 0x09, 0x2e, 0xe2, 0xe6, 0x59, 0x44, 0x28, 0xae, 0x86, 0x6b,
	0x41, 0x0d, 0xa7, 0x75, 0xf6, 0xda, 0x2d, 0xfe, 0x12, 0x82, 0x49, 0x4f, 0x3c, 0xb9, 0x0e, 0x53,
	0xc7, 0xe6, 0x85, 0xc6, 0x98, 0xb7, 0x29, 0xa8, 0xd1, 0x96, 0xef, 0x5c, 0x1a, 0xc0, 0xb0, 0x34,
	0xbd, 0x5e, 0xe7, 0xb2, 0x4f, 0x7a, 0x6d, 0xb1, 0xf4, 0x29, 0xc3, 0xca, 0xba, 0x19, 0xe4, 0x63,
	0x88, 0xb6, 0xcd, 0x9a, 0xce, 0x0e, 0x56, 0x72, 0x82, 0x1f, 0x8a, 0x5b, 0x67, 0xd9, 0xe4, 0x96,
	0xc7, 0xa1, 0x1e, 0xb1, 0xdd, 0x6c, 0x3f, 0xdd, 0x43, 0x2d, 0xb8, 0x05, 0xe1, 0xf2, 0x43, 0x8b,
	0x2e, 0xaf, 0x83, 0x0c, 0x17, 0x03, 0x3b, 0x91, 0xa7, 0xd8, 0xb0, 0x53, 0x4c, 0x33, 0x24, 0x83,
	0x9a, 0x65, 0x28, 0xec, 0xa4, 0x3c, 0x75, 0xb0, 0xc4, 0x4e, 0x30, 0xb7, 0x21, 0xf5, 0x91, 0xde,
	0xee, 0x53, 0xf9, 0x52, 0x80, 0x22, 0x58, 0x95, 0x93, 0x20, 0xc6, 0xce, 0xbe, 0x56, 0x6b, 0x99,
	0x46, 0x8d, 0x92, 0xc4, 0xfe, 0x1e, 0x0a, 0x31, 0xc7, 0x07, 0x7b, 0x48, 0x94, 0xaf, 0xaf, 0xfd,
	0x3f, 0x1c, 0x45, 0x38, 0xb4, 0xf8, 0x18, 0x41, 0x44, 0xf1, 0x6d, 0x0d, 0x1a, 0x85, 0xc6, 0x18,
	0x75, 0x9a, 0x4d, 0xe2, 0xbb, 0xb4, 0x69, 0xf1, 0xc7, 0x30, 0xcc, 0x6c, 0xb4, 0xcd, 0xaa, 0xde,
	0x2e, 0x59, 0xb4, 0xc6, 0xbc, 0x22, 0x0d, 0x98, 0xae, 0xb5, 0xcd, 0x7e, 0x9d, 0xbf, 0x34, 0xb4,
	0xce, 0x87, 0x1e, 0x93, 0xb3, 0x67, 0x7b, 0x03, 0x02, 0xef, 0xff, 0xa6, 0xa0, 0xc6, 0x38, 0xb1,
	0x77, 0x1d, 0x7c, 0x06, 0xa4, 0xae, 0x3b, 0xba, 0x56, 0xa3, 0x5d, 0x87, 0xda, 0x7e, 0x37, 0xf1,
	0xdd, 0x75, 0xc3, 0x8c, 0x3e, 0xcf, 0xd9, 0xbd, 0x96, 0x55, 0x98, 0x76, 0x6c, 0xbd, 0xd1, 0x30,
	0x6a, 0x1a, 0x1b, 0x97, 0x77, 0xe4, 0xfe, 0x7b, 0x96, 0x66, 0x65, 0x97, 0x87, 0x39, 0xa6, 0xc6,
	0x9c, 0xe3, 0x05, 0xe9, 0x02, 0xa6, 0xdd, 0x5d, 0xc3, 0x36, 0xbb, 0x1d, 0xda, 0x75, 0xdc, 0x3e,
	0x11, 0xde, 0x27, 0x7f, 0xa6, 0xf7, 0xf7, 0x98, 0x8b, 0xf7, 0x4a, 0xd0, 0x61, 0x80, 0xdc, 0x87,
	0x38, 0xbf, 0x9e, 0x0d, 0xb6, 0xcf, 0xae, 0xde, 0x4e, 0xbe, 0x9c, 0xe4, 0x16, 0x2e, 0x8e, 0xed,
	0x56, 0xac, 0x7e, 0x42, 0x6b, 0x8e, 0x4a, 0x1b, 0xac, 0x36, 0x87, 0xbf, 0xfd, 0x62, 0xb8, 0x58,
	0x9d, 0x66, 0xcb, 0x82, 0xb7, 0xca, 0x2d, 0xc0, 0xb4, 0x7b, 0x7f, 0xbe, 0xf9, 0x5c, 0xff, 0x2e,
	0x42, 0x6c, 0x83, 0x3a, 0x1f, 0x4e, 0xd0, 0x3f, 0xf2, 0x04, 0xdd, 0x9c, 0x7d, 0x7a, 0x7b, 0xe4,
	0x0e, 0xc8, 0xa5, 0x46, 0x06, 0x8f, 0x1f, 0xbd, 0x46, 0x43, 0x88, 0x37, 0xf9, 0x3f, 0x45, 0x48,
	0xa8, 0xd4, 0x6a, 0xeb, 0x35, 0xfa, 0x61, 0xfa, 0xef, 0xdd, 0xf4, 0x5f, 0x8b, 0x30, 0x93, 0xb7,
	0xa9, 0xee, 0x7c, 0x18, 0xfe, 0x7b, 0x37, 0xfc, 0xe5, 0x75, 0x48, 0x9e, 0xf6, 0x5f, 0x9c, 0x44,
	0x20, 0x54, 0x29, 0x61, 0x81, 0xfd, 0x2a, 0x15, 0x8c, 0x48, 0x14, 0xc2, 0xd9, 0x52, 0x21, 0x8b,
	0x43, 0xcb, 0xbf, 0x46, 0x20, 0xea, 0xff, 0x0d, 0x21, 0x17, 0x81, 0x64, 0xef, 0x95, 0xb4, 0xec,
	0x8e, 0xb6, 0x5d, 0x54, 0xcb, 0x9b, 0x4a, 0xb6, 0x54, 0xd6, 0x56, 0xb1, 0x30, 0x16, 0x5f, 0xc3,
	0x88, 0x10, 0x98, 0xf1, 0xf0, 0x52, 0xb1, 0x52, 0xde, 0xd4, 0x56, 0x71, 0xe8, 0x04, 0x26, 0x63,
	0x31, 0x50, 0xcf, 0x31, 0x8f, 0x37, 0x3c, 0x16, 0x97, 0xf1, 0xc4, 0x58, 0x7c, 0x0d, 0x47, 0xc8,
	0x79, 0xc0, 0x0c, 0x57, 0x2a, 0x5a, 0x5e, 0xd9, 0x2e, 0xab, 0xd9, 0x2d, 0x6d, 0x15, 0x4f, 0xfa,
	0x1d, 0x95, 0x8a, 0xab, 0x4e, 0x5b, 0xc5, 0x51, 0x32, 0x0b, 0x71, 0x0f, 0xbb, 0xa7, 0xf0, 0x66,
	0x53, 0x7e, 0xda, 0x5d, 0xe5, 0x48, 0x2c, 0xf8, 0x69, 0xa5, 0xac, 0xe6, 0x69, 0x8a, 0xf9, 0x50,
	0xa5, 0xe4, 0x43, 0xd3, 0xa3, 0x90, 0x8c, 0xe3, 0x01, 0xc8, 0xe3, 0x9f, 0x19, 0x85, 0x64, 0x9c,
	0x20, 0xe7, 0x20, 0xb1, 0x91, 0xdf, 0xd1, 0x98, 0xd5, 0x3e, 0x1b, 0x3e, 0x09, 0xca, 0x78, 0x96,
	0x24, 0xe1, 0xfc, 0x11, 0x18, 0xf4, 0x9e, 0x9c, 0x12, 0x91, 0xf1, 0xb9, 0x53, 0x22, 0x6b, 0xf8,
	0x3c, 0xf3, 0xe9, 0x28, 0xe2, 0x6f, 0xf6, 0xc2, 0x50, 0x7e, 0x70, 0x0e, 0x17, 0x4f, 0x89, 0xc8,
	0xf8, 0x12, 0xb9, 0x0a, 0x97, 0x79, 0xa4, 0x52, 0x62, 0x76, 0x8f, 0x14, 0x26, 0xc9, 0x05, 0x98,
	0x65, 0x61, 0xa5, 0xa2, 0x16, 0x77, 0x14, 0xdf, 0x8a, 0xcb, 0xe3, 0x60, 0x19, 0xcf, 0x8d, 0x83,
	0xd7, 0xf0, 0x15, 0x92, 0x82, 0x79, 0x06, 0xf3, 0x2d, 0x64, 0xef, 0x2a, 0x6a, 0x21, 0x3f, 0xec,
	0xc1, 0xfc, 0xdf, 0x64, 0xc8, 0xf8, 0x2a, 0xb9, 0x02, 0x97, 0x58, 0x06, 0x57, 0xe7, 0x67, 0x78,
	0xe5, 0xd2, 0xd8, 0xa0, 0xa7, 0x75, 0xc1, 0xf7, 0xaa, 0x52, 0x0a, 0x9c, 0xa9, 0x14, 0x1b, 0xa6,
	0x87, 0x7a, 0x2c, 0xff, 0x1a, 0x85, 0xd6, 0xf1, 0x62, 0x00, 0xf2, 0xe8, 0xae, 0x8d, 0x42, 0x32,
	0xfe, 0xf7, 0x5c, 0x78, 0x7f, 0x0f, 0xc5, 0x97, 0x97, 0x20, 0x16, 0xb8, 0x65, 0xc8, 0x24, 0x88,
	0xf7, 0x94, 0x1c, 0x16, 0x08, 0x40, 0xe4, 0x6e, 0x31, 0x57, 0xd8, 0x52, 0x30, 0xe2, 0x99, 0xc2,
	0xf2, 0x3a, 0x24, 0x46, 0xee, 0x09, 0x32, 0x03, 0xb0, 0xa3, 0x16, 0xef, 0x54, 0xf2, 0xe5, 0x42,
	0x71, 0x1b, 0x0b, 0x24, 0x06, 0x93, 0x65, 0xa5, 0x54, 0x2e, 0x6c, 0x6f, 0xf8, 0x55, 0xb9, 0xaf,
	0xd1, 0xc1, 0x0b, 0x49, 0x78, 0xf6, 0x42, 0x12, 0x5e, 0xbd, 0x90, 0xd0, 0x97, 0x03, 0x09, 0x7d,
	0x33, 0x90, 0xd0, 0xcf, 0x03, 0x09, 0x1d, 0x0c, 0x24, 0xf4, 0x6c, 0x20, 0xa1, 0xe7, 0x03, 0x09,
	0xbd, 0x1c, 0x48, 0xc2, 0xab, 0x81, 0x84, 0x1e, 0x1f, 0x4a, 0xc2, 0xfe, 0xa1, 0x84, 0x0e, 0x0e,
	0x25, 0xe1, 0xd9, 0xa1, 0x24, 0xdc, 0x6f, 0x35, 0x4d, 0xeb, 0xd3, 0x66, 0x7a, 0xd7, 0x6c, 0x3b,
	0xd4, 0xb6, 0xf5, 0x74, 0xbf, 0x97, 0xe1, 0x0f, 0x0d, 0xd3, 0xee, 0xac, 0x58, 0xb6, 0xb9, 0x6b,
	0xd4, 0xa9, 0xbd, 0xe2, 0x87, 0x33, 0x56, 0xb5, 0x69, 0x66, 0xe8, 0xe7, 0x8e, 0xf7, 0xb5, 0xe1,
	0x2d, 0x3e, 0xe7, 0x54, 0x23, 0xfc, 0x73, 0xc4, 0xda, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf7,
	0xa8, 0x17, 0xa4, 0x0b, 0x12, 0x00, 0x00,
}

func (x BotDefenseAdvancedRegion) String() string {
	s, ok := BotDefenseAdvancedRegion_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Location) String() string {
	s, ok := Location_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TrafficType) String() string {
	s, ok := TrafficType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EnvironmentType) String() string {
	s, ok := EnvironmentType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *InfraF5Hosted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InfraF5Hosted)
	if !ok {
		that2, ok := that.(InfraF5Hosted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if this.InfraHostName != that1.InfraHostName {
		return false
	}
	if len(this.Ingress) != len(that1.Ingress) {
		return false
	}
	for i := range this.Ingress {
		if !this.Ingress[i].Equal(that1.Ingress[i]) {
			return false
		}
	}
	if len(this.Egress) != len(that1.Egress) {
		return false
	}
	for i := range this.Egress {
		if !this.Egress[i].Equal(that1.Egress[i]) {
			return false
		}
	}
	return true
}
func (this *Ingress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ingress)
	if !ok {
		that2, ok := that.(Ingress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TypeChoice == nil {
		if this.TypeChoice != nil {
			return false
		}
	} else if this.TypeChoice == nil {
		return false
	} else if !this.TypeChoice.Equal(that1.TypeChoice) {
		return false
	}
	if this.Location != that1.Location {
		return false
	}
	return true
}
func (this *Ingress_HostName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ingress_HostName)
	if !ok {
		that2, ok := that.(Ingress_HostName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	return true
}
func (this *Ingress_IpAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ingress_IpAddress)
	if !ok {
		that2, ok := that.(Ingress_IpAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IpAddress != that1.IpAddress {
		return false
	}
	return true
}
func (this *Egress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Egress)
	if !ok {
		that2, ok := that.(Egress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IpAddress != that1.IpAddress {
		return false
	}
	if this.Location != that1.Location {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.InfraChoice == nil {
		if this.InfraChoice != nil {
			return false
		}
	} else if this.InfraChoice == nil {
		return false
	} else if !this.InfraChoice.Equal(that1.InfraChoice) {
		return false
	}
	if this.TrafficType != that1.TrafficType {
		return false
	}
	if this.EnvironmentType != that1.EnvironmentType {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CloudHosted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CloudHosted)
	if !ok {
		that2, ok := that.(GlobalSpecType_CloudHosted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CloudHosted.Equal(that1.CloudHosted) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DataCenterHosted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DataCenterHosted)
	if !ok {
		that2, ok := that.(GlobalSpecType_DataCenterHosted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DataCenterHosted.Equal(that1.DataCenterHosted) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.InfraChoice == nil {
		if this.InfraChoice != nil {
			return false
		}
	} else if this.InfraChoice == nil {
		return false
	} else if !this.InfraChoice.Equal(that1.InfraChoice) {
		return false
	}
	if this.TrafficType != that1.TrafficType {
		return false
	}
	if this.EnvironmentType != that1.EnvironmentType {
		return false
	}
	return true
}
func (this *GetSpecType_CloudHosted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CloudHosted)
	if !ok {
		that2, ok := that.(GetSpecType_CloudHosted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CloudHosted.Equal(that1.CloudHosted) {
		return false
	}
	return true
}
func (this *GetSpecType_DataCenterHosted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DataCenterHosted)
	if !ok {
		that2, ok := that.(GetSpecType_DataCenterHosted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DataCenterHosted.Equal(that1.DataCenterHosted) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.InfraChoice == nil {
		if this.InfraChoice != nil {
			return false
		}
	} else if this.InfraChoice == nil {
		return false
	} else if !this.InfraChoice.Equal(that1.InfraChoice) {
		return false
	}
	if this.TrafficType != that1.TrafficType {
		return false
	}
	if this.EnvironmentType != that1.EnvironmentType {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CloudHosted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CloudHosted)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CloudHosted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CloudHosted.Equal(that1.CloudHosted) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DataCenterHosted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DataCenterHosted)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DataCenterHosted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DataCenterHosted.Equal(that1.DataCenterHosted) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.InfraChoice == nil {
		if this.InfraChoice != nil {
			return false
		}
	} else if this.InfraChoice == nil {
		return false
	} else if !this.InfraChoice.Equal(that1.InfraChoice) {
		return false
	}
	if this.TrafficType != that1.TrafficType {
		return false
	}
	if this.EnvironmentType != that1.EnvironmentType {
		return false
	}
	return true
}
func (this *CreateSpecType_CloudHosted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CloudHosted)
	if !ok {
		that2, ok := that.(CreateSpecType_CloudHosted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CloudHosted.Equal(that1.CloudHosted) {
		return false
	}
	return true
}
func (this *CreateSpecType_DataCenterHosted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DataCenterHosted)
	if !ok {
		that2, ok := that.(CreateSpecType_DataCenterHosted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DataCenterHosted.Equal(that1.DataCenterHosted) {
		return false
	}
	return true
}
func (this *InfraF5Hosted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&bot_defense_app_infrastructure.InfraF5Hosted{")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "InfraHostName: "+fmt.Sprintf("%#v", this.InfraHostName)+",\n")
	if this.Ingress != nil {
		s = append(s, "Ingress: "+fmt.Sprintf("%#v", this.Ingress)+",\n")
	}
	if this.Egress != nil {
		s = append(s, "Egress: "+fmt.Sprintf("%#v", this.Egress)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ingress) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&bot_defense_app_infrastructure.Ingress{")
	if this.TypeChoice != nil {
		s = append(s, "TypeChoice: "+fmt.Sprintf("%#v", this.TypeChoice)+",\n")
	}
	s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ingress_HostName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bot_defense_app_infrastructure.Ingress_HostName{` +
		`HostName:` + fmt.Sprintf("%#v", this.HostName) + `}`}, ", ")
	return s
}
func (this *Ingress_IpAddress) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bot_defense_app_infrastructure.Ingress_IpAddress{` +
		`IpAddress:` + fmt.Sprintf("%#v", this.IpAddress) + `}`}, ", ")
	return s
}
func (this *Egress) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&bot_defense_app_infrastructure.Egress{")
	s = append(s, "IpAddress: "+fmt.Sprintf("%#v", this.IpAddress)+",\n")
	s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&bot_defense_app_infrastructure.GlobalSpecType{")
	if this.InfraChoice != nil {
		s = append(s, "InfraChoice: "+fmt.Sprintf("%#v", this.InfraChoice)+",\n")
	}
	s = append(s, "TrafficType: "+fmt.Sprintf("%#v", this.TrafficType)+",\n")
	s = append(s, "EnvironmentType: "+fmt.Sprintf("%#v", this.EnvironmentType)+",\n")
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_CloudHosted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bot_defense_app_infrastructure.GlobalSpecType_CloudHosted{` +
		`CloudHosted:` + fmt.Sprintf("%#v", this.CloudHosted) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DataCenterHosted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bot_defense_app_infrastructure.GlobalSpecType_DataCenterHosted{` +
		`DataCenterHosted:` + fmt.Sprintf("%#v", this.DataCenterHosted) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&bot_defense_app_infrastructure.GetSpecType{")
	if this.InfraChoice != nil {
		s = append(s, "InfraChoice: "+fmt.Sprintf("%#v", this.InfraChoice)+",\n")
	}
	s = append(s, "TrafficType: "+fmt.Sprintf("%#v", this.TrafficType)+",\n")
	s = append(s, "EnvironmentType: "+fmt.Sprintf("%#v", this.EnvironmentType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_CloudHosted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bot_defense_app_infrastructure.GetSpecType_CloudHosted{` +
		`CloudHosted:` + fmt.Sprintf("%#v", this.CloudHosted) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DataCenterHosted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bot_defense_app_infrastructure.GetSpecType_DataCenterHosted{` +
		`DataCenterHosted:` + fmt.Sprintf("%#v", this.DataCenterHosted) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&bot_defense_app_infrastructure.ReplaceSpecType{")
	if this.InfraChoice != nil {
		s = append(s, "InfraChoice: "+fmt.Sprintf("%#v", this.InfraChoice)+",\n")
	}
	s = append(s, "TrafficType: "+fmt.Sprintf("%#v", this.TrafficType)+",\n")
	s = append(s, "EnvironmentType: "+fmt.Sprintf("%#v", this.EnvironmentType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_CloudHosted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bot_defense_app_infrastructure.ReplaceSpecType_CloudHosted{` +
		`CloudHosted:` + fmt.Sprintf("%#v", this.CloudHosted) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DataCenterHosted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bot_defense_app_infrastructure.ReplaceSpecType_DataCenterHosted{` +
		`DataCenterHosted:` + fmt.Sprintf("%#v", this.DataCenterHosted) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&bot_defense_app_infrastructure.CreateSpecType{")
	if this.InfraChoice != nil {
		s = append(s, "InfraChoice: "+fmt.Sprintf("%#v", this.InfraChoice)+",\n")
	}
	s = append(s, "TrafficType: "+fmt.Sprintf("%#v", this.TrafficType)+",\n")
	s = append(s, "EnvironmentType: "+fmt.Sprintf("%#v", this.EnvironmentType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_CloudHosted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bot_defense_app_infrastructure.CreateSpecType_CloudHosted{` +
		`CloudHosted:` + fmt.Sprintf("%#v", this.CloudHosted) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DataCenterHosted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&bot_defense_app_infrastructure.CreateSpecType_DataCenterHosted{` +
		`DataCenterHosted:` + fmt.Sprintf("%#v", this.DataCenterHosted) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *InfraF5Hosted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfraF5Hosted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfraF5Hosted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Egress) > 0 {
		for iNdEx := len(m.Egress) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Egress[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Ingress) > 0 {
		for iNdEx := len(m.Ingress) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ingress[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.InfraHostName) > 0 {
		i -= len(m.InfraHostName)
		copy(dAtA[i:], m.InfraHostName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InfraHostName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Region != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Region))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *Ingress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ingress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ingress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Location != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Location))
		i--
		dAtA[i] = 0x28
	}
	if m.TypeChoice != nil {
		{
			size := m.TypeChoice.Size()
			i -= size
			if _, err := m.TypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Ingress_HostName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ingress_HostName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.HostName)
	copy(dAtA[i:], m.HostName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *Ingress_IpAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ingress_IpAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.IpAddress)
	copy(dAtA[i:], m.IpAddress)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.IpAddress)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *Egress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Egress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Egress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Location != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Location))
		i--
		dAtA[i] = 0x18
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.EnvironmentType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EnvironmentType))
		i--
		dAtA[i] = 0x30
	}
	if m.TrafficType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TrafficType))
		i--
		dAtA[i] = 0x28
	}
	if m.InfraChoice != nil {
		{
			size := m.InfraChoice.Size()
			i -= size
			if _, err := m.InfraChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_CloudHosted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_CloudHosted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CloudHosted != nil {
		{
			size, err := m.CloudHosted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DataCenterHosted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DataCenterHosted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DataCenterHosted != nil {
		{
			size, err := m.DataCenterHosted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnvironmentType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EnvironmentType))
		i--
		dAtA[i] = 0x30
	}
	if m.TrafficType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TrafficType))
		i--
		dAtA[i] = 0x28
	}
	if m.InfraChoice != nil {
		{
			size := m.InfraChoice.Size()
			i -= size
			if _, err := m.InfraChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_CloudHosted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_CloudHosted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CloudHosted != nil {
		{
			size, err := m.CloudHosted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DataCenterHosted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DataCenterHosted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DataCenterHosted != nil {
		{
			size, err := m.DataCenterHosted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnvironmentType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EnvironmentType))
		i--
		dAtA[i] = 0x30
	}
	if m.TrafficType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TrafficType))
		i--
		dAtA[i] = 0x28
	}
	if m.InfraChoice != nil {
		{
			size := m.InfraChoice.Size()
			i -= size
			if _, err := m.InfraChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_CloudHosted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_CloudHosted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CloudHosted != nil {
		{
			size, err := m.CloudHosted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DataCenterHosted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DataCenterHosted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DataCenterHosted != nil {
		{
			size, err := m.DataCenterHosted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnvironmentType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EnvironmentType))
		i--
		dAtA[i] = 0x30
	}
	if m.TrafficType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TrafficType))
		i--
		dAtA[i] = 0x28
	}
	if m.InfraChoice != nil {
		{
			size := m.InfraChoice.Size()
			i -= size
			if _, err := m.InfraChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_CloudHosted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_CloudHosted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CloudHosted != nil {
		{
			size, err := m.CloudHosted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DataCenterHosted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DataCenterHosted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DataCenterHosted != nil {
		{
			size, err := m.DataCenterHosted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InfraF5Hosted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Region != 0 {
		n += 1 + sovTypes(uint64(m.Region))
	}
	l = len(m.InfraHostName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Ingress) > 0 {
		for _, e := range m.Ingress {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Egress) > 0 {
		for _, e := range m.Egress {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Ingress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeChoice != nil {
		n += m.TypeChoice.Size()
	}
	if m.Location != 0 {
		n += 1 + sovTypes(uint64(m.Location))
	}
	return n
}

func (m *Ingress_HostName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *Ingress_IpAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IpAddress)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *Egress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Location != 0 {
		n += 1 + sovTypes(uint64(m.Location))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InfraChoice != nil {
		n += m.InfraChoice.Size()
	}
	if m.TrafficType != 0 {
		n += 1 + sovTypes(uint64(m.TrafficType))
	}
	if m.EnvironmentType != 0 {
		n += 1 + sovTypes(uint64(m.EnvironmentType))
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_CloudHosted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudHosted != nil {
		l = m.CloudHosted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DataCenterHosted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataCenterHosted != nil {
		l = m.DataCenterHosted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InfraChoice != nil {
		n += m.InfraChoice.Size()
	}
	if m.TrafficType != 0 {
		n += 1 + sovTypes(uint64(m.TrafficType))
	}
	if m.EnvironmentType != 0 {
		n += 1 + sovTypes(uint64(m.EnvironmentType))
	}
	return n
}

func (m *GetSpecType_CloudHosted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudHosted != nil {
		l = m.CloudHosted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DataCenterHosted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataCenterHosted != nil {
		l = m.DataCenterHosted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InfraChoice != nil {
		n += m.InfraChoice.Size()
	}
	if m.TrafficType != 0 {
		n += 1 + sovTypes(uint64(m.TrafficType))
	}
	if m.EnvironmentType != 0 {
		n += 1 + sovTypes(uint64(m.EnvironmentType))
	}
	return n
}

func (m *ReplaceSpecType_CloudHosted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudHosted != nil {
		l = m.CloudHosted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DataCenterHosted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataCenterHosted != nil {
		l = m.DataCenterHosted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InfraChoice != nil {
		n += m.InfraChoice.Size()
	}
	if m.TrafficType != 0 {
		n += 1 + sovTypes(uint64(m.TrafficType))
	}
	if m.EnvironmentType != 0 {
		n += 1 + sovTypes(uint64(m.EnvironmentType))
	}
	return n
}

func (m *CreateSpecType_CloudHosted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloudHosted != nil {
		l = m.CloudHosted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DataCenterHosted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataCenterHosted != nil {
		l = m.DataCenterHosted.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *InfraF5Hosted) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIngress := "[]*Ingress{"
	for _, f := range this.Ingress {
		repeatedStringForIngress += strings.Replace(f.String(), "Ingress", "Ingress", 1) + ","
	}
	repeatedStringForIngress += "}"
	repeatedStringForEgress := "[]*Egress{"
	for _, f := range this.Egress {
		repeatedStringForEgress += strings.Replace(f.String(), "Egress", "Egress", 1) + ","
	}
	repeatedStringForEgress += "}"
	s := strings.Join([]string{`&InfraF5Hosted{`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`InfraHostName:` + fmt.Sprintf("%v", this.InfraHostName) + `,`,
		`Ingress:` + repeatedStringForIngress + `,`,
		`Egress:` + repeatedStringForEgress + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ingress) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ingress{`,
		`TypeChoice:` + fmt.Sprintf("%v", this.TypeChoice) + `,`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ingress_HostName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ingress_HostName{`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ingress_IpAddress) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ingress_IpAddress{`,
		`IpAddress:` + fmt.Sprintf("%v", this.IpAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Egress) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Egress{`,
		`IpAddress:` + fmt.Sprintf("%v", this.IpAddress) + `,`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`InfraChoice:` + fmt.Sprintf("%v", this.InfraChoice) + `,`,
		`TrafficType:` + fmt.Sprintf("%v", this.TrafficType) + `,`,
		`EnvironmentType:` + fmt.Sprintf("%v", this.EnvironmentType) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CloudHosted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CloudHosted{`,
		`CloudHosted:` + strings.Replace(fmt.Sprintf("%v", this.CloudHosted), "InfraF5Hosted", "InfraF5Hosted", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DataCenterHosted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DataCenterHosted{`,
		`DataCenterHosted:` + strings.Replace(fmt.Sprintf("%v", this.DataCenterHosted), "InfraF5Hosted", "InfraF5Hosted", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`InfraChoice:` + fmt.Sprintf("%v", this.InfraChoice) + `,`,
		`TrafficType:` + fmt.Sprintf("%v", this.TrafficType) + `,`,
		`EnvironmentType:` + fmt.Sprintf("%v", this.EnvironmentType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CloudHosted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CloudHosted{`,
		`CloudHosted:` + strings.Replace(fmt.Sprintf("%v", this.CloudHosted), "InfraF5Hosted", "InfraF5Hosted", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DataCenterHosted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DataCenterHosted{`,
		`DataCenterHosted:` + strings.Replace(fmt.Sprintf("%v", this.DataCenterHosted), "InfraF5Hosted", "InfraF5Hosted", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`InfraChoice:` + fmt.Sprintf("%v", this.InfraChoice) + `,`,
		`TrafficType:` + fmt.Sprintf("%v", this.TrafficType) + `,`,
		`EnvironmentType:` + fmt.Sprintf("%v", this.EnvironmentType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CloudHosted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CloudHosted{`,
		`CloudHosted:` + strings.Replace(fmt.Sprintf("%v", this.CloudHosted), "InfraF5Hosted", "InfraF5Hosted", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DataCenterHosted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DataCenterHosted{`,
		`DataCenterHosted:` + strings.Replace(fmt.Sprintf("%v", this.DataCenterHosted), "InfraF5Hosted", "InfraF5Hosted", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`InfraChoice:` + fmt.Sprintf("%v", this.InfraChoice) + `,`,
		`TrafficType:` + fmt.Sprintf("%v", this.TrafficType) + `,`,
		`EnvironmentType:` + fmt.Sprintf("%v", this.EnvironmentType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CloudHosted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CloudHosted{`,
		`CloudHosted:` + strings.Replace(fmt.Sprintf("%v", this.CloudHosted), "InfraF5Hosted", "InfraF5Hosted", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DataCenterHosted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DataCenterHosted{`,
		`DataCenterHosted:` + strings.Replace(fmt.Sprintf("%v", this.DataCenterHosted), "InfraF5Hosted", "InfraF5Hosted", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *InfraF5Hosted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfraF5Hosted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfraF5Hosted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			m.Region = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Region |= BotDefenseAdvancedRegion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfraHostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfraHostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ingress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ingress = append(m.Ingress, &Ingress{})
			if err := m.Ingress[len(m.Ingress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Egress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Egress = append(m.Egress, &Egress{})
			if err := m.Egress[len(m.Egress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ingress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ingress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ingress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeChoice = &Ingress_HostName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeChoice = &Ingress_IpAddress{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= Location(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Egress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Egress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Egress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= Location(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudHosted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InfraF5Hosted{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InfraChoice = &GlobalSpecType_CloudHosted{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCenterHosted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InfraF5Hosted{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InfraChoice = &GlobalSpecType_DataCenterHosted{v}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficType", wireType)
			}
			m.TrafficType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrafficType |= TrafficType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentType", wireType)
			}
			m.EnvironmentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnvironmentType |= EnvironmentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudHosted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InfraF5Hosted{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InfraChoice = &GetSpecType_CloudHosted{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCenterHosted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InfraF5Hosted{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InfraChoice = &GetSpecType_DataCenterHosted{v}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficType", wireType)
			}
			m.TrafficType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrafficType |= TrafficType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentType", wireType)
			}
			m.EnvironmentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnvironmentType |= EnvironmentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudHosted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InfraF5Hosted{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InfraChoice = &ReplaceSpecType_CloudHosted{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCenterHosted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InfraF5Hosted{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InfraChoice = &ReplaceSpecType_DataCenterHosted{v}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficType", wireType)
			}
			m.TrafficType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrafficType |= TrafficType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentType", wireType)
			}
			m.EnvironmentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnvironmentType |= EnvironmentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudHosted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InfraF5Hosted{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InfraChoice = &CreateSpecType_CloudHosted{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCenterHosted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InfraF5Hosted{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InfraChoice = &CreateSpecType_DataCenterHosted{v}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficType", wireType)
			}
			m.TrafficType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrafficType |= TrafficType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentType", wireType)
			}
			m.EnvironmentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnvironmentType |= EnvironmentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

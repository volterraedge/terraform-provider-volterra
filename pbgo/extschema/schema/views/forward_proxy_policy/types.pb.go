// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/forward_proxy_policy/types.proto

package forward_proxy_policy

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// URL
//
// x-displayName: "URL"
// URL strings in form "http://<domian>/<path>"
type URLType struct {
	// Select Domain
	//
	// x-displayName: "Enter Domain"
	// x-required
	// Domain part of the URL
	//
	// Types that are valid to be assigned to DomainChoice:
	//	*URLType_ExactValue
	//	*URLType_SuffixValue
	//	*URLType_RegexValue
	DomainChoice isURLType_DomainChoice `protobuf_oneof:"domain_choice"`
	// Select Path for Domain
	//
	// x-displayName: "Enter Path"
	// x-required
	// Path part of the URL
	//
	// Types that are valid to be assigned to PathChoice:
	//	*URLType_PathExactValue
	//	*URLType_PathPrefixValue
	//	*URLType_PathRegexValue
	//	*URLType_AnyPath
	PathChoice isURLType_PathChoice `protobuf_oneof:"path_choice"`
}

func (m *URLType) Reset()      { *m = URLType{} }
func (*URLType) ProtoMessage() {}
func (*URLType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2204e8d809da33de, []int{0}
}
func (m *URLType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *URLType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *URLType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URLType.Merge(m, src)
}
func (m *URLType) XXX_Size() int {
	return m.Size()
}
func (m *URLType) XXX_DiscardUnknown() {
	xxx_messageInfo_URLType.DiscardUnknown(m)
}

var xxx_messageInfo_URLType proto.InternalMessageInfo

type isURLType_DomainChoice interface {
	isURLType_DomainChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isURLType_PathChoice interface {
	isURLType_PathChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type URLType_ExactValue struct {
	ExactValue string `protobuf:"bytes,1,opt,name=exact_value,json=exactValue,proto3,oneof" json:"exact_value,omitempty"`
}
type URLType_SuffixValue struct {
	SuffixValue string `protobuf:"bytes,2,opt,name=suffix_value,json=suffixValue,proto3,oneof" json:"suffix_value,omitempty"`
}
type URLType_RegexValue struct {
	RegexValue string `protobuf:"bytes,3,opt,name=regex_value,json=regexValue,proto3,oneof" json:"regex_value,omitempty"`
}
type URLType_PathExactValue struct {
	PathExactValue string `protobuf:"bytes,4,opt,name=path_exact_value,json=pathExactValue,proto3,oneof" json:"path_exact_value,omitempty"`
}
type URLType_PathPrefixValue struct {
	PathPrefixValue string `protobuf:"bytes,5,opt,name=path_prefix_value,json=pathPrefixValue,proto3,oneof" json:"path_prefix_value,omitempty"`
}
type URLType_PathRegexValue struct {
	PathRegexValue string `protobuf:"bytes,6,opt,name=path_regex_value,json=pathRegexValue,proto3,oneof" json:"path_regex_value,omitempty"`
}
type URLType_AnyPath struct {
	AnyPath *schema.Empty `protobuf:"bytes,9,opt,name=any_path,json=anyPath,proto3,oneof" json:"any_path,omitempty"`
}

func (*URLType_ExactValue) isURLType_DomainChoice()    {}
func (*URLType_SuffixValue) isURLType_DomainChoice()   {}
func (*URLType_RegexValue) isURLType_DomainChoice()    {}
func (*URLType_PathExactValue) isURLType_PathChoice()  {}
func (*URLType_PathPrefixValue) isURLType_PathChoice() {}
func (*URLType_PathRegexValue) isURLType_PathChoice()  {}
func (*URLType_AnyPath) isURLType_PathChoice()         {}

func (m *URLType) GetDomainChoice() isURLType_DomainChoice {
	if m != nil {
		return m.DomainChoice
	}
	return nil
}
func (m *URLType) GetPathChoice() isURLType_PathChoice {
	if m != nil {
		return m.PathChoice
	}
	return nil
}

func (m *URLType) GetExactValue() string {
	if x, ok := m.GetDomainChoice().(*URLType_ExactValue); ok {
		return x.ExactValue
	}
	return ""
}

func (m *URLType) GetSuffixValue() string {
	if x, ok := m.GetDomainChoice().(*URLType_SuffixValue); ok {
		return x.SuffixValue
	}
	return ""
}

func (m *URLType) GetRegexValue() string {
	if x, ok := m.GetDomainChoice().(*URLType_RegexValue); ok {
		return x.RegexValue
	}
	return ""
}

func (m *URLType) GetPathExactValue() string {
	if x, ok := m.GetPathChoice().(*URLType_PathExactValue); ok {
		return x.PathExactValue
	}
	return ""
}

func (m *URLType) GetPathPrefixValue() string {
	if x, ok := m.GetPathChoice().(*URLType_PathPrefixValue); ok {
		return x.PathPrefixValue
	}
	return ""
}

func (m *URLType) GetPathRegexValue() string {
	if x, ok := m.GetPathChoice().(*URLType_PathRegexValue); ok {
		return x.PathRegexValue
	}
	return ""
}

func (m *URLType) GetAnyPath() *schema.Empty {
	if x, ok := m.GetPathChoice().(*URLType_AnyPath); ok {
		return x.AnyPath
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*URLType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*URLType_ExactValue)(nil),
		(*URLType_SuffixValue)(nil),
		(*URLType_RegexValue)(nil),
		(*URLType_PathExactValue)(nil),
		(*URLType_PathPrefixValue)(nil),
		(*URLType_PathRegexValue)(nil),
		(*URLType_AnyPath)(nil),
	}
}

// Forward Proxy Rule
//
// x-displayName: "Forward Proxy Rule"
// URL(s) and domains policy for forward proxy for a connection type (TLS or HTTP)
type ForwardProxySimpleRuleType struct {
	// TLS Domains
	//
	// x-displayName: "TLS Domains"
	// Domains in SNI for TLS connections
	TlsList []*schema.DomainType `protobuf:"bytes,1,rep,name=tls_list,json=tlsList,proto3" json:"tls_list,omitempty"`
	// HTTP URLs
	//
	// x-displayName: "HTTP URLs"
	// URLs for HTTP connections
	HttpList []*URLType `protobuf:"bytes,2,rep,name=http_list,json=httpList,proto3" json:"http_list,omitempty"`
	// L4 Destinations
	//
	// x-displayName: "L4 Destination List"
	// L4 destinations for non-HTTP and non-TLS connections and TLS connections without SNI
	DestList []*schema.L4DestType `protobuf:"bytes,3,rep,name=dest_list,json=destList,proto3" json:"dest_list,omitempty"`
	// Default Action
	//
	// x-displayName: "Default Action"
	// x-required
	// Default action for connections that do not match any items in the HTTP, TLS and L4 lists
	//
	// Types that are valid to be assigned to DefaultActionChoice:
	//	*ForwardProxySimpleRuleType_DefaultActionNextPolicy
	//	*ForwardProxySimpleRuleType_DefaultActionDeny
	//	*ForwardProxySimpleRuleType_DefaultActionAllow
	DefaultActionChoice isForwardProxySimpleRuleType_DefaultActionChoice `protobuf_oneof:"default_action_choice"`
}

func (m *ForwardProxySimpleRuleType) Reset()      { *m = ForwardProxySimpleRuleType{} }
func (*ForwardProxySimpleRuleType) ProtoMessage() {}
func (*ForwardProxySimpleRuleType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2204e8d809da33de, []int{1}
}
func (m *ForwardProxySimpleRuleType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardProxySimpleRuleType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ForwardProxySimpleRuleType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardProxySimpleRuleType.Merge(m, src)
}
func (m *ForwardProxySimpleRuleType) XXX_Size() int {
	return m.Size()
}
func (m *ForwardProxySimpleRuleType) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardProxySimpleRuleType.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardProxySimpleRuleType proto.InternalMessageInfo

type isForwardProxySimpleRuleType_DefaultActionChoice interface {
	isForwardProxySimpleRuleType_DefaultActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ForwardProxySimpleRuleType_DefaultActionNextPolicy struct {
	DefaultActionNextPolicy *schema.Empty `protobuf:"bytes,7,opt,name=default_action_next_policy,json=defaultActionNextPolicy,proto3,oneof" json:"default_action_next_policy,omitempty"`
}
type ForwardProxySimpleRuleType_DefaultActionDeny struct {
	DefaultActionDeny *schema.Empty `protobuf:"bytes,8,opt,name=default_action_deny,json=defaultActionDeny,proto3,oneof" json:"default_action_deny,omitempty"`
}
type ForwardProxySimpleRuleType_DefaultActionAllow struct {
	DefaultActionAllow *schema.Empty `protobuf:"bytes,9,opt,name=default_action_allow,json=defaultActionAllow,proto3,oneof" json:"default_action_allow,omitempty"`
}

func (*ForwardProxySimpleRuleType_DefaultActionNextPolicy) isForwardProxySimpleRuleType_DefaultActionChoice() {
}
func (*ForwardProxySimpleRuleType_DefaultActionDeny) isForwardProxySimpleRuleType_DefaultActionChoice() {
}
func (*ForwardProxySimpleRuleType_DefaultActionAllow) isForwardProxySimpleRuleType_DefaultActionChoice() {
}

func (m *ForwardProxySimpleRuleType) GetDefaultActionChoice() isForwardProxySimpleRuleType_DefaultActionChoice {
	if m != nil {
		return m.DefaultActionChoice
	}
	return nil
}

func (m *ForwardProxySimpleRuleType) GetTlsList() []*schema.DomainType {
	if m != nil {
		return m.TlsList
	}
	return nil
}

func (m *ForwardProxySimpleRuleType) GetHttpList() []*URLType {
	if m != nil {
		return m.HttpList
	}
	return nil
}

func (m *ForwardProxySimpleRuleType) GetDestList() []*schema.L4DestType {
	if m != nil {
		return m.DestList
	}
	return nil
}

func (m *ForwardProxySimpleRuleType) GetDefaultActionNextPolicy() *schema.Empty {
	if x, ok := m.GetDefaultActionChoice().(*ForwardProxySimpleRuleType_DefaultActionNextPolicy); ok {
		return x.DefaultActionNextPolicy
	}
	return nil
}

func (m *ForwardProxySimpleRuleType) GetDefaultActionDeny() *schema.Empty {
	if x, ok := m.GetDefaultActionChoice().(*ForwardProxySimpleRuleType_DefaultActionDeny); ok {
		return x.DefaultActionDeny
	}
	return nil
}

func (m *ForwardProxySimpleRuleType) GetDefaultActionAllow() *schema.Empty {
	if x, ok := m.GetDefaultActionChoice().(*ForwardProxySimpleRuleType_DefaultActionAllow); ok {
		return x.DefaultActionAllow
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ForwardProxySimpleRuleType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ForwardProxySimpleRuleType_DefaultActionNextPolicy)(nil),
		(*ForwardProxySimpleRuleType_DefaultActionDeny)(nil),
		(*ForwardProxySimpleRuleType_DefaultActionAllow)(nil),
	}
}

type DomainListType struct {
	// TLS Domains
	//
	// x-displayName: "TLS Domains"
	// Domains in SNI for TLS connections
	TlsList []*schema.DomainType `protobuf:"bytes,1,rep,name=tls_list,json=tlsList,proto3" json:"tls_list,omitempty"`
}

func (m *DomainListType) Reset()      { *m = DomainListType{} }
func (*DomainListType) ProtoMessage() {}
func (*DomainListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2204e8d809da33de, []int{2}
}
func (m *DomainListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DomainListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainListType.Merge(m, src)
}
func (m *DomainListType) XXX_Size() int {
	return m.Size()
}
func (m *DomainListType) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainListType.DiscardUnknown(m)
}

var xxx_messageInfo_DomainListType proto.InternalMessageInfo

func (m *DomainListType) GetTlsList() []*schema.DomainType {
	if m != nil {
		return m.TlsList
	}
	return nil
}

type URLListType struct {
	// HTTP URLs
	//
	// x-displayName: "HTTP URLs"
	// URLs for HTTP connections
	HttpList []*URLType `protobuf:"bytes,2,rep,name=http_list,json=httpList,proto3" json:"http_list,omitempty"`
}

func (m *URLListType) Reset()      { *m = URLListType{} }
func (*URLListType) ProtoMessage() {}
func (*URLListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2204e8d809da33de, []int{3}
}
func (m *URLListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *URLListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *URLListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URLListType.Merge(m, src)
}
func (m *URLListType) XXX_Size() int {
	return m.Size()
}
func (m *URLListType) XXX_DiscardUnknown() {
	xxx_messageInfo_URLListType.DiscardUnknown(m)
}

var xxx_messageInfo_URLListType proto.InternalMessageInfo

func (m *URLListType) GetHttpList() []*URLType {
	if m != nil {
		return m.HttpList
	}
	return nil
}

// Forward Proxy Rule
//
// x-displayName: "Forward Proxy Rule"
// URL(s) and domains policy for forward proxy for a connection type (TLS or HTTP)
type ForwardProxyAdvancedRuleType struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,25,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "my-policy-allow-github.com"
	// Rule Name that will be used to query metrics for this rule.
	RuleName string `protobuf:"bytes,1,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	// Description
	//
	// x-displayName: "Description"
	// x-example: "Rule to block example.com"
	// Human readable description for the rule
	RuleDescription string `protobuf:"bytes,18,opt,name=rule_description,json=ruleDescription,proto3" json:"rule_description,omitempty"`
	// action
	//
	// x-displayName: "Action"
	// x-required
	// Action to be enforced if the input request matches the rule.
	Action policy.RuleAction `protobuf:"varint,2,opt,name=action,proto3,enum=ves.io.schema.policy.RuleAction" json:"action,omitempty"`
	// Choose Source
	//
	// x-displayName: "Select Connection Source"
	// x-required
	// Select source for proxy policy.
	// Source can be a particular endpoint or set of endpoints.
	//
	// Types that are valid to be assigned to SourceChoice:
	//	*ForwardProxyAdvancedRuleType_AllSources
	//	*ForwardProxyAdvancedRuleType_PrefixList
	//	*ForwardProxyAdvancedRuleType_InsideSources
	//	*ForwardProxyAdvancedRuleType_Interface
	//	*ForwardProxyAdvancedRuleType_Namespace
	//	*ForwardProxyAdvancedRuleType_LabelSelector
	//	*ForwardProxyAdvancedRuleType_IpPrefixSet
	SourceChoice isForwardProxyAdvancedRuleType_SourceChoice `protobuf_oneof:"source_choice"`
	// Destination Choice
	//
	// x-displayName: "Destination Choice"
	// x-required
	// Destinations of the proxy connections
	//
	// Types that are valid to be assigned to DestinationChoice:
	//	*ForwardProxyAdvancedRuleType_AllDestinations
	//	*ForwardProxyAdvancedRuleType_TlsList
	//	*ForwardProxyAdvancedRuleType_HttpList
	//	*ForwardProxyAdvancedRuleType_DstIpPrefixSet
	//	*ForwardProxyAdvancedRuleType_DstPrefixList
	//	*ForwardProxyAdvancedRuleType_DstAsnSet
	//	*ForwardProxyAdvancedRuleType_DstAsnList
	//	*ForwardProxyAdvancedRuleType_DstLabelSelector
	DestinationChoice isForwardProxyAdvancedRuleType_DestinationChoice `protobuf_oneof:"destination_choice"`
	// Destination port
	//
	// x-displayName: "Destination Port"
	// Match on destination port for connections
	//
	// Types that are valid to be assigned to HttpConnectChoice:
	//	*ForwardProxyAdvancedRuleType_NoHttpConnectPort
	//	*ForwardProxyAdvancedRuleType_PortMatcher
	HttpConnectChoice isForwardProxyAdvancedRuleType_HttpConnectChoice `protobuf_oneof:"http_connect_choice"`
}

func (m *ForwardProxyAdvancedRuleType) Reset()      { *m = ForwardProxyAdvancedRuleType{} }
func (*ForwardProxyAdvancedRuleType) ProtoMessage() {}
func (*ForwardProxyAdvancedRuleType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2204e8d809da33de, []int{4}
}
func (m *ForwardProxyAdvancedRuleType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardProxyAdvancedRuleType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ForwardProxyAdvancedRuleType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardProxyAdvancedRuleType.Merge(m, src)
}
func (m *ForwardProxyAdvancedRuleType) XXX_Size() int {
	return m.Size()
}
func (m *ForwardProxyAdvancedRuleType) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardProxyAdvancedRuleType.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardProxyAdvancedRuleType proto.InternalMessageInfo

type isForwardProxyAdvancedRuleType_SourceChoice interface {
	isForwardProxyAdvancedRuleType_SourceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isForwardProxyAdvancedRuleType_DestinationChoice interface {
	isForwardProxyAdvancedRuleType_DestinationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isForwardProxyAdvancedRuleType_HttpConnectChoice interface {
	isForwardProxyAdvancedRuleType_HttpConnectChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ForwardProxyAdvancedRuleType_AllSources struct {
	AllSources *schema.Empty `protobuf:"bytes,4,opt,name=all_sources,json=allSources,proto3,oneof" json:"all_sources,omitempty"`
}
type ForwardProxyAdvancedRuleType_PrefixList struct {
	PrefixList *views.PrefixStringListType `protobuf:"bytes,5,opt,name=prefix_list,json=prefixList,proto3,oneof" json:"prefix_list,omitempty"`
}
type ForwardProxyAdvancedRuleType_InsideSources struct {
	InsideSources *schema.Empty `protobuf:"bytes,6,opt,name=inside_sources,json=insideSources,proto3,oneof" json:"inside_sources,omitempty"`
}
type ForwardProxyAdvancedRuleType_Interface struct {
	Interface *views.ObjectRefType `protobuf:"bytes,7,opt,name=interface,proto3,oneof" json:"interface,omitempty"`
}
type ForwardProxyAdvancedRuleType_Namespace struct {
	Namespace string `protobuf:"bytes,8,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
}
type ForwardProxyAdvancedRuleType_LabelSelector struct {
	LabelSelector *schema.LabelSelectorType `protobuf:"bytes,9,opt,name=label_selector,json=labelSelector,proto3,oneof" json:"label_selector,omitempty"`
}
type ForwardProxyAdvancedRuleType_IpPrefixSet struct {
	IpPrefixSet *views.ObjectRefType `protobuf:"bytes,10,opt,name=ip_prefix_set,json=ipPrefixSet,proto3,oneof" json:"ip_prefix_set,omitempty"`
}
type ForwardProxyAdvancedRuleType_AllDestinations struct {
	AllDestinations *schema.Empty `protobuf:"bytes,12,opt,name=all_destinations,json=allDestinations,proto3,oneof" json:"all_destinations,omitempty"`
}
type ForwardProxyAdvancedRuleType_TlsList struct {
	TlsList *DomainListType `protobuf:"bytes,13,opt,name=tls_list,json=tlsList,proto3,oneof" json:"tls_list,omitempty"`
}
type ForwardProxyAdvancedRuleType_HttpList struct {
	HttpList *URLListType `protobuf:"bytes,14,opt,name=http_list,json=httpList,proto3,oneof" json:"http_list,omitempty"`
}
type ForwardProxyAdvancedRuleType_DstIpPrefixSet struct {
	DstIpPrefixSet *views.ObjectRefType `protobuf:"bytes,20,opt,name=dst_ip_prefix_set,json=dstIpPrefixSet,proto3,oneof" json:"dst_ip_prefix_set,omitempty"`
}
type ForwardProxyAdvancedRuleType_DstPrefixList struct {
	DstPrefixList *views.PrefixStringListType `protobuf:"bytes,21,opt,name=dst_prefix_list,json=dstPrefixList,proto3,oneof" json:"dst_prefix_list,omitempty"`
}
type ForwardProxyAdvancedRuleType_DstAsnSet struct {
	DstAsnSet *views.ObjectRefType `protobuf:"bytes,23,opt,name=dst_asn_set,json=dstAsnSet,proto3,oneof" json:"dst_asn_set,omitempty"`
}
type ForwardProxyAdvancedRuleType_DstAsnList struct {
	DstAsnList *policy.AsnMatchList `protobuf:"bytes,24,opt,name=dst_asn_list,json=dstAsnList,proto3,oneof" json:"dst_asn_list,omitempty"`
}
type ForwardProxyAdvancedRuleType_DstLabelSelector struct {
	DstLabelSelector *schema.LabelSelectorType `protobuf:"bytes,22,opt,name=dst_label_selector,json=dstLabelSelector,proto3,oneof" json:"dst_label_selector,omitempty"`
}
type ForwardProxyAdvancedRuleType_NoHttpConnectPort struct {
	NoHttpConnectPort *schema.Empty `protobuf:"bytes,16,opt,name=no_http_connect_port,json=noHttpConnectPort,proto3,oneof" json:"no_http_connect_port,omitempty"`
}
type ForwardProxyAdvancedRuleType_PortMatcher struct {
	PortMatcher *policy.PortMatcherType `protobuf:"bytes,17,opt,name=port_matcher,json=portMatcher,proto3,oneof" json:"port_matcher,omitempty"`
}

func (*ForwardProxyAdvancedRuleType_AllSources) isForwardProxyAdvancedRuleType_SourceChoice()    {}
func (*ForwardProxyAdvancedRuleType_PrefixList) isForwardProxyAdvancedRuleType_SourceChoice()    {}
func (*ForwardProxyAdvancedRuleType_InsideSources) isForwardProxyAdvancedRuleType_SourceChoice() {}
func (*ForwardProxyAdvancedRuleType_Interface) isForwardProxyAdvancedRuleType_SourceChoice()     {}
func (*ForwardProxyAdvancedRuleType_Namespace) isForwardProxyAdvancedRuleType_SourceChoice()     {}
func (*ForwardProxyAdvancedRuleType_LabelSelector) isForwardProxyAdvancedRuleType_SourceChoice() {}
func (*ForwardProxyAdvancedRuleType_IpPrefixSet) isForwardProxyAdvancedRuleType_SourceChoice()   {}
func (*ForwardProxyAdvancedRuleType_AllDestinations) isForwardProxyAdvancedRuleType_DestinationChoice() {
}
func (*ForwardProxyAdvancedRuleType_TlsList) isForwardProxyAdvancedRuleType_DestinationChoice()  {}
func (*ForwardProxyAdvancedRuleType_HttpList) isForwardProxyAdvancedRuleType_DestinationChoice() {}
func (*ForwardProxyAdvancedRuleType_DstIpPrefixSet) isForwardProxyAdvancedRuleType_DestinationChoice() {
}
func (*ForwardProxyAdvancedRuleType_DstPrefixList) isForwardProxyAdvancedRuleType_DestinationChoice() {
}
func (*ForwardProxyAdvancedRuleType_DstAsnSet) isForwardProxyAdvancedRuleType_DestinationChoice()  {}
func (*ForwardProxyAdvancedRuleType_DstAsnList) isForwardProxyAdvancedRuleType_DestinationChoice() {}
func (*ForwardProxyAdvancedRuleType_DstLabelSelector) isForwardProxyAdvancedRuleType_DestinationChoice() {
}
func (*ForwardProxyAdvancedRuleType_NoHttpConnectPort) isForwardProxyAdvancedRuleType_HttpConnectChoice() {
}
func (*ForwardProxyAdvancedRuleType_PortMatcher) isForwardProxyAdvancedRuleType_HttpConnectChoice() {}

func (m *ForwardProxyAdvancedRuleType) GetSourceChoice() isForwardProxyAdvancedRuleType_SourceChoice {
	if m != nil {
		return m.SourceChoice
	}
	return nil
}
func (m *ForwardProxyAdvancedRuleType) GetDestinationChoice() isForwardProxyAdvancedRuleType_DestinationChoice {
	if m != nil {
		return m.DestinationChoice
	}
	return nil
}
func (m *ForwardProxyAdvancedRuleType) GetHttpConnectChoice() isForwardProxyAdvancedRuleType_HttpConnectChoice {
	if m != nil {
		return m.HttpConnectChoice
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *ForwardProxyAdvancedRuleType) GetRuleDescription() string {
	if m != nil {
		return m.RuleDescription
	}
	return ""
}

func (m *ForwardProxyAdvancedRuleType) GetAction() policy.RuleAction {
	if m != nil {
		return m.Action
	}
	return policy.DENY
}

func (m *ForwardProxyAdvancedRuleType) GetAllSources() *schema.Empty {
	if x, ok := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_AllSources); ok {
		return x.AllSources
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetPrefixList() *views.PrefixStringListType {
	if x, ok := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_PrefixList); ok {
		return x.PrefixList
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetInsideSources() *schema.Empty {
	if x, ok := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_InsideSources); ok {
		return x.InsideSources
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetInterface() *views.ObjectRefType {
	if x, ok := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_Interface); ok {
		return x.Interface
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetNamespace() string {
	if x, ok := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_Namespace); ok {
		return x.Namespace
	}
	return ""
}

func (m *ForwardProxyAdvancedRuleType) GetLabelSelector() *schema.LabelSelectorType {
	if x, ok := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_LabelSelector); ok {
		return x.LabelSelector
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetIpPrefixSet() *views.ObjectRefType {
	if x, ok := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_IpPrefixSet); ok {
		return x.IpPrefixSet
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetAllDestinations() *schema.Empty {
	if x, ok := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_AllDestinations); ok {
		return x.AllDestinations
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetTlsList() *DomainListType {
	if x, ok := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_TlsList); ok {
		return x.TlsList
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetHttpList() *URLListType {
	if x, ok := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_HttpList); ok {
		return x.HttpList
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetDstIpPrefixSet() *views.ObjectRefType {
	if x, ok := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_DstIpPrefixSet); ok {
		return x.DstIpPrefixSet
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetDstPrefixList() *views.PrefixStringListType {
	if x, ok := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_DstPrefixList); ok {
		return x.DstPrefixList
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetDstAsnSet() *views.ObjectRefType {
	if x, ok := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_DstAsnSet); ok {
		return x.DstAsnSet
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetDstAsnList() *policy.AsnMatchList {
	if x, ok := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_DstAsnList); ok {
		return x.DstAsnList
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetDstLabelSelector() *schema.LabelSelectorType {
	if x, ok := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_DstLabelSelector); ok {
		return x.DstLabelSelector
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetNoHttpConnectPort() *schema.Empty {
	if x, ok := m.GetHttpConnectChoice().(*ForwardProxyAdvancedRuleType_NoHttpConnectPort); ok {
		return x.NoHttpConnectPort
	}
	return nil
}

func (m *ForwardProxyAdvancedRuleType) GetPortMatcher() *policy.PortMatcherType {
	if x, ok := m.GetHttpConnectChoice().(*ForwardProxyAdvancedRuleType_PortMatcher); ok {
		return x.PortMatcher
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ForwardProxyAdvancedRuleType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ForwardProxyAdvancedRuleType_AllSources)(nil),
		(*ForwardProxyAdvancedRuleType_PrefixList)(nil),
		(*ForwardProxyAdvancedRuleType_InsideSources)(nil),
		(*ForwardProxyAdvancedRuleType_Interface)(nil),
		(*ForwardProxyAdvancedRuleType_Namespace)(nil),
		(*ForwardProxyAdvancedRuleType_LabelSelector)(nil),
		(*ForwardProxyAdvancedRuleType_IpPrefixSet)(nil),
		(*ForwardProxyAdvancedRuleType_AllDestinations)(nil),
		(*ForwardProxyAdvancedRuleType_TlsList)(nil),
		(*ForwardProxyAdvancedRuleType_HttpList)(nil),
		(*ForwardProxyAdvancedRuleType_DstIpPrefixSet)(nil),
		(*ForwardProxyAdvancedRuleType_DstPrefixList)(nil),
		(*ForwardProxyAdvancedRuleType_DstAsnSet)(nil),
		(*ForwardProxyAdvancedRuleType_DstAsnList)(nil),
		(*ForwardProxyAdvancedRuleType_DstLabelSelector)(nil),
		(*ForwardProxyAdvancedRuleType_NoHttpConnectPort)(nil),
		(*ForwardProxyAdvancedRuleType_PortMatcher)(nil),
	}
}

// Custom List of rules
//
// x-displayName: "Custom Rule List"
// List of custom rules
type ForwardProxyRuleListType struct {
	// rules
	//
	// x-displayName: "Custom Rule List"
	// x-required
	// List of custom rules
	Rules []*ForwardProxyAdvancedRuleType `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *ForwardProxyRuleListType) Reset()      { *m = ForwardProxyRuleListType{} }
func (*ForwardProxyRuleListType) ProtoMessage() {}
func (*ForwardProxyRuleListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2204e8d809da33de, []int{5}
}
func (m *ForwardProxyRuleListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardProxyRuleListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ForwardProxyRuleListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardProxyRuleListType.Merge(m, src)
}
func (m *ForwardProxyRuleListType) XXX_Size() int {
	return m.Size()
}
func (m *ForwardProxyRuleListType) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardProxyRuleListType.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardProxyRuleListType proto.InternalMessageInfo

func (m *ForwardProxyRuleListType) GetRules() []*ForwardProxyAdvancedRuleType {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Forward Proxy Policy
//
// x-displayName: "Forward Proxy Policy"
// URL(s) and domains policy for forward proxy
type GlobalSpecType struct {
	// Choose Forward Proxy
	//
	// x-displayName: "Select Forward Proxy"
	// x-required
	// Select Forward Proxy where this policy will be applied
	//
	// Types that are valid to be assigned to ProxyChoice:
	//	*GlobalSpecType_AnyProxy
	//	*GlobalSpecType_NetworkConnector
	//	*GlobalSpecType_ProxyLabelSelector
	//	*GlobalSpecType_DrpHttpConnect
	ProxyChoice isGlobalSpecType_ProxyChoice `protobuf_oneof:"proxy_choice"`
	// Select Policy Rules
	//
	// x-displayName: "Select Policy Rules"
	// x-required
	// Select how rules are configured for forward proxy
	//
	// Types that are valid to be assigned to RuleChoice:
	//	*GlobalSpecType_AllowAll
	//	*GlobalSpecType_AllowList
	//	*GlobalSpecType_DenyList
	//	*GlobalSpecType_RuleList
	RuleChoice isGlobalSpecType_RuleChoice `protobuf_oneof:"rule_choice"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2204e8d809da33de, []int{6}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_ProxyChoice interface {
	isGlobalSpecType_ProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_RuleChoice interface {
	isGlobalSpecType_RuleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_AnyProxy struct {
	AnyProxy *schema.Empty `protobuf:"bytes,2,opt,name=any_proxy,json=anyProxy,proto3,oneof" json:"any_proxy,omitempty"`
}
type GlobalSpecType_NetworkConnector struct {
	NetworkConnector *views.ObjectRefType `protobuf:"bytes,3,opt,name=network_connector,json=networkConnector,proto3,oneof" json:"network_connector,omitempty"`
}
type GlobalSpecType_ProxyLabelSelector struct {
	ProxyLabelSelector *schema.LabelSelectorType `protobuf:"bytes,4,opt,name=proxy_label_selector,json=proxyLabelSelector,proto3,oneof" json:"proxy_label_selector,omitempty"`
}
type GlobalSpecType_DrpHttpConnect struct {
	DrpHttpConnect *schema.Empty `protobuf:"bytes,11,opt,name=drp_http_connect,json=drpHttpConnect,proto3,oneof" json:"drp_http_connect,omitempty"`
}
type GlobalSpecType_AllowAll struct {
	AllowAll *schema.Empty `protobuf:"bytes,7,opt,name=allow_all,json=allowAll,proto3,oneof" json:"allow_all,omitempty"`
}
type GlobalSpecType_AllowList struct {
	AllowList *ForwardProxySimpleRuleType `protobuf:"bytes,8,opt,name=allow_list,json=allowList,proto3,oneof" json:"allow_list,omitempty"`
}
type GlobalSpecType_DenyList struct {
	DenyList *ForwardProxySimpleRuleType `protobuf:"bytes,9,opt,name=deny_list,json=denyList,proto3,oneof" json:"deny_list,omitempty"`
}
type GlobalSpecType_RuleList struct {
	RuleList *ForwardProxyRuleListType `protobuf:"bytes,10,opt,name=rule_list,json=ruleList,proto3,oneof" json:"rule_list,omitempty"`
}

func (*GlobalSpecType_AnyProxy) isGlobalSpecType_ProxyChoice()           {}
func (*GlobalSpecType_NetworkConnector) isGlobalSpecType_ProxyChoice()   {}
func (*GlobalSpecType_ProxyLabelSelector) isGlobalSpecType_ProxyChoice() {}
func (*GlobalSpecType_DrpHttpConnect) isGlobalSpecType_ProxyChoice()     {}
func (*GlobalSpecType_AllowAll) isGlobalSpecType_RuleChoice()            {}
func (*GlobalSpecType_AllowList) isGlobalSpecType_RuleChoice()           {}
func (*GlobalSpecType_DenyList) isGlobalSpecType_RuleChoice()            {}
func (*GlobalSpecType_RuleList) isGlobalSpecType_RuleChoice()            {}

func (m *GlobalSpecType) GetProxyChoice() isGlobalSpecType_ProxyChoice {
	if m != nil {
		return m.ProxyChoice
	}
	return nil
}
func (m *GlobalSpecType) GetRuleChoice() isGlobalSpecType_RuleChoice {
	if m != nil {
		return m.RuleChoice
	}
	return nil
}

func (m *GlobalSpecType) GetAnyProxy() *schema.Empty {
	if x, ok := m.GetProxyChoice().(*GlobalSpecType_AnyProxy); ok {
		return x.AnyProxy
	}
	return nil
}

func (m *GlobalSpecType) GetNetworkConnector() *views.ObjectRefType {
	if x, ok := m.GetProxyChoice().(*GlobalSpecType_NetworkConnector); ok {
		return x.NetworkConnector
	}
	return nil
}

func (m *GlobalSpecType) GetProxyLabelSelector() *schema.LabelSelectorType {
	if x, ok := m.GetProxyChoice().(*GlobalSpecType_ProxyLabelSelector); ok {
		return x.ProxyLabelSelector
	}
	return nil
}

func (m *GlobalSpecType) GetDrpHttpConnect() *schema.Empty {
	if x, ok := m.GetProxyChoice().(*GlobalSpecType_DrpHttpConnect); ok {
		return x.DrpHttpConnect
	}
	return nil
}

func (m *GlobalSpecType) GetAllowAll() *schema.Empty {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_AllowAll); ok {
		return x.AllowAll
	}
	return nil
}

func (m *GlobalSpecType) GetAllowList() *ForwardProxySimpleRuleType {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_AllowList); ok {
		return x.AllowList
	}
	return nil
}

func (m *GlobalSpecType) GetDenyList() *ForwardProxySimpleRuleType {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_DenyList); ok {
		return x.DenyList
	}
	return nil
}

func (m *GlobalSpecType) GetRuleList() *ForwardProxyRuleListType {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_RuleList); ok {
		return x.RuleList
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_AnyProxy)(nil),
		(*GlobalSpecType_NetworkConnector)(nil),
		(*GlobalSpecType_ProxyLabelSelector)(nil),
		(*GlobalSpecType_DrpHttpConnect)(nil),
		(*GlobalSpecType_AllowAll)(nil),
		(*GlobalSpecType_AllowList)(nil),
		(*GlobalSpecType_DenyList)(nil),
		(*GlobalSpecType_RuleList)(nil),
	}
}

// CreateSpecType
//
// x-displayName: "Create Forward Proxy Policy"
// Shape of the Forward Proxy Policy specification
type CreateSpecType struct {
	// Types that are valid to be assigned to ProxyChoice:
	//	*CreateSpecType_AnyProxy
	//	*CreateSpecType_NetworkConnector
	//	*CreateSpecType_ProxyLabelSelector
	//	*CreateSpecType_DrpHttpConnect
	ProxyChoice isCreateSpecType_ProxyChoice `protobuf_oneof:"proxy_choice"`
	// Types that are valid to be assigned to RuleChoice:
	//	*CreateSpecType_AllowAll
	//	*CreateSpecType_AllowList
	//	*CreateSpecType_DenyList
	//	*CreateSpecType_RuleList
	RuleChoice isCreateSpecType_RuleChoice `protobuf_oneof:"rule_choice"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2204e8d809da33de, []int{7}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_ProxyChoice interface {
	isCreateSpecType_ProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_RuleChoice interface {
	isCreateSpecType_RuleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_AnyProxy struct {
	AnyProxy *schema.Empty `protobuf:"bytes,2,opt,name=any_proxy,json=anyProxy,proto3,oneof" json:"any_proxy,omitempty"`
}
type CreateSpecType_NetworkConnector struct {
	NetworkConnector *views.ObjectRefType `protobuf:"bytes,3,opt,name=network_connector,json=networkConnector,proto3,oneof" json:"network_connector,omitempty"`
}
type CreateSpecType_ProxyLabelSelector struct {
	ProxyLabelSelector *schema.LabelSelectorType `protobuf:"bytes,4,opt,name=proxy_label_selector,json=proxyLabelSelector,proto3,oneof" json:"proxy_label_selector,omitempty"`
}
type CreateSpecType_DrpHttpConnect struct {
	DrpHttpConnect *schema.Empty `protobuf:"bytes,11,opt,name=drp_http_connect,json=drpHttpConnect,proto3,oneof" json:"drp_http_connect,omitempty"`
}
type CreateSpecType_AllowAll struct {
	AllowAll *schema.Empty `protobuf:"bytes,7,opt,name=allow_all,json=allowAll,proto3,oneof" json:"allow_all,omitempty"`
}
type CreateSpecType_AllowList struct {
	AllowList *ForwardProxySimpleRuleType `protobuf:"bytes,8,opt,name=allow_list,json=allowList,proto3,oneof" json:"allow_list,omitempty"`
}
type CreateSpecType_DenyList struct {
	DenyList *ForwardProxySimpleRuleType `protobuf:"bytes,9,opt,name=deny_list,json=denyList,proto3,oneof" json:"deny_list,omitempty"`
}
type CreateSpecType_RuleList struct {
	RuleList *ForwardProxyRuleListType `protobuf:"bytes,10,opt,name=rule_list,json=ruleList,proto3,oneof" json:"rule_list,omitempty"`
}

func (*CreateSpecType_AnyProxy) isCreateSpecType_ProxyChoice()           {}
func (*CreateSpecType_NetworkConnector) isCreateSpecType_ProxyChoice()   {}
func (*CreateSpecType_ProxyLabelSelector) isCreateSpecType_ProxyChoice() {}
func (*CreateSpecType_DrpHttpConnect) isCreateSpecType_ProxyChoice()     {}
func (*CreateSpecType_AllowAll) isCreateSpecType_RuleChoice()            {}
func (*CreateSpecType_AllowList) isCreateSpecType_RuleChoice()           {}
func (*CreateSpecType_DenyList) isCreateSpecType_RuleChoice()            {}
func (*CreateSpecType_RuleList) isCreateSpecType_RuleChoice()            {}

func (m *CreateSpecType) GetProxyChoice() isCreateSpecType_ProxyChoice {
	if m != nil {
		return m.ProxyChoice
	}
	return nil
}
func (m *CreateSpecType) GetRuleChoice() isCreateSpecType_RuleChoice {
	if m != nil {
		return m.RuleChoice
	}
	return nil
}

func (m *CreateSpecType) GetAnyProxy() *schema.Empty {
	if x, ok := m.GetProxyChoice().(*CreateSpecType_AnyProxy); ok {
		return x.AnyProxy
	}
	return nil
}

func (m *CreateSpecType) GetNetworkConnector() *views.ObjectRefType {
	if x, ok := m.GetProxyChoice().(*CreateSpecType_NetworkConnector); ok {
		return x.NetworkConnector
	}
	return nil
}

func (m *CreateSpecType) GetProxyLabelSelector() *schema.LabelSelectorType {
	if x, ok := m.GetProxyChoice().(*CreateSpecType_ProxyLabelSelector); ok {
		return x.ProxyLabelSelector
	}
	return nil
}

func (m *CreateSpecType) GetDrpHttpConnect() *schema.Empty {
	if x, ok := m.GetProxyChoice().(*CreateSpecType_DrpHttpConnect); ok {
		return x.DrpHttpConnect
	}
	return nil
}

func (m *CreateSpecType) GetAllowAll() *schema.Empty {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_AllowAll); ok {
		return x.AllowAll
	}
	return nil
}

func (m *CreateSpecType) GetAllowList() *ForwardProxySimpleRuleType {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_AllowList); ok {
		return x.AllowList
	}
	return nil
}

func (m *CreateSpecType) GetDenyList() *ForwardProxySimpleRuleType {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_DenyList); ok {
		return x.DenyList
	}
	return nil
}

func (m *CreateSpecType) GetRuleList() *ForwardProxyRuleListType {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_RuleList); ok {
		return x.RuleList
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_AnyProxy)(nil),
		(*CreateSpecType_NetworkConnector)(nil),
		(*CreateSpecType_ProxyLabelSelector)(nil),
		(*CreateSpecType_DrpHttpConnect)(nil),
		(*CreateSpecType_AllowAll)(nil),
		(*CreateSpecType_AllowList)(nil),
		(*CreateSpecType_DenyList)(nil),
		(*CreateSpecType_RuleList)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace Forward Proxy Policy"
// Shape of the Forward Proxy Policy replace specification
type ReplaceSpecType struct {
	// Types that are valid to be assigned to ProxyChoice:
	//	*ReplaceSpecType_AnyProxy
	//	*ReplaceSpecType_NetworkConnector
	//	*ReplaceSpecType_ProxyLabelSelector
	//	*ReplaceSpecType_DrpHttpConnect
	ProxyChoice isReplaceSpecType_ProxyChoice `protobuf_oneof:"proxy_choice"`
	// Types that are valid to be assigned to RuleChoice:
	//	*ReplaceSpecType_AllowAll
	//	*ReplaceSpecType_AllowList
	//	*ReplaceSpecType_DenyList
	//	*ReplaceSpecType_RuleList
	RuleChoice isReplaceSpecType_RuleChoice `protobuf_oneof:"rule_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2204e8d809da33de, []int{8}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_ProxyChoice interface {
	isReplaceSpecType_ProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_RuleChoice interface {
	isReplaceSpecType_RuleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_AnyProxy struct {
	AnyProxy *schema.Empty `protobuf:"bytes,2,opt,name=any_proxy,json=anyProxy,proto3,oneof" json:"any_proxy,omitempty"`
}
type ReplaceSpecType_NetworkConnector struct {
	NetworkConnector *views.ObjectRefType `protobuf:"bytes,3,opt,name=network_connector,json=networkConnector,proto3,oneof" json:"network_connector,omitempty"`
}
type ReplaceSpecType_ProxyLabelSelector struct {
	ProxyLabelSelector *schema.LabelSelectorType `protobuf:"bytes,4,opt,name=proxy_label_selector,json=proxyLabelSelector,proto3,oneof" json:"proxy_label_selector,omitempty"`
}
type ReplaceSpecType_DrpHttpConnect struct {
	DrpHttpConnect *schema.Empty `protobuf:"bytes,11,opt,name=drp_http_connect,json=drpHttpConnect,proto3,oneof" json:"drp_http_connect,omitempty"`
}
type ReplaceSpecType_AllowAll struct {
	AllowAll *schema.Empty `protobuf:"bytes,7,opt,name=allow_all,json=allowAll,proto3,oneof" json:"allow_all,omitempty"`
}
type ReplaceSpecType_AllowList struct {
	AllowList *ForwardProxySimpleRuleType `protobuf:"bytes,8,opt,name=allow_list,json=allowList,proto3,oneof" json:"allow_list,omitempty"`
}
type ReplaceSpecType_DenyList struct {
	DenyList *ForwardProxySimpleRuleType `protobuf:"bytes,9,opt,name=deny_list,json=denyList,proto3,oneof" json:"deny_list,omitempty"`
}
type ReplaceSpecType_RuleList struct {
	RuleList *ForwardProxyRuleListType `protobuf:"bytes,10,opt,name=rule_list,json=ruleList,proto3,oneof" json:"rule_list,omitempty"`
}

func (*ReplaceSpecType_AnyProxy) isReplaceSpecType_ProxyChoice()           {}
func (*ReplaceSpecType_NetworkConnector) isReplaceSpecType_ProxyChoice()   {}
func (*ReplaceSpecType_ProxyLabelSelector) isReplaceSpecType_ProxyChoice() {}
func (*ReplaceSpecType_DrpHttpConnect) isReplaceSpecType_ProxyChoice()     {}
func (*ReplaceSpecType_AllowAll) isReplaceSpecType_RuleChoice()            {}
func (*ReplaceSpecType_AllowList) isReplaceSpecType_RuleChoice()           {}
func (*ReplaceSpecType_DenyList) isReplaceSpecType_RuleChoice()            {}
func (*ReplaceSpecType_RuleList) isReplaceSpecType_RuleChoice()            {}

func (m *ReplaceSpecType) GetProxyChoice() isReplaceSpecType_ProxyChoice {
	if m != nil {
		return m.ProxyChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetRuleChoice() isReplaceSpecType_RuleChoice {
	if m != nil {
		return m.RuleChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetAnyProxy() *schema.Empty {
	if x, ok := m.GetProxyChoice().(*ReplaceSpecType_AnyProxy); ok {
		return x.AnyProxy
	}
	return nil
}

func (m *ReplaceSpecType) GetNetworkConnector() *views.ObjectRefType {
	if x, ok := m.GetProxyChoice().(*ReplaceSpecType_NetworkConnector); ok {
		return x.NetworkConnector
	}
	return nil
}

func (m *ReplaceSpecType) GetProxyLabelSelector() *schema.LabelSelectorType {
	if x, ok := m.GetProxyChoice().(*ReplaceSpecType_ProxyLabelSelector); ok {
		return x.ProxyLabelSelector
	}
	return nil
}

func (m *ReplaceSpecType) GetDrpHttpConnect() *schema.Empty {
	if x, ok := m.GetProxyChoice().(*ReplaceSpecType_DrpHttpConnect); ok {
		return x.DrpHttpConnect
	}
	return nil
}

func (m *ReplaceSpecType) GetAllowAll() *schema.Empty {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_AllowAll); ok {
		return x.AllowAll
	}
	return nil
}

func (m *ReplaceSpecType) GetAllowList() *ForwardProxySimpleRuleType {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_AllowList); ok {
		return x.AllowList
	}
	return nil
}

func (m *ReplaceSpecType) GetDenyList() *ForwardProxySimpleRuleType {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_DenyList); ok {
		return x.DenyList
	}
	return nil
}

func (m *ReplaceSpecType) GetRuleList() *ForwardProxyRuleListType {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_RuleList); ok {
		return x.RuleList
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_AnyProxy)(nil),
		(*ReplaceSpecType_NetworkConnector)(nil),
		(*ReplaceSpecType_ProxyLabelSelector)(nil),
		(*ReplaceSpecType_DrpHttpConnect)(nil),
		(*ReplaceSpecType_AllowAll)(nil),
		(*ReplaceSpecType_AllowList)(nil),
		(*ReplaceSpecType_DenyList)(nil),
		(*ReplaceSpecType_RuleList)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get Forward Proxy Policy"
// Shape of the Forward Proxy Policy specification
type GetSpecType struct {
	// Types that are valid to be assigned to ProxyChoice:
	//	*GetSpecType_AnyProxy
	//	*GetSpecType_NetworkConnector
	//	*GetSpecType_ProxyLabelSelector
	//	*GetSpecType_DrpHttpConnect
	ProxyChoice isGetSpecType_ProxyChoice `protobuf_oneof:"proxy_choice"`
	// Types that are valid to be assigned to RuleChoice:
	//	*GetSpecType_AllowAll
	//	*GetSpecType_AllowList
	//	*GetSpecType_DenyList
	//	*GetSpecType_RuleList
	RuleChoice isGetSpecType_RuleChoice `protobuf_oneof:"rule_choice"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2204e8d809da33de, []int{9}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_ProxyChoice interface {
	isGetSpecType_ProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_RuleChoice interface {
	isGetSpecType_RuleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_AnyProxy struct {
	AnyProxy *schema.Empty `protobuf:"bytes,2,opt,name=any_proxy,json=anyProxy,proto3,oneof" json:"any_proxy,omitempty"`
}
type GetSpecType_NetworkConnector struct {
	NetworkConnector *views.ObjectRefType `protobuf:"bytes,3,opt,name=network_connector,json=networkConnector,proto3,oneof" json:"network_connector,omitempty"`
}
type GetSpecType_ProxyLabelSelector struct {
	ProxyLabelSelector *schema.LabelSelectorType `protobuf:"bytes,4,opt,name=proxy_label_selector,json=proxyLabelSelector,proto3,oneof" json:"proxy_label_selector,omitempty"`
}
type GetSpecType_DrpHttpConnect struct {
	DrpHttpConnect *schema.Empty `protobuf:"bytes,11,opt,name=drp_http_connect,json=drpHttpConnect,proto3,oneof" json:"drp_http_connect,omitempty"`
}
type GetSpecType_AllowAll struct {
	AllowAll *schema.Empty `protobuf:"bytes,7,opt,name=allow_all,json=allowAll,proto3,oneof" json:"allow_all,omitempty"`
}
type GetSpecType_AllowList struct {
	AllowList *ForwardProxySimpleRuleType `protobuf:"bytes,8,opt,name=allow_list,json=allowList,proto3,oneof" json:"allow_list,omitempty"`
}
type GetSpecType_DenyList struct {
	DenyList *ForwardProxySimpleRuleType `protobuf:"bytes,9,opt,name=deny_list,json=denyList,proto3,oneof" json:"deny_list,omitempty"`
}
type GetSpecType_RuleList struct {
	RuleList *ForwardProxyRuleListType `protobuf:"bytes,10,opt,name=rule_list,json=ruleList,proto3,oneof" json:"rule_list,omitempty"`
}

func (*GetSpecType_AnyProxy) isGetSpecType_ProxyChoice()           {}
func (*GetSpecType_NetworkConnector) isGetSpecType_ProxyChoice()   {}
func (*GetSpecType_ProxyLabelSelector) isGetSpecType_ProxyChoice() {}
func (*GetSpecType_DrpHttpConnect) isGetSpecType_ProxyChoice()     {}
func (*GetSpecType_AllowAll) isGetSpecType_RuleChoice()            {}
func (*GetSpecType_AllowList) isGetSpecType_RuleChoice()           {}
func (*GetSpecType_DenyList) isGetSpecType_RuleChoice()            {}
func (*GetSpecType_RuleList) isGetSpecType_RuleChoice()            {}

func (m *GetSpecType) GetProxyChoice() isGetSpecType_ProxyChoice {
	if m != nil {
		return m.ProxyChoice
	}
	return nil
}
func (m *GetSpecType) GetRuleChoice() isGetSpecType_RuleChoice {
	if m != nil {
		return m.RuleChoice
	}
	return nil
}

func (m *GetSpecType) GetAnyProxy() *schema.Empty {
	if x, ok := m.GetProxyChoice().(*GetSpecType_AnyProxy); ok {
		return x.AnyProxy
	}
	return nil
}

func (m *GetSpecType) GetNetworkConnector() *views.ObjectRefType {
	if x, ok := m.GetProxyChoice().(*GetSpecType_NetworkConnector); ok {
		return x.NetworkConnector
	}
	return nil
}

func (m *GetSpecType) GetProxyLabelSelector() *schema.LabelSelectorType {
	if x, ok := m.GetProxyChoice().(*GetSpecType_ProxyLabelSelector); ok {
		return x.ProxyLabelSelector
	}
	return nil
}

func (m *GetSpecType) GetDrpHttpConnect() *schema.Empty {
	if x, ok := m.GetProxyChoice().(*GetSpecType_DrpHttpConnect); ok {
		return x.DrpHttpConnect
	}
	return nil
}

func (m *GetSpecType) GetAllowAll() *schema.Empty {
	if x, ok := m.GetRuleChoice().(*GetSpecType_AllowAll); ok {
		return x.AllowAll
	}
	return nil
}

func (m *GetSpecType) GetAllowList() *ForwardProxySimpleRuleType {
	if x, ok := m.GetRuleChoice().(*GetSpecType_AllowList); ok {
		return x.AllowList
	}
	return nil
}

func (m *GetSpecType) GetDenyList() *ForwardProxySimpleRuleType {
	if x, ok := m.GetRuleChoice().(*GetSpecType_DenyList); ok {
		return x.DenyList
	}
	return nil
}

func (m *GetSpecType) GetRuleList() *ForwardProxyRuleListType {
	if x, ok := m.GetRuleChoice().(*GetSpecType_RuleList); ok {
		return x.RuleList
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_AnyProxy)(nil),
		(*GetSpecType_NetworkConnector)(nil),
		(*GetSpecType_ProxyLabelSelector)(nil),
		(*GetSpecType_DrpHttpConnect)(nil),
		(*GetSpecType_AllowAll)(nil),
		(*GetSpecType_AllowList)(nil),
		(*GetSpecType_DenyList)(nil),
		(*GetSpecType_RuleList)(nil),
	}
}

func init() {
	proto.RegisterType((*URLType)(nil), "ves.io.schema.views.forward_proxy_policy.URLType")
	golang_proto.RegisterType((*URLType)(nil), "ves.io.schema.views.forward_proxy_policy.URLType")
	proto.RegisterType((*ForwardProxySimpleRuleType)(nil), "ves.io.schema.views.forward_proxy_policy.ForwardProxySimpleRuleType")
	golang_proto.RegisterType((*ForwardProxySimpleRuleType)(nil), "ves.io.schema.views.forward_proxy_policy.ForwardProxySimpleRuleType")
	proto.RegisterType((*DomainListType)(nil), "ves.io.schema.views.forward_proxy_policy.DomainListType")
	golang_proto.RegisterType((*DomainListType)(nil), "ves.io.schema.views.forward_proxy_policy.DomainListType")
	proto.RegisterType((*URLListType)(nil), "ves.io.schema.views.forward_proxy_policy.URLListType")
	golang_proto.RegisterType((*URLListType)(nil), "ves.io.schema.views.forward_proxy_policy.URLListType")
	proto.RegisterType((*ForwardProxyAdvancedRuleType)(nil), "ves.io.schema.views.forward_proxy_policy.ForwardProxyAdvancedRuleType")
	golang_proto.RegisterType((*ForwardProxyAdvancedRuleType)(nil), "ves.io.schema.views.forward_proxy_policy.ForwardProxyAdvancedRuleType")
	proto.RegisterType((*ForwardProxyRuleListType)(nil), "ves.io.schema.views.forward_proxy_policy.ForwardProxyRuleListType")
	golang_proto.RegisterType((*ForwardProxyRuleListType)(nil), "ves.io.schema.views.forward_proxy_policy.ForwardProxyRuleListType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.forward_proxy_policy.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.forward_proxy_policy.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.forward_proxy_policy.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.forward_proxy_policy.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.forward_proxy_policy.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.forward_proxy_policy.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.forward_proxy_policy.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.forward_proxy_policy.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/forward_proxy_policy/types.proto", fileDescriptor_2204e8d809da33de)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/forward_proxy_policy/types.proto", fileDescriptor_2204e8d809da33de)
}

var fileDescriptor_2204e8d809da33de = []byte{
	// 2037 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcf, 0x6f, 0xdb, 0xc8,
	0xf5, 0xd7, 0x48, 0xb4, 0x44, 0x3d, 0xca, 0x32, 0xcd, 0x38, 0x6b, 0xc5, 0x1b, 0xe8, 0x6b, 0x68,
	0xf3, 0xc5, 0xa6, 0x28, 0x23, 0x47, 0xb2, 0x63, 0x27, 0x3e, 0x6c, 0x6b, 0xc5, 0xeb, 0x68, 0x05,
	0x27, 0x35, 0x68, 0xa7, 0x45, 0x73, 0x58, 0x95, 0x16, 0xc7, 0x12, 0xbb, 0x14, 0x49, 0x90, 0x23,
	0xdb, 0x2a, 0x60, 0x20, 0xc8, 0x1f, 0x50, 0xb4, 0x0b, 0xf4, 0x12, 0xb4, 0xf7, 0x22, 0xb7, 0x5e,
	0xcb, 0x1c, 0x8c, 0x00, 0x05, 0x16, 0x3d, 0xf9, 0x98, 0xde, 0x36, 0xca, 0xa1, 0xe9, 0x6d, 0xd1,
	0x53, 0xb1, 0xa7, 0x62, 0x86, 0x94, 0x4c, 0x6a, 0x65, 0xd5, 0x49, 0xfa, 0xe3, 0xe2, 0x1b, 0xcd,
	0x79, 0xef, 0xf3, 0x3e, 0xf3, 0xe6, 0x7d, 0xde, 0x1b, 0x5a, 0xb0, 0xb4, 0x8f, 0xdd, 0xa2, 0x6e,
	0x2d, 0xb8, 0x8d, 0x16, 0x6e, 0xab, 0x0b, 0xfb, 0x3a, 0x3e, 0x70, 0x17, 0xf6, 0x2c, 0xe7, 0x40,
	0x75, 0xb4, 0xba, 0xed, 0x58, 0x87, 0xdd, 0xba, 0x6d, 0x19, 0x7a, 0xa3, 0xbb, 0x40, 0xba, 0x36,
	0x76, 0x8b, 0xb6, 0x63, 0x11, 0x4b, 0xba, 0xee, 0x7b, 0x15, 0x7d, 0xaf, 0x22, 0xf3, 0x2a, 0x8e,
	0xf2, 0x9a, 0xbb, 0xd1, 0xd4, 0x49, 0xab, 0xb3, 0x5b, 0x6c, 0x58, 0xed, 0x85, 0xa6, 0xd5, 0xb4,
	0x16, 0x18, 0xc0, 0x6e, 0x67, 0x8f, 0xfd, 0xc5, 0xfe, 0x60, 0x4f, 0x3e, 0xf0, 0xdc, 0x6c, 0x94,
	0x8e, 0x89, 0x49, 0xb0, 0xf0, 0x61, 0x74, 0xc1, 0xb2, 0x89, 0x6e, 0x99, 0x01, 0x9d, 0xb9, 0xf9,
	0xe8, 0xe2, 0x77, 0x09, 0xcf, 0x5d, 0x89, 0x5a, 0x84, 0x97, 0xae, 0x0e, 0x65, 0x40, 0x35, 0x74,
	0x4d, 0x25, 0x78, 0x34, 0x34, 0xdd, 0x69, 0x3d, 0x1a, 0xfc, 0xda, 0xa8, 0x0c, 0xba, 0x3a, 0xc1,
	0xf5, 0x70, 0x94, 0xff, 0x1b, 0x65, 0x15, 0x32, 0x28, 0xfc, 0x86, 0x83, 0xd4, 0x43, 0x65, 0x73,
	0xa7, 0x6b, 0x63, 0xe9, 0x16, 0x08, 0xf8, 0x50, 0x6d, 0x90, 0xfa, 0xbe, 0x6a, 0x74, 0x70, 0x0e,
	0xcd, 0xa3, 0xeb, 0xe9, 0x8a, 0xf4, 0x0f, 0x0f, 0xc5, 0xfe, 0xf8, 0xb7, 0xe3, 0x44, 0xda, 0x49,
	0x89, 0x28, 0xf7, 0x38, 0xde, 0x42, 0xd5, 0x98, 0x02, 0xcc, 0xf0, 0xc7, 0xd4, 0x4e, 0x5a, 0x81,
	0x8c, 0xdb, 0xd9, 0xdb, 0xd3, 0x0f, 0x03, 0xbf, 0xf8, 0x18, 0x3f, 0xc1, 0xb7, 0xf4, 0x1d, 0x97,
	0x41, 0x70, 0x70, 0x13, 0xf7, 0xfd, 0x12, 0xcc, 0xef, 0x52, 0xdf, 0x0f, 0x1c, 0x9e, 0xf9, 0x1d,
	0x23, 0x16, 0x90, 0x59, 0xfa, 0x7e, 0x3f, 0x00, 0xd1, 0x56, 0x49, 0xab, 0x1e, 0x26, 0xcb, 0x8d,
	0x76, 0x7e, 0x13, 0x47, 0x55, 0xa4, 0x64, 0xa9, 0xf9, 0xa7, 0xa7, 0x8c, 0xd7, 0x60, 0x9a, 0x01,
	0xd8, 0x0e, 0x3e, 0xa5, 0x3d, 0x31, 0x0e, 0x61, 0x8a, 0xda, 0x6f, 0x31, 0xf3, 0x28, 0x87, 0xf0,
	0x06, 0x92, 0x67, 0x6f, 0x20, 0xe0, 0xa0, 0x9c, 0x6e, 0xa2, 0x04, 0xbc, 0x6a, 0x76, 0xeb, 0xf4,
	0x6d, 0x2e, 0x3d, 0x8f, 0xae, 0x0b, 0xe5, 0x99, 0x62, 0xb4, 0xbc, 0x3f, 0x6d, 0xdb, 0xa4, 0x5b,
	0x45, 0x4a, 0x4a, 0x35, 0xbb, 0x5b, 0x2a, 0x69, 0xad, 0x7e, 0xf0, 0xc2, 0x43, 0x12, 0x88, 0x90,
	0xae, 0xee, 0xec, 0x6c, 0xcd, 0x3f, 0x54, 0x36, 0x5d, 0x29, 0xb1, 0x22, 0xdf, 0xae, 0x14, 0x60,
	0x52, 0xb3, 0xda, 0xaa, 0x6e, 0xd6, 0x1b, 0x2d, 0x4b, 0x6f, 0x60, 0x69, 0xfa, 0xd8, 0x43, 0xe8,
	0xc4, 0x43, 0xa9, 0x9e, 0x87, 0x26, 0x4a, 0x72, 0x59, 0x5e, 0xac, 0x14, 0x40, 0x60, 0x7c, 0x03,
	0x8b, 0x4b, 0xc7, 0x1e, 0x4a, 0x9f, 0x78, 0x88, 0xef, 0x79, 0x28, 0x75, 0x47, 0x5e, 0x92, 0x6f,
	0xc9, 0xcb, 0x35, 0x8e, 0x4f, 0x89, 0x7c, 0x8d, 0xe3, 0x79, 0x31, 0x5d, 0xf8, 0x2b, 0x07, 0x73,
	0x1b, 0xbe, 0xb2, 0xb6, 0xa8, 0xb0, 0xb6, 0xf5, 0xb6, 0x6d, 0x60, 0xa5, 0x63, 0x60, 0x56, 0x2a,
	0x0f, 0x80, 0x27, 0x86, 0x5b, 0x37, 0x74, 0x97, 0xe4, 0xd0, 0x7c, 0xe2, 0xba, 0x50, 0xbe, 0x32,
	0xc4, 0x7e, 0x9d, 0x31, 0xa2, 0xc6, 0x95, 0xdc, 0x89, 0x87, 0x10, 0xcd, 0xc8, 0xc4, 0x97, 0x28,
	0x2e, 0x8a, 0xfd, 0xa7, 0x1c, 0x52, 0x52, 0xc4, 0x70, 0x37, 0x75, 0x97, 0x48, 0x2d, 0x48, 0xb7,
	0x08, 0xb1, 0x7d, 0xc0, 0x38, 0x03, 0x2c, 0x15, 0xcf, 0xab, 0xf6, 0x62, 0x50, 0xc0, 0x63, 0x02,
	0xf1, 0x14, 0x9d, 0x45, 0xda, 0x81, 0xb4, 0x86, 0x5d, 0xe2, 0x47, 0x4a, 0x8c, 0xa4, 0xbe, 0xb9,
	0xb4, 0x8e, 0x5d, 0xc2, 0x10, 0xaf, 0x06, 0x99, 0x3c, 0x03, 0x95, 0x22, 0x31, 0xd4, 0x6d, 0x98,
	0xd3, 0xf0, 0x9e, 0xda, 0x31, 0x48, 0x5d, 0x6d, 0x50, 0x99, 0xd6, 0x4d, 0x7c, 0x48, 0x02, 0x7e,
	0xb9, 0xd4, 0x98, 0xf3, 0x8d, 0x29, 0xb3, 0x81, 0xe7, 0x1a, 0x73, 0x7c, 0x80, 0x0f, 0xc9, 0x16,
	0x73, 0x93, 0x36, 0xe0, 0xd2, 0x10, 0xa8, 0x86, 0xcd, 0x6e, 0x8e, 0x1f, 0x8b, 0x36, 0x1d, 0x41,
	0x5b, 0xc7, 0x66, 0x57, 0xaa, 0xc2, 0xcc, 0x10, 0x8e, 0x6a, 0x18, 0xd6, 0xc1, 0xd8, 0xb2, 0x8b,
	0x29, 0x52, 0x04, 0x68, 0x8d, 0x7a, 0xac, 0xc2, 0xdf, 0x3f, 0x49, 0xb1, 0x7a, 0x92, 0x97, 0x2b,
	0x45, 0xb8, 0x3c, 0x84, 0x1a, 0xd4, 0xd6, 0xe5, 0x63, 0x0f, 0xa5, 0xbe, 0xf2, 0xf3, 0x96, 0xa4,
	0x15, 0xb8, 0x22, 0xdf, 0x96, 0xef, 0xd4, 0x38, 0x9e, 0x13, 0x27, 0x6a, 0x1c, 0x3f, 0x21, 0x26,
	0x6b, 0x1c, 0x0f, 0xa2, 0x50, 0xe3, 0xf8, 0xa4, 0x98, 0x2a, 0xfc, 0x0c, 0xb2, 0x7e, 0xad, 0xd0,
	0x44, 0xfe, 0x27, 0x8a, 0xab, 0x70, 0x00, 0xc2, 0x43, 0x65, 0x73, 0x00, 0xff, 0x5f, 0xab, 0xb5,
	0xc2, 0x1f, 0xb2, 0x70, 0x35, 0x2c, 0xa2, 0x35, 0x6d, 0x5f, 0x35, 0x1b, 0x58, 0x1b, 0xc8, 0x68,
	0x15, 0xf8, 0x36, 0x26, 0xaa, 0xa6, 0x12, 0x35, 0x77, 0x85, 0x9d, 0x46, 0x7e, 0x88, 0xc9, 0x7d,
	0xec, 0xba, 0x6a, 0x13, 0xdf, 0xc7, 0x44, 0xa5, 0x1e, 0xca, 0xc0, 0x5e, 0xba, 0x06, 0x69, 0xa7,
	0x63, 0xe0, 0xba, 0xa9, 0xb6, 0xfb, 0xbd, 0x3a, 0xf5, 0xf2, 0x08, 0xbd, 0xf1, 0x10, 0x52, 0x78,
	0xba, 0xf2, 0x40, 0x6d, 0x63, 0xa9, 0x0c, 0x22, 0xb3, 0xd2, 0xb0, 0xdb, 0x70, 0x74, 0x36, 0x41,
	0x72, 0x52, 0xd4, 0x78, 0x8a, 0x1a, 0xac, 0x9f, 0xae, 0x4b, 0x1b, 0x90, 0xf4, 0x4f, 0x94, 0xb5,
	0xf2, 0x6c, 0x79, 0x7e, 0x88, 0x53, 0x90, 0x09, 0xba, 0x0b, 0xbf, 0x38, 0x2a, 0x19, 0xba, 0xfd,
	0xd4, 0x13, 0xc4, 0xcd, 0xc5, 0x63, 0x48, 0x09, 0xbc, 0xa5, 0x15, 0x10, 0x54, 0xc3, 0xa8, 0xbb,
	0x56, 0xc7, 0x69, 0x60, 0x97, 0xb5, 0xe8, 0xb3, 0xcb, 0x0d, 0x54, 0xc3, 0xd8, 0xf6, 0x2d, 0x25,
	0x05, 0x84, 0xa0, 0x35, 0xb3, 0x33, 0x9a, 0x60, 0x8e, 0xdf, 0x1b, 0x79, 0x46, 0x7e, 0x4f, 0xde,
	0x26, 0x8e, 0x6e, 0x36, 0xfb, 0x27, 0x5c, 0xe1, 0xe8, 0xd9, 0x50, 0x4c, 0x1f, 0x85, 0x29, 0x74,
	0x03, 0xb2, 0xba, 0xe9, 0xea, 0x1a, 0x1e, 0xf0, 0x49, 0x9e, 0xcd, 0x67, 0x90, 0x9c, 0x6a, 0x4c,
	0x99, 0xf4, 0xdd, 0xfa, 0xdc, 0xea, 0x90, 0xd6, 0x4d, 0x82, 0x9d, 0x3d, 0xb5, 0x81, 0x03, 0x61,
	0x17, 0x46, 0x32, 0xfb, 0xd1, 0xee, 0xcf, 0x71, 0x83, 0x28, 0x78, 0x8f, 0x51, 0xfa, 0xf0, 0xd9,
	0xd1, 0xb4, 0x89, 0xc9, 0x81, 0xe5, 0x7c, 0x51, 0x1f, 0xf8, 0x9f, 0x06, 0x39, 0xc5, 0x94, 0x3e,
	0x86, 0x34, 0x3d, 0x52, 0xd7, 0xa6, 0x01, 0xf8, 0xc8, 0x51, 0x51, 0xc3, 0xc1, 0x9a, 0xb4, 0x0d,
	0x59, 0x43, 0xdd, 0xc5, 0x46, 0xdd, 0xc5, 0x06, 0x6e, 0x10, 0xcb, 0x09, 0x04, 0x3d, 0x7c, 0x5c,
	0x9b, 0xd4, 0x68, 0x3b, 0xb0, 0x61, 0x64, 0xf8, 0xa7, 0xcf, 0x11, 0x07, 0x71, 0x94, 0xa0, 0xdb,
	0x33, 0xc2, 0xcb, 0xd2, 0x23, 0x98, 0xd4, 0xed, 0xfe, 0x60, 0x74, 0x31, 0xc9, 0xc1, 0xb9, 0xb7,
	0x28, 0x3e, 0x3b, 0x8a, 0xfa, 0xd2, 0x79, 0xaf, 0xdb, 0xc1, 0x09, 0x61, 0x22, 0xad, 0x81, 0x48,
	0xeb, 0x81, 0x36, 0x4d, 0xdd, 0x54, 0xd9, 0x65, 0x26, 0x97, 0x19, 0x3b, 0xfa, 0xa6, 0x54, 0xc3,
	0x58, 0x0f, 0x99, 0x4b, 0x0f, 0x43, 0xad, 0x61, 0x92, 0xb9, 0xde, 0x3e, 0xbf, 0x74, 0xa3, 0x6d,
	0xa6, 0x1a, 0x1a, 0x3f, 0x3b, 0xe1, 0x96, 0x90, 0x65, 0xb8, 0xb7, 0xde, 0xaa, 0x25, 0x84, 0x40,
	0x4f, 0x47, 0x8d, 0x0a, 0xd3, 0x9a, 0x4b, 0xea, 0xd1, 0x7c, 0xce, 0xbc, 0x47, 0x3e, 0x91, 0x92,
	0xd5, 0x5c, 0xf2, 0x59, 0x28, 0xa5, 0x3f, 0x85, 0x29, 0x1a, 0x22, 0xac, 0x96, 0xcb, 0xef, 0xa6,
	0x16, 0xa4, 0x4c, 0x6a, 0x2e, 0xd9, 0x3a, 0x15, 0xcc, 0x0e, 0x08, 0x14, 0x5a, 0x75, 0x4d, 0xc6,
	0x7b, 0xf6, 0xdc, 0xbc, 0xb3, 0xcf, 0x8e, 0x84, 0xdd, 0xa6, 0xdd, 0xf7, 0xac, 0x22, 0x25, 0xad,
	0xb9, 0x64, 0xcd, 0x35, 0x29, 0xe1, 0x4d, 0xc8, 0xf4, 0x51, 0x19, 0xdb, 0xdc, 0x48, 0xd8, 0x20,
	0xb1, 0x6b, 0xae, 0x79, 0x5f, 0x25, 0x8d, 0x16, 0xe5, 0x33, 0xa0, 0x09, 0x3e, 0x18, 0xe3, 0xf8,
	0x08, 0x24, 0x8a, 0x36, 0x24, 0x83, 0x0f, 0xde, 0x4e, 0x06, 0xf1, 0x44, 0x15, 0x29, 0xa2, 0xe6,
	0x92, 0x88, 0x85, 0x74, 0x0f, 0x66, 0x4c, 0xab, 0xce, 0xca, 0xa2, 0x61, 0x99, 0x26, 0x6e, 0xd0,
	0x71, 0xee, 0x90, 0x9c, 0x38, 0xa6, 0x62, 0xe3, 0xca, 0xb4, 0x69, 0x55, 0x09, 0xb1, 0xef, 0xfa,
	0x1e, 0x5b, 0x96, 0x43, 0xa4, 0x1a, 0x64, 0xa8, 0x63, 0xbd, 0x4d, 0xb7, 0x82, 0x9d, 0xdc, 0x34,
	0x03, 0xf8, 0xff, 0xd1, 0x5b, 0xa6, 0x1e, 0xf7, 0x7d, 0x43, 0x56, 0x4f, 0x71, 0x45, 0xb0, 0x4f,
	0x5f, 0xad, 0x96, 0x5f, 0x78, 0xa8, 0x08, 0x19, 0xe0, 0x68, 0xf3, 0x95, 0xb8, 0xf2, 0x2d, 0xb9,
	0x0c, 0x02, 0x24, 0xfd, 0xe6, 0x24, 0xa1, 0x45, 0x98, 0x06, 0x21, 0x24, 0x18, 0x29, 0x5e, 0x2a,
	0x55, 0xbe, 0x0f, 0x93, 0x7e, 0xcb, 0xeb, 0x0f, 0xe8, 0xb9, 0x63, 0x0f, 0xd1, 0x6c, 0x26, 0x7a,
	0x1e, 0xca, 0xb2, 0xab, 0x9f, 0xcc, 0x46, 0xb4, 0x5c, 0xba, 0x59, 0xb9, 0x03, 0x52, 0x48, 0x9f,
	0x7d, 0x8f, 0x8f, 0x8e, 0x3d, 0x94, 0x39, 0xf1, 0x90, 0xd0, 0xf3, 0xd0, 0x6c, 0xa9, 0x2c, 0x97,
	0x16, 0xe5, 0xd2, 0x92, 0x5c, 0x2e, 0xc9, 0xe5, 0x9b, 0x72, 0x79, 0x49, 0x2e, 0x2f, 0xca, 0xe5,
	0x72, 0x45, 0x86, 0x4b, 0x91, 0x6c, 0x85, 0xae, 0x03, 0x62, 0x70, 0x1d, 0x98, 0x62, 0x17, 0xd2,
	0x65, 0xb9, 0xb4, 0x52, 0xe3, 0xf8, 0x84, 0xc8, 0xd5, 0x38, 0x5e, 0x10, 0x33, 0x35, 0x8e, 0xbf,
	0x24, 0xce, 0xd4, 0x38, 0x7e, 0x4a, 0x14, 0x0b, 0xbf, 0x43, 0x90, 0x0b, 0xcf, 0x4c, 0xba, 0xd1,
	0xc1, 0xe8, 0x7e, 0x8c, 0x60, 0x82, 0x4e, 0x2b, 0x37, 0xb8, 0x17, 0x6c, 0x9c, 0x5f, 0xa4, 0xe3,
	0xe6, 0x70, 0xa5, 0x10, 0x19, 0xe6, 0xf3, 0xfd, 0x27, 0x7e, 0xf0, 0xee, 0x26, 0x52, 0xfc, 0xc0,
	0x85, 0xbf, 0xa4, 0x20, 0x7b, 0xcf, 0xb0, 0x76, 0x55, 0x63, 0xdb, 0xc6, 0x0d, 0xc6, 0x6a, 0x1d,
	0xd2, 0xec, 0x2a, 0x4f, 0xa1, 0xd9, 0xc8, 0x3c, 0x6b, 0xaa, 0x4c, 0xf5, 0xbe, 0xfe, 0x53, 0x02,
	0x9e, 0x3e, 0x47, 0x49, 0xb7, 0xeb, 0x12, 0xdc, 0xae, 0xc6, 0x14, 0xfa, 0x11, 0xc0, 0x38, 0x49,
	0xbf, 0x80, 0xc1, 0x80, 0x08, 0x32, 0x68, 0x39, 0xec, 0x9b, 0xe8, 0x7c, 0xaa, 0xfb, 0x38, 0x34,
	0x60, 0x06, 0xfe, 0x8f, 0x9f, 0x23, 0xf4, 0xdd, 0x98, 0x62, 0x60, 0x77, 0xb7, 0x6f, 0x26, 0xb5,
	0x61, 0xc6, 0x4f, 0xd6, 0x90, 0x92, 0xb8, 0x73, 0x2a, 0x69, 0xd6, 0x57, 0x52, 0x6c, 0x44, 0x30,
	0x89, 0x01, 0x47, 0xa5, 0xf5, 0x13, 0x10, 0x35, 0xc7, 0x8e, 0x68, 0x2b, 0x27, 0x8c, 0xc9, 0xdb,
	0x65, 0x0a, 0x2b, 0x3e, 0x7d, 0x8e, 0x32, 0x6e, 0x4b, 0x75, 0xb0, 0x26, 0xcf, 0x77, 0x5c, 0xec,
	0x54, 0x63, 0x4a, 0x56, 0x73, 0xec, 0x90, 0xdc, 0xa4, 0x45, 0x48, 0xb3, 0xab, 0x2d, 0xbd, 0xe0,
	0x8e, 0xbd, 0x75, 0x23, 0x85, 0x67, 0x86, 0x6b, 0x86, 0x21, 0x61, 0x00, 0xdf, 0x89, 0x35, 0x24,
	0xff, 0x76, 0xbd, 0xfe, 0x6e, 0x85, 0x15, 0xfd, 0x4a, 0xa2, 0x9d, 0x8f, 0x21, 0xb3, 0x5e, 0xd5,
	0xa0, 0x1f, 0x1e, 0x66, 0xd7, 0x8f, 0x92, 0xfe, 0xb7, 0x46, 0xe1, 0x29, 0x70, 0x30, 0x72, 0xfc,
	0x4b, 0x21, 0x0b, 0xe2, 0x8f, 0xee, 0xca, 0xbb, 0x05, 0x09, 0xeb, 0xae, 0x1a, 0xdc, 0x28, 0x59,
	0x88, 0xcf, 0x61, 0x92, 0xfd, 0x3b, 0x82, 0xdd, 0x58, 0x4c, 0xd5, 0xc8, 0xbd, 0x39, 0xff, 0x2d,
	0x68, 0xe6, 0xd9, 0x51, 0xd4, 0x99, 0x5d, 0x40, 0x33, 0xf4, 0xd5, 0x67, 0xc1, 0x9b, 0xd5, 0xab,
	0x2f, 0x3c, 0x94, 0x03, 0x80, 0x09, 0x5f, 0x16, 0xa8, 0x44, 0x9f, 0x29, 0x1b, 0x57, 0x42, 0xcb,
	0x95, 0x6b, 0x90, 0xf1, 0x29, 0x07, 0xdd, 0x65, 0xe6, 0xd8, 0x43, 0x71, 0xaa, 0xde, 0x9e, 0x87,
	0xf8, 0xb2, 0x5c, 0x2a, 0xc9, 0x8b, 0xf2, 0x52, 0xe5, 0x23, 0x10, 0x58, 0x1a, 0x42, 0x46, 0xa9,
	0xe0, 0x6b, 0x84, 0xef, 0xb7, 0xba, 0xc1, 0xa7, 0x08, 0x12, 0xe3, 0xc1, 0xa7, 0xc8, 0xaf, 0x93,
	0x90, 0xbd, 0xeb, 0x60, 0x95, 0xe0, 0x81, 0xb6, 0x17, 0xcf, 0xa9, 0xed, 0x88, 0x94, 0x9b, 0xef,
	0x27, 0xe5, 0x99, 0x51, 0x52, 0x1e, 0xa9, 0xdb, 0x9d, 0xf7, 0xd3, 0xed, 0x19, 0xf2, 0xfc, 0xe1,
	0xdb, 0xc9, 0xf3, 0x42, 0x87, 0xff, 0x0b, 0x1d, 0xae, 0x4e, 0xff, 0xf9, 0x93, 0xa1, 0x41, 0x54,
	0x99, 0x1f, 0x12, 0x87, 0xf8, 0xe4, 0x5b, 0x14, 0x79, 0x53, 0xc9, 0x47, 0x85, 0x31, 0xf5, 0xe4,
	0x5b, 0x14, 0x7e, 0x31, 0x42, 0x13, 0x5f, 0x26, 0x61, 0x4a, 0xc1, 0xb6, 0xa1, 0x36, 0x2e, 0x44,
	0x71, 0x21, 0x8a, 0x0b, 0x51, 0x30, 0x51, 0xfc, 0x32, 0x09, 0xc2, 0x3d, 0x4c, 0x2e, 0x04, 0x71,
	0x21, 0x88, 0x0b, 0x41, 0x24, 0xc5, 0x54, 0xe5, 0xb7, 0xe8, 0xe4, 0x55, 0x3e, 0xf6, 0xf2, 0x55,
	0x3e, 0xf6, 0xcd, 0xab, 0x3c, 0x7a, 0xdc, 0xcb, 0xa3, 0xdf, 0xf7, 0xf2, 0xe8, 0xab, 0x5e, 0x1e,
	0x9d, 0xf4, 0xf2, 0xe8, 0x65, 0x2f, 0x8f, 0xbe, 0xee, 0xe5, 0xd1, 0x9b, 0x5e, 0x3e, 0xf6, 0x4d,
	0x2f, 0x8f, 0x7e, 0xf5, 0x3a, 0x1f, 0x3b, 0x7e, 0x9d, 0x47, 0x27, 0xaf, 0xf3, 0xb1, 0x97, 0xaf,
	0xf3, 0xb1, 0x47, 0x9f, 0x37, 0x2d, 0xfb, 0x8b, 0x66, 0x71, 0xdf, 0x32, 0x08, 0x76, 0x1c, 0xb5,
	0xd8, 0x71, 0x17, 0xd8, 0xc3, 0x9e, 0xe5, 0xb4, 0x6f, 0xd8, 0x8e, 0xb5, 0xaf, 0x6b, 0xd8, 0xb9,
	0xd1, 0x5f, 0x5e, 0xb0, 0x77, 0x9b, 0xd6, 0x02, 0x3e, 0x24, 0xc1, 0xaf, 0x5a, 0xff, 0xf2, 0x47,
	0xc4, 0xdd, 0x24, 0xfb, 0xb1, 0x6b, 0xf1, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x4d, 0x1d,
	0x6b, 0x77, 0x1c, 0x00, 0x00,
}

func (this *URLType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLType)
	if !ok {
		that2, ok := that.(URLType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DomainChoice == nil {
		if this.DomainChoice != nil {
			return false
		}
	} else if this.DomainChoice == nil {
		return false
	} else if !this.DomainChoice.Equal(that1.DomainChoice) {
		return false
	}
	if that1.PathChoice == nil {
		if this.PathChoice != nil {
			return false
		}
	} else if this.PathChoice == nil {
		return false
	} else if !this.PathChoice.Equal(that1.PathChoice) {
		return false
	}
	return true
}
func (this *URLType_ExactValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLType_ExactValue)
	if !ok {
		that2, ok := that.(URLType_ExactValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExactValue != that1.ExactValue {
		return false
	}
	return true
}
func (this *URLType_SuffixValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLType_SuffixValue)
	if !ok {
		that2, ok := that.(URLType_SuffixValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SuffixValue != that1.SuffixValue {
		return false
	}
	return true
}
func (this *URLType_RegexValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLType_RegexValue)
	if !ok {
		that2, ok := that.(URLType_RegexValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegexValue != that1.RegexValue {
		return false
	}
	return true
}
func (this *URLType_PathExactValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLType_PathExactValue)
	if !ok {
		that2, ok := that.(URLType_PathExactValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PathExactValue != that1.PathExactValue {
		return false
	}
	return true
}
func (this *URLType_PathPrefixValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLType_PathPrefixValue)
	if !ok {
		that2, ok := that.(URLType_PathPrefixValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PathPrefixValue != that1.PathPrefixValue {
		return false
	}
	return true
}
func (this *URLType_PathRegexValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLType_PathRegexValue)
	if !ok {
		that2, ok := that.(URLType_PathRegexValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PathRegexValue != that1.PathRegexValue {
		return false
	}
	return true
}
func (this *URLType_AnyPath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLType_AnyPath)
	if !ok {
		that2, ok := that.(URLType_AnyPath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyPath.Equal(that1.AnyPath) {
		return false
	}
	return true
}
func (this *ForwardProxySimpleRuleType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxySimpleRuleType)
	if !ok {
		that2, ok := that.(ForwardProxySimpleRuleType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TlsList) != len(that1.TlsList) {
		return false
	}
	for i := range this.TlsList {
		if !this.TlsList[i].Equal(that1.TlsList[i]) {
			return false
		}
	}
	if len(this.HttpList) != len(that1.HttpList) {
		return false
	}
	for i := range this.HttpList {
		if !this.HttpList[i].Equal(that1.HttpList[i]) {
			return false
		}
	}
	if len(this.DestList) != len(that1.DestList) {
		return false
	}
	for i := range this.DestList {
		if !this.DestList[i].Equal(that1.DestList[i]) {
			return false
		}
	}
	if that1.DefaultActionChoice == nil {
		if this.DefaultActionChoice != nil {
			return false
		}
	} else if this.DefaultActionChoice == nil {
		return false
	} else if !this.DefaultActionChoice.Equal(that1.DefaultActionChoice) {
		return false
	}
	return true
}
func (this *ForwardProxySimpleRuleType_DefaultActionNextPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxySimpleRuleType_DefaultActionNextPolicy)
	if !ok {
		that2, ok := that.(ForwardProxySimpleRuleType_DefaultActionNextPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultActionNextPolicy.Equal(that1.DefaultActionNextPolicy) {
		return false
	}
	return true
}
func (this *ForwardProxySimpleRuleType_DefaultActionDeny) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxySimpleRuleType_DefaultActionDeny)
	if !ok {
		that2, ok := that.(ForwardProxySimpleRuleType_DefaultActionDeny)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultActionDeny.Equal(that1.DefaultActionDeny) {
		return false
	}
	return true
}
func (this *ForwardProxySimpleRuleType_DefaultActionAllow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxySimpleRuleType_DefaultActionAllow)
	if !ok {
		that2, ok := that.(ForwardProxySimpleRuleType_DefaultActionAllow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultActionAllow.Equal(that1.DefaultActionAllow) {
		return false
	}
	return true
}
func (this *DomainListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DomainListType)
	if !ok {
		that2, ok := that.(DomainListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TlsList) != len(that1.TlsList) {
		return false
	}
	for i := range this.TlsList {
		if !this.TlsList[i].Equal(that1.TlsList[i]) {
			return false
		}
	}
	return true
}
func (this *URLListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*URLListType)
	if !ok {
		that2, ok := that.(URLListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HttpList) != len(that1.HttpList) {
		return false
	}
	for i := range this.HttpList {
		if !this.HttpList[i].Equal(that1.HttpList[i]) {
			return false
		}
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if this.RuleName != that1.RuleName {
		return false
	}
	if this.RuleDescription != that1.RuleDescription {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if that1.SourceChoice == nil {
		if this.SourceChoice != nil {
			return false
		}
	} else if this.SourceChoice == nil {
		return false
	} else if !this.SourceChoice.Equal(that1.SourceChoice) {
		return false
	}
	if that1.DestinationChoice == nil {
		if this.DestinationChoice != nil {
			return false
		}
	} else if this.DestinationChoice == nil {
		return false
	} else if !this.DestinationChoice.Equal(that1.DestinationChoice) {
		return false
	}
	if that1.HttpConnectChoice == nil {
		if this.HttpConnectChoice != nil {
			return false
		}
	} else if this.HttpConnectChoice == nil {
		return false
	} else if !this.HttpConnectChoice.Equal(that1.HttpConnectChoice) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_AllSources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_AllSources)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_AllSources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllSources.Equal(that1.AllSources) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_PrefixList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_PrefixList)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_PrefixList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrefixList.Equal(that1.PrefixList) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_InsideSources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_InsideSources)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_InsideSources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InsideSources.Equal(that1.InsideSources) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_Interface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_Interface)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_Interface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Interface.Equal(that1.Interface) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_Namespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_Namespace)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_Namespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_LabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_LabelSelector)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_LabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LabelSelector.Equal(that1.LabelSelector) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_IpPrefixSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_IpPrefixSet)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_IpPrefixSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpPrefixSet.Equal(that1.IpPrefixSet) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_AllDestinations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_AllDestinations)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_AllDestinations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllDestinations.Equal(that1.AllDestinations) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_TlsList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_TlsList)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_TlsList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsList.Equal(that1.TlsList) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_HttpList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_HttpList)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_HttpList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpList.Equal(that1.HttpList) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_DstIpPrefixSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_DstIpPrefixSet)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_DstIpPrefixSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DstIpPrefixSet.Equal(that1.DstIpPrefixSet) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_DstPrefixList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_DstPrefixList)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_DstPrefixList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DstPrefixList.Equal(that1.DstPrefixList) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_DstAsnSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_DstAsnSet)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_DstAsnSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DstAsnSet.Equal(that1.DstAsnSet) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_DstAsnList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_DstAsnList)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_DstAsnList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DstAsnList.Equal(that1.DstAsnList) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_DstLabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_DstLabelSelector)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_DstLabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DstLabelSelector.Equal(that1.DstLabelSelector) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_NoHttpConnectPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_NoHttpConnectPort)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_NoHttpConnectPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoHttpConnectPort.Equal(that1.NoHttpConnectPort) {
		return false
	}
	return true
}
func (this *ForwardProxyAdvancedRuleType_PortMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyAdvancedRuleType_PortMatcher)
	if !ok {
		that2, ok := that.(ForwardProxyAdvancedRuleType_PortMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PortMatcher.Equal(that1.PortMatcher) {
		return false
	}
	return true
}
func (this *ForwardProxyRuleListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardProxyRuleListType)
	if !ok {
		that2, ok := that.(ForwardProxyRuleListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProxyChoice == nil {
		if this.ProxyChoice != nil {
			return false
		}
	} else if this.ProxyChoice == nil {
		return false
	} else if !this.ProxyChoice.Equal(that1.ProxyChoice) {
		return false
	}
	if that1.RuleChoice == nil {
		if this.RuleChoice != nil {
			return false
		}
	} else if this.RuleChoice == nil {
		return false
	} else if !this.RuleChoice.Equal(that1.RuleChoice) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AnyProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AnyProxy)
	if !ok {
		that2, ok := that.(GlobalSpecType_AnyProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyProxy.Equal(that1.AnyProxy) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NetworkConnector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NetworkConnector)
	if !ok {
		that2, ok := that.(GlobalSpecType_NetworkConnector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NetworkConnector.Equal(that1.NetworkConnector) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ProxyLabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ProxyLabelSelector)
	if !ok {
		that2, ok := that.(GlobalSpecType_ProxyLabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProxyLabelSelector.Equal(that1.ProxyLabelSelector) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DrpHttpConnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DrpHttpConnect)
	if !ok {
		that2, ok := that.(GlobalSpecType_DrpHttpConnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DrpHttpConnect.Equal(that1.DrpHttpConnect) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AllowAll)
	if !ok {
		that2, ok := that.(GlobalSpecType_AllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAll.Equal(that1.AllowAll) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AllowList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AllowList)
	if !ok {
		that2, ok := that.(GlobalSpecType_AllowList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowList.Equal(that1.AllowList) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DenyList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DenyList)
	if !ok {
		that2, ok := that.(GlobalSpecType_DenyList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyList.Equal(that1.DenyList) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RuleList)
	if !ok {
		that2, ok := that.(GlobalSpecType_RuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RuleList.Equal(that1.RuleList) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProxyChoice == nil {
		if this.ProxyChoice != nil {
			return false
		}
	} else if this.ProxyChoice == nil {
		return false
	} else if !this.ProxyChoice.Equal(that1.ProxyChoice) {
		return false
	}
	if that1.RuleChoice == nil {
		if this.RuleChoice != nil {
			return false
		}
	} else if this.RuleChoice == nil {
		return false
	} else if !this.RuleChoice.Equal(that1.RuleChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_AnyProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AnyProxy)
	if !ok {
		that2, ok := that.(CreateSpecType_AnyProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyProxy.Equal(that1.AnyProxy) {
		return false
	}
	return true
}
func (this *CreateSpecType_NetworkConnector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NetworkConnector)
	if !ok {
		that2, ok := that.(CreateSpecType_NetworkConnector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NetworkConnector.Equal(that1.NetworkConnector) {
		return false
	}
	return true
}
func (this *CreateSpecType_ProxyLabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ProxyLabelSelector)
	if !ok {
		that2, ok := that.(CreateSpecType_ProxyLabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProxyLabelSelector.Equal(that1.ProxyLabelSelector) {
		return false
	}
	return true
}
func (this *CreateSpecType_DrpHttpConnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DrpHttpConnect)
	if !ok {
		that2, ok := that.(CreateSpecType_DrpHttpConnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DrpHttpConnect.Equal(that1.DrpHttpConnect) {
		return false
	}
	return true
}
func (this *CreateSpecType_AllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AllowAll)
	if !ok {
		that2, ok := that.(CreateSpecType_AllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAll.Equal(that1.AllowAll) {
		return false
	}
	return true
}
func (this *CreateSpecType_AllowList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AllowList)
	if !ok {
		that2, ok := that.(CreateSpecType_AllowList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowList.Equal(that1.AllowList) {
		return false
	}
	return true
}
func (this *CreateSpecType_DenyList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DenyList)
	if !ok {
		that2, ok := that.(CreateSpecType_DenyList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyList.Equal(that1.DenyList) {
		return false
	}
	return true
}
func (this *CreateSpecType_RuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RuleList)
	if !ok {
		that2, ok := that.(CreateSpecType_RuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RuleList.Equal(that1.RuleList) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProxyChoice == nil {
		if this.ProxyChoice != nil {
			return false
		}
	} else if this.ProxyChoice == nil {
		return false
	} else if !this.ProxyChoice.Equal(that1.ProxyChoice) {
		return false
	}
	if that1.RuleChoice == nil {
		if this.RuleChoice != nil {
			return false
		}
	} else if this.RuleChoice == nil {
		return false
	} else if !this.RuleChoice.Equal(that1.RuleChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AnyProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AnyProxy)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AnyProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyProxy.Equal(that1.AnyProxy) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NetworkConnector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NetworkConnector)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NetworkConnector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NetworkConnector.Equal(that1.NetworkConnector) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ProxyLabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ProxyLabelSelector)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ProxyLabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProxyLabelSelector.Equal(that1.ProxyLabelSelector) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DrpHttpConnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DrpHttpConnect)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DrpHttpConnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DrpHttpConnect.Equal(that1.DrpHttpConnect) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AllowAll)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAll.Equal(that1.AllowAll) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AllowList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AllowList)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AllowList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowList.Equal(that1.AllowList) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DenyList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DenyList)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DenyList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyList.Equal(that1.DenyList) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RuleList)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RuleList.Equal(that1.RuleList) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ProxyChoice == nil {
		if this.ProxyChoice != nil {
			return false
		}
	} else if this.ProxyChoice == nil {
		return false
	} else if !this.ProxyChoice.Equal(that1.ProxyChoice) {
		return false
	}
	if that1.RuleChoice == nil {
		if this.RuleChoice != nil {
			return false
		}
	} else if this.RuleChoice == nil {
		return false
	} else if !this.RuleChoice.Equal(that1.RuleChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_AnyProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AnyProxy)
	if !ok {
		that2, ok := that.(GetSpecType_AnyProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyProxy.Equal(that1.AnyProxy) {
		return false
	}
	return true
}
func (this *GetSpecType_NetworkConnector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NetworkConnector)
	if !ok {
		that2, ok := that.(GetSpecType_NetworkConnector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NetworkConnector.Equal(that1.NetworkConnector) {
		return false
	}
	return true
}
func (this *GetSpecType_ProxyLabelSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ProxyLabelSelector)
	if !ok {
		that2, ok := that.(GetSpecType_ProxyLabelSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ProxyLabelSelector.Equal(that1.ProxyLabelSelector) {
		return false
	}
	return true
}
func (this *GetSpecType_DrpHttpConnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DrpHttpConnect)
	if !ok {
		that2, ok := that.(GetSpecType_DrpHttpConnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DrpHttpConnect.Equal(that1.DrpHttpConnect) {
		return false
	}
	return true
}
func (this *GetSpecType_AllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AllowAll)
	if !ok {
		that2, ok := that.(GetSpecType_AllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowAll.Equal(that1.AllowAll) {
		return false
	}
	return true
}
func (this *GetSpecType_AllowList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AllowList)
	if !ok {
		that2, ok := that.(GetSpecType_AllowList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowList.Equal(that1.AllowList) {
		return false
	}
	return true
}
func (this *GetSpecType_DenyList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DenyList)
	if !ok {
		that2, ok := that.(GetSpecType_DenyList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DenyList.Equal(that1.DenyList) {
		return false
	}
	return true
}
func (this *GetSpecType_RuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RuleList)
	if !ok {
		that2, ok := that.(GetSpecType_RuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RuleList.Equal(that1.RuleList) {
		return false
	}
	return true
}
func (this *URLType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&forward_proxy_policy.URLType{")
	if this.DomainChoice != nil {
		s = append(s, "DomainChoice: "+fmt.Sprintf("%#v", this.DomainChoice)+",\n")
	}
	if this.PathChoice != nil {
		s = append(s, "PathChoice: "+fmt.Sprintf("%#v", this.PathChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *URLType_ExactValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.URLType_ExactValue{` +
		`ExactValue:` + fmt.Sprintf("%#v", this.ExactValue) + `}`}, ", ")
	return s
}
func (this *URLType_SuffixValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.URLType_SuffixValue{` +
		`SuffixValue:` + fmt.Sprintf("%#v", this.SuffixValue) + `}`}, ", ")
	return s
}
func (this *URLType_RegexValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.URLType_RegexValue{` +
		`RegexValue:` + fmt.Sprintf("%#v", this.RegexValue) + `}`}, ", ")
	return s
}
func (this *URLType_PathExactValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.URLType_PathExactValue{` +
		`PathExactValue:` + fmt.Sprintf("%#v", this.PathExactValue) + `}`}, ", ")
	return s
}
func (this *URLType_PathPrefixValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.URLType_PathPrefixValue{` +
		`PathPrefixValue:` + fmt.Sprintf("%#v", this.PathPrefixValue) + `}`}, ", ")
	return s
}
func (this *URLType_PathRegexValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.URLType_PathRegexValue{` +
		`PathRegexValue:` + fmt.Sprintf("%#v", this.PathRegexValue) + `}`}, ", ")
	return s
}
func (this *URLType_AnyPath) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.URLType_AnyPath{` +
		`AnyPath:` + fmt.Sprintf("%#v", this.AnyPath) + `}`}, ", ")
	return s
}
func (this *ForwardProxySimpleRuleType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&forward_proxy_policy.ForwardProxySimpleRuleType{")
	if this.TlsList != nil {
		s = append(s, "TlsList: "+fmt.Sprintf("%#v", this.TlsList)+",\n")
	}
	if this.HttpList != nil {
		s = append(s, "HttpList: "+fmt.Sprintf("%#v", this.HttpList)+",\n")
	}
	if this.DestList != nil {
		s = append(s, "DestList: "+fmt.Sprintf("%#v", this.DestList)+",\n")
	}
	if this.DefaultActionChoice != nil {
		s = append(s, "DefaultActionChoice: "+fmt.Sprintf("%#v", this.DefaultActionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForwardProxySimpleRuleType_DefaultActionNextPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxySimpleRuleType_DefaultActionNextPolicy{` +
		`DefaultActionNextPolicy:` + fmt.Sprintf("%#v", this.DefaultActionNextPolicy) + `}`}, ", ")
	return s
}
func (this *ForwardProxySimpleRuleType_DefaultActionDeny) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxySimpleRuleType_DefaultActionDeny{` +
		`DefaultActionDeny:` + fmt.Sprintf("%#v", this.DefaultActionDeny) + `}`}, ", ")
	return s
}
func (this *ForwardProxySimpleRuleType_DefaultActionAllow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxySimpleRuleType_DefaultActionAllow{` +
		`DefaultActionAllow:` + fmt.Sprintf("%#v", this.DefaultActionAllow) + `}`}, ", ")
	return s
}
func (this *DomainListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&forward_proxy_policy.DomainListType{")
	if this.TlsList != nil {
		s = append(s, "TlsList: "+fmt.Sprintf("%#v", this.TlsList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *URLListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&forward_proxy_policy.URLListType{")
	if this.HttpList != nil {
		s = append(s, "HttpList: "+fmt.Sprintf("%#v", this.HttpList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForwardProxyAdvancedRuleType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&forward_proxy_policy.ForwardProxyAdvancedRuleType{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "RuleName: "+fmt.Sprintf("%#v", this.RuleName)+",\n")
	s = append(s, "RuleDescription: "+fmt.Sprintf("%#v", this.RuleDescription)+",\n")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	if this.SourceChoice != nil {
		s = append(s, "SourceChoice: "+fmt.Sprintf("%#v", this.SourceChoice)+",\n")
	}
	if this.DestinationChoice != nil {
		s = append(s, "DestinationChoice: "+fmt.Sprintf("%#v", this.DestinationChoice)+",\n")
	}
	if this.HttpConnectChoice != nil {
		s = append(s, "HttpConnectChoice: "+fmt.Sprintf("%#v", this.HttpConnectChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForwardProxyAdvancedRuleType_AllSources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_AllSources{` +
		`AllSources:` + fmt.Sprintf("%#v", this.AllSources) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_PrefixList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_PrefixList{` +
		`PrefixList:` + fmt.Sprintf("%#v", this.PrefixList) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_InsideSources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_InsideSources{` +
		`InsideSources:` + fmt.Sprintf("%#v", this.InsideSources) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_Interface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_Interface{` +
		`Interface:` + fmt.Sprintf("%#v", this.Interface) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_Namespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_Namespace{` +
		`Namespace:` + fmt.Sprintf("%#v", this.Namespace) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_LabelSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_LabelSelector{` +
		`LabelSelector:` + fmt.Sprintf("%#v", this.LabelSelector) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_IpPrefixSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_IpPrefixSet{` +
		`IpPrefixSet:` + fmt.Sprintf("%#v", this.IpPrefixSet) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_AllDestinations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_AllDestinations{` +
		`AllDestinations:` + fmt.Sprintf("%#v", this.AllDestinations) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_TlsList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_TlsList{` +
		`TlsList:` + fmt.Sprintf("%#v", this.TlsList) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_HttpList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_HttpList{` +
		`HttpList:` + fmt.Sprintf("%#v", this.HttpList) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstIpPrefixSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_DstIpPrefixSet{` +
		`DstIpPrefixSet:` + fmt.Sprintf("%#v", this.DstIpPrefixSet) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstPrefixList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_DstPrefixList{` +
		`DstPrefixList:` + fmt.Sprintf("%#v", this.DstPrefixList) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstAsnSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_DstAsnSet{` +
		`DstAsnSet:` + fmt.Sprintf("%#v", this.DstAsnSet) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstAsnList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_DstAsnList{` +
		`DstAsnList:` + fmt.Sprintf("%#v", this.DstAsnList) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstLabelSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_DstLabelSelector{` +
		`DstLabelSelector:` + fmt.Sprintf("%#v", this.DstLabelSelector) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_NoHttpConnectPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_NoHttpConnectPort{` +
		`NoHttpConnectPort:` + fmt.Sprintf("%#v", this.NoHttpConnectPort) + `}`}, ", ")
	return s
}
func (this *ForwardProxyAdvancedRuleType_PortMatcher) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ForwardProxyAdvancedRuleType_PortMatcher{` +
		`PortMatcher:` + fmt.Sprintf("%#v", this.PortMatcher) + `}`}, ", ")
	return s
}
func (this *ForwardProxyRuleListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&forward_proxy_policy.ForwardProxyRuleListType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&forward_proxy_policy.GlobalSpecType{")
	if this.ProxyChoice != nil {
		s = append(s, "ProxyChoice: "+fmt.Sprintf("%#v", this.ProxyChoice)+",\n")
	}
	if this.RuleChoice != nil {
		s = append(s, "RuleChoice: "+fmt.Sprintf("%#v", this.RuleChoice)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_AnyProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GlobalSpecType_AnyProxy{` +
		`AnyProxy:` + fmt.Sprintf("%#v", this.AnyProxy) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NetworkConnector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GlobalSpecType_NetworkConnector{` +
		`NetworkConnector:` + fmt.Sprintf("%#v", this.NetworkConnector) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ProxyLabelSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GlobalSpecType_ProxyLabelSelector{` +
		`ProxyLabelSelector:` + fmt.Sprintf("%#v", this.ProxyLabelSelector) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DrpHttpConnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GlobalSpecType_DrpHttpConnect{` +
		`DrpHttpConnect:` + fmt.Sprintf("%#v", this.DrpHttpConnect) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GlobalSpecType_AllowAll{` +
		`AllowAll:` + fmt.Sprintf("%#v", this.AllowAll) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AllowList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GlobalSpecType_AllowList{` +
		`AllowList:` + fmt.Sprintf("%#v", this.AllowList) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DenyList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GlobalSpecType_DenyList{` +
		`DenyList:` + fmt.Sprintf("%#v", this.DenyList) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GlobalSpecType_RuleList{` +
		`RuleList:` + fmt.Sprintf("%#v", this.RuleList) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&forward_proxy_policy.CreateSpecType{")
	if this.ProxyChoice != nil {
		s = append(s, "ProxyChoice: "+fmt.Sprintf("%#v", this.ProxyChoice)+",\n")
	}
	if this.RuleChoice != nil {
		s = append(s, "RuleChoice: "+fmt.Sprintf("%#v", this.RuleChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_AnyProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.CreateSpecType_AnyProxy{` +
		`AnyProxy:` + fmt.Sprintf("%#v", this.AnyProxy) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NetworkConnector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.CreateSpecType_NetworkConnector{` +
		`NetworkConnector:` + fmt.Sprintf("%#v", this.NetworkConnector) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ProxyLabelSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.CreateSpecType_ProxyLabelSelector{` +
		`ProxyLabelSelector:` + fmt.Sprintf("%#v", this.ProxyLabelSelector) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DrpHttpConnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.CreateSpecType_DrpHttpConnect{` +
		`DrpHttpConnect:` + fmt.Sprintf("%#v", this.DrpHttpConnect) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.CreateSpecType_AllowAll{` +
		`AllowAll:` + fmt.Sprintf("%#v", this.AllowAll) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AllowList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.CreateSpecType_AllowList{` +
		`AllowList:` + fmt.Sprintf("%#v", this.AllowList) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DenyList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.CreateSpecType_DenyList{` +
		`DenyList:` + fmt.Sprintf("%#v", this.DenyList) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.CreateSpecType_RuleList{` +
		`RuleList:` + fmt.Sprintf("%#v", this.RuleList) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&forward_proxy_policy.ReplaceSpecType{")
	if this.ProxyChoice != nil {
		s = append(s, "ProxyChoice: "+fmt.Sprintf("%#v", this.ProxyChoice)+",\n")
	}
	if this.RuleChoice != nil {
		s = append(s, "RuleChoice: "+fmt.Sprintf("%#v", this.RuleChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_AnyProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ReplaceSpecType_AnyProxy{` +
		`AnyProxy:` + fmt.Sprintf("%#v", this.AnyProxy) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NetworkConnector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ReplaceSpecType_NetworkConnector{` +
		`NetworkConnector:` + fmt.Sprintf("%#v", this.NetworkConnector) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ProxyLabelSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ReplaceSpecType_ProxyLabelSelector{` +
		`ProxyLabelSelector:` + fmt.Sprintf("%#v", this.ProxyLabelSelector) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DrpHttpConnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ReplaceSpecType_DrpHttpConnect{` +
		`DrpHttpConnect:` + fmt.Sprintf("%#v", this.DrpHttpConnect) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ReplaceSpecType_AllowAll{` +
		`AllowAll:` + fmt.Sprintf("%#v", this.AllowAll) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AllowList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ReplaceSpecType_AllowList{` +
		`AllowList:` + fmt.Sprintf("%#v", this.AllowList) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DenyList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ReplaceSpecType_DenyList{` +
		`DenyList:` + fmt.Sprintf("%#v", this.DenyList) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.ReplaceSpecType_RuleList{` +
		`RuleList:` + fmt.Sprintf("%#v", this.RuleList) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&forward_proxy_policy.GetSpecType{")
	if this.ProxyChoice != nil {
		s = append(s, "ProxyChoice: "+fmt.Sprintf("%#v", this.ProxyChoice)+",\n")
	}
	if this.RuleChoice != nil {
		s = append(s, "RuleChoice: "+fmt.Sprintf("%#v", this.RuleChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_AnyProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GetSpecType_AnyProxy{` +
		`AnyProxy:` + fmt.Sprintf("%#v", this.AnyProxy) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NetworkConnector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GetSpecType_NetworkConnector{` +
		`NetworkConnector:` + fmt.Sprintf("%#v", this.NetworkConnector) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ProxyLabelSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GetSpecType_ProxyLabelSelector{` +
		`ProxyLabelSelector:` + fmt.Sprintf("%#v", this.ProxyLabelSelector) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DrpHttpConnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GetSpecType_DrpHttpConnect{` +
		`DrpHttpConnect:` + fmt.Sprintf("%#v", this.DrpHttpConnect) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GetSpecType_AllowAll{` +
		`AllowAll:` + fmt.Sprintf("%#v", this.AllowAll) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AllowList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GetSpecType_AllowList{` +
		`AllowList:` + fmt.Sprintf("%#v", this.AllowList) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DenyList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GetSpecType_DenyList{` +
		`DenyList:` + fmt.Sprintf("%#v", this.DenyList) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&forward_proxy_policy.GetSpecType_RuleList{` +
		`RuleList:` + fmt.Sprintf("%#v", this.RuleList) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *URLType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URLType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PathChoice != nil {
		{
			size := m.PathChoice.Size()
			i -= size
			if _, err := m.PathChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DomainChoice != nil {
		{
			size := m.DomainChoice.Size()
			i -= size
			if _, err := m.DomainChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *URLType_ExactValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLType_ExactValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ExactValue)
	copy(dAtA[i:], m.ExactValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ExactValue)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *URLType_SuffixValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLType_SuffixValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SuffixValue)
	copy(dAtA[i:], m.SuffixValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SuffixValue)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *URLType_RegexValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLType_RegexValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RegexValue)
	copy(dAtA[i:], m.RegexValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.RegexValue)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *URLType_PathExactValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLType_PathExactValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PathExactValue)
	copy(dAtA[i:], m.PathExactValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PathExactValue)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *URLType_PathPrefixValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLType_PathPrefixValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PathPrefixValue)
	copy(dAtA[i:], m.PathPrefixValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PathPrefixValue)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *URLType_PathRegexValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLType_PathRegexValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PathRegexValue)
	copy(dAtA[i:], m.PathRegexValue)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PathRegexValue)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *URLType_AnyPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLType_AnyPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyPath != nil {
		{
			size, err := m.AnyPath.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxySimpleRuleType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardProxySimpleRuleType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxySimpleRuleType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultActionChoice != nil {
		{
			size := m.DefaultActionChoice.Size()
			i -= size
			if _, err := m.DefaultActionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DestList) > 0 {
		for iNdEx := len(m.DestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.HttpList) > 0 {
		for iNdEx := len(m.HttpList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HttpList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TlsList) > 0 {
		for iNdEx := len(m.TlsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TlsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ForwardProxySimpleRuleType_DefaultActionNextPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxySimpleRuleType_DefaultActionNextPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultActionNextPolicy != nil {
		{
			size, err := m.DefaultActionNextPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxySimpleRuleType_DefaultActionDeny) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxySimpleRuleType_DefaultActionDeny) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultActionDeny != nil {
		{
			size, err := m.DefaultActionDeny.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxySimpleRuleType_DefaultActionAllow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxySimpleRuleType_DefaultActionAllow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultActionAllow != nil {
		{
			size, err := m.DefaultActionAllow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *DomainListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TlsList) > 0 {
		for iNdEx := len(m.TlsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TlsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *URLListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URLListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URLListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HttpList) > 0 {
		for iNdEx := len(m.HttpList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HttpList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *ForwardProxyAdvancedRuleType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardProxyAdvancedRuleType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.DestinationChoice != nil {
		{
			size := m.DestinationChoice.Size()
			i -= size
			if _, err := m.DestinationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.RuleDescription) > 0 {
		i -= len(m.RuleDescription)
		copy(dAtA[i:], m.RuleDescription)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RuleDescription)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.HttpConnectChoice != nil {
		{
			size := m.HttpConnectChoice.Size()
			i -= size
			if _, err := m.HttpConnectChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SourceChoice != nil {
		{
			size := m.SourceChoice.Size()
			i -= size
			if _, err := m.SourceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Action != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RuleName) > 0 {
		i -= len(m.RuleName)
		copy(dAtA[i:], m.RuleName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RuleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ForwardProxyAdvancedRuleType_AllSources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_AllSources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllSources != nil {
		{
			size, err := m.AllSources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxyAdvancedRuleType_PrefixList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_PrefixList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrefixList != nil {
		{
			size, err := m.PrefixList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxyAdvancedRuleType_InsideSources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_InsideSources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InsideSources != nil {
		{
			size, err := m.InsideSources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxyAdvancedRuleType_Interface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_Interface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Interface != nil {
		{
			size, err := m.Interface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxyAdvancedRuleType_Namespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_Namespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Namespace)
	copy(dAtA[i:], m.Namespace)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Namespace)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *ForwardProxyAdvancedRuleType_LabelSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_LabelSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LabelSelector != nil {
		{
			size, err := m.LabelSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxyAdvancedRuleType_IpPrefixSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_IpPrefixSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpPrefixSet != nil {
		{
			size, err := m.IpPrefixSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxyAdvancedRuleType_AllDestinations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_AllDestinations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllDestinations != nil {
		{
			size, err := m.AllDestinations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxyAdvancedRuleType_TlsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_TlsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsList != nil {
		{
			size, err := m.TlsList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxyAdvancedRuleType_HttpList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_HttpList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpList != nil {
		{
			size, err := m.HttpList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxyAdvancedRuleType_NoHttpConnectPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_NoHttpConnectPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoHttpConnectPort != nil {
		{
			size, err := m.NoHttpConnectPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxyAdvancedRuleType_PortMatcher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_PortMatcher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PortMatcher != nil {
		{
			size, err := m.PortMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxyAdvancedRuleType_DstIpPrefixSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_DstIpPrefixSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DstIpPrefixSet != nil {
		{
			size, err := m.DstIpPrefixSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxyAdvancedRuleType_DstPrefixList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_DstPrefixList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DstPrefixList != nil {
		{
			size, err := m.DstPrefixList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxyAdvancedRuleType_DstLabelSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_DstLabelSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DstLabelSelector != nil {
		{
			size, err := m.DstLabelSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxyAdvancedRuleType_DstAsnSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_DstAsnSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DstAsnSet != nil {
		{
			size, err := m.DstAsnSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxyAdvancedRuleType_DstAsnList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyAdvancedRuleType_DstAsnList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DstAsnList != nil {
		{
			size, err := m.DstAsnList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ForwardProxyRuleListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardProxyRuleListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardProxyRuleListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.ProxyChoice != nil {
		{
			size := m.ProxyChoice.Size()
			i -= size
			if _, err := m.ProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RuleChoice != nil {
		{
			size := m.RuleChoice.Size()
			i -= size
			if _, err := m.RuleChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_AnyProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AnyProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyProxy != nil {
		{
			size, err := m.AnyProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NetworkConnector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NetworkConnector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkConnector != nil {
		{
			size, err := m.NetworkConnector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ProxyLabelSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ProxyLabelSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyLabelSelector != nil {
		{
			size, err := m.ProxyLabelSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAll != nil {
		{
			size, err := m.AllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AllowList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AllowList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowList != nil {
		{
			size, err := m.AllowList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DenyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DenyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DenyList != nil {
		{
			size, err := m.DenyList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_RuleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_RuleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RuleList != nil {
		{
			size, err := m.RuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DrpHttpConnect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DrpHttpConnect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DrpHttpConnect != nil {
		{
			size, err := m.DrpHttpConnect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProxyChoice != nil {
		{
			size := m.ProxyChoice.Size()
			i -= size
			if _, err := m.ProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RuleChoice != nil {
		{
			size := m.RuleChoice.Size()
			i -= size
			if _, err := m.RuleChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_AnyProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AnyProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyProxy != nil {
		{
			size, err := m.AnyProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NetworkConnector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NetworkConnector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkConnector != nil {
		{
			size, err := m.NetworkConnector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ProxyLabelSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ProxyLabelSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyLabelSelector != nil {
		{
			size, err := m.ProxyLabelSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAll != nil {
		{
			size, err := m.AllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AllowList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AllowList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowList != nil {
		{
			size, err := m.AllowList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DenyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DenyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DenyList != nil {
		{
			size, err := m.DenyList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_RuleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_RuleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RuleList != nil {
		{
			size, err := m.RuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DrpHttpConnect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DrpHttpConnect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DrpHttpConnect != nil {
		{
			size, err := m.DrpHttpConnect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProxyChoice != nil {
		{
			size := m.ProxyChoice.Size()
			i -= size
			if _, err := m.ProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RuleChoice != nil {
		{
			size := m.RuleChoice.Size()
			i -= size
			if _, err := m.RuleChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_AnyProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AnyProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyProxy != nil {
		{
			size, err := m.AnyProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NetworkConnector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NetworkConnector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkConnector != nil {
		{
			size, err := m.NetworkConnector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ProxyLabelSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ProxyLabelSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyLabelSelector != nil {
		{
			size, err := m.ProxyLabelSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAll != nil {
		{
			size, err := m.AllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AllowList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AllowList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowList != nil {
		{
			size, err := m.AllowList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DenyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DenyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DenyList != nil {
		{
			size, err := m.DenyList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_RuleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_RuleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RuleList != nil {
		{
			size, err := m.RuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DrpHttpConnect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DrpHttpConnect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DrpHttpConnect != nil {
		{
			size, err := m.DrpHttpConnect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProxyChoice != nil {
		{
			size := m.ProxyChoice.Size()
			i -= size
			if _, err := m.ProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RuleChoice != nil {
		{
			size := m.RuleChoice.Size()
			i -= size
			if _, err := m.RuleChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_AnyProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AnyProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyProxy != nil {
		{
			size, err := m.AnyProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NetworkConnector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NetworkConnector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NetworkConnector != nil {
		{
			size, err := m.NetworkConnector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ProxyLabelSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ProxyLabelSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyLabelSelector != nil {
		{
			size, err := m.ProxyLabelSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowAll != nil {
		{
			size, err := m.AllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AllowList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AllowList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowList != nil {
		{
			size, err := m.AllowList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DenyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DenyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DenyList != nil {
		{
			size, err := m.DenyList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_RuleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_RuleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RuleList != nil {
		{
			size, err := m.RuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DrpHttpConnect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DrpHttpConnect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DrpHttpConnect != nil {
		{
			size, err := m.DrpHttpConnect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *URLType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainChoice != nil {
		n += m.DomainChoice.Size()
	}
	if m.PathChoice != nil {
		n += m.PathChoice.Size()
	}
	return n
}

func (m *URLType_ExactValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExactValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLType_SuffixValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SuffixValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLType_RegexValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegexValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLType_PathExactValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PathExactValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLType_PathPrefixValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PathPrefixValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLType_PathRegexValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PathRegexValue)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *URLType_AnyPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyPath != nil {
		l = m.AnyPath.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxySimpleRuleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TlsList) > 0 {
		for _, e := range m.TlsList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.HttpList) > 0 {
		for _, e := range m.HttpList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DestList) > 0 {
		for _, e := range m.DestList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DefaultActionChoice != nil {
		n += m.DefaultActionChoice.Size()
	}
	return n
}

func (m *ForwardProxySimpleRuleType_DefaultActionNextPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultActionNextPolicy != nil {
		l = m.DefaultActionNextPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxySimpleRuleType_DefaultActionDeny) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultActionDeny != nil {
		l = m.DefaultActionDeny.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxySimpleRuleType_DefaultActionAllow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultActionAllow != nil {
		l = m.DefaultActionAllow.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DomainListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TlsList) > 0 {
		for _, e := range m.TlsList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *URLListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HttpList) > 0 {
		for _, e := range m.HttpList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ForwardProxyAdvancedRuleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RuleName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovTypes(uint64(m.Action))
	}
	if m.SourceChoice != nil {
		n += m.SourceChoice.Size()
	}
	if m.DestinationChoice != nil {
		n += m.DestinationChoice.Size()
	}
	if m.HttpConnectChoice != nil {
		n += m.HttpConnectChoice.Size()
	}
	l = len(m.RuleDescription)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ForwardProxyAdvancedRuleType_AllSources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllSources != nil {
		l = m.AllSources.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_PrefixList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrefixList != nil {
		l = m.PrefixList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_InsideSources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InsideSources != nil {
		l = m.InsideSources.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_Interface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interface != nil {
		l = m.Interface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_Namespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ForwardProxyAdvancedRuleType_LabelSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LabelSelector != nil {
		l = m.LabelSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_IpPrefixSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpPrefixSet != nil {
		l = m.IpPrefixSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_AllDestinations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllDestinations != nil {
		l = m.AllDestinations.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_TlsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsList != nil {
		l = m.TlsList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_HttpList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpList != nil {
		l = m.HttpList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_NoHttpConnectPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoHttpConnectPort != nil {
		l = m.NoHttpConnectPort.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_PortMatcher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PortMatcher != nil {
		l = m.PortMatcher.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_DstIpPrefixSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DstIpPrefixSet != nil {
		l = m.DstIpPrefixSet.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_DstPrefixList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DstPrefixList != nil {
		l = m.DstPrefixList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_DstLabelSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DstLabelSelector != nil {
		l = m.DstLabelSelector.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_DstAsnSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DstAsnSet != nil {
		l = m.DstAsnSet.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyAdvancedRuleType_DstAsnList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DstAsnList != nil {
		l = m.DstAsnList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ForwardProxyRuleListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyChoice != nil {
		n += m.ProxyChoice.Size()
	}
	if m.RuleChoice != nil {
		n += m.RuleChoice.Size()
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_AnyProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyProxy != nil {
		l = m.AnyProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NetworkConnector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkConnector != nil {
		l = m.NetworkConnector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ProxyLabelSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyLabelSelector != nil {
		l = m.ProxyLabelSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAll != nil {
		l = m.AllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AllowList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowList != nil {
		l = m.AllowList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DenyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenyList != nil {
		l = m.DenyList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuleList != nil {
		l = m.RuleList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DrpHttpConnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DrpHttpConnect != nil {
		l = m.DrpHttpConnect.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyChoice != nil {
		n += m.ProxyChoice.Size()
	}
	if m.RuleChoice != nil {
		n += m.RuleChoice.Size()
	}
	return n
}

func (m *CreateSpecType_AnyProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyProxy != nil {
		l = m.AnyProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NetworkConnector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkConnector != nil {
		l = m.NetworkConnector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ProxyLabelSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyLabelSelector != nil {
		l = m.ProxyLabelSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAll != nil {
		l = m.AllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AllowList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowList != nil {
		l = m.AllowList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DenyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenyList != nil {
		l = m.DenyList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuleList != nil {
		l = m.RuleList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DrpHttpConnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DrpHttpConnect != nil {
		l = m.DrpHttpConnect.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyChoice != nil {
		n += m.ProxyChoice.Size()
	}
	if m.RuleChoice != nil {
		n += m.RuleChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_AnyProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyProxy != nil {
		l = m.AnyProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NetworkConnector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkConnector != nil {
		l = m.NetworkConnector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ProxyLabelSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyLabelSelector != nil {
		l = m.ProxyLabelSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAll != nil {
		l = m.AllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AllowList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowList != nil {
		l = m.AllowList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DenyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenyList != nil {
		l = m.DenyList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuleList != nil {
		l = m.RuleList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DrpHttpConnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DrpHttpConnect != nil {
		l = m.DrpHttpConnect.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyChoice != nil {
		n += m.ProxyChoice.Size()
	}
	if m.RuleChoice != nil {
		n += m.RuleChoice.Size()
	}
	return n
}

func (m *GetSpecType_AnyProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyProxy != nil {
		l = m.AnyProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NetworkConnector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkConnector != nil {
		l = m.NetworkConnector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ProxyLabelSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyLabelSelector != nil {
		l = m.ProxyLabelSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowAll != nil {
		l = m.AllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AllowList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowList != nil {
		l = m.AllowList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DenyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenyList != nil {
		l = m.DenyList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuleList != nil {
		l = m.RuleList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DrpHttpConnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DrpHttpConnect != nil {
		l = m.DrpHttpConnect.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *URLType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLType{`,
		`DomainChoice:` + fmt.Sprintf("%v", this.DomainChoice) + `,`,
		`PathChoice:` + fmt.Sprintf("%v", this.PathChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLType_ExactValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLType_ExactValue{`,
		`ExactValue:` + fmt.Sprintf("%v", this.ExactValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLType_SuffixValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLType_SuffixValue{`,
		`SuffixValue:` + fmt.Sprintf("%v", this.SuffixValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLType_RegexValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLType_RegexValue{`,
		`RegexValue:` + fmt.Sprintf("%v", this.RegexValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLType_PathExactValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLType_PathExactValue{`,
		`PathExactValue:` + fmt.Sprintf("%v", this.PathExactValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLType_PathPrefixValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLType_PathPrefixValue{`,
		`PathPrefixValue:` + fmt.Sprintf("%v", this.PathPrefixValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLType_PathRegexValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLType_PathRegexValue{`,
		`PathRegexValue:` + fmt.Sprintf("%v", this.PathRegexValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLType_AnyPath) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&URLType_AnyPath{`,
		`AnyPath:` + strings.Replace(fmt.Sprintf("%v", this.AnyPath), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxySimpleRuleType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTlsList := "[]*DomainType{"
	for _, f := range this.TlsList {
		repeatedStringForTlsList += strings.Replace(fmt.Sprintf("%v", f), "DomainType", "schema.DomainType", 1) + ","
	}
	repeatedStringForTlsList += "}"
	repeatedStringForHttpList := "[]*URLType{"
	for _, f := range this.HttpList {
		repeatedStringForHttpList += strings.Replace(f.String(), "URLType", "URLType", 1) + ","
	}
	repeatedStringForHttpList += "}"
	repeatedStringForDestList := "[]*L4DestType{"
	for _, f := range this.DestList {
		repeatedStringForDestList += strings.Replace(fmt.Sprintf("%v", f), "L4DestType", "schema.L4DestType", 1) + ","
	}
	repeatedStringForDestList += "}"
	s := strings.Join([]string{`&ForwardProxySimpleRuleType{`,
		`TlsList:` + repeatedStringForTlsList + `,`,
		`HttpList:` + repeatedStringForHttpList + `,`,
		`DestList:` + repeatedStringForDestList + `,`,
		`DefaultActionChoice:` + fmt.Sprintf("%v", this.DefaultActionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxySimpleRuleType_DefaultActionNextPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxySimpleRuleType_DefaultActionNextPolicy{`,
		`DefaultActionNextPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultActionNextPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxySimpleRuleType_DefaultActionDeny) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxySimpleRuleType_DefaultActionDeny{`,
		`DefaultActionDeny:` + strings.Replace(fmt.Sprintf("%v", this.DefaultActionDeny), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxySimpleRuleType_DefaultActionAllow) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxySimpleRuleType_DefaultActionAllow{`,
		`DefaultActionAllow:` + strings.Replace(fmt.Sprintf("%v", this.DefaultActionAllow), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTlsList := "[]*DomainType{"
	for _, f := range this.TlsList {
		repeatedStringForTlsList += strings.Replace(fmt.Sprintf("%v", f), "DomainType", "schema.DomainType", 1) + ","
	}
	repeatedStringForTlsList += "}"
	s := strings.Join([]string{`&DomainListType{`,
		`TlsList:` + repeatedStringForTlsList + `,`,
		`}`,
	}, "")
	return s
}
func (this *URLListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHttpList := "[]*URLType{"
	for _, f := range this.HttpList {
		repeatedStringForHttpList += strings.Replace(f.String(), "URLType", "URLType", 1) + ","
	}
	repeatedStringForHttpList += "}"
	s := strings.Join([]string{`&URLListType{`,
		`HttpList:` + repeatedStringForHttpList + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType{`,
		`RuleName:` + fmt.Sprintf("%v", this.RuleName) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`SourceChoice:` + fmt.Sprintf("%v", this.SourceChoice) + `,`,
		`DestinationChoice:` + fmt.Sprintf("%v", this.DestinationChoice) + `,`,
		`HttpConnectChoice:` + fmt.Sprintf("%v", this.HttpConnectChoice) + `,`,
		`RuleDescription:` + fmt.Sprintf("%v", this.RuleDescription) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_AllSources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_AllSources{`,
		`AllSources:` + strings.Replace(fmt.Sprintf("%v", this.AllSources), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_PrefixList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_PrefixList{`,
		`PrefixList:` + strings.Replace(fmt.Sprintf("%v", this.PrefixList), "PrefixStringListType", "views.PrefixStringListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_InsideSources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_InsideSources{`,
		`InsideSources:` + strings.Replace(fmt.Sprintf("%v", this.InsideSources), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_Interface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_Interface{`,
		`Interface:` + strings.Replace(fmt.Sprintf("%v", this.Interface), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_Namespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_Namespace{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_LabelSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_LabelSelector{`,
		`LabelSelector:` + strings.Replace(fmt.Sprintf("%v", this.LabelSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_IpPrefixSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_IpPrefixSet{`,
		`IpPrefixSet:` + strings.Replace(fmt.Sprintf("%v", this.IpPrefixSet), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_AllDestinations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_AllDestinations{`,
		`AllDestinations:` + strings.Replace(fmt.Sprintf("%v", this.AllDestinations), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_TlsList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_TlsList{`,
		`TlsList:` + strings.Replace(fmt.Sprintf("%v", this.TlsList), "DomainListType", "DomainListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_HttpList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_HttpList{`,
		`HttpList:` + strings.Replace(fmt.Sprintf("%v", this.HttpList), "URLListType", "URLListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_NoHttpConnectPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_NoHttpConnectPort{`,
		`NoHttpConnectPort:` + strings.Replace(fmt.Sprintf("%v", this.NoHttpConnectPort), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_PortMatcher) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_PortMatcher{`,
		`PortMatcher:` + strings.Replace(fmt.Sprintf("%v", this.PortMatcher), "PortMatcherType", "policy.PortMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstIpPrefixSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_DstIpPrefixSet{`,
		`DstIpPrefixSet:` + strings.Replace(fmt.Sprintf("%v", this.DstIpPrefixSet), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstPrefixList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_DstPrefixList{`,
		`DstPrefixList:` + strings.Replace(fmt.Sprintf("%v", this.DstPrefixList), "PrefixStringListType", "views.PrefixStringListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstLabelSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_DstLabelSelector{`,
		`DstLabelSelector:` + strings.Replace(fmt.Sprintf("%v", this.DstLabelSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstAsnSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_DstAsnSet{`,
		`DstAsnSet:` + strings.Replace(fmt.Sprintf("%v", this.DstAsnSet), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyAdvancedRuleType_DstAsnList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardProxyAdvancedRuleType_DstAsnList{`,
		`DstAsnList:` + strings.Replace(fmt.Sprintf("%v", this.DstAsnList), "AsnMatchList", "policy.AsnMatchList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardProxyRuleListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*ForwardProxyAdvancedRuleType{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "ForwardProxyAdvancedRuleType", "ForwardProxyAdvancedRuleType", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&ForwardProxyRuleListType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`ProxyChoice:` + fmt.Sprintf("%v", this.ProxyChoice) + `,`,
		`RuleChoice:` + fmt.Sprintf("%v", this.RuleChoice) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AnyProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AnyProxy{`,
		`AnyProxy:` + strings.Replace(fmt.Sprintf("%v", this.AnyProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NetworkConnector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NetworkConnector{`,
		`NetworkConnector:` + strings.Replace(fmt.Sprintf("%v", this.NetworkConnector), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ProxyLabelSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ProxyLabelSelector{`,
		`ProxyLabelSelector:` + strings.Replace(fmt.Sprintf("%v", this.ProxyLabelSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AllowAll{`,
		`AllowAll:` + strings.Replace(fmt.Sprintf("%v", this.AllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AllowList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AllowList{`,
		`AllowList:` + strings.Replace(fmt.Sprintf("%v", this.AllowList), "ForwardProxySimpleRuleType", "ForwardProxySimpleRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DenyList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DenyList{`,
		`DenyList:` + strings.Replace(fmt.Sprintf("%v", this.DenyList), "ForwardProxySimpleRuleType", "ForwardProxySimpleRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RuleList{`,
		`RuleList:` + strings.Replace(fmt.Sprintf("%v", this.RuleList), "ForwardProxyRuleListType", "ForwardProxyRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DrpHttpConnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DrpHttpConnect{`,
		`DrpHttpConnect:` + strings.Replace(fmt.Sprintf("%v", this.DrpHttpConnect), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`ProxyChoice:` + fmt.Sprintf("%v", this.ProxyChoice) + `,`,
		`RuleChoice:` + fmt.Sprintf("%v", this.RuleChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AnyProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AnyProxy{`,
		`AnyProxy:` + strings.Replace(fmt.Sprintf("%v", this.AnyProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NetworkConnector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NetworkConnector{`,
		`NetworkConnector:` + strings.Replace(fmt.Sprintf("%v", this.NetworkConnector), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ProxyLabelSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ProxyLabelSelector{`,
		`ProxyLabelSelector:` + strings.Replace(fmt.Sprintf("%v", this.ProxyLabelSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AllowAll{`,
		`AllowAll:` + strings.Replace(fmt.Sprintf("%v", this.AllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AllowList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AllowList{`,
		`AllowList:` + strings.Replace(fmt.Sprintf("%v", this.AllowList), "ForwardProxySimpleRuleType", "ForwardProxySimpleRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DenyList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DenyList{`,
		`DenyList:` + strings.Replace(fmt.Sprintf("%v", this.DenyList), "ForwardProxySimpleRuleType", "ForwardProxySimpleRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RuleList{`,
		`RuleList:` + strings.Replace(fmt.Sprintf("%v", this.RuleList), "ForwardProxyRuleListType", "ForwardProxyRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DrpHttpConnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DrpHttpConnect{`,
		`DrpHttpConnect:` + strings.Replace(fmt.Sprintf("%v", this.DrpHttpConnect), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`ProxyChoice:` + fmt.Sprintf("%v", this.ProxyChoice) + `,`,
		`RuleChoice:` + fmt.Sprintf("%v", this.RuleChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AnyProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AnyProxy{`,
		`AnyProxy:` + strings.Replace(fmt.Sprintf("%v", this.AnyProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NetworkConnector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NetworkConnector{`,
		`NetworkConnector:` + strings.Replace(fmt.Sprintf("%v", this.NetworkConnector), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ProxyLabelSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ProxyLabelSelector{`,
		`ProxyLabelSelector:` + strings.Replace(fmt.Sprintf("%v", this.ProxyLabelSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AllowAll{`,
		`AllowAll:` + strings.Replace(fmt.Sprintf("%v", this.AllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AllowList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AllowList{`,
		`AllowList:` + strings.Replace(fmt.Sprintf("%v", this.AllowList), "ForwardProxySimpleRuleType", "ForwardProxySimpleRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DenyList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DenyList{`,
		`DenyList:` + strings.Replace(fmt.Sprintf("%v", this.DenyList), "ForwardProxySimpleRuleType", "ForwardProxySimpleRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RuleList{`,
		`RuleList:` + strings.Replace(fmt.Sprintf("%v", this.RuleList), "ForwardProxyRuleListType", "ForwardProxyRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DrpHttpConnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DrpHttpConnect{`,
		`DrpHttpConnect:` + strings.Replace(fmt.Sprintf("%v", this.DrpHttpConnect), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`ProxyChoice:` + fmt.Sprintf("%v", this.ProxyChoice) + `,`,
		`RuleChoice:` + fmt.Sprintf("%v", this.RuleChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AnyProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AnyProxy{`,
		`AnyProxy:` + strings.Replace(fmt.Sprintf("%v", this.AnyProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NetworkConnector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NetworkConnector{`,
		`NetworkConnector:` + strings.Replace(fmt.Sprintf("%v", this.NetworkConnector), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ProxyLabelSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ProxyLabelSelector{`,
		`ProxyLabelSelector:` + strings.Replace(fmt.Sprintf("%v", this.ProxyLabelSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AllowAll{`,
		`AllowAll:` + strings.Replace(fmt.Sprintf("%v", this.AllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AllowList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AllowList{`,
		`AllowList:` + strings.Replace(fmt.Sprintf("%v", this.AllowList), "ForwardProxySimpleRuleType", "ForwardProxySimpleRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DenyList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DenyList{`,
		`DenyList:` + strings.Replace(fmt.Sprintf("%v", this.DenyList), "ForwardProxySimpleRuleType", "ForwardProxySimpleRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RuleList{`,
		`RuleList:` + strings.Replace(fmt.Sprintf("%v", this.RuleList), "ForwardProxyRuleListType", "ForwardProxyRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DrpHttpConnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DrpHttpConnect{`,
		`DrpHttpConnect:` + strings.Replace(fmt.Sprintf("%v", this.DrpHttpConnect), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *URLType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URLType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URLType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &URLType_ExactValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuffixValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &URLType_SuffixValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegexValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &URLType_RegexValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathExactValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathChoice = &URLType_PathExactValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathPrefixValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathChoice = &URLType_PathPrefixValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathRegexValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathChoice = &URLType_PathRegexValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathChoice = &URLType_AnyPath{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardProxySimpleRuleType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardProxySimpleRuleType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardProxySimpleRuleType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsList = append(m.TlsList, &schema.DomainType{})
			if err := m.TlsList[len(m.TlsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpList = append(m.HttpList, &URLType{})
			if err := m.HttpList[len(m.HttpList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestList = append(m.DestList, &schema.L4DestType{})
			if err := m.DestList[len(m.DestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultActionNextPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultActionChoice = &ForwardProxySimpleRuleType_DefaultActionNextPolicy{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultActionDeny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultActionChoice = &ForwardProxySimpleRuleType_DefaultActionDeny{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultActionAllow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DefaultActionChoice = &ForwardProxySimpleRuleType_DefaultActionAllow{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsList = append(m.TlsList, &schema.DomainType{})
			if err := m.TlsList[len(m.TlsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *URLListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URLListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URLListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpList = append(m.HttpList, &URLType{})
			if err := m.HttpList[len(m.HttpList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardProxyAdvancedRuleType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardProxyAdvancedRuleType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardProxyAdvancedRuleType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= policy.RuleAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &ForwardProxyAdvancedRuleType_AllSources{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrefixStringListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &ForwardProxyAdvancedRuleType_PrefixList{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsideSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &ForwardProxyAdvancedRuleType_InsideSources{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &ForwardProxyAdvancedRuleType_Interface{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChoice = &ForwardProxyAdvancedRuleType_Namespace{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &ForwardProxyAdvancedRuleType_LabelSelector{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SourceChoice = &ForwardProxyAdvancedRuleType_IpPrefixSet{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllDestinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &ForwardProxyAdvancedRuleType_AllDestinations{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DomainListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &ForwardProxyAdvancedRuleType_TlsList{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &URLListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &ForwardProxyAdvancedRuleType_HttpList{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoHttpConnectPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpConnectChoice = &ForwardProxyAdvancedRuleType_NoHttpConnectPort{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &policy.PortMatcherType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HttpConnectChoice = &ForwardProxyAdvancedRuleType_PortMatcher{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstIpPrefixSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &ForwardProxyAdvancedRuleType_DstIpPrefixSet{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPrefixList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrefixStringListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &ForwardProxyAdvancedRuleType_DstPrefixList{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &ForwardProxyAdvancedRuleType_DstLabelSelector{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAsnSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &ForwardProxyAdvancedRuleType_DstAsnSet{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAsnList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &policy.AsnMatchList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DestinationChoice = &ForwardProxyAdvancedRuleType_DstAsnList{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardProxyRuleListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardProxyRuleListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardProxyRuleListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &ForwardProxyAdvancedRuleType{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &GlobalSpecType_AnyProxy{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkConnector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &GlobalSpecType_NetworkConnector{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &GlobalSpecType_ProxyLabelSelector{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_AllowAll{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxySimpleRuleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_AllowList{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxySimpleRuleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_DenyList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxyRuleListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_RuleList{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrpHttpConnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &GlobalSpecType_DrpHttpConnect{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &CreateSpecType_AnyProxy{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkConnector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &CreateSpecType_NetworkConnector{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &CreateSpecType_ProxyLabelSelector{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_AllowAll{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxySimpleRuleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_AllowList{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxySimpleRuleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_DenyList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxyRuleListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_RuleList{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrpHttpConnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &CreateSpecType_DrpHttpConnect{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &ReplaceSpecType_AnyProxy{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkConnector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &ReplaceSpecType_NetworkConnector{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &ReplaceSpecType_ProxyLabelSelector{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_AllowAll{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxySimpleRuleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_AllowList{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxySimpleRuleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_DenyList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxyRuleListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_RuleList{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrpHttpConnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &ReplaceSpecType_DrpHttpConnect{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &GetSpecType_AnyProxy{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkConnector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &GetSpecType_NetworkConnector{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyLabelSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &GetSpecType_ProxyLabelSelector{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_AllowAll{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxySimpleRuleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_AllowList{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxySimpleRuleType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_DenyList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardProxyRuleListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_RuleList{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrpHttpConnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ProxyChoice = &GetSpecType_DrpHttpConnect{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

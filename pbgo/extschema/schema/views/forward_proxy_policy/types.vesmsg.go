// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package forward_proxy_policy

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRuleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRuleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSegmentPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *CreateSpecType) GetProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetProxyChoice().(type) {
	case *CreateSpecType_AnyProxy:

		return nil, nil

	case *CreateSpecType_NetworkConnector:

		vref := m.GetNetworkConnector()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_connector.Object")
		dri := db.DRefInfo{
			RefdType:   "network_connector.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "network_connector",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *CreateSpecType_ProxyLabelSelector:

		return nil, nil

	case *CreateSpecType_DrpHttpConnect:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetProxyChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetProxyChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetProxyChoice().(type) {
	case *CreateSpecType_AnyProxy:

	case *CreateSpecType_NetworkConnector:
		refdType, err := d.TypeForEntryKind("", "", "network_connector.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: network_connector")
		}

		vref := m.GetNetworkConnector()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "network_connector.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *CreateSpecType_ProxyLabelSelector:

	case *CreateSpecType_DrpHttpConnect:

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetRuleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRuleChoice() == nil {
		return nil, nil
	}
	switch m.GetRuleChoice().(type) {
	case *CreateSpecType_AllowAll:

		return nil, nil

	case *CreateSpecType_AllowList:

		return nil, nil

	case *CreateSpecType_DenyList:

		return nil, nil

	case *CreateSpecType_RuleList:

		drInfos, err := m.GetRuleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRuleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rule_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetSegmentPolicyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSegmentPolicy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSegmentPolicy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "segment_policy." + dri.DRField
	}
	return drInfos, err

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) ProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) RuleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rule_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["proxy_choice"]; exists {
		val := m.GetProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetProxyChoice().(type) {
	case *CreateSpecType_AnyProxy:
		if fv, exists := v.FldValidators["proxy_choice.any_proxy"]; exists {
			val := m.GetProxyChoice().(*CreateSpecType_AnyProxy).AnyProxy
			vOpts := append(opts,
				db.WithValidateField("proxy_choice"),
				db.WithValidateField("any_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NetworkConnector:
		if fv, exists := v.FldValidators["proxy_choice.network_connector"]; exists {
			val := m.GetProxyChoice().(*CreateSpecType_NetworkConnector).NetworkConnector
			vOpts := append(opts,
				db.WithValidateField("proxy_choice"),
				db.WithValidateField("network_connector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ProxyLabelSelector:
		if fv, exists := v.FldValidators["proxy_choice.proxy_label_selector"]; exists {
			val := m.GetProxyChoice().(*CreateSpecType_ProxyLabelSelector).ProxyLabelSelector
			vOpts := append(opts,
				db.WithValidateField("proxy_choice"),
				db.WithValidateField("proxy_label_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DrpHttpConnect:
		if fv, exists := v.FldValidators["proxy_choice.drp_http_connect"]; exists {
			val := m.GetProxyChoice().(*CreateSpecType_DrpHttpConnect).DrpHttpConnect
			vOpts := append(opts,
				db.WithValidateField("proxy_choice"),
				db.WithValidateField("drp_http_connect"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rule_choice"]; exists {
		val := m.GetRuleChoice()
		vOpts := append(opts,
			db.WithValidateField("rule_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRuleChoice().(type) {
	case *CreateSpecType_AllowAll:
		if fv, exists := v.FldValidators["rule_choice.allow_all"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_AllowAll).AllowAll
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AllowList:
		if fv, exists := v.FldValidators["rule_choice.allow_list"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_AllowList).AllowList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DenyList:
		if fv, exists := v.FldValidators["rule_choice.deny_list"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_DenyList).DenyList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("deny_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_RuleList:
		if fv, exists := v.FldValidators["rule_choice.rule_list"]; exists {
			val := m.GetRuleChoice().(*CreateSpecType_RuleList).RuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["segment_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("segment_policy"))
		if err := fv(ctx, m.GetSegmentPolicy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhProxyChoice := v.ProxyChoiceValidationRuleHandler
	rulesProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhProxyChoice(rulesProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["proxy_choice"] = vFn

	vrhRuleChoice := v.RuleChoiceValidationRuleHandler
	rulesRuleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRuleChoice(rulesRuleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.rule_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rule_choice"] = vFn

	v.FldValidators["proxy_choice.network_connector"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["proxy_choice.proxy_label_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	v.FldValidators["rule_choice.allow_list"] = ForwardProxySimpleRuleTypeValidator().Validate
	v.FldValidators["rule_choice.deny_list"] = ForwardProxySimpleRuleTypeValidator().Validate
	v.FldValidators["rule_choice.rule_list"] = ForwardProxyRuleListTypeValidator().Validate

	v.FldValidators["segment_policy"] = ves_io_schema_policy.SegmentPolicyTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DomainListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DomainListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DomainListType) DeepCopy() *DomainListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DomainListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DomainListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DomainListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DomainListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateDomainListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDomainListType) TlsListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for tls_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.DomainType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.DomainTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for tls_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.DomainType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.DomainType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated tls_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tls_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDomainListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DomainListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DomainListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["tls_list"]; exists {
		vOpts := append(opts, db.WithValidateField("tls_list"))
		if err := fv(ctx, m.GetTlsList(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDomainListTypeValidator = func() *ValidateDomainListType {
	v := &ValidateDomainListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhTlsList := v.TlsListValidationRuleHandler
	rulesTlsList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhTlsList(rulesTlsList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DomainListType.tls_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_list"] = vFn

	return v
}()

func DomainListTypeValidator() db.Validator {
	return DefaultDomainListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ForwardProxyAdvancedRuleType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ForwardProxyAdvancedRuleType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ForwardProxyAdvancedRuleType) DeepCopy() *ForwardProxyAdvancedRuleType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ForwardProxyAdvancedRuleType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ForwardProxyAdvancedRuleType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ForwardProxyAdvancedRuleType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ForwardProxyAdvancedRuleTypeValidator().Validate(ctx, m, opts...)
}

func (m *ForwardProxyAdvancedRuleType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDestinationChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDestinationChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSourceChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSourceChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *ForwardProxyAdvancedRuleType) GetDestinationChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDestinationChoice().(type) {
	case *ForwardProxyAdvancedRuleType_AllDestinations:

		return nil, nil

	case *ForwardProxyAdvancedRuleType_TlsList:

		return nil, nil

	case *ForwardProxyAdvancedRuleType_HttpList:

		return nil, nil

	case *ForwardProxyAdvancedRuleType_DstIpPrefixSet:

		vref := m.GetDstIpPrefixSet()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("ip_prefix_set.Object")
		dri := db.DRefInfo{
			RefdType:   "ip_prefix_set.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dst_ip_prefix_set",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *ForwardProxyAdvancedRuleType_DstPrefixList:

		return nil, nil

	case *ForwardProxyAdvancedRuleType_DstLabelSelector:

		return nil, nil

	case *ForwardProxyAdvancedRuleType_DstAsnSet:

		vref := m.GetDstAsnSet()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("bgp_asn_set.Object")
		dri := db.DRefInfo{
			RefdType:   "bgp_asn_set.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dst_asn_set",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *ForwardProxyAdvancedRuleType_DstAsnList:

		return nil, nil

	case *ForwardProxyAdvancedRuleType_UrlCategoryList:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetDestinationChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ForwardProxyAdvancedRuleType) GetDestinationChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDestinationChoice().(type) {
	case *ForwardProxyAdvancedRuleType_AllDestinations:

	case *ForwardProxyAdvancedRuleType_TlsList:

	case *ForwardProxyAdvancedRuleType_HttpList:

	case *ForwardProxyAdvancedRuleType_DstIpPrefixSet:
		refdType, err := d.TypeForEntryKind("", "", "ip_prefix_set.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: ip_prefix_set")
		}

		vref := m.GetDstIpPrefixSet()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "ip_prefix_set.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *ForwardProxyAdvancedRuleType_DstPrefixList:

	case *ForwardProxyAdvancedRuleType_DstLabelSelector:

	case *ForwardProxyAdvancedRuleType_DstAsnSet:
		refdType, err := d.TypeForEntryKind("", "", "bgp_asn_set.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: bgp_asn_set")
		}

		vref := m.GetDstAsnSet()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "bgp_asn_set.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *ForwardProxyAdvancedRuleType_DstAsnList:

	case *ForwardProxyAdvancedRuleType_UrlCategoryList:

	}

	return entries, nil
}

func (m *ForwardProxyAdvancedRuleType) GetSourceChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetSourceChoice().(type) {
	case *ForwardProxyAdvancedRuleType_AllSources:

		return nil, nil

	case *ForwardProxyAdvancedRuleType_PrefixList:

		return nil, nil

	case *ForwardProxyAdvancedRuleType_InsideSources:

		return nil, nil

	case *ForwardProxyAdvancedRuleType_Interface:

		vref := m.GetInterface()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_interface.Object")
		dri := db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "interface",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *ForwardProxyAdvancedRuleType_LabelSelector:

		return nil, nil

	case *ForwardProxyAdvancedRuleType_IpPrefixSet:

		vref := m.GetIpPrefixSet()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("ip_prefix_set.Object")
		dri := db.DRefInfo{
			RefdType:   "ip_prefix_set.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "ip_prefix_set",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetSourceChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ForwardProxyAdvancedRuleType) GetSourceChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetSourceChoice().(type) {
	case *ForwardProxyAdvancedRuleType_AllSources:

	case *ForwardProxyAdvancedRuleType_PrefixList:

	case *ForwardProxyAdvancedRuleType_InsideSources:

	case *ForwardProxyAdvancedRuleType_Interface:
		refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
		}

		vref := m.GetInterface()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "network_interface.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *ForwardProxyAdvancedRuleType_LabelSelector:

	case *ForwardProxyAdvancedRuleType_IpPrefixSet:
		refdType, err := d.TypeForEntryKind("", "", "ip_prefix_set.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: ip_prefix_set")
		}

		vref := m.GetIpPrefixSet()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "ip_prefix_set.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

type ValidateForwardProxyAdvancedRuleType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateForwardProxyAdvancedRuleType) DestinationChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for destination_choice")
	}
	return validatorFn, nil
}

func (v *ValidateForwardProxyAdvancedRuleType) SourceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for source_choice")
	}
	return validatorFn, nil
}

func (v *ValidateForwardProxyAdvancedRuleType) ActionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.RuleAction)
		return int32(i)
	}
	// ves_io_schema_policy.RuleAction_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema_policy.RuleAction_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for action")
	}

	return validatorFn, nil
}

func (v *ValidateForwardProxyAdvancedRuleType) MetadataValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for metadata")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema.MessageMetaTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateForwardProxyAdvancedRuleType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ForwardProxyAdvancedRuleType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ForwardProxyAdvancedRuleType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["action"]; exists {

		vOpts := append(opts, db.WithValidateField("action"))
		if err := fv(ctx, m.GetAction(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["destination_choice"]; exists {
		val := m.GetDestinationChoice()
		vOpts := append(opts,
			db.WithValidateField("destination_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDestinationChoice().(type) {
	case *ForwardProxyAdvancedRuleType_AllDestinations:
		if fv, exists := v.FldValidators["destination_choice.all_destinations"]; exists {
			val := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_AllDestinations).AllDestinations
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("all_destinations"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxyAdvancedRuleType_TlsList:
		if fv, exists := v.FldValidators["destination_choice.tls_list"]; exists {
			val := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_TlsList).TlsList
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("tls_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxyAdvancedRuleType_HttpList:
		if fv, exists := v.FldValidators["destination_choice.http_list"]; exists {
			val := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_HttpList).HttpList
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("http_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxyAdvancedRuleType_DstIpPrefixSet:
		if fv, exists := v.FldValidators["destination_choice.dst_ip_prefix_set"]; exists {
			val := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_DstIpPrefixSet).DstIpPrefixSet
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("dst_ip_prefix_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxyAdvancedRuleType_DstPrefixList:
		if fv, exists := v.FldValidators["destination_choice.dst_prefix_list"]; exists {
			val := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_DstPrefixList).DstPrefixList
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("dst_prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxyAdvancedRuleType_DstLabelSelector:
		if fv, exists := v.FldValidators["destination_choice.dst_label_selector"]; exists {
			val := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_DstLabelSelector).DstLabelSelector
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("dst_label_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxyAdvancedRuleType_DstAsnSet:
		if fv, exists := v.FldValidators["destination_choice.dst_asn_set"]; exists {
			val := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_DstAsnSet).DstAsnSet
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("dst_asn_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxyAdvancedRuleType_DstAsnList:
		if fv, exists := v.FldValidators["destination_choice.dst_asn_list"]; exists {
			val := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_DstAsnList).DstAsnList
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("dst_asn_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxyAdvancedRuleType_UrlCategoryList:
		if fv, exists := v.FldValidators["destination_choice.url_category_list"]; exists {
			val := m.GetDestinationChoice().(*ForwardProxyAdvancedRuleType_UrlCategoryList).UrlCategoryList
			vOpts := append(opts,
				db.WithValidateField("destination_choice"),
				db.WithValidateField("url_category_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetHttpConnectChoice().(type) {
	case *ForwardProxyAdvancedRuleType_NoHttpConnectPort:
		if fv, exists := v.FldValidators["http_connect_choice.no_http_connect_port"]; exists {
			val := m.GetHttpConnectChoice().(*ForwardProxyAdvancedRuleType_NoHttpConnectPort).NoHttpConnectPort
			vOpts := append(opts,
				db.WithValidateField("http_connect_choice"),
				db.WithValidateField("no_http_connect_port"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxyAdvancedRuleType_PortMatcher:
		if fv, exists := v.FldValidators["http_connect_choice.port_matcher"]; exists {
			val := m.GetHttpConnectChoice().(*ForwardProxyAdvancedRuleType_PortMatcher).PortMatcher
			vOpts := append(opts,
				db.WithValidateField("http_connect_choice"),
				db.WithValidateField("port_matcher"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rule_description"]; exists {

		vOpts := append(opts, db.WithValidateField("rule_description"))
		if err := fv(ctx, m.GetRuleDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["rule_name"]; exists {

		vOpts := append(opts, db.WithValidateField("rule_name"))
		if err := fv(ctx, m.GetRuleName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["source_choice"]; exists {
		val := m.GetSourceChoice()
		vOpts := append(opts,
			db.WithValidateField("source_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSourceChoice().(type) {
	case *ForwardProxyAdvancedRuleType_AllSources:
		if fv, exists := v.FldValidators["source_choice.all_sources"]; exists {
			val := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_AllSources).AllSources
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("all_sources"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxyAdvancedRuleType_PrefixList:
		if fv, exists := v.FldValidators["source_choice.prefix_list"]; exists {
			val := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_PrefixList).PrefixList
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("prefix_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxyAdvancedRuleType_InsideSources:
		if fv, exists := v.FldValidators["source_choice.inside_sources"]; exists {
			val := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_InsideSources).InsideSources
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("inside_sources"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxyAdvancedRuleType_Interface:
		if fv, exists := v.FldValidators["source_choice.interface"]; exists {
			val := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_Interface).Interface
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxyAdvancedRuleType_Namespace:
		if fv, exists := v.FldValidators["source_choice.namespace"]; exists {
			val := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_Namespace).Namespace
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("namespace"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxyAdvancedRuleType_LabelSelector:
		if fv, exists := v.FldValidators["source_choice.label_selector"]; exists {
			val := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_LabelSelector).LabelSelector
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("label_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxyAdvancedRuleType_IpPrefixSet:
		if fv, exists := v.FldValidators["source_choice.ip_prefix_set"]; exists {
			val := m.GetSourceChoice().(*ForwardProxyAdvancedRuleType_IpPrefixSet).IpPrefixSet
			vOpts := append(opts,
				db.WithValidateField("source_choice"),
				db.WithValidateField("ip_prefix_set"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultForwardProxyAdvancedRuleTypeValidator = func() *ValidateForwardProxyAdvancedRuleType {
	v := &ValidateForwardProxyAdvancedRuleType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDestinationChoice := v.DestinationChoiceValidationRuleHandler
	rulesDestinationChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDestinationChoice(rulesDestinationChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ForwardProxyAdvancedRuleType.destination_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["destination_choice"] = vFn

	vrhSourceChoice := v.SourceChoiceValidationRuleHandler
	rulesSourceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSourceChoice(rulesSourceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ForwardProxyAdvancedRuleType.source_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["source_choice"] = vFn

	vrhAction := v.ActionValidationRuleHandler
	rulesAction := map[string]string{
		"ves.io.schema.rules.enum.in":          "[0,1]",
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAction(rulesAction)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ForwardProxyAdvancedRuleType.action: %s", err)
		panic(errMsg)
	}
	v.FldValidators["action"] = vFn

	vrhMetadata := v.MetadataValidationRuleHandler
	rulesMetadata := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMetadata(rulesMetadata)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ForwardProxyAdvancedRuleType.metadata: %s", err)
		panic(errMsg)
	}
	v.FldValidators["metadata"] = vFn

	v.FldValidators["destination_choice.tls_list"] = DomainListTypeValidator().Validate
	v.FldValidators["destination_choice.http_list"] = URLListTypeValidator().Validate
	v.FldValidators["destination_choice.dst_ip_prefix_set"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["destination_choice.dst_prefix_list"] = ves_io_schema_views.PrefixStringListTypeValidator().Validate
	v.FldValidators["destination_choice.dst_label_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["destination_choice.dst_asn_set"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["destination_choice.dst_asn_list"] = ves_io_schema_policy.AsnMatchListValidator().Validate
	v.FldValidators["destination_choice.url_category_list"] = URLCategoryListTypeValidator().Validate

	v.FldValidators["http_connect_choice.port_matcher"] = ves_io_schema_policy.PortMatcherTypeValidator().Validate

	v.FldValidators["source_choice.prefix_list"] = ves_io_schema_views.PrefixStringListTypeValidator().Validate
	v.FldValidators["source_choice.interface"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["source_choice.label_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate
	v.FldValidators["source_choice.ip_prefix_set"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func ForwardProxyAdvancedRuleTypeValidator() db.Validator {
	return DefaultForwardProxyAdvancedRuleTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ForwardProxyRuleListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ForwardProxyRuleListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ForwardProxyRuleListType) DeepCopy() *ForwardProxyRuleListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ForwardProxyRuleListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ForwardProxyRuleListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ForwardProxyRuleListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ForwardProxyRuleListTypeValidator().Validate(ctx, m, opts...)
}

func (m *ForwardProxyRuleListType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetRulesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ForwardProxyRuleListType) GetRulesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRules() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetRules() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRules() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("rules[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateForwardProxyRuleListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateForwardProxyRuleListType) RulesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for rules")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ForwardProxyAdvancedRuleType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ForwardProxyAdvancedRuleTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for rules")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ForwardProxyAdvancedRuleType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ForwardProxyAdvancedRuleType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated rules")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items rules")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateForwardProxyRuleListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ForwardProxyRuleListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ForwardProxyRuleListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["rules"]; exists {
		vOpts := append(opts, db.WithValidateField("rules"))
		if err := fv(ctx, m.GetRules(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultForwardProxyRuleListTypeValidator = func() *ValidateForwardProxyRuleListType {
	v := &ValidateForwardProxyRuleListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhRules := v.RulesValidationRuleHandler
	rulesRules := map[string]string{
		"ves.io.schema.rules.message.required":              "true",
		"ves.io.schema.rules.repeated.max_items":            "32",
		"ves.io.schema.rules.repeated.min_items":            "1",
		"ves.io.schema.rules.repeated.unique_metadata_name": "true",
	}
	vFn, err = vrhRules(rulesRules)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ForwardProxyRuleListType.rules: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rules"] = vFn

	return v
}()

func ForwardProxyRuleListTypeValidator() db.Validator {
	return DefaultForwardProxyRuleListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ForwardProxySimpleRuleType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ForwardProxySimpleRuleType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ForwardProxySimpleRuleType) DeepCopy() *ForwardProxySimpleRuleType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ForwardProxySimpleRuleType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ForwardProxySimpleRuleType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ForwardProxySimpleRuleType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ForwardProxySimpleRuleTypeValidator().Validate(ctx, m, opts...)
}

type ValidateForwardProxySimpleRuleType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateForwardProxySimpleRuleType) DefaultActionChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for default_action_choice")
	}
	return validatorFn, nil
}

func (v *ValidateForwardProxySimpleRuleType) TlsListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for tls_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.DomainType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.DomainTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for tls_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.DomainType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.DomainType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated tls_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items tls_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateForwardProxySimpleRuleType) HttpListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for http_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*URLType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := URLTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for http_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*URLType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*URLType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated http_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items http_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateForwardProxySimpleRuleType) DestListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for dest_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema.L4DestType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema.L4DestTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for dest_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema.L4DestType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema.L4DestType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated dest_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items dest_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateForwardProxySimpleRuleType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ForwardProxySimpleRuleType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ForwardProxySimpleRuleType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["default_action_choice"]; exists {
		val := m.GetDefaultActionChoice()
		vOpts := append(opts,
			db.WithValidateField("default_action_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDefaultActionChoice().(type) {
	case *ForwardProxySimpleRuleType_DefaultActionNextPolicy:
		if fv, exists := v.FldValidators["default_action_choice.default_action_next_policy"]; exists {
			val := m.GetDefaultActionChoice().(*ForwardProxySimpleRuleType_DefaultActionNextPolicy).DefaultActionNextPolicy
			vOpts := append(opts,
				db.WithValidateField("default_action_choice"),
				db.WithValidateField("default_action_next_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxySimpleRuleType_DefaultActionDeny:
		if fv, exists := v.FldValidators["default_action_choice.default_action_deny"]; exists {
			val := m.GetDefaultActionChoice().(*ForwardProxySimpleRuleType_DefaultActionDeny).DefaultActionDeny
			vOpts := append(opts,
				db.WithValidateField("default_action_choice"),
				db.WithValidateField("default_action_deny"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ForwardProxySimpleRuleType_DefaultActionAllow:
		if fv, exists := v.FldValidators["default_action_choice.default_action_allow"]; exists {
			val := m.GetDefaultActionChoice().(*ForwardProxySimpleRuleType_DefaultActionAllow).DefaultActionAllow
			vOpts := append(opts,
				db.WithValidateField("default_action_choice"),
				db.WithValidateField("default_action_allow"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["dest_list"]; exists {
		vOpts := append(opts, db.WithValidateField("dest_list"))
		if err := fv(ctx, m.GetDestList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["http_list"]; exists {
		vOpts := append(opts, db.WithValidateField("http_list"))
		if err := fv(ctx, m.GetHttpList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["tls_list"]; exists {
		vOpts := append(opts, db.WithValidateField("tls_list"))
		if err := fv(ctx, m.GetTlsList(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultForwardProxySimpleRuleTypeValidator = func() *ValidateForwardProxySimpleRuleType {
	v := &ValidateForwardProxySimpleRuleType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDefaultActionChoice := v.DefaultActionChoiceValidationRuleHandler
	rulesDefaultActionChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDefaultActionChoice(rulesDefaultActionChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ForwardProxySimpleRuleType.default_action_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["default_action_choice"] = vFn

	vrhTlsList := v.TlsListValidationRuleHandler
	rulesTlsList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhTlsList(rulesTlsList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ForwardProxySimpleRuleType.tls_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tls_list"] = vFn

	vrhHttpList := v.HttpListValidationRuleHandler
	rulesHttpList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhHttpList(rulesHttpList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ForwardProxySimpleRuleType.http_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["http_list"] = vFn

	vrhDestList := v.DestListValidationRuleHandler
	rulesDestList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDestList(rulesDestList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ForwardProxySimpleRuleType.dest_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dest_list"] = vFn

	return v
}()

func ForwardProxySimpleRuleTypeValidator() db.Validator {
	return DefaultForwardProxySimpleRuleTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRuleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRuleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSegmentPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GetSpecType) GetProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetProxyChoice().(type) {
	case *GetSpecType_AnyProxy:

		return nil, nil

	case *GetSpecType_NetworkConnector:

		vref := m.GetNetworkConnector()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_connector.Object")
		dri := db.DRefInfo{
			RefdType:   "network_connector.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "network_connector",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *GetSpecType_ProxyLabelSelector:

		return nil, nil

	case *GetSpecType_DrpHttpConnect:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetProxyChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetProxyChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetProxyChoice().(type) {
	case *GetSpecType_AnyProxy:

	case *GetSpecType_NetworkConnector:
		refdType, err := d.TypeForEntryKind("", "", "network_connector.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: network_connector")
		}

		vref := m.GetNetworkConnector()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "network_connector.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GetSpecType_ProxyLabelSelector:

	case *GetSpecType_DrpHttpConnect:

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetRuleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRuleChoice() == nil {
		return nil, nil
	}
	switch m.GetRuleChoice().(type) {
	case *GetSpecType_AllowAll:

		return nil, nil

	case *GetSpecType_AllowList:

		return nil, nil

	case *GetSpecType_DenyList:

		return nil, nil

	case *GetSpecType_RuleList:

		drInfos, err := m.GetRuleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRuleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rule_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetSegmentPolicyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSegmentPolicy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSegmentPolicy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "segment_policy." + dri.DRField
	}
	return drInfos, err

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) RuleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rule_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["proxy_choice"]; exists {
		val := m.GetProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetProxyChoice().(type) {
	case *GetSpecType_AnyProxy:
		if fv, exists := v.FldValidators["proxy_choice.any_proxy"]; exists {
			val := m.GetProxyChoice().(*GetSpecType_AnyProxy).AnyProxy
			vOpts := append(opts,
				db.WithValidateField("proxy_choice"),
				db.WithValidateField("any_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NetworkConnector:
		if fv, exists := v.FldValidators["proxy_choice.network_connector"]; exists {
			val := m.GetProxyChoice().(*GetSpecType_NetworkConnector).NetworkConnector
			vOpts := append(opts,
				db.WithValidateField("proxy_choice"),
				db.WithValidateField("network_connector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ProxyLabelSelector:
		if fv, exists := v.FldValidators["proxy_choice.proxy_label_selector"]; exists {
			val := m.GetProxyChoice().(*GetSpecType_ProxyLabelSelector).ProxyLabelSelector
			vOpts := append(opts,
				db.WithValidateField("proxy_choice"),
				db.WithValidateField("proxy_label_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DrpHttpConnect:
		if fv, exists := v.FldValidators["proxy_choice.drp_http_connect"]; exists {
			val := m.GetProxyChoice().(*GetSpecType_DrpHttpConnect).DrpHttpConnect
			vOpts := append(opts,
				db.WithValidateField("proxy_choice"),
				db.WithValidateField("drp_http_connect"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rule_choice"]; exists {
		val := m.GetRuleChoice()
		vOpts := append(opts,
			db.WithValidateField("rule_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRuleChoice().(type) {
	case *GetSpecType_AllowAll:
		if fv, exists := v.FldValidators["rule_choice.allow_all"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_AllowAll).AllowAll
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AllowList:
		if fv, exists := v.FldValidators["rule_choice.allow_list"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_AllowList).AllowList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DenyList:
		if fv, exists := v.FldValidators["rule_choice.deny_list"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_DenyList).DenyList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("deny_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_RuleList:
		if fv, exists := v.FldValidators["rule_choice.rule_list"]; exists {
			val := m.GetRuleChoice().(*GetSpecType_RuleList).RuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["segment_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("segment_policy"))
		if err := fv(ctx, m.GetSegmentPolicy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhProxyChoice := v.ProxyChoiceValidationRuleHandler
	rulesProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhProxyChoice(rulesProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["proxy_choice"] = vFn

	vrhRuleChoice := v.RuleChoiceValidationRuleHandler
	rulesRuleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRuleChoice(rulesRuleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.rule_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rule_choice"] = vFn

	v.FldValidators["proxy_choice.network_connector"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["proxy_choice.proxy_label_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	v.FldValidators["rule_choice.allow_list"] = ForwardProxySimpleRuleTypeValidator().Validate
	v.FldValidators["rule_choice.deny_list"] = ForwardProxySimpleRuleTypeValidator().Validate
	v.FldValidators["rule_choice.rule_list"] = ForwardProxyRuleListTypeValidator().Validate

	v.FldValidators["segment_policy"] = ves_io_schema_policy.SegmentPolicyTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRuleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRuleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSegmentPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetProxyChoice().(type) {
	case *GlobalSpecType_AnyProxy:

		return nil, nil

	case *GlobalSpecType_NetworkConnector:

		vref := m.GetNetworkConnector()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_connector.Object")
		dri := db.DRefInfo{
			RefdType:   "network_connector.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "network_connector",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *GlobalSpecType_ProxyLabelSelector:

		return nil, nil

	case *GlobalSpecType_DrpHttpConnect:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetProxyChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetProxyChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetProxyChoice().(type) {
	case *GlobalSpecType_AnyProxy:

	case *GlobalSpecType_NetworkConnector:
		refdType, err := d.TypeForEntryKind("", "", "network_connector.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: network_connector")
		}

		vref := m.GetNetworkConnector()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "network_connector.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *GlobalSpecType_ProxyLabelSelector:

	case *GlobalSpecType_DrpHttpConnect:

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetRuleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRuleChoice() == nil {
		return nil, nil
	}
	switch m.GetRuleChoice().(type) {
	case *GlobalSpecType_AllowAll:

		return nil, nil

	case *GlobalSpecType_AllowList:

		return nil, nil

	case *GlobalSpecType_DenyList:

		return nil, nil

	case *GlobalSpecType_RuleList:

		drInfos, err := m.GetRuleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRuleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rule_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetSegmentPolicyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSegmentPolicy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSegmentPolicy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "segment_policy." + dri.DRField
	}
	return drInfos, err

}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) RuleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rule_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["proxy_choice"]; exists {
		val := m.GetProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetProxyChoice().(type) {
	case *GlobalSpecType_AnyProxy:
		if fv, exists := v.FldValidators["proxy_choice.any_proxy"]; exists {
			val := m.GetProxyChoice().(*GlobalSpecType_AnyProxy).AnyProxy
			vOpts := append(opts,
				db.WithValidateField("proxy_choice"),
				db.WithValidateField("any_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NetworkConnector:
		if fv, exists := v.FldValidators["proxy_choice.network_connector"]; exists {
			val := m.GetProxyChoice().(*GlobalSpecType_NetworkConnector).NetworkConnector
			vOpts := append(opts,
				db.WithValidateField("proxy_choice"),
				db.WithValidateField("network_connector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ProxyLabelSelector:
		if fv, exists := v.FldValidators["proxy_choice.proxy_label_selector"]; exists {
			val := m.GetProxyChoice().(*GlobalSpecType_ProxyLabelSelector).ProxyLabelSelector
			vOpts := append(opts,
				db.WithValidateField("proxy_choice"),
				db.WithValidateField("proxy_label_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DrpHttpConnect:
		if fv, exists := v.FldValidators["proxy_choice.drp_http_connect"]; exists {
			val := m.GetProxyChoice().(*GlobalSpecType_DrpHttpConnect).DrpHttpConnect
			vOpts := append(opts,
				db.WithValidateField("proxy_choice"),
				db.WithValidateField("drp_http_connect"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rule_choice"]; exists {
		val := m.GetRuleChoice()
		vOpts := append(opts,
			db.WithValidateField("rule_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRuleChoice().(type) {
	case *GlobalSpecType_AllowAll:
		if fv, exists := v.FldValidators["rule_choice.allow_all"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_AllowAll).AllowAll
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AllowList:
		if fv, exists := v.FldValidators["rule_choice.allow_list"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_AllowList).AllowList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DenyList:
		if fv, exists := v.FldValidators["rule_choice.deny_list"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_DenyList).DenyList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("deny_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_RuleList:
		if fv, exists := v.FldValidators["rule_choice.rule_list"]; exists {
			val := m.GetRuleChoice().(*GlobalSpecType_RuleList).RuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["segment_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("segment_policy"))
		if err := fv(ctx, m.GetSegmentPolicy(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhProxyChoice := v.ProxyChoiceValidationRuleHandler
	rulesProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhProxyChoice(rulesProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["proxy_choice"] = vFn

	vrhRuleChoice := v.RuleChoiceValidationRuleHandler
	rulesRuleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRuleChoice(rulesRuleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.rule_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rule_choice"] = vFn

	v.FldValidators["proxy_choice.network_connector"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["proxy_choice.proxy_label_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	v.FldValidators["rule_choice.allow_list"] = ForwardProxySimpleRuleTypeValidator().Validate
	v.FldValidators["rule_choice.deny_list"] = ForwardProxySimpleRuleTypeValidator().Validate
	v.FldValidators["rule_choice.rule_list"] = ForwardProxyRuleListTypeValidator().Validate

	v.FldValidators["segment_policy"] = ves_io_schema_policy.SegmentPolicyTypeValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetRuleChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetRuleChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSegmentPolicyDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicyDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *ReplaceSpecType) GetProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetProxyChoice().(type) {
	case *ReplaceSpecType_AnyProxy:

		return nil, nil

	case *ReplaceSpecType_NetworkConnector:

		vref := m.GetNetworkConnector()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_connector.Object")
		dri := db.DRefInfo{
			RefdType:   "network_connector.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "network_connector",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	case *ReplaceSpecType_ProxyLabelSelector:

		return nil, nil

	case *ReplaceSpecType_DrpHttpConnect:

		return nil, nil

	default:
		return nil, nil
	}
}

// GetProxyChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetProxyChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetProxyChoice().(type) {
	case *ReplaceSpecType_AnyProxy:

	case *ReplaceSpecType_NetworkConnector:
		refdType, err := d.TypeForEntryKind("", "", "network_connector.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: network_connector")
		}

		vref := m.GetNetworkConnector()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "network_connector.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	case *ReplaceSpecType_ProxyLabelSelector:

	case *ReplaceSpecType_DrpHttpConnect:

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetRuleChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetRuleChoice() == nil {
		return nil, nil
	}
	switch m.GetRuleChoice().(type) {
	case *ReplaceSpecType_AllowAll:

		return nil, nil

	case *ReplaceSpecType_AllowList:

		return nil, nil

	case *ReplaceSpecType_DenyList:

		return nil, nil

	case *ReplaceSpecType_RuleList:

		drInfos, err := m.GetRuleList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetRuleList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "rule_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetSegmentPolicyDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSegmentPolicy() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSegmentPolicy().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSegmentPolicy().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "segment_policy." + dri.DRField
	}
	return drInfos, err

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) ProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) RuleChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for rule_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["proxy_choice"]; exists {
		val := m.GetProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetProxyChoice().(type) {
	case *ReplaceSpecType_AnyProxy:
		if fv, exists := v.FldValidators["proxy_choice.any_proxy"]; exists {
			val := m.GetProxyChoice().(*ReplaceSpecType_AnyProxy).AnyProxy
			vOpts := append(opts,
				db.WithValidateField("proxy_choice"),
				db.WithValidateField("any_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NetworkConnector:
		if fv, exists := v.FldValidators["proxy_choice.network_connector"]; exists {
			val := m.GetProxyChoice().(*ReplaceSpecType_NetworkConnector).NetworkConnector
			vOpts := append(opts,
				db.WithValidateField("proxy_choice"),
				db.WithValidateField("network_connector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ProxyLabelSelector:
		if fv, exists := v.FldValidators["proxy_choice.proxy_label_selector"]; exists {
			val := m.GetProxyChoice().(*ReplaceSpecType_ProxyLabelSelector).ProxyLabelSelector
			vOpts := append(opts,
				db.WithValidateField("proxy_choice"),
				db.WithValidateField("proxy_label_selector"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DrpHttpConnect:
		if fv, exists := v.FldValidators["proxy_choice.drp_http_connect"]; exists {
			val := m.GetProxyChoice().(*ReplaceSpecType_DrpHttpConnect).DrpHttpConnect
			vOpts := append(opts,
				db.WithValidateField("proxy_choice"),
				db.WithValidateField("drp_http_connect"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["rule_choice"]; exists {
		val := m.GetRuleChoice()
		vOpts := append(opts,
			db.WithValidateField("rule_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetRuleChoice().(type) {
	case *ReplaceSpecType_AllowAll:
		if fv, exists := v.FldValidators["rule_choice.allow_all"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_AllowAll).AllowAll
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AllowList:
		if fv, exists := v.FldValidators["rule_choice.allow_list"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_AllowList).AllowList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("allow_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DenyList:
		if fv, exists := v.FldValidators["rule_choice.deny_list"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_DenyList).DenyList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("deny_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_RuleList:
		if fv, exists := v.FldValidators["rule_choice.rule_list"]; exists {
			val := m.GetRuleChoice().(*ReplaceSpecType_RuleList).RuleList
			vOpts := append(opts,
				db.WithValidateField("rule_choice"),
				db.WithValidateField("rule_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["segment_policy"]; exists {

		vOpts := append(opts, db.WithValidateField("segment_policy"))
		if err := fv(ctx, m.GetSegmentPolicy(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhProxyChoice := v.ProxyChoiceValidationRuleHandler
	rulesProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhProxyChoice(rulesProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["proxy_choice"] = vFn

	vrhRuleChoice := v.RuleChoiceValidationRuleHandler
	rulesRuleChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhRuleChoice(rulesRuleChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.rule_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["rule_choice"] = vFn

	v.FldValidators["proxy_choice.network_connector"] = ves_io_schema_views.ObjectRefTypeValidator().Validate
	v.FldValidators["proxy_choice.proxy_label_selector"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	v.FldValidators["rule_choice.allow_list"] = ForwardProxySimpleRuleTypeValidator().Validate
	v.FldValidators["rule_choice.deny_list"] = ForwardProxySimpleRuleTypeValidator().Validate
	v.FldValidators["rule_choice.rule_list"] = ForwardProxyRuleListTypeValidator().Validate

	v.FldValidators["segment_policy"] = ves_io_schema_policy.SegmentPolicyTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *URLCategoryListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *URLCategoryListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *URLCategoryListType) DeepCopy() *URLCategoryListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &URLCategoryListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *URLCategoryListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *URLCategoryListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return URLCategoryListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateURLCategoryListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateURLCategoryListType) UrlCategoriesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepEnumItemRules(rules)
	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema_policy.URLCategory)
		return int32(i)
	}
	// ves_io_schema_policy.URLCategory_name is generated in .pb.go
	itemValFn, err := db.NewEnumValidationRuleHandler(itemRules, ves_io_schema_policy.URLCategory_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for url_categories")
	}
	itemsValidatorFn := func(ctx context.Context, elems []ves_io_schema_policy.URLCategory, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for url_categories")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]ves_io_schema_policy.URLCategory)
		if !ok {
			return fmt.Errorf("Repeated validation expected []ves_io_schema_policy.URLCategory, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated url_categories")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items url_categories")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateURLCategoryListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*URLCategoryListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *URLCategoryListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["url_categories"]; exists {
		vOpts := append(opts, db.WithValidateField("url_categories"))
		if err := fv(ctx, m.GetUrlCategories(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultURLCategoryListTypeValidator = func() *ValidateURLCategoryListType {
	v := &ValidateURLCategoryListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhUrlCategories := v.UrlCategoriesValidationRuleHandler
	rulesUrlCategories := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhUrlCategories(rulesUrlCategories)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for URLCategoryListType.url_categories: %s", err)
		panic(errMsg)
	}
	v.FldValidators["url_categories"] = vFn

	return v
}()

func URLCategoryListTypeValidator() db.Validator {
	return DefaultURLCategoryListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *URLListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *URLListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *URLListType) DeepCopy() *URLListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &URLListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *URLListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *URLListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return URLListTypeValidator().Validate(ctx, m, opts...)
}

type ValidateURLListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateURLListType) HttpListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for http_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*URLType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := URLTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for http_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*URLType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*URLType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated http_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items http_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateURLListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*URLListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *URLListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["http_list"]; exists {
		vOpts := append(opts, db.WithValidateField("http_list"))
		if err := fv(ctx, m.GetHttpList(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultURLListTypeValidator = func() *ValidateURLListType {
	v := &ValidateURLListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHttpList := v.HttpListValidationRuleHandler
	rulesHttpList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhHttpList(rulesHttpList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for URLListType.http_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["http_list"] = vFn

	return v
}()

func URLListTypeValidator() db.Validator {
	return DefaultURLListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *URLType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *URLType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *URLType) DeepCopy() *URLType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &URLType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *URLType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *URLType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return URLTypeValidator().Validate(ctx, m, opts...)
}

type ValidateURLType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateURLType) DomainChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for domain_choice")
	}
	return validatorFn, nil
}

func (v *ValidateURLType) DomainChoiceExactValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_ExactValue, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for exact_value")
	}
	return oValidatorFn_ExactValue, nil
}
func (v *ValidateURLType) DomainChoiceSuffixValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_SuffixValue, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for suffix_value")
	}
	return oValidatorFn_SuffixValue, nil
}
func (v *ValidateURLType) DomainChoiceRegexValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_RegexValue, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for regex_value")
	}
	return oValidatorFn_RegexValue, nil
}

func (v *ValidateURLType) PathChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for path_choice")
	}
	return validatorFn, nil
}

func (v *ValidateURLType) PathChoicePathExactValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_PathExactValue, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for path_exact_value")
	}
	return oValidatorFn_PathExactValue, nil
}
func (v *ValidateURLType) PathChoicePathPrefixValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_PathPrefixValue, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for path_prefix_value")
	}
	return oValidatorFn_PathPrefixValue, nil
}
func (v *ValidateURLType) PathChoicePathRegexValueValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_PathRegexValue, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for path_regex_value")
	}
	return oValidatorFn_PathRegexValue, nil
}

func (v *ValidateURLType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*URLType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *URLType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["domain_choice"]; exists {
		val := m.GetDomainChoice()
		vOpts := append(opts,
			db.WithValidateField("domain_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDomainChoice().(type) {
	case *URLType_ExactValue:
		if fv, exists := v.FldValidators["domain_choice.exact_value"]; exists {
			val := m.GetDomainChoice().(*URLType_ExactValue).ExactValue
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("exact_value"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *URLType_SuffixValue:
		if fv, exists := v.FldValidators["domain_choice.suffix_value"]; exists {
			val := m.GetDomainChoice().(*URLType_SuffixValue).SuffixValue
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("suffix_value"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *URLType_RegexValue:
		if fv, exists := v.FldValidators["domain_choice.regex_value"]; exists {
			val := m.GetDomainChoice().(*URLType_RegexValue).RegexValue
			vOpts := append(opts,
				db.WithValidateField("domain_choice"),
				db.WithValidateField("regex_value"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["path_choice"]; exists {
		val := m.GetPathChoice()
		vOpts := append(opts,
			db.WithValidateField("path_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetPathChoice().(type) {
	case *URLType_PathExactValue:
		if fv, exists := v.FldValidators["path_choice.path_exact_value"]; exists {
			val := m.GetPathChoice().(*URLType_PathExactValue).PathExactValue
			vOpts := append(opts,
				db.WithValidateField("path_choice"),
				db.WithValidateField("path_exact_value"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *URLType_PathPrefixValue:
		if fv, exists := v.FldValidators["path_choice.path_prefix_value"]; exists {
			val := m.GetPathChoice().(*URLType_PathPrefixValue).PathPrefixValue
			vOpts := append(opts,
				db.WithValidateField("path_choice"),
				db.WithValidateField("path_prefix_value"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *URLType_PathRegexValue:
		if fv, exists := v.FldValidators["path_choice.path_regex_value"]; exists {
			val := m.GetPathChoice().(*URLType_PathRegexValue).PathRegexValue
			vOpts := append(opts,
				db.WithValidateField("path_choice"),
				db.WithValidateField("path_regex_value"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *URLType_AnyPath:
		if fv, exists := v.FldValidators["path_choice.any_path"]; exists {
			val := m.GetPathChoice().(*URLType_AnyPath).AnyPath
			vOpts := append(opts,
				db.WithValidateField("path_choice"),
				db.WithValidateField("any_path"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultURLTypeValidator = func() *ValidateURLType {
	v := &ValidateURLType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDomainChoice := v.DomainChoiceValidationRuleHandler
	rulesDomainChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDomainChoice(rulesDomainChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for URLType.domain_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domain_choice"] = vFn

	vrhDomainChoiceExactValue := v.DomainChoiceExactValueValidationRuleHandler
	rulesDomainChoiceExactValue := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
		"ves.io.schema.rules.string.max_len":  "256",
		"ves.io.schema.rules.string.min_len":  "1",
	}
	vFnMap["domain_choice.exact_value"], err = vrhDomainChoiceExactValue(rulesDomainChoiceExactValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field URLType.domain_choice_exact_value: %s", err)
		panic(errMsg)
	}
	vrhDomainChoiceSuffixValue := v.DomainChoiceSuffixValueValidationRuleHandler
	rulesDomainChoiceSuffixValue := map[string]string{
		"ves.io.schema.rules.string.hostname": "true",
		"ves.io.schema.rules.string.max_len":  "256",
		"ves.io.schema.rules.string.min_len":  "1",
	}
	vFnMap["domain_choice.suffix_value"], err = vrhDomainChoiceSuffixValue(rulesDomainChoiceSuffixValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field URLType.domain_choice_suffix_value: %s", err)
		panic(errMsg)
	}
	vrhDomainChoiceRegexValue := v.DomainChoiceRegexValueValidationRuleHandler
	rulesDomainChoiceRegexValue := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
		"ves.io.schema.rules.string.min_len": "1",
		"ves.io.schema.rules.string.regex":   "true",
	}
	vFnMap["domain_choice.regex_value"], err = vrhDomainChoiceRegexValue(rulesDomainChoiceRegexValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field URLType.domain_choice_regex_value: %s", err)
		panic(errMsg)
	}

	v.FldValidators["domain_choice.exact_value"] = vFnMap["domain_choice.exact_value"]
	v.FldValidators["domain_choice.suffix_value"] = vFnMap["domain_choice.suffix_value"]
	v.FldValidators["domain_choice.regex_value"] = vFnMap["domain_choice.regex_value"]

	vrhPathChoice := v.PathChoiceValidationRuleHandler
	rulesPathChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhPathChoice(rulesPathChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for URLType.path_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path_choice"] = vFn

	vrhPathChoicePathExactValue := v.PathChoicePathExactValueValidationRuleHandler
	rulesPathChoicePathExactValue := map[string]string{
		"ves.io.schema.rules.string.http_path": "true",
		"ves.io.schema.rules.string.max_len":   "256",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFnMap["path_choice.path_exact_value"], err = vrhPathChoicePathExactValue(rulesPathChoicePathExactValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field URLType.path_choice_path_exact_value: %s", err)
		panic(errMsg)
	}
	vrhPathChoicePathPrefixValue := v.PathChoicePathPrefixValueValidationRuleHandler
	rulesPathChoicePathPrefixValue := map[string]string{
		"ves.io.schema.rules.string.http_path": "true",
		"ves.io.schema.rules.string.max_len":   "256",
		"ves.io.schema.rules.string.min_len":   "1",
	}
	vFnMap["path_choice.path_prefix_value"], err = vrhPathChoicePathPrefixValue(rulesPathChoicePathPrefixValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field URLType.path_choice_path_prefix_value: %s", err)
		panic(errMsg)
	}
	vrhPathChoicePathRegexValue := v.PathChoicePathRegexValueValidationRuleHandler
	rulesPathChoicePathRegexValue := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
		"ves.io.schema.rules.string.min_len": "1",
		"ves.io.schema.rules.string.regex":   "true",
	}
	vFnMap["path_choice.path_regex_value"], err = vrhPathChoicePathRegexValue(rulesPathChoicePathRegexValue)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field URLType.path_choice_path_regex_value: %s", err)
		panic(errMsg)
	}

	v.FldValidators["path_choice.path_exact_value"] = vFnMap["path_choice.path_exact_value"]
	v.FldValidators["path_choice.path_prefix_value"] = vFnMap["path_choice.path_prefix_value"]
	v.FldValidators["path_choice.path_regex_value"] = vFnMap["path_choice.path_regex_value"]

	return v
}()

func URLTypeValidator() db.Validator {
	return DefaultURLTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetProxyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ProxyChoice.(type) {
	case nil:
		o.ProxyChoice = nil

	case *CreateSpecType_AnyProxy:
		o.ProxyChoice = &GlobalSpecType_AnyProxy{AnyProxy: of.AnyProxy}

	case *CreateSpecType_DrpHttpConnect:
		o.ProxyChoice = &GlobalSpecType_DrpHttpConnect{DrpHttpConnect: of.DrpHttpConnect}

	case *CreateSpecType_NetworkConnector:
		o.ProxyChoice = &GlobalSpecType_NetworkConnector{NetworkConnector: of.NetworkConnector}

	case *CreateSpecType_ProxyLabelSelector:
		o.ProxyChoice = &GlobalSpecType_ProxyLabelSelector{ProxyLabelSelector: of.ProxyLabelSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetProxyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ProxyChoice.(type) {
	case nil:
		r.ProxyChoice = nil

	case *GlobalSpecType_AnyProxy:
		r.ProxyChoice = &CreateSpecType_AnyProxy{AnyProxy: of.AnyProxy}

	case *GlobalSpecType_DrpHttpConnect:
		r.ProxyChoice = &CreateSpecType_DrpHttpConnect{DrpHttpConnect: of.DrpHttpConnect}

	case *GlobalSpecType_NetworkConnector:
		r.ProxyChoice = &CreateSpecType_NetworkConnector{NetworkConnector: of.NetworkConnector}

	case *GlobalSpecType_ProxyLabelSelector:
		r.ProxyChoice = &CreateSpecType_ProxyLabelSelector{ProxyLabelSelector: of.ProxyLabelSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetRuleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RuleChoice.(type) {
	case nil:
		o.RuleChoice = nil

	case *CreateSpecType_AllowAll:
		o.RuleChoice = &GlobalSpecType_AllowAll{AllowAll: of.AllowAll}

	case *CreateSpecType_AllowList:
		o.RuleChoice = &GlobalSpecType_AllowList{AllowList: of.AllowList}

	case *CreateSpecType_DenyList:
		o.RuleChoice = &GlobalSpecType_DenyList{DenyList: of.DenyList}

	case *CreateSpecType_RuleList:
		o.RuleChoice = &GlobalSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetRuleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RuleChoice.(type) {
	case nil:
		r.RuleChoice = nil

	case *GlobalSpecType_AllowAll:
		r.RuleChoice = &CreateSpecType_AllowAll{AllowAll: of.AllowAll}

	case *GlobalSpecType_AllowList:
		r.RuleChoice = &CreateSpecType_AllowList{AllowList: of.AllowList}

	case *GlobalSpecType_DenyList:
		r.RuleChoice = &CreateSpecType_DenyList{DenyList: of.DenyList}

	case *GlobalSpecType_RuleList:
		r.RuleChoice = &CreateSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetProxyChoiceFromGlobalSpecType(f)
	m.GetRuleChoiceFromGlobalSpecType(f)
	m.SegmentPolicy = f.GetSegmentPolicy()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetProxyChoiceToGlobalSpecType(f)
	m1.SetRuleChoiceToGlobalSpecType(f)
	f.SegmentPolicy = m1.SegmentPolicy
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetProxyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ProxyChoice.(type) {
	case nil:
		o.ProxyChoice = nil

	case *GetSpecType_AnyProxy:
		o.ProxyChoice = &GlobalSpecType_AnyProxy{AnyProxy: of.AnyProxy}

	case *GetSpecType_DrpHttpConnect:
		o.ProxyChoice = &GlobalSpecType_DrpHttpConnect{DrpHttpConnect: of.DrpHttpConnect}

	case *GetSpecType_NetworkConnector:
		o.ProxyChoice = &GlobalSpecType_NetworkConnector{NetworkConnector: of.NetworkConnector}

	case *GetSpecType_ProxyLabelSelector:
		o.ProxyChoice = &GlobalSpecType_ProxyLabelSelector{ProxyLabelSelector: of.ProxyLabelSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetProxyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ProxyChoice.(type) {
	case nil:
		r.ProxyChoice = nil

	case *GlobalSpecType_AnyProxy:
		r.ProxyChoice = &GetSpecType_AnyProxy{AnyProxy: of.AnyProxy}

	case *GlobalSpecType_DrpHttpConnect:
		r.ProxyChoice = &GetSpecType_DrpHttpConnect{DrpHttpConnect: of.DrpHttpConnect}

	case *GlobalSpecType_NetworkConnector:
		r.ProxyChoice = &GetSpecType_NetworkConnector{NetworkConnector: of.NetworkConnector}

	case *GlobalSpecType_ProxyLabelSelector:
		r.ProxyChoice = &GetSpecType_ProxyLabelSelector{ProxyLabelSelector: of.ProxyLabelSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetRuleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RuleChoice.(type) {
	case nil:
		o.RuleChoice = nil

	case *GetSpecType_AllowAll:
		o.RuleChoice = &GlobalSpecType_AllowAll{AllowAll: of.AllowAll}

	case *GetSpecType_AllowList:
		o.RuleChoice = &GlobalSpecType_AllowList{AllowList: of.AllowList}

	case *GetSpecType_DenyList:
		o.RuleChoice = &GlobalSpecType_DenyList{DenyList: of.DenyList}

	case *GetSpecType_RuleList:
		o.RuleChoice = &GlobalSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetRuleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RuleChoice.(type) {
	case nil:
		r.RuleChoice = nil

	case *GlobalSpecType_AllowAll:
		r.RuleChoice = &GetSpecType_AllowAll{AllowAll: of.AllowAll}

	case *GlobalSpecType_AllowList:
		r.RuleChoice = &GetSpecType_AllowList{AllowList: of.AllowList}

	case *GlobalSpecType_DenyList:
		r.RuleChoice = &GetSpecType_DenyList{DenyList: of.DenyList}

	case *GlobalSpecType_RuleList:
		r.RuleChoice = &GetSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetProxyChoiceFromGlobalSpecType(f)
	m.GetRuleChoiceFromGlobalSpecType(f)
	m.SegmentPolicy = f.GetSegmentPolicy()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetProxyChoiceToGlobalSpecType(f)
	m1.SetRuleChoiceToGlobalSpecType(f)
	f.SegmentPolicy = m1.SegmentPolicy
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetProxyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ProxyChoice.(type) {
	case nil:
		o.ProxyChoice = nil

	case *ReplaceSpecType_AnyProxy:
		o.ProxyChoice = &GlobalSpecType_AnyProxy{AnyProxy: of.AnyProxy}

	case *ReplaceSpecType_DrpHttpConnect:
		o.ProxyChoice = &GlobalSpecType_DrpHttpConnect{DrpHttpConnect: of.DrpHttpConnect}

	case *ReplaceSpecType_NetworkConnector:
		o.ProxyChoice = &GlobalSpecType_NetworkConnector{NetworkConnector: of.NetworkConnector}

	case *ReplaceSpecType_ProxyLabelSelector:
		o.ProxyChoice = &GlobalSpecType_ProxyLabelSelector{ProxyLabelSelector: of.ProxyLabelSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetProxyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ProxyChoice.(type) {
	case nil:
		r.ProxyChoice = nil

	case *GlobalSpecType_AnyProxy:
		r.ProxyChoice = &ReplaceSpecType_AnyProxy{AnyProxy: of.AnyProxy}

	case *GlobalSpecType_DrpHttpConnect:
		r.ProxyChoice = &ReplaceSpecType_DrpHttpConnect{DrpHttpConnect: of.DrpHttpConnect}

	case *GlobalSpecType_NetworkConnector:
		r.ProxyChoice = &ReplaceSpecType_NetworkConnector{NetworkConnector: of.NetworkConnector}

	case *GlobalSpecType_ProxyLabelSelector:
		r.ProxyChoice = &ReplaceSpecType_ProxyLabelSelector{ProxyLabelSelector: of.ProxyLabelSelector}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetRuleChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.RuleChoice.(type) {
	case nil:
		o.RuleChoice = nil

	case *ReplaceSpecType_AllowAll:
		o.RuleChoice = &GlobalSpecType_AllowAll{AllowAll: of.AllowAll}

	case *ReplaceSpecType_AllowList:
		o.RuleChoice = &GlobalSpecType_AllowList{AllowList: of.AllowList}

	case *ReplaceSpecType_DenyList:
		o.RuleChoice = &GlobalSpecType_DenyList{DenyList: of.DenyList}

	case *ReplaceSpecType_RuleList:
		o.RuleChoice = &GlobalSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetRuleChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.RuleChoice.(type) {
	case nil:
		r.RuleChoice = nil

	case *GlobalSpecType_AllowAll:
		r.RuleChoice = &ReplaceSpecType_AllowAll{AllowAll: of.AllowAll}

	case *GlobalSpecType_AllowList:
		r.RuleChoice = &ReplaceSpecType_AllowList{AllowList: of.AllowList}

	case *GlobalSpecType_DenyList:
		r.RuleChoice = &ReplaceSpecType_DenyList{DenyList: of.DenyList}

	case *GlobalSpecType_RuleList:
		r.RuleChoice = &ReplaceSpecType_RuleList{RuleList: of.RuleList}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetProxyChoiceFromGlobalSpecType(f)
	m.GetRuleChoiceFromGlobalSpecType(f)
	m.SegmentPolicy = f.GetSegmentPolicy()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetProxyChoiceToGlobalSpecType(f)
	m1.SetRuleChoiceToGlobalSpecType(f)
	f.SegmentPolicy = m1.SegmentPolicy
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

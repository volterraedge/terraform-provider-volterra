// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/storage_types.proto

package views

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Custom Storage Class List
//
// x-displayName: "Custom Storage Class List"
// Add additional custom storage classes in kubernetes for this site
type StorageClassListType struct {
	// List of Storage Classes
	//
	// x-displayName: "List of Storage Classes"
	// List of custom storage classes
	StorageClasses []*StorageClassType `protobuf:"bytes,1,rep,name=storage_classes,json=storageClasses,proto3" json:"storage_classes,omitempty"`
}

func (m *StorageClassListType) Reset()      { *m = StorageClassListType{} }
func (*StorageClassListType) ProtoMessage() {}
func (*StorageClassListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc5274e25a7c8132, []int{0}
}
func (m *StorageClassListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageClassListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StorageClassListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageClassListType.Merge(m, src)
}
func (m *StorageClassListType) XXX_Size() int {
	return m.Size()
}
func (m *StorageClassListType) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageClassListType.DiscardUnknown(m)
}

var xxx_messageInfo_StorageClassListType proto.InternalMessageInfo

func (m *StorageClassListType) GetStorageClasses() []*StorageClassType {
	if m != nil {
		return m.StorageClasses
	}
	return nil
}

// Custom Storage Class
//
// x-displayName: "Custom Storage Class"
// Configuration of custom storage class
type StorageClassType struct {
	// Storage Class Name
	//
	// x-displayName: "Storage Class Name"
	// x-example: "premium"
	// x-required
	// Name of the storage class as it will appear in K8s.
	StorageClassName string `protobuf:"bytes,1,opt,name=storage_class_name,json=storageClassName,proto3" json:"storage_class_name,omitempty"`
	// Default Storage Class
	//
	// x-displayName: "Default Storage Class"
	// Make this storage class default storage class for the K8s cluster
	DefaultStorageClass bool `protobuf:"varint,2,opt,name=default_storage_class,json=defaultStorageClass,proto3" json:"default_storage_class,omitempty"`
	// Select Storage Class Configuration
	//
	// x-displayName: "Select Storage Class Configuration"
	// x-required
	// Select storage Class configuration
	//
	// Types that are valid to be assigned to DeviceChoice:
	//	*StorageClassType_OpenebsEnterprise
	DeviceChoice isStorageClassType_DeviceChoice `protobuf_oneof:"device_choice"`
}

func (m *StorageClassType) Reset()      { *m = StorageClassType{} }
func (*StorageClassType) ProtoMessage() {}
func (*StorageClassType) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc5274e25a7c8132, []int{1}
}
func (m *StorageClassType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageClassType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StorageClassType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageClassType.Merge(m, src)
}
func (m *StorageClassType) XXX_Size() int {
	return m.Size()
}
func (m *StorageClassType) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageClassType.DiscardUnknown(m)
}

var xxx_messageInfo_StorageClassType proto.InternalMessageInfo

type isStorageClassType_DeviceChoice interface {
	isStorageClassType_DeviceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type StorageClassType_OpenebsEnterprise struct {
	OpenebsEnterprise *StorageClassOpenebsEnterpriseType `protobuf:"bytes,6,opt,name=openebs_enterprise,json=openebsEnterprise,proto3,oneof" json:"openebs_enterprise,omitempty"`
}

func (*StorageClassType_OpenebsEnterprise) isStorageClassType_DeviceChoice() {}

func (m *StorageClassType) GetDeviceChoice() isStorageClassType_DeviceChoice {
	if m != nil {
		return m.DeviceChoice
	}
	return nil
}

func (m *StorageClassType) GetStorageClassName() string {
	if m != nil {
		return m.StorageClassName
	}
	return ""
}

func (m *StorageClassType) GetDefaultStorageClass() bool {
	if m != nil {
		return m.DefaultStorageClass
	}
	return false
}

func (m *StorageClassType) GetOpenebsEnterprise() *StorageClassOpenebsEnterpriseType {
	if x, ok := m.GetDeviceChoice().(*StorageClassType_OpenebsEnterprise); ok {
		return x.OpenebsEnterprise
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StorageClassType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StorageClassType_OpenebsEnterprise)(nil),
	}
}

// OpenEBS Enterprise
//
// x-displayName: "OpenEBS Enterprise"
// Storage class Device configuration for OpenEBS Enterprise
type StorageClassOpenebsEnterpriseType struct {
	// Replication
	//
	// x-displayName: "Replication"
	// x-example: "1"
	// Replication sets the replication factor of the PV, i.e. the number of data replicas to be maintained for it such as 1 or 3.
	Replication int32 `protobuf:"varint,2,opt,name=replication,proto3" json:"replication,omitempty"`
	// Storage Size
	//
	// x-displayName: "Storage Size"
	// x-example "10"
	// Size of each node of storage class. e.g If "Storage Class Replicas" will be set to 3 and "Storage Class Size" to 10GB.
	// Three 10GB disk will be created and assigned to nodes.
	StorageClassSize uint32 `protobuf:"varint,4,opt,name=storage_class_size,json=storageClassSize,proto3" json:"storage_class_size,omitempty"`
}

func (m *StorageClassOpenebsEnterpriseType) Reset()      { *m = StorageClassOpenebsEnterpriseType{} }
func (*StorageClassOpenebsEnterpriseType) ProtoMessage() {}
func (*StorageClassOpenebsEnterpriseType) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc5274e25a7c8132, []int{2}
}
func (m *StorageClassOpenebsEnterpriseType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageClassOpenebsEnterpriseType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StorageClassOpenebsEnterpriseType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageClassOpenebsEnterpriseType.Merge(m, src)
}
func (m *StorageClassOpenebsEnterpriseType) XXX_Size() int {
	return m.Size()
}
func (m *StorageClassOpenebsEnterpriseType) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageClassOpenebsEnterpriseType.DiscardUnknown(m)
}

var xxx_messageInfo_StorageClassOpenebsEnterpriseType proto.InternalMessageInfo

func (m *StorageClassOpenebsEnterpriseType) GetReplication() int32 {
	if m != nil {
		return m.Replication
	}
	return 0
}

func (m *StorageClassOpenebsEnterpriseType) GetStorageClassSize() uint32 {
	if m != nil {
		return m.StorageClassSize
	}
	return 0
}

func init() {
	proto.RegisterType((*StorageClassListType)(nil), "ves.io.schema.views.StorageClassListType")
	golang_proto.RegisterType((*StorageClassListType)(nil), "ves.io.schema.views.StorageClassListType")
	proto.RegisterType((*StorageClassType)(nil), "ves.io.schema.views.StorageClassType")
	golang_proto.RegisterType((*StorageClassType)(nil), "ves.io.schema.views.StorageClassType")
	proto.RegisterType((*StorageClassOpenebsEnterpriseType)(nil), "ves.io.schema.views.StorageClassOpenebsEnterpriseType")
	golang_proto.RegisterType((*StorageClassOpenebsEnterpriseType)(nil), "ves.io.schema.views.StorageClassOpenebsEnterpriseType")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/storage_types.proto", fileDescriptor_dc5274e25a7c8132)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/storage_types.proto", fileDescriptor_dc5274e25a7c8132)
}

var fileDescriptor_dc5274e25a7c8132 = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xde, 0x97, 0xa4, 0xb5, 0x4e, 0x69, 0x8d, 0x53, 0x85, 0x35, 0xca, 0xb8, 0x16, 0xd4, 0x20,
	0x76, 0x57, 0x53, 0x28, 0xd2, 0x93, 0x44, 0x05, 0x15, 0x51, 0x49, 0x3d, 0x79, 0x09, 0x93, 0xe4,
	0x75, 0x33, 0x98, 0xcd, 0x2c, 0x33, 0x93, 0x68, 0x7b, 0xea, 0xcd, 0x93, 0x20, 0xfe, 0x02, 0x8f,
	0xfe, 0x06, 0xf7, 0x52, 0x3c, 0x09, 0x5e, 0x72, 0x2c, 0x9e, 0xcc, 0xe6, 0xa2, 0xb7, 0x1e, 0x3d,
	0xca, 0x6e, 0x12, 0xd9, 0x44, 0xa1, 0xb7, 0xf7, 0xf2, 0x7d, 0xef, 0xfb, 0xe6, 0xcb, 0x7b, 0x4b,
	0xae, 0xf7, 0x51, 0xbb, 0x42, 0x7a, 0xba, 0xd9, 0xc6, 0x80, 0x7b, 0x7d, 0x81, 0xaf, 0xb5, 0xa7,
	0x8d, 0x54, 0xdc, 0xc7, 0xba, 0xd9, 0x0b, 0x51, 0xbb, 0xa1, 0x92, 0x46, 0xd2, 0xb5, 0x31, 0xd1,
	0x1d, 0x13, 0xdd, 0x94, 0x58, 0xda, 0xf0, 0x85, 0x69, 0xf7, 0x1a, 0x6e, 0x53, 0x06, 0x9e, 0x2f,
	0x7d, 0xe9, 0xa5, 0xdc, 0x46, 0x6f, 0x37, 0xed, 0xd2, 0x26, 0xad, 0xc6, 0x1a, 0xa5, 0x8b, 0xb3,
	0x66, 0x32, 0x34, 0x42, 0x76, 0x27, 0x06, 0xa5, 0x0b, 0xb3, 0x60, 0xc6, 0xbb, 0x74, 0x69, 0xee,
	0x91, 0xbc, 0x23, 0x5a, 0xdc, 0xe0, 0x04, 0x75, 0xfe, 0x8d, 0x50, 0x9f, 0x91, 0x5e, 0x3f, 0x00,
	0x72, 0x6e, 0x67, 0x9c, 0xe9, 0x5e, 0x87, 0x6b, 0xfd, 0x44, 0x68, 0xf3, 0x62, 0x2f, 0x44, 0xda,
	0x26, 0x67, 0xa6, 0x59, 0x9b, 0x09, 0x80, 0xda, 0x06, 0x27, 0x5f, 0x5e, 0xae, 0x5c, 0x75, 0xff,
	0x13, 0xd7, 0xcd, 0x6a, 0x24, 0xf3, 0x55, 0x7b, 0x10, 0x01, 0x7c, 0xfe, 0x75, 0x98, 0x5f, 0xf8,
	0x00, 0xb9, 0x62, 0x61, 0x5a, 0xd9, 0x50, 0x5b, 0xd5, 0x19, 0x2e, 0xea, 0xf5, 0x6f, 0x39, 0x52,
	0x9c, 0x1f, 0xa7, 0x77, 0x08, 0x9d, 0xb1, 0xaf, 0x77, 0x79, 0x80, 0x36, 0x38, 0x50, 0x3e, 0x5d,
	0x25, 0xa9, 0x98, 0xca, 0x7f, 0xcc, 0x41, 0xad, 0x98, 0x15, 0x7b, 0xca, 0x03, 0xa4, 0x15, 0x72,
	0xbe, 0x85, 0xbb, 0xbc, 0xd7, 0x31, 0xf5, 0x19, 0x05, 0x3b, 0xe7, 0x40, 0x79, 0xa9, 0xb6, 0x36,
	0x01, 0xb3, 0x8e, 0xd4, 0x27, 0x54, 0x86, 0xd8, 0xc5, 0x86, 0xae, 0x63, 0xd7, 0xa0, 0x0a, 0x95,
	0xd0, 0x68, 0x2f, 0x3a, 0x50, 0x5e, 0xae, 0x6c, 0x9d, 0x98, 0xf7, 0xd9, 0x78, 0xf4, 0xc1, 0xdf,
	0xc9, 0x24, 0xc1, 0x43, 0xab, 0x76, 0x56, 0xce, 0x03, 0xdb, 0xdb, 0x5f, 0x22, 0xd8, 0x22, 0x97,
	0x89, 0x3d, 0x99, 0x77, 0x52, 0x01, 0xe7, 0x39, 0x57, 0x3c, 0x40, 0x83, 0x4a, 0xd3, 0xfc, 0xed,
	0x9b, 0x15, 0xb2, 0x46, 0x56, 0xa7, 0x84, 0xfb, 0xd8, 0x17, 0x4d, 0xa4, 0xb0, 0x59, 0x65, 0x64,
	0xa5, 0x95, 0x36, 0xf5, 0x66, 0x5b, 0x26, 0xbf, 0xad, 0x1c, 0x46, 0xb0, 0x38, 0x88, 0x20, 0x1f,
	0x47, 0x00, 0x5b, 0x8f, 0x0b, 0x4b, 0xf9, 0x62, 0x61, 0xfd, 0x1d, 0x90, 0x2b, 0x27, 0x3e, 0x8e,
	0x5e, 0x23, 0xcb, 0x0a, 0xc3, 0x8e, 0x68, 0xf2, 0xe4, 0x18, 0xd2, 0xbf, 0x66, 0xa1, 0x5a, 0xf8,
	0x1d, 0x81, 0x55, 0xcb, 0x02, 0xf4, 0xee, 0xfc, 0x1a, 0xb4, 0xd8, 0x47, 0xbb, 0xe0, 0x40, 0x79,
	0xa5, 0x4a, 0xbf, 0x47, 0x90, 0xab, 0xdc, 0x4a, 0x96, 0x71, 0xea, 0xc6, 0x82, 0x7d, 0xb0, 0x54,
	0x9e, 0x5b, 0xc7, 0x8e, 0xd8, 0xc7, 0xea, 0x5b, 0x18, 0x0c, 0x99, 0x75, 0x34, 0x64, 0xd6, 0xf1,
	0x90, 0xc1, 0x41, 0xcc, 0xe0, 0x53, 0xcc, 0xe0, 0x6b, 0xcc, 0x60, 0x10, 0x33, 0x38, 0x8a, 0x19,
	0xfc, 0x88, 0x19, 0xfc, 0x8c, 0x99, 0x75, 0x1c, 0x33, 0x78, 0x3f, 0x62, 0xd6, 0xe1, 0x88, 0xc1,
	0x60, 0xc4, 0xac, 0xa3, 0x11, 0xb3, 0x5e, 0x3e, 0xf2, 0x65, 0xf8, 0xca, 0x77, 0xfb, 0xb2, 0x63,
	0x50, 0x29, 0xee, 0xf6, 0xb4, 0x97, 0x16, 0xbb, 0x52, 0x05, 0x1b, 0xa1, 0x92, 0x7d, 0xd1, 0x42,
	0xb5, 0x31, 0x85, 0xbd, 0xb0, 0xe1, 0x4b, 0x0f, 0xdf, 0x98, 0xc9, 0xc1, 0x67, 0x3f, 0xdd, 0xc6,
	0x62, 0x7a, 0xf1, 0x9b, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x0d, 0x9c, 0x13, 0xd8, 0x03,
	0x00, 0x00,
}

func (this *StorageClassListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageClassListType)
	if !ok {
		that2, ok := that.(StorageClassListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StorageClasses) != len(that1.StorageClasses) {
		return false
	}
	for i := range this.StorageClasses {
		if !this.StorageClasses[i].Equal(that1.StorageClasses[i]) {
			return false
		}
	}
	return true
}
func (this *StorageClassType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageClassType)
	if !ok {
		that2, ok := that.(StorageClassType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StorageClassName != that1.StorageClassName {
		return false
	}
	if this.DefaultStorageClass != that1.DefaultStorageClass {
		return false
	}
	if that1.DeviceChoice == nil {
		if this.DeviceChoice != nil {
			return false
		}
	} else if this.DeviceChoice == nil {
		return false
	} else if !this.DeviceChoice.Equal(that1.DeviceChoice) {
		return false
	}
	return true
}
func (this *StorageClassType_OpenebsEnterprise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageClassType_OpenebsEnterprise)
	if !ok {
		that2, ok := that.(StorageClassType_OpenebsEnterprise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OpenebsEnterprise.Equal(that1.OpenebsEnterprise) {
		return false
	}
	return true
}
func (this *StorageClassOpenebsEnterpriseType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageClassOpenebsEnterpriseType)
	if !ok {
		that2, ok := that.(StorageClassOpenebsEnterpriseType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Replication != that1.Replication {
		return false
	}
	if this.StorageClassSize != that1.StorageClassSize {
		return false
	}
	return true
}
func (this *StorageClassListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&views.StorageClassListType{")
	if this.StorageClasses != nil {
		s = append(s, "StorageClasses: "+fmt.Sprintf("%#v", this.StorageClasses)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StorageClassType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&views.StorageClassType{")
	s = append(s, "StorageClassName: "+fmt.Sprintf("%#v", this.StorageClassName)+",\n")
	s = append(s, "DefaultStorageClass: "+fmt.Sprintf("%#v", this.DefaultStorageClass)+",\n")
	if this.DeviceChoice != nil {
		s = append(s, "DeviceChoice: "+fmt.Sprintf("%#v", this.DeviceChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StorageClassType_OpenebsEnterprise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&views.StorageClassType_OpenebsEnterprise{` +
		`OpenebsEnterprise:` + fmt.Sprintf("%#v", this.OpenebsEnterprise) + `}`}, ", ")
	return s
}
func (this *StorageClassOpenebsEnterpriseType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&views.StorageClassOpenebsEnterpriseType{")
	s = append(s, "Replication: "+fmt.Sprintf("%#v", this.Replication)+",\n")
	s = append(s, "StorageClassSize: "+fmt.Sprintf("%#v", this.StorageClassSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStorageTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StorageClassListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageClassListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageClassListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StorageClasses) > 0 {
		for iNdEx := len(m.StorageClasses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StorageClasses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStorageTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StorageClassType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageClassType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageClassType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceChoice != nil {
		{
			size := m.DeviceChoice.Size()
			i -= size
			if _, err := m.DeviceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DefaultStorageClass {
		i--
		if m.DefaultStorageClass {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.StorageClassName) > 0 {
		i -= len(m.StorageClassName)
		copy(dAtA[i:], m.StorageClassName)
		i = encodeVarintStorageTypes(dAtA, i, uint64(len(m.StorageClassName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StorageClassType_OpenebsEnterprise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageClassType_OpenebsEnterprise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OpenebsEnterprise != nil {
		{
			size, err := m.OpenebsEnterprise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStorageTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *StorageClassOpenebsEnterpriseType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageClassOpenebsEnterpriseType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageClassOpenebsEnterpriseType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StorageClassSize != 0 {
		i = encodeVarintStorageTypes(dAtA, i, uint64(m.StorageClassSize))
		i--
		dAtA[i] = 0x20
	}
	if m.Replication != 0 {
		i = encodeVarintStorageTypes(dAtA, i, uint64(m.Replication))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func encodeVarintStorageTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovStorageTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StorageClassListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StorageClasses) > 0 {
		for _, e := range m.StorageClasses {
			l = e.Size()
			n += 1 + l + sovStorageTypes(uint64(l))
		}
	}
	return n
}

func (m *StorageClassType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StorageClassName)
	if l > 0 {
		n += 1 + l + sovStorageTypes(uint64(l))
	}
	if m.DefaultStorageClass {
		n += 2
	}
	if m.DeviceChoice != nil {
		n += m.DeviceChoice.Size()
	}
	return n
}

func (m *StorageClassType_OpenebsEnterprise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OpenebsEnterprise != nil {
		l = m.OpenebsEnterprise.Size()
		n += 1 + l + sovStorageTypes(uint64(l))
	}
	return n
}
func (m *StorageClassOpenebsEnterpriseType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Replication != 0 {
		n += 1 + sovStorageTypes(uint64(m.Replication))
	}
	if m.StorageClassSize != 0 {
		n += 1 + sovStorageTypes(uint64(m.StorageClassSize))
	}
	return n
}

func sovStorageTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStorageTypes(x uint64) (n int) {
	return sovStorageTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StorageClassListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStorageClasses := "[]*StorageClassType{"
	for _, f := range this.StorageClasses {
		repeatedStringForStorageClasses += strings.Replace(f.String(), "StorageClassType", "StorageClassType", 1) + ","
	}
	repeatedStringForStorageClasses += "}"
	s := strings.Join([]string{`&StorageClassListType{`,
		`StorageClasses:` + repeatedStringForStorageClasses + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageClassType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageClassType{`,
		`StorageClassName:` + fmt.Sprintf("%v", this.StorageClassName) + `,`,
		`DefaultStorageClass:` + fmt.Sprintf("%v", this.DefaultStorageClass) + `,`,
		`DeviceChoice:` + fmt.Sprintf("%v", this.DeviceChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageClassType_OpenebsEnterprise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageClassType_OpenebsEnterprise{`,
		`OpenebsEnterprise:` + strings.Replace(fmt.Sprintf("%v", this.OpenebsEnterprise), "StorageClassOpenebsEnterpriseType", "StorageClassOpenebsEnterpriseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageClassOpenebsEnterpriseType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageClassOpenebsEnterpriseType{`,
		`Replication:` + fmt.Sprintf("%v", this.Replication) + `,`,
		`StorageClassSize:` + fmt.Sprintf("%v", this.StorageClassSize) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStorageTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StorageClassListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageClassListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageClassListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageClasses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorageTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorageTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageClasses = append(m.StorageClasses, &StorageClassType{})
			if err := m.StorageClasses[len(m.StorageClasses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorageTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorageTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStorageTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageClassType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageClassType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageClassType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStorageClass", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultStorageClass = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenebsEnterprise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorageTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorageTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StorageClassOpenebsEnterpriseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DeviceChoice = &StorageClassType_OpenebsEnterprise{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorageTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorageTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStorageTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageClassOpenebsEnterpriseType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageClassOpenebsEnterpriseType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageClassOpenebsEnterpriseType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replication", wireType)
			}
			m.Replication = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Replication |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageClassSize", wireType)
			}
			m.StorageClassSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageClassSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorageTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorageTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStorageTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorageTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorageTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorageTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorageTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStorageTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStorageTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStorageTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStorageTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorageTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStorageTypes = fmt.Errorf("proto: unexpected end of group")
)

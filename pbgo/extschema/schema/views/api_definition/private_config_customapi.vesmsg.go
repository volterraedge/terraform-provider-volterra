// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package api_definition

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *UpdateAPIInventoryOpenAPISpecsReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UpdateAPIInventoryOpenAPISpecsReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UpdateAPIInventoryOpenAPISpecsReq) DeepCopy() *UpdateAPIInventoryOpenAPISpecsReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UpdateAPIInventoryOpenAPISpecsReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UpdateAPIInventoryOpenAPISpecsReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UpdateAPIInventoryOpenAPISpecsReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UpdateAPIInventoryOpenAPISpecsReqValidator().Validate(ctx, m, opts...)
}

type ValidateUpdateAPIInventoryOpenAPISpecsReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUpdateAPIInventoryOpenAPISpecsReq) ApiInventoryOpenapiSpecsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for api_inventory_openapi_specs")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_inventory_openapi_specs")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_inventory_openapi_specs")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_inventory_openapi_specs")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateUpdateAPIInventoryOpenAPISpecsReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UpdateAPIInventoryOpenAPISpecsReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UpdateAPIInventoryOpenAPISpecsReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_inventory_openapi_specs"]; exists {
		vOpts := append(opts, db.WithValidateField("api_inventory_openapi_specs"))
		if err := fv(ctx, m.GetApiInventoryOpenapiSpecs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUpdateAPIInventoryOpenAPISpecsReqValidator = func() *ValidateUpdateAPIInventoryOpenAPISpecsReq {
	v := &ValidateUpdateAPIInventoryOpenAPISpecsReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiInventoryOpenapiSpecs := v.ApiInventoryOpenapiSpecsValidationRuleHandler
	rulesApiInventoryOpenapiSpecs := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "10",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhApiInventoryOpenapiSpecs(rulesApiInventoryOpenapiSpecs)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for UpdateAPIInventoryOpenAPISpecsReq.api_inventory_openapi_specs: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_inventory_openapi_specs"] = vFn

	return v
}()

func UpdateAPIInventoryOpenAPISpecsReqValidator() db.Validator {
	return DefaultUpdateAPIInventoryOpenAPISpecsReqValidator
}

// augmented methods on protoc/std generated struct

func (m *UpdateAPIInventoryOpenAPISpecsResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UpdateAPIInventoryOpenAPISpecsResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UpdateAPIInventoryOpenAPISpecsResp) DeepCopy() *UpdateAPIInventoryOpenAPISpecsResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UpdateAPIInventoryOpenAPISpecsResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UpdateAPIInventoryOpenAPISpecsResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UpdateAPIInventoryOpenAPISpecsResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UpdateAPIInventoryOpenAPISpecsRespValidator().Validate(ctx, m, opts...)
}

type ValidateUpdateAPIInventoryOpenAPISpecsResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUpdateAPIInventoryOpenAPISpecsResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UpdateAPIInventoryOpenAPISpecsResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UpdateAPIInventoryOpenAPISpecsResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUpdateAPIInventoryOpenAPISpecsRespValidator = func() *ValidateUpdateAPIInventoryOpenAPISpecsResp {
	v := &ValidateUpdateAPIInventoryOpenAPISpecsResp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func UpdateAPIInventoryOpenAPISpecsRespValidator() db.Validator {
	return DefaultUpdateAPIInventoryOpenAPISpecsRespValidator
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/api_definition/public_config_customapi.proto

// api_definition object
//
// x-displayName: "API Definition"
// The api_definition construct provides a mechanism to create api_groups based on referred OpenAPI specs.
// Default api_groups, which are built automatically, include a group containing all the operations specified in swaggers; a group defining all possible requests for the given base urls.
// In addition, we create default api-groups by a predefined OpenAPI extension, for example  x-volterra-apigroup. http_loadbalancer can refer api_definition object and create access policy rules based on its api-groups.
//

package api_definition

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Get Referencing Loadbalancers Request
//
// x-displayName: "Get Referencing Loadbalancers"
// Request shape for Get Referencing Loadbalancers
type GetReferencingLoadbalancersReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// The namespace of the API Definition for the current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "name"
	// The name of the API Definition for the current request
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetReferencingLoadbalancersReq) Reset()      { *m = GetReferencingLoadbalancersReq{} }
func (*GetReferencingLoadbalancersReq) ProtoMessage() {}
func (*GetReferencingLoadbalancersReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4d35d1130750c6, []int{0}
}
func (m *GetReferencingLoadbalancersReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReferencingLoadbalancersReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReferencingLoadbalancersReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReferencingLoadbalancersReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReferencingLoadbalancersReq.Merge(m, src)
}
func (m *GetReferencingLoadbalancersReq) XXX_Size() int {
	return m.Size()
}
func (m *GetReferencingLoadbalancersReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReferencingLoadbalancersReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetReferencingLoadbalancersReq proto.InternalMessageInfo

func (m *GetReferencingLoadbalancersReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetReferencingLoadbalancersReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Get API Endpoints Schema Response
//
// x-displayName: "Get API Endpoints Schema Response"
// Response shape for Get API Endpoints With Newly Discovered Schema
type GetReferencingLoadbalancersResp struct {
	// HTTP Loadbalancers
	//
	// x-displayName: "HTTP Loadbalancers"
	// HTTP Loadbalancers referencing the API Definition.
	HttpLoadbalancers []*views.ObjectRefType `protobuf:"bytes,1,rep,name=http_loadbalancers,json=httpLoadbalancers,proto3" json:"http_loadbalancers,omitempty"`
}

func (m *GetReferencingLoadbalancersResp) Reset()      { *m = GetReferencingLoadbalancersResp{} }
func (*GetReferencingLoadbalancersResp) ProtoMessage() {}
func (*GetReferencingLoadbalancersResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4d35d1130750c6, []int{1}
}
func (m *GetReferencingLoadbalancersResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReferencingLoadbalancersResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReferencingLoadbalancersResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReferencingLoadbalancersResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReferencingLoadbalancersResp.Merge(m, src)
}
func (m *GetReferencingLoadbalancersResp) XXX_Size() int {
	return m.Size()
}
func (m *GetReferencingLoadbalancersResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReferencingLoadbalancersResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetReferencingLoadbalancersResp proto.InternalMessageInfo

func (m *GetReferencingLoadbalancersResp) GetHttpLoadbalancers() []*views.ObjectRefType {
	if m != nil {
		return m.HttpLoadbalancers
	}
	return nil
}

// API Inventory Request
//
// x-displayName: "API Inventory Request"
// Request shape for various API Inventory Requests
type APInventoryReq struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// The namespace of the API Definition for the current request
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "name"
	// The name of the API Definition for the current request
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// API Endpoints
	//
	// x-displayName: "API Endpoints"
	// x-required
	// The list of API endpoints for the API Inventory request.
	ApiEndpoints []*views.ApiOperation `protobuf:"bytes,3,rep,name=api_endpoints,json=apiEndpoints,proto3" json:"api_endpoints,omitempty"`
}

func (m *APInventoryReq) Reset()      { *m = APInventoryReq{} }
func (*APInventoryReq) ProtoMessage() {}
func (*APInventoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4d35d1130750c6, []int{2}
}
func (m *APInventoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APInventoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APInventoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APInventoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APInventoryReq.Merge(m, src)
}
func (m *APInventoryReq) XXX_Size() int {
	return m.Size()
}
func (m *APInventoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_APInventoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_APInventoryReq proto.InternalMessageInfo

func (m *APInventoryReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *APInventoryReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *APInventoryReq) GetApiEndpoints() []*views.ApiOperation {
	if m != nil {
		return m.ApiEndpoints
	}
	return nil
}

// Update API Endpoints Schema Response
//
// x-displayName: "Update API Endpoints Schema Response"
// Response shape for Update API Endpoints With Newly Discovered Schema
type APInventoryResp struct {
	// Updated API Endpoints
	//
	// x-displayName: "Updated API Endpoints"
	// The list of API endpoints which were successfully proceeded by the API Inventory request.
	UpdatedApiEndpoints []*views.ApiOperation `protobuf:"bytes,1,rep,name=updated_api_endpoints,json=updatedApiEndpoints,proto3" json:"updated_api_endpoints,omitempty"`
}

func (m *APInventoryResp) Reset()      { *m = APInventoryResp{} }
func (*APInventoryResp) ProtoMessage() {}
func (*APInventoryResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4d35d1130750c6, []int{3}
}
func (m *APInventoryResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APInventoryResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APInventoryResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APInventoryResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APInventoryResp.Merge(m, src)
}
func (m *APInventoryResp) XXX_Size() int {
	return m.Size()
}
func (m *APInventoryResp) XXX_DiscardUnknown() {
	xxx_messageInfo_APInventoryResp.DiscardUnknown(m)
}

var xxx_messageInfo_APInventoryResp proto.InternalMessageInfo

func (m *APInventoryResp) GetUpdatedApiEndpoints() []*views.ApiOperation {
	if m != nil {
		return m.UpdatedApiEndpoints
	}
	return nil
}

func init() {
	proto.RegisterType((*GetReferencingLoadbalancersReq)(nil), "ves.io.schema.views.api_definition.GetReferencingLoadbalancersReq")
	golang_proto.RegisterType((*GetReferencingLoadbalancersReq)(nil), "ves.io.schema.views.api_definition.GetReferencingLoadbalancersReq")
	proto.RegisterType((*GetReferencingLoadbalancersResp)(nil), "ves.io.schema.views.api_definition.GetReferencingLoadbalancersResp")
	golang_proto.RegisterType((*GetReferencingLoadbalancersResp)(nil), "ves.io.schema.views.api_definition.GetReferencingLoadbalancersResp")
	proto.RegisterType((*APInventoryReq)(nil), "ves.io.schema.views.api_definition.APInventoryReq")
	golang_proto.RegisterType((*APInventoryReq)(nil), "ves.io.schema.views.api_definition.APInventoryReq")
	proto.RegisterType((*APInventoryResp)(nil), "ves.io.schema.views.api_definition.APInventoryResp")
	golang_proto.RegisterType((*APInventoryResp)(nil), "ves.io.schema.views.api_definition.APInventoryResp")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/api_definition/public_config_customapi.proto", fileDescriptor_0b4d35d1130750c6)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/api_definition/public_config_customapi.proto", fileDescriptor_0b4d35d1130750c6)
}

var fileDescriptor_0b4d35d1130750c6 = []byte{
	// 835 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x96, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x3d, 0x9b, 0x0a, 0xe8, 0x36, 0x94, 0x76, 0x21, 0x92, 0x65, 0xa2, 0x6d, 0xd8, 0x53,
	0x41, 0xec, 0xae, 0x94, 0xf2, 0x43, 0xe2, 0x84, 0x13, 0x95, 0xfe, 0xa0, 0xa5, 0xd6, 0x2a, 0x95,
	0x10, 0x97, 0xd5, 0x78, 0xf7, 0x79, 0x3d, 0xc4, 0x3b, 0x33, 0xcc, 0xcc, 0x6e, 0x62, 0xa1, 0x48,
	0x28, 0x07, 0x04, 0x3d, 0x54, 0x50, 0x2e, 0xfc, 0x09, 0x88, 0xbf, 0x00, 0x11, 0x0e, 0xb9, 0xd1,
	0x13, 0x8a, 0xe0, 0xd2, 0x23, 0x59, 0x73, 0x80, 0x5b, 0xff, 0x04, 0xb4, 0x63, 0x3b, 0xd8, 0x8e,
	0x09, 0xc6, 0x91, 0xda, 0xdb, 0x8c, 0xbf, 0x33, 0xdf, 0x79, 0xef, 0x33, 0xef, 0xad, 0xc7, 0x7c,
	0x37, 0x07, 0xe9, 0x11, 0xe6, 0xcb, 0xa8, 0x0d, 0x29, 0xf6, 0x73, 0x02, 0x5b, 0xd2, 0xc7, 0x9c,
	0x84, 0x31, 0xb4, 0x08, 0x25, 0x8a, 0x30, 0xea, 0xf3, 0xac, 0xd9, 0x21, 0x51, 0x18, 0x31, 0xda,
	0x22, 0x49, 0x18, 0x65, 0x52, 0xb1, 0x14, 0x73, 0xe2, 0x71, 0xc1, 0x14, 0xb3, 0x9c, 0xbe, 0x83,
	0xd7, 0x77, 0xf0, 0xb4, 0x83, 0x37, 0xee, 0x50, 0x73, 0x13, 0xa2, 0xda, 0x59, 0xd3, 0x8b, 0x58,
	0xea, 0x27, 0x2c, 0x61, 0xbe, 0xde, 0xda, 0xcc, 0x5a, 0x7a, 0xa6, 0x27, 0x7a, 0xd4, 0xb7, 0xac,
	0x2d, 0x27, 0x8c, 0x25, 0x1d, 0x28, 0xe3, 0xf0, 0x31, 0xa5, 0x4c, 0xe1, 0xd2, 0x45, 0x0e, 0xd4,
	0x97, 0x07, 0xea, 0x91, 0x07, 0xa4, 0x5c, 0x75, 0x87, 0xe2, 0x78, 0x3e, 0x8c, 0x8f, 0xee, 0x5c,
	0x9e, 0x48, 0x16, 0x77, 0x48, 0x8c, 0x15, 0x0c, 0x54, 0x67, 0x42, 0x05, 0x09, 0x34, 0x9f, 0x70,
	0xf0, 0x66, 0xc0, 0xa5, 0xba, 0x1c, 0x86, 0xeb, 0x2f, 0x4d, 0x5b, 0x3f, 0xb2, 0xc0, 0x09, 0x4c,
	0xfb, 0x1a, 0xa8, 0x00, 0x5a, 0x20, 0x80, 0x46, 0x84, 0x26, 0xb7, 0x18, 0x8e, 0x9b, 0xb8, 0x83,
	0x69, 0x04, 0x42, 0x06, 0xf0, 0x89, 0xb5, 0x6c, 0x9e, 0xa5, 0x38, 0x05, 0xc9, 0x71, 0x04, 0x55,
	0xb4, 0x82, 0x2e, 0x9f, 0x0d, 0xfe, 0xf9, 0xc1, 0xb2, 0xcc, 0x33, 0xe5, 0xa4, 0x6a, 0x68, 0x41,
	0x8f, 0x9d, 0x7b, 0xc8, 0xbc, 0x74, 0xa2, 0xa9, 0xe4, 0x56, 0x62, 0x5a, 0x6d, 0xa5, 0x78, 0xd8,
	0x19, 0x55, 0xaa, 0x68, 0x65, 0xe1, 0xf2, 0xb9, 0x55, 0xc7, 0x9b, 0x76, 0xa5, 0x77, 0x9a, 0x1f,
	0x43, 0x54, 0x9a, 0x6e, 0x74, 0x39, 0xac, 0xbd, 0xf4, 0xfd, 0xce, 0xc5, 0x63, 0x06, 0x81, 0xfe,
	0x69, 0xec, 0x30, 0xe7, 0x5b, 0x64, 0x9e, 0xaf, 0x37, 0x6e, 0xd0, 0x1c, 0xa8, 0x62, 0xa2, 0x3b,
	0x57, 0x46, 0xd6, 0x86, 0xf9, 0x7c, 0x09, 0x19, 0x68, 0xcc, 0x19, 0xa1, 0x4a, 0x56, 0x17, 0x74,
	0xa0, 0xaf, 0x4c, 0x0d, 0xb4, 0xce, 0xc9, 0x1d, 0x0e, 0x42, 0xd7, 0xcc, 0xda, 0xe2, 0x8f, 0x7f,
	0xed, 0x2f, 0x3c, 0xfb, 0x00, 0x9d, 0x79, 0x0e, 0x5d, 0x88, 0x83, 0x45, 0xcc, 0xc9, 0xd5, 0xa1,
	0x89, 0xd3, 0x36, 0x5f, 0x18, 0x8b, 0x4c, 0x72, 0xeb, 0xae, 0xb9, 0x94, 0xf1, 0xb2, 0x26, 0xe2,
	0x70, 0xfc, 0x40, 0x34, 0xe3, 0x81, 0xc1, 0x8b, 0x83, 0xfd, 0xf5, 0x91, 0x93, 0x56, 0x7f, 0x3a,
	0x67, 0x2e, 0x35, 0x74, 0x17, 0xad, 0xeb, 0x26, 0x5a, 0xd7, 0x3d, 0x54, 0x6f, 0xdc, 0xb0, 0xf6,
	0x8c, 0xc9, 0xbb, 0xba, 0x3e, 0x89, 0xd0, 0x5a, 0xf3, 0xfe, 0xbb, 0xc5, 0xbc, 0x93, 0xab, 0xa8,
	0xb6, 0x7e, 0x6a, 0x0f, 0xc9, 0x9d, 0xfb, 0xe8, 0xe1, 0x0f, 0x06, 0x2a, 0x7e, 0xae, 0xbe, 0xd5,
	0x7a, 0x73, 0x3b, 0x72, 0xb7, 0x30, 0xe6, 0x2e, 0x8e, 0xf3, 0x72, 0x45, 0xec, 0xa6, 0x8c, 0x12,
	0xc5, 0xc4, 0xeb, 0x2b, 0x39, 0x48, 0x97, 0x30, 0x97, 0x0b, 0xb6, 0xdd, 0x75, 0x25, 0x44, 0x99,
	0x20, 0xaa, 0xeb, 0x0a, 0xc0, 0xf1, 0xee, 0x6f, 0x7f, 0x7c, 0x63, 0xdc, 0xb4, 0xae, 0x0f, 0xbe,
	0x28, 0xfe, 0xd1, 0xa5, 0x4b, 0xff, 0xd3, 0xa3, 0xf1, 0xce, 0x44, 0x3f, 0x0d, 0xb4, 0x1d, 0xff,
	0x78, 0xbd, 0x5a, 0x5f, 0x1a, 0xe6, 0xc5, 0xdb, 0x2c, 0x87, 0x0d, 0x36, 0x72, 0x91, 0xd6, 0xea,
	0x2c, 0xb9, 0x8e, 0xd7, 0x64, 0xed, 0xca, 0xff, 0xde, 0x23, 0xb9, 0x73, 0xaf, 0x64, 0xf1, 0xc6,
	0x14, 0x16, 0x99, 0x84, 0x7f, 0x05, 0xb1, 0x25, 0x88, 0x02, 0x4d, 0xe2, 0x96, 0x73, 0x6d, 0x3e,
	0x12, 0x29, 0xcb, 0x21, 0x54, 0x2c, 0x24, 0xc3, 0x68, 0xde, 0x41, 0xaf, 0x59, 0x5f, 0x1b, 0xe6,
	0x52, 0x00, 0xa5, 0xf4, 0x9e, 0xd0, 0xb5, 0xf5, 0xe4, 0x79, 0xdc, 0x3f, 0x1d, 0x8f, 0x86, 0xf3,
	0xfe, 0x7c, 0x3c, 0x84, 0x4e, 0x3b, 0x6c, 0x09, 0x96, 0x8e, 0x33, 0xd9, 0x35, 0xcc, 0xc5, 0xdb,
	0x58, 0x6c, 0xd6, 0xe5, 0x07, 0x8c, 0x96, 0xed, 0xf6, 0xc4, 0x50, 0x7c, 0x71, 0x3a, 0x14, 0x37,
	0x9d, 0xab, 0x73, 0x96, 0x06, 0x16, 0x9b, 0x21, 0x96, 0x21, 0x65, 0xb4, 0xfc, 0x82, 0x95, 0x10,
	0x3e, 0x37, 0xcc, 0xf3, 0x77, 0x69, 0xfa, 0x54, 0x30, 0x3c, 0xad, 0x0e, 0xc9, 0xe8, 0x71, 0x10,
	0xb5, 0xb7, 0xf7, 0xf7, 0xd0, 0xc2, 0xaf, 0x7b, 0xe8, 0xd5, 0x19, 0x12, 0xe9, 0xff, 0xdb, 0xed,
	0xfe, 0x52, 0x35, 0x2e, 0xa0, 0xb5, 0x07, 0xe8, 0xe0, 0xd0, 0xae, 0x3c, 0x3a, 0xb4, 0x2b, 0x8f,
	0x0f, 0x6d, 0xf4, 0x59, 0x61, 0xa3, 0xef, 0x0a, 0x1b, 0x3d, 0x2c, 0x6c, 0x74, 0x50, 0xd8, 0xe8,
	0xf7, 0xc2, 0x46, 0x7f, 0x16, 0x76, 0xe5, 0x71, 0x61, 0xa3, 0xaf, 0x7a, 0x76, 0x65, 0xbf, 0x67,
	0xa3, 0x83, 0x9e, 0x5d, 0x79, 0xd4, 0xb3, 0x2b, 0x1f, 0x7d, 0x98, 0x30, 0xbe, 0x99, 0x78, 0x39,
	0xeb, 0x28, 0x10, 0x02, 0x7b, 0x99, 0xf4, 0xf5, 0xa0, 0xc5, 0x44, 0x5a, 0xe6, 0x9d, 0x93, 0x18,
	0x84, 0x3b, 0x94, 0x7d, 0xde, 0x4c, 0x98, 0x0f, 0xdb, 0x6a, 0xf0, 0x5e, 0x38, 0xe1, 0x99, 0xd1,
	0x7c, 0x46, 0x3f, 0x20, 0xae, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x86, 0xee, 0xf5, 0xc2,
	0x09, 0x00, 0x00,
}

func (this *GetReferencingLoadbalancersReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReferencingLoadbalancersReq)
	if !ok {
		that2, ok := that.(GetReferencingLoadbalancersReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetReferencingLoadbalancersResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReferencingLoadbalancersResp)
	if !ok {
		that2, ok := that.(GetReferencingLoadbalancersResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HttpLoadbalancers) != len(that1.HttpLoadbalancers) {
		return false
	}
	for i := range this.HttpLoadbalancers {
		if !this.HttpLoadbalancers[i].Equal(that1.HttpLoadbalancers[i]) {
			return false
		}
	}
	return true
}
func (this *APInventoryReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APInventoryReq)
	if !ok {
		that2, ok := that.(APInventoryReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.ApiEndpoints) != len(that1.ApiEndpoints) {
		return false
	}
	for i := range this.ApiEndpoints {
		if !this.ApiEndpoints[i].Equal(that1.ApiEndpoints[i]) {
			return false
		}
	}
	return true
}
func (this *APInventoryResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APInventoryResp)
	if !ok {
		that2, ok := that.(APInventoryResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UpdatedApiEndpoints) != len(that1.UpdatedApiEndpoints) {
		return false
	}
	for i := range this.UpdatedApiEndpoints {
		if !this.UpdatedApiEndpoints[i].Equal(that1.UpdatedApiEndpoints[i]) {
			return false
		}
	}
	return true
}
func (this *GetReferencingLoadbalancersReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api_definition.GetReferencingLoadbalancersReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReferencingLoadbalancersResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api_definition.GetReferencingLoadbalancersResp{")
	if this.HttpLoadbalancers != nil {
		s = append(s, "HttpLoadbalancers: "+fmt.Sprintf("%#v", this.HttpLoadbalancers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APInventoryReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api_definition.APInventoryReq{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.ApiEndpoints != nil {
		s = append(s, "ApiEndpoints: "+fmt.Sprintf("%#v", this.ApiEndpoints)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APInventoryResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api_definition.APInventoryResp{")
	if this.UpdatedApiEndpoints != nil {
		s = append(s, "UpdatedApiEndpoints: "+fmt.Sprintf("%#v", this.UpdatedApiEndpoints)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicConfigCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublicConfigCustomAPIClient is the client API for PublicConfigCustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicConfigCustomAPIClient interface {
	// Get Referencing HTTP Loadbalancers
	//
	// x-displayName: "Get Referencing HTTP Loadbalancers"
	// List Loadbalancer objects referenced by the API Definition (backrefrences).
	GetReferencingHttpLoadbalancers(ctx context.Context, in *GetReferencingLoadbalancersReq, opts ...grpc.CallOption) (*GetReferencingLoadbalancersResp, error)
	// Move To API Inventory
	//
	// x-displayName: "Move To API Inventory"
	// Update the API Definition's include list with the provided API endpoints.
	MoveToAPInventory(ctx context.Context, in *APInventoryReq, opts ...grpc.CallOption) (*APInventoryResp, error)
	// Remove From API Inventory
	//
	// x-displayName: "Remove From API Inventory"
	// Update the API Definition's exclude list with the provided API endpoints.
	RemoveFromAPInventory(ctx context.Context, in *APInventoryReq, opts ...grpc.CallOption) (*APInventoryResp, error)
	// Mark As Non-API
	//
	// x-displayName: "Mark As Non-API"
	// Update the API Definition's non-API list with the provided API endpoints.
	MarkAsNonAPI(ctx context.Context, in *APInventoryReq, opts ...grpc.CallOption) (*APInventoryResp, error)
	// Unmark As Non-API
	//
	// x-displayName: "Unmark As Non-API"
	// Delete the provided API endpoints from the API Definition's non-API list.
	UnmarkAsNonAPI(ctx context.Context, in *APInventoryReq, opts ...grpc.CallOption) (*APInventoryResp, error)
}

type publicConfigCustomAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicConfigCustomAPIClient(cc *grpc.ClientConn) PublicConfigCustomAPIClient {
	return &publicConfigCustomAPIClient{cc}
}

func (c *publicConfigCustomAPIClient) GetReferencingHttpLoadbalancers(ctx context.Context, in *GetReferencingLoadbalancersReq, opts ...grpc.CallOption) (*GetReferencingLoadbalancersResp, error) {
	out := new(GetReferencingLoadbalancersResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.api_definition.PublicConfigCustomAPI/GetReferencingHttpLoadbalancers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicConfigCustomAPIClient) MoveToAPInventory(ctx context.Context, in *APInventoryReq, opts ...grpc.CallOption) (*APInventoryResp, error) {
	out := new(APInventoryResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.api_definition.PublicConfigCustomAPI/MoveToAPInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicConfigCustomAPIClient) RemoveFromAPInventory(ctx context.Context, in *APInventoryReq, opts ...grpc.CallOption) (*APInventoryResp, error) {
	out := new(APInventoryResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.api_definition.PublicConfigCustomAPI/RemoveFromAPInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicConfigCustomAPIClient) MarkAsNonAPI(ctx context.Context, in *APInventoryReq, opts ...grpc.CallOption) (*APInventoryResp, error) {
	out := new(APInventoryResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.api_definition.PublicConfigCustomAPI/MarkAsNonAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicConfigCustomAPIClient) UnmarkAsNonAPI(ctx context.Context, in *APInventoryReq, opts ...grpc.CallOption) (*APInventoryResp, error) {
	out := new(APInventoryResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.api_definition.PublicConfigCustomAPI/UnmarkAsNonAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicConfigCustomAPIServer is the server API for PublicConfigCustomAPI service.
type PublicConfigCustomAPIServer interface {
	// Get Referencing HTTP Loadbalancers
	//
	// x-displayName: "Get Referencing HTTP Loadbalancers"
	// List Loadbalancer objects referenced by the API Definition (backrefrences).
	GetReferencingHttpLoadbalancers(context.Context, *GetReferencingLoadbalancersReq) (*GetReferencingLoadbalancersResp, error)
	// Move To API Inventory
	//
	// x-displayName: "Move To API Inventory"
	// Update the API Definition's include list with the provided API endpoints.
	MoveToAPInventory(context.Context, *APInventoryReq) (*APInventoryResp, error)
	// Remove From API Inventory
	//
	// x-displayName: "Remove From API Inventory"
	// Update the API Definition's exclude list with the provided API endpoints.
	RemoveFromAPInventory(context.Context, *APInventoryReq) (*APInventoryResp, error)
	// Mark As Non-API
	//
	// x-displayName: "Mark As Non-API"
	// Update the API Definition's non-API list with the provided API endpoints.
	MarkAsNonAPI(context.Context, *APInventoryReq) (*APInventoryResp, error)
	// Unmark As Non-API
	//
	// x-displayName: "Unmark As Non-API"
	// Delete the provided API endpoints from the API Definition's non-API list.
	UnmarkAsNonAPI(context.Context, *APInventoryReq) (*APInventoryResp, error)
}

// UnimplementedPublicConfigCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedPublicConfigCustomAPIServer struct {
}

func (*UnimplementedPublicConfigCustomAPIServer) GetReferencingHttpLoadbalancers(ctx context.Context, req *GetReferencingLoadbalancersReq) (*GetReferencingLoadbalancersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferencingHttpLoadbalancers not implemented")
}
func (*UnimplementedPublicConfigCustomAPIServer) MoveToAPInventory(ctx context.Context, req *APInventoryReq) (*APInventoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveToAPInventory not implemented")
}
func (*UnimplementedPublicConfigCustomAPIServer) RemoveFromAPInventory(ctx context.Context, req *APInventoryReq) (*APInventoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromAPInventory not implemented")
}
func (*UnimplementedPublicConfigCustomAPIServer) MarkAsNonAPI(ctx context.Context, req *APInventoryReq) (*APInventoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsNonAPI not implemented")
}
func (*UnimplementedPublicConfigCustomAPIServer) UnmarkAsNonAPI(ctx context.Context, req *APInventoryReq) (*APInventoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmarkAsNonAPI not implemented")
}

func RegisterPublicConfigCustomAPIServer(s *grpc.Server, srv PublicConfigCustomAPIServer) {
	s.RegisterService(&_PublicConfigCustomAPI_serviceDesc, srv)
}

func _PublicConfigCustomAPI_GetReferencingHttpLoadbalancers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferencingLoadbalancersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicConfigCustomAPIServer).GetReferencingHttpLoadbalancers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.api_definition.PublicConfigCustomAPI/GetReferencingHttpLoadbalancers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicConfigCustomAPIServer).GetReferencingHttpLoadbalancers(ctx, req.(*GetReferencingLoadbalancersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicConfigCustomAPI_MoveToAPInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APInventoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicConfigCustomAPIServer).MoveToAPInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.api_definition.PublicConfigCustomAPI/MoveToAPInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicConfigCustomAPIServer).MoveToAPInventory(ctx, req.(*APInventoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicConfigCustomAPI_RemoveFromAPInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APInventoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicConfigCustomAPIServer).RemoveFromAPInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.api_definition.PublicConfigCustomAPI/RemoveFromAPInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicConfigCustomAPIServer).RemoveFromAPInventory(ctx, req.(*APInventoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicConfigCustomAPI_MarkAsNonAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APInventoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicConfigCustomAPIServer).MarkAsNonAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.api_definition.PublicConfigCustomAPI/MarkAsNonAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicConfigCustomAPIServer).MarkAsNonAPI(ctx, req.(*APInventoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicConfigCustomAPI_UnmarkAsNonAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APInventoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicConfigCustomAPIServer).UnmarkAsNonAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.api_definition.PublicConfigCustomAPI/UnmarkAsNonAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicConfigCustomAPIServer).UnmarkAsNonAPI(ctx, req.(*APInventoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicConfigCustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.api_definition.PublicConfigCustomAPI",
	HandlerType: (*PublicConfigCustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReferencingHttpLoadbalancers",
			Handler:    _PublicConfigCustomAPI_GetReferencingHttpLoadbalancers_Handler,
		},
		{
			MethodName: "MoveToAPInventory",
			Handler:    _PublicConfigCustomAPI_MoveToAPInventory_Handler,
		},
		{
			MethodName: "RemoveFromAPInventory",
			Handler:    _PublicConfigCustomAPI_RemoveFromAPInventory_Handler,
		},
		{
			MethodName: "MarkAsNonAPI",
			Handler:    _PublicConfigCustomAPI_MarkAsNonAPI_Handler,
		},
		{
			MethodName: "UnmarkAsNonAPI",
			Handler:    _PublicConfigCustomAPI_UnmarkAsNonAPI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/api_definition/public_config_customapi.proto",
}

func (m *GetReferencingLoadbalancersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReferencingLoadbalancersReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReferencingLoadbalancersReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetReferencingLoadbalancersResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReferencingLoadbalancersResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReferencingLoadbalancersResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HttpLoadbalancers) > 0 {
		for iNdEx := len(m.HttpLoadbalancers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HttpLoadbalancers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *APInventoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APInventoryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APInventoryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiEndpoints) > 0 {
		for iNdEx := len(m.ApiEndpoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiEndpoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *APInventoryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APInventoryResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APInventoryResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdatedApiEndpoints) > 0 {
		for iNdEx := len(m.UpdatedApiEndpoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdatedApiEndpoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicConfigCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicConfigCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetReferencingLoadbalancersReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicConfigCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicConfigCustomapi(uint64(l))
	}
	return n
}

func (m *GetReferencingLoadbalancersResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HttpLoadbalancers) > 0 {
		for _, e := range m.HttpLoadbalancers {
			l = e.Size()
			n += 1 + l + sovPublicConfigCustomapi(uint64(l))
		}
	}
	return n
}

func (m *APInventoryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicConfigCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicConfigCustomapi(uint64(l))
	}
	if len(m.ApiEndpoints) > 0 {
		for _, e := range m.ApiEndpoints {
			l = e.Size()
			n += 1 + l + sovPublicConfigCustomapi(uint64(l))
		}
	}
	return n
}

func (m *APInventoryResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UpdatedApiEndpoints) > 0 {
		for _, e := range m.UpdatedApiEndpoints {
			l = e.Size()
			n += 1 + l + sovPublicConfigCustomapi(uint64(l))
		}
	}
	return n
}

func sovPublicConfigCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicConfigCustomapi(x uint64) (n int) {
	return sovPublicConfigCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetReferencingLoadbalancersReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetReferencingLoadbalancersReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetReferencingLoadbalancersResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHttpLoadbalancers := "[]*ObjectRefType{"
	for _, f := range this.HttpLoadbalancers {
		repeatedStringForHttpLoadbalancers += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForHttpLoadbalancers += "}"
	s := strings.Join([]string{`&GetReferencingLoadbalancersResp{`,
		`HttpLoadbalancers:` + repeatedStringForHttpLoadbalancers + `,`,
		`}`,
	}, "")
	return s
}
func (this *APInventoryReq) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApiEndpoints := "[]*ApiOperation{"
	for _, f := range this.ApiEndpoints {
		repeatedStringForApiEndpoints += strings.Replace(fmt.Sprintf("%v", f), "ApiOperation", "views.ApiOperation", 1) + ","
	}
	repeatedStringForApiEndpoints += "}"
	s := strings.Join([]string{`&APInventoryReq{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ApiEndpoints:` + repeatedStringForApiEndpoints + `,`,
		`}`,
	}, "")
	return s
}
func (this *APInventoryResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUpdatedApiEndpoints := "[]*ApiOperation{"
	for _, f := range this.UpdatedApiEndpoints {
		repeatedStringForUpdatedApiEndpoints += strings.Replace(fmt.Sprintf("%v", f), "ApiOperation", "views.ApiOperation", 1) + ","
	}
	repeatedStringForUpdatedApiEndpoints += "}"
	s := strings.Join([]string{`&APInventoryResp{`,
		`UpdatedApiEndpoints:` + repeatedStringForUpdatedApiEndpoints + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicConfigCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetReferencingLoadbalancersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicConfigCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReferencingLoadbalancersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReferencingLoadbalancersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicConfigCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReferencingLoadbalancersResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicConfigCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReferencingLoadbalancersResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReferencingLoadbalancersResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadbalancers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpLoadbalancers = append(m.HttpLoadbalancers, &views.ObjectRefType{})
			if err := m.HttpLoadbalancers[len(m.HttpLoadbalancers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicConfigCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APInventoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicConfigCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APInventoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APInventoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpoints = append(m.ApiEndpoints, &views.ApiOperation{})
			if err := m.ApiEndpoints[len(m.ApiEndpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicConfigCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APInventoryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicConfigCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APInventoryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APInventoryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedApiEndpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedApiEndpoints = append(m.UpdatedApiEndpoints, &views.ApiOperation{})
			if err := m.UpdatedApiEndpoints[len(m.UpdatedApiEndpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicConfigCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicConfigCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicConfigCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicConfigCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicConfigCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicConfigCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicConfigCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicConfigCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicConfigCustomapi = fmt.Errorf("proto: unexpected end of group")
)

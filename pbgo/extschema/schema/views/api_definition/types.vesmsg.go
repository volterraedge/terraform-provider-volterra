// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package api_definition

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_api_group_element "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_group_element"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ApiGroupBuilder) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiGroupBuilder) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApiGroupBuilder) DeepCopy() *ApiGroupBuilder {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiGroupBuilder{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiGroupBuilder) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiGroupBuilder) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiGroupBuilderValidator().Validate(ctx, m, opts...)
}

type ValidateApiGroupBuilder struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiGroupBuilder) PathFilterValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for path_filter")
	}

	return validatorFn, nil
}

func (v *ValidateApiGroupBuilder) IncludedOperationsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for included_operations")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ApiOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ApiOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for included_operations")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ApiOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ApiOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated included_operations")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items included_operations")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateApiGroupBuilder) ExcludedOperationsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for excluded_operations")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ApiOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ApiOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for excluded_operations")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ApiOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ApiOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated excluded_operations")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items excluded_operations")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateApiGroupBuilder) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiGroupBuilder)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiGroupBuilder got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["excluded_operations"]; exists {
		vOpts := append(opts, db.WithValidateField("excluded_operations"))
		if err := fv(ctx, m.GetExcludedOperations(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["included_operations"]; exists {
		vOpts := append(opts, db.WithValidateField("included_operations"))
		if err := fv(ctx, m.GetIncludedOperations(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["label_filter"]; exists {

		vOpts := append(opts, db.WithValidateField("label_filter"))
		if err := fv(ctx, m.GetLabelFilter(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["metadata"]; exists {

		vOpts := append(opts, db.WithValidateField("metadata"))
		if err := fv(ctx, m.GetMetadata(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path_filter"]; exists {

		vOpts := append(opts, db.WithValidateField("path_filter"))
		if err := fv(ctx, m.GetPathFilter(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiGroupBuilderValidator = func() *ValidateApiGroupBuilder {
	v := &ValidateApiGroupBuilder{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhPathFilter := v.PathFilterValidationRuleHandler
	rulesPathFilter := map[string]string{
		"ves.io.schema.rules.string.max_len": "1024",
		"ves.io.schema.rules.string.regex":   "true",
	}
	vFn, err = vrhPathFilter(rulesPathFilter)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiGroupBuilder.path_filter: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path_filter"] = vFn

	vrhIncludedOperations := v.IncludedOperationsValidationRuleHandler
	rulesIncludedOperations := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhIncludedOperations(rulesIncludedOperations)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiGroupBuilder.included_operations: %s", err)
		panic(errMsg)
	}
	v.FldValidators["included_operations"] = vFn

	vrhExcludedOperations := v.ExcludedOperationsValidationRuleHandler
	rulesExcludedOperations := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhExcludedOperations(rulesExcludedOperations)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiGroupBuilder.excluded_operations: %s", err)
		panic(errMsg)
	}
	v.FldValidators["excluded_operations"] = vFn

	v.FldValidators["metadata"] = ves_io_schema.MessageMetaTypeValidator().Validate

	v.FldValidators["label_filter"] = ves_io_schema.LabelSelectorTypeValidator().Validate

	return v
}()

func ApiGroupBuilderValidator() db.Validator {
	return DefaultApiGroupBuilderValidator
}

// augmented methods on protoc/std generated struct

func (m *ApiGroupSummary) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiGroupSummary) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApiGroupSummary) DeepCopy() *ApiGroupSummary {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiGroupSummary{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiGroupSummary) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiGroupSummary) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiGroupSummaryValidator().Validate(ctx, m, opts...)
}

type ValidateApiGroupSummary struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiGroupSummary) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateApiGroupSummary) ElementsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for elements")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_api_group_element.GlobalSpecType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_api_group_element.GlobalSpecTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for elements")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_api_group_element.GlobalSpecType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_api_group_element.GlobalSpecType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated elements")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items elements")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateApiGroupSummary) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiGroupSummary)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiGroupSummary got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["elements"]; exists {
		vOpts := append(opts, db.WithValidateField("elements"))
		if err := fv(ctx, m.GetElements(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiGroupSummaryValidator = func() *ValidateApiGroupSummary {
	v := &ValidateApiGroupSummary{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiGroupSummary.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	vrhElements := v.ElementsValidationRuleHandler
	rulesElements := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhElements(rulesElements)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiGroupSummary.elements: %s", err)
		panic(errMsg)
	}
	v.FldValidators["elements"] = vFn

	return v
}()

func ApiGroupSummaryValidator() db.Validator {
	return DefaultApiGroupSummaryValidator
}

// augmented methods on protoc/std generated struct

func (m *ApiOperation) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiOperation) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApiOperation) DeepCopy() *ApiOperation {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiOperation{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiOperation) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiOperation) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiOperationValidator().Validate(ctx, m, opts...)
}

type ValidateApiOperation struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiOperation) MethodValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	var conv db.EnumConvFn
	conv = func(v interface{}) int32 {
		i := v.(ves_io_schema.HttpMethod)
		return int32(i)
	}
	// ves_io_schema.HttpMethod_name is generated in .pb.go
	validatorFn, err := db.NewEnumValidationRuleHandler(rules, ves_io_schema.HttpMethod_name, conv)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for method")
	}

	return validatorFn, nil
}

func (v *ValidateApiOperation) PathValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for path")
	}

	return validatorFn, nil
}

func (v *ValidateApiOperation) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiOperation)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiOperation got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["method"]; exists {

		vOpts := append(opts, db.WithValidateField("method"))
		if err := fv(ctx, m.GetMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiOperationValidator = func() *ValidateApiOperation {
	v := &ValidateApiOperation{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhMethod := v.MethodValidationRuleHandler
	rulesMethod := map[string]string{
		"ves.io.schema.rules.enum.defined_only": "true",
		"ves.io.schema.rules.enum.not_in":       "0",
		"ves.io.schema.rules.message.required":  "true",
	}
	vFn, err = vrhMethod(rulesMethod)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiOperation.method: %s", err)
		panic(errMsg)
	}
	v.FldValidators["method"] = vFn

	vrhPath := v.PathValidationRuleHandler
	rulesPath := map[string]string{
		"ves.io.schema.rules.message.required":           "true",
		"ves.io.schema.rules.string.max_bytes":           "1024",
		"ves.io.schema.rules.string.min_bytes":           "1",
		"ves.io.schema.rules.string.templated_http_path": "true",
	}
	vFn, err = vrhPath(rulesPath)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiOperation.path: %s", err)
		panic(errMsg)
	}
	v.FldValidators["path"] = vFn

	return v
}()

func ApiOperationValidator() db.Validator {
	return DefaultApiOperationValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) SwaggerSpecsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for swagger_specs")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for swagger_specs")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated swagger_specs")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items swagger_specs")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ApiInventoryInclusionListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for api_inventory_inclusion_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ApiOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ApiOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_inventory_inclusion_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ApiOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ApiOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_inventory_inclusion_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_inventory_inclusion_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ApiInventoryExclusionListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for api_inventory_exclusion_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ApiOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ApiOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_inventory_exclusion_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ApiOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ApiOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_inventory_exclusion_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_inventory_exclusion_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) NonApiEndpointsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for non_api_endpoints")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ApiOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ApiOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for non_api_endpoints")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ApiOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ApiOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated non_api_endpoints")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items non_api_endpoints")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_inventory_exclusion_list"]; exists {
		vOpts := append(opts, db.WithValidateField("api_inventory_exclusion_list"))
		if err := fv(ctx, m.GetApiInventoryExclusionList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_inventory_inclusion_list"]; exists {
		vOpts := append(opts, db.WithValidateField("api_inventory_inclusion_list"))
		if err := fv(ctx, m.GetApiInventoryInclusionList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["non_api_endpoints"]; exists {
		vOpts := append(opts, db.WithValidateField("non_api_endpoints"))
		if err := fv(ctx, m.GetNonApiEndpoints(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["swagger_specs"]; exists {
		vOpts := append(opts, db.WithValidateField("swagger_specs"))
		if err := fv(ctx, m.GetSwaggerSpecs(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSwaggerSpecs := v.SwaggerSpecsValidationRuleHandler
	rulesSwaggerSpecs := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "512",
		"ves.io.schema.rules.repeated.items.string.pattern":   "/api/object_store/namespaces/([a-z]([-a-z0-9]*[a-z0-9])?)/stored_objects/swagger/([a-z]([-a-z0-9]*[a-z0-9])?)/(v|V)[0-9]+(-[0-9]{2}){3}$",
		"ves.io.schema.rules.repeated.max_items":              "10",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhSwaggerSpecs(rulesSwaggerSpecs)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.swagger_specs: %s", err)
		panic(errMsg)
	}
	v.FldValidators["swagger_specs"] = vFn

	vrhApiInventoryInclusionList := v.ApiInventoryInclusionListValidationRuleHandler
	rulesApiInventoryInclusionList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1000",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhApiInventoryInclusionList(rulesApiInventoryInclusionList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.api_inventory_inclusion_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_inventory_inclusion_list"] = vFn

	vrhApiInventoryExclusionList := v.ApiInventoryExclusionListValidationRuleHandler
	rulesApiInventoryExclusionList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1000",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhApiInventoryExclusionList(rulesApiInventoryExclusionList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.api_inventory_exclusion_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_inventory_exclusion_list"] = vFn

	vrhNonApiEndpoints := v.NonApiEndpointsValidationRuleHandler
	rulesNonApiEndpoints := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1000",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhNonApiEndpoints(rulesNonApiEndpoints)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.non_api_endpoints: %s", err)
		panic(errMsg)
	}
	v.FldValidators["non_api_endpoints"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) SwaggerSpecsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for swagger_specs")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for swagger_specs")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated swagger_specs")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items swagger_specs")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) ApiInventoryInclusionListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for api_inventory_inclusion_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ApiOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ApiOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_inventory_inclusion_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ApiOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ApiOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_inventory_inclusion_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_inventory_inclusion_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) ApiInventoryExclusionListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for api_inventory_exclusion_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ApiOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ApiOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_inventory_exclusion_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ApiOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ApiOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_inventory_exclusion_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_inventory_exclusion_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) NonApiEndpointsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for non_api_endpoints")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ApiOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ApiOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for non_api_endpoints")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ApiOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ApiOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated non_api_endpoints")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items non_api_endpoints")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) ApiInventoryOpenapiSpecValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for api_inventory_openapi_spec")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_inventory_openapi_spec")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_inventory_openapi_spec")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_inventory_openapi_spec")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_groups"]; exists {

		vOpts := append(opts, db.WithValidateField("api_groups"))
		for idx, item := range m.GetApiGroups() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_inventory_exclusion_list"]; exists {
		vOpts := append(opts, db.WithValidateField("api_inventory_exclusion_list"))
		if err := fv(ctx, m.GetApiInventoryExclusionList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_inventory_inclusion_list"]; exists {
		vOpts := append(opts, db.WithValidateField("api_inventory_inclusion_list"))
		if err := fv(ctx, m.GetApiInventoryInclusionList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_inventory_openapi_spec"]; exists {
		vOpts := append(opts, db.WithValidateField("api_inventory_openapi_spec"))
		if err := fv(ctx, m.GetApiInventoryOpenapiSpec(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_api_groups_builders"]; exists {

		vOpts := append(opts, db.WithValidateField("default_api_groups_builders"))
		for idx, item := range m.GetDefaultApiGroupsBuilders() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["non_api_endpoints"]; exists {
		vOpts := append(opts, db.WithValidateField("non_api_endpoints"))
		if err := fv(ctx, m.GetNonApiEndpoints(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["swagger_specs"]; exists {
		vOpts := append(opts, db.WithValidateField("swagger_specs"))
		if err := fv(ctx, m.GetSwaggerSpecs(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSwaggerSpecs := v.SwaggerSpecsValidationRuleHandler
	rulesSwaggerSpecs := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "512",
		"ves.io.schema.rules.repeated.items.string.pattern":   "/api/object_store/namespaces/([a-z]([-a-z0-9]*[a-z0-9])?)/stored_objects/swagger/([a-z]([-a-z0-9]*[a-z0-9])?)/(v|V)[0-9]+(-[0-9]{2}){3}$",
		"ves.io.schema.rules.repeated.max_items":              "10",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhSwaggerSpecs(rulesSwaggerSpecs)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.swagger_specs: %s", err)
		panic(errMsg)
	}
	v.FldValidators["swagger_specs"] = vFn

	vrhApiInventoryInclusionList := v.ApiInventoryInclusionListValidationRuleHandler
	rulesApiInventoryInclusionList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1000",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhApiInventoryInclusionList(rulesApiInventoryInclusionList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.api_inventory_inclusion_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_inventory_inclusion_list"] = vFn

	vrhApiInventoryExclusionList := v.ApiInventoryExclusionListValidationRuleHandler
	rulesApiInventoryExclusionList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1000",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhApiInventoryExclusionList(rulesApiInventoryExclusionList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.api_inventory_exclusion_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_inventory_exclusion_list"] = vFn

	vrhNonApiEndpoints := v.NonApiEndpointsValidationRuleHandler
	rulesNonApiEndpoints := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1000",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhNonApiEndpoints(rulesNonApiEndpoints)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.non_api_endpoints: %s", err)
		panic(errMsg)
	}
	v.FldValidators["non_api_endpoints"] = vFn

	vrhApiInventoryOpenapiSpec := v.ApiInventoryOpenapiSpecValidationRuleHandler
	rulesApiInventoryOpenapiSpec := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "512",
		"ves.io.schema.rules.repeated.items.string.pattern":   "/api/object_store/namespaces/([a-z]([-a-z0-9]*[a-z0-9])?)/stored_objects/swagger/([a-z]([-a-z0-9]*[a-z0-9])?)/(v|V)[0-9]+(-[0-9]{2}){3}$",
		"ves.io.schema.rules.repeated.max_items":              "10",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhApiInventoryOpenapiSpec(rulesApiInventoryOpenapiSpec)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.api_inventory_openapi_spec: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_inventory_openapi_spec"] = vFn

	v.FldValidators["default_api_groups_builders"] = ApiGroupBuilderValidator().Validate

	v.FldValidators["api_groups"] = ApiGroupSummaryValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetViewInternalDRefInfo()

}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) SwaggerSpecsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for swagger_specs")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for swagger_specs")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated swagger_specs")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items swagger_specs")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ApiInventoryInclusionListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for api_inventory_inclusion_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ApiOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ApiOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_inventory_inclusion_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ApiOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ApiOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_inventory_inclusion_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_inventory_inclusion_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ApiInventoryExclusionListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for api_inventory_exclusion_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ApiOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ApiOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_inventory_exclusion_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ApiOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ApiOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_inventory_exclusion_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_inventory_exclusion_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) NonApiEndpointsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for non_api_endpoints")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ApiOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ApiOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for non_api_endpoints")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ApiOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ApiOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated non_api_endpoints")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items non_api_endpoints")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ApiInventoryOpenapiSpecValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for api_inventory_openapi_spec")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_inventory_openapi_spec")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_inventory_openapi_spec")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_inventory_openapi_spec")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_groups"]; exists {

		vOpts := append(opts, db.WithValidateField("api_groups"))
		for idx, item := range m.GetApiGroups() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["api_inventory_exclusion_list"]; exists {
		vOpts := append(opts, db.WithValidateField("api_inventory_exclusion_list"))
		if err := fv(ctx, m.GetApiInventoryExclusionList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_inventory_inclusion_list"]; exists {
		vOpts := append(opts, db.WithValidateField("api_inventory_inclusion_list"))
		if err := fv(ctx, m.GetApiInventoryInclusionList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_inventory_openapi_spec"]; exists {
		vOpts := append(opts, db.WithValidateField("api_inventory_openapi_spec"))
		if err := fv(ctx, m.GetApiInventoryOpenapiSpec(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["default_api_groups_builders"]; exists {

		vOpts := append(opts, db.WithValidateField("default_api_groups_builders"))
		for idx, item := range m.GetDefaultApiGroupsBuilders() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["non_api_endpoints"]; exists {
		vOpts := append(opts, db.WithValidateField("non_api_endpoints"))
		if err := fv(ctx, m.GetNonApiEndpoints(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["swagger_specs"]; exists {
		vOpts := append(opts, db.WithValidateField("swagger_specs"))
		if err := fv(ctx, m.GetSwaggerSpecs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSwaggerSpecs := v.SwaggerSpecsValidationRuleHandler
	rulesSwaggerSpecs := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "512",
		"ves.io.schema.rules.repeated.items.string.pattern":   "/api/object_store/namespaces/([a-z]([-a-z0-9]*[a-z0-9])?)/stored_objects/swagger/([a-z]([-a-z0-9]*[a-z0-9])?)/(v|V)[0-9]+(-[0-9]{2}){3}$",
		"ves.io.schema.rules.repeated.max_items":              "10",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhSwaggerSpecs(rulesSwaggerSpecs)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.swagger_specs: %s", err)
		panic(errMsg)
	}
	v.FldValidators["swagger_specs"] = vFn

	vrhApiInventoryInclusionList := v.ApiInventoryInclusionListValidationRuleHandler
	rulesApiInventoryInclusionList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1000",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhApiInventoryInclusionList(rulesApiInventoryInclusionList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.api_inventory_inclusion_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_inventory_inclusion_list"] = vFn

	vrhApiInventoryExclusionList := v.ApiInventoryExclusionListValidationRuleHandler
	rulesApiInventoryExclusionList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1000",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhApiInventoryExclusionList(rulesApiInventoryExclusionList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.api_inventory_exclusion_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_inventory_exclusion_list"] = vFn

	vrhNonApiEndpoints := v.NonApiEndpointsValidationRuleHandler
	rulesNonApiEndpoints := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1000",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhNonApiEndpoints(rulesNonApiEndpoints)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.non_api_endpoints: %s", err)
		panic(errMsg)
	}
	v.FldValidators["non_api_endpoints"] = vFn

	vrhApiInventoryOpenapiSpec := v.ApiInventoryOpenapiSpecValidationRuleHandler
	rulesApiInventoryOpenapiSpec := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "512",
		"ves.io.schema.rules.repeated.items.string.pattern":   "/api/object_store/namespaces/([a-z]([-a-z0-9]*[a-z0-9])?)/stored_objects/swagger/([a-z]([-a-z0-9]*[a-z0-9])?)/(v|V)[0-9]+(-[0-9]{2}){3}$",
		"ves.io.schema.rules.repeated.max_items":              "10",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhApiInventoryOpenapiSpec(rulesApiInventoryOpenapiSpec)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.api_inventory_openapi_spec: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_inventory_openapi_spec"] = vFn

	v.FldValidators["default_api_groups_builders"] = ApiGroupBuilderValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["api_groups"] = ApiGroupSummaryValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) SwaggerSpecsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for swagger_specs")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for swagger_specs")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated swagger_specs")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items swagger_specs")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ApiInventoryInclusionListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for api_inventory_inclusion_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ApiOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ApiOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_inventory_inclusion_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ApiOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ApiOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_inventory_inclusion_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_inventory_inclusion_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ApiInventoryExclusionListValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for api_inventory_exclusion_list")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ApiOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ApiOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_inventory_exclusion_list")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ApiOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ApiOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_inventory_exclusion_list")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_inventory_exclusion_list")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) NonApiEndpointsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for non_api_endpoints")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ApiOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ApiOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for non_api_endpoints")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ApiOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ApiOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated non_api_endpoints")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items non_api_endpoints")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_inventory_exclusion_list"]; exists {
		vOpts := append(opts, db.WithValidateField("api_inventory_exclusion_list"))
		if err := fv(ctx, m.GetApiInventoryExclusionList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_inventory_inclusion_list"]; exists {
		vOpts := append(opts, db.WithValidateField("api_inventory_inclusion_list"))
		if err := fv(ctx, m.GetApiInventoryInclusionList(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["non_api_endpoints"]; exists {
		vOpts := append(opts, db.WithValidateField("non_api_endpoints"))
		if err := fv(ctx, m.GetNonApiEndpoints(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["swagger_specs"]; exists {
		vOpts := append(opts, db.WithValidateField("swagger_specs"))
		if err := fv(ctx, m.GetSwaggerSpecs(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSwaggerSpecs := v.SwaggerSpecsValidationRuleHandler
	rulesSwaggerSpecs := map[string]string{
		"ves.io.schema.rules.repeated.items.string.max_bytes": "512",
		"ves.io.schema.rules.repeated.items.string.pattern":   "/api/object_store/namespaces/([a-z]([-a-z0-9]*[a-z0-9])?)/stored_objects/swagger/([a-z]([-a-z0-9]*[a-z0-9])?)/(v|V)[0-9]+(-[0-9]{2}){3}$",
		"ves.io.schema.rules.repeated.max_items":              "10",
		"ves.io.schema.rules.repeated.unique":                 "true",
	}
	vFn, err = vrhSwaggerSpecs(rulesSwaggerSpecs)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.swagger_specs: %s", err)
		panic(errMsg)
	}
	v.FldValidators["swagger_specs"] = vFn

	vrhApiInventoryInclusionList := v.ApiInventoryInclusionListValidationRuleHandler
	rulesApiInventoryInclusionList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1000",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhApiInventoryInclusionList(rulesApiInventoryInclusionList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.api_inventory_inclusion_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_inventory_inclusion_list"] = vFn

	vrhApiInventoryExclusionList := v.ApiInventoryExclusionListValidationRuleHandler
	rulesApiInventoryExclusionList := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1000",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhApiInventoryExclusionList(rulesApiInventoryExclusionList)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.api_inventory_exclusion_list: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_inventory_exclusion_list"] = vFn

	vrhNonApiEndpoints := v.NonApiEndpointsValidationRuleHandler
	rulesNonApiEndpoints := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1000",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhNonApiEndpoints(rulesNonApiEndpoints)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.non_api_endpoints: %s", err)
		panic(errMsg)
	}
	v.FldValidators["non_api_endpoints"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ApiInventoryExclusionList = f.GetApiInventoryExclusionList()
	m.ApiInventoryInclusionList = f.GetApiInventoryInclusionList()
	m.NonApiEndpoints = f.GetNonApiEndpoints()
	m.SwaggerSpecs = f.GetSwaggerSpecs()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ApiInventoryExclusionList = m1.ApiInventoryExclusionList
	f.ApiInventoryInclusionList = m1.ApiInventoryInclusionList
	f.NonApiEndpoints = m1.NonApiEndpoints
	f.SwaggerSpecs = m1.SwaggerSpecs
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ApiGroups = f.GetApiGroups()
	m.ApiInventoryExclusionList = f.GetApiInventoryExclusionList()
	m.ApiInventoryInclusionList = f.GetApiInventoryInclusionList()
	m.ApiInventoryOpenapiSpec = f.GetApiInventoryOpenapiSpec()
	m.DefaultApiGroupsBuilders = f.GetDefaultApiGroupsBuilders()
	m.NonApiEndpoints = f.GetNonApiEndpoints()
	m.SwaggerSpecs = f.GetSwaggerSpecs()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ApiGroups = m1.ApiGroups
	f.ApiInventoryExclusionList = m1.ApiInventoryExclusionList
	f.ApiInventoryInclusionList = m1.ApiInventoryInclusionList
	f.ApiInventoryOpenapiSpec = m1.ApiInventoryOpenapiSpec
	f.DefaultApiGroupsBuilders = m1.DefaultApiGroupsBuilders
	f.NonApiEndpoints = m1.NonApiEndpoints
	f.SwaggerSpecs = m1.SwaggerSpecs
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ApiInventoryExclusionList = f.GetApiInventoryExclusionList()
	m.ApiInventoryInclusionList = f.GetApiInventoryInclusionList()
	m.NonApiEndpoints = f.GetNonApiEndpoints()
	m.SwaggerSpecs = f.GetSwaggerSpecs()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ApiInventoryExclusionList = m1.ApiInventoryExclusionList
	f.ApiInventoryInclusionList = m1.ApiInventoryInclusionList
	f.NonApiEndpoints = m1.NonApiEndpoints
	f.SwaggerSpecs = m1.SwaggerSpecs
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

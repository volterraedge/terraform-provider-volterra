// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package api_definition

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *APInventoryReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APInventoryReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APInventoryReq) DeepCopy() *APInventoryReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APInventoryReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APInventoryReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APInventoryReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APInventoryReqValidator().Validate(ctx, m, opts...)
}

type ValidateAPInventoryReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPInventoryReq) ApiEndpointsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for api_endpoints")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ApiOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ApiOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for api_endpoints")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ApiOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ApiOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated api_endpoints")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items api_endpoints")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateAPInventoryReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APInventoryReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APInventoryReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_endpoints"]; exists {
		vOpts := append(opts, db.WithValidateField("api_endpoints"))
		if err := fv(ctx, m.GetApiEndpoints(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPInventoryReqValidator = func() *ValidateAPInventoryReq {
	v := &ValidateAPInventoryReq{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiEndpoints := v.ApiEndpointsValidationRuleHandler
	rulesApiEndpoints := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "100",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhApiEndpoints(rulesApiEndpoints)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for APInventoryReq.api_endpoints: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_endpoints"] = vFn

	return v
}()

func APInventoryReqValidator() db.Validator {
	return DefaultAPInventoryReqValidator
}

// augmented methods on protoc/std generated struct

func (m *APInventoryResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APInventoryResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APInventoryResp) DeepCopy() *APInventoryResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APInventoryResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APInventoryResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APInventoryResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APInventoryRespValidator().Validate(ctx, m, opts...)
}

type ValidateAPInventoryResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPInventoryResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APInventoryResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APInventoryResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["updated_api_endpoints"]; exists {

		vOpts := append(opts, db.WithValidateField("updated_api_endpoints"))
		for idx, item := range m.GetUpdatedApiEndpoints() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPInventoryRespValidator = func() *ValidateAPInventoryResp {
	v := &ValidateAPInventoryResp{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["updated_api_endpoints"] = ves_io_schema_views.ApiOperationValidator().Validate

	return v
}()

func APInventoryRespValidator() db.Validator {
	return DefaultAPInventoryRespValidator
}

// augmented methods on protoc/std generated struct

func (m *GetReferencingAllLoadbalancersResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetReferencingAllLoadbalancersResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetReferencingAllLoadbalancersResp) DeepCopy() *GetReferencingAllLoadbalancersResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetReferencingAllLoadbalancersResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetReferencingAllLoadbalancersResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetReferencingAllLoadbalancersResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetReferencingAllLoadbalancersRespValidator().Validate(ctx, m, opts...)
}

type ValidateGetReferencingAllLoadbalancersResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetReferencingAllLoadbalancersResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetReferencingAllLoadbalancersResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetReferencingAllLoadbalancersResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["loadbalancers"]; exists {

		vOpts := append(opts, db.WithValidateField("loadbalancers"))
		for idx, item := range m.GetLoadbalancers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetReferencingAllLoadbalancersRespValidator = func() *ValidateGetReferencingAllLoadbalancersResp {
	v := &ValidateGetReferencingAllLoadbalancersResp{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["loadbalancers"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GetReferencingAllLoadbalancersRespValidator() db.Validator {
	return DefaultGetReferencingAllLoadbalancersRespValidator
}

// augmented methods on protoc/std generated struct

func (m *GetReferencingLoadbalancersReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetReferencingLoadbalancersReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetReferencingLoadbalancersReq) DeepCopy() *GetReferencingLoadbalancersReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetReferencingLoadbalancersReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetReferencingLoadbalancersReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetReferencingLoadbalancersReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetReferencingLoadbalancersReqValidator().Validate(ctx, m, opts...)
}

type ValidateGetReferencingLoadbalancersReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetReferencingLoadbalancersReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetReferencingLoadbalancersReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetReferencingLoadbalancersReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetReferencingLoadbalancersReqValidator = func() *ValidateGetReferencingLoadbalancersReq {
	v := &ValidateGetReferencingLoadbalancersReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GetReferencingLoadbalancersReqValidator() db.Validator {
	return DefaultGetReferencingLoadbalancersReqValidator
}

// augmented methods on protoc/std generated struct

func (m *GetReferencingLoadbalancersResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetReferencingLoadbalancersResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetReferencingLoadbalancersResp) DeepCopy() *GetReferencingLoadbalancersResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetReferencingLoadbalancersResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetReferencingLoadbalancersResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetReferencingLoadbalancersResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetReferencingLoadbalancersRespValidator().Validate(ctx, m, opts...)
}

func (m *GetReferencingLoadbalancersResp) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetHttpLoadbalancersDRefInfo()

}

func (m *GetReferencingLoadbalancersResp) GetHttpLoadbalancersDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetHttpLoadbalancers()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("GetReferencingLoadbalancersResp.http_loadbalancers[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("http_loadbalancer.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "http_loadbalancer.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "http_loadbalancers",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetHttpLoadbalancersDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetReferencingLoadbalancersResp) GetHttpLoadbalancersDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "http_loadbalancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: http_loadbalancer")
	}
	for i, vref := range m.GetHttpLoadbalancers() {
		if vref == nil {
			return nil, fmt.Errorf("GetReferencingLoadbalancersResp.http_loadbalancers[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "http_loadbalancer.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

type ValidateGetReferencingLoadbalancersResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetReferencingLoadbalancersResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetReferencingLoadbalancersResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetReferencingLoadbalancersResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["http_loadbalancers"]; exists {

		vOpts := append(opts, db.WithValidateField("http_loadbalancers"))
		for idx, item := range m.GetHttpLoadbalancers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetReferencingLoadbalancersRespValidator = func() *ValidateGetReferencingLoadbalancersResp {
	v := &ValidateGetReferencingLoadbalancersResp{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["http_loadbalancers"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GetReferencingLoadbalancersRespValidator() db.Validator {
	return DefaultGetReferencingLoadbalancersRespValidator
}

// augmented methods on protoc/std generated struct

func (m *ListAvailableAPIDefinitionsReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ListAvailableAPIDefinitionsReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ListAvailableAPIDefinitionsReq) DeepCopy() *ListAvailableAPIDefinitionsReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ListAvailableAPIDefinitionsReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ListAvailableAPIDefinitionsReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ListAvailableAPIDefinitionsReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ListAvailableAPIDefinitionsReqValidator().Validate(ctx, m, opts...)
}

type ValidateListAvailableAPIDefinitionsReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateListAvailableAPIDefinitionsReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ListAvailableAPIDefinitionsReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ListAvailableAPIDefinitionsReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultListAvailableAPIDefinitionsReqValidator = func() *ValidateListAvailableAPIDefinitionsReq {
	v := &ValidateListAvailableAPIDefinitionsReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func ListAvailableAPIDefinitionsReqValidator() db.Validator {
	return DefaultListAvailableAPIDefinitionsReqValidator
}

// augmented methods on protoc/std generated struct

func (m *ListAvailableAPIDefinitionsResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ListAvailableAPIDefinitionsResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ListAvailableAPIDefinitionsResp) DeepCopy() *ListAvailableAPIDefinitionsResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ListAvailableAPIDefinitionsResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ListAvailableAPIDefinitionsResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ListAvailableAPIDefinitionsResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ListAvailableAPIDefinitionsRespValidator().Validate(ctx, m, opts...)
}

type ValidateListAvailableAPIDefinitionsResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateListAvailableAPIDefinitionsResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ListAvailableAPIDefinitionsResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ListAvailableAPIDefinitionsResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["available_api_definitions"]; exists {

		vOpts := append(opts, db.WithValidateField("available_api_definitions"))
		for idx, item := range m.GetAvailableApiDefinitions() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultListAvailableAPIDefinitionsRespValidator = func() *ValidateListAvailableAPIDefinitionsResp {
	v := &ValidateListAvailableAPIDefinitionsResp{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["available_api_definitions"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func ListAvailableAPIDefinitionsRespValidator() db.Validator {
	return DefaultListAvailableAPIDefinitionsRespValidator
}

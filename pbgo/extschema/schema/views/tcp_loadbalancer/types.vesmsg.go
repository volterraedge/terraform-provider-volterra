//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package tcp_loadbalancer

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvertiseChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolsWeightsDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetAdvertiseChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetAdvertiseChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetAdvertiseChoice().(type) {
	case *CreateSpecType_AdvertiseOnPublic:
		odrInfos, err = m.GetAdvertiseOnPublic().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "advertise_on_public." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *CreateSpecType_AdvertiseCustom:
		odrInfos, err = m.GetAdvertiseCustom().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "advertise_custom." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *CreateSpecType_DoNotAdvertise:

	case *CreateSpecType_AdvertiseOnPublicDefaultVip:

	}

	return drInfos, err
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetOriginPoolsWeightsDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetOriginPoolsWeights() == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.GetOriginPoolsWeights() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("origin_pools_weights[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) AdvertiseChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for advertise_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ClusterRetractChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_retract_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) OriginPoolsWeightsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for origin_pools_weights")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated origin_pools_weights")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items origin_pools_weights")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) IdleTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for idle_timeout")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["advertise_choice"]; exists {
		val := m.GetAdvertiseChoice()
		vOpts := append(opts,
			db.WithValidateField("advertise_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdvertiseChoice().(type) {
	case *CreateSpecType_AdvertiseOnPublic:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public"]; exists {
			val := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublic).AdvertiseOnPublic
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AdvertiseCustom:
		if fv, exists := v.FldValidators["advertise_choice.advertise_custom"]; exists {
			val := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseCustom).AdvertiseCustom
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DoNotAdvertise:
		if fv, exists := v.FldValidators["advertise_choice.do_not_advertise"]; exists {
			val := m.GetAdvertiseChoice().(*CreateSpecType_DoNotAdvertise).DoNotAdvertise
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("do_not_advertise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_AdvertiseOnPublicDefaultVip:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public_default_vip"]; exists {
			val := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublicDefaultVip).AdvertiseOnPublicDefaultVip
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public_default_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_retract_choice"]; exists {
		val := m.GetClusterRetractChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_retract_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterRetractChoice().(type) {
	case *CreateSpecType_RetractCluster:
		if fv, exists := v.FldValidators["cluster_retract_choice.retract_cluster"]; exists {
			val := m.GetClusterRetractChoice().(*CreateSpecType_RetractCluster).RetractCluster
			vOpts := append(opts,
				db.WithValidateField("cluster_retract_choice"),
				db.WithValidateField("retract_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_DoNotRetractCluster:
		if fv, exists := v.FldValidators["cluster_retract_choice.do_not_retract_cluster"]; exists {
			val := m.GetClusterRetractChoice().(*CreateSpecType_DoNotRetractCluster).DoNotRetractCluster
			vOpts := append(opts,
				db.WithValidateField("cluster_retract_choice"),
				db.WithValidateField("do_not_retract_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["dns_volterra_managed"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_volterra_managed"))
		if err := fv(ctx, m.GetDnsVolterraManaged(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *CreateSpecType_HashPolicyChoiceRoundRobin:
		if fv, exists := v.FldValidators["hash_policy_choice.hash_policy_choice_round_robin"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_HashPolicyChoiceRoundRobin).HashPolicyChoiceRoundRobin
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("hash_policy_choice_round_robin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_HashPolicyChoiceLeastActive:
		if fv, exists := v.FldValidators["hash_policy_choice.hash_policy_choice_least_active"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_HashPolicyChoiceLeastActive).HashPolicyChoiceLeastActive
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("hash_policy_choice_least_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_HashPolicyChoiceRandom:
		if fv, exists := v.FldValidators["hash_policy_choice.hash_policy_choice_random"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_HashPolicyChoiceRandom).HashPolicyChoiceRandom
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("hash_policy_choice_random"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_HashPolicyChoiceSourceIpStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.hash_policy_choice_source_ip_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*CreateSpecType_HashPolicyChoiceSourceIpStickiness).HashPolicyChoiceSourceIpStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("hash_policy_choice_source_ip_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["idle_timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("idle_timeout"))
		if err := fv(ctx, m.GetIdleTimeout(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["listen_port"]; exists {

		vOpts := append(opts, db.WithValidateField("listen_port"))
		if err := fv(ctx, m.GetListenPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["origin_pools_weights"]; exists {
		vOpts := append(opts, db.WithValidateField("origin_pools_weights"))
		if err := fv(ctx, m.GetOriginPoolsWeights(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["with_sni"]; exists {

		vOpts := append(opts, db.WithValidateField("with_sni"))
		if err := fv(ctx, m.GetWithSni(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdvertiseChoice := v.AdvertiseChoiceValidationRuleHandler
	rulesAdvertiseChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdvertiseChoice(rulesAdvertiseChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.advertise_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["advertise_choice"] = vFn

	vrhClusterRetractChoice := v.ClusterRetractChoiceValidationRuleHandler
	rulesClusterRetractChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterRetractChoice(rulesClusterRetractChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.cluster_retract_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_retract_choice"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.items.string.hostname": "true",
		"ves.io.schema.rules.repeated.max_items":             "32",
		"ves.io.schema.rules.repeated.unique":                "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhOriginPoolsWeights := v.OriginPoolsWeightsValidationRuleHandler
	rulesOriginPoolsWeights := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhOriginPoolsWeights(rulesOriginPoolsWeights)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.origin_pools_weights: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_pools_weights"] = vFn

	vrhIdleTimeout := v.IdleTimeoutValidationRuleHandler
	rulesIdleTimeout := map[string]string{
		"ves.io.schema.rules.uint32.lte": "4147200000",
	}
	vFn, err = vrhIdleTimeout(rulesIdleTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.idle_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["idle_timeout"] = vFn

	v.FldValidators["advertise_choice.advertise_on_public"] = ves_io_schema_views.AdvertisePublicValidator().Validate
	v.FldValidators["advertise_choice.advertise_custom"] = ves_io_schema_views.AdvertiseCustomValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvertiseChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolsDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolsWeightsDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetAdvertiseChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetAdvertiseChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetAdvertiseChoice().(type) {
	case *GetSpecType_AdvertiseOnPublic:
		odrInfos, err = m.GetAdvertiseOnPublic().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "advertise_on_public." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *GetSpecType_AdvertiseCustom:
		odrInfos, err = m.GetAdvertiseCustom().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "advertise_custom." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *GetSpecType_DoNotAdvertise:

	case *GetSpecType_AdvertiseOnPublicDefaultVip:

	}

	return drInfos, err
}

func (m *GetSpecType) GetOriginPoolsDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, vref := range m.GetOriginPools() {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.origin_pools[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("origin_pool.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "origin_pool.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "origin_pools",
			Ref:        vdRef,
		})
	}

	return drInfos, nil
}

// GetOriginPoolsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetOriginPoolsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "origin_pool.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: origin_pool")
	}
	for i, vref := range m.GetOriginPools() {
		if vref == nil {
			return nil, fmt.Errorf("GetSpecType.origin_pools[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "origin_pool.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetOriginPoolsWeightsDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetOriginPoolsWeights() == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.GetOriginPoolsWeights() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("origin_pools_weights[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) AdvertiseChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for advertise_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ClusterRetractChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_retract_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) OriginPoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for origin_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated origin_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items origin_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) OriginPoolsWeightsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for origin_pools_weights")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated origin_pools_weights")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items origin_pools_weights")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) IdleTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for idle_timeout")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["advertise_choice"]; exists {
		val := m.GetAdvertiseChoice()
		vOpts := append(opts,
			db.WithValidateField("advertise_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdvertiseChoice().(type) {
	case *GetSpecType_AdvertiseOnPublic:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public"]; exists {
			val := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublic).AdvertiseOnPublic
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AdvertiseCustom:
		if fv, exists := v.FldValidators["advertise_choice.advertise_custom"]; exists {
			val := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseCustom).AdvertiseCustom
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DoNotAdvertise:
		if fv, exists := v.FldValidators["advertise_choice.do_not_advertise"]; exists {
			val := m.GetAdvertiseChoice().(*GetSpecType_DoNotAdvertise).DoNotAdvertise
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("do_not_advertise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_AdvertiseOnPublicDefaultVip:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public_default_vip"]; exists {
			val := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublicDefaultVip).AdvertiseOnPublicDefaultVip
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public_default_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_retract_choice"]; exists {
		val := m.GetClusterRetractChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_retract_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterRetractChoice().(type) {
	case *GetSpecType_RetractCluster:
		if fv, exists := v.FldValidators["cluster_retract_choice.retract_cluster"]; exists {
			val := m.GetClusterRetractChoice().(*GetSpecType_RetractCluster).RetractCluster
			vOpts := append(opts,
				db.WithValidateField("cluster_retract_choice"),
				db.WithValidateField("retract_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_DoNotRetractCluster:
		if fv, exists := v.FldValidators["cluster_retract_choice.do_not_retract_cluster"]; exists {
			val := m.GetClusterRetractChoice().(*GetSpecType_DoNotRetractCluster).DoNotRetractCluster
			vOpts := append(opts,
				db.WithValidateField("cluster_retract_choice"),
				db.WithValidateField("do_not_retract_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["dns_info"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_info"))
		for idx, item := range m.GetDnsInfo() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["dns_volterra_managed"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_volterra_managed"))
		if err := fv(ctx, m.GetDnsVolterraManaged(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *GetSpecType_HashPolicyChoiceRoundRobin:
		if fv, exists := v.FldValidators["hash_policy_choice.hash_policy_choice_round_robin"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_HashPolicyChoiceRoundRobin).HashPolicyChoiceRoundRobin
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("hash_policy_choice_round_robin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_HashPolicyChoiceLeastActive:
		if fv, exists := v.FldValidators["hash_policy_choice.hash_policy_choice_least_active"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_HashPolicyChoiceLeastActive).HashPolicyChoiceLeastActive
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("hash_policy_choice_least_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_HashPolicyChoiceRandom:
		if fv, exists := v.FldValidators["hash_policy_choice.hash_policy_choice_random"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_HashPolicyChoiceRandom).HashPolicyChoiceRandom
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("hash_policy_choice_random"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_HashPolicyChoiceSourceIpStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.hash_policy_choice_source_ip_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*GetSpecType_HashPolicyChoiceSourceIpStickiness).HashPolicyChoiceSourceIpStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("hash_policy_choice_source_ip_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["host_name"]; exists {

		vOpts := append(opts, db.WithValidateField("host_name"))
		if err := fv(ctx, m.GetHostName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["idle_timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("idle_timeout"))
		if err := fv(ctx, m.GetIdleTimeout(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["listen_port"]; exists {

		vOpts := append(opts, db.WithValidateField("listen_port"))
		if err := fv(ctx, m.GetListenPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["origin_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("origin_pools"))
		if err := fv(ctx, m.GetOriginPools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["origin_pools_weights"]; exists {
		vOpts := append(opts, db.WithValidateField("origin_pools_weights"))
		if err := fv(ctx, m.GetOriginPoolsWeights(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["with_sni"]; exists {

		vOpts := append(opts, db.WithValidateField("with_sni"))
		if err := fv(ctx, m.GetWithSni(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdvertiseChoice := v.AdvertiseChoiceValidationRuleHandler
	rulesAdvertiseChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdvertiseChoice(rulesAdvertiseChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.advertise_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["advertise_choice"] = vFn

	vrhClusterRetractChoice := v.ClusterRetractChoiceValidationRuleHandler
	rulesClusterRetractChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterRetractChoice(rulesClusterRetractChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.cluster_retract_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_retract_choice"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.items.string.hostname": "true",
		"ves.io.schema.rules.repeated.max_items":             "32",
		"ves.io.schema.rules.repeated.unique":                "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhOriginPools := v.OriginPoolsValidationRuleHandler
	rulesOriginPools := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhOriginPools(rulesOriginPools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.origin_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_pools"] = vFn

	vrhOriginPoolsWeights := v.OriginPoolsWeightsValidationRuleHandler
	rulesOriginPoolsWeights := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhOriginPoolsWeights(rulesOriginPoolsWeights)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.origin_pools_weights: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_pools_weights"] = vFn

	vrhIdleTimeout := v.IdleTimeoutValidationRuleHandler
	rulesIdleTimeout := map[string]string{
		"ves.io.schema.rules.uint32.lte": "4147200000",
	}
	vFn, err = vrhIdleTimeout(rulesIdleTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.idle_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["idle_timeout"] = vFn

	v.FldValidators["advertise_choice.advertise_on_public"] = ves_io_schema_views.AdvertisePublicValidator().Validate
	v.FldValidators["advertise_choice.advertise_custom"] = ves_io_schema_views.AdvertiseCustomValidator().Validate

	v.FldValidators["dns_info"] = ves_io_schema_virtual_host_dns_info.DnsInfoValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvertiseChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolsDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolsWeightsDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetAdvertiseChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetAdvertiseChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetAdvertiseChoice().(type) {
	case *GlobalSpecType_AdvertiseOnPublic:
		odrInfos, err = m.GetAdvertiseOnPublic().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "advertise_on_public." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *GlobalSpecType_AdvertiseCustom:
		odrInfos, err = m.GetAdvertiseCustom().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "advertise_custom." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *GlobalSpecType_DoNotAdvertise:

	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:

	}

	return drInfos, err
}

func (m *GlobalSpecType) GetOriginPoolsDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, vref := range m.GetOriginPools() {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.origin_pools[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("origin_pool.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "origin_pool.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "origin_pools",
			Ref:        vdRef,
		})
	}

	return drInfos, nil
}

// GetOriginPoolsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetOriginPoolsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "origin_pool.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: origin_pool")
	}
	for i, vref := range m.GetOriginPools() {
		if vref == nil {
			return nil, fmt.Errorf("GlobalSpecType.origin_pools[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "origin_pool.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetOriginPoolsWeightsDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetOriginPoolsWeights() == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.GetOriginPoolsWeights() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("origin_pools_weights[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	drInfos = append(drInfos, db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	})

	return drInfos, nil
}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) AdvertiseChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for advertise_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ClusterRetractChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_retract_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) OriginPoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for origin_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated origin_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items origin_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) OriginPoolsWeightsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for origin_pools_weights")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated origin_pools_weights")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items origin_pools_weights")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) IdleTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for idle_timeout")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["advertise_choice"]; exists {
		val := m.GetAdvertiseChoice()
		vOpts := append(opts,
			db.WithValidateField("advertise_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdvertiseChoice().(type) {
	case *GlobalSpecType_AdvertiseOnPublic:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public"]; exists {
			val := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublic).AdvertiseOnPublic
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AdvertiseCustom:
		if fv, exists := v.FldValidators["advertise_choice.advertise_custom"]; exists {
			val := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseCustom).AdvertiseCustom
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DoNotAdvertise:
		if fv, exists := v.FldValidators["advertise_choice.do_not_advertise"]; exists {
			val := m.GetAdvertiseChoice().(*GlobalSpecType_DoNotAdvertise).DoNotAdvertise
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("do_not_advertise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public_default_vip"]; exists {
			val := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublicDefaultVip).AdvertiseOnPublicDefaultVip
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public_default_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_retract_choice"]; exists {
		val := m.GetClusterRetractChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_retract_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterRetractChoice().(type) {
	case *GlobalSpecType_RetractCluster:
		if fv, exists := v.FldValidators["cluster_retract_choice.retract_cluster"]; exists {
			val := m.GetClusterRetractChoice().(*GlobalSpecType_RetractCluster).RetractCluster
			vOpts := append(opts,
				db.WithValidateField("cluster_retract_choice"),
				db.WithValidateField("retract_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_DoNotRetractCluster:
		if fv, exists := v.FldValidators["cluster_retract_choice.do_not_retract_cluster"]; exists {
			val := m.GetClusterRetractChoice().(*GlobalSpecType_DoNotRetractCluster).DoNotRetractCluster
			vOpts := append(opts,
				db.WithValidateField("cluster_retract_choice"),
				db.WithValidateField("do_not_retract_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["dns_info"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_info"))
		for idx, item := range m.GetDnsInfo() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["dns_volterra_managed"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_volterra_managed"))
		if err := fv(ctx, m.GetDnsVolterraManaged(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *GlobalSpecType_HashPolicyChoiceRoundRobin:
		if fv, exists := v.FldValidators["hash_policy_choice.hash_policy_choice_round_robin"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_HashPolicyChoiceRoundRobin).HashPolicyChoiceRoundRobin
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("hash_policy_choice_round_robin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_HashPolicyChoiceLeastActive:
		if fv, exists := v.FldValidators["hash_policy_choice.hash_policy_choice_least_active"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_HashPolicyChoiceLeastActive).HashPolicyChoiceLeastActive
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("hash_policy_choice_least_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_HashPolicyChoiceRandom:
		if fv, exists := v.FldValidators["hash_policy_choice.hash_policy_choice_random"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_HashPolicyChoiceRandom).HashPolicyChoiceRandom
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("hash_policy_choice_random"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_HashPolicyChoiceSourceIpStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.hash_policy_choice_source_ip_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*GlobalSpecType_HashPolicyChoiceSourceIpStickiness).HashPolicyChoiceSourceIpStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("hash_policy_choice_source_ip_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["host_name"]; exists {

		vOpts := append(opts, db.WithValidateField("host_name"))
		if err := fv(ctx, m.GetHostName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["idle_timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("idle_timeout"))
		if err := fv(ctx, m.GetIdleTimeout(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["listen_port"]; exists {

		vOpts := append(opts, db.WithValidateField("listen_port"))
		if err := fv(ctx, m.GetListenPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["origin_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("origin_pools"))
		if err := fv(ctx, m.GetOriginPools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["origin_pools_weights"]; exists {
		vOpts := append(opts, db.WithValidateField("origin_pools_weights"))
		if err := fv(ctx, m.GetOriginPoolsWeights(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["with_sni"]; exists {

		vOpts := append(opts, db.WithValidateField("with_sni"))
		if err := fv(ctx, m.GetWithSni(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdvertiseChoice := v.AdvertiseChoiceValidationRuleHandler
	rulesAdvertiseChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdvertiseChoice(rulesAdvertiseChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.advertise_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["advertise_choice"] = vFn

	vrhClusterRetractChoice := v.ClusterRetractChoiceValidationRuleHandler
	rulesClusterRetractChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterRetractChoice(rulesClusterRetractChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.cluster_retract_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_retract_choice"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.items.string.hostname": "true",
		"ves.io.schema.rules.repeated.max_items":             "32",
		"ves.io.schema.rules.repeated.unique":                "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhOriginPools := v.OriginPoolsValidationRuleHandler
	rulesOriginPools := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhOriginPools(rulesOriginPools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.origin_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_pools"] = vFn

	vrhOriginPoolsWeights := v.OriginPoolsWeightsValidationRuleHandler
	rulesOriginPoolsWeights := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhOriginPoolsWeights(rulesOriginPoolsWeights)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.origin_pools_weights: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_pools_weights"] = vFn

	vrhIdleTimeout := v.IdleTimeoutValidationRuleHandler
	rulesIdleTimeout := map[string]string{
		"ves.io.schema.rules.uint32.lte": "4147200000",
	}
	vFn, err = vrhIdleTimeout(rulesIdleTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.idle_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["idle_timeout"] = vFn

	v.FldValidators["advertise_choice.advertise_on_public"] = ves_io_schema_views.AdvertisePublicValidator().Validate
	v.FldValidators["advertise_choice.advertise_custom"] = ves_io_schema_views.AdvertiseCustomValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["dns_info"] = ves_io_schema_virtual_host_dns_info.DnsInfoValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetAdvertiseChoiceDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolsDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetOriginPoolsWeightsDRefInfo(); err != nil {
		return nil, err
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetAdvertiseChoiceDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetAdvertiseChoice() == nil {
		return []db.DRefInfo{}, nil
	}

	var odrInfos []db.DRefInfo

	switch m.GetAdvertiseChoice().(type) {
	case *ReplaceSpecType_AdvertiseOnPublic:
		odrInfos, err = m.GetAdvertiseOnPublic().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "advertise_on_public." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *ReplaceSpecType_AdvertiseCustom:
		odrInfos, err = m.GetAdvertiseCustom().GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, odri := range odrInfos {
			odri.DRField = "advertise_custom." + odri.DRField
			drInfos = append(drInfos, odri)
		}

	case *ReplaceSpecType_DoNotAdvertise:

	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:

	}

	return drInfos, err
}

func (m *ReplaceSpecType) GetOriginPoolsDRefInfo() ([]db.DRefInfo, error) {
	drInfos := []db.DRefInfo{}
	for i, vref := range m.GetOriginPools() {
		if vref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.origin_pools[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("origin_pool.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "origin_pool.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "origin_pools",
			Ref:        vdRef,
		})
	}

	return drInfos, nil
}

// GetOriginPoolsDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetOriginPoolsDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "origin_pool.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: origin_pool")
	}
	for i, vref := range m.GetOriginPools() {
		if vref == nil {
			return nil, fmt.Errorf("ReplaceSpecType.origin_pools[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "origin_pool.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetOriginPoolsWeightsDRefInfo() ([]db.DRefInfo, error) {
	var (
		drInfos, driSet []db.DRefInfo
		err             error
	)
	_ = driSet
	if m.GetOriginPoolsWeights() == nil {
		return []db.DRefInfo{}, nil
	}

	for idx, e := range m.GetOriginPoolsWeights() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, err
		}
		for _, dri := range driSet {
			dri.DRField = fmt.Sprintf("origin_pools_weights[%v].%s", idx, dri.DRField)
			drInfos = append(drInfos, dri)
		}
	}

	return drInfos, err
}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) AdvertiseChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for advertise_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ClusterRetractChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for cluster_retract_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) HashPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for hash_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) DomainsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for domains")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for domains")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated domains")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items domains")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) OriginPoolsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for origin_pools")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated origin_pools")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items origin_pools")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) OriginPoolsWeightsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.OriginPoolWithWeight, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ves_io_schema_views.OriginPoolWithWeightValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for origin_pools_weights")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.OriginPoolWithWeight)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.OriginPoolWithWeight, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated origin_pools_weights")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items origin_pools_weights")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) IdleTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for idle_timeout")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["advertise_choice"]; exists {
		val := m.GetAdvertiseChoice()
		vOpts := append(opts,
			db.WithValidateField("advertise_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetAdvertiseChoice().(type) {
	case *ReplaceSpecType_AdvertiseOnPublic:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public"]; exists {
			val := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublic).AdvertiseOnPublic
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AdvertiseCustom:
		if fv, exists := v.FldValidators["advertise_choice.advertise_custom"]; exists {
			val := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseCustom).AdvertiseCustom
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_custom"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DoNotAdvertise:
		if fv, exists := v.FldValidators["advertise_choice.do_not_advertise"]; exists {
			val := m.GetAdvertiseChoice().(*ReplaceSpecType_DoNotAdvertise).DoNotAdvertise
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("do_not_advertise"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:
		if fv, exists := v.FldValidators["advertise_choice.advertise_on_public_default_vip"]; exists {
			val := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublicDefaultVip).AdvertiseOnPublicDefaultVip
			vOpts := append(opts,
				db.WithValidateField("advertise_choice"),
				db.WithValidateField("advertise_on_public_default_vip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["cluster_retract_choice"]; exists {
		val := m.GetClusterRetractChoice()
		vOpts := append(opts,
			db.WithValidateField("cluster_retract_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetClusterRetractChoice().(type) {
	case *ReplaceSpecType_RetractCluster:
		if fv, exists := v.FldValidators["cluster_retract_choice.retract_cluster"]; exists {
			val := m.GetClusterRetractChoice().(*ReplaceSpecType_RetractCluster).RetractCluster
			vOpts := append(opts,
				db.WithValidateField("cluster_retract_choice"),
				db.WithValidateField("retract_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_DoNotRetractCluster:
		if fv, exists := v.FldValidators["cluster_retract_choice.do_not_retract_cluster"]; exists {
			val := m.GetClusterRetractChoice().(*ReplaceSpecType_DoNotRetractCluster).DoNotRetractCluster
			vOpts := append(opts,
				db.WithValidateField("cluster_retract_choice"),
				db.WithValidateField("do_not_retract_cluster"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["dns_volterra_managed"]; exists {

		vOpts := append(opts, db.WithValidateField("dns_volterra_managed"))
		if err := fv(ctx, m.GetDnsVolterraManaged(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["domains"]; exists {
		vOpts := append(opts, db.WithValidateField("domains"))
		if err := fv(ctx, m.GetDomains(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["hash_policy_choice"]; exists {
		val := m.GetHashPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("hash_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetHashPolicyChoice().(type) {
	case *ReplaceSpecType_HashPolicyChoiceRoundRobin:
		if fv, exists := v.FldValidators["hash_policy_choice.hash_policy_choice_round_robin"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_HashPolicyChoiceRoundRobin).HashPolicyChoiceRoundRobin
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("hash_policy_choice_round_robin"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_HashPolicyChoiceLeastActive:
		if fv, exists := v.FldValidators["hash_policy_choice.hash_policy_choice_least_active"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_HashPolicyChoiceLeastActive).HashPolicyChoiceLeastActive
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("hash_policy_choice_least_active"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_HashPolicyChoiceRandom:
		if fv, exists := v.FldValidators["hash_policy_choice.hash_policy_choice_random"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_HashPolicyChoiceRandom).HashPolicyChoiceRandom
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("hash_policy_choice_random"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness:
		if fv, exists := v.FldValidators["hash_policy_choice.hash_policy_choice_source_ip_stickiness"]; exists {
			val := m.GetHashPolicyChoice().(*ReplaceSpecType_HashPolicyChoiceSourceIpStickiness).HashPolicyChoiceSourceIpStickiness
			vOpts := append(opts,
				db.WithValidateField("hash_policy_choice"),
				db.WithValidateField("hash_policy_choice_source_ip_stickiness"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["idle_timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("idle_timeout"))
		if err := fv(ctx, m.GetIdleTimeout(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["listen_port"]; exists {

		vOpts := append(opts, db.WithValidateField("listen_port"))
		if err := fv(ctx, m.GetListenPort(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["origin_pools"]; exists {
		vOpts := append(opts, db.WithValidateField("origin_pools"))
		if err := fv(ctx, m.GetOriginPools(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["origin_pools_weights"]; exists {
		vOpts := append(opts, db.WithValidateField("origin_pools_weights"))
		if err := fv(ctx, m.GetOriginPoolsWeights(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["with_sni"]; exists {

		vOpts := append(opts, db.WithValidateField("with_sni"))
		if err := fv(ctx, m.GetWithSni(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhAdvertiseChoice := v.AdvertiseChoiceValidationRuleHandler
	rulesAdvertiseChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhAdvertiseChoice(rulesAdvertiseChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.advertise_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["advertise_choice"] = vFn

	vrhClusterRetractChoice := v.ClusterRetractChoiceValidationRuleHandler
	rulesClusterRetractChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhClusterRetractChoice(rulesClusterRetractChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.cluster_retract_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["cluster_retract_choice"] = vFn

	vrhHashPolicyChoice := v.HashPolicyChoiceValidationRuleHandler
	rulesHashPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhHashPolicyChoice(rulesHashPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.hash_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["hash_policy_choice"] = vFn

	vrhDomains := v.DomainsValidationRuleHandler
	rulesDomains := map[string]string{
		"ves.io.schema.rules.repeated.items.string.hostname": "true",
		"ves.io.schema.rules.repeated.max_items":             "32",
		"ves.io.schema.rules.repeated.unique":                "true",
	}
	vFn, err = vrhDomains(rulesDomains)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.domains: %s", err)
		panic(errMsg)
	}
	v.FldValidators["domains"] = vFn

	vrhOriginPools := v.OriginPoolsValidationRuleHandler
	rulesOriginPools := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhOriginPools(rulesOriginPools)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.origin_pools: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_pools"] = vFn

	vrhOriginPoolsWeights := v.OriginPoolsWeightsValidationRuleHandler
	rulesOriginPoolsWeights := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhOriginPoolsWeights(rulesOriginPoolsWeights)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.origin_pools_weights: %s", err)
		panic(errMsg)
	}
	v.FldValidators["origin_pools_weights"] = vFn

	vrhIdleTimeout := v.IdleTimeoutValidationRuleHandler
	rulesIdleTimeout := map[string]string{
		"ves.io.schema.rules.uint32.lte": "4147200000",
	}
	vFn, err = vrhIdleTimeout(rulesIdleTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.idle_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["idle_timeout"] = vFn

	v.FldValidators["advertise_choice.advertise_on_public"] = ves_io_schema_views.AdvertisePublicValidator().Validate
	v.FldValidators["advertise_choice.advertise_custom"] = ves_io_schema_views.AdvertiseCustomValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetAdvertiseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AdvertiseChoice.(type) {
	case nil:
		o.AdvertiseChoice = nil

	case *CreateSpecType_AdvertiseCustom:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *CreateSpecType_AdvertiseOnPublic:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *CreateSpecType_AdvertiseOnPublicDefaultVip:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *CreateSpecType_DoNotAdvertise:
		o.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetAdvertiseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AdvertiseChoice.(type) {
	case nil:
		r.AdvertiseChoice = nil

	case *GlobalSpecType_AdvertiseCustom:
		r.AdvertiseChoice = &CreateSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *GlobalSpecType_AdvertiseOnPublic:
		r.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		r.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *GlobalSpecType_DoNotAdvertise:
		r.AdvertiseChoice = &CreateSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetClusterRetractChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClusterRetractChoice.(type) {
	case nil:
		o.ClusterRetractChoice = nil

	case *CreateSpecType_DoNotRetractCluster:
		o.ClusterRetractChoice = &GlobalSpecType_DoNotRetractCluster{DoNotRetractCluster: of.DoNotRetractCluster}

	case *CreateSpecType_RetractCluster:
		o.ClusterRetractChoice = &GlobalSpecType_RetractCluster{RetractCluster: of.RetractCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetClusterRetractChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClusterRetractChoice.(type) {
	case nil:
		r.ClusterRetractChoice = nil

	case *GlobalSpecType_DoNotRetractCluster:
		r.ClusterRetractChoice = &CreateSpecType_DoNotRetractCluster{DoNotRetractCluster: of.DoNotRetractCluster}

	case *GlobalSpecType_RetractCluster:
		r.ClusterRetractChoice = &CreateSpecType_RetractCluster{RetractCluster: of.RetractCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetHashPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HashPolicyChoice.(type) {
	case nil:
		o.HashPolicyChoice = nil

	case *CreateSpecType_HashPolicyChoiceLeastActive:
		o.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceLeastActive{HashPolicyChoiceLeastActive: of.HashPolicyChoiceLeastActive}

	case *CreateSpecType_HashPolicyChoiceRandom:
		o.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceRandom{HashPolicyChoiceRandom: of.HashPolicyChoiceRandom}

	case *CreateSpecType_HashPolicyChoiceRoundRobin:
		o.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceRoundRobin{HashPolicyChoiceRoundRobin: of.HashPolicyChoiceRoundRobin}

	case *CreateSpecType_HashPolicyChoiceSourceIpStickiness:
		o.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceSourceIpStickiness{HashPolicyChoiceSourceIpStickiness: of.HashPolicyChoiceSourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetHashPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HashPolicyChoice.(type) {
	case nil:
		r.HashPolicyChoice = nil

	case *GlobalSpecType_HashPolicyChoiceLeastActive:
		r.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceLeastActive{HashPolicyChoiceLeastActive: of.HashPolicyChoiceLeastActive}

	case *GlobalSpecType_HashPolicyChoiceRandom:
		r.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceRandom{HashPolicyChoiceRandom: of.HashPolicyChoiceRandom}

	case *GlobalSpecType_HashPolicyChoiceRoundRobin:
		r.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceRoundRobin{HashPolicyChoiceRoundRobin: of.HashPolicyChoiceRoundRobin}

	case *GlobalSpecType_HashPolicyChoiceSourceIpStickiness:
		r.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceSourceIpStickiness{HashPolicyChoiceSourceIpStickiness: of.HashPolicyChoiceSourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.GetAdvertiseChoiceFromGlobalSpecType(f)
	m.GetClusterRetractChoiceFromGlobalSpecType(f)
	m.DnsVolterraManaged = f.GetDnsVolterraManaged()
	m.Domains = f.GetDomains()
	m.GetHashPolicyChoiceFromGlobalSpecType(f)
	m.IdleTimeout = f.GetIdleTimeout()
	m.ListenPort = f.GetListenPort()
	m.OriginPoolsWeights = f.GetOriginPoolsWeights()
	m.WithSni = f.GetWithSni()
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	m1.SetAdvertiseChoiceToGlobalSpecType(f)
	m1.SetClusterRetractChoiceToGlobalSpecType(f)
	f.DnsVolterraManaged = m1.DnsVolterraManaged
	f.Domains = m1.Domains
	m1.SetHashPolicyChoiceToGlobalSpecType(f)
	f.IdleTimeout = m1.IdleTimeout
	f.ListenPort = m1.ListenPort
	f.OriginPoolsWeights = m1.OriginPoolsWeights
	f.WithSni = m1.WithSni
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetAdvertiseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AdvertiseChoice.(type) {
	case nil:
		o.AdvertiseChoice = nil

	case *GetSpecType_AdvertiseCustom:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *GetSpecType_AdvertiseOnPublic:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *GetSpecType_AdvertiseOnPublicDefaultVip:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *GetSpecType_DoNotAdvertise:
		o.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetAdvertiseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AdvertiseChoice.(type) {
	case nil:
		r.AdvertiseChoice = nil

	case *GlobalSpecType_AdvertiseCustom:
		r.AdvertiseChoice = &GetSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *GlobalSpecType_AdvertiseOnPublic:
		r.AdvertiseChoice = &GetSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		r.AdvertiseChoice = &GetSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *GlobalSpecType_DoNotAdvertise:
		r.AdvertiseChoice = &GetSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetClusterRetractChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClusterRetractChoice.(type) {
	case nil:
		o.ClusterRetractChoice = nil

	case *GetSpecType_DoNotRetractCluster:
		o.ClusterRetractChoice = &GlobalSpecType_DoNotRetractCluster{DoNotRetractCluster: of.DoNotRetractCluster}

	case *GetSpecType_RetractCluster:
		o.ClusterRetractChoice = &GlobalSpecType_RetractCluster{RetractCluster: of.RetractCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetClusterRetractChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClusterRetractChoice.(type) {
	case nil:
		r.ClusterRetractChoice = nil

	case *GlobalSpecType_DoNotRetractCluster:
		r.ClusterRetractChoice = &GetSpecType_DoNotRetractCluster{DoNotRetractCluster: of.DoNotRetractCluster}

	case *GlobalSpecType_RetractCluster:
		r.ClusterRetractChoice = &GetSpecType_RetractCluster{RetractCluster: of.RetractCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetHashPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HashPolicyChoice.(type) {
	case nil:
		o.HashPolicyChoice = nil

	case *GetSpecType_HashPolicyChoiceLeastActive:
		o.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceLeastActive{HashPolicyChoiceLeastActive: of.HashPolicyChoiceLeastActive}

	case *GetSpecType_HashPolicyChoiceRandom:
		o.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceRandom{HashPolicyChoiceRandom: of.HashPolicyChoiceRandom}

	case *GetSpecType_HashPolicyChoiceRoundRobin:
		o.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceRoundRobin{HashPolicyChoiceRoundRobin: of.HashPolicyChoiceRoundRobin}

	case *GetSpecType_HashPolicyChoiceSourceIpStickiness:
		o.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceSourceIpStickiness{HashPolicyChoiceSourceIpStickiness: of.HashPolicyChoiceSourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetHashPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HashPolicyChoice.(type) {
	case nil:
		r.HashPolicyChoice = nil

	case *GlobalSpecType_HashPolicyChoiceLeastActive:
		r.HashPolicyChoice = &GetSpecType_HashPolicyChoiceLeastActive{HashPolicyChoiceLeastActive: of.HashPolicyChoiceLeastActive}

	case *GlobalSpecType_HashPolicyChoiceRandom:
		r.HashPolicyChoice = &GetSpecType_HashPolicyChoiceRandom{HashPolicyChoiceRandom: of.HashPolicyChoiceRandom}

	case *GlobalSpecType_HashPolicyChoiceRoundRobin:
		r.HashPolicyChoice = &GetSpecType_HashPolicyChoiceRoundRobin{HashPolicyChoiceRoundRobin: of.HashPolicyChoiceRoundRobin}

	case *GlobalSpecType_HashPolicyChoiceSourceIpStickiness:
		r.HashPolicyChoice = &GetSpecType_HashPolicyChoiceSourceIpStickiness{HashPolicyChoiceSourceIpStickiness: of.HashPolicyChoiceSourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.GetAdvertiseChoiceFromGlobalSpecType(f)
	m.GetClusterRetractChoiceFromGlobalSpecType(f)
	m.DnsInfo = f.GetDnsInfo()
	m.DnsVolterraManaged = f.GetDnsVolterraManaged()
	m.Domains = f.GetDomains()
	m.GetHashPolicyChoiceFromGlobalSpecType(f)
	m.HostName = f.GetHostName()
	m.IdleTimeout = f.GetIdleTimeout()
	m.ListenPort = f.GetListenPort()
	m.OriginPools = f.GetOriginPools()
	m.OriginPoolsWeights = f.GetOriginPoolsWeights()
	m.WithSni = f.GetWithSni()
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	m1.SetAdvertiseChoiceToGlobalSpecType(f)
	m1.SetClusterRetractChoiceToGlobalSpecType(f)
	f.DnsInfo = m1.DnsInfo
	f.DnsVolterraManaged = m1.DnsVolterraManaged
	f.Domains = m1.Domains
	m1.SetHashPolicyChoiceToGlobalSpecType(f)
	f.HostName = m1.HostName
	f.IdleTimeout = m1.IdleTimeout
	f.ListenPort = m1.ListenPort
	f.OriginPools = m1.OriginPools
	f.OriginPoolsWeights = m1.OriginPoolsWeights
	f.WithSni = m1.WithSni
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetAdvertiseChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.AdvertiseChoice.(type) {
	case nil:
		o.AdvertiseChoice = nil

	case *ReplaceSpecType_AdvertiseCustom:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *ReplaceSpecType_AdvertiseOnPublic:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *ReplaceSpecType_AdvertiseOnPublicDefaultVip:
		o.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *ReplaceSpecType_DoNotAdvertise:
		o.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetAdvertiseChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.AdvertiseChoice.(type) {
	case nil:
		r.AdvertiseChoice = nil

	case *GlobalSpecType_AdvertiseCustom:
		r.AdvertiseChoice = &ReplaceSpecType_AdvertiseCustom{AdvertiseCustom: of.AdvertiseCustom}

	case *GlobalSpecType_AdvertiseOnPublic:
		r.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublic{AdvertiseOnPublic: of.AdvertiseOnPublic}

	case *GlobalSpecType_AdvertiseOnPublicDefaultVip:
		r.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublicDefaultVip{AdvertiseOnPublicDefaultVip: of.AdvertiseOnPublicDefaultVip}

	case *GlobalSpecType_DoNotAdvertise:
		r.AdvertiseChoice = &ReplaceSpecType_DoNotAdvertise{DoNotAdvertise: of.DoNotAdvertise}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetClusterRetractChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ClusterRetractChoice.(type) {
	case nil:
		o.ClusterRetractChoice = nil

	case *ReplaceSpecType_DoNotRetractCluster:
		o.ClusterRetractChoice = &GlobalSpecType_DoNotRetractCluster{DoNotRetractCluster: of.DoNotRetractCluster}

	case *ReplaceSpecType_RetractCluster:
		o.ClusterRetractChoice = &GlobalSpecType_RetractCluster{RetractCluster: of.RetractCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetClusterRetractChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ClusterRetractChoice.(type) {
	case nil:
		r.ClusterRetractChoice = nil

	case *GlobalSpecType_DoNotRetractCluster:
		r.ClusterRetractChoice = &ReplaceSpecType_DoNotRetractCluster{DoNotRetractCluster: of.DoNotRetractCluster}

	case *GlobalSpecType_RetractCluster:
		r.ClusterRetractChoice = &ReplaceSpecType_RetractCluster{RetractCluster: of.RetractCluster}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetHashPolicyChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.HashPolicyChoice.(type) {
	case nil:
		o.HashPolicyChoice = nil

	case *ReplaceSpecType_HashPolicyChoiceLeastActive:
		o.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceLeastActive{HashPolicyChoiceLeastActive: of.HashPolicyChoiceLeastActive}

	case *ReplaceSpecType_HashPolicyChoiceRandom:
		o.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceRandom{HashPolicyChoiceRandom: of.HashPolicyChoiceRandom}

	case *ReplaceSpecType_HashPolicyChoiceRoundRobin:
		o.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceRoundRobin{HashPolicyChoiceRoundRobin: of.HashPolicyChoiceRoundRobin}

	case *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness:
		o.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceSourceIpStickiness{HashPolicyChoiceSourceIpStickiness: of.HashPolicyChoiceSourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetHashPolicyChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.HashPolicyChoice.(type) {
	case nil:
		r.HashPolicyChoice = nil

	case *GlobalSpecType_HashPolicyChoiceLeastActive:
		r.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceLeastActive{HashPolicyChoiceLeastActive: of.HashPolicyChoiceLeastActive}

	case *GlobalSpecType_HashPolicyChoiceRandom:
		r.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceRandom{HashPolicyChoiceRandom: of.HashPolicyChoiceRandom}

	case *GlobalSpecType_HashPolicyChoiceRoundRobin:
		r.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceRoundRobin{HashPolicyChoiceRoundRobin: of.HashPolicyChoiceRoundRobin}

	case *GlobalSpecType_HashPolicyChoiceSourceIpStickiness:
		r.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceSourceIpStickiness{HashPolicyChoiceSourceIpStickiness: of.HashPolicyChoiceSourceIpStickiness}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	if f == nil {
		return
	}
	m.GetAdvertiseChoiceFromGlobalSpecType(f)
	m.GetClusterRetractChoiceFromGlobalSpecType(f)
	m.DnsVolterraManaged = f.GetDnsVolterraManaged()
	m.Domains = f.GetDomains()
	m.GetHashPolicyChoiceFromGlobalSpecType(f)
	m.IdleTimeout = f.GetIdleTimeout()
	m.ListenPort = f.GetListenPort()
	m.OriginPools = f.GetOriginPools()
	m.OriginPoolsWeights = f.GetOriginPoolsWeights()
	m.WithSni = f.GetWithSni()
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m1 := m.DeepCopy()
	_ = m1
	if f == nil {
		return
	}
	m1.SetAdvertiseChoiceToGlobalSpecType(f)
	m1.SetClusterRetractChoiceToGlobalSpecType(f)
	f.DnsVolterraManaged = m1.DnsVolterraManaged
	f.Domains = m1.Domains
	m1.SetHashPolicyChoiceToGlobalSpecType(f)
	f.IdleTimeout = m1.IdleTimeout
	f.ListenPort = m1.ListenPort
	f.OriginPools = m1.OriginPools
	f.OriginPoolsWeights = m1.OriginPoolsWeights
	f.WithSni = m1.WithSni
}

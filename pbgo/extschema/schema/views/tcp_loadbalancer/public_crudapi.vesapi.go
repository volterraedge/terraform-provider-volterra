// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package tcp_loadbalancer

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"

	google_protobuf "github.com/gogo/protobuf/types"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	multierror "github.com/hashicorp/go-multierror"
	"go.uber.org/zap"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/client/configapi"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

const (
	// CreateRequestFQN is the fully-qualified-name of the CreateRequest message
	CreateRequestFQN = "ves.io.schema.views.tcp_loadbalancer.CreateRequest"
	// CreateResponseFQN is the fully-qualified-name of the CreateResponse message
	CreateResponseFQN = "ves.io.schema.views.tcp_loadbalancer.CreateResponse"
	// ReplaceRequestFQN is the fully-qualified-name of the ReplaceRequest message
	ReplaceRequestFQN = "ves.io.schema.views.tcp_loadbalancer.ReplaceRequest"
	// ReplaceResponseFQN is the fully-qualified-name of the ReplaceResponse message
	ReplaceResponseFQN = "ves.io.schema.views.tcp_loadbalancer.ReplaceResponse"
	// GetRequestFQN is the fully-qualified-name of the GetRequest message
	GetRequestFQN = "ves.io.schema.views.tcp_loadbalancer.GetRequest"
	// GetResponseFQN is the fully-qualified-name of the GetResponse message
	GetResponseFQN = "ves.io.schema.views.tcp_loadbalancer.GetResponse"
	// ListRequestFQN is the fully-qualified-name of the ListRequest message
	ListRequestFQN = "ves.io.schema.views.tcp_loadbalancer.ListRequest"
	// ListResponseFQN is the fully-qualified-name of the ListResponse message
	ListResponseFQN = "ves.io.schema.views.tcp_loadbalancer.ListResponse"
	// DeleteRequestFQN is the fully-qualified-name of the DeleteRequest message
	DeleteRequestFQN = "ves.io.schema.views.tcp_loadbalancer.DeleteRequest"
	// DeleteResponseFQN is the fully-qualified-name of the DeleteResponse message
	DeleteResponseFQN = "ves.io.schema.views.tcp_loadbalancer.DeleteResponse"
)

// CLIENT side
func NewCreateRequest(e db.Entry) (*CreateRequest, error) {
	r := &CreateRequest{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewReplaceRequest(e db.Entry) (*ReplaceRequest, error) {
	r := &ReplaceRequest{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewGetRequest(key string, opts ...server.CRUDCallOpt) (*GetRequest, error) {
	strs := strings.Split(key, "/")
	if len(strs) != 2 {
		return nil, fmt.Errorf("key must have namespace and name separated by /, but found %s", key)
	}
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	var rspFmt GetResponseFormatCode
	switch ccOpts.ResponseFormat {
	case server.DefaultForm:
		rspFmt = GET_RSP_FORMAT_DEFAULT
	case server.CreateRequestForm:
		rspFmt = GET_RSP_FORMAT_FOR_CREATE
	case server.ReplaceRequestForm:
		rspFmt = GET_RSP_FORMAT_FOR_REPLACE
	case server.StatusForm:
		rspFmt = GET_RSP_FORMAT_STATUS
	case server.GetSpecForm:
		rspFmt = GET_RSP_FORMAT_READ
	case server.BrokenRefsForm:
		rspFmt = GET_RSP_FORMAT_BROKEN_REFERENCES
	default:
		return nil, fmt.Errorf("Unsupported Response Format %s", ccOpts.ResponseFormat)
	}
	return &GetRequest{Namespace: strs[0], Name: strs[1], ResponseFormat: rspFmt}, nil
}
func (m *GetRequest) ResponseFormatString() string {
	return m.GetResponseFormat().String()
}

func NewListRequest(opts ...server.CRUDCallOpt) *ListRequest {
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	return &ListRequest{Namespace: ccOpts.Namespace}
}

func NewDeleteRequest(key string) (*DeleteRequest, error) {
	strs := strings.Split(key, "/")
	if len(strs) != 2 {
		return nil, fmt.Errorf("key must have namespace and name separated by /, but found %s", key)
	}
	return &DeleteRequest{Namespace: strs[0], Name: strs[1]}, nil
}

// GRPC Client
type crudAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient APIClient
}

func (c *crudAPIGrpcClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *CreateRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*CreateRequest)
		if !ok {
			return nil, fmt.Errorf("%T is not *CreateRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Create")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return nil, err
			}
		}
	}

	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Create(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	obj := NewDBObject(nil)
	rsp.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rsp, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIGrpcClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *ReplaceRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*ReplaceRequest)
		if !ok {
			return fmt.Errorf("%T is not *ReplaceRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewReplaceRequest(e)
		if err != nil {
			return errors.Wrap(err, "Replace")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return err
			}
		}
	}

	ctx = client.AddHdrsToCtx(cco.Headers, ctx)
	req.ResourceVersion = cco.ResourceVersion

	rsp, err := c.grpcClient.Replace(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return nil

}

func (c *crudAPIGrpcClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Get(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(nil)
		gRsp.ToObject(obj)
		return obj, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(nil)
		gRsp.ToObject(respDetail.Entry)
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIGrpcClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIGrpcClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	req := NewListRequest(opts...)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		req.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}
	req.ReportFields = cco.ReportFields
	req.ReportStatusFields = cco.ReportStatusFields
	rsp, err := c.grpcClient.List(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIGrpcClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	req, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Delete(ctx, req, cco.GrpcCallOpts...)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func NewCRUDAPIGrpcClient(cc *grpc.ClientConn) server.CRUDClient {
	ccl := &crudAPIGrpcClient{cc, NewAPIClient(cc)}
	return ccl
}

// REST Client
type crudAPIRestClient struct {
	baseURL string
	client  http.Client
}

func (c *crudAPIRestClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	got := 0
	if e != nil {
		got++
	}
	if cco.RequestProto != nil {
		got++
	}
	if cco.RequestJSON != "" {
		got++
	}
	if got != 1 {
		return nil, fmt.Errorf("Only one of entry(%v), WithRequestProto()(%v) or WithRequestJSON()(%v) should be specified", e, cco.RequestProto, cco.RequestJSON)
	}

	var jsn string
	if cco.RequestJSON != "" {
		jsn = cco.RequestJSON
	} else {
		var req *CreateRequest
		if cco.RequestProto != nil {
			r, ok := cco.RequestProto.(*CreateRequest)
			if !ok {
				return nil, fmt.Errorf("%T is not *CreateRequest", cco.RequestProto)
			}
			req = r
		} else {
			r, err := NewCreateRequest(e)
			if err != nil {
				return nil, errors.Wrap(err, "Creating new create request")
			}
			req = r
			if cco.ObjToMsgConverter != nil {
				if err := cco.ObjToMsgConverter(e, req); err != nil {
					return nil, err
				}
			}
		}

		j, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "RestClient Create")
		}
		jsn = j
	}

	var namespace string
	reqMap := make(map[string]interface{})
	if err := json.Unmarshal([]byte(jsn), &reqMap); err != nil {
		return nil, errors.Wrapf(err, "Unmarshaling json to find namespace/name")
	}
	md, ok := reqMap["metadata"].(map[string]interface{})
	if !ok {
		return nil, fmt.Errorf("Request %s does not have 'metadata'", jsn)
	}
	if val, ok := md["namespace"].(string); ok {
		namespace = val
	} else {
		return nil, fmt.Errorf("Request %s does not have 'metadata.namespace'", jsn)
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/tcp_loadbalancers", c.baseURL, namespace)

	hReq, err := http.NewRequest("POST", url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	client.AddHdrsToReq(cco.Headers, hReq)
	hReq.Header.Set("Content-Type", "application/json")

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}
	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient create")
	}

	rspo := &CreateResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	configapi.TranscribeCall(ctx, jsn, string(body))
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}

	obj := NewDBObject(nil)
	rspo.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rspo, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIRestClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	got := 0
	if e != nil {
		got++
	}
	if cco.RequestProto != nil {
		got++
	}
	if cco.RequestJSON != "" {
		got++
	}
	if got != 1 {
		return fmt.Errorf("Only one of entry(%v), WithRequestProto()(%v) or WithRequestJSON()(%v) should be specified", e, cco.RequestProto, cco.RequestJSON)
	}

	var jsn string
	if cco.RequestJSON != "" {
		jsn = cco.RequestJSON
	} else {
		var rReq *ReplaceRequest
		if cco.RequestProto != nil {
			r, ok := cco.RequestProto.(*ReplaceRequest)
			if !ok {
				return fmt.Errorf("%T is not *ReplaceRequest", cco.RequestProto)
			}
			rReq = r
		} else {
			r, err := NewReplaceRequest(e)
			if err != nil {
				return errors.Wrap(err, "Creating new replace request")
			}
			rReq = r
			if cco.ObjToMsgConverter != nil {
				if err := cco.ObjToMsgConverter(e, rReq); err != nil {
					return err
				}
			}
		}

		rReq.ResourceVersion = cco.ResourceVersion
		j, err := codec.ToJSON(rReq, codec.ToWithUseProtoFieldName())
		if err != nil {
			return errors.Wrap(err, "RestClient Replace")
		}
		jsn = j
	}

	var namespace, name string
	_ = namespace
	reqMap := make(map[string]interface{})
	if err := json.Unmarshal([]byte(jsn), &reqMap); err != nil {
		return errors.Wrapf(err, "Unmarshaling json to find namespace/name")
	}
	md, ok := reqMap["metadata"].(map[string]interface{})
	if !ok {
		return fmt.Errorf("Request %s does not have 'metadata'", jsn)
	}

	if val, ok := md["namespace"].(string); ok {
		namespace = val
	} else {
		return fmt.Errorf("Request %s does not have 'metadata.namespace'", jsn)
	}

	if val, ok := md["name"].(string); ok {
		name = val
	} else {
		return fmt.Errorf("Request %s does not have 'metadata.name'", jsn)
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/tcp_loadbalancers/%s", c.baseURL, namespace, name)

	hReq, err := http.NewRequest(http.MethodPut, url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return errors.Wrap(err, "RestClient replace")
	}
	hReq = hReq.WithContext(ctx)
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return fmt.Errorf("Unsuccessful PUT at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}

	if _, err := io.ReadAll(rsp.Body); err != nil {
		return errors.Wrap(err, "RestClient replace")
	}

	configapi.TranscribeCall(ctx, jsn, nil)
	return nil

}

func (c *crudAPIRestClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/tcp_loadbalancers/%s", c.baseURL, req.Namespace, req.Name)
	hReq, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	q.Add("response_format", fmt.Sprintf("%d", req.ResponseFormat))
	hReq.URL.RawQuery += q.Encode()

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return nil, fmt.Errorf("Unsuccessful GET at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}
	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Get")
	}

	rspo := &GetResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rspo.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	configapi.TranscribeCall(ctx, req, rspo)
	return rspo, nil
}

func (c *crudAPIRestClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(nil)
		gRsp.ToObject(obj)
		return obj, err
	}
	return nil, err

}

func (c *crudAPIRestClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(nil)
		gRsp.ToObject(respDetail.Entry)
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}

	return nil, err

}

func (c *crudAPIRestClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIRestClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIRestClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	req := NewListRequest(opts...)
	_ = req
	url := fmt.Sprintf("%s/public/namespaces/%s/tcp_loadbalancers", c.baseURL, req.Namespace)

	hReq, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		q.Add("label_filter", cco.LabelFilter[0])
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	for _, fName := range cco.ReportFields {
		q.Add("report_fields", fName)
	}
	for _, fName := range cco.ReportStatusFields {
		q.Add("report_status_fields", fName)
	}

	hReq.URL.RawQuery += q.Encode()
	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return nil, fmt.Errorf("Unsuccessful List at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}
	body, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient List")
	}

	rspo := &ListResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	configapi.TranscribeCall(ctx, req, rspo)
	return rspo, nil
}

func (c *crudAPIRestClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIRestClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	dReq, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/tcp_loadbalancers/%s", c.baseURL, dReq.Namespace, dReq.Name)
	hReq, err := http.NewRequest(http.MethodDelete, url, nil)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := io.ReadAll(rsp.Body)
		if err != nil {
			return fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err.Error())
		}
		return fmt.Errorf("Unsuccessful DELETE at URL %s, status code %d, body %s", url, rsp.StatusCode, body)
	}

	_, err = io.ReadAll(rsp.Body)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}
	configapi.TranscribeCall(ctx, dReq, nil)

	return nil

}

func NewCRUDAPIRestClient(baseURL string, cl http.Client) server.CRUDClient {
	var bURL string
	if strings.HasSuffix(baseURL, "/") {
		bURL = baseURL[:len(baseURL)-1]
	} else {
		bURL = baseURL
	}
	crcl := &crudAPIRestClient{bURL, cl}
	return crcl
}

// INPROC Client (satisfying APIClient interface)
type APIInprocClient struct {
	svc svcfw.Service
}

func (c *APIInprocClient) Create(ctx context.Context, req *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.views.tcp_loadbalancer.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.views.tcp_loadbalancer")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.views.tcp_loadbalancer.API.Create")
	rsp, err := oah.Create(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) Replace(ctx context.Context, req *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.views.tcp_loadbalancer.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.views.tcp_loadbalancer")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.views.tcp_loadbalancer.API.Replace")
	if rsp, err := oah.Replace(ctx, req); err != nil {
		return rsp, err
	}
	return NewObjectReplaceRsp(nil)
}

func (c *APIInprocClient) Get(ctx context.Context, req *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.views.tcp_loadbalancer.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.views.tcp_loadbalancer")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.views.tcp_loadbalancer.API.Get")
	rsp, err := oah.Get(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) List(ctx context.Context, req *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.views.tcp_loadbalancer.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.views.tcp_loadbalancer")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.views.tcp_loadbalancer.API.List")
	rsp, err := oah.List(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) Delete(ctx context.Context, req *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.views.tcp_loadbalancer.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.views.tcp_loadbalancer")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	ctx = server.ContextWithRpcFQN(ctx, "ves.io.schema.views.tcp_loadbalancer.API.Delete")
	rsp, err := oah.Delete(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func NewAPIInprocClient(svc svcfw.Service) APIClient {
	return &APIInprocClient{svc: svc}
}

// INPROC CRUD Client (satisfying server.CRUDClient interface)
type crudAPIInprocClient struct {
	cl APIClient
}

func (c *crudAPIInprocClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewCreateRequest(e)
	if err != nil {
		return nil, errors.Wrap(err, "Creating new create request")
	}
	if cco.ObjToMsgConverter != nil {
		if err := cco.ObjToMsgConverter(e, req); err != nil {
			return nil, err
		}
	}

	rsp, err := c.cl.Create(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	if err != nil {
		return nil, err
	}
	obj := NewDBObject(nil)
	rsp.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rsp, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIInprocClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewReplaceRequest(e)
	if err != nil {
		return errors.Wrap(err, "Creating new replace request")
	}
	if cco.ObjToMsgConverter != nil {
		if err := cco.ObjToMsgConverter(e, req); err != nil {
			return err
		}
	}

	req.ResourceVersion = cco.ResourceVersion

	rsp, err := c.cl.Replace(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func (c *crudAPIInprocClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}
	rsp, err := c.cl.Get(ctx, req)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIInprocClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(nil)
		gRsp.ToObject(obj)
		return obj, err
	}
	return nil, err

}

func (c *crudAPIInprocClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(nil)
		gRsp.ToObject(respDetail.Entry)
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}

	return nil, err

}

func (c *crudAPIInprocClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIInprocClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIInprocClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req := NewListRequest(opts...)
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		req.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	rsp, err := c.cl.List(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, err
}

func (c *crudAPIInprocClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIInprocClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	rsp, err := c.cl.Delete(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func newCRUDAPIInprocClient(svc svcfw.Service) *crudAPIInprocClient {
	return &crudAPIInprocClient{cl: NewAPIInprocClient(svc)}
}

func NewCRUDAPIInprocClient(svc svcfw.Service) server.CRUDClient {
	return newCRUDAPIInprocClient(svc)
}

// SERVER side
type APISrv struct {
	oType   string
	tblName string
	sf      svcfw.Service

	opts *server.CrudServerOpts
	// derived from opts
	apiWrapper *server.DBAPIWrapper

	// resource handler function pointers
}

func (s *APISrv) validateTransport(ctx context.Context) error {
	if s.sf.IsTransportNotSupported("ves.io.schema.views.tcp_loadbalancer.API", server.TransportFromContext(ctx)) {
		userMsg := fmt.Sprintf("ves.io.schema.views.tcp_loadbalancer.API not allowed in transport '%s'", server.TransportFromContext(ctx))
		err := svcfw.NewPermissionDeniedError(userMsg, fmt.Errorf(userMsg))
		return server.GRPCStatusFromError(err).Err()
	}
	return nil
}

func (s *APISrv) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if err := svcfw.FillOneofDefaultChoice(ctx, s.sf, req); err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.views.tcp_loadbalancer.API.Create"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.views.tcp_loadbalancer.API.Create"), zap.Error(err))
			}
		}
	}
	reqMsgFQN := "ves.io.schema.views.tcp_loadbalancer.CreateRequest"
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, reqMsgFQN, req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	obj := NewDBObject(nil)
	req.ToObject(obj)
	if conv, exists := s.sf.Config().MsgToObjConverters[reqMsgFQN]; exists {
		if err := conv(req, obj); err != nil {
			return nil, err
		}
	}
	obj.SystemMetadata = &ves_io_schema.SystemObjectMetaType{}
	rsrcReq := &server.ResourceCreateRequest{Entry: obj}
	rsrcRsp, err := s.opts.RsrcHandler.CreateFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "CreateResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectCreateRsp(rsrcRsp.Entry)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "CreateResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rspMsgFQN := "ves.io.schema.views.tcp_loadbalancer.CreateResponse"
	if conv, exists := s.sf.Config().ObjToMsgConverters[rspMsgFQN]; exists {
		if err := conv(rsrcRsp.Entry, rsp); err != nil {
			return nil, err
		}
	}
	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.sf, "ves.io.schema.views.tcp_loadbalancer.API.CreateResponse", rsp)...)
	return rsp, nil
}

func (s *APISrv) Replace(ctx context.Context, req *ReplaceRequest) (*ReplaceResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if req.Spec == nil {
		err := fmt.Errorf("Nil spec in Replace Request")
		return nil, svcfw.NewInvalidInputError(err.Error(), err)
	}
	if err := svcfw.FillOneofDefaultChoice(ctx, s.sf, req); err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.views.tcp_loadbalancer.API.Replace"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.views.tcp_loadbalancer.API.Replace"), zap.Error(err))
			}
		}
	}
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, "ves.io.schema.views.tcp_loadbalancer.API.ReplaceRequest", req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	rsrcReq := &server.ResourceReplaceRequest{RequestMsg: req}
	rsrcRsp, err := s.opts.RsrcHandler.ReplaceFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "ReplaceResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectReplaceRsp(rsrcRsp.Entry)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "ReplaceResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.sf, "ves.io.schema.views.tcp_loadbalancer.API.ReplaceResponse", rsp)...)
	return rsp, nil
}

func (s *APISrv) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.views.tcp_loadbalancer.API.Get"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}
	tenant := server.TenantFromContext(ctx)
	rsrcReq := &server.ResourceGetRequest{IsPublic: true, Tenant: tenant, Namespace: req.GetNamespace(), Name: req.GetName()}
	switch req.ResponseFormat {
	case GET_RSP_FORMAT_FOR_CREATE:
		rsrcReq.RspInCreateForm = true

	case GET_RSP_FORMAT_FOR_REPLACE:
		rsrcReq.RspInReplaceForm = true

	case GET_RSP_FORMAT_READ:
		rsrcReq.RspInReadForm = true

	case GET_RSP_FORMAT_STATUS:
		rsrcReq.RspInStatusForm = true

	case GET_RSP_FORMAT_REFERRING_OBJECTS:
		rsrcReq.RspInReferringObjectsForm = true

	case GET_RSP_FORMAT_BROKEN_REFERENCES:
		rsrcReq.RspInBrokenReferencesForm = true

	}

	rsrcRsp, err := s.opts.RsrcHandler.GetFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "GetResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectGetRsp(ctx, s.sf, req, rsrcRsp)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "GetResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rspMsgFQN := "ves.io.schema.views.tcp_loadbalancer.GetResponse"
	if conv, exists := s.sf.Config().ObjToMsgConverters[rspMsgFQN]; exists {
		if err := conv(rsrcRsp.Entry, rsp); err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (s *APISrv) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.views.tcp_loadbalancer.API.List"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}
	var merr *multierror.Error
	rsrcReq := &server.ResourceListRequest{
		Namespace:   req.Namespace,
		LabelFilter: req.LabelFilter,
		RspStreamed: false,
	}
	if len(req.ReportStatusFields) > 0 {
		rsrcReq.ReportStatusFields = &req.ReportStatusFields
	}
	rsrcRsp, err := s.opts.RsrcHandler.ListFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListResource"))
	}
	rsp, err := NewListResponse(ctx, req, s.sf, rsrcRsp)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListResponse allocation failed"))
	}
	if merr != nil {
		if rsp == nil {
			return nil, merr
		}
		rsp.Errors = append(rsp.Errors, &ves_io_schema.ErrorType{
			Code:    ves_io_schema.EINTERNAL,
			Message: merr.Error(),
		})

	}
	return rsp, nil
}

func (s *APISrv) Delete(ctx context.Context, req *DeleteRequest) (*google_protobuf.Empty, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.views.tcp_loadbalancer.API.Delete"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.views.tcp_loadbalancer.API.Delete"), zap.Error(err))
			}
		}
	}
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, "ves.io.schema.views.tcp_loadbalancer.API.DeleteRequest", req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	tenant := server.TenantFromContext(ctx)
	key := fmt.Sprintf("%s/%s/%s", tenant, req.GetNamespace(), req.GetName())
	rsrcReq := &server.ResourceDeleteRequest{Key: key}
	rsrcReq.FailIfReferred = req.FailIfReferred
	_, err := s.opts.RsrcHandler.DeleteFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "DeleteResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	return &google_protobuf.Empty{}, nil
}

// Assert that APISrv implements the generated gRPC APIServer interface
var _ APIServer = &APISrv{}

func NewCRUDAPIServer(oType string, tblName string, sf svcfw.Service, opts ...server.CRUDServerOpt) (server.APIHandler, string) {
	// convert ves.io.examplesvc.objectone.Object to
	//         ves.io.examplesvc.objectone.API
	sl := strings.Split(oType, ".")
	csOpts := server.NewCRUDServerOpts()
	for _, o := range opts {
		o(csOpts)
	}
	wrapper := server.NewDBAPIWrapper(csOpts.APIWrapperOpts...)
	s := &APISrv{
		oType:      oType,
		tblName:    tblName,
		sf:         sf,
		opts:       csOpts,
		apiWrapper: wrapper,
	}
	return s, fmt.Sprintf("%s.API", strings.Join(sl[:len(sl)-1], "."))
}

func (r *Object) Key() string {
	m := r.GetMetadata()
	if m == nil {
		return ""
	}
	return strings.Join([]string{m.Namespace, m.Name}, "/")
}

func (r *Object) Uid() string {
	return r.SystemMetadata.Uid
}

func (r *ListResponse) GetKeys() []string {
	var ret []string
	for _, i := range r.Items {
		ret = append(ret, i.Namespace+"/"+i.Name)
	}
	return ret
}

// Implement server.SROListItem interface on ListResponseItem
func (l *ListResponseItem) GetObjUid() string {
	return l.Uid
}

func (l *ListResponseItem) GetObjTenant() string {
	return l.Tenant
}

func (l *ListResponseItem) GetObjNamespace() string {
	return l.Namespace
}

func (l *ListResponseItem) GetObjName() string {
	return l.Name
}

func (l *ListResponseItem) GetObjLabels() map[string]string {
	return l.Labels
}

func NewObjectCreateRsp(e db.Entry) (*CreateResponse, error) {
	switch e.(type) {
	case nil:
		return nil, nil
	case *DBObject:
		rsp := &CreateResponse{}
		rsp.FromObject(e)
		return rsp, nil
	}
	return nil, fmt.Errorf("Entry not of type *DBObject in NewObjectCreateRsp")
}

func NewObjectReplaceRsp(e db.Entry) (*ReplaceResponse, error) {
	return &ReplaceResponse{}, nil
}

func NewObjectGetRsp(ctx context.Context, sf svcfw.Service, req *GetRequest, rsrcRsp *server.ResourceGetResponse) (*GetResponse, error) {
	rsp := &GetResponse{}
	e := rsrcRsp.Entry
	if e == nil {
		return rsp, nil
	}
	o, ok := e.(*DBObject)
	if !ok {
		return nil, fmt.Errorf("entry not of type *DBObject in NewObjectGetRsp")
	}

	rsp.ResourceVersion = rsrcRsp.ResourceVersion
	var merr *multierror.Error
	buildReadForm := func() {
		rsp.Metadata = &ves_io_schema.ObjectGetMetaType{}
		rsp.Metadata.FromObjectMetaType(o.Metadata)
		rsp.SystemMetadata = &ves_io_schema.SystemObjectGetMetaType{}
		rsp.SystemMetadata.FromSystemObjectMetaType(o.SystemMetadata)
		rsp.Spec = &GetSpecType{}
		if redactor, ok := e.(db.Redactor); ok {
			if err := redactor.Redact(ctx); err != nil {
				merr = multierror.Append(merr, errors.WithMessage(err, "Error while redacting entry"))
				return
			}
		}
		rsp.Spec.FromGlobalSpecType(o.Spec.GcSpec)

	}
	_ = buildReadForm
	buildStatusForm := func() {
		for _, statusEnt := range rsrcRsp.BackRefs {
			statusObj, ok := statusEnt.ToStore().(*StatusObject)
			if !ok {
				merr = multierror.Append(merr, fmt.Errorf("%T is not *StatusObject", statusEnt))
				continue
			}
			rsp.Status = append(rsp.Status, statusObj)
		}

	}
	_ = buildStatusForm
	buildReferringObjectsForm := func() {
		for _, br := range rsrcRsp.ReferringObjects {
			rsp.ReferringObjects = append(rsp.ReferringObjects, &ves_io_schema.ObjectRefType{
				Kind:      db.KindForEntryType(br.Type),
				Uid:       br.UID,
				Tenant:    br.Tenant,
				Namespace: br.Namespace,
				Name:      br.Name,
			})
		}

	}
	_ = buildReferringObjectsForm
	buildBrokenReferencesForm := func() {
		for _, br := range rsrcRsp.DeletedReferredObjects {
			rsp.DeletedReferredObjects = append(rsp.DeletedReferredObjects, &ves_io_schema.ObjectRefType{
				Kind:      db.KindForEntryType(br.Type),
				Uid:       br.UID,
				Tenant:    br.Tenant,
				Namespace: br.Namespace,
				Name:      br.Name,
			})
		}
		for _, br := range rsrcRsp.DisabledReferredObjects {
			rsp.DisabledReferredObjects = append(rsp.DisabledReferredObjects, &ves_io_schema.ObjectRefType{
				Kind:      db.KindForEntryType(br.Type),
				Uid:       br.UID,
				Tenant:    br.Tenant,
				Namespace: br.Namespace,
				Name:      br.Name,
			})
		}

	}
	_ = buildBrokenReferencesForm

	switch req.ResponseFormat {

	case GET_RSP_FORMAT_FOR_CREATE:
		createReq, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Building CreateRequest from entry")
		}
		// Name has to be specified for a new create
		createReq.Metadata.Name = ""
		rsp.CreateForm = createReq

	case GET_RSP_FORMAT_FOR_REPLACE:
		replaceReq, err := NewReplaceRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Building ReplaceRequest from entry")
		}
		rsp.ReplaceForm = replaceReq

	case GET_RSP_FORMAT_STATUS:
		buildStatusForm()

	case GET_RSP_FORMAT_READ:
		buildReadForm()

	case GET_RSP_FORMAT_REFERRING_OBJECTS:
		buildReferringObjectsForm()

	case GET_RSP_FORMAT_BROKEN_REFERENCES:
		buildBrokenReferencesForm()

	default:
		buildReadForm()

		buildStatusForm()
	}

	return rsp, errors.ErrOrNil(merr)
}

func NewListResponse(ctx context.Context, req *ListRequest, sf svcfw.Service, rsrcRsp *server.ResourceListResponse) (*ListResponse, error) {
	if req == nil {
		return nil, fmt.Errorf("Nil ListRequest")
	}
	if rsrcRsp == nil {
		return nil, fmt.Errorf("Nil ResourceResponse")
	}

	errStrs := []string{}
	resp := &ListResponse{}
	resp.Items = []*ListResponseItem{}

	for _, rsrcItem := range rsrcRsp.Items {
		if rsrcItem == nil {
			errStrs = append(errStrs, fmt.Sprintf("Nil ResourceListResponseItem"))
			continue
		}

		e := rsrcItem.Entry
		o, ok := e.(*DBObject)
		if !ok {
			resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
				Code:    ves_io_schema.EINTERNAL,
				Message: fmt.Sprintf("Entry %T not of type *DBObject in NewListResponse", e),
			})

			continue
		}
		if redactor, ok := e.(db.Redactor); ok {
			if err := redactor.Redact(ctx); err != nil {
				resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
					Code:    ves_io_schema.EINTERNAL,
					Message: fmt.Sprintf("Error while redacting in NewListResponse: %s", err),
				})
				continue
			}
		}
		item := &ListResponseItem{
			Tenant:    o.GetSystemMetadata().GetTenant(),
			Namespace: o.GetMetadata().GetNamespace(),
			Name:      o.GetMetadata().GetName(),
			Uid:       o.GetMetadata().GetUid(),
			OwnerView: o.GetSystemMetadata().GetOwnerView(),
			Labels:    o.GetMetadata().GetLabels(),
		}

		item.Description = o.GetMetadata().GetDescription()
		item.Annotations = o.GetMetadata().GetAnnotations()
		item.Disabled = o.GetMetadata().GetDisable()

		if len(req.ReportFields) > 0 {
			item.Metadata = &ves_io_schema.ObjectGetMetaType{}
			item.Metadata.FromObjectMetaType(o.Metadata)
			item.SystemMetadata = &ves_io_schema.SystemObjectGetMetaType{}
			item.SystemMetadata.FromSystemObjectMetaType(o.SystemMetadata)

			if o.Object.GetSpec().GetGcSpec() != nil {
				msgFQN := "ves.io.schema.views.tcp_loadbalancer.GetResponse"
				if conv, exists := sf.Config().ObjToMsgConverters[msgFQN]; exists {
					getSpec := &GetSpecType{}
					getSpec.FromGlobalSpecType(o.Spec.GcSpec)
					getRsp := &GetResponse{Spec: getSpec}
					if err := conv(o, getRsp); err != nil {
						resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
							Code:    ves_io_schema.EINTERNAL,
							Message: fmt.Sprintf("Converting entry to getResponse: %s", err),
						})

						continue
					}
					item.GetSpec = getRsp.Spec
				} else {
					item.GetSpec = &GetSpecType{}
					item.GetSpec.FromGlobalSpecType(o.Spec.GcSpec)
				}
			}

		}

		if len(req.ReportStatusFields) > 0 {
			for _, sroStatus := range rsrcItem.StatusSet {
				statusDBO, ok := sroStatus.(*DBStatusObject)
				if !ok {
					resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
						Code:    ves_io_schema.EINTERNAL,
						Message: fmt.Sprintf("sro.Status %T is not of type *DBStatusObject in NewListResponse", sroStatus),
					})

					continue
				}
				item.StatusSet = append(item.StatusSet, statusDBO.StatusObject)
			}
		}

		resp.Items = append(resp.Items, item)
	}
	return resp, nil
}

func RegisterGwAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterAPIHandlerClient(ctx, mux, NewAPIInprocClient(s))
}

var APISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "TCP Load Balancer",
        "description": "TCP load balancer view defines a required parameters that can be used in CRUD, to create and manage TCP load balancer.\nIt can be used to create TCP load balancer and TCP load balancer with SNI.\n\nView will create following child objects.\n\n* Virtual-host\n* default route\n* clusters\n* endpoints\n* advertise policy",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/namespaces/{metadata.namespace}/tcp_loadbalancers": {
            "post": {
                "summary": "Create TCP Load Balancer",
                "description": "Shape of the TCP load balancer create specification",
                "operationId": "ves.io.schema.views.tcp_loadbalancer.API.Create",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/tcp_loadbalancerCreateResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "metadata.namespace",
                        "description": "namespace\n\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created.\nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tcp_loadbalancerCreateRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-tcp_loadbalancer-api-create"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.tcp_loadbalancer.API.Create"
            },
            "x-displayname": "Configure TCP Load Balancer",
            "x-ves-proto-service": "ves.io.schema.views.tcp_loadbalancer.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{metadata.namespace}/tcp_loadbalancers/{metadata.name}": {
            "put": {
                "summary": "Replace TCP Load Balancer",
                "description": "Shape of the TCP load balancer replace specification",
                "operationId": "ves.io.schema.views.tcp_loadbalancer.API.Replace",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/tcp_loadbalancerReplaceResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "metadata.namespace",
                        "description": "namespace\n\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created.\nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "metadata.name",
                        "description": "name\n\nx-example: \"acmecorp-web\"\nThe configuration object to be replaced will be looked up by name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tcp_loadbalancerReplaceRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-tcp_loadbalancer-api-replace"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.tcp_loadbalancer.API.Replace"
            },
            "x-displayname": "Configure TCP Load Balancer",
            "x-ves-proto-service": "ves.io.schema.views.tcp_loadbalancer.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{namespace}/tcp_loadbalancers": {
            "get": {
                "summary": "List Configure TCP Load Balancer",
                "description": "List the set of tcp_loadbalancer in a namespace",
                "operationId": "ves.io.schema.views.tcp_loadbalancer.API.List",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/tcp_loadbalancerListResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace to scope the listing of tcp_loadbalancer",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "label_filter",
                        "description": "x-example: \"env in (staging, testing), tier in (web, db)\"\nA LabelSelectorType expression that every item in list response will satisfy",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "Label Filter"
                    },
                    {
                        "name": "report_fields",
                        "description": "x-example: \"\"\nExtra fields to return along with summary fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-displayname": "Report Fields"
                    },
                    {
                        "name": "report_status_fields",
                        "description": "x-example: \"\"\nExtra status fields to return along with summary fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "x-displayname": "Report Status Fields"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-tcp_loadbalancer-api-list"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.tcp_loadbalancer.API.List"
            },
            "x-displayname": "Configure TCP Load Balancer",
            "x-ves-proto-service": "ves.io.schema.views.tcp_loadbalancer.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        },
        "/public/namespaces/{namespace}/tcp_loadbalancers/{name}": {
            "get": {
                "summary": "Get TCP Load Balancer",
                "description": "Shape of the TCP load balancer get specification",
                "operationId": "ves.io.schema.views.tcp_loadbalancer.API.Get",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/tcp_loadbalancerGetResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nThe namespace in which the configuration object is present",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"name\"\nThe name of the configuration object to be fetched",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "response_format",
                        "description": "The format in which the configuration object is to be fetched. This could be for example\n    - in GetSpec form for the contents of object\n    - in CreateRequest form to create a new similar object\n    - to ReplaceRequest form to replace changeable values\n\nDefault format of returned resource\nResponse should be in CreateRequest format\nResponse should be in ReplaceRequest format\nResponse should be in StatusObject(s) format\nResponse should be in format of GetSpecType\nResponse should have other objects referring to this object\nResponse should have deleted and disabled objects referrred by this object",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "GET_RSP_FORMAT_DEFAULT",
                            "GET_RSP_FORMAT_FOR_CREATE",
                            "GET_RSP_FORMAT_FOR_REPLACE",
                            "GET_RSP_FORMAT_STATUS",
                            "GET_RSP_FORMAT_READ",
                            "GET_RSP_FORMAT_REFERRING_OBJECTS",
                            "GET_RSP_FORMAT_BROKEN_REFERENCES"
                        ],
                        "default": "GET_RSP_FORMAT_DEFAULT",
                        "x-displayname": "Broken Referred Objects"
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-tcp_loadbalancer-api-get"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.tcp_loadbalancer.API.Get"
            },
            "delete": {
                "summary": "Delete Configure TCP Load Balancer",
                "description": "Delete the specified tcp_loadbalancer",
                "operationId": "ves.io.schema.views.tcp_loadbalancer.API.Delete",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {}
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "namespace",
                        "description": "namespace\n\nx-example: \"ns1\"\nNamespace in which the configuration object is present",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Namespace"
                    },
                    {
                        "name": "name",
                        "description": "name\n\nx-example: \"name\"\nName of the configuration object",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Name"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tcp_loadbalancerDeleteRequest"
                        }
                    }
                ],
                "tags": [
                    "API"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-views-tcp_loadbalancer-api-delete"
                },
                "x-ves-proto-rpc": "ves.io.schema.views.tcp_loadbalancer.API.Delete"
            },
            "x-displayname": "Configure TCP Load Balancer",
            "x-ves-proto-service": "ves.io.schema.views.tcp_loadbalancer.API",
            "x-ves-proto-service-type": "AUTO_CRUD_PUBLIC"
        }
    },
    "definitions": {
        "ioschemaEmpty": {
            "type": "object",
            "description": "This can be used for messages where no values are needed",
            "title": "Empty",
            "x-displayname": "Empty",
            "x-ves-proto-message": "ves.io.schema.Empty"
        },
        "ioschemaObjectRefType": {
            "type": "object",
            "description": "This type establishes a 'direct reference' from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name for public API and Uid for private API\nThis type of reference is called direct because the relation is explicit and concrete (as opposed\nto selector reference which builds a group based on labels of selectee objects)",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.ObjectRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then kind will hold the referred object's kind (e.g. \"route\")\n\nExample: - \"virtual_site\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "virtual_site"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then uid will hold the referred object's(e.g. route's) uid.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "schemaBlindfoldSecretInfoType": {
            "type": "object",
            "description": "BlindfoldSecretInfoType specifies information about the Secret managed by F5XC Secret Management",
            "title": "BlindfoldSecretInfoType",
            "x-displayname": "Blindfold Secret",
            "x-ves-displayorder": "3,1,2",
            "x-ves-proto-message": "ves.io.schema.BlindfoldSecretInfoType",
            "properties": {
                "decryption_provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the backend Secret Management service.\n\nExample: - \"value\"-",
                    "title": "Decryption Provider",
                    "x-displayname": "Decryption Provider",
                    "x-ves-example": "value"
                },
                "location": {
                    "type": "string",
                    "description": " Location is the uri_ref. It could be in url format for string:///\n Or it could be a path if the store provider is an http/https location\n\nExample: - \"string:///U2VjcmV0SW5mb3JtYXRpb24=\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.uri_ref: true\n",
                    "title": "Location",
                    "x-displayname": "Location",
                    "x-ves-example": "string:///U2VjcmV0SW5mb3JtYXRpb24=",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.uri_ref": "true"
                    }
                },
                "store_provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the store to get encrypted bytes\n This field needs to be provided only if the url scheme is not string:///\n\nExample: - \"value\"-",
                    "title": "Store Provider",
                    "x-displayname": "Store Provider",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaClearSecretInfoType": {
            "type": "object",
            "description": "ClearSecretInfoType specifies information about the Secret that is not encrypted.",
            "title": "ClearSecretInfoType",
            "x-displayname": "In-Clear Secret",
            "x-ves-displayorder": "2,1",
            "x-ves-proto-message": "ves.io.schema.ClearSecretInfoType",
            "properties": {
                "provider": {
                    "type": "string",
                    "description": " Name of the Secret Management Access object that contains information about the store to get encrypted bytes\n This field needs to be provided only if the url scheme is not string:///\n\nExample: - \"box-provider\"-",
                    "title": "Provider",
                    "x-displayname": "Provider",
                    "x-ves-example": "box-provider"
                },
                "url": {
                    "type": "string",
                    "description": " URL of the secret. Currently supported URL schemes is string:///.\n For string:/// scheme, Secret needs to be encoded Base64 format.\n When asked for this secret, caller will get Secret bytes after Base64 decoding.\n\nExample: - \"string:///U2VjcmV0SW5mb3JtYXRpb24=\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_bytes: 131072\n  ves.io.schema.rules.string.uri_ref: true\n",
                    "title": "URL",
                    "maxLength": 131072,
                    "x-displayname": "URL",
                    "x-ves-example": "string:///U2VjcmV0SW5mb3JtYXRpb24=",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_bytes": "131072",
                        "ves.io.schema.rules.string.uri_ref": "true"
                    }
                }
            }
        },
        "schemaConditionType": {
            "type": "object",
            "description": "Conditions are used in the object status to describe the current state of the\nobject, e.g. Ready, Succeeded, etc.",
            "title": "ConditionType",
            "x-displayname": "Status Condition",
            "x-ves-proto-message": "ves.io.schema.ConditionType",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": " Hostname of the instance of the site that sent the status",
                    "title": "hostname",
                    "x-displayname": "Hostname"
                },
                "last_update_time": {
                    "type": "string",
                    "description": " Last time the condition was updated",
                    "title": "last_update_time",
                    "format": "date-time",
                    "x-displayname": "Last Updated"
                },
                "reason": {
                    "type": "string",
                    "description": " x-reason: \"Insufficient memory in data plane\"\n A human readable string explaining the reason for reaching this condition\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "service_name": {
                    "type": "string",
                    "description": " Name of the service that sent the status",
                    "title": "service name",
                    "x-displayname": "Service Name"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the condition\n \"Success\" Validtion has succeded. Requested operation was successful.\n \"Failed\"  Validation has failed.\n \"Incomplete\" Validation of configuration has failed due to missing configuration.\n \"Installed\" Validation has passed and configuration has been installed in data path or K8s\n \"Down\" Configuration is operationally down. e.g. down interface\n \"Disabled\" Configuration is administratively disabled i.e. ObjectMetaType.Disable = true.\n \"NotApplicable\" Configuration is not applicable e.g. tenant service_policy_set(s) in system namespace are not applicable on REs\n\nExample: - \"Failed\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"Success\\\",\\\"Failed\\\",\\\"Incomplete\\\",\\\"Installed\\\",\\\"Down\\\",\\\"Disabled\\\",\\\"NotApplicable\\\"]\n",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "Failed",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"Success\\\",\\\"Failed\\\",\\\"Incomplete\\\",\\\"Installed\\\",\\\"Down\\\",\\\"Disabled\\\",\\\"NotApplicable\\\"]"
                    }
                },
                "type": {
                    "type": "string",
                    "description": " Type of the condition\n \"Validation\" represents validation user given configuration object\n \"Operational\" represents operational status of a given configuration object\n\nExample: - \"Operational\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.in: [\\\"Validation\\\",\\\"Operational\\\"]\n",
                    "title": "type",
                    "x-displayname": "Type",
                    "x-ves-example": "Operational",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.in": "[\\\"Validation\\\",\\\"Operational\\\"]"
                    }
                }
            }
        },
        "schemaErrorCode": {
            "type": "string",
            "description": "Union of all possible error-codes from system\n\n - EOK: No error\n - EPERMS: Permissions error\n - EBADINPUT: Input is not correct\n - ENOTFOUND: Not found\n - EEXISTS: Already exists\n - EUNKNOWN: Unknown/catchall error\n - ESERIALIZE: Error in serializing/de-serializing\n - EINTERNAL: Server error\n - EPARTIAL: Partial error",
            "title": "ErrorCode",
            "enum": [
                "EOK",
                "EPERMS",
                "EBADINPUT",
                "ENOTFOUND",
                "EEXISTS",
                "EUNKNOWN",
                "ESERIALIZE",
                "EINTERNAL",
                "EPARTIAL"
            ],
            "default": "EOK",
            "x-displayname": "Error Code",
            "x-ves-proto-enum": "ves.io.schema.ErrorCode"
        },
        "schemaErrorType": {
            "type": "object",
            "description": "Information about a error in API operation",
            "title": "ErrorType",
            "x-displayname": "Error Type",
            "x-ves-proto-message": "ves.io.schema.ErrorType",
            "properties": {
                "code": {
                    "description": " A simple general code by category",
                    "title": "code",
                    "$ref": "#/definitions/schemaErrorCode",
                    "x-displayname": "Code"
                },
                "error_obj": {
                    "description": " A structured error object for machine parsing",
                    "title": "error_obj",
                    "$ref": "#/definitions/protobufAny",
                    "x-displayname": "Error Object"
                },
                "message": {
                    "type": "string",
                    "description": " A human readable string of the error\n\nExample: - \"value\"-",
                    "title": "message",
                    "x-displayname": "Message",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaHashAlgorithm": {
            "type": "string",
            "description": "Specifies the Hash Algorithm to be used\n\nInvalid hash algorithm\nsha256 hash algorithm\nsha1 hash algorithm",
            "title": "HashAlgoritm",
            "enum": [
                "INVALID_HASH_ALGORITHM",
                "SHA256",
                "SHA1"
            ],
            "default": "INVALID_HASH_ALGORITHM",
            "x-displayname": "Hash Algorithm",
            "x-ves-proto-enum": "ves.io.schema.HashAlgorithm"
        },
        "schemaHashAlgorithms": {
            "type": "object",
            "description": "Specifies the hash algorithms to be used",
            "title": "HashAlgorithms",
            "x-displayname": "Hash Algorithms",
            "x-ves-proto-message": "ves.io.schema.HashAlgorithms",
            "properties": {
                "hash_algorithms": {
                    "type": "array",
                    "description": " Ordered list of hash algorithms to be used.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 4\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Hash Algorithms",
                    "minItems": 1,
                    "maxItems": 4,
                    "items": {
                        "$ref": "#/definitions/schemaHashAlgorithm"
                    },
                    "x-displayname": "Hash Algorithms",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "4",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "schemaInitializerType": {
            "type": "object",
            "description": "Initializer is information about an initializer that has not yet completed.",
            "title": "InitializerType",
            "x-displayname": "Initializer",
            "x-ves-proto-message": "ves.io.schema.InitializerType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " name of the service that is responsible for initializing this object.",
                    "title": "name",
                    "x-displayname": "Name"
                }
            }
        },
        "schemaInitializersType": {
            "type": "object",
            "description": "Initializers tracks the progress of initialization of a configuration object",
            "title": "InitializersType",
            "x-displayname": "Initializers",
            "x-ves-proto-message": "ves.io.schema.InitializersType",
            "properties": {
                "pending": {
                    "type": "array",
                    "description": " Pending is a list of initializers that must execute in order before this object is initialized.\n When the last pending initializer is removed, and no failing result is set, the initializers\n struct will be set to nil and the object is considered as initialized and visible to all\n clients.",
                    "title": "pending",
                    "items": {
                        "$ref": "#/definitions/schemaInitializerType"
                    },
                    "x-displayname": "Pending"
                },
                "result": {
                    "description": " If result is set with the Failure field, the object will be persisted to storage and then deleted,\n ensuring that other clients can observe the deletion.",
                    "title": "result",
                    "$ref": "#/definitions/schemaStatusType",
                    "x-displayname": "Result"
                }
            }
        },
        "schemaObjectCreateMetaType": {
            "type": "object",
            "description": "ObjectCreateMetaType is metadata that can be specified in Create request of an object.",
            "title": "ObjectCreateMetaType",
            "x-displayname": "Create Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectCreateMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 64\n  ves.io.schema.rules.map.keys.string.min_len: 1\n  ves.io.schema.rules.map.values.string.max_len: 1024\n  ves.io.schema.rules.map.values.string.min_len: 1\n",
                    "title": "annotations",
                    "x-displayname": "Annotation",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "64",
                        "ves.io.schema.rules.map.keys.string.min_len": "1",
                        "ves.io.schema.rules.map.values.string.max_len": "1024",
                        "ves.io.schema.rules.map.values.string.min_len": "1"
                    }
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 1200\n",
                    "title": "description",
                    "maxLength": 1200,
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "1200"
                    }
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created.\n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaObjectGetMetaType": {
            "type": "object",
            "description": "ObjectGetMetaType is metadata that can be specified in Get/Create response of an object.",
            "title": "ObjectGetMetaType",
            "x-displayname": "Get Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectGetMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 64\n  ves.io.schema.rules.map.keys.string.min_len: 1\n  ves.io.schema.rules.map.values.string.max_len: 1024\n  ves.io.schema.rules.map.values.string.min_len: 1\n",
                    "title": "annotations",
                    "x-displayname": "Annotation",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "64",
                        "ves.io.schema.rules.map.keys.string.min_len": "1",
                        "ves.io.schema.rules.map.values.string.max_len": "1024",
                        "ves.io.schema.rules.map.values.string.min_len": "1"
                    }
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 1200\n",
                    "title": "description",
                    "maxLength": 1200,
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "1200"
                    }
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable",
                    "x-ves-example": "true"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created.\n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaObjectReplaceMetaType": {
            "type": "object",
            "description": "ObjectReplaceMetaType is metadata that can be specified in Replace request of an object.",
            "title": "ObjectReplaceMetaType",
            "x-displayname": "Replace Metadata",
            "x-ves-proto-message": "ves.io.schema.ObjectReplaceMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " Annotations is an unstructured key value map stored with a resource that may be\n set by external tools to store and retrieve arbitrary metadata. They are not\n queryable and should be preserved when modifying objects.\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.keys.string.max_len: 64\n  ves.io.schema.rules.map.keys.string.min_len: 1\n  ves.io.schema.rules.map.values.string.max_len: 1024\n  ves.io.schema.rules.map.values.string.min_len: 1\n",
                    "title": "annotations",
                    "x-displayname": "Annotations",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.keys.string.max_len": "64",
                        "ves.io.schema.rules.map.keys.string.min_len": "1",
                        "ves.io.schema.rules.map.values.string.max_len": "1024",
                        "ves.io.schema.rules.map.values.string.min_len": "1"
                    }
                },
                "description": {
                    "type": "string",
                    "description": " Human readable description for the object\n\nExample: - \"Virtual Host for acmecorp website\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 1200\n",
                    "title": "description",
                    "maxLength": 1200,
                    "x-displayname": "Description",
                    "x-ves-example": "Virtual Host for acmecorp website",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "1200"
                    }
                },
                "disable": {
                    "type": "boolean",
                    "description": " A value of true will administratively disable the object\n\nExample: - \"true\"-",
                    "title": "disable",
                    "format": "boolean",
                    "x-displayname": "Disable"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the user. Values specified here will be used\n by selector expression\n\nExample: - \"value\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "value"
                },
                "name": {
                    "type": "string",
                    "description": " This is the name of configuration object. It has to be unique within the namespace.\n It can only be specified during create API and cannot be changed during replace API.\n The value of name has to follow DNS-1035 format.\n\nExample: - \"acmecorp-web\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "acmecorp-web",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " This defines the workspace within which each the configuration object is to be created.\n Must be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"\n\nExample: - \"staging\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "staging"
                }
            }
        },
        "schemaSecretEncodingType": {
            "type": "string",
            "description": "x-displayName: \"Secret Encoding\"\nSecretEncodingType defines the encoding type of the secret before handled by the Secret Management Service.\n\n - EncodingNone: x-displayName: \"None\"\nNo Encoding\n - EncodingBase64: Base64\n\nx-displayName: \"Base64\"\nBase64 encoding",
            "title": "SecretEncodingType",
            "enum": [
                "EncodingNone",
                "EncodingBase64"
            ],
            "default": "EncodingNone"
        },
        "schemaSecretType": {
            "type": "object",
            "description": "SecretType is used in an object to indicate a sensitive/confidential field",
            "title": "SecretType",
            "x-displayname": "Secret",
            "x-ves-oneof-field-secret_info_oneof": "[\"blindfold_secret_info\",\"clear_secret_info\"]",
            "x-ves-proto-message": "ves.io.schema.SecretType",
            "properties": {
                "blindfold_secret_info": {
                    "description": "Exclusive with [clear_secret_info]\n Blindfold Secret is used for the secrets managed by F5XC Secret Management Service",
                    "title": "Blindfold Secret",
                    "$ref": "#/definitions/schemaBlindfoldSecretInfoType",
                    "x-displayname": "Blindfold Secret"
                },
                "clear_secret_info": {
                    "description": "Exclusive with [blindfold_secret_info]\n Clear Secret is used for the secrets that are not encrypted",
                    "title": "Clear Secret",
                    "$ref": "#/definitions/schemaClearSecretInfoType",
                    "x-displayname": "Clear Secret"
                }
            }
        },
        "schemaStatusMetaType": {
            "type": "object",
            "description": "StatusMetaType is metadata that all status must have.",
            "title": "StatusMetaType",
            "x-displayname": "Metadata",
            "x-ves-proto-message": "ves.io.schema.StatusMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " creation_timestamp is when the status object was created. It is used to find/tie-break\n for latest status object from same origin",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " Class of creator which created this StatusObject. This will be service's DNS FQDN.\n This will be set by the system based on client certificate information.\n\nExample: - \"ver.re1.int.ves.io\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "ver.re1.int.ves.io"
                },
                "creator_id": {
                    "type": "string",
                    "description": " ID of creator which created this StatusObject. This will be a concrete identifier for service (e.g.\n identifying the environment also). This will be set by the system based on client certificate\n information\n\nExample: - \"ver-instance-1\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "ver-instance-1"
                },
                "publish": {
                    "description": " Decides wether this status object will be propagated to user.",
                    "title": "publish",
                    "$ref": "#/definitions/schemaStatusPublishType",
                    "x-displayname": "Publish"
                },
                "status_id": {
                    "type": "string",
                    "description": " status_id is a field used by the generator to distinguish (if necessary) between two status\n objects for the same config object from the same site and same service and potentially same\n daemon(creator-id)",
                    "title": "status_id",
                    "x-displayname": "Status ID"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for a StatusObject.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": " Origin of this status exchanged by VTRP.",
                    "title": "vtrp_id",
                    "x-displayname": "VTRP ID"
                },
                "vtrp_stale": {
                    "type": "boolean",
                    "description": " Indicate whether mars deems this object to be stale via graceful restart timer information",
                    "title": "vtrp_stale",
                    "format": "boolean",
                    "x-displayname": "VTRP Stale"
                }
            }
        },
        "schemaStatusPublishType": {
            "type": "string",
            "description": "StatusPublishType is all possible publish operations on a StatusObject\n\n - STATUS_DO_NOT_PUBLISH: Do Not Publish\n\nDo not propagate this status to user. This could be because status is only informational\n - STATUS_PUBLISH: Publish\n\nPropagate this status up to user as it might be actionable",
            "title": "StatusPublishType",
            "enum": [
                "STATUS_DO_NOT_PUBLISH",
                "STATUS_PUBLISH"
            ],
            "default": "STATUS_DO_NOT_PUBLISH",
            "x-displayname": "Status Publish Type",
            "x-ves-proto-enum": "ves.io.schema.StatusPublishType"
        },
        "schemaStatusType": {
            "type": "object",
            "description": "Status is a return value for calls that don't return other objects.",
            "title": "StatusType",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.StatusType",
            "properties": {
                "code": {
                    "type": "integer",
                    "description": " Suggested HTTP return code for this status, 0 if not set.\n\nExample: - \"0\"-",
                    "title": "code",
                    "format": "int32",
                    "x-displayname": "Code",
                    "x-ves-example": "0"
                },
                "reason": {
                    "type": "string",
                    "description": " A human-readable description of why this operation is in the\n \"Failure\" status. If this value is empty there\n is no information available.\n\nExample: - \"value\"-",
                    "title": "reason",
                    "x-displayname": "Reason",
                    "x-ves-example": "value"
                },
                "status": {
                    "type": "string",
                    "description": " Status of the operation.\n One of: \"Success\" or \"Failure\".\n\nExample: - \"value\"-",
                    "title": "status",
                    "x-displayname": "Status",
                    "x-ves-example": "value"
                }
            }
        },
        "schemaSystemObjectGetMetaType": {
            "type": "object",
            "description": "SystemObjectGetMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectGetMetaType",
            "x-displayname": "System Metadata",
            "x-ves-proto-message": "ves.io.schema.SystemObjectGetMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": " CreationTimestamp is a timestamp representing the server time when this object was\n created. It is not guaranteed to be set in happens-before order across separate operations.\n Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time",
                    "x-displayname": "Creation Timestamp"
                },
                "creator_class": {
                    "type": "string",
                    "description": " A value identifying the class of the user or service which created this configuration object.\n\nExample: - \"value\"-",
                    "title": "creator_class",
                    "x-displayname": "Creator Class",
                    "x-ves-example": "prism"
                },
                "creator_id": {
                    "type": "string",
                    "description": " A value identifying the exact user or service that created this configuration object\n\nExample: - \"value\"-",
                    "title": "creator_id",
                    "x-displayname": "Creator ID",
                    "x-ves-example": "admin@acmecorp.com"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": " DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\n field is set by the server when a graceful deletion is requested by the user, and is not\n directly settable by a client. The resource is expected to be deleted (no longer visible\n from resource lists, and not reachable by name) after the time in this field, once the\n finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\n Once the deletionTimestamp is set, this value may not be unset or be set further into the\n future, although it may be shortened or the resource may be deleted prior to this time.\n For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\n by sending a graceful termination signal to the containers in the pod. After that 30 seconds,\n the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\n remove the pod from the API. In the presence of network partitions, this object may still\n exist after this timestamp, until an administrator or automated process can determine the\n resource is fully terminated.\n If not set, graceful deletion of the object has not been requested.\n\n Populated by the system when a graceful deletion is requested.\n Read-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time",
                    "x-displayname": "Deletion Timestamp"
                },
                "finalizers": {
                    "type": "array",
                    "description": " Must be empty before the object is deleted from the registry. Each entry\n is an identifier for the responsible component that will remove the entry\n from the list. If the deletionTimestamp of the object is non-nil, entries\n in this list can only be removed.\n\nExample: - \"value\"-",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Finalizers",
                    "x-ves-example": "value"
                },
                "initializers": {
                    "description": " An initializer is a controller which enforces some system invariant at object creation time.\n This field is a list of initializers that have not yet acted on this object. If nil or empty,\n this object has been completely initialized. Otherwise, the object is considered uninitialized\n and is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\n observe uninitialized objects.\n\n When an object is created, the system will populate this list with the current set of initializers.\n Only privileged users may set or modify this list. Once it is empty, it may not be modified further\n by any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType",
                    "x-displayname": "Initializers"
                },
                "labels": {
                    "type": "object",
                    "description": " Map of string keys and values that can be used to organize and categorize\n (scope and select) objects as chosen by the operator or software. Values here can be interpreted\n by software(backend or frontend) to enable certain behavior e.g. things marked as soft-deleted(restorable).\n\nExample: - \"'ves.io/soft-deleted''true'\"-",
                    "title": "labels",
                    "x-displayname": "Labels",
                    "x-ves-example": "'ves.io/soft-deleted': 'true'"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": " ModificationTimestamp is a timestamp representing the server time when this object was\n last modified.",
                    "title": "modification_timestamp",
                    "format": "date-time",
                    "x-displayname": "Modification Timestamp"
                },
                "object_index": {
                    "type": "integer",
                    "description": " Unique index for the object. Some objects need a unique integer index to be allocated\n for each object type. This field will be populated for all objects that need it and will\n be zero otherwise.\n\nExample: - \"0\"-",
                    "title": "object_index",
                    "format": "int64",
                    "x-displayname": "Object Index",
                    "x-ves-example": "0"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "tenant": {
                    "type": "string",
                    "description": " Tenant to which this configuration object belongs to. The value for this is found from\n presented credentials.\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " uid is the unique in time and space value for this object. It is generated by\n the server on successful creation of an object and is not allowed to change on Replace\n API. The value of is taken from uid field of ObjectMetaType, if provided.\n\nExample: - \"d15f1fad-4d37-48c0-8706-df1824d76d31\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d15f1fad-4d37-48c0-8706-df1824d76d31"
                }
            }
        },
        "schemaTlsCertificateType": {
            "type": "object",
            "description": "Handle to fetch certificate and key",
            "title": "TlsCertificateType",
            "x-displayname": "TLS Certificate",
            "x-ves-oneof-field-ocsp_stapling_choice": "[\"custom_hash_algorithms\",\"disable_ocsp_stapling\",\"use_system_defaults\"]",
            "x-ves-proto-message": "ves.io.schema.TlsCertificateType",
            "properties": {
                "certificate_url": {
                    "type": "string",
                    "description": " TLS certificate.\n Certificate or certificate chain in PEM format including the PEM headers.\n\nExample: - \"value\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.certificate_url: true\n  ves.io.schema.rules.string.max_bytes: 131072\n  ves.io.schema.rules.string.min_bytes: 1\n",
                    "title": "certificate_url",
                    "minLength": 1,
                    "maxLength": 131072,
                    "x-displayname": "Certificate",
                    "x-ves-example": "value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.certificate_url": "true",
                        "ves.io.schema.rules.string.max_bytes": "131072",
                        "ves.io.schema.rules.string.min_bytes": "1"
                    }
                },
                "custom_hash_algorithms": {
                    "description": "Exclusive with [disable_ocsp_stapling use_system_defaults]\n Use hash algorithms in the custom order. F5XC will try to fetch ocsp response from the CA in the given order. Additionally, LoadBalancer will not become active until ocspResponse cannot be fetched if the certificate has MustStaple extension set.",
                    "title": "Use Custom Order for Hash Algorithms",
                    "$ref": "#/definitions/schemaHashAlgorithms",
                    "x-displayname": "Use hash algorithms in custom order"
                },
                "description": {
                    "type": "string",
                    "description": " Description for the certificate\n\nExample: - \"Certificate used in production environment\"-",
                    "title": "description",
                    "x-displayname": "Description",
                    "x-ves-example": "Certificate used in production environment"
                },
                "disable_ocsp_stapling": {
                    "description": "Exclusive with [custom_hash_algorithms use_system_defaults]\n Disable OCSP Stapling. F5XC will not fetch and staple OCSP Response for this certificate.\n This is the default behavior if no choice is selected.",
                    "title": "Disable OCSP Stapling",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Disable OCSP Stapling"
                },
                "private_key": {
                    "description": " TLS Private Key data in unencrypted PEM format including the PEM headers. The data may be optionally secured using BlindFold. TLS key has to match the accompanying certificate.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "private_key",
                    "$ref": "#/definitions/schemaSecretType",
                    "x-displayname": "Private Key",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "use_system_defaults": {
                    "description": "Exclusive with [custom_hash_algorithms disable_ocsp_stapling]\n Use F5XC Default Settings to fetch and staple OCSP Response.\n OCSP Response will be stapled if it can be fetched. Additionally, LoadBalancer will not become active until ocspResponse cannot be fetched if the certificate has MustStaple extension set.\n F5XC will try to fetch OCSPResponse with sha256 and sha1 as HashAlgorithm, in that order.",
                    "title": "Fetch with F5XC default settings",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Fetch with F5XC default settings"
                }
            }
        },
        "schemaTlsProtocol": {
            "type": "string",
            "description": "TlsProtocol is enumeration of supported TLS versions\n\nF5 Distributed Cloud will choose the optimal TLS version.",
            "title": "TlsProtocol",
            "enum": [
                "TLS_AUTO",
                "TLSv1_0",
                "TLSv1_1",
                "TLSv1_2",
                "TLSv1_3"
            ],
            "default": "TLS_AUTO",
            "x-displayname": "TLS Protocol",
            "x-ves-proto-enum": "ves.io.schema.TlsProtocol"
        },
        "schemaVaultSecretInfoType": {
            "type": "object",
            "description": "x-displayName: \"Vault Secret\"\nVaultSecretInfoType specifies information about the Secret managed by Hashicorp Vault.",
            "title": "VaultSecretInfoType",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "x-displayName: \"Key\"\nx-example: \"key_pem\"\nKey of the individual secret. Vault Secrets are stored as key-value pair.\nIf user is only interested in one value from the map, this field should be set to the corresponding key.\nIf not provided entire secret will be returned.",
                    "title": "Key"
                },
                "location": {
                    "type": "string",
                    "description": "x-displayName: \"Location\"\nx-required\nx-example: \"v1/data/vhost_key\"\nPath to secret in Vault.",
                    "title": "Location"
                },
                "provider": {
                    "type": "string",
                    "description": "x-displayName: \"Provider\"\nx-required\nx-example: \"vault-vh-provider\"\nName of the Secret Management Access object that contains information about the backend Vault.",
                    "title": "Provider"
                },
                "secret_encoding": {
                    "description": "x-displayName: \"Secret Encoding\"\nThis field defines the encoding type of the secret BEFORE the secret is put into Hashicorp Vault.",
                    "title": "secret_encoding",
                    "$ref": "#/definitions/schemaSecretEncodingType"
                },
                "version": {
                    "type": "integer",
                    "description": "x-displayName: \"Version\"\nx-example: \"1\"\nVersion of the secret to be fetched. As vault secrets are versioned, user can specify this field to fetch specific version.\nIf not provided latest version will be returned.",
                    "title": "Version",
                    "format": "int64"
                }
            }
        },
        "schemaViewRefType": {
            "type": "object",
            "description": "ViewRefType represents a reference to a view",
            "title": "ViewRefType",
            "x-displayname": "View Reference",
            "x-ves-proto-message": "ves.io.schema.ViewRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": " Kind of the view object\n\nExample: - \"http_proxy\"-",
                    "title": "kind",
                    "x-displayname": "Kind",
                    "x-ves-example": "http_proxy"
                },
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contactus-route\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "contactus-route"
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "uid": {
                    "type": "string",
                    "description": " UID of the view object\n\nExample: - \"f3744323-1adf-4aaa-a5dc-0707c1d1bd82\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "f3744323-1adf-4aaa-a5dc-0707c1d1bd82"
                }
            }
        },
        "schemaWingmanSecretInfoType": {
            "type": "object",
            "description": "x-displayName: \"Wingman Secret\"\nWingmanSecretInfoType specifies the handle to the wingman secret",
            "title": "WingmanSecretInfoType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-required\nx-example: \"ChargeBack-API-Key\"\nName of the secret.",
                    "title": "Name"
                }
            }
        },
        "schemaXfccElement": {
            "type": "string",
            "description": "X-Forwarded-Client-Cert custom cookie elements\n\nThe entire client certificate in URL encoded PEM format.\nThe entire client certificate chain (including the leaf certificate) in URL encoded PEM format.\nThe Subject field of the current client certificate. The value is always double-quoted.\nThe URI type Subject Alternative Name field of the current client certificate.\nA client certificate may contain multiple URI type Subject Alternative Names,\neach will be a separate key-value pair.\nThe DNS type Subject Alternative Name field of the current client certificate.\nA client certificate may contain multiple DNS type Subject Alternative Names,\neach will be a separate key-value pair.",
            "title": "XfccElement",
            "enum": [
                "XFCC_NONE",
                "XFCC_CERT",
                "XFCC_CHAIN",
                "XFCC_SUBJECT",
                "XFCC_URI",
                "XFCC_DNS"
            ],
            "default": "XFCC_NONE",
            "x-displayname": "XFCC Elements",
            "x-ves-proto-enum": "ves.io.schema.XfccElement"
        },
        "schemaviewsDownstreamTlsParamsType": {
            "type": "object",
            "description": "Inline TLS parameters",
            "title": "DownstreamTlsParamsType",
            "x-displayname": "Inline TLS Parameters",
            "x-ves-oneof-field-mtls_choice": "[\"no_mtls\",\"use_mtls\"]",
            "x-ves-proto-message": "ves.io.schema.views.DownstreamTlsParamsType",
            "properties": {
                "no_mtls": {
                    "description": "Exclusive with [use_mtls]\n",
                    "title": "No mTLS",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Disable"
                },
                "tls_certificates": {
                    "type": "array",
                    "description": " Users can add one or more certificates that share the same set of domains.\n for example, domain.com and *.domain.com - but use different signature algorithms\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 16\n  ves.io.schema.rules.repeated.min_items: 1\n",
                    "title": "tls_certificates",
                    "minItems": 1,
                    "maxItems": 16,
                    "items": {
                        "$ref": "#/definitions/schemaTlsCertificateType"
                    },
                    "x-displayname": "TLS Certificates",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "16",
                        "ves.io.schema.rules.repeated.min_items": "1"
                    }
                },
                "tls_config": {
                    "description": " Configuration of TLS settings such as min/max TLS version and ciphersuites",
                    "title": "TLS Config",
                    "$ref": "#/definitions/viewsTlsConfig",
                    "x-displayname": "TLS"
                },
                "use_mtls": {
                    "description": "Exclusive with [no_mtls]\n",
                    "title": "Use mTLS",
                    "$ref": "#/definitions/viewsDownstreamTlsValidationContext",
                    "x-displayname": "Enable"
                }
            }
        },
        "schemaviewsObjectRefType": {
            "type": "object",
            "description": "This type establishes a direct reference from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name",
            "title": "ObjectRefType",
            "x-displayname": "Object reference",
            "x-ves-proto-message": "ves.io.schema.views.ObjectRefType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then name will hold the referred object's(e.g. route's) name.\n\nExample: - \"contacts-route\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.max_bytes: 128\n  ves.io.schema.rules.string.min_bytes: 1\n",
                    "title": "name",
                    "minLength": 1,
                    "maxLength": 128,
                    "x-displayname": "Name",
                    "x-ves-example": "contacts-route",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.max_bytes": "128",
                        "ves.io.schema.rules.string.min_bytes": "1"
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then namespace will hold the referred object's(e.g. route's) namespace.\n\nExample: - \"ns1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 64\n",
                    "title": "namespace",
                    "maxLength": 64,
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "64"
                    }
                },
                "tenant": {
                    "type": "string",
                    "description": " When a configuration object(e.g. virtual_host) refers to another(e.g route)\n then tenant will hold the referred object's(e.g. route's) tenant.\n\nExample: - \"acmecorp\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 64\n",
                    "title": "tenant",
                    "maxLength": 64,
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "64"
                    }
                }
            }
        },
        "tcp_loadbalancerCreateRequest": {
            "type": "object",
            "description": "This is the input message of the 'Create' RPC",
            "title": "CreateRequest is used to create an instance of tcp_loadbalancer",
            "x-displayname": "Create Request",
            "x-ves-proto-message": "ves.io.schema.views.tcp_loadbalancer.CreateRequest",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectCreateMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the tenant",
                    "title": "spec",
                    "$ref": "#/definitions/viewstcp_loadbalancerCreateSpecType",
                    "x-displayname": "Spec"
                }
            }
        },
        "tcp_loadbalancerCreateResponse": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.views.tcp_loadbalancer.CreateResponse",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the tenant",
                    "title": "spec",
                    "$ref": "#/definitions/viewstcp_loadbalancerGetSpecType",
                    "x-displayname": "Spec"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "tcp_loadbalancerDeleteRequest": {
            "type": "object",
            "description": "This is the input message of the 'Delete' RPC.",
            "title": "DeleteRequest is used to delete a tcp_loadbalancer",
            "x-displayname": "Delete Request",
            "x-ves-proto-message": "ves.io.schema.views.tcp_loadbalancer.DeleteRequest",
            "properties": {
                "fail_if_referred": {
                    "type": "boolean",
                    "description": " Fail the delete operation if this object is being referred by other objects",
                    "title": "fail_if_referred",
                    "format": "boolean",
                    "x-displayname": "Fail-If-Referred"
                },
                "name": {
                    "type": "string",
                    "description": " Name of the configuration object\n\nExample: - \"name\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": " Namespace in which the configuration object is present\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                }
            }
        },
        "tcp_loadbalancerGetResponse": {
            "type": "object",
            "description": "This is the output message of the 'Get' RPC",
            "title": "GetResponse is the shape of a read tcp_loadbalancer",
            "x-displayname": "Get Response",
            "x-ves-proto-message": "ves.io.schema.views.tcp_loadbalancer.GetResponse",
            "properties": {
                "create_form": {
                    "description": "Format used to create a new similar object",
                    "title": "create_form",
                    "$ref": "#/definitions/tcp_loadbalancerCreateRequest",
                    "x-displayname": "CreateRequest Format"
                },
                "deleted_referred_objects": {
                    "type": "array",
                    "description": "The set of deleted objects that are referred by this object",
                    "title": "deleted_referred_objects",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Deleted Referred Objects"
                },
                "disabled_referred_objects": {
                    "type": "array",
                    "description": "The set of deleted objects that are referred by this object",
                    "title": "disabled_referred_objects",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Disabled Referred Objects"
                },
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "referring_objects": {
                    "type": "array",
                    "description": "The set of objects that are referring to this object in their spec",
                    "title": "referring_objects",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Referring Objects"
                },
                "replace_form": {
                    "description": "Format to replace changeable values in object",
                    "title": "replace_form",
                    "$ref": "#/definitions/tcp_loadbalancerReplaceRequest",
                    "x-displayname": "ReplaceRequest Format"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the tenant",
                    "title": "spec",
                    "$ref": "#/definitions/viewstcp_loadbalancerGetSpecType",
                    "x-displayname": "Spec"
                },
                "status": {
                    "type": "array",
                    "description": "The status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/tcp_loadbalancerStatusObject"
                    },
                    "x-displayname": "Status"
                },
                "system_metadata": {
                    "description": " System generated object's metadata",
                    "title": "system metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                }
            }
        },
        "tcp_loadbalancerGetResponseFormatCode": {
            "type": "string",
            "description": "x-displayName: \"Get Response Format\"\nThis is the various forms that can be requested to be sent in the GetResponse\n\n - GET_RSP_FORMAT_DEFAULT: x-displayName: \"Default Format\"\nDefault format of returned resource\n - GET_RSP_FORMAT_FOR_CREATE: x-displayName: \"Create request Format\"\nResponse should be in CreateRequest format\n - GET_RSP_FORMAT_FOR_REPLACE: x-displayName: \"Replace request format\"\nResponse should be in ReplaceRequest format\n - GET_RSP_FORMAT_STATUS: x-displayName: \"Status format\"\nResponse should be in StatusObject(s) format\n - GET_RSP_FORMAT_READ: x-displayName: \"GetSpecType format\"\nResponse should be in format of GetSpecType\n - GET_RSP_FORMAT_REFERRING_OBJECTS: x-displayName: \"Referring Objects\"\nResponse should have other objects referring to this object\n - GET_RSP_FORMAT_BROKEN_REFERENCES: x-displayName: \"Broken Referred Objects\"\nResponse should have deleted and disabled objects referrred by this object",
            "title": "GetResponseFormatCode",
            "enum": [
                "GET_RSP_FORMAT_DEFAULT",
                "GET_RSP_FORMAT_FOR_CREATE",
                "GET_RSP_FORMAT_FOR_REPLACE",
                "GET_RSP_FORMAT_STATUS",
                "GET_RSP_FORMAT_READ",
                "GET_RSP_FORMAT_REFERRING_OBJECTS",
                "GET_RSP_FORMAT_BROKEN_REFERENCES"
            ],
            "default": "GET_RSP_FORMAT_DEFAULT"
        },
        "tcp_loadbalancerListResponse": {
            "type": "object",
            "description": "This is the output message of 'List' RPC.",
            "title": "ListResponse is the collection of tcp_loadbalancer",
            "x-displayname": "List Response",
            "x-ves-proto-message": "ves.io.schema.views.tcp_loadbalancer.ListResponse",
            "properties": {
                "errors": {
                    "type": "array",
                    "description": " Errors(if any) while listing items from collection",
                    "title": "errors",
                    "items": {
                        "$ref": "#/definitions/schemaErrorType"
                    },
                    "x-displayname": "Errors"
                },
                "items": {
                    "type": "array",
                    "description": " items represents the collection in response",
                    "title": "items",
                    "items": {
                        "$ref": "#/definitions/tcp_loadbalancerListResponseItem"
                    },
                    "x-displayname": "Items"
                }
            }
        },
        "tcp_loadbalancerListResponseItem": {
            "type": "object",
            "description": "By default a summary of tcp_loadbalancer is returned in 'List'. By setting\n'report_fields' in the ListRequest more details of each item can be got.",
            "title": "ListResponseItem is an individual item in a collection of tcp_loadbalancer",
            "x-displayname": "List Item",
            "x-ves-proto-message": "ves.io.schema.views.tcp_loadbalancer.ListResponseItem",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": " The set of annotations present on this tcp_loadbalancer",
                    "title": "annotations",
                    "x-displayname": "Annotations"
                },
                "description": {
                    "type": "string",
                    "description": " The description set for this tcp_loadbalancer",
                    "title": "description",
                    "x-displayname": "Description"
                },
                "disabled": {
                    "type": "boolean",
                    "description": " A value of true indicates tcp_loadbalancer is administratively disabled",
                    "title": "disabled",
                    "format": "boolean",
                    "x-displayname": "Disabled"
                },
                "get_spec": {
                    "description": " If ListRequest has any specified report_fields, it will appear in object",
                    "title": "get_spec",
                    "$ref": "#/definitions/viewstcp_loadbalancerGetSpecType",
                    "x-displayname": "Get Specification"
                },
                "labels": {
                    "type": "object",
                    "description": " The set of labels present on this tcp_loadbalancer",
                    "title": "labels",
                    "x-displayname": "Labels"
                },
                "metadata": {
                    "description": " If list request has report_fields set then metadata will\n contain all the metadata associated with the object.",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType",
                    "x-displayname": "Metadata"
                },
                "name": {
                    "type": "string",
                    "description": " The name of this tcp_loadbalancer\n\nExample: - \"name\"-",
                    "title": "name",
                    "x-displayname": "Name",
                    "x-ves-example": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": " The namespace this item belongs to\n\nExample: - \"ns1\"-",
                    "title": "namespace",
                    "x-displayname": "Namespace",
                    "x-ves-example": "ns1"
                },
                "owner_view": {
                    "description": " Reference to the view object that owns this object.\n If there is no view owner, this field will be nil.\n If not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType",
                    "x-displayname": "Owner View"
                },
                "status_set": {
                    "type": "array",
                    "description": " The status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/tcp_loadbalancerStatusObject"
                    },
                    "x-displayname": "Status"
                },
                "system_metadata": {
                    "description": " If list request has report_fields set then system_metadata will\n contain all the system generated details of this object.",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType",
                    "x-displayname": "System Metadata"
                },
                "tenant": {
                    "type": "string",
                    "description": " The tenant this item belongs to\n\nExample: - \"acmecorp\"-",
                    "title": "tenant",
                    "x-displayname": "Tenant",
                    "x-ves-example": "acmecorp"
                },
                "uid": {
                    "type": "string",
                    "description": " The unique uid of this tcp_loadbalancer\n\nExample: - \"d27938ba-967e-40a7-9709-57b8627f9f75\"-",
                    "title": "uid",
                    "x-displayname": "UID",
                    "x-ves-example": "d27938ba-967e-40a7-9709-57b8627f9f75"
                }
            }
        },
        "tcp_loadbalancerProxyTypeTLSTCP": {
            "type": "object",
            "description": "Choice for selecting TLS over TCP proxy with bring your own certificates",
            "title": "BYOC TLS over TCP Choice",
            "x-displayname": "BYOC TLS over TCP Choice",
            "x-ves-oneof-field-tls_certificates_choice": "[\"tls_cert_params\",\"tls_parameters\"]",
            "x-ves-proto-message": "ves.io.schema.views.tcp_loadbalancer.ProxyTypeTLSTCP",
            "properties": {
                "tls_cert_params": {
                    "description": "Exclusive with [tls_parameters]\n Select/Add one or more TLS Certificate objects to associate with this Load Balancer",
                    "title": "TLS Certificates",
                    "$ref": "#/definitions/viewsDownstreamTLSCertsParams",
                    "x-displayname": "TLS Certificates"
                },
                "tls_parameters": {
                    "description": "Exclusive with [tls_cert_params]\n Upload a TLS certificate specifically for this Load Balancer (certificate must cover all Load Balancer domain names)",
                    "title": "Inline TLS Parameters (legacy)",
                    "$ref": "#/definitions/schemaviewsDownstreamTlsParamsType",
                    "x-displayname": "Inline Certificate (legacy)"
                }
            }
        },
        "tcp_loadbalancerProxyTypeTLSTCPAutoCerts": {
            "type": "object",
            "description": "Choice for selecting TLS over TCP proxy with automatic certificates",
            "title": "TLS over TCP with Auto Certs Choice",
            "x-displayname": "TLS over TCP with Auto Certs Choice",
            "x-ves-displayorder": "3,4",
            "x-ves-oneof-field-mtls_choice": "[\"no_mtls\",\"use_mtls\"]",
            "x-ves-proto-message": "ves.io.schema.views.tcp_loadbalancer.ProxyTypeTLSTCPAutoCerts",
            "properties": {
                "no_mtls": {
                    "description": "Exclusive with [use_mtls]\n",
                    "title": "No mTLS",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Disable"
                },
                "tls_config": {
                    "description": " Configuration of TLS settings such as min/max TLS version and ciphersuites",
                    "title": "TLS Config",
                    "$ref": "#/definitions/viewsTlsConfig",
                    "x-displayname": "TLS"
                },
                "use_mtls": {
                    "description": "Exclusive with [no_mtls]\n",
                    "title": "Use mTLS",
                    "$ref": "#/definitions/viewsDownstreamTlsValidationContext",
                    "x-displayname": "Enable"
                }
            }
        },
        "tcp_loadbalancerReplaceRequest": {
            "type": "object",
            "description": "This is the input message of the 'Replace' RPC",
            "title": "ReplaceRequest is used to replace contents of a tcp_loadbalancer",
            "x-displayname": "Replace Request",
            "x-ves-proto-message": "ves.io.schema.views.tcp_loadbalancer.ReplaceRequest",
            "properties": {
                "metadata": {
                    "description": " Standard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectReplaceMetaType",
                    "x-displayname": "Metadata"
                },
                "spec": {
                    "description": " Specification of the desired behavior of the tenant",
                    "title": "spec",
                    "$ref": "#/definitions/viewstcp_loadbalancerReplaceSpecType",
                    "x-displayname": "Spec"
                }
            }
        },
        "tcp_loadbalancerReplaceResponse": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.views.tcp_loadbalancer.ReplaceResponse"
        },
        "tcp_loadbalancerServicePolicyList": {
            "type": "object",
            "description": "List of service policies.",
            "title": "service policy list",
            "x-displayname": "Service Policy List",
            "x-ves-proto-message": "ves.io.schema.views.tcp_loadbalancer.ServicePolicyList",
            "properties": {
                "policies": {
                    "type": "array",
                    "description": " Service Policies is a sequential engine where policies (and rules within the policy) are evaluated one after the other. It's important to define the\n correct order (policies evaluated from top to bottom in the list) for service policies, to get the intended result.\n For each request, its characteristics are evaluated based on the match criteria in each service policy starting at the top. If there is a match in the\n current policy, then the policy takes effect, and no more policies are evaluated. Otherwise, the next policy is evaluated.\n If all policies are evaluated and none match, then the request will be denied by default.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 16\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "policies",
                    "minItems": 1,
                    "maxItems": 16,
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "Policies",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "16",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "tcp_loadbalancerStatusObject": {
            "type": "object",
            "description": "Most recently observed status of object",
            "title": "StatusObject",
            "x-displayname": "Status",
            "x-ves-proto-message": "ves.io.schema.views.tcp_loadbalancer.StatusObject",
            "properties": {
                "conditions": {
                    "type": "array",
                    "description": " Conditions represent the normalized status values for configuration object",
                    "title": "conditions",
                    "items": {
                        "$ref": "#/definitions/schemaConditionType"
                    },
                    "x-displayname": "Conditions"
                },
                "metadata": {
                    "description": " Standard status's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaStatusMetaType",
                    "x-displayname": "Metadata"
                },
                "object_refs": {
                    "type": "array",
                    "description": " TCP loadbalancer view object direct reference",
                    "title": "object_refs",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    },
                    "x-displayname": "Config Object"
                },
                "virtual_host_status": {
                    "description": " DNS related Virtual Host status",
                    "title": "DNS Virtual Host Status",
                    "$ref": "#/definitions/virtual_hostDNSVHostStatusType",
                    "x-displayname": "DNS Virtual Host Status"
                }
            }
        },
        "viewsAdvertiseCustom": {
            "type": "object",
            "description": "This defines a way to advertise a VIP on specific sites",
            "title": "AdvertiseWhere",
            "x-displayname": "Advertise Custom",
            "x-ves-proto-message": "ves.io.schema.views.AdvertiseCustom",
            "properties": {
                "advertise_where": {
                    "type": "array",
                    "description": " Where should this load balancer be available\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 32\n  ves.io.schema.rules.repeated.min_items: 1\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "Advertise Where",
                    "minItems": 1,
                    "maxItems": 32,
                    "items": {
                        "$ref": "#/definitions/viewsWhereType"
                    },
                    "x-displayname": "List of Sites to Advertise",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "32",
                        "ves.io.schema.rules.repeated.min_items": "1",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                }
            }
        },
        "viewsAdvertisePublic": {
            "type": "object",
            "description": "This defines a way to advertise a load balancer on public. If optional public_ip is provided, it will only be advertised on RE sites where that public_ip is available",
            "title": "AdvertisePublic",
            "x-displayname": "Advertise Public",
            "x-ves-proto-message": "ves.io.schema.views.AdvertisePublic",
            "properties": {
                "public_ip": {
                    "description": " Dedicated Public IP, which is allocated by F5 Distributed Cloud on request, is used as a VIP.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Public IP",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Public IP",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "viewsCustomCiphers": {
            "type": "object",
            "description": "This defines TLS protocol config including min/max versions and allowed ciphers",
            "title": "CustomCiphers",
            "x-displayname": "Custom Ciphers",
            "x-ves-displayorder": "1,2,3",
            "x-ves-proto-message": "ves.io.schema.views.CustomCiphers",
            "properties": {
                "cipher_suites": {
                    "type": "array",
                    "description": " The TLS listener will only support the specified cipher list.\n\nExample: - \"TLS_AES_128_GCM_SHA256\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.string.in: [\\\"TLS_AES_128_GCM_SHA256\\\",\\\"TLS_AES_256_GCM_SHA384\\\",\\\"TLS_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\\\",\\\"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\\\",\\\"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_RSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_256_GCM_SHA384\\\"]\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "cipher_suites",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Cipher Suites",
                    "x-ves-example": "TLS_AES_128_GCM_SHA256",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.string.in": "[\\\"TLS_AES_128_GCM_SHA256\\\",\\\"TLS_AES_256_GCM_SHA384\\\",\\\"TLS_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\\\",\\\"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\\\",\\\"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_128_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_128_GCM_SHA256\\\",\\\"TLS_RSA_WITH_AES_256_CBC_SHA\\\",\\\"TLS_RSA_WITH_AES_256_GCM_SHA384\\\"]",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "max_version": {
                    "description": " Maximum TLS protocol version.",
                    "title": "maximum_protocol_version",
                    "$ref": "#/definitions/schemaTlsProtocol",
                    "x-displayname": "Maximum TLS version"
                },
                "min_version": {
                    "description": " Minimum TLS protocol version.",
                    "title": "minimum_protocol_version",
                    "$ref": "#/definitions/schemaTlsProtocol",
                    "x-displayname": "Minimum TLS version"
                }
            }
        },
        "viewsDownstreamTLSCertsParams": {
            "type": "object",
            "description": "Select TLS Parameters and Certificates",
            "title": "DownstreamTLSCertsParams",
            "x-displayname": "TLS Parameters",
            "x-ves-oneof-field-mtls_choice": "[\"no_mtls\",\"use_mtls\"]",
            "x-ves-proto-message": "ves.io.schema.views.DownstreamTLSCertsParams",
            "properties": {
                "certificates": {
                    "type": "array",
                    "description": " Select one or more certificates with any domain names.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.max_items: 32\n  ves.io.schema.rules.repeated.unique: true\n",
                    "title": "certificates",
                    "maxItems": 32,
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    },
                    "x-displayname": "Certificates",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.max_items": "32",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "no_mtls": {
                    "description": "Exclusive with [use_mtls]\n",
                    "title": "No mTLS",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Disable"
                },
                "tls_config": {
                    "description": " Configuration of TLS settings such as min/max TLS version and ciphersuites",
                    "title": "TLS Config",
                    "$ref": "#/definitions/viewsTlsConfig",
                    "x-displayname": "TLS"
                },
                "use_mtls": {
                    "description": "Exclusive with [no_mtls]\n",
                    "title": "Use mTLS",
                    "$ref": "#/definitions/viewsDownstreamTlsValidationContext",
                    "x-displayname": "Enable"
                }
            }
        },
        "viewsDownstreamTlsValidationContext": {
            "type": "object",
            "description": "Validation context for downstream client TLS connections",
            "title": "DownstreamTlsValidationContext",
            "x-displayname": "Clients TLS validation context",
            "x-ves-oneof-field-crl_choice": "[\"crl\",\"no_crl\"]",
            "x-ves-oneof-field-trusted_ca_choice": "[\"trusted_ca\",\"trusted_ca_url\"]",
            "x-ves-oneof-field-xfcc_header": "[\"xfcc_disabled\",\"xfcc_options\"]",
            "x-ves-proto-message": "ves.io.schema.views.DownstreamTlsValidationContext",
            "properties": {
                "crl": {
                    "description": "Exclusive with [no_crl]\n\n Client certificate is verified against CRL.\n Specify the CRL server information to download the certificate revocation list",
                    "title": "Verify client certificate with CRL",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "CRL"
                },
                "no_crl": {
                    "description": "Exclusive with [crl]\n Client certificate revocation status is not verified",
                    "title": "No client certificate verification with CRL",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "No CRL"
                },
                "trusted_ca": {
                    "description": "Exclusive with [trusted_ca_url]\n Select/Add a Root CA Certificate object to associate with this Load Balancer",
                    "title": "trusted_ca",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Root CA Certificate"
                },
                "trusted_ca_url": {
                    "type": "string",
                    "description": "Exclusive with [trusted_ca]\n Upload a Root CA Certificate specifically for this Load Balancer\n\nValidation Rules:\n  ves.io.schema.rules.string.max_bytes: 131072\n  ves.io.schema.rules.string.min_bytes: 1\n  ves.io.schema.rules.string.truststore_url: true\n",
                    "title": "trusted_ca_url",
                    "minLength": 1,
                    "maxLength": 131072,
                    "x-displayname": "Inline Root CA Certificate (legacy)",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_bytes": "131072",
                        "ves.io.schema.rules.string.min_bytes": "1",
                        "ves.io.schema.rules.string.truststore_url": "true"
                    }
                },
                "xfcc_disabled": {
                    "description": "Exclusive with [xfcc_options]\n No X-Forwarded-Client-Cert header will be added",
                    "title": "No XFCC header",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Disabled"
                },
                "xfcc_options": {
                    "description": "Exclusive with [xfcc_disabled]\n X-Forwarded-Client-Cert header will be added with the configured fields",
                    "title": "Add XFCC header",
                    "$ref": "#/definitions/viewsXfccHeaderKeys",
                    "x-displayname": "Enabled"
                }
            }
        },
        "viewsInternetVIPInfo": {
            "type": "object",
            "description": "Internet VIP Info",
            "title": "Internet VIP Info",
            "x-displayname": "Internet VIP Info",
            "x-ves-proto-message": "ves.io.schema.views.InternetVIPInfo",
            "properties": {
                "site_name": {
                    "type": "string",
                    "description": " Site Name where Internet VIP is installed",
                    "title": "Site Name",
                    "x-displayname": "Site Name"
                },
                "site_network_type": {
                    "description": " Network Type of the site where Internet VIP is installed",
                    "title": "Site Network Type",
                    "$ref": "#/definitions/viewsSiteNetwork",
                    "x-displayname": "Site Network Type"
                },
                "status": {
                    "description": " Detailed status for internet VIP",
                    "title": "Internet VIP Status",
                    "$ref": "#/definitions/viewsInternetVIPStatus",
                    "x-displayname": "Status"
                }
            }
        },
        "viewsInternetVIPListenerStatusType": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.views.InternetVIPListenerStatusType",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": " Name",
                    "title": "Name",
                    "x-displayname": "Name"
                },
                "port": {
                    "type": "integer",
                    "description": " Port",
                    "title": "Port",
                    "format": "int64",
                    "x-displayname": "Port"
                },
                "protocol": {
                    "type": "string",
                    "description": " Protocol",
                    "title": "Protocol",
                    "x-displayname": "Protocol"
                },
                "reason": {
                    "type": "string",
                    "description": " Reason",
                    "title": "Reason",
                    "x-displayname": "reason"
                },
                "status": {
                    "type": "string",
                    "description": " Status",
                    "title": "Status",
                    "x-displayname": "Status"
                }
            }
        },
        "viewsInternetVIPStatus": {
            "type": "object",
            "description": "CName and installation info",
            "title": "Internet VIP Status",
            "x-displayname": "Internet VIP Status",
            "x-ves-proto-message": "ves.io.schema.views.InternetVIPStatus",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": " ARN",
                    "title": "ARN",
                    "x-displayname": "ARN"
                },
                "name": {
                    "type": "string",
                    "description": " Name",
                    "title": "Name",
                    "x-displayname": "Name"
                },
                "nlb_cname": {
                    "type": "string",
                    "description": " NLB CNAME",
                    "title": "NLB CNAME",
                    "x-displayname": "NLB CNAME"
                },
                "nlb_status": {
                    "type": "string",
                    "description": " NLB Status",
                    "title": "NLB Status",
                    "x-displayname": "NLB Status"
                },
                "reason": {
                    "type": "string",
                    "description": " Reason",
                    "title": "Reason",
                    "x-displayname": "reason"
                },
                "target_group_status": {
                    "type": "array",
                    "description": " Target Group Status",
                    "title": "Target Group Status",
                    "items": {
                        "$ref": "#/definitions/viewsInternetVIPTargetGroupStatusType"
                    },
                    "x-displayname": "Target Group Status"
                }
            }
        },
        "viewsInternetVIPTargetGroupStatusType": {
            "type": "object",
            "x-ves-proto-message": "ves.io.schema.views.InternetVIPTargetGroupStatusType",
            "properties": {
                "arn": {
                    "type": "string",
                    "description": " ARN",
                    "title": "ARN",
                    "x-displayname": "ARN"
                },
                "listener_status": {
                    "type": "array",
                    "description": " Listener status",
                    "title": "Listener status",
                    "items": {
                        "$ref": "#/definitions/viewsInternetVIPListenerStatusType"
                    },
                    "x-displayname": "Listener status"
                },
                "name": {
                    "type": "string",
                    "description": " Name",
                    "title": "Name",
                    "x-displayname": "Name"
                },
                "protocol": {
                    "type": "string",
                    "description": " Protocol",
                    "title": "Protocol",
                    "x-displayname": "Protocol"
                },
                "reason": {
                    "type": "string",
                    "description": " Reason",
                    "title": "Reason",
                    "x-displayname": "reason"
                },
                "status": {
                    "type": "string",
                    "description": " Status",
                    "title": "Status",
                    "x-displayname": "Status"
                }
            }
        },
        "viewsOriginPoolWithWeight": {
            "type": "object",
            "description": "This defines a combination of origin pool with weight and priority",
            "title": "OriginPoolWithWeight",
            "x-displayname": "Origin Pool with Weight",
            "x-ves-oneof-field-pool_choice": "[\"cluster\",\"pool\"]",
            "x-ves-proto-message": "ves.io.schema.views.OriginPoolWithWeight",
            "properties": {
                "cluster": {
                    "description": "Exclusive with [pool]\n More flexible, advanced feature control with cluster",
                    "title": "Cluster",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Custom Cluster"
                },
                "endpoint_subsets": {
                    "type": "object",
                    "description": " Upstream origin pool may be configured to divide its origin servers into subsets based on metadata\n attached to the origin servers. Routes may then specify the metadata that a endpoint must match in\n order to be selected by the load balancer\n\n For origin servers which are discovered in K8S or Consul cluster, the label of the service is merged with\n endpoint's labels. In case of Consul, the label is derived from the \"Tag\" field.\n For labels that are common between configured endpoint and discovered service, labels from discovered service\n takes precedence.\n\n List of key-value pairs that will be used as matching metadata. Only those origin servers of\n upstream origin pool which match this metadata will be selected for load balancing\n\nExample: - \"value\"-\n\nValidation Rules:\n  ves.io.schema.rules.map.max_pairs: 16\n",
                    "title": "Origin Servers Subset",
                    "x-displayname": "Origin Servers Subsets",
                    "x-ves-example": "value",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.map.max_pairs": "16"
                    }
                },
                "pool": {
                    "description": "Exclusive with [cluster]\n Simple, commonly used pool parameters with origin pool",
                    "title": "Pool",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Origin Pool"
                },
                "priority": {
                    "type": "integer",
                    "description": " Priority of this origin pool, valid only with multiple origin pools.\n Value of 0 will make the pool as lowest priority origin pool\n Priority of 1 means highest priority and is considered active.\n When active origin pool is not available, lower priority origin pools are\n made active as per the increasing priority.\n\nExample: - \"1\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 32\n",
                    "title": "Priority",
                    "format": "int64",
                    "x-displayname": "Priority",
                    "x-ves-example": "1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "32"
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": " Weight of this origin pool, valid only with multiple origin pool. Value of 0 will disable the pool\n\nExample: - \"1\"-",
                    "title": "Weight",
                    "format": "int64",
                    "x-displayname": "Weight",
                    "x-ves-example": "1"
                }
            }
        },
        "viewsSiteNetwork": {
            "type": "string",
            "description": "This defines network types to be used on site\n\nAll inside and outside networks.\nAll inside and outside networks with internet VIP support.\nAll inside networks.\nAll outside networks.\nAll outside networks with internet VIP support.\nvK8s service network.\n - SITE_NETWORK_IP_FABRIC: VER IP Fabric network for the site\n\nThis Virtual network type is used for exposing virtual host on IP Fabric network on the VER site or\nfor endpoint in IP Fabric network",
            "title": "SiteNetwork",
            "enum": [
                "SITE_NETWORK_INSIDE_AND_OUTSIDE",
                "SITE_NETWORK_INSIDE",
                "SITE_NETWORK_OUTSIDE",
                "SITE_NETWORK_SERVICE",
                "SITE_NETWORK_OUTSIDE_WITH_INTERNET_VIP",
                "SITE_NETWORK_INSIDE_AND_OUTSIDE_WITH_INTERNET_VIP",
                "SITE_NETWORK_IP_FABRIC"
            ],
            "default": "SITE_NETWORK_INSIDE_AND_OUTSIDE",
            "x-displayname": "Site Network",
            "x-ves-proto-enum": "ves.io.schema.views.SiteNetwork"
        },
        "viewsTlsConfig": {
            "type": "object",
            "description": "This defines various options to configure TLS configuration parameters",
            "title": "TlsConfig",
            "x-displayname": "TLS Config",
            "x-ves-displayorder": "5",
            "x-ves-oneof-field-choice": "[\"custom_security\",\"default_security\",\"low_security\",\"medium_security\"]",
            "x-ves-proto-message": "ves.io.schema.views.TlsConfig",
            "properties": {
                "custom_security": {
                    "description": "Exclusive with [default_security low_security medium_security]\n Custom selection of TLS versions and cipher suites",
                    "title": "Custom Security",
                    "$ref": "#/definitions/viewsCustomCiphers",
                    "x-displayname": "Custom"
                },
                "default_security": {
                    "description": "Exclusive with [custom_security low_security medium_security]\n TLS v1.2+ with PFS ciphers and strong crypto algorithms.",
                    "title": "Default Security",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "High"
                },
                "low_security": {
                    "description": "Exclusive with [custom_security default_security medium_security]\n TLS v1.0+ including non-PFS ciphers and weak crypto algorithms.",
                    "title": "Low Security",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Low"
                },
                "medium_security": {
                    "description": "Exclusive with [custom_security default_security low_security]\n TLS v1.0+ with PFS ciphers and medium strength crypto algorithms.",
                    "title": "Medium Security",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Medium"
                }
            }
        },
        "viewsWhereCloudEdgeSegment": {
            "type": "object",
            "description": "This defines a reference to a Segment on a Cloud Edge and an optional ip address where a load balancer could be advertised",
            "title": "WhereCloudEdgeSegment",
            "x-displayname": "Segment on a Cloud Edge",
            "x-ves-displayorder": "1,2,3,4",
            "x-ves-proto-message": "ves.io.schema.views.WhereCloudEdgeSegment",
            "properties": {
                "cloud_edge": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Cloud Edge",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "ip": {
                    "type": "string",
                    "description": " Use given IP address as VIP on the Cloud Edge\n\nExample: - \"8.8.8.8\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "IP address on the Cloud Edge",
                    "x-displayname": "IP Address",
                    "x-ves-example": "8.8.8.8",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "ipv6": {
                    "type": "string",
                    "description": " Use given IPv6 address as VIP on the Cloud Edge\n\nExample: - \"2001::1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "IPv6 address on the Cloud Edge",
                    "x-displayname": "IPv6 Address",
                    "x-ves-example": "2001::1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                },
                "segment": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Segment",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Segment",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "viewsWhereSegment": {
            "type": "object",
            "description": "Parameters to advertise on a given virtual network",
            "title": "WhereVirtualNetwork",
            "x-displayname": "Virtual Network",
            "x-ves-displayorder": "1,2,10",
            "x-ves-proto-message": "ves.io.schema.views.WhereSegment",
            "properties": {
                "ipv4_vip": {
                    "type": "string",
                    "description": " Configure IPV4 VIP address\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "IPv4 VIP",
                    "x-displayname": "IPV4 VIP",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "ipv6_vip": {
                    "type": "string",
                    "description": " Configure IPV6 VIP address\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "IPv6 VIP",
                    "x-displayname": "IPV6 VIP",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                },
                "segment": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Segment",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Segment",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "viewsWhereSite": {
            "type": "object",
            "description": "This defines a reference to a CE site along with network type and an optional ip address where a load balancer could be advertised",
            "title": "WhereSite",
            "x-displayname": "Site",
            "x-ves-displayorder": "1,2,3",
            "x-ves-proto-message": "ves.io.schema.views.WhereSite",
            "properties": {
                "ip": {
                    "type": "string",
                    "description": " Use given IP address as VIP on the site\n\nExample: - \"8.8.8.8\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "IP address on the site",
                    "x-displayname": "IP Address",
                    "x-ves-example": "8.8.8.8",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "ipv6": {
                    "type": "string",
                    "description": " Use given IPv6 address as VIP on the site\n\nExample: - \"2001::1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "IPv6 address on the site",
                    "x-displayname": "IPv6 Address",
                    "x-ves-example": "2001::1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                },
                "network": {
                    "description": " Select network types to be used on site\n By default VIP chosen as ip address of primary network interface in the network\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Network",
                    "$ref": "#/definitions/viewsSiteNetwork",
                    "x-displayname": "Network",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "site": {
                    "description": " Reference to site object\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Site Reference",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "viewsWhereSiteSegment": {
            "type": "object",
            "description": "This defines a reference to a Segment on a Site and an optional ip address where a load balancer could be advertised",
            "title": "WhereSiteSegment",
            "x-displayname": "Segment on Site",
            "x-ves-displayorder": "1,2,3,4",
            "x-ves-proto-message": "ves.io.schema.views.WhereSiteSegment",
            "properties": {
                "ip": {
                    "type": "string",
                    "description": " Use given IP address as VIP on the site\n\nExample: - \"8.8.8.8\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "IP address on the site",
                    "x-displayname": "IP Address",
                    "x-ves-example": "8.8.8.8",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "ipv6": {
                    "type": "string",
                    "description": " Use given IPv6 address as VIP on the site\n\nExample: - \"2001::1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "IPv6 address on the site",
                    "x-displayname": "IPv6 Address",
                    "x-ves-example": "2001::1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                },
                "segment": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Segment",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Segment",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "site": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Site",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "viewsWhereType": {
            "type": "object",
            "description": "This defines various options where a Loadbalancer could be advertised",
            "title": "WhereType",
            "x-displayname": "Select Where to Advertise",
            "x-ves-displayorder": "4,5",
            "x-ves-oneof-field-choice": "[\"cloud_edge_segment\",\"segment\",\"site\",\"site_segment\",\"virtual_network\",\"virtual_site\",\"virtual_site_segment\",\"vk8s_service\"]",
            "x-ves-oneof-field-port_choice": "[\"port\",\"use_default_port\"]",
            "x-ves-proto-message": "ves.io.schema.views.WhereType",
            "properties": {
                "cloud_edge_segment": {
                    "description": "Exclusive with [segment site site_segment virtual_network virtual_site virtual_site_segment vk8s_service]\n Advertise on a segment on a Cloud Edge",
                    "title": "Segment on Cloud Edge",
                    "$ref": "#/definitions/viewsWhereCloudEdgeSegment",
                    "x-displayname": "Segment on Cloud Edge"
                },
                "port": {
                    "type": "integer",
                    "description": "Exclusive with [use_default_port]\n TCP port to Listen.\n\nValidation Rules:\n  ves.io.schema.rules.uint32.gte: 1\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "title": "TCP port to listen",
                    "format": "int64",
                    "x-displayname": "TCP Listen Port",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.gte": "1",
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "segment": {
                    "description": "Exclusive with [cloud_edge_segment site site_segment virtual_network virtual_site virtual_site_segment vk8s_service]\n Advertise on a segment",
                    "title": "Segment",
                    "$ref": "#/definitions/viewsWhereSegment",
                    "x-displayname": "Segment"
                },
                "site": {
                    "description": "Exclusive with [cloud_edge_segment segment site_segment virtual_network virtual_site virtual_site_segment vk8s_service]\n Advertise on a customer site and a given network.",
                    "title": "Site",
                    "$ref": "#/definitions/viewsWhereSite",
                    "x-displayname": "Site"
                },
                "site_segment": {
                    "description": "Exclusive with [cloud_edge_segment segment site virtual_network virtual_site virtual_site_segment vk8s_service]\n Advertise on a segment on a site",
                    "title": "Segment on Site",
                    "$ref": "#/definitions/viewsWhereSiteSegment",
                    "x-displayname": "Segment on Site"
                },
                "use_default_port": {
                    "description": "Exclusive with [port]\n For HTTP, default is 80. For HTTPS/SNI, default is 443.",
                    "title": "Use Default port",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Use Default TCP Listen Port"
                },
                "virtual_network": {
                    "description": "Exclusive with [cloud_edge_segment segment site site_segment virtual_site virtual_site_segment vk8s_service]\n Advertise on a virtual network",
                    "title": "Virtual Network",
                    "$ref": "#/definitions/viewsWhereVirtualNetwork",
                    "x-displayname": "Virtual Network"
                },
                "virtual_site": {
                    "description": "Exclusive with [cloud_edge_segment segment site site_segment virtual_network virtual_site_segment vk8s_service]\n Advertise on a customer virtual site and a given network.",
                    "title": "Virtual Site",
                    "$ref": "#/definitions/viewsWhereVirtualSite",
                    "x-displayname": "Virtual Site"
                },
                "virtual_site_segment": {
                    "description": "Exclusive with [cloud_edge_segment segment site site_segment virtual_network virtual_site vk8s_service]\n Advertise on a segment on a virtual site",
                    "title": "Segment on Virtual Site",
                    "$ref": "#/definitions/viewsWhereVirtualSiteSegment",
                    "x-displayname": "Segment on Virtual Site"
                },
                "vk8s_service": {
                    "description": "Exclusive with [cloud_edge_segment segment site site_segment virtual_network virtual_site virtual_site_segment]\n Advertise on vK8s Service Network on RE.",
                    "title": "vK8s services network",
                    "$ref": "#/definitions/viewsWhereVK8SService",
                    "x-displayname": "vK8s Service Network on RE"
                }
            }
        },
        "viewsWhereVK8SService": {
            "type": "object",
            "description": "This defines a reference to a RE site or virtual site where a load balancer could be advertised in the vK8s service network",
            "title": "WhereVK8SService",
            "x-displayname": "vK8s Services on RE",
            "x-ves-displayorder": "3",
            "x-ves-oneof-field-choice": "[\"site\",\"virtual_site\"]",
            "x-ves-proto-message": "ves.io.schema.views.WhereVK8SService",
            "properties": {
                "site": {
                    "description": "Exclusive with [virtual_site]\n Reference to site object",
                    "title": "RE Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "RE Reference"
                },
                "virtual_site": {
                    "description": "Exclusive with [site]\n Reference to virtual site object",
                    "title": "Virtual Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Virtual Site Reference"
                }
            }
        },
        "viewsWhereVirtualNetwork": {
            "type": "object",
            "description": "Parameters to advertise on a given virtual network",
            "title": "WhereVirtualNetwork",
            "x-displayname": "Virtual Network",
            "x-ves-displayorder": "1,2,10",
            "x-ves-oneof-field-v6_vip_choice": "[\"default_v6_vip\",\"specific_v6_vip\"]",
            "x-ves-oneof-field-vip_choice": "[\"default_vip\",\"specific_vip\"]",
            "x-ves-proto-message": "ves.io.schema.views.WhereVirtualNetwork",
            "properties": {
                "default_v6_vip": {
                    "description": "Exclusive with [specific_v6_vip]\n Use the default VIP, system allocated or configured in the virtual network",
                    "title": "Default V6 VIP for virtual Network",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Default V6 VIP"
                },
                "default_vip": {
                    "description": "Exclusive with [specific_vip]\n Use the default VIP, system allocated or configured in the virtual network",
                    "title": "Default V4 VIP for Virtual Network",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Default V4 VIP"
                },
                "specific_v6_vip": {
                    "type": "string",
                    "description": "Exclusive with [default_v6_vip]\n Use given IPV6 address as VIP on virtual Network\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "Specific V6 VIP",
                    "x-displayname": "Specific V6 VIP",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                },
                "specific_vip": {
                    "type": "string",
                    "description": "Exclusive with [default_vip]\n Use given IPV4 address as VIP on virtual Network\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "Specific VIP",
                    "x-displayname": "Specific V4 VIP",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "virtual_network": {
                    "description": " Select network reference\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Network",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Network",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "viewsWhereVirtualSite": {
            "type": "object",
            "description": "This defines a reference to a customer site virtual site along with network type where a load balancer could be advertised",
            "title": "WhereVirtualSite",
            "x-displayname": "Virtual Site",
            "x-ves-displayorder": "1,2",
            "x-ves-proto-message": "ves.io.schema.views.WhereVirtualSite",
            "properties": {
                "network": {
                    "description": " Select network types to be used on site.\n IP address of primary network interface in the network\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Network",
                    "$ref": "#/definitions/viewsSiteNetwork",
                    "x-displayname": "Network",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "virtual_site": {
                    "description": " Reference to virtual site object\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Virtual Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Virtual Site Reference",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "viewsWhereVirtualSiteSegment": {
            "type": "object",
            "description": "This defines a reference to a customer site virtual site along with network type where a load balancer could be advertised",
            "title": "WhereVirtualSiteSegment",
            "x-displayname": "Virtual Site",
            "x-ves-displayorder": "1,2,3,4",
            "x-ves-proto-message": "ves.io.schema.views.WhereVirtualSiteSegment",
            "properties": {
                "ip": {
                    "type": "string",
                    "description": " Use given IP address as VIP on the site\n\nExample: - \"8.8.8.8\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.string.ipv4: true\n",
                    "title": "IP address on the site",
                    "x-displayname": "IP Address",
                    "x-ves-example": "8.8.8.8",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.string.ipv4": "true"
                    }
                },
                "ipv6": {
                    "type": "string",
                    "description": " Use given IPv6 address as VIP on the site\n\nExample: - \"2001::1\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.ipv6: true\n",
                    "title": "IPv6 address on the site",
                    "x-displayname": "IPv6 Address",
                    "x-ves-example": "2001::1",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ipv6": "true"
                    }
                },
                "segment": {
                    "description": "\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Segment",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Segment",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "virtual_site": {
                    "description": " Reference to virtual site object\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Virtual Site",
                    "$ref": "#/definitions/schemaviewsObjectRefType",
                    "x-displayname": "Virtual Site Reference",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "viewsXfccHeaderKeys": {
            "type": "object",
            "description": "X-Forwarded-Client-Cert header elements to be added to requests",
            "title": "XfccHeaderKeys",
            "x-displayname": "XFCC Header Elements",
            "x-ves-proto-message": "ves.io.schema.views.XfccHeaderKeys",
            "properties": {
                "xfcc_header_elements": {
                    "type": "array",
                    "description": " X-Forwarded-Client-Cert header elements to be added to requests\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n  ves.io.schema.rules.repeated.items.enum.defined_only: true\n  ves.io.schema.rules.repeated.items.enum.not_in: [0]\n",
                    "title": "XFCC Header",
                    "items": {
                        "$ref": "#/definitions/schemaXfccElement"
                    },
                    "x-displayname": "XFCC Header Elements",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true",
                        "ves.io.schema.rules.repeated.items.enum.defined_only": "true",
                        "ves.io.schema.rules.repeated.items.enum.not_in": "[0]"
                    }
                }
            }
        },
        "viewstcp_loadbalancerCreateSpecType": {
            "type": "object",
            "description": "Shape of the TCP load balancer create specification",
            "title": "CreateSpecType",
            "x-displayname": "Create TCP Load Balancer",
            "x-ves-oneof-field-advertise_choice": "[\"advertise_custom\",\"advertise_on_public\",\"advertise_on_public_default_vip\",\"do_not_advertise\"]",
            "x-ves-oneof-field-cluster_retract_choice": "[\"do_not_retract_cluster\",\"retract_cluster\"]",
            "x-ves-oneof-field-hash_policy_choice": "[\"hash_policy_choice_least_active\",\"hash_policy_choice_random\",\"hash_policy_choice_round_robin\",\"hash_policy_choice_source_ip_stickiness\"]",
            "x-ves-oneof-field-loadbalancer_type": "[\"tcp\",\"tls_tcp\",\"tls_tcp_auto_cert\"]",
            "x-ves-oneof-field-port_choice": "[\"listen_port\",\"port_ranges\"]",
            "x-ves-oneof-field-service_policy_choice": "[\"active_service_policies\",\"no_service_policies\",\"service_policies_from_namespace\"]",
            "x-ves-oneof-field-sni_default_lb_choice": "[\"default_lb_with_sni\",\"no_sni\",\"sni\"]",
            "x-ves-proto-message": "ves.io.schema.views.tcp_loadbalancer.CreateSpecType",
            "properties": {
                "active_service_policies": {
                    "description": "Exclusive with [no_service_policies service_policies_from_namespace]\n Apply the specified list of service policies and bypass the namespace service policy set",
                    "$ref": "#/definitions/tcp_loadbalancerServicePolicyList",
                    "x-displayname": "Apply Specified Service Policies"
                },
                "advertise_custom": {
                    "description": "Exclusive with [advertise_on_public advertise_on_public_default_vip do_not_advertise]\n Advertise this VIP on specific sites",
                    "$ref": "#/definitions/viewsAdvertiseCustom",
                    "x-displayname": "Advertise Custom"
                },
                "advertise_on_public": {
                    "description": "Exclusive with [advertise_custom advertise_on_public_default_vip do_not_advertise]\n Advertise this load balancer on public network",
                    "$ref": "#/definitions/viewsAdvertisePublic",
                    "x-displayname": "Advertise On Public With Specified VIP"
                },
                "advertise_on_public_default_vip": {
                    "description": "Exclusive with [advertise_custom advertise_on_public do_not_advertise]\n Advertise this load balancer on public network with default VIP",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Advertise On Public"
                },
                "default_lb_with_sni": {
                    "description": "Exclusive with [no_sni sni]\n Enables Server Name Indication for Loadbalancer\n Also enables usage as Default LB for Non SNI Clients",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "SNI and Default LB"
                },
                "dns_volterra_managed": {
                    "type": "boolean",
                    "description": " DNS records for domains will be managed automatically by Volterra.\n This requires the domain to be delegated to F5XC using the Delegated Domain feature.",
                    "format": "boolean",
                    "x-displayname": "Automatically Manage DNS Records"
                },
                "do_not_advertise": {
                    "description": "Exclusive with [advertise_custom advertise_on_public advertise_on_public_default_vip]\n Do not advertise this load balancer",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Do Not Advertise"
                },
                "do_not_retract_cluster": {
                    "description": "Exclusive with [retract_cluster]\n When this option is configured, cluster with no healthy\n endpoints is not retracted from route having weighted cluster\n configuration.",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Disable cluster retraction"
                },
                "domains": {
                    "type": "array",
                    "description": " A list of domains (host/authority header) that will be matched to this load balancer.\n\n Domains are also used for SNI matching if the with_sni is true\n Domains also indicate the list of names for which DNS resolution will be done by VER\n\nExample: - \"www.foo.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.items.string.hostname: true\n  ves.io.schema.rules.repeated.max_items: 32\n  ves.io.schema.rules.repeated.unique: true\n",
                    "maxItems": 32,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Domains",
                    "x-ves-example": "www.foo.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.items.string.hostname": "true",
                        "ves.io.schema.rules.repeated.max_items": "32",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "hash_policy_choice_least_active": {
                    "description": "Exclusive with [hash_policy_choice_random hash_policy_choice_round_robin hash_policy_choice_source_ip_stickiness]\n Connections are sent to origin server that has least active connections",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Least Active Connections"
                },
                "hash_policy_choice_random": {
                    "description": "Exclusive with [hash_policy_choice_least_active hash_policy_choice_round_robin hash_policy_choice_source_ip_stickiness]\n Connections are sent to all eligible origin servers in random fashion",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Random"
                },
                "hash_policy_choice_round_robin": {
                    "description": "Exclusive with [hash_policy_choice_least_active hash_policy_choice_random hash_policy_choice_source_ip_stickiness]\n Connections are sent to all eligible origin servers in round robin fashion",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Round Robin"
                },
                "hash_policy_choice_source_ip_stickiness": {
                    "description": "Exclusive with [hash_policy_choice_least_active hash_policy_choice_random hash_policy_choice_round_robin]\n Connections are sent to all eligible origin servers using hash of source ip. Consistent hashing algorithm, ring hash, is used to select origin server",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Source IP Stickiness"
                },
                "idle_timeout": {
                    "type": "integer",
                    "description": " The amount of time that a stream can exist without upstream or downstream activity, in milliseconds.\n\nExample: - \"2000\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 4147200000\n",
                    "format": "int64",
                    "x-displayname": "Idle Timeout",
                    "x-ves-example": "2000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "4147200000"
                    }
                },
                "listen_port": {
                    "type": "integer",
                    "description": "Exclusive with [port_ranges]\n Listen Port for this load balancer\n\nExample: - \"0\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "format": "int64",
                    "x-displayname": "Listen Port",
                    "x-ves-example": "0",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "no_service_policies": {
                    "description": "Exclusive with [active_service_policies service_policies_from_namespace]\n Do not apply any service policies i.e. bypass the namespace service policy set",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Do Not Apply Service Policies"
                },
                "no_sni": {
                    "description": "Exclusive with [default_lb_with_sni sni]\n Loadbalancer without Server Name Indication support",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "No SNI"
                },
                "origin_pools_weights": {
                    "type": "array",
                    "description": " Origin pools and weights used for this load balancer.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 16\n  ves.io.schema.rules.repeated.unique: true\n",
                    "maxItems": 16,
                    "items": {
                        "$ref": "#/definitions/viewsOriginPoolWithWeight"
                    },
                    "x-displayname": "Origin Pools",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "16",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "port_ranges": {
                    "type": "string",
                    "description": "Exclusive with [listen_port]\n A string containing a comma separated list of port ranges.\n Each port range consists of a single port or two ports separated by \"-\".\n\nExample: - \"80,443,8080-8191,9080\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 512\n  ves.io.schema.rules.string.max_ports: 64\n  ves.io.schema.rules.string.min_len: 1\n  ves.io.schema.rules.string.unique_port_range_list: true\n",
                    "minLength": 1,
                    "maxLength": 512,
                    "x-displayname": "Port Ranges",
                    "x-ves-example": "80,443,8080-8191,9080",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "512",
                        "ves.io.schema.rules.string.max_ports": "64",
                        "ves.io.schema.rules.string.min_len": "1",
                        "ves.io.schema.rules.string.unique_port_range_list": "true"
                    }
                },
                "retract_cluster": {
                    "description": "Exclusive with [do_not_retract_cluster]\n When this option is enabled, weighted cluster will not be considered\n for load balancing, if all its endpoints are unhealthy.\n Since the cluster with all unhealthy endpoints is removed, the traffic\n will be distributed among remaining clusters as per their weight.\n Also panic-threshold configuration is ignored for retracted cluster.\n\n This option is ignored when single destination cluster is configured\n for route",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Retract cluster with no healthy endpoints"
                },
                "service_policies_from_namespace": {
                    "description": "Exclusive with [active_service_policies no_service_policies]\n Apply the active service policies configured as part of the namespace service policy set",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Apply Namespace Service Policies"
                },
                "sni": {
                    "description": "Exclusive with [default_lb_with_sni no_sni]\n Enables Server Name Indication for Loadbalancer",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "SNI"
                },
                "tcp": {
                    "description": "Exclusive with [tls_tcp tls_tcp_auto_cert]\n TCP Load Balancer.",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "TCP"
                },
                "tls_tcp": {
                    "description": "Exclusive with [tcp tls_tcp_auto_cert]\n TLS over TCP load balancer with a custom public/private certificate.\n This is also known as BYOC (Bring Your Own Certificate).\n User is responsible for managing DNS to this load balancer.",
                    "$ref": "#/definitions/tcp_loadbalancerProxyTypeTLSTCP",
                    "x-displayname": "TLS over TCP with Custom Certificate"
                },
                "tls_tcp_auto_cert": {
                    "description": "Exclusive with [tcp tls_tcp]\n TLS over TCP load balancer with automatic public certificate provisioning.\n DNS records for the domains will be automatically managed by F5 Distributed Cloud.\n As a prerequisite, the domain must be delegated to F5 Distributed Cloud (see the DNS Management section)\n or a DNS CNAME record should be created in your DNS provider's portal(only for Domains not managed by F5 Distributed Cloud).",
                    "$ref": "#/definitions/tcp_loadbalancerProxyTypeTLSTCPAutoCerts",
                    "x-displayname": "TLS over TCP with Automatic Certificate"
                }
            }
        },
        "viewstcp_loadbalancerGetSpecType": {
            "type": "object",
            "description": "Shape of the TCP load balancer get specification",
            "title": "GetSpecType",
            "x-displayname": "Get TCP Load Balancer",
            "x-ves-oneof-field-advertise_choice": "[\"advertise_custom\",\"advertise_on_public\",\"advertise_on_public_default_vip\",\"do_not_advertise\"]",
            "x-ves-oneof-field-cluster_retract_choice": "[\"do_not_retract_cluster\",\"retract_cluster\"]",
            "x-ves-oneof-field-hash_policy_choice": "[\"hash_policy_choice_least_active\",\"hash_policy_choice_random\",\"hash_policy_choice_round_robin\",\"hash_policy_choice_source_ip_stickiness\"]",
            "x-ves-oneof-field-loadbalancer_type": "[\"tcp\",\"tls_tcp\",\"tls_tcp_auto_cert\"]",
            "x-ves-oneof-field-port_choice": "[\"listen_port\",\"port_ranges\"]",
            "x-ves-oneof-field-service_policy_choice": "[\"active_service_policies\",\"no_service_policies\",\"service_policies_from_namespace\"]",
            "x-ves-oneof-field-sni_default_lb_choice": "[\"default_lb_with_sni\",\"no_sni\",\"sni\"]",
            "x-ves-proto-message": "ves.io.schema.views.tcp_loadbalancer.GetSpecType",
            "properties": {
                "active_service_policies": {
                    "description": "Exclusive with [no_service_policies service_policies_from_namespace]\n Apply the specified list of service policies and bypass the namespace service policy set",
                    "$ref": "#/definitions/tcp_loadbalancerServicePolicyList",
                    "x-displayname": "Apply Specified Service Policies"
                },
                "advertise_custom": {
                    "description": "Exclusive with [advertise_on_public advertise_on_public_default_vip do_not_advertise]\n Advertise this VIP on specific sites",
                    "$ref": "#/definitions/viewsAdvertiseCustom",
                    "x-displayname": "Advertise Custom"
                },
                "advertise_on_public": {
                    "description": "Exclusive with [advertise_custom advertise_on_public_default_vip do_not_advertise]\n Advertise this load balancer on public network",
                    "$ref": "#/definitions/viewsAdvertisePublic",
                    "x-displayname": "Advertise On Public With Specified VIP"
                },
                "advertise_on_public_default_vip": {
                    "description": "Exclusive with [advertise_custom advertise_on_public do_not_advertise]\n Advertise this load balancer on public network with default VIP",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Advertise On Public"
                },
                "auto_cert_info": {
                    "description": " Auto certificate related information",
                    "$ref": "#/definitions/virtual_hostAutoCertInfoType",
                    "x-displayname": "Auto Cert Information"
                },
                "cert_state": {
                    "description": " State of Custom certificate or Auto certificate generation.",
                    "$ref": "#/definitions/virtual_hostCertificationState",
                    "x-displayname": "Cert State"
                },
                "default_lb_with_sni": {
                    "description": "Exclusive with [no_sni sni]\n Enables Server Name Indication for Loadbalancer\n Also enables usage as Default LB for Non SNI Clients",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "SNI and Default LB"
                },
                "dns_info": {
                    "type": "array",
                    "description": " DNS information for this virtual host",
                    "items": {
                        "$ref": "#/definitions/virtual_host_dns_infoDnsInfo"
                    },
                    "x-displayname": "DNS Information"
                },
                "dns_volterra_managed": {
                    "type": "boolean",
                    "description": " DNS records for domains will be managed automatically by Volterra.\n This requires the domain to be delegated to F5XC using the Delegated Domain feature.",
                    "format": "boolean",
                    "x-displayname": "Automatically Manage DNS Records"
                },
                "do_not_advertise": {
                    "description": "Exclusive with [advertise_custom advertise_on_public advertise_on_public_default_vip]\n Do not advertise this load balancer",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Do Not Advertise"
                },
                "do_not_retract_cluster": {
                    "description": "Exclusive with [retract_cluster]\n When this option is configured, cluster with no healthy\n endpoints is not retracted from route having weighted cluster\n configuration.",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Disable cluster retraction"
                },
                "domains": {
                    "type": "array",
                    "description": " A list of domains (host/authority header) that will be matched to this load balancer.\n\n Domains are also used for SNI matching if the with_sni is true\n Domains also indicate the list of names for which DNS resolution will be done by VER\n\nExample: - \"www.foo.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.items.string.hostname: true\n  ves.io.schema.rules.repeated.max_items: 32\n  ves.io.schema.rules.repeated.unique: true\n",
                    "maxItems": 32,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Domains",
                    "x-ves-example": "www.foo.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.items.string.hostname": "true",
                        "ves.io.schema.rules.repeated.max_items": "32",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "hash_policy_choice_least_active": {
                    "description": "Exclusive with [hash_policy_choice_random hash_policy_choice_round_robin hash_policy_choice_source_ip_stickiness]\n Connections are sent to origin server that has least active connections",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Least Active Connections"
                },
                "hash_policy_choice_random": {
                    "description": "Exclusive with [hash_policy_choice_least_active hash_policy_choice_round_robin hash_policy_choice_source_ip_stickiness]\n Connections are sent to all eligible origin servers in random fashion",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Random"
                },
                "hash_policy_choice_round_robin": {
                    "description": "Exclusive with [hash_policy_choice_least_active hash_policy_choice_random hash_policy_choice_source_ip_stickiness]\n Connections are sent to all eligible origin servers in round robin fashion",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Round Robin"
                },
                "hash_policy_choice_source_ip_stickiness": {
                    "description": "Exclusive with [hash_policy_choice_least_active hash_policy_choice_random hash_policy_choice_round_robin]\n Connections are sent to all eligible origin servers using hash of source ip. Consistent hashing algorithm, ring hash, is used to select origin server",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Source IP Stickiness"
                },
                "host_name": {
                    "type": "string",
                    "description": " Internally generated host name to be used for the virtual host\n\nExample: - \"ves-io-cf8684b9-a18f-4843-a24f-1f9ee8ea2776.ac.vh.ves.io\"-",
                    "x-displayname": "Host Name",
                    "x-ves-example": "ves-io-cf8684b9-a18f-4843-a24f-1f9ee8ea2776.ac.vh.ves.io"
                },
                "idle_timeout": {
                    "type": "integer",
                    "description": " The amount of time that a stream can exist without upstream or downstream activity, in milliseconds.\n\nExample: - \"2000\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 4147200000\n",
                    "format": "int64",
                    "x-displayname": "Idle Timeout",
                    "x-ves-example": "2000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "4147200000"
                    }
                },
                "internet_vip_info": {
                    "type": "array",
                    "description": " Internet VIP Info ",
                    "items": {
                        "$ref": "#/definitions/viewsInternetVIPInfo"
                    },
                    "x-displayname": "Internet VIP Info"
                },
                "listen_port": {
                    "type": "integer",
                    "description": "Exclusive with [port_ranges]\n Listen Port for this load balancer\n\nExample: - \"0\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "format": "int64",
                    "x-displayname": "Listen Port",
                    "x-ves-example": "0",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "no_service_policies": {
                    "description": "Exclusive with [active_service_policies service_policies_from_namespace]\n Do not apply any service policies i.e. bypass the namespace service policy set",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Do Not Apply Service Policies"
                },
                "no_sni": {
                    "description": "Exclusive with [default_lb_with_sni sni]\n Loadbalancer without Server Name Indication support",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "No SNI"
                },
                "origin_pools_weights": {
                    "type": "array",
                    "description": " Origin pools and weights used for this load balancer.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 16\n  ves.io.schema.rules.repeated.unique: true\n",
                    "maxItems": 16,
                    "items": {
                        "$ref": "#/definitions/viewsOriginPoolWithWeight"
                    },
                    "x-displayname": "Origin Pools",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "16",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "port_ranges": {
                    "type": "string",
                    "description": "Exclusive with [listen_port]\n A string containing a comma separated list of port ranges.\n Each port range consists of a single port or two ports separated by \"-\".\n\nExample: - \"80,443,8080-8191,9080\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 512\n  ves.io.schema.rules.string.max_ports: 64\n  ves.io.schema.rules.string.min_len: 1\n  ves.io.schema.rules.string.unique_port_range_list: true\n",
                    "minLength": 1,
                    "maxLength": 512,
                    "x-displayname": "Port Ranges",
                    "x-ves-example": "80,443,8080-8191,9080",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "512",
                        "ves.io.schema.rules.string.max_ports": "64",
                        "ves.io.schema.rules.string.min_len": "1",
                        "ves.io.schema.rules.string.unique_port_range_list": "true"
                    }
                },
                "retract_cluster": {
                    "description": "Exclusive with [do_not_retract_cluster]\n When this option is enabled, weighted cluster will not be considered\n for load balancing, if all its endpoints are unhealthy.\n Since the cluster with all unhealthy endpoints is removed, the traffic\n will be distributed among remaining clusters as per their weight.\n Also panic-threshold configuration is ignored for retracted cluster.\n\n This option is ignored when single destination cluster is configured\n for route",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Retract cluster with no healthy endpoints"
                },
                "service_policies_from_namespace": {
                    "description": "Exclusive with [active_service_policies no_service_policies]\n Apply the active service policies configured as part of the namespace service policy set",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Apply Namespace Service Policies"
                },
                "sni": {
                    "description": "Exclusive with [default_lb_with_sni no_sni]\n Enables Server Name Indication for Loadbalancer",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "SNI"
                },
                "tcp": {
                    "description": "Exclusive with [tls_tcp tls_tcp_auto_cert]\n TCP Load Balancer.",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "TCP"
                },
                "tls_tcp": {
                    "description": "Exclusive with [tcp tls_tcp_auto_cert]\n TLS over TCP load balancer with a custom public/private certificate.\n This is also known as BYOC (Bring Your Own Certificate).\n User is responsible for managing DNS to this load balancer.",
                    "$ref": "#/definitions/tcp_loadbalancerProxyTypeTLSTCP",
                    "x-displayname": "TLS over TCP with Custom Certificate"
                },
                "tls_tcp_auto_cert": {
                    "description": "Exclusive with [tcp tls_tcp]\n TLS over TCP load balancer with automatic public certificate provisioning.\n DNS records for the domains will be automatically managed by F5 Distributed Cloud.\n As a prerequisite, the domain must be delegated to F5 Distributed Cloud (see the DNS Management section)\n or a DNS CNAME record should be created in your DNS provider's portal(only for Domains not managed by F5 Distributed Cloud).",
                    "$ref": "#/definitions/tcp_loadbalancerProxyTypeTLSTCPAutoCerts",
                    "x-displayname": "TLS over TCP with Automatic Certificate"
                }
            }
        },
        "viewstcp_loadbalancerReplaceSpecType": {
            "type": "object",
            "description": "Shape of the TCP load balancer replace specification",
            "title": "ReplaceSpecType",
            "x-displayname": "Replace TCP Load Balancer",
            "x-ves-oneof-field-advertise_choice": "[\"advertise_custom\",\"advertise_on_public\",\"advertise_on_public_default_vip\",\"do_not_advertise\"]",
            "x-ves-oneof-field-cluster_retract_choice": "[\"do_not_retract_cluster\",\"retract_cluster\"]",
            "x-ves-oneof-field-hash_policy_choice": "[\"hash_policy_choice_least_active\",\"hash_policy_choice_random\",\"hash_policy_choice_round_robin\",\"hash_policy_choice_source_ip_stickiness\"]",
            "x-ves-oneof-field-loadbalancer_type": "[\"tcp\",\"tls_tcp\",\"tls_tcp_auto_cert\"]",
            "x-ves-oneof-field-port_choice": "[\"listen_port\",\"port_ranges\"]",
            "x-ves-oneof-field-service_policy_choice": "[\"active_service_policies\",\"no_service_policies\",\"service_policies_from_namespace\"]",
            "x-ves-oneof-field-sni_default_lb_choice": "[\"default_lb_with_sni\",\"no_sni\",\"sni\"]",
            "x-ves-proto-message": "ves.io.schema.views.tcp_loadbalancer.ReplaceSpecType",
            "properties": {
                "active_service_policies": {
                    "description": "Exclusive with [no_service_policies service_policies_from_namespace]\n Apply the specified list of service policies and bypass the namespace service policy set",
                    "$ref": "#/definitions/tcp_loadbalancerServicePolicyList",
                    "x-displayname": "Apply Specified Service Policies"
                },
                "advertise_custom": {
                    "description": "Exclusive with [advertise_on_public advertise_on_public_default_vip do_not_advertise]\n Advertise this VIP on specific sites",
                    "$ref": "#/definitions/viewsAdvertiseCustom",
                    "x-displayname": "Advertise Custom"
                },
                "advertise_on_public": {
                    "description": "Exclusive with [advertise_custom advertise_on_public_default_vip do_not_advertise]\n Advertise this load balancer on public network",
                    "$ref": "#/definitions/viewsAdvertisePublic",
                    "x-displayname": "Advertise On Public With Specified VIP"
                },
                "advertise_on_public_default_vip": {
                    "description": "Exclusive with [advertise_custom advertise_on_public do_not_advertise]\n Advertise this load balancer on public network with default VIP",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Advertise On Public"
                },
                "default_lb_with_sni": {
                    "description": "Exclusive with [no_sni sni]\n Enables Server Name Indication for Loadbalancer\n Also enables usage as Default LB for Non SNI Clients",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "SNI and Default LB"
                },
                "dns_volterra_managed": {
                    "type": "boolean",
                    "description": " DNS records for domains will be managed automatically by Volterra.\n This requires the domain to be delegated to F5XC using the Delegated Domain feature.",
                    "format": "boolean",
                    "x-displayname": "Automatically Manage DNS Records"
                },
                "do_not_advertise": {
                    "description": "Exclusive with [advertise_custom advertise_on_public advertise_on_public_default_vip]\n Do not advertise this load balancer",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Do Not Advertise"
                },
                "do_not_retract_cluster": {
                    "description": "Exclusive with [retract_cluster]\n When this option is configured, cluster with no healthy\n endpoints is not retracted from route having weighted cluster\n configuration.",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Disable cluster retraction"
                },
                "domains": {
                    "type": "array",
                    "description": " A list of domains (host/authority header) that will be matched to this load balancer.\n\n Domains are also used for SNI matching if the with_sni is true\n Domains also indicate the list of names for which DNS resolution will be done by VER\n\nExample: - \"www.foo.com\"-\n\nValidation Rules:\n  ves.io.schema.rules.repeated.items.string.hostname: true\n  ves.io.schema.rules.repeated.max_items: 32\n  ves.io.schema.rules.repeated.unique: true\n",
                    "maxItems": 32,
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "Domains",
                    "x-ves-example": "www.foo.com",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.items.string.hostname": "true",
                        "ves.io.schema.rules.repeated.max_items": "32",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "hash_policy_choice_least_active": {
                    "description": "Exclusive with [hash_policy_choice_random hash_policy_choice_round_robin hash_policy_choice_source_ip_stickiness]\n Connections are sent to origin server that has least active connections",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Least Active Connections"
                },
                "hash_policy_choice_random": {
                    "description": "Exclusive with [hash_policy_choice_least_active hash_policy_choice_round_robin hash_policy_choice_source_ip_stickiness]\n Connections are sent to all eligible origin servers in random fashion",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Random"
                },
                "hash_policy_choice_round_robin": {
                    "description": "Exclusive with [hash_policy_choice_least_active hash_policy_choice_random hash_policy_choice_source_ip_stickiness]\n Connections are sent to all eligible origin servers in round robin fashion",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Round Robin"
                },
                "hash_policy_choice_source_ip_stickiness": {
                    "description": "Exclusive with [hash_policy_choice_least_active hash_policy_choice_random hash_policy_choice_round_robin]\n Connections are sent to all eligible origin servers using hash of source ip. Consistent hashing algorithm, ring hash, is used to select origin server",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Source IP Stickiness"
                },
                "idle_timeout": {
                    "type": "integer",
                    "description": " The amount of time that a stream can exist without upstream or downstream activity, in milliseconds.\n\nExample: - \"2000\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 4147200000\n",
                    "format": "int64",
                    "x-displayname": "Idle Timeout",
                    "x-ves-example": "2000",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "4147200000"
                    }
                },
                "listen_port": {
                    "type": "integer",
                    "description": "Exclusive with [port_ranges]\n Listen Port for this load balancer\n\nExample: - \"0\"-\n\nValidation Rules:\n  ves.io.schema.rules.uint32.lte: 65535\n",
                    "format": "int64",
                    "x-displayname": "Listen Port",
                    "x-ves-example": "0",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.uint32.lte": "65535"
                    }
                },
                "no_service_policies": {
                    "description": "Exclusive with [active_service_policies service_policies_from_namespace]\n Do not apply any service policies i.e. bypass the namespace service policy set",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Do Not Apply Service Policies"
                },
                "no_sni": {
                    "description": "Exclusive with [default_lb_with_sni sni]\n Loadbalancer without Server Name Indication support",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "No SNI"
                },
                "origin_pools_weights": {
                    "type": "array",
                    "description": " Origin pools and weights used for this load balancer.\n\nValidation Rules:\n  ves.io.schema.rules.repeated.max_items: 16\n  ves.io.schema.rules.repeated.unique: true\n",
                    "maxItems": 16,
                    "items": {
                        "$ref": "#/definitions/viewsOriginPoolWithWeight"
                    },
                    "x-displayname": "Origin Pools",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.repeated.max_items": "16",
                        "ves.io.schema.rules.repeated.unique": "true"
                    }
                },
                "port_ranges": {
                    "type": "string",
                    "description": "Exclusive with [listen_port]\n A string containing a comma separated list of port ranges.\n Each port range consists of a single port or two ports separated by \"-\".\n\nExample: - \"80,443,8080-8191,9080\"-\n\nValidation Rules:\n  ves.io.schema.rules.string.max_len: 512\n  ves.io.schema.rules.string.max_ports: 64\n  ves.io.schema.rules.string.min_len: 1\n  ves.io.schema.rules.string.unique_port_range_list: true\n",
                    "minLength": 1,
                    "maxLength": 512,
                    "x-displayname": "Port Ranges",
                    "x-ves-example": "80,443,8080-8191,9080",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.max_len": "512",
                        "ves.io.schema.rules.string.max_ports": "64",
                        "ves.io.schema.rules.string.min_len": "1",
                        "ves.io.schema.rules.string.unique_port_range_list": "true"
                    }
                },
                "retract_cluster": {
                    "description": "Exclusive with [do_not_retract_cluster]\n When this option is enabled, weighted cluster will not be considered\n for load balancing, if all its endpoints are unhealthy.\n Since the cluster with all unhealthy endpoints is removed, the traffic\n will be distributed among remaining clusters as per their weight.\n Also panic-threshold configuration is ignored for retracted cluster.\n\n This option is ignored when single destination cluster is configured\n for route",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Retract cluster with no healthy endpoints"
                },
                "service_policies_from_namespace": {
                    "description": "Exclusive with [active_service_policies no_service_policies]\n Apply the active service policies configured as part of the namespace service policy set",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "Apply Namespace Service Policies"
                },
                "sni": {
                    "description": "Exclusive with [default_lb_with_sni no_sni]\n Enables Server Name Indication for Loadbalancer",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "SNI"
                },
                "tcp": {
                    "description": "Exclusive with [tls_tcp tls_tcp_auto_cert]\n TCP Load Balancer.",
                    "$ref": "#/definitions/ioschemaEmpty",
                    "x-displayname": "TCP"
                },
                "tls_tcp": {
                    "description": "Exclusive with [tcp tls_tcp_auto_cert]\n TLS over TCP load balancer with a custom public/private certificate.\n This is also known as BYOC (Bring Your Own Certificate).\n User is responsible for managing DNS to this load balancer.",
                    "$ref": "#/definitions/tcp_loadbalancerProxyTypeTLSTCP",
                    "x-displayname": "TLS over TCP with Custom Certificate"
                },
                "tls_tcp_auto_cert": {
                    "description": "Exclusive with [tcp tls_tcp]\n TLS over TCP load balancer with automatic public certificate provisioning.\n DNS records for the domains will be automatically managed by F5 Distributed Cloud.\n As a prerequisite, the domain must be delegated to F5 Distributed Cloud (see the DNS Management section)\n or a DNS CNAME record should be created in your DNS provider's portal(only for Domains not managed by F5 Distributed Cloud).",
                    "$ref": "#/definitions/tcp_loadbalancerProxyTypeTLSTCPAutoCerts",
                    "x-displayname": "TLS over TCP with Automatic Certificate"
                }
            }
        },
        "virtual_hostAutoCertInfoType": {
            "type": "object",
            "description": "Information related to auto certificate",
            "title": "AutoCertInfoType",
            "x-displayname": "Auto Cert Information",
            "x-ves-proto-message": "ves.io.schema.virtual_host.AutoCertInfoType",
            "properties": {
                "auto_cert_expiry": {
                    "type": "string",
                    "description": " Auto certificate expiry timestamp",
                    "title": "Auto Cert Expiry Timestamp",
                    "format": "date-time",
                    "x-displayname": "Auto Cert Expiry Timestamp"
                },
                "auto_cert_issuer": {
                    "type": "string",
                    "description": " Issuer of the auto certificate",
                    "title": "Auto Cert Issuer",
                    "x-displayname": "Auto Cert Issuer"
                },
                "auto_cert_state": {
                    "description": " State of auto certificate generation.",
                    "title": "Auto Cert State",
                    "$ref": "#/definitions/virtual_hostCertificationState",
                    "x-displayname": "Auto Cert State"
                },
                "auto_cert_subject": {
                    "type": "string",
                    "description": " Subject of the auto certificate",
                    "title": "Auto Cert Subject",
                    "x-displayname": "Auto Cert Subject"
                },
                "dns_records": {
                    "type": "array",
                    "description": " DNS Records that are to be added by user in their DNS domain.\n Currently, this will be populated when auto certificates are\n desired but DNS delegation is not enabled.",
                    "title": "DNS Records",
                    "items": {
                        "$ref": "#/definitions/virtual_hostDNSRecord"
                    },
                    "x-displayname": "DNS Records"
                }
            }
        },
        "virtual_hostCertificationState": {
            "type": "string",
            "description": "State of auto certification generation for the virtual host\n\n - AutoCertDisabled: Auto Cert Disabled\n\nAuto Certification is disabled.\n - DnsDomainVerification: Dns Domain Verification\n\nAuto Certification is waiting for domain verification.\n - AutoCertStarted: Auto Cert Started\n\nAuto Certificate generation action has started.\n - PreDomainChallengePending: Pre Domain Challenge Pending\n\nThe domains in the virtual host configuration are not still verified. This requires\nthe _acme-challenge TXT record in the domain to have the correct TXT.\n - DomainChallengeStarted: Domain Challenge Started\n\nDomain challenge process started.\n - DomainChallengePending: Domain Challenge Pending\n\nThe domains in the virtual host configuration are being verified. This requires\nthe _acme-challenge TXT record in the domain to have the correct TXT.\n - DomainChallengeVerified: Domain Challenge Verified\n\nAll the domains in the virtual host have been verified.\n - AutoCertFinalize: Auto Cert Finalize\n\nCertificate generation order is Ready and Finalized.\n - CertificateInvalid: Certificate Invalid\n\nCertificate is invalid\n - CertificateValid: Certificate Valid\n\nValid certificate generated and tls_parameters are updated\n - AutoCertNotApplicable: Auto Cert Not Applicable\n\nAuto certificate not applicable because virtual host does not use TLS\n - AutoCertRateLimited: Auto Cert Rate Limited\n\nAuto certificate not available because CA has rate limited the request\n - AutoCertGenerationRetry: Auto Cert Generation Retry\n\nAuto certificate generate failed in the previous attempt, will be retried automatically\n - AutoCertError: Auto Cert Error\n\nError in Certificate generation\nDefault State for Vhost State with Auto Certificate\n - AutoCertAccountRateLimited: Auto Cert Account Rate Limited\n\nAuto certificate not available because CA has rate limited the request\n - AutoCertDomainRateLimited: Auto Cert Domain Rate Limited\n\nAuto certificate not available because CA has rate limited the request\n - CertificateExpired: Certificate Expired\n\nCertificate has expired",
            "title": "Certification State",
            "enum": [
                "AutoCertDisabled",
                "DnsDomainVerification",
                "AutoCertStarted",
                "DomainChallengePending",
                "DomainChallengeVerified",
                "AutoCertFinalize",
                "CertificateInvalid",
                "CertificateValid",
                "AutoCertNotApplicable",
                "AutoCertRateLimited",
                "AutoCertGenerationRetry",
                "AutoCertError",
                "PreDomainChallengePending",
                "DomainChallengeStarted",
                "AutoCertInitialize",
                "AutoCertAccountRateLimited",
                "AutoCertDomainRateLimited",
                "CertificateExpired"
            ],
            "default": "AutoCertDisabled",
            "x-displayname": "Certification State",
            "x-ves-proto-enum": "ves.io.schema.virtual_host.CertificationState"
        },
        "virtual_hostDNSRecord": {
            "type": "object",
            "description": "Defines a DNS record",
            "title": "DNSRecord",
            "x-displayname": "DNS Record",
            "x-ves-proto-message": "ves.io.schema.virtual_host.DNSRecord",
            "properties": {
                "name": {
                    "type": "string",
                    "description": " Name of the DNS record",
                    "title": "Name",
                    "x-displayname": "Name"
                },
                "type": {
                    "type": "string",
                    "description": " Type of the DNS record\n\nExample: - \"CNAME\"-",
                    "title": "Type",
                    "x-displayname": "Type",
                    "x-ves-example": "CNAME"
                },
                "value": {
                    "type": "string",
                    "description": " DNS record Value",
                    "title": "Value",
                    "x-displayname": "Value"
                }
            }
        },
        "virtual_hostDNSVHostStatusType": {
            "type": "object",
            "description": "DNS related Virtual Host status",
            "title": "DNS Virtual Host Status Type",
            "x-displayname": "DNS Virtual Host Status",
            "x-ves-proto-message": "ves.io.schema.virtual_host.DNSVHostStatusType",
            "properties": {
                "error_description": {
                    "type": "string",
                    "description": " Description of error during DNS configuration\n\nExample: - \"value\"-",
                    "title": "Error Description",
                    "x-displayname": "Error Description",
                    "x-ves-example": "value"
                },
                "existing_certificate_state": {
                    "type": "string",
                    "description": " Status of Existing Auto Certficate\n\nExample: - \"Certificate Valid or Certificate Expired or Certificate Invalid\"-",
                    "title": "Existing Certificate Status",
                    "x-displayname": "Existing Certificate Status",
                    "x-ves-example": "Certificate Valid or Certificate Expired or Certificate Invalid"
                },
                "renew_certificate_state": {
                    "description": " State of auto certificate generation.",
                    "title": "Certificate Renewal Status",
                    "$ref": "#/definitions/virtual_hostCertificationState",
                    "x-displayname": "Certificate Renewal Status"
                },
                "state": {
                    "description": " State of the virtual host",
                    "title": "Virtual Host state",
                    "$ref": "#/definitions/virtual_hostVirtualHostState",
                    "x-displayname": "Virtual Host State"
                },
                "suggested_action": {
                    "type": "string",
                    "description": " Suggested action for customer on error\n\nExample: - \"value\"-",
                    "title": "Suggested Action",
                    "x-displayname": "Suggested Action",
                    "x-ves-example": "value"
                }
            }
        },
        "virtual_hostVirtualHostState": {
            "type": "string",
            "description": "State of the virtual host\n\n - VIRTUAL_HOST_READY: VIRTUAL_HOST_READY\n\nVirtual host is ready to install\n - VIRTUAL_HOST_PENDING_VERIFICATION: VIRTUAL_HOST_PENDING_VERIFICATION\n\nVirtual host is verfication pending for some or all of its domains\n - VIRTUAL_HOST_VERIFICATION_FAILED: VIRTUAL_HOST_VERIFICATION_FAILED\n\nVirtual host has one or more domains for which verification failed\n - VIRTUAL_HOST_PENDING_DNS_DELEGATION: VIRTUAL_HOST_PENDING_DNS_DELEGATION\n\nVirtual host is pending DNS delegation\n - VIRTUAL_HOST_PENDING_A_RECORD: VIRTUAL_HOST_PENDING_A_RECORD\n\nVirtual host is waiting for one or more A records to be created\n - VIRTUAL_HOST_DNS_A_RECORD_ADDED: VIRTUAL_HOST_DNS_A_RECORD_ADDED\n\nDNS A record has been added for this Virtual host\n - VIRTUAL_HOST_INTERNET_NLB_PENDING_CREATION: VIRTUAL_HOST_INTERNET_NLB_PENDING_CREATION\n\nInternet facing NLB, is being created on the site/sites belonging to the virtual site\n - VIRTUAL_HOST_INTERNET_NLB_CREATION_FAILED: VIRTUAL_HOST_INTERNET_NLB_CREATION_FAILED\n\nInternet NLB creation failed on the site/sites. InternetNLBVIPStatus will have more information.",
            "title": "VirtualHostState",
            "enum": [
                "VIRTUAL_HOST_READY",
                "VIRTUAL_HOST_PENDING_VERIFICATION",
                "VIRTUAL_HOST_VERIFICATION_FAILED",
                "VIRTUAL_HOST_PENDING_DNS_DELEGATION",
                "VIRTUAL_HOST_PENDING_A_RECORD",
                "VIRTUAL_HOST_DNS_A_RECORD_ADDED",
                "VIRTUAL_HOST_INTERNET_NLB_PENDING_CREATION",
                "VIRTUAL_HOST_INTERNET_NLB_CREATION_FAILED"
            ],
            "default": "VIRTUAL_HOST_READY",
            "x-displayname": "Virtual Host State",
            "x-ves-proto-enum": "ves.io.schema.virtual_host.VirtualHostState"
        },
        "virtual_host_dns_infoDnsInfo": {
            "type": "object",
            "description": "A message that contains DNS information for a given IP address",
            "title": "DNS information",
            "x-displayname": "DNS Information",
            "x-ves-proto-message": "ves.io.schema.virtual_host_dns_info.DnsInfo",
            "properties": {
                "ip_address": {
                    "type": "string",
                    "description": " IP address associated with virtual host\n\nValidation Rules:\n  ves.io.schema.rules.string.ip: true\n",
                    "title": "IP address",
                    "x-displayname": "IP Address",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.string.ip": "true"
                    }
                }
            }
        }
    },
    "x-displayname": "Configure TCP Load Balancer",
    "x-ves-proto-file": "ves.io/schema/views/tcp_loadbalancer/public_crudapi.proto"
}`

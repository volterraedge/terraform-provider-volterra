// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/tcp_loadbalancer/types.proto

package tcp_loadbalancer

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
	virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BYOC TLS over TCP Choice
//
// x-displayName: "BYOC TLS over TCP Choice"
// Choice for selecting TLS over TCP proxy with bring your own certificates
type ProxyTypeTLSTCP struct {
	// TLS Configuration
	//
	// x-displayName: "TLS Configuration"
	// TLS Certificate Configuration for downstream connections
	//
	// Types that are valid to be assigned to TlsCertificatesChoice:
	//	*ProxyTypeTLSTCP_TlsParameters
	//	*ProxyTypeTLSTCP_TlsCertParams
	TlsCertificatesChoice isProxyTypeTLSTCP_TlsCertificatesChoice `protobuf_oneof:"tls_certificates_choice"`
}

func (m *ProxyTypeTLSTCP) Reset()      { *m = ProxyTypeTLSTCP{} }
func (*ProxyTypeTLSTCP) ProtoMessage() {}
func (*ProxyTypeTLSTCP) Descriptor() ([]byte, []int) {
	return fileDescriptor_af54a43838ffcca9, []int{0}
}
func (m *ProxyTypeTLSTCP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyTypeTLSTCP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProxyTypeTLSTCP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyTypeTLSTCP.Merge(m, src)
}
func (m *ProxyTypeTLSTCP) XXX_Size() int {
	return m.Size()
}
func (m *ProxyTypeTLSTCP) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyTypeTLSTCP.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyTypeTLSTCP proto.InternalMessageInfo

type isProxyTypeTLSTCP_TlsCertificatesChoice interface {
	isProxyTypeTLSTCP_TlsCertificatesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxyTypeTLSTCP_TlsParameters struct {
	TlsParameters *views.DownstreamTlsParamsType `protobuf:"bytes,1,opt,name=tls_parameters,json=tlsParameters,proto3,oneof" json:"tls_parameters,omitempty"`
}
type ProxyTypeTLSTCP_TlsCertParams struct {
	TlsCertParams *views.DownstreamTLSCertsParams `protobuf:"bytes,3,opt,name=tls_cert_params,json=tlsCertParams,proto3,oneof" json:"tls_cert_params,omitempty"`
}

func (*ProxyTypeTLSTCP_TlsParameters) isProxyTypeTLSTCP_TlsCertificatesChoice() {}
func (*ProxyTypeTLSTCP_TlsCertParams) isProxyTypeTLSTCP_TlsCertificatesChoice() {}

func (m *ProxyTypeTLSTCP) GetTlsCertificatesChoice() isProxyTypeTLSTCP_TlsCertificatesChoice {
	if m != nil {
		return m.TlsCertificatesChoice
	}
	return nil
}

func (m *ProxyTypeTLSTCP) GetTlsParameters() *views.DownstreamTlsParamsType {
	if x, ok := m.GetTlsCertificatesChoice().(*ProxyTypeTLSTCP_TlsParameters); ok {
		return x.TlsParameters
	}
	return nil
}

func (m *ProxyTypeTLSTCP) GetTlsCertParams() *views.DownstreamTLSCertsParams {
	if x, ok := m.GetTlsCertificatesChoice().(*ProxyTypeTLSTCP_TlsCertParams); ok {
		return x.TlsCertParams
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProxyTypeTLSTCP) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProxyTypeTLSTCP_TlsParameters)(nil),
		(*ProxyTypeTLSTCP_TlsCertParams)(nil),
	}
}

// TLS over TCP with Auto Certs Choice
//
// x-displayName: "TLS over TCP with Auto Certs Choice"
// Choice for selecting TLS over TCP proxy with automatic certificates
type ProxyTypeTLSTCPAutoCerts struct {
	// TLS Config
	//
	// x-displayName: "TLS"
	// Configuration of TLS settings such as min/max TLS version and ciphersuites
	TlsConfig *views.TlsConfig `protobuf:"bytes,3,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	// mTLS choice
	//
	// x-displayName: "Mutual TLS"
	// x-required
	// Mutual TLS authentication between clients and HTTPS load balancer
	//
	// Types that are valid to be assigned to MtlsChoice:
	//	*ProxyTypeTLSTCPAutoCerts_NoMtls
	//	*ProxyTypeTLSTCPAutoCerts_UseMtls
	MtlsChoice isProxyTypeTLSTCPAutoCerts_MtlsChoice `protobuf_oneof:"mtls_choice"`
}

func (m *ProxyTypeTLSTCPAutoCerts) Reset()      { *m = ProxyTypeTLSTCPAutoCerts{} }
func (*ProxyTypeTLSTCPAutoCerts) ProtoMessage() {}
func (*ProxyTypeTLSTCPAutoCerts) Descriptor() ([]byte, []int) {
	return fileDescriptor_af54a43838ffcca9, []int{1}
}
func (m *ProxyTypeTLSTCPAutoCerts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyTypeTLSTCPAutoCerts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProxyTypeTLSTCPAutoCerts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyTypeTLSTCPAutoCerts.Merge(m, src)
}
func (m *ProxyTypeTLSTCPAutoCerts) XXX_Size() int {
	return m.Size()
}
func (m *ProxyTypeTLSTCPAutoCerts) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyTypeTLSTCPAutoCerts.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyTypeTLSTCPAutoCerts proto.InternalMessageInfo

type isProxyTypeTLSTCPAutoCerts_MtlsChoice interface {
	isProxyTypeTLSTCPAutoCerts_MtlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxyTypeTLSTCPAutoCerts_NoMtls struct {
	NoMtls *schema.Empty `protobuf:"bytes,5,opt,name=no_mtls,json=noMtls,proto3,oneof" json:"no_mtls,omitempty"`
}
type ProxyTypeTLSTCPAutoCerts_UseMtls struct {
	UseMtls *views.DownstreamTlsValidationContext `protobuf:"bytes,6,opt,name=use_mtls,json=useMtls,proto3,oneof" json:"use_mtls,omitempty"`
}

func (*ProxyTypeTLSTCPAutoCerts_NoMtls) isProxyTypeTLSTCPAutoCerts_MtlsChoice()  {}
func (*ProxyTypeTLSTCPAutoCerts_UseMtls) isProxyTypeTLSTCPAutoCerts_MtlsChoice() {}

func (m *ProxyTypeTLSTCPAutoCerts) GetMtlsChoice() isProxyTypeTLSTCPAutoCerts_MtlsChoice {
	if m != nil {
		return m.MtlsChoice
	}
	return nil
}

func (m *ProxyTypeTLSTCPAutoCerts) GetTlsConfig() *views.TlsConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

func (m *ProxyTypeTLSTCPAutoCerts) GetNoMtls() *schema.Empty {
	if x, ok := m.GetMtlsChoice().(*ProxyTypeTLSTCPAutoCerts_NoMtls); ok {
		return x.NoMtls
	}
	return nil
}

func (m *ProxyTypeTLSTCPAutoCerts) GetUseMtls() *views.DownstreamTlsValidationContext {
	if x, ok := m.GetMtlsChoice().(*ProxyTypeTLSTCPAutoCerts_UseMtls); ok {
		return x.UseMtls
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProxyTypeTLSTCPAutoCerts) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProxyTypeTLSTCPAutoCerts_NoMtls)(nil),
		(*ProxyTypeTLSTCPAutoCerts_UseMtls)(nil),
	}
}

// service policy list
//
// x-displayName: "Service Policy List"
// List of service policies.
type ServicePolicyList struct {
	// policies
	//
	// x-displayName: "Policies"
	// x-required
	// Service Policies is a sequential engine where policies (and rules within the policy) are evaluated one after the other. It's important to define the
	// correct order (policies evaluated from top to bottom in the list) for service policies, to get the intended result.
	// For each request, its characteristics are evaluated based on the match criteria in each service policy starting at the top. If there is a match in the
	// current policy, then the policy takes effect, and no more policies are evaluated. Otherwise, the next policy is evaluated.
	// If all policies are evaluated and none match, then the request will be denied by default.
	Policies []*views.ObjectRefType `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (m *ServicePolicyList) Reset()      { *m = ServicePolicyList{} }
func (*ServicePolicyList) ProtoMessage() {}
func (*ServicePolicyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_af54a43838ffcca9, []int{2}
}
func (m *ServicePolicyList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicePolicyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServicePolicyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicePolicyList.Merge(m, src)
}
func (m *ServicePolicyList) XXX_Size() int {
	return m.Size()
}
func (m *ServicePolicyList) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicePolicyList.DiscardUnknown(m)
}

var xxx_messageInfo_ServicePolicyList proto.InternalMessageInfo

func (m *ServicePolicyList) GetPolicies() []*views.ObjectRefType {
	if m != nil {
		return m.Policies
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "View Specification"
// Shape of the TCP load balancer view specification
type GlobalSpecType struct {
	// Domains
	//
	// x-displayName: "Domains"
	// x-example: "www.foo.com"
	// A list of domains (host/authority header) that will be matched to this load balancer.
	//
	// Domains are also used for SNI matching if the with_sni is true
	// Domains also indicate the list of names for which DNS resolution will be done by VER
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Listen Port
	//
	// x-required
	// x-displayName: "Listen Port"
	// Listen Port for this load balancer
	//
	// Types that are valid to be assigned to PortChoice:
	//	*GlobalSpecType_ListenPort
	//	*GlobalSpecType_PortRanges
	PortChoice isGlobalSpecType_PortChoice `protobuf_oneof:"port_choice"`
	// With SNI
	//
	// x-displayName: "With SNI"
	// x-example: "true"
	// Set to true to enable load balancer with SNI
	WithSni bool `protobuf:"varint,3,opt,name=with_sni,json=withSni,proto3" json:"with_sni,omitempty"` // Deprecated: Do not use.
	// SNI and Default LB choice
	//
	// x-displayName: "SNI and Default LB choice"
	// x-required
	// This is a choice to enable SNI and default LB options
	//
	// Types that are valid to be assigned to SniDefaultLbChoice:
	//	*GlobalSpecType_NoSni
	//	*GlobalSpecType_Sni
	//	*GlobalSpecType_DefaultLbWithSni
	SniDefaultLbChoice isGlobalSpecType_SniDefaultLbChoice `protobuf_oneof:"sni_default_lb_choice"`
	// Manage DNS Domain
	//
	// x-displayName: "Automatically Manage DNS Records"
	// DNS records for domains will be managed automatically by Volterra.
	// This requires the domain to be delegated to F5XC using the Delegated Domain feature.
	DnsVolterraManaged bool `protobuf:"varint,11,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
	// Origin Pools
	//
	// x-displayName: "Origin Pools(deprecated)"
	// Origin pools with equal weights used for this load balancer. This field will be removed.
	OriginPools []*views.ObjectRefType `protobuf:"bytes,4,rep,name=origin_pools,json=originPools,proto3" json:"origin_pools,omitempty"`
	// Origin Pools with Weights
	//
	// x-displayName: "Origin Pools"
	// Origin pools and weights used for this load balancer.
	OriginPoolsWeights []*views.OriginPoolWithWeight `protobuf:"bytes,10,rep,name=origin_pools_weights,json=originPoolsWeights,proto3" json:"origin_pools_weights,omitempty"`
	// Advertise choice
	//
	// x-displayName: "Where to Advertise the VIP"
	// x-required
	// This is a choice to select method to advertise VIP.
	//
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*GlobalSpecType_DoNotAdvertise
	//	*GlobalSpecType_AdvertiseOnPublicDefaultVip
	//	*GlobalSpecType_AdvertiseOnPublic
	//	*GlobalSpecType_AdvertiseCustom
	AdvertiseChoice isGlobalSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Load Balancing Control
	//
	// x-displayName: "Load Balancing Control"
	// x-required
	// Select how the connections are load-balanced
	//
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*GlobalSpecType_HashPolicyChoiceRoundRobin
	//	*GlobalSpecType_HashPolicyChoiceLeastActive
	//	*GlobalSpecType_HashPolicyChoiceRandom
	//	*GlobalSpecType_HashPolicyChoiceSourceIpStickiness
	HashPolicyChoice isGlobalSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	// Idle timeout
	//
	// x-displayName: "Idle Timeout"
	// x-example: "2000"
	// The amount of time that a stream can exist without upstream or downstream activity, in milliseconds.
	IdleTimeout uint32 `protobuf:"varint,17,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Oneof for Cluster retraction
	//
	// x-displayName: "Select Cluster retract option"
	// x-required
	// Specifies whether retraction of cluster has to be enabled or
	// disabled
	//
	// Types that are valid to be assigned to ClusterRetractChoice:
	//	*GlobalSpecType_RetractCluster
	//	*GlobalSpecType_DoNotRetractCluster
	ClusterRetractChoice isGlobalSpecType_ClusterRetractChoice `protobuf_oneof:"cluster_retract_choice"`
	// Proxy choice
	//
	// x-displayName: "Load Balancer Type"
	// x-required
	// The type of load balancer, can be "tcp", "tls_tcp" or "tls_tcp_auto_cert"
	//
	// Types that are valid to be assigned to LoadbalancerType:
	//	*GlobalSpecType_Tcp
	//	*GlobalSpecType_TlsTcpAutoCert
	//	*GlobalSpecType_TlsTcp
	LoadbalancerType isGlobalSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Service Policies
	//
	// x-displayName: "Service Policies"
	// x-required
	// Service policies provide the ability to configure security controls such as IP Allow/Deny lists, Geo IP filtering and Custom rules
	//
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*GlobalSpecType_ServicePoliciesFromNamespace
	//	*GlobalSpecType_NoServicePolicies
	//	*GlobalSpecType_ActiveServicePolicies
	ServicePolicyChoice isGlobalSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
	// host name
	//
	// x-displayName: "Host Name"
	// x-example: "ves-io-cf8684b9-a18f-4843-a24f-1f9ee8ea2776.ac.vh.ves.io"
	// Internally generated host name to be used for the virtual host
	HostName string `protobuf:"bytes,1001,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// DNS information
	//
	// x-displayName: "DNS Information"
	// DNS information for this virtual host
	DnsInfo []*virtual_host_dns_info.DnsInfo `protobuf:"bytes,1002,rep,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`
	// Auto Cert Information
	//
	// x-displayName: "Auto Cert Information"
	// Auto certificate related information
	AutoCertInfo *virtual_host.AutoCertInfoType `protobuf:"bytes,1003,opt,name=auto_cert_info,json=autoCertInfo,proto3" json:"auto_cert_info,omitempty"`
	// download_tls_certificates_expiration_timestamp
	//
	// x-displayName: "Certificate(s) Expiration Timestamp"
	// In case of load balancer type of 'tls_tcp'(BYOC) this lists expiration timestamp for certificate(s)
	// in the same order as the list of tls_parameters.tls_certificates.
	// In case of load balancer type of 'tls_tcp_auto_cert' this has one element with the expiration
	// timestamp of the autogenerated certificate.
	DownstreamTlsCertificateExpirationTimestamps []*types.Timestamp `protobuf:"bytes,1004,rep,name=downstream_tls_certificate_expiration_timestamps,json=downstreamTlsCertificateExpirationTimestamps,proto3" json:"downstream_tls_certificate_expiration_timestamps,omitempty"`
	// Internet VIP Info
	//
	// x-displayName: "Internet VIP Info"
	// Internet VIP Info
	InternetVipInfo []*views.InternetVIPInfo `protobuf:"bytes,1100,rep,name=internet_vip_info,json=internetVipInfo,proto3" json:"internet_vip_info,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_af54a43838ffcca9, []int{3}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_PortChoice interface {
	isGlobalSpecType_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_SniDefaultLbChoice interface {
	isGlobalSpecType_SniDefaultLbChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_AdvertiseChoice interface {
	isGlobalSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_HashPolicyChoice interface {
	isGlobalSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ClusterRetractChoice interface {
	isGlobalSpecType_ClusterRetractChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_LoadbalancerType interface {
	isGlobalSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ServicePolicyChoice interface {
	isGlobalSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_ListenPort struct {
	ListenPort uint32 `protobuf:"varint,2,opt,name=listen_port,json=listenPort,proto3,oneof" json:"listen_port,omitempty"`
}
type GlobalSpecType_PortRanges struct {
	PortRanges string `protobuf:"bytes,35,opt,name=port_ranges,json=portRanges,proto3,oneof" json:"port_ranges,omitempty"`
}
type GlobalSpecType_NoSni struct {
	NoSni *schema.Empty `protobuf:"bytes,26,opt,name=no_sni,json=noSni,proto3,oneof" json:"no_sni,omitempty"`
}
type GlobalSpecType_Sni struct {
	Sni *schema.Empty `protobuf:"bytes,27,opt,name=sni,proto3,oneof" json:"sni,omitempty"`
}
type GlobalSpecType_DefaultLbWithSni struct {
	DefaultLbWithSni *schema.Empty `protobuf:"bytes,28,opt,name=default_lb_with_sni,json=defaultLbWithSni,proto3,oneof" json:"default_lb_with_sni,omitempty"`
}
type GlobalSpecType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,7,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type GlobalSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,8,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type GlobalSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,5,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type GlobalSpecType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,6,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type GlobalSpecType_HashPolicyChoiceRoundRobin struct {
	HashPolicyChoiceRoundRobin *schema.Empty `protobuf:"bytes,13,opt,name=hash_policy_choice_round_robin,json=hashPolicyChoiceRoundRobin,proto3,oneof" json:"hash_policy_choice_round_robin,omitempty"`
}
type GlobalSpecType_HashPolicyChoiceLeastActive struct {
	HashPolicyChoiceLeastActive *schema.Empty `protobuf:"bytes,14,opt,name=hash_policy_choice_least_active,json=hashPolicyChoiceLeastActive,proto3,oneof" json:"hash_policy_choice_least_active,omitempty"`
}
type GlobalSpecType_HashPolicyChoiceRandom struct {
	HashPolicyChoiceRandom *schema.Empty `protobuf:"bytes,15,opt,name=hash_policy_choice_random,json=hashPolicyChoiceRandom,proto3,oneof" json:"hash_policy_choice_random,omitempty"`
}
type GlobalSpecType_HashPolicyChoiceSourceIpStickiness struct {
	HashPolicyChoiceSourceIpStickiness *schema.Empty `protobuf:"bytes,16,opt,name=hash_policy_choice_source_ip_stickiness,json=hashPolicyChoiceSourceIpStickiness,proto3,oneof" json:"hash_policy_choice_source_ip_stickiness,omitempty"`
}
type GlobalSpecType_RetractCluster struct {
	RetractCluster *schema.Empty `protobuf:"bytes,19,opt,name=retract_cluster,json=retractCluster,proto3,oneof" json:"retract_cluster,omitempty"`
}
type GlobalSpecType_DoNotRetractCluster struct {
	DoNotRetractCluster *schema.Empty `protobuf:"bytes,20,opt,name=do_not_retract_cluster,json=doNotRetractCluster,proto3,oneof" json:"do_not_retract_cluster,omitempty"`
}
type GlobalSpecType_Tcp struct {
	Tcp *schema.Empty `protobuf:"bytes,22,opt,name=tcp,proto3,oneof" json:"tcp,omitempty"`
}
type GlobalSpecType_TlsTcpAutoCert struct {
	TlsTcpAutoCert *ProxyTypeTLSTCPAutoCerts `protobuf:"bytes,23,opt,name=tls_tcp_auto_cert,json=tlsTcpAutoCert,proto3,oneof" json:"tls_tcp_auto_cert,omitempty"`
}
type GlobalSpecType_TlsTcp struct {
	TlsTcp *ProxyTypeTLSTCP `protobuf:"bytes,24,opt,name=tls_tcp,json=tlsTcp,proto3,oneof" json:"tls_tcp,omitempty"`
}
type GlobalSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,31,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type GlobalSpecType_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,32,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type GlobalSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *ServicePolicyList `protobuf:"bytes,33,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}

func (*GlobalSpecType_ListenPort) isGlobalSpecType_PortChoice()                               {}
func (*GlobalSpecType_PortRanges) isGlobalSpecType_PortChoice()                               {}
func (*GlobalSpecType_NoSni) isGlobalSpecType_SniDefaultLbChoice()                            {}
func (*GlobalSpecType_Sni) isGlobalSpecType_SniDefaultLbChoice()                              {}
func (*GlobalSpecType_DefaultLbWithSni) isGlobalSpecType_SniDefaultLbChoice()                 {}
func (*GlobalSpecType_DoNotAdvertise) isGlobalSpecType_AdvertiseChoice()                      {}
func (*GlobalSpecType_AdvertiseOnPublicDefaultVip) isGlobalSpecType_AdvertiseChoice()         {}
func (*GlobalSpecType_AdvertiseOnPublic) isGlobalSpecType_AdvertiseChoice()                   {}
func (*GlobalSpecType_AdvertiseCustom) isGlobalSpecType_AdvertiseChoice()                     {}
func (*GlobalSpecType_HashPolicyChoiceRoundRobin) isGlobalSpecType_HashPolicyChoice()         {}
func (*GlobalSpecType_HashPolicyChoiceLeastActive) isGlobalSpecType_HashPolicyChoice()        {}
func (*GlobalSpecType_HashPolicyChoiceRandom) isGlobalSpecType_HashPolicyChoice()             {}
func (*GlobalSpecType_HashPolicyChoiceSourceIpStickiness) isGlobalSpecType_HashPolicyChoice() {}
func (*GlobalSpecType_RetractCluster) isGlobalSpecType_ClusterRetractChoice()                 {}
func (*GlobalSpecType_DoNotRetractCluster) isGlobalSpecType_ClusterRetractChoice()            {}
func (*GlobalSpecType_Tcp) isGlobalSpecType_LoadbalancerType()                                {}
func (*GlobalSpecType_TlsTcpAutoCert) isGlobalSpecType_LoadbalancerType()                     {}
func (*GlobalSpecType_TlsTcp) isGlobalSpecType_LoadbalancerType()                             {}
func (*GlobalSpecType_ServicePoliciesFromNamespace) isGlobalSpecType_ServicePolicyChoice()    {}
func (*GlobalSpecType_NoServicePolicies) isGlobalSpecType_ServicePolicyChoice()               {}
func (*GlobalSpecType_ActiveServicePolicies) isGlobalSpecType_ServicePolicyChoice()           {}

func (m *GlobalSpecType) GetPortChoice() isGlobalSpecType_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}
func (m *GlobalSpecType) GetSniDefaultLbChoice() isGlobalSpecType_SniDefaultLbChoice {
	if m != nil {
		return m.SniDefaultLbChoice
	}
	return nil
}
func (m *GlobalSpecType) GetAdvertiseChoice() isGlobalSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *GlobalSpecType) GetHashPolicyChoice() isGlobalSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *GlobalSpecType) GetClusterRetractChoice() isGlobalSpecType_ClusterRetractChoice {
	if m != nil {
		return m.ClusterRetractChoice
	}
	return nil
}
func (m *GlobalSpecType) GetLoadbalancerType() isGlobalSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *GlobalSpecType) GetServicePolicyChoice() isGlobalSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}

func (m *GlobalSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GlobalSpecType) GetListenPort() uint32 {
	if x, ok := m.GetPortChoice().(*GlobalSpecType_ListenPort); ok {
		return x.ListenPort
	}
	return 0
}

func (m *GlobalSpecType) GetPortRanges() string {
	if x, ok := m.GetPortChoice().(*GlobalSpecType_PortRanges); ok {
		return x.PortRanges
	}
	return ""
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetWithSni() bool {
	if m != nil {
		return m.WithSni
	}
	return false
}

func (m *GlobalSpecType) GetNoSni() *schema.Empty {
	if x, ok := m.GetSniDefaultLbChoice().(*GlobalSpecType_NoSni); ok {
		return x.NoSni
	}
	return nil
}

func (m *GlobalSpecType) GetSni() *schema.Empty {
	if x, ok := m.GetSniDefaultLbChoice().(*GlobalSpecType_Sni); ok {
		return x.Sni
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultLbWithSni() *schema.Empty {
	if x, ok := m.GetSniDefaultLbChoice().(*GlobalSpecType_DefaultLbWithSni); ok {
		return x.DefaultLbWithSni
	}
	return nil
}

func (m *GlobalSpecType) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

func (m *GlobalSpecType) GetOriginPools() []*views.ObjectRefType {
	if m != nil {
		return m.OriginPools
	}
	return nil
}

func (m *GlobalSpecType) GetOriginPoolsWeights() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.OriginPoolsWeights
	}
	return nil
}

func (m *GlobalSpecType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *GlobalSpecType) GetHashPolicyChoiceRoundRobin() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_HashPolicyChoiceRoundRobin); ok {
		return x.HashPolicyChoiceRoundRobin
	}
	return nil
}

func (m *GlobalSpecType) GetHashPolicyChoiceLeastActive() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_HashPolicyChoiceLeastActive); ok {
		return x.HashPolicyChoiceLeastActive
	}
	return nil
}

func (m *GlobalSpecType) GetHashPolicyChoiceRandom() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_HashPolicyChoiceRandom); ok {
		return x.HashPolicyChoiceRandom
	}
	return nil
}

func (m *GlobalSpecType) GetHashPolicyChoiceSourceIpStickiness() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_HashPolicyChoiceSourceIpStickiness); ok {
		return x.HashPolicyChoiceSourceIpStickiness
	}
	return nil
}

func (m *GlobalSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *GlobalSpecType) GetRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*GlobalSpecType_RetractCluster); ok {
		return x.RetractCluster
	}
	return nil
}

func (m *GlobalSpecType) GetDoNotRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*GlobalSpecType_DoNotRetractCluster); ok {
		return x.DoNotRetractCluster
	}
	return nil
}

func (m *GlobalSpecType) GetTcp() *schema.Empty {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (m *GlobalSpecType) GetTlsTcpAutoCert() *ProxyTypeTLSTCPAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_TlsTcpAutoCert); ok {
		return x.TlsTcpAutoCert
	}
	return nil
}

func (m *GlobalSpecType) GetTlsTcp() *ProxyTypeTLSTCP {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_TlsTcp); ok {
		return x.TlsTcp
	}
	return nil
}

func (m *GlobalSpecType) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GlobalSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *GlobalSpecType) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GlobalSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *GlobalSpecType) GetActiveServicePolicies() *ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*GlobalSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GlobalSpecType) GetDnsInfo() []*virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GlobalSpecType) GetAutoCertInfo() *virtual_host.AutoCertInfoType {
	if m != nil {
		return m.AutoCertInfo
	}
	return nil
}

func (m *GlobalSpecType) GetDownstreamTlsCertificateExpirationTimestamps() []*types.Timestamp {
	if m != nil {
		return m.DownstreamTlsCertificateExpirationTimestamps
	}
	return nil
}

func (m *GlobalSpecType) GetInternetVipInfo() []*views.InternetVIPInfo {
	if m != nil {
		return m.InternetVipInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_ListenPort)(nil),
		(*GlobalSpecType_PortRanges)(nil),
		(*GlobalSpecType_NoSni)(nil),
		(*GlobalSpecType_Sni)(nil),
		(*GlobalSpecType_DefaultLbWithSni)(nil),
		(*GlobalSpecType_DoNotAdvertise)(nil),
		(*GlobalSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*GlobalSpecType_AdvertiseOnPublic)(nil),
		(*GlobalSpecType_AdvertiseCustom)(nil),
		(*GlobalSpecType_HashPolicyChoiceRoundRobin)(nil),
		(*GlobalSpecType_HashPolicyChoiceLeastActive)(nil),
		(*GlobalSpecType_HashPolicyChoiceRandom)(nil),
		(*GlobalSpecType_HashPolicyChoiceSourceIpStickiness)(nil),
		(*GlobalSpecType_RetractCluster)(nil),
		(*GlobalSpecType_DoNotRetractCluster)(nil),
		(*GlobalSpecType_Tcp)(nil),
		(*GlobalSpecType_TlsTcpAutoCert)(nil),
		(*GlobalSpecType_TlsTcp)(nil),
		(*GlobalSpecType_ServicePoliciesFromNamespace)(nil),
		(*GlobalSpecType_NoServicePolicies)(nil),
		(*GlobalSpecType_ActiveServicePolicies)(nil),
	}
}

// CreateSpecType
//
// x-displayName: "Create TCP Load Balancer"
// Shape of the TCP load balancer create specification
type CreateSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Types that are valid to be assigned to PortChoice:
	//	*CreateSpecType_ListenPort
	//	*CreateSpecType_PortRanges
	PortChoice isCreateSpecType_PortChoice `protobuf_oneof:"port_choice"`
	// Types that are valid to be assigned to SniDefaultLbChoice:
	//	*CreateSpecType_NoSni
	//	*CreateSpecType_Sni
	//	*CreateSpecType_DefaultLbWithSni
	SniDefaultLbChoice isCreateSpecType_SniDefaultLbChoice `protobuf_oneof:"sni_default_lb_choice"`
	DnsVolterraManaged bool                                `protobuf:"varint,11,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
	OriginPoolsWeights []*views.OriginPoolWithWeight       `protobuf:"bytes,10,rep,name=origin_pools_weights,json=originPoolsWeights,proto3" json:"origin_pools_weights,omitempty"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*CreateSpecType_DoNotAdvertise
	//	*CreateSpecType_AdvertiseOnPublicDefaultVip
	//	*CreateSpecType_AdvertiseOnPublic
	//	*CreateSpecType_AdvertiseCustom
	AdvertiseChoice isCreateSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*CreateSpecType_HashPolicyChoiceRoundRobin
	//	*CreateSpecType_HashPolicyChoiceLeastActive
	//	*CreateSpecType_HashPolicyChoiceRandom
	//	*CreateSpecType_HashPolicyChoiceSourceIpStickiness
	HashPolicyChoice isCreateSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	IdleTimeout      uint32                            `protobuf:"varint,17,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Types that are valid to be assigned to ClusterRetractChoice:
	//	*CreateSpecType_RetractCluster
	//	*CreateSpecType_DoNotRetractCluster
	ClusterRetractChoice isCreateSpecType_ClusterRetractChoice `protobuf_oneof:"cluster_retract_choice"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*CreateSpecType_Tcp
	//	*CreateSpecType_TlsTcpAutoCert
	//	*CreateSpecType_TlsTcp
	LoadbalancerType isCreateSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*CreateSpecType_ServicePoliciesFromNamespace
	//	*CreateSpecType_NoServicePolicies
	//	*CreateSpecType_ActiveServicePolicies
	ServicePolicyChoice isCreateSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_af54a43838ffcca9, []int{4}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_PortChoice interface {
	isCreateSpecType_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_SniDefaultLbChoice interface {
	isCreateSpecType_SniDefaultLbChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_AdvertiseChoice interface {
	isCreateSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_HashPolicyChoice interface {
	isCreateSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ClusterRetractChoice interface {
	isCreateSpecType_ClusterRetractChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_LoadbalancerType interface {
	isCreateSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ServicePolicyChoice interface {
	isCreateSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_ListenPort struct {
	ListenPort uint32 `protobuf:"varint,2,opt,name=listen_port,json=listenPort,proto3,oneof" json:"listen_port,omitempty"`
}
type CreateSpecType_PortRanges struct {
	PortRanges string `protobuf:"bytes,35,opt,name=port_ranges,json=portRanges,proto3,oneof" json:"port_ranges,omitempty"`
}
type CreateSpecType_NoSni struct {
	NoSni *schema.Empty `protobuf:"bytes,26,opt,name=no_sni,json=noSni,proto3,oneof" json:"no_sni,omitempty"`
}
type CreateSpecType_Sni struct {
	Sni *schema.Empty `protobuf:"bytes,27,opt,name=sni,proto3,oneof" json:"sni,omitempty"`
}
type CreateSpecType_DefaultLbWithSni struct {
	DefaultLbWithSni *schema.Empty `protobuf:"bytes,28,opt,name=default_lb_with_sni,json=defaultLbWithSni,proto3,oneof" json:"default_lb_with_sni,omitempty"`
}
type CreateSpecType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,7,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type CreateSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,8,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type CreateSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,5,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type CreateSpecType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,6,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type CreateSpecType_HashPolicyChoiceRoundRobin struct {
	HashPolicyChoiceRoundRobin *schema.Empty `protobuf:"bytes,13,opt,name=hash_policy_choice_round_robin,json=hashPolicyChoiceRoundRobin,proto3,oneof" json:"hash_policy_choice_round_robin,omitempty"`
}
type CreateSpecType_HashPolicyChoiceLeastActive struct {
	HashPolicyChoiceLeastActive *schema.Empty `protobuf:"bytes,14,opt,name=hash_policy_choice_least_active,json=hashPolicyChoiceLeastActive,proto3,oneof" json:"hash_policy_choice_least_active,omitempty"`
}
type CreateSpecType_HashPolicyChoiceRandom struct {
	HashPolicyChoiceRandom *schema.Empty `protobuf:"bytes,15,opt,name=hash_policy_choice_random,json=hashPolicyChoiceRandom,proto3,oneof" json:"hash_policy_choice_random,omitempty"`
}
type CreateSpecType_HashPolicyChoiceSourceIpStickiness struct {
	HashPolicyChoiceSourceIpStickiness *schema.Empty `protobuf:"bytes,16,opt,name=hash_policy_choice_source_ip_stickiness,json=hashPolicyChoiceSourceIpStickiness,proto3,oneof" json:"hash_policy_choice_source_ip_stickiness,omitempty"`
}
type CreateSpecType_RetractCluster struct {
	RetractCluster *schema.Empty `protobuf:"bytes,19,opt,name=retract_cluster,json=retractCluster,proto3,oneof" json:"retract_cluster,omitempty"`
}
type CreateSpecType_DoNotRetractCluster struct {
	DoNotRetractCluster *schema.Empty `protobuf:"bytes,20,opt,name=do_not_retract_cluster,json=doNotRetractCluster,proto3,oneof" json:"do_not_retract_cluster,omitempty"`
}
type CreateSpecType_Tcp struct {
	Tcp *schema.Empty `protobuf:"bytes,22,opt,name=tcp,proto3,oneof" json:"tcp,omitempty"`
}
type CreateSpecType_TlsTcpAutoCert struct {
	TlsTcpAutoCert *ProxyTypeTLSTCPAutoCerts `protobuf:"bytes,23,opt,name=tls_tcp_auto_cert,json=tlsTcpAutoCert,proto3,oneof" json:"tls_tcp_auto_cert,omitempty"`
}
type CreateSpecType_TlsTcp struct {
	TlsTcp *ProxyTypeTLSTCP `protobuf:"bytes,24,opt,name=tls_tcp,json=tlsTcp,proto3,oneof" json:"tls_tcp,omitempty"`
}
type CreateSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,31,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type CreateSpecType_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,32,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type CreateSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *ServicePolicyList `protobuf:"bytes,33,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}

func (*CreateSpecType_ListenPort) isCreateSpecType_PortChoice()                               {}
func (*CreateSpecType_PortRanges) isCreateSpecType_PortChoice()                               {}
func (*CreateSpecType_NoSni) isCreateSpecType_SniDefaultLbChoice()                            {}
func (*CreateSpecType_Sni) isCreateSpecType_SniDefaultLbChoice()                              {}
func (*CreateSpecType_DefaultLbWithSni) isCreateSpecType_SniDefaultLbChoice()                 {}
func (*CreateSpecType_DoNotAdvertise) isCreateSpecType_AdvertiseChoice()                      {}
func (*CreateSpecType_AdvertiseOnPublicDefaultVip) isCreateSpecType_AdvertiseChoice()         {}
func (*CreateSpecType_AdvertiseOnPublic) isCreateSpecType_AdvertiseChoice()                   {}
func (*CreateSpecType_AdvertiseCustom) isCreateSpecType_AdvertiseChoice()                     {}
func (*CreateSpecType_HashPolicyChoiceRoundRobin) isCreateSpecType_HashPolicyChoice()         {}
func (*CreateSpecType_HashPolicyChoiceLeastActive) isCreateSpecType_HashPolicyChoice()        {}
func (*CreateSpecType_HashPolicyChoiceRandom) isCreateSpecType_HashPolicyChoice()             {}
func (*CreateSpecType_HashPolicyChoiceSourceIpStickiness) isCreateSpecType_HashPolicyChoice() {}
func (*CreateSpecType_RetractCluster) isCreateSpecType_ClusterRetractChoice()                 {}
func (*CreateSpecType_DoNotRetractCluster) isCreateSpecType_ClusterRetractChoice()            {}
func (*CreateSpecType_Tcp) isCreateSpecType_LoadbalancerType()                                {}
func (*CreateSpecType_TlsTcpAutoCert) isCreateSpecType_LoadbalancerType()                     {}
func (*CreateSpecType_TlsTcp) isCreateSpecType_LoadbalancerType()                             {}
func (*CreateSpecType_ServicePoliciesFromNamespace) isCreateSpecType_ServicePolicyChoice()    {}
func (*CreateSpecType_NoServicePolicies) isCreateSpecType_ServicePolicyChoice()               {}
func (*CreateSpecType_ActiveServicePolicies) isCreateSpecType_ServicePolicyChoice()           {}

func (m *CreateSpecType) GetPortChoice() isCreateSpecType_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}
func (m *CreateSpecType) GetSniDefaultLbChoice() isCreateSpecType_SniDefaultLbChoice {
	if m != nil {
		return m.SniDefaultLbChoice
	}
	return nil
}
func (m *CreateSpecType) GetAdvertiseChoice() isCreateSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *CreateSpecType) GetHashPolicyChoice() isCreateSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *CreateSpecType) GetClusterRetractChoice() isCreateSpecType_ClusterRetractChoice {
	if m != nil {
		return m.ClusterRetractChoice
	}
	return nil
}
func (m *CreateSpecType) GetLoadbalancerType() isCreateSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *CreateSpecType) GetServicePolicyChoice() isCreateSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}

func (m *CreateSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *CreateSpecType) GetListenPort() uint32 {
	if x, ok := m.GetPortChoice().(*CreateSpecType_ListenPort); ok {
		return x.ListenPort
	}
	return 0
}

func (m *CreateSpecType) GetPortRanges() string {
	if x, ok := m.GetPortChoice().(*CreateSpecType_PortRanges); ok {
		return x.PortRanges
	}
	return ""
}

func (m *CreateSpecType) GetNoSni() *schema.Empty {
	if x, ok := m.GetSniDefaultLbChoice().(*CreateSpecType_NoSni); ok {
		return x.NoSni
	}
	return nil
}

func (m *CreateSpecType) GetSni() *schema.Empty {
	if x, ok := m.GetSniDefaultLbChoice().(*CreateSpecType_Sni); ok {
		return x.Sni
	}
	return nil
}

func (m *CreateSpecType) GetDefaultLbWithSni() *schema.Empty {
	if x, ok := m.GetSniDefaultLbChoice().(*CreateSpecType_DefaultLbWithSni); ok {
		return x.DefaultLbWithSni
	}
	return nil
}

func (m *CreateSpecType) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

func (m *CreateSpecType) GetOriginPoolsWeights() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.OriginPoolsWeights
	}
	return nil
}

func (m *CreateSpecType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *CreateSpecType) GetHashPolicyChoiceRoundRobin() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_HashPolicyChoiceRoundRobin); ok {
		return x.HashPolicyChoiceRoundRobin
	}
	return nil
}

func (m *CreateSpecType) GetHashPolicyChoiceLeastActive() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_HashPolicyChoiceLeastActive); ok {
		return x.HashPolicyChoiceLeastActive
	}
	return nil
}

func (m *CreateSpecType) GetHashPolicyChoiceRandom() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_HashPolicyChoiceRandom); ok {
		return x.HashPolicyChoiceRandom
	}
	return nil
}

func (m *CreateSpecType) GetHashPolicyChoiceSourceIpStickiness() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_HashPolicyChoiceSourceIpStickiness); ok {
		return x.HashPolicyChoiceSourceIpStickiness
	}
	return nil
}

func (m *CreateSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *CreateSpecType) GetRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*CreateSpecType_RetractCluster); ok {
		return x.RetractCluster
	}
	return nil
}

func (m *CreateSpecType) GetDoNotRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*CreateSpecType_DoNotRetractCluster); ok {
		return x.DoNotRetractCluster
	}
	return nil
}

func (m *CreateSpecType) GetTcp() *schema.Empty {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (m *CreateSpecType) GetTlsTcpAutoCert() *ProxyTypeTLSTCPAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_TlsTcpAutoCert); ok {
		return x.TlsTcpAutoCert
	}
	return nil
}

func (m *CreateSpecType) GetTlsTcp() *ProxyTypeTLSTCP {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_TlsTcp); ok {
		return x.TlsTcp
	}
	return nil
}

func (m *CreateSpecType) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*CreateSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *CreateSpecType) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*CreateSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *CreateSpecType) GetActiveServicePolicies() *ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*CreateSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_ListenPort)(nil),
		(*CreateSpecType_PortRanges)(nil),
		(*CreateSpecType_NoSni)(nil),
		(*CreateSpecType_Sni)(nil),
		(*CreateSpecType_DefaultLbWithSni)(nil),
		(*CreateSpecType_DoNotAdvertise)(nil),
		(*CreateSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*CreateSpecType_AdvertiseOnPublic)(nil),
		(*CreateSpecType_AdvertiseCustom)(nil),
		(*CreateSpecType_HashPolicyChoiceRoundRobin)(nil),
		(*CreateSpecType_HashPolicyChoiceLeastActive)(nil),
		(*CreateSpecType_HashPolicyChoiceRandom)(nil),
		(*CreateSpecType_HashPolicyChoiceSourceIpStickiness)(nil),
		(*CreateSpecType_RetractCluster)(nil),
		(*CreateSpecType_DoNotRetractCluster)(nil),
		(*CreateSpecType_Tcp)(nil),
		(*CreateSpecType_TlsTcpAutoCert)(nil),
		(*CreateSpecType_TlsTcp)(nil),
		(*CreateSpecType_ServicePoliciesFromNamespace)(nil),
		(*CreateSpecType_NoServicePolicies)(nil),
		(*CreateSpecType_ActiveServicePolicies)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace TCP Load Balancer"
// Shape of the TCP load balancer replace specification
type ReplaceSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Types that are valid to be assigned to PortChoice:
	//	*ReplaceSpecType_ListenPort
	//	*ReplaceSpecType_PortRanges
	PortChoice isReplaceSpecType_PortChoice `protobuf_oneof:"port_choice"`
	// Types that are valid to be assigned to SniDefaultLbChoice:
	//	*ReplaceSpecType_NoSni
	//	*ReplaceSpecType_Sni
	//	*ReplaceSpecType_DefaultLbWithSni
	SniDefaultLbChoice isReplaceSpecType_SniDefaultLbChoice `protobuf_oneof:"sni_default_lb_choice"`
	DnsVolterraManaged bool                                 `protobuf:"varint,11,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
	OriginPools        []*views.ObjectRefType               `protobuf:"bytes,4,rep,name=origin_pools,json=originPools,proto3" json:"origin_pools,omitempty"`
	OriginPoolsWeights []*views.OriginPoolWithWeight        `protobuf:"bytes,10,rep,name=origin_pools_weights,json=originPoolsWeights,proto3" json:"origin_pools_weights,omitempty"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*ReplaceSpecType_DoNotAdvertise
	//	*ReplaceSpecType_AdvertiseOnPublicDefaultVip
	//	*ReplaceSpecType_AdvertiseOnPublic
	//	*ReplaceSpecType_AdvertiseCustom
	AdvertiseChoice isReplaceSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*ReplaceSpecType_HashPolicyChoiceRoundRobin
	//	*ReplaceSpecType_HashPolicyChoiceLeastActive
	//	*ReplaceSpecType_HashPolicyChoiceRandom
	//	*ReplaceSpecType_HashPolicyChoiceSourceIpStickiness
	HashPolicyChoice isReplaceSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	IdleTimeout      uint32                             `protobuf:"varint,17,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Types that are valid to be assigned to ClusterRetractChoice:
	//	*ReplaceSpecType_RetractCluster
	//	*ReplaceSpecType_DoNotRetractCluster
	ClusterRetractChoice isReplaceSpecType_ClusterRetractChoice `protobuf_oneof:"cluster_retract_choice"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*ReplaceSpecType_Tcp
	//	*ReplaceSpecType_TlsTcpAutoCert
	//	*ReplaceSpecType_TlsTcp
	LoadbalancerType isReplaceSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*ReplaceSpecType_ServicePoliciesFromNamespace
	//	*ReplaceSpecType_NoServicePolicies
	//	*ReplaceSpecType_ActiveServicePolicies
	ServicePolicyChoice isReplaceSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_af54a43838ffcca9, []int{5}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_PortChoice interface {
	isReplaceSpecType_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_SniDefaultLbChoice interface {
	isReplaceSpecType_SniDefaultLbChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_AdvertiseChoice interface {
	isReplaceSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_HashPolicyChoice interface {
	isReplaceSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ClusterRetractChoice interface {
	isReplaceSpecType_ClusterRetractChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_LoadbalancerType interface {
	isReplaceSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ServicePolicyChoice interface {
	isReplaceSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_ListenPort struct {
	ListenPort uint32 `protobuf:"varint,2,opt,name=listen_port,json=listenPort,proto3,oneof" json:"listen_port,omitempty"`
}
type ReplaceSpecType_PortRanges struct {
	PortRanges string `protobuf:"bytes,35,opt,name=port_ranges,json=portRanges,proto3,oneof" json:"port_ranges,omitempty"`
}
type ReplaceSpecType_NoSni struct {
	NoSni *schema.Empty `protobuf:"bytes,26,opt,name=no_sni,json=noSni,proto3,oneof" json:"no_sni,omitempty"`
}
type ReplaceSpecType_Sni struct {
	Sni *schema.Empty `protobuf:"bytes,27,opt,name=sni,proto3,oneof" json:"sni,omitempty"`
}
type ReplaceSpecType_DefaultLbWithSni struct {
	DefaultLbWithSni *schema.Empty `protobuf:"bytes,28,opt,name=default_lb_with_sni,json=defaultLbWithSni,proto3,oneof" json:"default_lb_with_sni,omitempty"`
}
type ReplaceSpecType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,7,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type ReplaceSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,8,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type ReplaceSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,5,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type ReplaceSpecType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,6,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type ReplaceSpecType_HashPolicyChoiceRoundRobin struct {
	HashPolicyChoiceRoundRobin *schema.Empty `protobuf:"bytes,13,opt,name=hash_policy_choice_round_robin,json=hashPolicyChoiceRoundRobin,proto3,oneof" json:"hash_policy_choice_round_robin,omitempty"`
}
type ReplaceSpecType_HashPolicyChoiceLeastActive struct {
	HashPolicyChoiceLeastActive *schema.Empty `protobuf:"bytes,14,opt,name=hash_policy_choice_least_active,json=hashPolicyChoiceLeastActive,proto3,oneof" json:"hash_policy_choice_least_active,omitempty"`
}
type ReplaceSpecType_HashPolicyChoiceRandom struct {
	HashPolicyChoiceRandom *schema.Empty `protobuf:"bytes,15,opt,name=hash_policy_choice_random,json=hashPolicyChoiceRandom,proto3,oneof" json:"hash_policy_choice_random,omitempty"`
}
type ReplaceSpecType_HashPolicyChoiceSourceIpStickiness struct {
	HashPolicyChoiceSourceIpStickiness *schema.Empty `protobuf:"bytes,16,opt,name=hash_policy_choice_source_ip_stickiness,json=hashPolicyChoiceSourceIpStickiness,proto3,oneof" json:"hash_policy_choice_source_ip_stickiness,omitempty"`
}
type ReplaceSpecType_RetractCluster struct {
	RetractCluster *schema.Empty `protobuf:"bytes,19,opt,name=retract_cluster,json=retractCluster,proto3,oneof" json:"retract_cluster,omitempty"`
}
type ReplaceSpecType_DoNotRetractCluster struct {
	DoNotRetractCluster *schema.Empty `protobuf:"bytes,20,opt,name=do_not_retract_cluster,json=doNotRetractCluster,proto3,oneof" json:"do_not_retract_cluster,omitempty"`
}
type ReplaceSpecType_Tcp struct {
	Tcp *schema.Empty `protobuf:"bytes,22,opt,name=tcp,proto3,oneof" json:"tcp,omitempty"`
}
type ReplaceSpecType_TlsTcpAutoCert struct {
	TlsTcpAutoCert *ProxyTypeTLSTCPAutoCerts `protobuf:"bytes,23,opt,name=tls_tcp_auto_cert,json=tlsTcpAutoCert,proto3,oneof" json:"tls_tcp_auto_cert,omitempty"`
}
type ReplaceSpecType_TlsTcp struct {
	TlsTcp *ProxyTypeTLSTCP `protobuf:"bytes,24,opt,name=tls_tcp,json=tlsTcp,proto3,oneof" json:"tls_tcp,omitempty"`
}
type ReplaceSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,31,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type ReplaceSpecType_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,32,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type ReplaceSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *ServicePolicyList `protobuf:"bytes,33,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}

func (*ReplaceSpecType_ListenPort) isReplaceSpecType_PortChoice()                               {}
func (*ReplaceSpecType_PortRanges) isReplaceSpecType_PortChoice()                               {}
func (*ReplaceSpecType_NoSni) isReplaceSpecType_SniDefaultLbChoice()                            {}
func (*ReplaceSpecType_Sni) isReplaceSpecType_SniDefaultLbChoice()                              {}
func (*ReplaceSpecType_DefaultLbWithSni) isReplaceSpecType_SniDefaultLbChoice()                 {}
func (*ReplaceSpecType_DoNotAdvertise) isReplaceSpecType_AdvertiseChoice()                      {}
func (*ReplaceSpecType_AdvertiseOnPublicDefaultVip) isReplaceSpecType_AdvertiseChoice()         {}
func (*ReplaceSpecType_AdvertiseOnPublic) isReplaceSpecType_AdvertiseChoice()                   {}
func (*ReplaceSpecType_AdvertiseCustom) isReplaceSpecType_AdvertiseChoice()                     {}
func (*ReplaceSpecType_HashPolicyChoiceRoundRobin) isReplaceSpecType_HashPolicyChoice()         {}
func (*ReplaceSpecType_HashPolicyChoiceLeastActive) isReplaceSpecType_HashPolicyChoice()        {}
func (*ReplaceSpecType_HashPolicyChoiceRandom) isReplaceSpecType_HashPolicyChoice()             {}
func (*ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) isReplaceSpecType_HashPolicyChoice() {}
func (*ReplaceSpecType_RetractCluster) isReplaceSpecType_ClusterRetractChoice()                 {}
func (*ReplaceSpecType_DoNotRetractCluster) isReplaceSpecType_ClusterRetractChoice()            {}
func (*ReplaceSpecType_Tcp) isReplaceSpecType_LoadbalancerType()                                {}
func (*ReplaceSpecType_TlsTcpAutoCert) isReplaceSpecType_LoadbalancerType()                     {}
func (*ReplaceSpecType_TlsTcp) isReplaceSpecType_LoadbalancerType()                             {}
func (*ReplaceSpecType_ServicePoliciesFromNamespace) isReplaceSpecType_ServicePolicyChoice()    {}
func (*ReplaceSpecType_NoServicePolicies) isReplaceSpecType_ServicePolicyChoice()               {}
func (*ReplaceSpecType_ActiveServicePolicies) isReplaceSpecType_ServicePolicyChoice()           {}

func (m *ReplaceSpecType) GetPortChoice() isReplaceSpecType_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetSniDefaultLbChoice() isReplaceSpecType_SniDefaultLbChoice {
	if m != nil {
		return m.SniDefaultLbChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetAdvertiseChoice() isReplaceSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetHashPolicyChoice() isReplaceSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetClusterRetractChoice() isReplaceSpecType_ClusterRetractChoice {
	if m != nil {
		return m.ClusterRetractChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetLoadbalancerType() isReplaceSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *ReplaceSpecType) GetServicePolicyChoice() isReplaceSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *ReplaceSpecType) GetListenPort() uint32 {
	if x, ok := m.GetPortChoice().(*ReplaceSpecType_ListenPort); ok {
		return x.ListenPort
	}
	return 0
}

func (m *ReplaceSpecType) GetPortRanges() string {
	if x, ok := m.GetPortChoice().(*ReplaceSpecType_PortRanges); ok {
		return x.PortRanges
	}
	return ""
}

func (m *ReplaceSpecType) GetNoSni() *schema.Empty {
	if x, ok := m.GetSniDefaultLbChoice().(*ReplaceSpecType_NoSni); ok {
		return x.NoSni
	}
	return nil
}

func (m *ReplaceSpecType) GetSni() *schema.Empty {
	if x, ok := m.GetSniDefaultLbChoice().(*ReplaceSpecType_Sni); ok {
		return x.Sni
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultLbWithSni() *schema.Empty {
	if x, ok := m.GetSniDefaultLbChoice().(*ReplaceSpecType_DefaultLbWithSni); ok {
		return x.DefaultLbWithSni
	}
	return nil
}

func (m *ReplaceSpecType) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

func (m *ReplaceSpecType) GetOriginPools() []*views.ObjectRefType {
	if m != nil {
		return m.OriginPools
	}
	return nil
}

func (m *ReplaceSpecType) GetOriginPoolsWeights() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.OriginPoolsWeights
	}
	return nil
}

func (m *ReplaceSpecType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *ReplaceSpecType) GetHashPolicyChoiceRoundRobin() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_HashPolicyChoiceRoundRobin); ok {
		return x.HashPolicyChoiceRoundRobin
	}
	return nil
}

func (m *ReplaceSpecType) GetHashPolicyChoiceLeastActive() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_HashPolicyChoiceLeastActive); ok {
		return x.HashPolicyChoiceLeastActive
	}
	return nil
}

func (m *ReplaceSpecType) GetHashPolicyChoiceRandom() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_HashPolicyChoiceRandom); ok {
		return x.HashPolicyChoiceRandom
	}
	return nil
}

func (m *ReplaceSpecType) GetHashPolicyChoiceSourceIpStickiness() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_HashPolicyChoiceSourceIpStickiness); ok {
		return x.HashPolicyChoiceSourceIpStickiness
	}
	return nil
}

func (m *ReplaceSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *ReplaceSpecType) GetRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*ReplaceSpecType_RetractCluster); ok {
		return x.RetractCluster
	}
	return nil
}

func (m *ReplaceSpecType) GetDoNotRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*ReplaceSpecType_DoNotRetractCluster); ok {
		return x.DoNotRetractCluster
	}
	return nil
}

func (m *ReplaceSpecType) GetTcp() *schema.Empty {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (m *ReplaceSpecType) GetTlsTcpAutoCert() *ProxyTypeTLSTCPAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_TlsTcpAutoCert); ok {
		return x.TlsTcpAutoCert
	}
	return nil
}

func (m *ReplaceSpecType) GetTlsTcp() *ProxyTypeTLSTCP {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_TlsTcp); ok {
		return x.TlsTcp
	}
	return nil
}

func (m *ReplaceSpecType) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*ReplaceSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *ReplaceSpecType) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*ReplaceSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *ReplaceSpecType) GetActiveServicePolicies() *ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*ReplaceSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_ListenPort)(nil),
		(*ReplaceSpecType_PortRanges)(nil),
		(*ReplaceSpecType_NoSni)(nil),
		(*ReplaceSpecType_Sni)(nil),
		(*ReplaceSpecType_DefaultLbWithSni)(nil),
		(*ReplaceSpecType_DoNotAdvertise)(nil),
		(*ReplaceSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*ReplaceSpecType_AdvertiseOnPublic)(nil),
		(*ReplaceSpecType_AdvertiseCustom)(nil),
		(*ReplaceSpecType_HashPolicyChoiceRoundRobin)(nil),
		(*ReplaceSpecType_HashPolicyChoiceLeastActive)(nil),
		(*ReplaceSpecType_HashPolicyChoiceRandom)(nil),
		(*ReplaceSpecType_HashPolicyChoiceSourceIpStickiness)(nil),
		(*ReplaceSpecType_RetractCluster)(nil),
		(*ReplaceSpecType_DoNotRetractCluster)(nil),
		(*ReplaceSpecType_Tcp)(nil),
		(*ReplaceSpecType_TlsTcpAutoCert)(nil),
		(*ReplaceSpecType_TlsTcp)(nil),
		(*ReplaceSpecType_ServicePoliciesFromNamespace)(nil),
		(*ReplaceSpecType_NoServicePolicies)(nil),
		(*ReplaceSpecType_ActiveServicePolicies)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get TCP Load Balancer"
// Shape of the TCP load balancer get specification
type GetSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Types that are valid to be assigned to PortChoice:
	//	*GetSpecType_ListenPort
	//	*GetSpecType_PortRanges
	PortChoice isGetSpecType_PortChoice `protobuf_oneof:"port_choice"`
	// Types that are valid to be assigned to SniDefaultLbChoice:
	//	*GetSpecType_NoSni
	//	*GetSpecType_Sni
	//	*GetSpecType_DefaultLbWithSni
	SniDefaultLbChoice isGetSpecType_SniDefaultLbChoice `protobuf_oneof:"sni_default_lb_choice"`
	DnsVolterraManaged bool                             `protobuf:"varint,11,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
	OriginPools        []*views.ObjectRefType           `protobuf:"bytes,4,rep,name=origin_pools,json=originPools,proto3" json:"origin_pools,omitempty"`
	OriginPoolsWeights []*views.OriginPoolWithWeight    `protobuf:"bytes,10,rep,name=origin_pools_weights,json=originPoolsWeights,proto3" json:"origin_pools_weights,omitempty"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*GetSpecType_DoNotAdvertise
	//	*GetSpecType_AdvertiseOnPublicDefaultVip
	//	*GetSpecType_AdvertiseOnPublic
	//	*GetSpecType_AdvertiseCustom
	AdvertiseChoice isGetSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*GetSpecType_HashPolicyChoiceRoundRobin
	//	*GetSpecType_HashPolicyChoiceLeastActive
	//	*GetSpecType_HashPolicyChoiceRandom
	//	*GetSpecType_HashPolicyChoiceSourceIpStickiness
	HashPolicyChoice isGetSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	IdleTimeout      uint32                         `protobuf:"varint,17,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Types that are valid to be assigned to ClusterRetractChoice:
	//	*GetSpecType_RetractCluster
	//	*GetSpecType_DoNotRetractCluster
	ClusterRetractChoice isGetSpecType_ClusterRetractChoice `protobuf_oneof:"cluster_retract_choice"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*GetSpecType_Tcp
	//	*GetSpecType_TlsTcpAutoCert
	//	*GetSpecType_TlsTcp
	LoadbalancerType isGetSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*GetSpecType_ServicePoliciesFromNamespace
	//	*GetSpecType_NoServicePolicies
	//	*GetSpecType_ActiveServicePolicies
	ServicePolicyChoice                          isGetSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	HostName                                     string                            `protobuf:"bytes,1001,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	DnsInfo                                      []*virtual_host_dns_info.DnsInfo  `protobuf:"bytes,1002,rep,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`
	AutoCertInfo                                 *virtual_host.AutoCertInfoType    `protobuf:"bytes,1003,opt,name=auto_cert_info,json=autoCertInfo,proto3" json:"auto_cert_info,omitempty"`
	DownstreamTlsCertificateExpirationTimestamps []*types.Timestamp                `protobuf:"bytes,1004,rep,name=downstream_tls_certificate_expiration_timestamps,json=downstreamTlsCertificateExpirationTimestamps,proto3" json:"downstream_tls_certificate_expiration_timestamps,omitempty"`
	InternetVipInfo                              []*views.InternetVIPInfo          `protobuf:"bytes,1100,rep,name=internet_vip_info,json=internetVipInfo,proto3" json:"internet_vip_info,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_af54a43838ffcca9, []int{6}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_PortChoice interface {
	isGetSpecType_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_SniDefaultLbChoice interface {
	isGetSpecType_SniDefaultLbChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_AdvertiseChoice interface {
	isGetSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_HashPolicyChoice interface {
	isGetSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ClusterRetractChoice interface {
	isGetSpecType_ClusterRetractChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_LoadbalancerType interface {
	isGetSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ServicePolicyChoice interface {
	isGetSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_ListenPort struct {
	ListenPort uint32 `protobuf:"varint,2,opt,name=listen_port,json=listenPort,proto3,oneof" json:"listen_port,omitempty"`
}
type GetSpecType_PortRanges struct {
	PortRanges string `protobuf:"bytes,35,opt,name=port_ranges,json=portRanges,proto3,oneof" json:"port_ranges,omitempty"`
}
type GetSpecType_NoSni struct {
	NoSni *schema.Empty `protobuf:"bytes,26,opt,name=no_sni,json=noSni,proto3,oneof" json:"no_sni,omitempty"`
}
type GetSpecType_Sni struct {
	Sni *schema.Empty `protobuf:"bytes,27,opt,name=sni,proto3,oneof" json:"sni,omitempty"`
}
type GetSpecType_DefaultLbWithSni struct {
	DefaultLbWithSni *schema.Empty `protobuf:"bytes,28,opt,name=default_lb_with_sni,json=defaultLbWithSni,proto3,oneof" json:"default_lb_with_sni,omitempty"`
}
type GetSpecType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,7,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type GetSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,8,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type GetSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,5,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type GetSpecType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,6,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type GetSpecType_HashPolicyChoiceRoundRobin struct {
	HashPolicyChoiceRoundRobin *schema.Empty `protobuf:"bytes,13,opt,name=hash_policy_choice_round_robin,json=hashPolicyChoiceRoundRobin,proto3,oneof" json:"hash_policy_choice_round_robin,omitempty"`
}
type GetSpecType_HashPolicyChoiceLeastActive struct {
	HashPolicyChoiceLeastActive *schema.Empty `protobuf:"bytes,14,opt,name=hash_policy_choice_least_active,json=hashPolicyChoiceLeastActive,proto3,oneof" json:"hash_policy_choice_least_active,omitempty"`
}
type GetSpecType_HashPolicyChoiceRandom struct {
	HashPolicyChoiceRandom *schema.Empty `protobuf:"bytes,15,opt,name=hash_policy_choice_random,json=hashPolicyChoiceRandom,proto3,oneof" json:"hash_policy_choice_random,omitempty"`
}
type GetSpecType_HashPolicyChoiceSourceIpStickiness struct {
	HashPolicyChoiceSourceIpStickiness *schema.Empty `protobuf:"bytes,16,opt,name=hash_policy_choice_source_ip_stickiness,json=hashPolicyChoiceSourceIpStickiness,proto3,oneof" json:"hash_policy_choice_source_ip_stickiness,omitempty"`
}
type GetSpecType_RetractCluster struct {
	RetractCluster *schema.Empty `protobuf:"bytes,19,opt,name=retract_cluster,json=retractCluster,proto3,oneof" json:"retract_cluster,omitempty"`
}
type GetSpecType_DoNotRetractCluster struct {
	DoNotRetractCluster *schema.Empty `protobuf:"bytes,20,opt,name=do_not_retract_cluster,json=doNotRetractCluster,proto3,oneof" json:"do_not_retract_cluster,omitempty"`
}
type GetSpecType_Tcp struct {
	Tcp *schema.Empty `protobuf:"bytes,22,opt,name=tcp,proto3,oneof" json:"tcp,omitempty"`
}
type GetSpecType_TlsTcpAutoCert struct {
	TlsTcpAutoCert *ProxyTypeTLSTCPAutoCerts `protobuf:"bytes,23,opt,name=tls_tcp_auto_cert,json=tlsTcpAutoCert,proto3,oneof" json:"tls_tcp_auto_cert,omitempty"`
}
type GetSpecType_TlsTcp struct {
	TlsTcp *ProxyTypeTLSTCP `protobuf:"bytes,24,opt,name=tls_tcp,json=tlsTcp,proto3,oneof" json:"tls_tcp,omitempty"`
}
type GetSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,31,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type GetSpecType_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,32,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type GetSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *ServicePolicyList `protobuf:"bytes,33,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}

func (*GetSpecType_ListenPort) isGetSpecType_PortChoice()                               {}
func (*GetSpecType_PortRanges) isGetSpecType_PortChoice()                               {}
func (*GetSpecType_NoSni) isGetSpecType_SniDefaultLbChoice()                            {}
func (*GetSpecType_Sni) isGetSpecType_SniDefaultLbChoice()                              {}
func (*GetSpecType_DefaultLbWithSni) isGetSpecType_SniDefaultLbChoice()                 {}
func (*GetSpecType_DoNotAdvertise) isGetSpecType_AdvertiseChoice()                      {}
func (*GetSpecType_AdvertiseOnPublicDefaultVip) isGetSpecType_AdvertiseChoice()         {}
func (*GetSpecType_AdvertiseOnPublic) isGetSpecType_AdvertiseChoice()                   {}
func (*GetSpecType_AdvertiseCustom) isGetSpecType_AdvertiseChoice()                     {}
func (*GetSpecType_HashPolicyChoiceRoundRobin) isGetSpecType_HashPolicyChoice()         {}
func (*GetSpecType_HashPolicyChoiceLeastActive) isGetSpecType_HashPolicyChoice()        {}
func (*GetSpecType_HashPolicyChoiceRandom) isGetSpecType_HashPolicyChoice()             {}
func (*GetSpecType_HashPolicyChoiceSourceIpStickiness) isGetSpecType_HashPolicyChoice() {}
func (*GetSpecType_RetractCluster) isGetSpecType_ClusterRetractChoice()                 {}
func (*GetSpecType_DoNotRetractCluster) isGetSpecType_ClusterRetractChoice()            {}
func (*GetSpecType_Tcp) isGetSpecType_LoadbalancerType()                                {}
func (*GetSpecType_TlsTcpAutoCert) isGetSpecType_LoadbalancerType()                     {}
func (*GetSpecType_TlsTcp) isGetSpecType_LoadbalancerType()                             {}
func (*GetSpecType_ServicePoliciesFromNamespace) isGetSpecType_ServicePolicyChoice()    {}
func (*GetSpecType_NoServicePolicies) isGetSpecType_ServicePolicyChoice()               {}
func (*GetSpecType_ActiveServicePolicies) isGetSpecType_ServicePolicyChoice()           {}

func (m *GetSpecType) GetPortChoice() isGetSpecType_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}
func (m *GetSpecType) GetSniDefaultLbChoice() isGetSpecType_SniDefaultLbChoice {
	if m != nil {
		return m.SniDefaultLbChoice
	}
	return nil
}
func (m *GetSpecType) GetAdvertiseChoice() isGetSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *GetSpecType) GetHashPolicyChoice() isGetSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *GetSpecType) GetClusterRetractChoice() isGetSpecType_ClusterRetractChoice {
	if m != nil {
		return m.ClusterRetractChoice
	}
	return nil
}
func (m *GetSpecType) GetLoadbalancerType() isGetSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *GetSpecType) GetServicePolicyChoice() isGetSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}

func (m *GetSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetSpecType) GetListenPort() uint32 {
	if x, ok := m.GetPortChoice().(*GetSpecType_ListenPort); ok {
		return x.ListenPort
	}
	return 0
}

func (m *GetSpecType) GetPortRanges() string {
	if x, ok := m.GetPortChoice().(*GetSpecType_PortRanges); ok {
		return x.PortRanges
	}
	return ""
}

func (m *GetSpecType) GetNoSni() *schema.Empty {
	if x, ok := m.GetSniDefaultLbChoice().(*GetSpecType_NoSni); ok {
		return x.NoSni
	}
	return nil
}

func (m *GetSpecType) GetSni() *schema.Empty {
	if x, ok := m.GetSniDefaultLbChoice().(*GetSpecType_Sni); ok {
		return x.Sni
	}
	return nil
}

func (m *GetSpecType) GetDefaultLbWithSni() *schema.Empty {
	if x, ok := m.GetSniDefaultLbChoice().(*GetSpecType_DefaultLbWithSni); ok {
		return x.DefaultLbWithSni
	}
	return nil
}

func (m *GetSpecType) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

func (m *GetSpecType) GetOriginPools() []*views.ObjectRefType {
	if m != nil {
		return m.OriginPools
	}
	return nil
}

func (m *GetSpecType) GetOriginPoolsWeights() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.OriginPoolsWeights
	}
	return nil
}

func (m *GetSpecType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *GetSpecType) GetHashPolicyChoiceRoundRobin() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_HashPolicyChoiceRoundRobin); ok {
		return x.HashPolicyChoiceRoundRobin
	}
	return nil
}

func (m *GetSpecType) GetHashPolicyChoiceLeastActive() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_HashPolicyChoiceLeastActive); ok {
		return x.HashPolicyChoiceLeastActive
	}
	return nil
}

func (m *GetSpecType) GetHashPolicyChoiceRandom() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_HashPolicyChoiceRandom); ok {
		return x.HashPolicyChoiceRandom
	}
	return nil
}

func (m *GetSpecType) GetHashPolicyChoiceSourceIpStickiness() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_HashPolicyChoiceSourceIpStickiness); ok {
		return x.HashPolicyChoiceSourceIpStickiness
	}
	return nil
}

func (m *GetSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *GetSpecType) GetRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*GetSpecType_RetractCluster); ok {
		return x.RetractCluster
	}
	return nil
}

func (m *GetSpecType) GetDoNotRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*GetSpecType_DoNotRetractCluster); ok {
		return x.DoNotRetractCluster
	}
	return nil
}

func (m *GetSpecType) GetTcp() *schema.Empty {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (m *GetSpecType) GetTlsTcpAutoCert() *ProxyTypeTLSTCPAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_TlsTcpAutoCert); ok {
		return x.TlsTcpAutoCert
	}
	return nil
}

func (m *GetSpecType) GetTlsTcp() *ProxyTypeTLSTCP {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_TlsTcp); ok {
		return x.TlsTcp
	}
	return nil
}

func (m *GetSpecType) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GetSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *GetSpecType) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GetSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *GetSpecType) GetActiveServicePolicies() *ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*GetSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *GetSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GetSpecType) GetDnsInfo() []*virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GetSpecType) GetAutoCertInfo() *virtual_host.AutoCertInfoType {
	if m != nil {
		return m.AutoCertInfo
	}
	return nil
}

func (m *GetSpecType) GetDownstreamTlsCertificateExpirationTimestamps() []*types.Timestamp {
	if m != nil {
		return m.DownstreamTlsCertificateExpirationTimestamps
	}
	return nil
}

func (m *GetSpecType) GetInternetVipInfo() []*views.InternetVIPInfo {
	if m != nil {
		return m.InternetVipInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_ListenPort)(nil),
		(*GetSpecType_PortRanges)(nil),
		(*GetSpecType_NoSni)(nil),
		(*GetSpecType_Sni)(nil),
		(*GetSpecType_DefaultLbWithSni)(nil),
		(*GetSpecType_DoNotAdvertise)(nil),
		(*GetSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*GetSpecType_AdvertiseOnPublic)(nil),
		(*GetSpecType_AdvertiseCustom)(nil),
		(*GetSpecType_HashPolicyChoiceRoundRobin)(nil),
		(*GetSpecType_HashPolicyChoiceLeastActive)(nil),
		(*GetSpecType_HashPolicyChoiceRandom)(nil),
		(*GetSpecType_HashPolicyChoiceSourceIpStickiness)(nil),
		(*GetSpecType_RetractCluster)(nil),
		(*GetSpecType_DoNotRetractCluster)(nil),
		(*GetSpecType_Tcp)(nil),
		(*GetSpecType_TlsTcpAutoCert)(nil),
		(*GetSpecType_TlsTcp)(nil),
		(*GetSpecType_ServicePoliciesFromNamespace)(nil),
		(*GetSpecType_NoServicePolicies)(nil),
		(*GetSpecType_ActiveServicePolicies)(nil),
	}
}

func init() {
	proto.RegisterType((*ProxyTypeTLSTCP)(nil), "ves.io.schema.views.tcp_loadbalancer.ProxyTypeTLSTCP")
	golang_proto.RegisterType((*ProxyTypeTLSTCP)(nil), "ves.io.schema.views.tcp_loadbalancer.ProxyTypeTLSTCP")
	proto.RegisterType((*ProxyTypeTLSTCPAutoCerts)(nil), "ves.io.schema.views.tcp_loadbalancer.ProxyTypeTLSTCPAutoCerts")
	golang_proto.RegisterType((*ProxyTypeTLSTCPAutoCerts)(nil), "ves.io.schema.views.tcp_loadbalancer.ProxyTypeTLSTCPAutoCerts")
	proto.RegisterType((*ServicePolicyList)(nil), "ves.io.schema.views.tcp_loadbalancer.ServicePolicyList")
	golang_proto.RegisterType((*ServicePolicyList)(nil), "ves.io.schema.views.tcp_loadbalancer.ServicePolicyList")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.tcp_loadbalancer.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.tcp_loadbalancer.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.tcp_loadbalancer.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.tcp_loadbalancer.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.tcp_loadbalancer.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.tcp_loadbalancer.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.tcp_loadbalancer.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.tcp_loadbalancer.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/tcp_loadbalancer/types.proto", fileDescriptor_af54a43838ffcca9)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/tcp_loadbalancer/types.proto", fileDescriptor_af54a43838ffcca9)
}

var fileDescriptor_af54a43838ffcca9 = []byte{
	// 2257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x9a, 0xcd, 0x6f, 0x1b, 0xc7,
	0xdd, 0xc7, 0x35, 0xe4, 0x8a, 0xa2, 0x46, 0x6f, 0xd4, 0xe8, 0xc5, 0x6b, 0xd9, 0x0f, 0x25, 0x33,
	0x79, 0x12, 0xc5, 0x58, 0x51, 0x22, 0x69, 0xd9, 0x89, 0x51, 0xa4, 0xf5, 0x2a, 0xb1, 0x65, 0x45,
	0x49, 0x94, 0x95, 0x2a, 0x03, 0x4e, 0x82, 0xc5, 0x6a, 0x39, 0xa2, 0xb6, 0x5e, 0xee, 0x6c, 0x76,
	0x86, 0xb2, 0x55, 0xc0, 0x80, 0xa1, 0xf6, 0xd0, 0x02, 0x05, 0x5a, 0xf8, 0x94, 0x63, 0x8f, 0x85,
	0xff, 0x83, 0x66, 0x73, 0x10, 0x0a, 0x04, 0x08, 0x8a, 0x1e, 0x78, 0x34, 0x7a, 0x8a, 0xe9, 0x8b,
	0xd3, 0xf6, 0x60, 0xf4, 0x54, 0xe8, 0xe2, 0x62, 0x66, 0x97, 0x14, 0x49, 0xad, 0x68, 0x23, 0x6d,
	0xd2, 0x37, 0xea, 0xb4, 0x3b, 0xf3, 0xfb, 0x7e, 0x7f, 0x33, 0xb3, 0xb3, 0x33, 0x9f, 0x59, 0x0a,
	0x2e, 0xec, 0x62, 0x9a, 0xb5, 0xc8, 0x3c, 0x35, 0x77, 0x70, 0xd9, 0x98, 0xdf, 0xb5, 0xf0, 0x6d,
	0x3a, 0xcf, 0x4c, 0x57, 0xb7, 0x89, 0x51, 0xdc, 0x32, 0x6c, 0xc3, 0x31, 0xb1, 0x37, 0xcf, 0xf6,
	0x5c, 0x4c, 0xb3, 0xae, 0x47, 0x18, 0x41, 0x2f, 0x07, 0x8a, 0x6c, 0xa0, 0xc8, 0x0a, 0x45, 0xb6,
	0x5d, 0x31, 0x35, 0x57, 0xb2, 0xd8, 0x4e, 0x65, 0x2b, 0x6b, 0x92, 0xf2, 0x7c, 0x89, 0x94, 0xc8,
	0xbc, 0x10, 0x6f, 0x55, 0xb6, 0xc5, 0x9d, 0xb8, 0x11, 0x57, 0x81, 0xe9, 0xd4, 0x74, 0x89, 0x90,
	0x92, 0x8d, 0x8f, 0xa2, 0x98, 0x55, 0xc6, 0x94, 0x19, 0x65, 0x37, 0x0c, 0x38, 0xd3, 0xda, 0x4e,
	0xe2, 0x32, 0x8b, 0x38, 0x61, 0x93, 0xa6, 0x4e, 0xb7, 0x56, 0x36, 0xb5, 0x76, 0xea, 0x6c, 0x5b,
	0xff, 0x0c, 0xdb, 0x2a, 0x1a, 0x0c, 0x87, 0xb5, 0x33, 0xc7, 0x7b, 0xaf, 0xb7, 0x5a, 0x4f, 0x47,
	0x8e, 0x4f, 0x53, 0x82, 0x57, 0xda, 0x03, 0x3c, 0x56, 0x31, 0x6c, 0x7d, 0x87, 0x50, 0xd6, 0x12,
	0xb7, 0x70, 0x72, 0x9c, 0x5e, 0x74, 0xa8, 0x6e, 0x39, 0xdb, 0x64, 0x9e, 0x6c, 0xfd, 0x08, 0x9b,
	0x2c, 0x50, 0x64, 0x9e, 0x01, 0x38, 0xb2, 0xe6, 0x91, 0x3b, 0x7b, 0x1b, 0x7b, 0x2e, 0xde, 0x58,
	0x5d, 0xdf, 0x58, 0x5a, 0x43, 0x1f, 0xc2, 0x61, 0x66, 0x53, 0xdd, 0x35, 0x3c, 0xa3, 0x8c, 0x19,
	0xf6, 0xa8, 0x0c, 0x66, 0xc0, 0xec, 0x40, 0x5e, 0xc9, 0x46, 0x3d, 0x95, 0xb7, 0xc8, 0x6d, 0x87,
	0x32, 0x0f, 0x1b, 0xe5, 0x0d, 0x9b, 0xae, 0x71, 0x0d, 0xe5, 0x5e, 0xaa, 0x54, 0xf5, 0x01, 0x58,
	0xee, 0xd1, 0x86, 0x58, 0x58, 0x2c, 0xac, 0xd0, 0xc7, 0x70, 0x84, 0x9b, 0x9b, 0xd8, 0x63, 0x41,
	0x06, 0x2a, 0xc7, 0x85, 0xfb, 0xdc, 0xf3, 0xdc, 0x57, 0xd7, 0x97, 0xb0, 0xc7, 0xc2, 0x14, 0x2d,
	0xf6, 0xbc, 0x3c, 0x2c, 0x3e, 0x0f, 0x4f, 0xd5, 0xed, 0xad, 0x6d, 0xcb, 0x34, 0x18, 0xa6, 0xba,
	0xb9, 0x43, 0x2c, 0x13, 0xa3, 0x91, 0x03, 0x1f, 0x80, 0xaa, 0x0f, 0x62, 0x35, 0x1f, 0xc4, 0x73,
	0x4a, 0x61, 0x45, 0x4a, 0xc6, 0x52, 0xf1, 0xcc, 0xaf, 0x63, 0x50, 0x6e, 0x1b, 0x81, 0x2b, 0x15,
	0x46, 0x44, 0x2e, 0xb4, 0x04, 0xa1, 0xb0, 0x23, 0xce, 0xb6, 0x55, 0x0a, 0x1b, 0x9a, 0x8e, 0x6c,
	0xe8, 0x86, 0x4d, 0x97, 0x44, 0x94, 0x2a, 0x3d, 0xf5, 0x01, 0xd0, 0xfa, 0x59, 0xbd, 0x00, 0x2d,
	0xc2, 0x3e, 0x87, 0xe8, 0x65, 0x66, 0x53, 0xb9, 0x57, 0x38, 0x8c, 0xb7, 0x39, 0xbc, 0x5d, 0x76,
	0xd9, 0x9e, 0x2a, 0x1d, 0x04, 0x3d, 0x4a, 0x38, 0xe4, 0x5d, 0x66, 0x53, 0xb4, 0x09, 0x93, 0x15,
	0x8a, 0x03, 0x5d, 0x42, 0xe8, 0x0a, 0xcf, 0x7f, 0x00, 0x9b, 0xc1, 0xdc, 0xb3, 0x88, 0xb3, 0x44,
	0x1c, 0x86, 0xef, 0xb0, 0x86, 0x6d, 0x5f, 0x85, 0x62, 0xee, 0x7b, 0x39, 0xf1, 0xd7, 0x37, 0xe3,
	0x05, 0xe5, 0x82, 0x9a, 0x81, 0x03, 0x65, 0xd1, 0xb9, 0x60, 0x78, 0xc6, 0x0e, 0x7c, 0xd0, 0xfb,
	0x65, 0x30, 0x44, 0x12, 0x1f, 0xa2, 0x45, 0xe5, 0xe2, 0x8a, 0x94, 0x94, 0x52, 0xbd, 0x99, 0x5f,
	0x02, 0x38, 0xba, 0x8e, 0xbd, 0x5d, 0xcb, 0xc4, 0x6b, 0xc4, 0xb6, 0xcc, 0xbd, 0x55, 0x8b, 0x32,
	0xf4, 0x63, 0x98, 0x74, 0xf9, 0x9d, 0x85, 0xf9, 0x04, 0x89, 0xcf, 0x0e, 0xe4, 0x33, 0x91, 0xed,
	0x7b, 0x5f, 0xcc, 0x37, 0x0d, 0x6f, 0x8b, 0x69, 0x71, 0xf9, 0xc1, 0xdd, 0x61, 0x1a, 0x78, 0xe9,
	0x42, 0xbe, 0xf7, 0xd9, 0xd7, 0x07, 0xf1, 0xde, 0xfb, 0x20, 0x96, 0x4a, 0xd5, 0xaf, 0x92, 0xa0,
	0x7e, 0x25, 0x83, 0xda, 0x57, 0x5f, 0xc4, 0x13, 0xf7, 0x3f, 0x07, 0xb1, 0x14, 0xd0, 0x1a, 0xf9,
	0x32, 0x9f, 0xc9, 0x70, 0xf8, 0x9a, 0x4d, 0xb6, 0x0c, 0x7b, 0xdd, 0xc5, 0x26, 0x37, 0x46, 0xdf,
	0x83, 0x7d, 0x45, 0x52, 0x36, 0x2c, 0x27, 0x68, 0x4d, 0xbf, 0x9a, 0xe1, 0x26, 0xfd, 0xf7, 0x41,
	0x22, 0x23, 0x79, 0xb1, 0x9d, 0x86, 0x65, 0x6a, 0xe6, 0xc8, 0x5c, 0xab, 0x4b, 0x50, 0x16, 0x0e,
	0xd8, 0x16, 0x65, 0xd8, 0xd1, 0x5d, 0xe2, 0x31, 0x39, 0x36, 0x03, 0x66, 0x87, 0xd4, 0x01, 0x1e,
	0x99, 0x38, 0x2f, 0xc9, 0xcf, 0x9e, 0xc5, 0x97, 0x7b, 0x34, 0x18, 0x44, 0xac, 0x11, 0x8f, 0xa1,
	0x15, 0x38, 0xc0, 0x03, 0x75, 0xcf, 0x70, 0x4a, 0x98, 0xca, 0x2f, 0xcd, 0x80, 0xd9, 0x7e, 0xf5,
	0x55, 0xe1, 0xec, 0xc5, 0xe5, 0x7b, 0x52, 0x78, 0x55, 0x95, 0x7e, 0xc0, 0xaf, 0x24, 0x2f, 0x96,
	0x02, 0x61, 0xd1, 0x43, 0x89, 0x3f, 0x0d, 0xc8, 0xd5, 0x9a, 0x10, 0xa3, 0x73, 0x30, 0x79, 0xdb,
	0x62, 0x3b, 0x3a, 0x75, 0x2c, 0x31, 0xc5, 0x92, 0x6a, 0xe2, 0x89, 0x0f, 0x00, 0x6f, 0x1e, 0x2f,
	0x5f, 0x77, 0x2c, 0x34, 0x07, 0x13, 0x0e, 0x11, 0x01, 0x53, 0x27, 0xcf, 0xa0, 0x65, 0xa0, 0xf5,
	0x3a, 0x84, 0x87, 0xcf, 0xc2, 0x38, 0x8f, 0x3d, 0xd3, 0x31, 0x96, 0x87, 0xa0, 0x77, 0xe0, 0x58,
	0x11, 0x6f, 0x1b, 0x15, 0x9b, 0xe9, 0xf6, 0x96, 0xde, 0x68, 0xc6, 0xd9, 0xe7, 0xce, 0x53, 0xa0,
	0xa5, 0x42, 0xe1, 0xea, 0xd6, 0x8d, 0xb0, 0x95, 0x0b, 0x70, 0x9c, 0xaf, 0x32, 0xbb, 0xc4, 0x66,
	0xd8, 0xf3, 0x0c, 0xbd, 0x6c, 0x38, 0x46, 0x09, 0x17, 0xe5, 0x01, 0xde, 0x29, 0x0d, 0x15, 0x1d,
	0xba, 0x19, 0x56, 0xbd, 0x1b, 0xd4, 0x20, 0x17, 0x0e, 0x12, 0xcf, 0x2a, 0x59, 0x7c, 0xd8, 0x89,
	0x4d, 0x65, 0xe9, 0x85, 0xe7, 0xd1, 0x6b, 0x0f, 0xee, 0x0e, 0x34, 0x49, 0x1f, 0xde, 0x05, 0x7c,
	0xcc, 0x8e, 0xcf, 0x25, 0x19, 0x68, 0x61, 0xdc, 0x1a, 0xcf, 0x80, 0x3e, 0x81, 0xe3, 0xcd, 0x19,
	0xf5, 0xdb, 0xd8, 0x2a, 0xed, 0x30, 0x2a, 0x43, 0x91, 0xf9, 0xb5, 0xe8, 0xcc, 0x0d, 0x3d, 0xef,
	0xe9, 0x0d, 0xa1, 0x50, 0xc7, 0x23, 0x73, 0xa1, 0xa6, 0x5c, 0x41, 0x20, 0x45, 0x57, 0x61, 0xaa,
	0x48, 0x74, 0x87, 0x30, 0xdd, 0x28, 0xee, 0xf2, 0x85, 0x89, 0x62, 0xb9, 0xef, 0xb9, 0x03, 0x1c,
	0xd3, 0x86, 0x8b, 0xe4, 0x3d, 0xc2, 0xae, 0xd4, 0x35, 0xe8, 0x23, 0x38, 0xdd, 0x30, 0xd0, 0x89,
	0xa3, 0xbb, 0x95, 0x2d, 0xdb, 0x32, 0xf5, 0xfa, 0xf3, 0xdb, 0xb5, 0x5c, 0x39, 0xd9, 0xe1, 0x89,
	0xc7, 0xb4, 0x33, 0x0d, 0xf9, 0xfb, 0xce, 0x9a, 0x10, 0xbf, 0x15, 0x68, 0x37, 0x2d, 0x17, 0x7d,
	0x04, 0xc7, 0x22, 0xdc, 0xc3, 0x15, 0xeb, 0xe5, 0xc8, 0x71, 0x69, 0x34, 0x2d, 0x30, 0x6b, 0x34,
	0x7c, 0xf4, 0x58, 0x1e, 0x74, 0x03, 0xa6, 0x8e, 0xdc, 0xcd, 0x0a, 0x65, 0xa4, 0x1c, 0x2e, 0x6a,
	0xcf, 0xb1, 0x5e, 0x12, 0xb1, 0xe1, 0x72, 0x1f, 0xd3, 0x46, 0x8c, 0xd6, 0x0a, 0x74, 0x13, 0xa6,
	0x77, 0x0c, 0xba, 0x13, 0xae, 0x25, 0xe1, 0x62, 0xa6, 0x7b, 0xa4, 0xe2, 0x14, 0x75, 0x8f, 0x6c,
	0x59, 0x8e, 0x3c, 0xd4, 0x61, 0x4c, 0xe2, 0xda, 0x14, 0x57, 0x07, 0xab, 0xda, 0x92, 0xd0, 0x6a,
	0x5c, 0xaa, 0x71, 0x25, 0x1f, 0xf0, 0x08, 0x6f, 0x1b, 0x1b, 0x94, 0xe9, 0x86, 0xc9, 0xac, 0x5d,
	0x2c, 0x0f, 0x77, 0x34, 0x3f, 0xd3, 0x6e, 0xbe, 0xca, 0xb5, 0x57, 0x84, 0x14, 0x7d, 0x00, 0x4f,
	0x47, 0xb5, 0xdc, 0x70, 0x8a, 0xa4, 0x2c, 0x8f, 0x74, 0xf4, 0x9d, 0x3c, 0xd6, 0x68, 0xa1, 0x42,
	0xb7, 0xe0, 0xab, 0x11, 0x96, 0x94, 0x54, 0x3c, 0x13, 0xeb, 0x96, 0xab, 0x53, 0x66, 0x99, 0xb7,
	0x2c, 0x07, 0x53, 0x2a, 0xa7, 0x3a, 0x26, 0xc8, 0xb4, 0x27, 0x58, 0x17, 0x1e, 0xd7, 0xdd, 0xf5,
	0x86, 0x03, 0xba, 0x06, 0x07, 0xad, 0xa2, 0x8d, 0x75, 0x4e, 0x51, 0xa4, 0xc2, 0xe4, 0x51, 0xb1,
	0x66, 0xbe, 0xcc, 0xe7, 0xc0, 0x1f, 0x7d, 0xd0, 0x57, 0xb8, 0xb8, 0xc0, 0xff, 0xfe, 0xe6, 0x83,
	0x9e, 0x9f, 0x7d, 0x0e, 0x7a, 0xf8, 0x3b, 0x92, 0x3c, 0x9f, 0x90, 0xef, 0xdd, 0xfb, 0xe2, 0xb7,
	0x23, 0xda, 0x00, 0x57, 0x6e, 0x04, 0x42, 0xf4, 0x7d, 0x38, 0xe2, 0x61, 0xe6, 0x19, 0x26, 0xd3,
	0x4d, 0xbb, 0x42, 0x19, 0xf6, 0xe4, 0xb1, 0x0e, 0xad, 0x93, 0xb4, 0xe1, 0x30, 0x7c, 0x29, 0x88,
	0x46, 0xef, 0xc0, 0xc9, 0xf0, 0x05, 0x6b, 0xf7, 0x19, 0xef, 0xe8, 0x33, 0x26, 0x5e, 0x30, 0xad,
	0xd5, 0x6c, 0x16, 0xc6, 0x99, 0xe9, 0xca, 0x93, 0x1d, 0x94, 0xbd, 0x1a, 0x0f, 0x41, 0xb7, 0xe0,
	0x28, 0xdf, 0x3f, 0x39, 0x96, 0x1a, 0x15, 0x46, 0x04, 0x74, 0xc8, 0xa7, 0x84, 0xee, 0xcd, 0xec,
	0x8b, 0x00, 0x6c, 0xf6, 0x24, 0xee, 0x58, 0xee, 0xd5, 0x38, 0x82, 0x6d, 0x98, 0x6e, 0xbd, 0x08,
	0xad, 0xc1, 0xbe, 0x30, 0x99, 0x2c, 0x8b, 0x14, 0x8b, 0xdf, 0x28, 0xc5, 0x72, 0xaf, 0x96, 0x08,
	0x9c, 0xd1, 0xc7, 0x70, 0xba, 0x65, 0x23, 0xb6, 0x30, 0xd5, 0xb7, 0x3d, 0x52, 0xd6, 0x1d, 0xa3,
	0x8c, 0xa9, 0x6b, 0x98, 0x58, 0x9e, 0xee, 0x30, 0x08, 0x09, 0xed, 0x2c, 0x6d, 0x62, 0x02, 0x0b,
	0xd3, 0xab, 0x1e, 0x29, 0xbf, 0x57, 0xd7, 0xa2, 0xab, 0x70, 0x8c, 0x6f, 0x59, 0x6d, 0x19, 0xe4,
	0x99, 0x8e, 0x96, 0xa3, 0x0e, 0x59, 0x6f, 0x35, 0x45, 0xb7, 0xe1, 0xa9, 0xe0, 0x5d, 0x3b, 0xee,
	0x75, 0x4e, 0x78, 0x5d, 0x7a, 0xb1, 0x81, 0x38, 0x06, 0x30, 0xe1, 0x9a, 0x92, 0xd0, 0x26, 0x02,
	0xff, 0xf6, 0xc4, 0x37, 0xe1, 0x90, 0x60, 0x75, 0xcb, 0x61, 0xd8, 0x73, 0x0c, 0x5b, 0x7e, 0x12,
	0x2c, 0xda, 0x2f, 0xb2, 0x3b, 0xa5, 0x1e, 0xdc, 0x6d, 0x15, 0x6b, 0x83, 0xfc, 0xf6, 0x7a, 0x78,
	0x87, 0xce, 0xc2, 0x7e, 0x01, 0xe5, 0x7c, 0xa8, 0xe5, 0xaf, 0xb9, 0x6f, 0xbf, 0x96, 0xe4, 0x25,
	0x7c, 0xfc, 0xd0, 0x32, 0x4c, 0xd6, 0x69, 0x5d, 0xfe, 0x53, 0x9f, 0xd8, 0x98, 0x8e, 0xb3, 0x77,
	0x04, 0xda, 0x67, 0xdf, 0x72, 0xe8, 0x75, 0x67, 0x9b, 0x68, 0x7d, 0xc5, 0xe0, 0x02, 0xad, 0xc3,
	0xe1, 0xc6, 0xd4, 0x0c, 0xfc, 0xfe, 0xdc, 0x77, 0x02, 0xcb, 0x1f, 0xf9, 0x65, 0xeb, 0x93, 0x8e,
	0x5b, 0xf0, 0xee, 0x68, 0x83, 0x46, 0x53, 0x09, 0xfa, 0x05, 0x80, 0x0b, 0xc5, 0x06, 0x74, 0xea,
	0x6d, 0xbc, 0xad, 0xe3, 0x3b, 0xae, 0xe5, 0x09, 0x04, 0xd5, 0x1b, 0x07, 0x2c, 0x2a, 0xff, 0x25,
	0xe8, 0xc7, 0x54, 0x36, 0x38, 0x84, 0x65, 0xeb, 0x87, 0xb0, 0xec, 0x46, 0x3d, 0x46, 0xed, 0x0b,
	0x37, 0x71, 0x4d, 0x29, 0x36, 0x23, 0xed, 0xd2, 0x91, 0xf7, 0xdb, 0x0d, 0xeb, 0x86, 0x8a, 0xa2,
	0x0f, 0xe0, 0x68, 0x30, 0xca, 0x58, 0xec, 0x81, 0x41, 0x37, 0xff, 0x90, 0x14, 0xe9, 0xa2, 0x37,
	0x97, 0xeb, 0x61, 0xf8, 0xe6, 0xf5, 0x35, 0x31, 0x5c, 0x23, 0x75, 0xfd, 0xa6, 0xe5, 0xf2, 0x82,
	0xcb, 0x3f, 0x07, 0xbf, 0xf3, 0xc1, 0x4f, 0x01, 0x7c, 0x05, 0x8e, 0xa9, 0x06, 0xb5, 0xcc, 0x99,
	0x80, 0xe4, 0x2b, 0x41, 0x6e, 0x34, 0x92, 0x53, 0x0a, 0x17, 0x94, 0xfc, 0xa2, 0x92, 0xcb, 0x29,
	0xb9, 0x05, 0xe5, 0x0d, 0x38, 0x0d, 0x27, 0x57, 0x89, 0x51, 0x9c, 0x51, 0xc5, 0x64, 0xb3, 0x9c,
	0x12, 0x17, 0x30, 0x8f, 0xd8, 0xa8, 0x37, 0x9f, 0x53, 0x72, 0x79, 0x28, 0xc3, 0x54, 0x38, 0xbd,
	0x66, 0x1a, 0xf3, 0x2b, 0x56, 0x58, 0x98, 0x05, 0x5c, 0x7a, 0xa5, 0xb8, 0xcb, 0xa7, 0x68, 0xb1,
	0x2d, 0x4b, 0x6f, 0xee, 0x92, 0x92, 0x7b, 0x5d, 0x9d, 0x0e, 0x49, 0x33, 0xc4, 0xf4, 0xd4, 0x81,
	0x0f, 0x62, 0x55, 0x1f, 0x64, 0x6a, 0x3e, 0x90, 0xf2, 0x4a, 0x61, 0x51, 0x9d, 0x83, 0x13, 0xd4,
	0xb1, 0xf4, 0x26, 0x8c, 0x0b, 0x43, 0xc7, 0x0f, 0x7c, 0x30, 0x55, 0xf5, 0xc1, 0xe9, 0x9a, 0x0f,
	0x92, 0xf9, 0x8b, 0x4a, 0xfe, 0x92, 0x92, 0x7f, 0x5d, 0x7d, 0xb5, 0x65, 0x27, 0x3e, 0x62, 0xff,
	0x64, 0xd5, 0x07, 0xfd, 0x35, 0x1f, 0xf4, 0xbd, 0xae, 0x2c, 0x2a, 0x97, 0x94, 0x8b, 0xea, 0x1c,
	0x44, 0xc7, 0x37, 0x13, 0x74, 0xea, 0xc0, 0x07, 0x43, 0x55, 0x1f, 0x0c, 0xd6, 0x7c, 0x30, 0x90,
	0x2b, 0x28, 0xb9, 0x0b, 0x4a, 0x6e, 0x51, 0xc9, 0x5d, 0x54, 0x17, 0xe0, 0x64, 0xb8, 0xea, 0x1e,
	0xad, 0xc2, 0x81, 0x64, 0xf2, 0xc0, 0x07, 0x63, 0xe1, 0xc9, 0x02, 0xd5, 0x7c, 0x90, 0xc8, 0xbd,
	0xa1, 0xcc, 0xe4, 0x17, 0xd4, 0xff, 0x83, 0xa3, 0xcd, 0x6f, 0xa8, 0xce, 0x4f, 0xb2, 0x28, 0x79,
	0xe0, 0x83, 0xc9, 0xaa, 0x0f, 0x26, 0x44, 0xbf, 0x5a, 0x0e, 0x0a, 0xcd, 0xfd, 0x9a, 0xae, 0xfa,
	0x20, 0xcd, 0xfb, 0x55, 0xc8, 0x29, 0x85, 0xbc, 0x52, 0xe0, 0xa7, 0xb9, 0x4c, 0xea, 0xa5, 0x15,
	0x29, 0x79, 0x3a, 0x35, 0xb5, 0x22, 0x25, 0xfb, 0x53, 0x70, 0x45, 0x4a, 0x0e, 0xa6, 0x86, 0x56,
	0xa4, 0x24, 0x4a, 0x8d, 0xad, 0x48, 0xc9, 0x89, 0xd4, 0xe4, 0x8a, 0x94, 0x4c, 0xa7, 0xa6, 0x33,
	0x07, 0xa3, 0x70, 0x78, 0xc9, 0xc3, 0x06, 0xc3, 0x8d, 0xc3, 0x83, 0xdc, 0x76, 0x78, 0x38, 0x3a,
	0x18, 0x9c, 0x8b, 0x38, 0x18, 0xb4, 0x9d, 0x05, 0xce, 0x45, 0x9c, 0x05, 0xda, 0x10, 0xff, 0xbf,
	0x95, 0xdf, 0x3f, 0xfc, 0x27, 0xd1, 0x74, 0x97, 0x9b, 0xbb, 0xdc, 0xfc, 0xbf, 0xc2, 0xcd, 0xe7,
	0xa2, 0xb8, 0xb9, 0x4b, 0xc4, 0x5d, 0x22, 0x7e, 0x51, 0x22, 0xfe, 0xe4, 0xdb, 0x22, 0xe2, 0x13,
	0x59, 0xf8, 0xf2, 0xe8, 0xef, 0xdf, 0x6c, 0xfb, 0xde, 0xa6, 0xa6, 0x5b, 0xb9, 0x64, 0x64, 0xff,
	0x10, 0x34, 0x17, 0xa8, 0xf9, 0x93, 0xb0, 0xe4, 0xf4, 0xfe, 0x21, 0x88, 0xae, 0x52, 0xdf, 0x88,
	0x60, 0x93, 0xff, 0x6f, 0x62, 0x93, 0x5e, 0x41, 0x26, 0xfb, 0x87, 0xe0, 0x58, 0x98, 0xaa, 0x44,
	0xd2, 0xca, 0xe4, 0xfe, 0x21, 0x88, 0x28, 0x57, 0x2f, 0x9c, 0x08, 0x2b, 0x53, 0xfb, 0x87, 0xe0,
	0x84, 0x3a, 0xf5, 0x7c, 0x14, 0xb0, 0x4c, 0xec, 0x1f, 0x82, 0xe3, 0xc5, 0xa2, 0xfb, 0x91, 0xf4,
	0x12, 0x74, 0x3f, 0xaa, 0xaa, 0x81, 0x30, 0xf1, 0x94, 0xd4, 0x19, 0x64, 0x32, 0x9f, 0x22, 0x38,
	0xa2, 0x61, 0xd7, 0x36, 0xcc, 0x2e, 0xc3, 0xfc, 0xa3, 0x0c, 0xf3, 0xc3, 0x6f, 0xfc, 0x0d, 0x72,
	0xb8, 0xf5, 0x1b, 0x64, 0xeb, 0x87, 0xc6, 0x2e, 0x1a, 0x75, 0xd1, 0xa8, 0x8b, 0x46, 0x5d, 0x34,
	0xea, 0xa2, 0x51, 0x17, 0x8d, 0xba, 0x68, 0xf4, 0xdd, 0xa1, 0xd1, 0x83, 0x09, 0x38, 0x70, 0x0d,
	0xb3, 0x2e, 0x16, 0x75, 0xb1, 0xa8, 0x8b, 0x45, 0x5d, 0x2c, 0xea, 0x62, 0x51, 0x17, 0x8b, 0xba,
	0x58, 0xf4, 0x9d, 0x63, 0xd1, 0x7f, 0xf6, 0x2f, 0x9c, 0x3f, 0xf9, 0x76, 0x7e, 0xe1, 0xfc, 0xd7,
	0xff, 0xb0, 0xd9, 0x85, 0xd5, 0x7f, 0x2b, 0x58, 0x55, 0x3f, 0x05, 0xd5, 0x47, 0xe9, 0x9e, 0x87,
	0x8f, 0xd2, 0x3d, 0x4f, 0x1f, 0xa5, 0xc1, 0xbd, 0x5a, 0x1a, 0xfc, 0xa6, 0x96, 0x06, 0x5f, 0xd6,
	0xd2, 0xa0, 0x5a, 0x4b, 0x83, 0x87, 0xb5, 0x34, 0xf8, 0xaa, 0x96, 0x06, 0x4f, 0x6a, 0xe9, 0x9e,
	0xa7, 0xb5, 0x34, 0xf8, 0xd5, 0xe3, 0x74, 0xcf, 0xc1, 0xe3, 0x34, 0xa8, 0x3e, 0x4e, 0xf7, 0x3c,
	0x7c, 0x9c, 0xee, 0xb9, 0x79, 0xb3, 0x44, 0xdc, 0x5b, 0xa5, 0x6c, 0x9d, 0xea, 0xb2, 0x15, 0x3a,
	0x2f, 0x2e, 0xb6, 0x89, 0x57, 0x9e, 0x73, 0x3d, 0xb2, 0x6b, 0x15, 0xb1, 0x37, 0x57, 0xaf, 0x9e,
	0x77, 0xb7, 0x4a, 0x64, 0x1e, 0xdf, 0x61, 0xe1, 0xbf, 0x07, 0x77, 0xfc, 0x77, 0xec, 0xad, 0x84,
	0x98, 0xbf, 0x85, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x7e, 0xa9, 0x56, 0xbd, 0x2d, 0x00,
	0x00,
}

func (this *ProxyTypeTLSTCP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeTLSTCP)
	if !ok {
		that2, ok := that.(ProxyTypeTLSTCP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.TlsCertificatesChoice == nil {
		if this.TlsCertificatesChoice != nil {
			return false
		}
	} else if this.TlsCertificatesChoice == nil {
		return false
	} else if !this.TlsCertificatesChoice.Equal(that1.TlsCertificatesChoice) {
		return false
	}
	return true
}
func (this *ProxyTypeTLSTCP_TlsParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeTLSTCP_TlsParameters)
	if !ok {
		that2, ok := that.(ProxyTypeTLSTCP_TlsParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	return true
}
func (this *ProxyTypeTLSTCP_TlsCertParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeTLSTCP_TlsCertParams)
	if !ok {
		that2, ok := that.(ProxyTypeTLSTCP_TlsCertParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsCertParams.Equal(that1.TlsCertParams) {
		return false
	}
	return true
}
func (this *ProxyTypeTLSTCPAutoCerts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeTLSTCPAutoCerts)
	if !ok {
		that2, ok := that.(ProxyTypeTLSTCPAutoCerts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsConfig.Equal(that1.TlsConfig) {
		return false
	}
	if that1.MtlsChoice == nil {
		if this.MtlsChoice != nil {
			return false
		}
	} else if this.MtlsChoice == nil {
		return false
	} else if !this.MtlsChoice.Equal(that1.MtlsChoice) {
		return false
	}
	return true
}
func (this *ProxyTypeTLSTCPAutoCerts_NoMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeTLSTCPAutoCerts_NoMtls)
	if !ok {
		that2, ok := that.(ProxyTypeTLSTCPAutoCerts_NoMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoMtls.Equal(that1.NoMtls) {
		return false
	}
	return true
}
func (this *ProxyTypeTLSTCPAutoCerts_UseMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeTLSTCPAutoCerts_UseMtls)
	if !ok {
		that2, ok := that.(ProxyTypeTLSTCPAutoCerts_UseMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseMtls.Equal(that1.UseMtls) {
		return false
	}
	return true
}
func (this *ServicePolicyList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicePolicyList)
	if !ok {
		that2, ok := that.(ServicePolicyList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Policies) != len(that1.Policies) {
		return false
	}
	for i := range this.Policies {
		if !this.Policies[i].Equal(that1.Policies[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	if this.WithSni != that1.WithSni {
		return false
	}
	if that1.SniDefaultLbChoice == nil {
		if this.SniDefaultLbChoice != nil {
			return false
		}
	} else if this.SniDefaultLbChoice == nil {
		return false
	} else if !this.SniDefaultLbChoice.Equal(that1.SniDefaultLbChoice) {
		return false
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	if len(this.OriginPools) != len(that1.OriginPools) {
		return false
	}
	for i := range this.OriginPools {
		if !this.OriginPools[i].Equal(that1.OriginPools[i]) {
			return false
		}
	}
	if len(this.OriginPoolsWeights) != len(that1.OriginPoolsWeights) {
		return false
	}
	for i := range this.OriginPoolsWeights {
		if !this.OriginPoolsWeights[i].Equal(that1.OriginPoolsWeights[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if that1.ClusterRetractChoice == nil {
		if this.ClusterRetractChoice != nil {
			return false
		}
	} else if this.ClusterRetractChoice == nil {
		return false
	} else if !this.ClusterRetractChoice.Equal(that1.ClusterRetractChoice) {
		return false
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if !this.AutoCertInfo.Equal(that1.AutoCertInfo) {
		return false
	}
	if len(this.DownstreamTlsCertificateExpirationTimestamps) != len(that1.DownstreamTlsCertificateExpirationTimestamps) {
		return false
	}
	for i := range this.DownstreamTlsCertificateExpirationTimestamps {
		if !this.DownstreamTlsCertificateExpirationTimestamps[i].Equal(that1.DownstreamTlsCertificateExpirationTimestamps[i]) {
			return false
		}
	}
	if len(this.InternetVipInfo) != len(that1.InternetVipInfo) {
		return false
	}
	for i := range this.InternetVipInfo {
		if !this.InternetVipInfo[i].Equal(that1.InternetVipInfo[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType_ListenPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ListenPort)
	if !ok {
		that2, ok := that.(GlobalSpecType_ListenPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ListenPort != that1.ListenPort {
		return false
	}
	return true
}
func (this *GlobalSpecType_PortRanges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PortRanges)
	if !ok {
		that2, ok := that.(GlobalSpecType_PortRanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRanges != that1.PortRanges {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoSni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoSni)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoSni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoSni.Equal(that1.NoSni) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Sni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Sni)
	if !ok {
		that2, ok := that.(GlobalSpecType_Sni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sni.Equal(that1.Sni) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultLbWithSni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultLbWithSni)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultLbWithSni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultLbWithSni.Equal(that1.DefaultLbWithSni) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(GlobalSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HashPolicyChoiceRoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HashPolicyChoiceRoundRobin)
	if !ok {
		that2, ok := that.(GlobalSpecType_HashPolicyChoiceRoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRoundRobin.Equal(that1.HashPolicyChoiceRoundRobin) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HashPolicyChoiceLeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HashPolicyChoiceLeastActive)
	if !ok {
		that2, ok := that.(GlobalSpecType_HashPolicyChoiceLeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceLeastActive.Equal(that1.HashPolicyChoiceLeastActive) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HashPolicyChoiceRandom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HashPolicyChoiceRandom)
	if !ok {
		that2, ok := that.(GlobalSpecType_HashPolicyChoiceRandom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRandom.Equal(that1.HashPolicyChoiceRandom) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HashPolicyChoiceSourceIpStickiness)
	if !ok {
		that2, ok := that.(GlobalSpecType_HashPolicyChoiceSourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceSourceIpStickiness.Equal(that1.HashPolicyChoiceSourceIpStickiness) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RetractCluster)
	if !ok {
		that2, ok := that.(GlobalSpecType_RetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetractCluster.Equal(that1.RetractCluster) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DoNotRetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DoNotRetractCluster)
	if !ok {
		that2, ok := that.(GlobalSpecType_DoNotRetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotRetractCluster.Equal(that1.DoNotRetractCluster) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Tcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Tcp)
	if !ok {
		that2, ok := that.(GlobalSpecType_Tcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tcp.Equal(that1.Tcp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_TlsTcpAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_TlsTcpAutoCert)
	if !ok {
		that2, ok := that.(GlobalSpecType_TlsTcpAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsTcpAutoCert.Equal(that1.TlsTcpAutoCert) {
		return false
	}
	return true
}
func (this *GlobalSpecType_TlsTcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_TlsTcp)
	if !ok {
		that2, ok := that.(GlobalSpecType_TlsTcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsTcp.Equal(that1.TlsTcp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(GlobalSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(GlobalSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	if that1.SniDefaultLbChoice == nil {
		if this.SniDefaultLbChoice != nil {
			return false
		}
	} else if this.SniDefaultLbChoice == nil {
		return false
	} else if !this.SniDefaultLbChoice.Equal(that1.SniDefaultLbChoice) {
		return false
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	if len(this.OriginPoolsWeights) != len(that1.OriginPoolsWeights) {
		return false
	}
	for i := range this.OriginPoolsWeights {
		if !this.OriginPoolsWeights[i].Equal(that1.OriginPoolsWeights[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if that1.ClusterRetractChoice == nil {
		if this.ClusterRetractChoice != nil {
			return false
		}
	} else if this.ClusterRetractChoice == nil {
		return false
	} else if !this.ClusterRetractChoice.Equal(that1.ClusterRetractChoice) {
		return false
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_ListenPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ListenPort)
	if !ok {
		that2, ok := that.(CreateSpecType_ListenPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ListenPort != that1.ListenPort {
		return false
	}
	return true
}
func (this *CreateSpecType_PortRanges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_PortRanges)
	if !ok {
		that2, ok := that.(CreateSpecType_PortRanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRanges != that1.PortRanges {
		return false
	}
	return true
}
func (this *CreateSpecType_NoSni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoSni)
	if !ok {
		that2, ok := that.(CreateSpecType_NoSni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoSni.Equal(that1.NoSni) {
		return false
	}
	return true
}
func (this *CreateSpecType_Sni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Sni)
	if !ok {
		that2, ok := that.(CreateSpecType_Sni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sni.Equal(that1.Sni) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultLbWithSni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultLbWithSni)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultLbWithSni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultLbWithSni.Equal(that1.DefaultLbWithSni) {
		return false
	}
	return true
}
func (this *CreateSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(CreateSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *CreateSpecType_HashPolicyChoiceRoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HashPolicyChoiceRoundRobin)
	if !ok {
		that2, ok := that.(CreateSpecType_HashPolicyChoiceRoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRoundRobin.Equal(that1.HashPolicyChoiceRoundRobin) {
		return false
	}
	return true
}
func (this *CreateSpecType_HashPolicyChoiceLeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HashPolicyChoiceLeastActive)
	if !ok {
		that2, ok := that.(CreateSpecType_HashPolicyChoiceLeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceLeastActive.Equal(that1.HashPolicyChoiceLeastActive) {
		return false
	}
	return true
}
func (this *CreateSpecType_HashPolicyChoiceRandom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HashPolicyChoiceRandom)
	if !ok {
		that2, ok := that.(CreateSpecType_HashPolicyChoiceRandom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRandom.Equal(that1.HashPolicyChoiceRandom) {
		return false
	}
	return true
}
func (this *CreateSpecType_HashPolicyChoiceSourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HashPolicyChoiceSourceIpStickiness)
	if !ok {
		that2, ok := that.(CreateSpecType_HashPolicyChoiceSourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceSourceIpStickiness.Equal(that1.HashPolicyChoiceSourceIpStickiness) {
		return false
	}
	return true
}
func (this *CreateSpecType_RetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RetractCluster)
	if !ok {
		that2, ok := that.(CreateSpecType_RetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetractCluster.Equal(that1.RetractCluster) {
		return false
	}
	return true
}
func (this *CreateSpecType_DoNotRetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DoNotRetractCluster)
	if !ok {
		that2, ok := that.(CreateSpecType_DoNotRetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotRetractCluster.Equal(that1.DoNotRetractCluster) {
		return false
	}
	return true
}
func (this *CreateSpecType_Tcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Tcp)
	if !ok {
		that2, ok := that.(CreateSpecType_Tcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tcp.Equal(that1.Tcp) {
		return false
	}
	return true
}
func (this *CreateSpecType_TlsTcpAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_TlsTcpAutoCert)
	if !ok {
		that2, ok := that.(CreateSpecType_TlsTcpAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsTcpAutoCert.Equal(that1.TlsTcpAutoCert) {
		return false
	}
	return true
}
func (this *CreateSpecType_TlsTcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_TlsTcp)
	if !ok {
		that2, ok := that.(CreateSpecType_TlsTcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsTcp.Equal(that1.TlsTcp) {
		return false
	}
	return true
}
func (this *CreateSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(CreateSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(CreateSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *CreateSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(CreateSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	if that1.SniDefaultLbChoice == nil {
		if this.SniDefaultLbChoice != nil {
			return false
		}
	} else if this.SniDefaultLbChoice == nil {
		return false
	} else if !this.SniDefaultLbChoice.Equal(that1.SniDefaultLbChoice) {
		return false
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	if len(this.OriginPools) != len(that1.OriginPools) {
		return false
	}
	for i := range this.OriginPools {
		if !this.OriginPools[i].Equal(that1.OriginPools[i]) {
			return false
		}
	}
	if len(this.OriginPoolsWeights) != len(that1.OriginPoolsWeights) {
		return false
	}
	for i := range this.OriginPoolsWeights {
		if !this.OriginPoolsWeights[i].Equal(that1.OriginPoolsWeights[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if that1.ClusterRetractChoice == nil {
		if this.ClusterRetractChoice != nil {
			return false
		}
	} else if this.ClusterRetractChoice == nil {
		return false
	} else if !this.ClusterRetractChoice.Equal(that1.ClusterRetractChoice) {
		return false
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ListenPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ListenPort)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ListenPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ListenPort != that1.ListenPort {
		return false
	}
	return true
}
func (this *ReplaceSpecType_PortRanges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_PortRanges)
	if !ok {
		that2, ok := that.(ReplaceSpecType_PortRanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRanges != that1.PortRanges {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoSni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoSni)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoSni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoSni.Equal(that1.NoSni) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Sni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Sni)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Sni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sni.Equal(that1.Sni) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultLbWithSni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultLbWithSni)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultLbWithSni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultLbWithSni.Equal(that1.DefaultLbWithSni) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HashPolicyChoiceRoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HashPolicyChoiceRoundRobin)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HashPolicyChoiceRoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRoundRobin.Equal(that1.HashPolicyChoiceRoundRobin) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HashPolicyChoiceLeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HashPolicyChoiceLeastActive)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HashPolicyChoiceLeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceLeastActive.Equal(that1.HashPolicyChoiceLeastActive) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HashPolicyChoiceRandom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HashPolicyChoiceRandom)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HashPolicyChoiceRandom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRandom.Equal(that1.HashPolicyChoiceRandom) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HashPolicyChoiceSourceIpStickiness)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HashPolicyChoiceSourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceSourceIpStickiness.Equal(that1.HashPolicyChoiceSourceIpStickiness) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RetractCluster)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetractCluster.Equal(that1.RetractCluster) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DoNotRetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DoNotRetractCluster)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DoNotRetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotRetractCluster.Equal(that1.DoNotRetractCluster) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Tcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Tcp)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Tcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tcp.Equal(that1.Tcp) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_TlsTcpAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_TlsTcpAutoCert)
	if !ok {
		that2, ok := that.(ReplaceSpecType_TlsTcpAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsTcpAutoCert.Equal(that1.TlsTcpAutoCert) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_TlsTcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_TlsTcp)
	if !ok {
		that2, ok := that.(ReplaceSpecType_TlsTcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsTcp.Equal(that1.TlsTcp) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	if that1.SniDefaultLbChoice == nil {
		if this.SniDefaultLbChoice != nil {
			return false
		}
	} else if this.SniDefaultLbChoice == nil {
		return false
	} else if !this.SniDefaultLbChoice.Equal(that1.SniDefaultLbChoice) {
		return false
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	if len(this.OriginPools) != len(that1.OriginPools) {
		return false
	}
	for i := range this.OriginPools {
		if !this.OriginPools[i].Equal(that1.OriginPools[i]) {
			return false
		}
	}
	if len(this.OriginPoolsWeights) != len(that1.OriginPoolsWeights) {
		return false
	}
	for i := range this.OriginPoolsWeights {
		if !this.OriginPoolsWeights[i].Equal(that1.OriginPoolsWeights[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if that1.ClusterRetractChoice == nil {
		if this.ClusterRetractChoice != nil {
			return false
		}
	} else if this.ClusterRetractChoice == nil {
		return false
	} else if !this.ClusterRetractChoice.Equal(that1.ClusterRetractChoice) {
		return false
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if !this.AutoCertInfo.Equal(that1.AutoCertInfo) {
		return false
	}
	if len(this.DownstreamTlsCertificateExpirationTimestamps) != len(that1.DownstreamTlsCertificateExpirationTimestamps) {
		return false
	}
	for i := range this.DownstreamTlsCertificateExpirationTimestamps {
		if !this.DownstreamTlsCertificateExpirationTimestamps[i].Equal(that1.DownstreamTlsCertificateExpirationTimestamps[i]) {
			return false
		}
	}
	if len(this.InternetVipInfo) != len(that1.InternetVipInfo) {
		return false
	}
	for i := range this.InternetVipInfo {
		if !this.InternetVipInfo[i].Equal(that1.InternetVipInfo[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType_ListenPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ListenPort)
	if !ok {
		that2, ok := that.(GetSpecType_ListenPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ListenPort != that1.ListenPort {
		return false
	}
	return true
}
func (this *GetSpecType_PortRanges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_PortRanges)
	if !ok {
		that2, ok := that.(GetSpecType_PortRanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRanges != that1.PortRanges {
		return false
	}
	return true
}
func (this *GetSpecType_NoSni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoSni)
	if !ok {
		that2, ok := that.(GetSpecType_NoSni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoSni.Equal(that1.NoSni) {
		return false
	}
	return true
}
func (this *GetSpecType_Sni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Sni)
	if !ok {
		that2, ok := that.(GetSpecType_Sni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sni.Equal(that1.Sni) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultLbWithSni) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultLbWithSni)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultLbWithSni)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultLbWithSni.Equal(that1.DefaultLbWithSni) {
		return false
	}
	return true
}
func (this *GetSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(GetSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *GetSpecType_HashPolicyChoiceRoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HashPolicyChoiceRoundRobin)
	if !ok {
		that2, ok := that.(GetSpecType_HashPolicyChoiceRoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRoundRobin.Equal(that1.HashPolicyChoiceRoundRobin) {
		return false
	}
	return true
}
func (this *GetSpecType_HashPolicyChoiceLeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HashPolicyChoiceLeastActive)
	if !ok {
		that2, ok := that.(GetSpecType_HashPolicyChoiceLeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceLeastActive.Equal(that1.HashPolicyChoiceLeastActive) {
		return false
	}
	return true
}
func (this *GetSpecType_HashPolicyChoiceRandom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HashPolicyChoiceRandom)
	if !ok {
		that2, ok := that.(GetSpecType_HashPolicyChoiceRandom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRandom.Equal(that1.HashPolicyChoiceRandom) {
		return false
	}
	return true
}
func (this *GetSpecType_HashPolicyChoiceSourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HashPolicyChoiceSourceIpStickiness)
	if !ok {
		that2, ok := that.(GetSpecType_HashPolicyChoiceSourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceSourceIpStickiness.Equal(that1.HashPolicyChoiceSourceIpStickiness) {
		return false
	}
	return true
}
func (this *GetSpecType_RetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RetractCluster)
	if !ok {
		that2, ok := that.(GetSpecType_RetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetractCluster.Equal(that1.RetractCluster) {
		return false
	}
	return true
}
func (this *GetSpecType_DoNotRetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DoNotRetractCluster)
	if !ok {
		that2, ok := that.(GetSpecType_DoNotRetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotRetractCluster.Equal(that1.DoNotRetractCluster) {
		return false
	}
	return true
}
func (this *GetSpecType_Tcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Tcp)
	if !ok {
		that2, ok := that.(GetSpecType_Tcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tcp.Equal(that1.Tcp) {
		return false
	}
	return true
}
func (this *GetSpecType_TlsTcpAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_TlsTcpAutoCert)
	if !ok {
		that2, ok := that.(GetSpecType_TlsTcpAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsTcpAutoCert.Equal(that1.TlsTcpAutoCert) {
		return false
	}
	return true
}
func (this *GetSpecType_TlsTcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_TlsTcp)
	if !ok {
		that2, ok := that.(GetSpecType_TlsTcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsTcp.Equal(that1.TlsTcp) {
		return false
	}
	return true
}
func (this *GetSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(GetSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *GetSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(GetSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *GetSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(GetSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *ProxyTypeTLSTCP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tcp_loadbalancer.ProxyTypeTLSTCP{")
	if this.TlsCertificatesChoice != nil {
		s = append(s, "TlsCertificatesChoice: "+fmt.Sprintf("%#v", this.TlsCertificatesChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyTypeTLSTCP_TlsParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ProxyTypeTLSTCP_TlsParameters{` +
		`TlsParameters:` + fmt.Sprintf("%#v", this.TlsParameters) + `}`}, ", ")
	return s
}
func (this *ProxyTypeTLSTCP_TlsCertParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ProxyTypeTLSTCP_TlsCertParams{` +
		`TlsCertParams:` + fmt.Sprintf("%#v", this.TlsCertParams) + `}`}, ", ")
	return s
}
func (this *ProxyTypeTLSTCPAutoCerts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tcp_loadbalancer.ProxyTypeTLSTCPAutoCerts{")
	if this.TlsConfig != nil {
		s = append(s, "TlsConfig: "+fmt.Sprintf("%#v", this.TlsConfig)+",\n")
	}
	if this.MtlsChoice != nil {
		s = append(s, "MtlsChoice: "+fmt.Sprintf("%#v", this.MtlsChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyTypeTLSTCPAutoCerts_NoMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ProxyTypeTLSTCPAutoCerts_NoMtls{` +
		`NoMtls:` + fmt.Sprintf("%#v", this.NoMtls) + `}`}, ", ")
	return s
}
func (this *ProxyTypeTLSTCPAutoCerts_UseMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ProxyTypeTLSTCPAutoCerts_UseMtls{` +
		`UseMtls:` + fmt.Sprintf("%#v", this.UseMtls) + `}`}, ", ")
	return s
}
func (this *ServicePolicyList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tcp_loadbalancer.ServicePolicyList{")
	if this.Policies != nil {
		s = append(s, "Policies: "+fmt.Sprintf("%#v", this.Policies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 37)
	s = append(s, "&tcp_loadbalancer.GlobalSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	s = append(s, "WithSni: "+fmt.Sprintf("%#v", this.WithSni)+",\n")
	if this.SniDefaultLbChoice != nil {
		s = append(s, "SniDefaultLbChoice: "+fmt.Sprintf("%#v", this.SniDefaultLbChoice)+",\n")
	}
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	if this.OriginPools != nil {
		s = append(s, "OriginPools: "+fmt.Sprintf("%#v", this.OriginPools)+",\n")
	}
	if this.OriginPoolsWeights != nil {
		s = append(s, "OriginPoolsWeights: "+fmt.Sprintf("%#v", this.OriginPoolsWeights)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	if this.ClusterRetractChoice != nil {
		s = append(s, "ClusterRetractChoice: "+fmt.Sprintf("%#v", this.ClusterRetractChoice)+",\n")
	}
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	if this.AutoCertInfo != nil {
		s = append(s, "AutoCertInfo: "+fmt.Sprintf("%#v", this.AutoCertInfo)+",\n")
	}
	if this.DownstreamTlsCertificateExpirationTimestamps != nil {
		s = append(s, "DownstreamTlsCertificateExpirationTimestamps: "+fmt.Sprintf("%#v", this.DownstreamTlsCertificateExpirationTimestamps)+",\n")
	}
	if this.InternetVipInfo != nil {
		s = append(s, "InternetVipInfo: "+fmt.Sprintf("%#v", this.InternetVipInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_ListenPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_ListenPort{` +
		`ListenPort:` + fmt.Sprintf("%#v", this.ListenPort) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_PortRanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_PortRanges{` +
		`PortRanges:` + fmt.Sprintf("%#v", this.PortRanges) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoSni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_NoSni{` +
		`NoSni:` + fmt.Sprintf("%#v", this.NoSni) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Sni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_Sni{` +
		`Sni:` + fmt.Sprintf("%#v", this.Sni) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultLbWithSni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_DefaultLbWithSni{` +
		`DefaultLbWithSni:` + fmt.Sprintf("%#v", this.DefaultLbWithSni) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceRoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_HashPolicyChoiceRoundRobin{` +
		`HashPolicyChoiceRoundRobin:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRoundRobin) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceLeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_HashPolicyChoiceLeastActive{` +
		`HashPolicyChoiceLeastActive:` + fmt.Sprintf("%#v", this.HashPolicyChoiceLeastActive) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceRandom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_HashPolicyChoiceRandom{` +
		`HashPolicyChoiceRandom:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRandom) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_HashPolicyChoiceSourceIpStickiness{` +
		`HashPolicyChoiceSourceIpStickiness:` + fmt.Sprintf("%#v", this.HashPolicyChoiceSourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_RetractCluster{` +
		`RetractCluster:` + fmt.Sprintf("%#v", this.RetractCluster) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DoNotRetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_DoNotRetractCluster{` +
		`DoNotRetractCluster:` + fmt.Sprintf("%#v", this.DoNotRetractCluster) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Tcp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_Tcp{` +
		`Tcp:` + fmt.Sprintf("%#v", this.Tcp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_TlsTcpAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_TlsTcpAutoCert{` +
		`TlsTcpAutoCert:` + fmt.Sprintf("%#v", this.TlsTcpAutoCert) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_TlsTcp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_TlsTcp{` +
		`TlsTcp:` + fmt.Sprintf("%#v", this.TlsTcp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GlobalSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 29)
	s = append(s, "&tcp_loadbalancer.CreateSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	if this.SniDefaultLbChoice != nil {
		s = append(s, "SniDefaultLbChoice: "+fmt.Sprintf("%#v", this.SniDefaultLbChoice)+",\n")
	}
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	if this.OriginPoolsWeights != nil {
		s = append(s, "OriginPoolsWeights: "+fmt.Sprintf("%#v", this.OriginPoolsWeights)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	if this.ClusterRetractChoice != nil {
		s = append(s, "ClusterRetractChoice: "+fmt.Sprintf("%#v", this.ClusterRetractChoice)+",\n")
	}
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_ListenPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_ListenPort{` +
		`ListenPort:` + fmt.Sprintf("%#v", this.ListenPort) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_PortRanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_PortRanges{` +
		`PortRanges:` + fmt.Sprintf("%#v", this.PortRanges) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoSni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_NoSni{` +
		`NoSni:` + fmt.Sprintf("%#v", this.NoSni) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Sni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_Sni{` +
		`Sni:` + fmt.Sprintf("%#v", this.Sni) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultLbWithSni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_DefaultLbWithSni{` +
		`DefaultLbWithSni:` + fmt.Sprintf("%#v", this.DefaultLbWithSni) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceRoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_HashPolicyChoiceRoundRobin{` +
		`HashPolicyChoiceRoundRobin:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRoundRobin) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceLeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_HashPolicyChoiceLeastActive{` +
		`HashPolicyChoiceLeastActive:` + fmt.Sprintf("%#v", this.HashPolicyChoiceLeastActive) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceRandom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_HashPolicyChoiceRandom{` +
		`HashPolicyChoiceRandom:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRandom) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceSourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_HashPolicyChoiceSourceIpStickiness{` +
		`HashPolicyChoiceSourceIpStickiness:` + fmt.Sprintf("%#v", this.HashPolicyChoiceSourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_RetractCluster{` +
		`RetractCluster:` + fmt.Sprintf("%#v", this.RetractCluster) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DoNotRetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_DoNotRetractCluster{` +
		`DoNotRetractCluster:` + fmt.Sprintf("%#v", this.DoNotRetractCluster) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Tcp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_Tcp{` +
		`Tcp:` + fmt.Sprintf("%#v", this.Tcp) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_TlsTcpAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_TlsTcpAutoCert{` +
		`TlsTcpAutoCert:` + fmt.Sprintf("%#v", this.TlsTcpAutoCert) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_TlsTcp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_TlsTcp{` +
		`TlsTcp:` + fmt.Sprintf("%#v", this.TlsTcp) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.CreateSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 30)
	s = append(s, "&tcp_loadbalancer.ReplaceSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	if this.SniDefaultLbChoice != nil {
		s = append(s, "SniDefaultLbChoice: "+fmt.Sprintf("%#v", this.SniDefaultLbChoice)+",\n")
	}
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	if this.OriginPools != nil {
		s = append(s, "OriginPools: "+fmt.Sprintf("%#v", this.OriginPools)+",\n")
	}
	if this.OriginPoolsWeights != nil {
		s = append(s, "OriginPoolsWeights: "+fmt.Sprintf("%#v", this.OriginPoolsWeights)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	if this.ClusterRetractChoice != nil {
		s = append(s, "ClusterRetractChoice: "+fmt.Sprintf("%#v", this.ClusterRetractChoice)+",\n")
	}
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_ListenPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_ListenPort{` +
		`ListenPort:` + fmt.Sprintf("%#v", this.ListenPort) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_PortRanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_PortRanges{` +
		`PortRanges:` + fmt.Sprintf("%#v", this.PortRanges) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoSni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_NoSni{` +
		`NoSni:` + fmt.Sprintf("%#v", this.NoSni) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Sni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_Sni{` +
		`Sni:` + fmt.Sprintf("%#v", this.Sni) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultLbWithSni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_DefaultLbWithSni{` +
		`DefaultLbWithSni:` + fmt.Sprintf("%#v", this.DefaultLbWithSni) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceRoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_HashPolicyChoiceRoundRobin{` +
		`HashPolicyChoiceRoundRobin:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRoundRobin) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceLeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_HashPolicyChoiceLeastActive{` +
		`HashPolicyChoiceLeastActive:` + fmt.Sprintf("%#v", this.HashPolicyChoiceLeastActive) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceRandom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_HashPolicyChoiceRandom{` +
		`HashPolicyChoiceRandom:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRandom) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_HashPolicyChoiceSourceIpStickiness{` +
		`HashPolicyChoiceSourceIpStickiness:` + fmt.Sprintf("%#v", this.HashPolicyChoiceSourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_RetractCluster{` +
		`RetractCluster:` + fmt.Sprintf("%#v", this.RetractCluster) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DoNotRetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_DoNotRetractCluster{` +
		`DoNotRetractCluster:` + fmt.Sprintf("%#v", this.DoNotRetractCluster) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Tcp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_Tcp{` +
		`Tcp:` + fmt.Sprintf("%#v", this.Tcp) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_TlsTcpAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_TlsTcpAutoCert{` +
		`TlsTcpAutoCert:` + fmt.Sprintf("%#v", this.TlsTcpAutoCert) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_TlsTcp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_TlsTcp{` +
		`TlsTcp:` + fmt.Sprintf("%#v", this.TlsTcp) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.ReplaceSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 35)
	s = append(s, "&tcp_loadbalancer.GetSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	if this.SniDefaultLbChoice != nil {
		s = append(s, "SniDefaultLbChoice: "+fmt.Sprintf("%#v", this.SniDefaultLbChoice)+",\n")
	}
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	if this.OriginPools != nil {
		s = append(s, "OriginPools: "+fmt.Sprintf("%#v", this.OriginPools)+",\n")
	}
	if this.OriginPoolsWeights != nil {
		s = append(s, "OriginPoolsWeights: "+fmt.Sprintf("%#v", this.OriginPoolsWeights)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	if this.ClusterRetractChoice != nil {
		s = append(s, "ClusterRetractChoice: "+fmt.Sprintf("%#v", this.ClusterRetractChoice)+",\n")
	}
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	if this.AutoCertInfo != nil {
		s = append(s, "AutoCertInfo: "+fmt.Sprintf("%#v", this.AutoCertInfo)+",\n")
	}
	if this.DownstreamTlsCertificateExpirationTimestamps != nil {
		s = append(s, "DownstreamTlsCertificateExpirationTimestamps: "+fmt.Sprintf("%#v", this.DownstreamTlsCertificateExpirationTimestamps)+",\n")
	}
	if this.InternetVipInfo != nil {
		s = append(s, "InternetVipInfo: "+fmt.Sprintf("%#v", this.InternetVipInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_ListenPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_ListenPort{` +
		`ListenPort:` + fmt.Sprintf("%#v", this.ListenPort) + `}`}, ", ")
	return s
}
func (this *GetSpecType_PortRanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_PortRanges{` +
		`PortRanges:` + fmt.Sprintf("%#v", this.PortRanges) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoSni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_NoSni{` +
		`NoSni:` + fmt.Sprintf("%#v", this.NoSni) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Sni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_Sni{` +
		`Sni:` + fmt.Sprintf("%#v", this.Sni) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultLbWithSni) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_DefaultLbWithSni{` +
		`DefaultLbWithSni:` + fmt.Sprintf("%#v", this.DefaultLbWithSni) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HashPolicyChoiceRoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_HashPolicyChoiceRoundRobin{` +
		`HashPolicyChoiceRoundRobin:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRoundRobin) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HashPolicyChoiceLeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_HashPolicyChoiceLeastActive{` +
		`HashPolicyChoiceLeastActive:` + fmt.Sprintf("%#v", this.HashPolicyChoiceLeastActive) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HashPolicyChoiceRandom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_HashPolicyChoiceRandom{` +
		`HashPolicyChoiceRandom:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRandom) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HashPolicyChoiceSourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_HashPolicyChoiceSourceIpStickiness{` +
		`HashPolicyChoiceSourceIpStickiness:` + fmt.Sprintf("%#v", this.HashPolicyChoiceSourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_RetractCluster{` +
		`RetractCluster:` + fmt.Sprintf("%#v", this.RetractCluster) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DoNotRetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_DoNotRetractCluster{` +
		`DoNotRetractCluster:` + fmt.Sprintf("%#v", this.DoNotRetractCluster) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Tcp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_Tcp{` +
		`Tcp:` + fmt.Sprintf("%#v", this.Tcp) + `}`}, ", ")
	return s
}
func (this *GetSpecType_TlsTcpAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_TlsTcpAutoCert{` +
		`TlsTcpAutoCert:` + fmt.Sprintf("%#v", this.TlsTcpAutoCert) + `}`}, ", ")
	return s
}
func (this *GetSpecType_TlsTcp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_TlsTcp{` +
		`TlsTcp:` + fmt.Sprintf("%#v", this.TlsTcp) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tcp_loadbalancer.GetSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ProxyTypeTLSTCP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyTypeTLSTCP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeTLSTCP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TlsCertificatesChoice != nil {
		{
			size := m.TlsCertificatesChoice.Size()
			i -= size
			if _, err := m.TlsCertificatesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProxyTypeTLSTCP_TlsParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeTLSTCP_TlsParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsParameters != nil {
		{
			size, err := m.TlsParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeTLSTCP_TlsCertParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeTLSTCP_TlsCertParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsCertParams != nil {
		{
			size, err := m.TlsCertParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeTLSTCPAutoCerts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyTypeTLSTCPAutoCerts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeTLSTCPAutoCerts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MtlsChoice != nil {
		{
			size := m.MtlsChoice.Size()
			i -= size
			if _, err := m.MtlsChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TlsConfig != nil {
		{
			size, err := m.TlsConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *ProxyTypeTLSTCPAutoCerts_NoMtls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeTLSTCPAutoCerts_NoMtls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoMtls != nil {
		{
			size, err := m.NoMtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeTLSTCPAutoCerts_UseMtls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeTLSTCPAutoCerts_UseMtls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseMtls != nil {
		{
			size, err := m.UseMtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ServicePolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicePolicyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicePolicyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for iNdEx := len(m.Policies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Policies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InternetVipInfo) > 0 {
		for iNdEx := len(m.InternetVipInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InternetVipInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x44
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.DownstreamTlsCertificateExpirationTimestamps) > 0 {
		for iNdEx := len(m.DownstreamTlsCertificateExpirationTimestamps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DownstreamTlsCertificateExpirationTimestamps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.AutoCertInfo != nil {
		{
			size, err := m.AutoCertInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xda
	}
	if len(m.DnsInfo) > 0 {
		for iNdEx := len(m.DnsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.HostName) > 0 {
		i -= len(m.HostName)
		copy(dAtA[i:], m.HostName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SniDefaultLbChoice != nil {
		{
			size := m.SniDefaultLbChoice.Size()
			i -= size
			if _, err := m.SniDefaultLbChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClusterRetractChoice != nil {
		{
			size := m.ClusterRetractChoice.Size()
			i -= size
			if _, err := m.ClusterRetractChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DnsVolterraManaged {
		i--
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.OriginPoolsWeights) > 0 {
		for iNdEx := len(m.OriginPoolsWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginPoolsWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.OriginPools) > 0 {
		for iNdEx := len(m.OriginPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.WithSni {
		i--
		if m.WithSni {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_ListenPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ListenPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.ListenPort))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HashPolicyChoiceRoundRobin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HashPolicyChoiceRoundRobin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceRoundRobin != nil {
		{
			size, err := m.HashPolicyChoiceRoundRobin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HashPolicyChoiceLeastActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HashPolicyChoiceLeastActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceLeastActive != nil {
		{
			size, err := m.HashPolicyChoiceLeastActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HashPolicyChoiceRandom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HashPolicyChoiceRandom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceRandom != nil {
		{
			size, err := m.HashPolicyChoiceRandom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		{
			size, err := m.HashPolicyChoiceSourceIpStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_RetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_RetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RetractCluster != nil {
		{
			size, err := m.RetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DoNotRetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DoNotRetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotRetractCluster != nil {
		{
			size, err := m.DoNotRetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Tcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Tcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tcp != nil {
		{
			size, err := m.Tcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_TlsTcpAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_TlsTcpAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsTcpAutoCert != nil {
		{
			size, err := m.TlsTcpAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_TlsTcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_TlsTcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsTcp != nil {
		{
			size, err := m.TlsTcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoSni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoSni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoSni != nil {
		{
			size, err := m.NoSni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Sni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Sni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sni != nil {
		{
			size, err := m.Sni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultLbWithSni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultLbWithSni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultLbWithSni != nil {
		{
			size, err := m.DefaultLbWithSni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_PortRanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_PortRanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PortRanges)
	copy(dAtA[i:], m.PortRanges)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PortRanges)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SniDefaultLbChoice != nil {
		{
			size := m.SniDefaultLbChoice.Size()
			i -= size
			if _, err := m.SniDefaultLbChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClusterRetractChoice != nil {
		{
			size := m.ClusterRetractChoice.Size()
			i -= size
			if _, err := m.ClusterRetractChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DnsVolterraManaged {
		i--
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.OriginPoolsWeights) > 0 {
		for iNdEx := len(m.OriginPoolsWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginPoolsWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_ListenPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ListenPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.ListenPort))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_HashPolicyChoiceRoundRobin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HashPolicyChoiceRoundRobin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceRoundRobin != nil {
		{
			size, err := m.HashPolicyChoiceRoundRobin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_HashPolicyChoiceLeastActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HashPolicyChoiceLeastActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceLeastActive != nil {
		{
			size, err := m.HashPolicyChoiceLeastActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_HashPolicyChoiceRandom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HashPolicyChoiceRandom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceRandom != nil {
		{
			size, err := m.HashPolicyChoiceRandom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_HashPolicyChoiceSourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HashPolicyChoiceSourceIpStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		{
			size, err := m.HashPolicyChoiceSourceIpStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_RetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_RetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RetractCluster != nil {
		{
			size, err := m.RetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DoNotRetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DoNotRetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotRetractCluster != nil {
		{
			size, err := m.DoNotRetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Tcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Tcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tcp != nil {
		{
			size, err := m.Tcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_TlsTcpAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_TlsTcpAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsTcpAutoCert != nil {
		{
			size, err := m.TlsTcpAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_TlsTcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_TlsTcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsTcp != nil {
		{
			size, err := m.TlsTcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoSni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoSni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoSni != nil {
		{
			size, err := m.NoSni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Sni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Sni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sni != nil {
		{
			size, err := m.Sni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultLbWithSni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultLbWithSni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultLbWithSni != nil {
		{
			size, err := m.DefaultLbWithSni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_PortRanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_PortRanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PortRanges)
	copy(dAtA[i:], m.PortRanges)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PortRanges)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SniDefaultLbChoice != nil {
		{
			size := m.SniDefaultLbChoice.Size()
			i -= size
			if _, err := m.SniDefaultLbChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClusterRetractChoice != nil {
		{
			size := m.ClusterRetractChoice.Size()
			i -= size
			if _, err := m.ClusterRetractChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DnsVolterraManaged {
		i--
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.OriginPoolsWeights) > 0 {
		for iNdEx := len(m.OriginPoolsWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginPoolsWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.OriginPools) > 0 {
		for iNdEx := len(m.OriginPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_ListenPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ListenPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.ListenPort))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_HashPolicyChoiceRoundRobin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HashPolicyChoiceRoundRobin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceRoundRobin != nil {
		{
			size, err := m.HashPolicyChoiceRoundRobin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_HashPolicyChoiceLeastActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HashPolicyChoiceLeastActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceLeastActive != nil {
		{
			size, err := m.HashPolicyChoiceLeastActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_HashPolicyChoiceRandom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HashPolicyChoiceRandom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceRandom != nil {
		{
			size, err := m.HashPolicyChoiceRandom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		{
			size, err := m.HashPolicyChoiceSourceIpStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_RetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_RetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RetractCluster != nil {
		{
			size, err := m.RetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DoNotRetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DoNotRetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotRetractCluster != nil {
		{
			size, err := m.DoNotRetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Tcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Tcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tcp != nil {
		{
			size, err := m.Tcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_TlsTcpAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_TlsTcpAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsTcpAutoCert != nil {
		{
			size, err := m.TlsTcpAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_TlsTcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_TlsTcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsTcp != nil {
		{
			size, err := m.TlsTcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoSni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoSni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoSni != nil {
		{
			size, err := m.NoSni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Sni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Sni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sni != nil {
		{
			size, err := m.Sni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultLbWithSni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultLbWithSni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultLbWithSni != nil {
		{
			size, err := m.DefaultLbWithSni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_PortRanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_PortRanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PortRanges)
	copy(dAtA[i:], m.PortRanges)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PortRanges)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InternetVipInfo) > 0 {
		for iNdEx := len(m.InternetVipInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InternetVipInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x44
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.DownstreamTlsCertificateExpirationTimestamps) > 0 {
		for iNdEx := len(m.DownstreamTlsCertificateExpirationTimestamps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DownstreamTlsCertificateExpirationTimestamps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.AutoCertInfo != nil {
		{
			size, err := m.AutoCertInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xda
	}
	if len(m.DnsInfo) > 0 {
		for iNdEx := len(m.DnsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.HostName) > 0 {
		i -= len(m.HostName)
		copy(dAtA[i:], m.HostName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SniDefaultLbChoice != nil {
		{
			size := m.SniDefaultLbChoice.Size()
			i -= size
			if _, err := m.SniDefaultLbChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClusterRetractChoice != nil {
		{
			size := m.ClusterRetractChoice.Size()
			i -= size
			if _, err := m.ClusterRetractChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DnsVolterraManaged {
		i--
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.OriginPoolsWeights) > 0 {
		for iNdEx := len(m.OriginPoolsWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginPoolsWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.OriginPools) > 0 {
		for iNdEx := len(m.OriginPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_ListenPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ListenPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.ListenPort))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_HashPolicyChoiceRoundRobin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HashPolicyChoiceRoundRobin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceRoundRobin != nil {
		{
			size, err := m.HashPolicyChoiceRoundRobin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_HashPolicyChoiceLeastActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HashPolicyChoiceLeastActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceLeastActive != nil {
		{
			size, err := m.HashPolicyChoiceLeastActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_HashPolicyChoiceRandom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HashPolicyChoiceRandom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceRandom != nil {
		{
			size, err := m.HashPolicyChoiceRandom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_HashPolicyChoiceSourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HashPolicyChoiceSourceIpStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		{
			size, err := m.HashPolicyChoiceSourceIpStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_RetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_RetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RetractCluster != nil {
		{
			size, err := m.RetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DoNotRetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DoNotRetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotRetractCluster != nil {
		{
			size, err := m.DoNotRetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Tcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Tcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tcp != nil {
		{
			size, err := m.Tcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_TlsTcpAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_TlsTcpAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsTcpAutoCert != nil {
		{
			size, err := m.TlsTcpAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_TlsTcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_TlsTcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsTcp != nil {
		{
			size, err := m.TlsTcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoSni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoSni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoSni != nil {
		{
			size, err := m.NoSni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Sni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Sni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Sni != nil {
		{
			size, err := m.Sni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultLbWithSni) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultLbWithSni) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultLbWithSni != nil {
		{
			size, err := m.DefaultLbWithSni.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_PortRanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_PortRanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PortRanges)
	copy(dAtA[i:], m.PortRanges)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PortRanges)))
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProxyTypeTLSTCP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsCertificatesChoice != nil {
		n += m.TlsCertificatesChoice.Size()
	}
	return n
}

func (m *ProxyTypeTLSTCP_TlsParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeTLSTCP_TlsCertParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsCertParams != nil {
		l = m.TlsCertParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeTLSTCPAutoCerts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsConfig != nil {
		l = m.TlsConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MtlsChoice != nil {
		n += m.MtlsChoice.Size()
	}
	return n
}

func (m *ProxyTypeTLSTCPAutoCerts_NoMtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoMtls != nil {
		l = m.NoMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeTLSTCPAutoCerts_UseMtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseMtls != nil {
		l = m.UseMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicePolicyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	if m.WithSni {
		n += 2
	}
	if len(m.OriginPools) > 0 {
		for _, e := range m.OriginPools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.OriginPoolsWeights) > 0 {
		for _, e := range m.OriginPoolsWeights {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DnsVolterraManaged {
		n += 2
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.ClusterRetractChoice != nil {
		n += m.ClusterRetractChoice.Size()
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.SniDefaultLbChoice != nil {
		n += m.SniDefaultLbChoice.Size()
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.AutoCertInfo != nil {
		l = m.AutoCertInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DownstreamTlsCertificateExpirationTimestamps) > 0 {
		for _, e := range m.DownstreamTlsCertificateExpirationTimestamps {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.InternetVipInfo) > 0 {
		for _, e := range m.InternetVipInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType_ListenPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.ListenPort))
	return n
}
func (m *GlobalSpecType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HashPolicyChoiceRoundRobin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceRoundRobin != nil {
		l = m.HashPolicyChoiceRoundRobin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HashPolicyChoiceLeastActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceLeastActive != nil {
		l = m.HashPolicyChoiceLeastActive.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HashPolicyChoiceRandom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceRandom != nil {
		l = m.HashPolicyChoiceRandom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		l = m.HashPolicyChoiceSourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetractCluster != nil {
		l = m.RetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DoNotRetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotRetractCluster != nil {
		l = m.DoNotRetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Tcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tcp != nil {
		l = m.Tcp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_TlsTcpAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsTcpAutoCert != nil {
		l = m.TlsTcpAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_TlsTcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsTcp != nil {
		l = m.TlsTcp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoSni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoSni != nil {
		l = m.NoSni.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Sni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sni != nil {
		l = m.Sni.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultLbWithSni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultLbWithSni != nil {
		l = m.DefaultLbWithSni.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_PortRanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortRanges)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.OriginPoolsWeights) > 0 {
		for _, e := range m.OriginPoolsWeights {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DnsVolterraManaged {
		n += 2
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.ClusterRetractChoice != nil {
		n += m.ClusterRetractChoice.Size()
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.SniDefaultLbChoice != nil {
		n += m.SniDefaultLbChoice.Size()
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	return n
}

func (m *CreateSpecType_ListenPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.ListenPort))
	return n
}
func (m *CreateSpecType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HashPolicyChoiceRoundRobin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceRoundRobin != nil {
		l = m.HashPolicyChoiceRoundRobin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HashPolicyChoiceLeastActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceLeastActive != nil {
		l = m.HashPolicyChoiceLeastActive.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HashPolicyChoiceRandom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceRandom != nil {
		l = m.HashPolicyChoiceRandom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HashPolicyChoiceSourceIpStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		l = m.HashPolicyChoiceSourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetractCluster != nil {
		l = m.RetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DoNotRetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotRetractCluster != nil {
		l = m.DoNotRetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Tcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tcp != nil {
		l = m.Tcp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_TlsTcpAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsTcpAutoCert != nil {
		l = m.TlsTcpAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_TlsTcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsTcp != nil {
		l = m.TlsTcp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoSni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoSni != nil {
		l = m.NoSni.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Sni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sni != nil {
		l = m.Sni.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultLbWithSni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultLbWithSni != nil {
		l = m.DefaultLbWithSni.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_PortRanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortRanges)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	if len(m.OriginPools) > 0 {
		for _, e := range m.OriginPools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.OriginPoolsWeights) > 0 {
		for _, e := range m.OriginPoolsWeights {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DnsVolterraManaged {
		n += 2
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.ClusterRetractChoice != nil {
		n += m.ClusterRetractChoice.Size()
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.SniDefaultLbChoice != nil {
		n += m.SniDefaultLbChoice.Size()
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_ListenPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.ListenPort))
	return n
}
func (m *ReplaceSpecType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HashPolicyChoiceRoundRobin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceRoundRobin != nil {
		l = m.HashPolicyChoiceRoundRobin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HashPolicyChoiceLeastActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceLeastActive != nil {
		l = m.HashPolicyChoiceLeastActive.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HashPolicyChoiceRandom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceRandom != nil {
		l = m.HashPolicyChoiceRandom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		l = m.HashPolicyChoiceSourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetractCluster != nil {
		l = m.RetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DoNotRetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotRetractCluster != nil {
		l = m.DoNotRetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Tcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tcp != nil {
		l = m.Tcp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_TlsTcpAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsTcpAutoCert != nil {
		l = m.TlsTcpAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_TlsTcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsTcp != nil {
		l = m.TlsTcp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoSni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoSni != nil {
		l = m.NoSni.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Sni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sni != nil {
		l = m.Sni.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultLbWithSni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultLbWithSni != nil {
		l = m.DefaultLbWithSni.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_PortRanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortRanges)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	if len(m.OriginPools) > 0 {
		for _, e := range m.OriginPools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.OriginPoolsWeights) > 0 {
		for _, e := range m.OriginPoolsWeights {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DnsVolterraManaged {
		n += 2
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.ClusterRetractChoice != nil {
		n += m.ClusterRetractChoice.Size()
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.SniDefaultLbChoice != nil {
		n += m.SniDefaultLbChoice.Size()
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.AutoCertInfo != nil {
		l = m.AutoCertInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DownstreamTlsCertificateExpirationTimestamps) > 0 {
		for _, e := range m.DownstreamTlsCertificateExpirationTimestamps {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.InternetVipInfo) > 0 {
		for _, e := range m.InternetVipInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType_ListenPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.ListenPort))
	return n
}
func (m *GetSpecType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HashPolicyChoiceRoundRobin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceRoundRobin != nil {
		l = m.HashPolicyChoiceRoundRobin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HashPolicyChoiceLeastActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceLeastActive != nil {
		l = m.HashPolicyChoiceLeastActive.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HashPolicyChoiceRandom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceRandom != nil {
		l = m.HashPolicyChoiceRandom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HashPolicyChoiceSourceIpStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		l = m.HashPolicyChoiceSourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetractCluster != nil {
		l = m.RetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DoNotRetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotRetractCluster != nil {
		l = m.DoNotRetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Tcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tcp != nil {
		l = m.Tcp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_TlsTcpAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsTcpAutoCert != nil {
		l = m.TlsTcpAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_TlsTcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsTcp != nil {
		l = m.TlsTcp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoSni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoSni != nil {
		l = m.NoSni.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Sni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sni != nil {
		l = m.Sni.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultLbWithSni) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultLbWithSni != nil {
		l = m.DefaultLbWithSni.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_PortRanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortRanges)
	n += 2 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ProxyTypeTLSTCP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeTLSTCP{`,
		`TlsCertificatesChoice:` + fmt.Sprintf("%v", this.TlsCertificatesChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeTLSTCP_TlsParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeTLSTCP_TlsParameters{`,
		`TlsParameters:` + strings.Replace(fmt.Sprintf("%v", this.TlsParameters), "DownstreamTlsParamsType", "views.DownstreamTlsParamsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeTLSTCP_TlsCertParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeTLSTCP_TlsCertParams{`,
		`TlsCertParams:` + strings.Replace(fmt.Sprintf("%v", this.TlsCertParams), "DownstreamTLSCertsParams", "views.DownstreamTLSCertsParams", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeTLSTCPAutoCerts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeTLSTCPAutoCerts{`,
		`TlsConfig:` + strings.Replace(fmt.Sprintf("%v", this.TlsConfig), "TlsConfig", "views.TlsConfig", 1) + `,`,
		`MtlsChoice:` + fmt.Sprintf("%v", this.MtlsChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeTLSTCPAutoCerts_NoMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeTLSTCPAutoCerts_NoMtls{`,
		`NoMtls:` + strings.Replace(fmt.Sprintf("%v", this.NoMtls), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeTLSTCPAutoCerts_UseMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeTLSTCPAutoCerts_UseMtls{`,
		`UseMtls:` + strings.Replace(fmt.Sprintf("%v", this.UseMtls), "DownstreamTlsValidationContext", "views.DownstreamTlsValidationContext", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicePolicyList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPolicies := "[]*ObjectRefType{"
	for _, f := range this.Policies {
		repeatedStringForPolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForPolicies += "}"
	s := strings.Join([]string{`&ServicePolicyList{`,
		`Policies:` + repeatedStringForPolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginPools := "[]*ObjectRefType{"
	for _, f := range this.OriginPools {
		repeatedStringForOriginPools += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForOriginPools += "}"
	repeatedStringForOriginPoolsWeights := "[]*OriginPoolWithWeight{"
	for _, f := range this.OriginPoolsWeights {
		repeatedStringForOriginPoolsWeights += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForOriginPoolsWeights += "}"
	repeatedStringForDnsInfo := "[]*DnsInfo{"
	for _, f := range this.DnsInfo {
		repeatedStringForDnsInfo += strings.Replace(fmt.Sprintf("%v", f), "DnsInfo", "virtual_host_dns_info.DnsInfo", 1) + ","
	}
	repeatedStringForDnsInfo += "}"
	repeatedStringForDownstreamTlsCertificateExpirationTimestamps := "[]*Timestamp{"
	for _, f := range this.DownstreamTlsCertificateExpirationTimestamps {
		repeatedStringForDownstreamTlsCertificateExpirationTimestamps += strings.Replace(fmt.Sprintf("%v", f), "Timestamp", "types.Timestamp", 1) + ","
	}
	repeatedStringForDownstreamTlsCertificateExpirationTimestamps += "}"
	repeatedStringForInternetVipInfo := "[]*InternetVIPInfo{"
	for _, f := range this.InternetVipInfo {
		repeatedStringForInternetVipInfo += strings.Replace(fmt.Sprintf("%v", f), "InternetVIPInfo", "views.InternetVIPInfo", 1) + ","
	}
	repeatedStringForInternetVipInfo += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`WithSni:` + fmt.Sprintf("%v", this.WithSni) + `,`,
		`OriginPools:` + repeatedStringForOriginPools + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`OriginPoolsWeights:` + repeatedStringForOriginPoolsWeights + `,`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`ClusterRetractChoice:` + fmt.Sprintf("%v", this.ClusterRetractChoice) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`SniDefaultLbChoice:` + fmt.Sprintf("%v", this.SniDefaultLbChoice) + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + repeatedStringForDnsInfo + `,`,
		`AutoCertInfo:` + strings.Replace(fmt.Sprintf("%v", this.AutoCertInfo), "AutoCertInfoType", "virtual_host.AutoCertInfoType", 1) + `,`,
		`DownstreamTlsCertificateExpirationTimestamps:` + repeatedStringForDownstreamTlsCertificateExpirationTimestamps + `,`,
		`InternetVipInfo:` + repeatedStringForInternetVipInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ListenPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ListenPort{`,
		`ListenPort:` + fmt.Sprintf("%v", this.ListenPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceRoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HashPolicyChoiceRoundRobin{`,
		`HashPolicyChoiceRoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRoundRobin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceLeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HashPolicyChoiceLeastActive{`,
		`HashPolicyChoiceLeastActive:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceLeastActive), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceRandom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HashPolicyChoiceRandom{`,
		`HashPolicyChoiceRandom:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRandom), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HashPolicyChoiceSourceIpStickiness{`,
		`HashPolicyChoiceSourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceSourceIpStickiness), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RetractCluster{`,
		`RetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.RetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DoNotRetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DoNotRetractCluster{`,
		`DoNotRetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.DoNotRetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Tcp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Tcp{`,
		`Tcp:` + strings.Replace(fmt.Sprintf("%v", this.Tcp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_TlsTcpAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_TlsTcpAutoCert{`,
		`TlsTcpAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.TlsTcpAutoCert), "ProxyTypeTLSTCPAutoCerts", "ProxyTypeTLSTCPAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_TlsTcp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_TlsTcp{`,
		`TlsTcp:` + strings.Replace(fmt.Sprintf("%v", this.TlsTcp), "ProxyTypeTLSTCP", "ProxyTypeTLSTCP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoSni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoSni{`,
		`NoSni:` + strings.Replace(fmt.Sprintf("%v", this.NoSni), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Sni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Sni{`,
		`Sni:` + strings.Replace(fmt.Sprintf("%v", this.Sni), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultLbWithSni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultLbWithSni{`,
		`DefaultLbWithSni:` + strings.Replace(fmt.Sprintf("%v", this.DefaultLbWithSni), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PortRanges) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PortRanges{`,
		`PortRanges:` + fmt.Sprintf("%v", this.PortRanges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginPoolsWeights := "[]*OriginPoolWithWeight{"
	for _, f := range this.OriginPoolsWeights {
		repeatedStringForOriginPoolsWeights += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForOriginPoolsWeights += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`OriginPoolsWeights:` + repeatedStringForOriginPoolsWeights + `,`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`ClusterRetractChoice:` + fmt.Sprintf("%v", this.ClusterRetractChoice) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`SniDefaultLbChoice:` + fmt.Sprintf("%v", this.SniDefaultLbChoice) + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ListenPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ListenPort{`,
		`ListenPort:` + fmt.Sprintf("%v", this.ListenPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceRoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HashPolicyChoiceRoundRobin{`,
		`HashPolicyChoiceRoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRoundRobin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceLeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HashPolicyChoiceLeastActive{`,
		`HashPolicyChoiceLeastActive:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceLeastActive), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceRandom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HashPolicyChoiceRandom{`,
		`HashPolicyChoiceRandom:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRandom), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceSourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HashPolicyChoiceSourceIpStickiness{`,
		`HashPolicyChoiceSourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceSourceIpStickiness), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RetractCluster{`,
		`RetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.RetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DoNotRetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DoNotRetractCluster{`,
		`DoNotRetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.DoNotRetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Tcp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Tcp{`,
		`Tcp:` + strings.Replace(fmt.Sprintf("%v", this.Tcp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_TlsTcpAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_TlsTcpAutoCert{`,
		`TlsTcpAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.TlsTcpAutoCert), "ProxyTypeTLSTCPAutoCerts", "ProxyTypeTLSTCPAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_TlsTcp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_TlsTcp{`,
		`TlsTcp:` + strings.Replace(fmt.Sprintf("%v", this.TlsTcp), "ProxyTypeTLSTCP", "ProxyTypeTLSTCP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoSni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoSni{`,
		`NoSni:` + strings.Replace(fmt.Sprintf("%v", this.NoSni), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Sni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Sni{`,
		`Sni:` + strings.Replace(fmt.Sprintf("%v", this.Sni), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultLbWithSni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultLbWithSni{`,
		`DefaultLbWithSni:` + strings.Replace(fmt.Sprintf("%v", this.DefaultLbWithSni), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_PortRanges) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_PortRanges{`,
		`PortRanges:` + fmt.Sprintf("%v", this.PortRanges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginPools := "[]*ObjectRefType{"
	for _, f := range this.OriginPools {
		repeatedStringForOriginPools += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForOriginPools += "}"
	repeatedStringForOriginPoolsWeights := "[]*OriginPoolWithWeight{"
	for _, f := range this.OriginPoolsWeights {
		repeatedStringForOriginPoolsWeights += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForOriginPoolsWeights += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`OriginPools:` + repeatedStringForOriginPools + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`OriginPoolsWeights:` + repeatedStringForOriginPoolsWeights + `,`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`ClusterRetractChoice:` + fmt.Sprintf("%v", this.ClusterRetractChoice) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`SniDefaultLbChoice:` + fmt.Sprintf("%v", this.SniDefaultLbChoice) + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ListenPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ListenPort{`,
		`ListenPort:` + fmt.Sprintf("%v", this.ListenPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceRoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HashPolicyChoiceRoundRobin{`,
		`HashPolicyChoiceRoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRoundRobin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceLeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HashPolicyChoiceLeastActive{`,
		`HashPolicyChoiceLeastActive:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceLeastActive), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceRandom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HashPolicyChoiceRandom{`,
		`HashPolicyChoiceRandom:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRandom), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HashPolicyChoiceSourceIpStickiness{`,
		`HashPolicyChoiceSourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceSourceIpStickiness), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RetractCluster{`,
		`RetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.RetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DoNotRetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DoNotRetractCluster{`,
		`DoNotRetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.DoNotRetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Tcp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Tcp{`,
		`Tcp:` + strings.Replace(fmt.Sprintf("%v", this.Tcp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_TlsTcpAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_TlsTcpAutoCert{`,
		`TlsTcpAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.TlsTcpAutoCert), "ProxyTypeTLSTCPAutoCerts", "ProxyTypeTLSTCPAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_TlsTcp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_TlsTcp{`,
		`TlsTcp:` + strings.Replace(fmt.Sprintf("%v", this.TlsTcp), "ProxyTypeTLSTCP", "ProxyTypeTLSTCP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoSni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoSni{`,
		`NoSni:` + strings.Replace(fmt.Sprintf("%v", this.NoSni), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Sni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Sni{`,
		`Sni:` + strings.Replace(fmt.Sprintf("%v", this.Sni), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultLbWithSni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultLbWithSni{`,
		`DefaultLbWithSni:` + strings.Replace(fmt.Sprintf("%v", this.DefaultLbWithSni), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_PortRanges) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_PortRanges{`,
		`PortRanges:` + fmt.Sprintf("%v", this.PortRanges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginPools := "[]*ObjectRefType{"
	for _, f := range this.OriginPools {
		repeatedStringForOriginPools += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForOriginPools += "}"
	repeatedStringForOriginPoolsWeights := "[]*OriginPoolWithWeight{"
	for _, f := range this.OriginPoolsWeights {
		repeatedStringForOriginPoolsWeights += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForOriginPoolsWeights += "}"
	repeatedStringForDnsInfo := "[]*DnsInfo{"
	for _, f := range this.DnsInfo {
		repeatedStringForDnsInfo += strings.Replace(fmt.Sprintf("%v", f), "DnsInfo", "virtual_host_dns_info.DnsInfo", 1) + ","
	}
	repeatedStringForDnsInfo += "}"
	repeatedStringForDownstreamTlsCertificateExpirationTimestamps := "[]*Timestamp{"
	for _, f := range this.DownstreamTlsCertificateExpirationTimestamps {
		repeatedStringForDownstreamTlsCertificateExpirationTimestamps += strings.Replace(fmt.Sprintf("%v", f), "Timestamp", "types.Timestamp", 1) + ","
	}
	repeatedStringForDownstreamTlsCertificateExpirationTimestamps += "}"
	repeatedStringForInternetVipInfo := "[]*InternetVIPInfo{"
	for _, f := range this.InternetVipInfo {
		repeatedStringForInternetVipInfo += strings.Replace(fmt.Sprintf("%v", f), "InternetVIPInfo", "views.InternetVIPInfo", 1) + ","
	}
	repeatedStringForInternetVipInfo += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`OriginPools:` + repeatedStringForOriginPools + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`OriginPoolsWeights:` + repeatedStringForOriginPoolsWeights + `,`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`ClusterRetractChoice:` + fmt.Sprintf("%v", this.ClusterRetractChoice) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`SniDefaultLbChoice:` + fmt.Sprintf("%v", this.SniDefaultLbChoice) + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + repeatedStringForDnsInfo + `,`,
		`AutoCertInfo:` + strings.Replace(fmt.Sprintf("%v", this.AutoCertInfo), "AutoCertInfoType", "virtual_host.AutoCertInfoType", 1) + `,`,
		`DownstreamTlsCertificateExpirationTimestamps:` + repeatedStringForDownstreamTlsCertificateExpirationTimestamps + `,`,
		`InternetVipInfo:` + repeatedStringForInternetVipInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ListenPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ListenPort{`,
		`ListenPort:` + fmt.Sprintf("%v", this.ListenPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HashPolicyChoiceRoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HashPolicyChoiceRoundRobin{`,
		`HashPolicyChoiceRoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRoundRobin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HashPolicyChoiceLeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HashPolicyChoiceLeastActive{`,
		`HashPolicyChoiceLeastActive:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceLeastActive), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HashPolicyChoiceRandom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HashPolicyChoiceRandom{`,
		`HashPolicyChoiceRandom:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRandom), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HashPolicyChoiceSourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HashPolicyChoiceSourceIpStickiness{`,
		`HashPolicyChoiceSourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceSourceIpStickiness), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RetractCluster{`,
		`RetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.RetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DoNotRetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DoNotRetractCluster{`,
		`DoNotRetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.DoNotRetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Tcp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Tcp{`,
		`Tcp:` + strings.Replace(fmt.Sprintf("%v", this.Tcp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_TlsTcpAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_TlsTcpAutoCert{`,
		`TlsTcpAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.TlsTcpAutoCert), "ProxyTypeTLSTCPAutoCerts", "ProxyTypeTLSTCPAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_TlsTcp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_TlsTcp{`,
		`TlsTcp:` + strings.Replace(fmt.Sprintf("%v", this.TlsTcp), "ProxyTypeTLSTCP", "ProxyTypeTLSTCP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoSni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoSni{`,
		`NoSni:` + strings.Replace(fmt.Sprintf("%v", this.NoSni), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Sni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Sni{`,
		`Sni:` + strings.Replace(fmt.Sprintf("%v", this.Sni), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultLbWithSni) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultLbWithSni{`,
		`DefaultLbWithSni:` + strings.Replace(fmt.Sprintf("%v", this.DefaultLbWithSni), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_PortRanges) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_PortRanges{`,
		`PortRanges:` + fmt.Sprintf("%v", this.PortRanges) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ProxyTypeTLSTCP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyTypeTLSTCP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyTypeTLSTCP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DownstreamTlsParamsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsCertificatesChoice = &ProxyTypeTLSTCP_TlsParameters{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DownstreamTLSCertsParams{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TlsCertificatesChoice = &ProxyTypeTLSTCP_TlsCertParams{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyTypeTLSTCPAutoCerts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyTypeTLSTCPAutoCerts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyTypeTLSTCPAutoCerts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsConfig == nil {
				m.TlsConfig = &views.TlsConfig{}
			}
			if err := m.TlsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &ProxyTypeTLSTCPAutoCerts_NoMtls{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.DownstreamTlsValidationContext{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &ProxyTypeTLSTCPAutoCerts_UseMtls{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicePolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicePolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicePolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &views.ObjectRefType{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &GlobalSpecType_ListenPort{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithSni", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithSni = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPools = append(m.OriginPools, &views.ObjectRefType{})
			if err := m.OriginPools[len(m.OriginPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPoolsWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPoolsWeights = append(m.OriginPoolsWeights, &views.OriginPoolWithWeight{})
			if err := m.OriginPoolsWeights[len(m.OriginPoolsWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceRoundRobin{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceLeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceLeastActive{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRandom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceRandom{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceSourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceSourceIpStickiness{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &GlobalSpecType_RetractCluster{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotRetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &GlobalSpecType_DoNotRetractCluster{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_Tcp{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsTcpAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeTLSTCPAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_TlsTcpAutoCert{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsTcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeTLSTCP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_TlsTcp{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniDefaultLbChoice = &GlobalSpecType_NoSni{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniDefaultLbChoice = &GlobalSpecType_Sni{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLbWithSni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniDefaultLbChoice = &GlobalSpecType_DefaultLbWithSni{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GlobalSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GlobalSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GlobalSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortChoice = &GlobalSpecType_PortRanges{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1003:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertInfo == nil {
				m.AutoCertInfo = &virtual_host.AutoCertInfoType{}
			}
			if err := m.AutoCertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1004:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamTlsCertificateExpirationTimestamps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownstreamTlsCertificateExpirationTimestamps = append(m.DownstreamTlsCertificateExpirationTimestamps, &types.Timestamp{})
			if err := m.DownstreamTlsCertificateExpirationTimestamps[len(m.DownstreamTlsCertificateExpirationTimestamps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternetVipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternetVipInfo = append(m.InternetVipInfo, &views.InternetVIPInfo{})
			if err := m.InternetVipInfo[len(m.InternetVipInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &CreateSpecType_ListenPort{v}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPoolsWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPoolsWeights = append(m.OriginPoolsWeights, &views.OriginPoolWithWeight{})
			if err := m.OriginPoolsWeights[len(m.OriginPoolsWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceRoundRobin{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceLeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceLeastActive{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRandom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceRandom{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceSourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceSourceIpStickiness{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &CreateSpecType_RetractCluster{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotRetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &CreateSpecType_DoNotRetractCluster{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_Tcp{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsTcpAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeTLSTCPAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_TlsTcpAutoCert{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsTcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeTLSTCP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_TlsTcp{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniDefaultLbChoice = &CreateSpecType_NoSni{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniDefaultLbChoice = &CreateSpecType_Sni{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLbWithSni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniDefaultLbChoice = &CreateSpecType_DefaultLbWithSni{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CreateSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CreateSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CreateSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortChoice = &CreateSpecType_PortRanges{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &ReplaceSpecType_ListenPort{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPools = append(m.OriginPools, &views.ObjectRefType{})
			if err := m.OriginPools[len(m.OriginPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPoolsWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPoolsWeights = append(m.OriginPoolsWeights, &views.OriginPoolWithWeight{})
			if err := m.OriginPoolsWeights[len(m.OriginPoolsWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceRoundRobin{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceLeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceLeastActive{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRandom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceRandom{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceSourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceSourceIpStickiness{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &ReplaceSpecType_RetractCluster{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotRetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &ReplaceSpecType_DoNotRetractCluster{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_Tcp{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsTcpAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeTLSTCPAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_TlsTcpAutoCert{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsTcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeTLSTCP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_TlsTcp{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniDefaultLbChoice = &ReplaceSpecType_NoSni{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniDefaultLbChoice = &ReplaceSpecType_Sni{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLbWithSni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniDefaultLbChoice = &ReplaceSpecType_DefaultLbWithSni{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &ReplaceSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &ReplaceSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &ReplaceSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortChoice = &ReplaceSpecType_PortRanges{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &GetSpecType_ListenPort{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPools = append(m.OriginPools, &views.ObjectRefType{})
			if err := m.OriginPools[len(m.OriginPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPoolsWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPoolsWeights = append(m.OriginPoolsWeights, &views.OriginPoolWithWeight{})
			if err := m.OriginPoolsWeights[len(m.OriginPoolsWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_HashPolicyChoiceRoundRobin{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceLeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_HashPolicyChoiceLeastActive{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRandom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_HashPolicyChoiceRandom{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceSourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_HashPolicyChoiceSourceIpStickiness{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &GetSpecType_RetractCluster{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotRetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &GetSpecType_DoNotRetractCluster{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_Tcp{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsTcpAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeTLSTCPAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_TlsTcpAutoCert{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsTcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeTLSTCP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_TlsTcp{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniDefaultLbChoice = &GetSpecType_NoSni{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniDefaultLbChoice = &GetSpecType_Sni{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLbWithSni", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SniDefaultLbChoice = &GetSpecType_DefaultLbWithSni{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GetSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GetSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GetSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortChoice = &GetSpecType_PortRanges{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1003:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertInfo == nil {
				m.AutoCertInfo = &virtual_host.AutoCertInfoType{}
			}
			if err := m.AutoCertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1004:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamTlsCertificateExpirationTimestamps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownstreamTlsCertificateExpirationTimestamps = append(m.DownstreamTlsCertificateExpirationTimestamps, &types.Timestamp{})
			if err := m.DownstreamTlsCertificateExpirationTimestamps[len(m.DownstreamTlsCertificateExpirationTimestamps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternetVipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternetVipInfo = append(m.InternetVipInfo, &views.InternetVIPInfo{})
			if err := m.InternetVipInfo[len(m.InternetVipInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/securemesh_site/types.proto

package securemesh_site

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	fleet "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet"
	network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"
	network_interface "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_interface"
	site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	virtual_network "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_network"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the Secure Mesh site specification
type GlobalSpecType struct {
	// Generic Server Certified Hardware
	//
	// x-displayName: "Generic Server Certified Hardware"
	// x-example: "isv-8000-series-voltmesh"
	// x-required
	// Name for generic server certified hardware to form this Secure Mesh site.
	VolterraCertifiedHw string `protobuf:"bytes,49,opt,name=volterra_certified_hw,json=volterraCertifiedHw,proto3" json:"volterra_certified_hw,omitempty"`
	// Master Nodes
	//
	// x-displayName: "Master Nodes"
	// x-required
	// Configuration of master nodes
	MasterNodeConfiguration []*views.MasterNode `protobuf:"bytes,53,rep,name=master_node_configuration,json=masterNodeConfiguration,proto3" json:"master_node_configuration,omitempty"`
	// Worker Nodes
	//
	// x-displayName: "Worker Nodes"
	// x-example: "worker-0"
	// Names of worker nodes
	WorkerNodes []string `protobuf:"bytes,3,rep,name=worker_nodes,json=workerNodes,proto3" json:"worker_nodes,omitempty"`
	// Software Version
	//
	// x-displayName: "Software Version"
	// x-example: "value"
	// Desired volterra software version that should be installed on the site
	VolterraSoftwareVersion string `protobuf:"bytes,4,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	// Operating System Version
	//
	// x-displayName: "Operating System Version"
	// x-example: "value"
	// Desired Operating System version that should be installed on the site
	OperatingSystemVersion string `protobuf:"bytes,5,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	// Select Bond Configuration
	//
	// x-displayName: "Bond Configuration"
	// x-required
	// Add bond interface devices to the Secure Mesh site
	//
	// Types that are valid to be assigned to BondChoice:
	//	*GlobalSpecType_NoBondDevices
	//	*GlobalSpecType_BondDeviceList
	BondChoice isGlobalSpecType_BondChoice `protobuf_oneof:"bond_choice"`
	// Select to Configure Networking
	//
	// x-displayName: "Configure Networking"
	// x-required
	// Select to use default or custom networking configuration
	//
	// Types that are valid to be assigned to NetworkCfgChoice:
	//	*GlobalSpecType_DefaultNetworkConfig
	//	*GlobalSpecType_CustomNetworkConfig
	NetworkCfgChoice isGlobalSpecType_NetworkCfgChoice `protobuf_oneof:"network_cfg_choice"`
	// address
	//
	// x-displayName: "Geographical Address"
	// x-example: "123 Street, city, country, postal code"
	// Site's geographical address that can be used determine its latitude and longitude.
	Address string `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	// coordinates
	//
	// x-displayName: "Coordinates"
	// Coordinates of the site, longitude and latitude
	Coordinates *site.Coordinates `protobuf:"bytes,19,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Logs Streaming
	//
	// x-displayName: "Logs Streaming"
	// x-required
	// Select Logs receiver for logs streaming
	//
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GlobalSpecType_LogsStreamingDisabled
	//	*GlobalSpecType_LogReceiver
	LogsReceiverChoice isGlobalSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// F5XC Software
	//
	// x-displayName: "F5XC Software"
	// F5XC Software Details
	Sw *views.VolterraSoftwareType `protobuf:"bytes,34,opt,name=sw,proto3" json:"sw,omitempty"`
	// Operating System
	//
	// x-displayName: "Operating System"
	// Operating System Details
	Os *views.OperatingSystemType `protobuf:"bytes,35,opt,name=os,proto3" json:"os,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
	// Blocked Services
	//
	// x-displayName: "Blocked Services"
	// x-required
	// Select to use default or custom blocked service configuration
	//
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*GlobalSpecType_DefaultBlockedServices
	//	*GlobalSpecType_BlockedServices
	BlockedServicesChoice isGlobalSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	// Offline Survivability Mode
	//
	// x-displayName: "Offline Survivability Mode"
	// Enable/Disable offline survivability mode
	OfflineSurvivabilityMode *views.OfflineSurvivabilityModeType `protobuf:"bytes,47,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	// Performance Enhancement Choice
	//
	// x-displayName: "Performance Enhancement Mode"
	// Performance Enhancement Mode to optimize for L3 or L7 networking
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,50,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
	// Enable Drain
	//
	// x-displayName: "Kubernetes Upgrade Drain"
	// Enable Kubernetes Drain during OS or SW upgrade
	KubernetesUpgradeDrain *views.KubernetesUpgradeDrain `protobuf:"bytes,51,opt,name=kubernetes_upgrade_drain,json=kubernetesUpgradeDrain,proto3" json:"kubernetes_upgrade_drain,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6228ec914a1c46a1, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_BondChoice interface {
	isGlobalSpecType_BondChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_NetworkCfgChoice interface {
	isGlobalSpecType_NetworkCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_LogsReceiverChoice interface {
	isGlobalSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_BlockedServicesChoice interface {
	isGlobalSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_NoBondDevices struct {
	NoBondDevices *schema.Empty `protobuf:"bytes,7,opt,name=no_bond_devices,json=noBondDevices,proto3,oneof" json:"no_bond_devices,omitempty"`
}
type GlobalSpecType_BondDeviceList struct {
	BondDeviceList *fleet.FleetBondDevicesListType `protobuf:"bytes,8,opt,name=bond_device_list,json=bondDeviceList,proto3,oneof" json:"bond_device_list,omitempty"`
}
type GlobalSpecType_DefaultNetworkConfig struct {
	DefaultNetworkConfig *schema.Empty `protobuf:"bytes,10,opt,name=default_network_config,json=defaultNetworkConfig,proto3,oneof" json:"default_network_config,omitempty"`
}
type GlobalSpecType_CustomNetworkConfig struct {
	CustomNetworkConfig *SmsNetworkConfiguration `protobuf:"bytes,11,opt,name=custom_network_config,json=customNetworkConfig,proto3,oneof" json:"custom_network_config,omitempty"`
}
type GlobalSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,24,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type GlobalSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,25,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type GlobalSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,41,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type GlobalSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,44,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}

func (*GlobalSpecType_NoBondDevices) isGlobalSpecType_BondChoice()                     {}
func (*GlobalSpecType_BondDeviceList) isGlobalSpecType_BondChoice()                    {}
func (*GlobalSpecType_DefaultNetworkConfig) isGlobalSpecType_NetworkCfgChoice()        {}
func (*GlobalSpecType_CustomNetworkConfig) isGlobalSpecType_NetworkCfgChoice()         {}
func (*GlobalSpecType_LogsStreamingDisabled) isGlobalSpecType_LogsReceiverChoice()     {}
func (*GlobalSpecType_LogReceiver) isGlobalSpecType_LogsReceiverChoice()               {}
func (*GlobalSpecType_DefaultBlockedServices) isGlobalSpecType_BlockedServicesChoice() {}
func (*GlobalSpecType_BlockedServices) isGlobalSpecType_BlockedServicesChoice()        {}

func (m *GlobalSpecType) GetBondChoice() isGlobalSpecType_BondChoice {
	if m != nil {
		return m.BondChoice
	}
	return nil
}
func (m *GlobalSpecType) GetNetworkCfgChoice() isGlobalSpecType_NetworkCfgChoice {
	if m != nil {
		return m.NetworkCfgChoice
	}
	return nil
}
func (m *GlobalSpecType) GetLogsReceiverChoice() isGlobalSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *GlobalSpecType) GetBlockedServicesChoice() isGlobalSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}

func (m *GlobalSpecType) GetVolterraCertifiedHw() string {
	if m != nil {
		return m.VolterraCertifiedHw
	}
	return ""
}

func (m *GlobalSpecType) GetMasterNodeConfiguration() []*views.MasterNode {
	if m != nil {
		return m.MasterNodeConfiguration
	}
	return nil
}

func (m *GlobalSpecType) GetWorkerNodes() []string {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *GlobalSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GlobalSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GlobalSpecType) GetNoBondDevices() *schema.Empty {
	if x, ok := m.GetBondChoice().(*GlobalSpecType_NoBondDevices); ok {
		return x.NoBondDevices
	}
	return nil
}

func (m *GlobalSpecType) GetBondDeviceList() *fleet.FleetBondDevicesListType {
	if x, ok := m.GetBondChoice().(*GlobalSpecType_BondDeviceList); ok {
		return x.BondDeviceList
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultNetworkConfig() *schema.Empty {
	if x, ok := m.GetNetworkCfgChoice().(*GlobalSpecType_DefaultNetworkConfig); ok {
		return x.DefaultNetworkConfig
	}
	return nil
}

func (m *GlobalSpecType) GetCustomNetworkConfig() *SmsNetworkConfiguration {
	if x, ok := m.GetNetworkCfgChoice().(*GlobalSpecType_CustomNetworkConfig); ok {
		return x.CustomNetworkConfig
	}
	return nil
}

func (m *GlobalSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GlobalSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GlobalSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GlobalSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GlobalSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GlobalSpecType) GetSw() *views.VolterraSoftwareType {
	if m != nil {
		return m.Sw
	}
	return nil
}

func (m *GlobalSpecType) GetOs() *views.OperatingSystemType {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GlobalSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *GlobalSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *GlobalSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *GlobalSpecType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

func (m *GlobalSpecType) GetKubernetesUpgradeDrain() *views.KubernetesUpgradeDrain {
	if m != nil {
		return m.KubernetesUpgradeDrain
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_NoBondDevices)(nil),
		(*GlobalSpecType_BondDeviceList)(nil),
		(*GlobalSpecType_DefaultNetworkConfig)(nil),
		(*GlobalSpecType_CustomNetworkConfig)(nil),
		(*GlobalSpecType_LogsStreamingDisabled)(nil),
		(*GlobalSpecType_LogReceiver)(nil),
		(*GlobalSpecType_DefaultBlockedServices)(nil),
		(*GlobalSpecType_BlockedServices)(nil),
	}
}

// CreateSpecType
//
// x-displayName: "Create Secure Mesh site"
// Shape of the Secure Mesh site specification
type CreateSpecType struct {
	VolterraCertifiedHw     string              `protobuf:"bytes,49,opt,name=volterra_certified_hw,json=volterraCertifiedHw,proto3" json:"volterra_certified_hw,omitempty"`
	MasterNodeConfiguration []*views.MasterNode `protobuf:"bytes,53,rep,name=master_node_configuration,json=masterNodeConfiguration,proto3" json:"master_node_configuration,omitempty"`
	WorkerNodes             []string            `protobuf:"bytes,3,rep,name=worker_nodes,json=workerNodes,proto3" json:"worker_nodes,omitempty"`
	// Types that are valid to be assigned to BondChoice:
	//	*CreateSpecType_NoBondDevices
	//	*CreateSpecType_BondDeviceList
	BondChoice isCreateSpecType_BondChoice `protobuf_oneof:"bond_choice"`
	// Types that are valid to be assigned to NetworkCfgChoice:
	//	*CreateSpecType_DefaultNetworkConfig
	//	*CreateSpecType_CustomNetworkConfig
	NetworkCfgChoice isCreateSpecType_NetworkCfgChoice `protobuf_oneof:"network_cfg_choice"`
	Address          string                            `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates      *site.Coordinates                 `protobuf:"bytes,19,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*CreateSpecType_LogsStreamingDisabled
	//	*CreateSpecType_LogReceiver
	LogsReceiverChoice isCreateSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*CreateSpecType_DefaultBlockedServices
	//	*CreateSpecType_BlockedServices
	BlockedServicesChoice      isCreateSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	Sw                         *views.VolterraSoftwareType            `protobuf:"bytes,34,opt,name=sw,proto3" json:"sw,omitempty"`
	Os                         *views.OperatingSystemType             `protobuf:"bytes,35,opt,name=os,proto3" json:"os,omitempty"`
	OfflineSurvivabilityMode   *views.OfflineSurvivabilityModeType    `protobuf:"bytes,47,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType  `protobuf:"bytes,50,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
	KubernetesUpgradeDrain     *views.KubernetesUpgradeDrain          `protobuf:"bytes,51,opt,name=kubernetes_upgrade_drain,json=kubernetesUpgradeDrain,proto3" json:"kubernetes_upgrade_drain,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6228ec914a1c46a1, []int{1}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_BondChoice interface {
	isCreateSpecType_BondChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_NetworkCfgChoice interface {
	isCreateSpecType_NetworkCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_LogsReceiverChoice interface {
	isCreateSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_BlockedServicesChoice interface {
	isCreateSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_NoBondDevices struct {
	NoBondDevices *schema.Empty `protobuf:"bytes,7,opt,name=no_bond_devices,json=noBondDevices,proto3,oneof" json:"no_bond_devices,omitempty"`
}
type CreateSpecType_BondDeviceList struct {
	BondDeviceList *fleet.FleetBondDevicesListType `protobuf:"bytes,8,opt,name=bond_device_list,json=bondDeviceList,proto3,oneof" json:"bond_device_list,omitempty"`
}
type CreateSpecType_DefaultNetworkConfig struct {
	DefaultNetworkConfig *schema.Empty `protobuf:"bytes,10,opt,name=default_network_config,json=defaultNetworkConfig,proto3,oneof" json:"default_network_config,omitempty"`
}
type CreateSpecType_CustomNetworkConfig struct {
	CustomNetworkConfig *SmsNetworkConfiguration `protobuf:"bytes,11,opt,name=custom_network_config,json=customNetworkConfig,proto3,oneof" json:"custom_network_config,omitempty"`
}
type CreateSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,24,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type CreateSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,25,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type CreateSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,41,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type CreateSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,44,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}

func (*CreateSpecType_NoBondDevices) isCreateSpecType_BondChoice()                     {}
func (*CreateSpecType_BondDeviceList) isCreateSpecType_BondChoice()                    {}
func (*CreateSpecType_DefaultNetworkConfig) isCreateSpecType_NetworkCfgChoice()        {}
func (*CreateSpecType_CustomNetworkConfig) isCreateSpecType_NetworkCfgChoice()         {}
func (*CreateSpecType_LogsStreamingDisabled) isCreateSpecType_LogsReceiverChoice()     {}
func (*CreateSpecType_LogReceiver) isCreateSpecType_LogsReceiverChoice()               {}
func (*CreateSpecType_DefaultBlockedServices) isCreateSpecType_BlockedServicesChoice() {}
func (*CreateSpecType_BlockedServices) isCreateSpecType_BlockedServicesChoice()        {}

func (m *CreateSpecType) GetBondChoice() isCreateSpecType_BondChoice {
	if m != nil {
		return m.BondChoice
	}
	return nil
}
func (m *CreateSpecType) GetNetworkCfgChoice() isCreateSpecType_NetworkCfgChoice {
	if m != nil {
		return m.NetworkCfgChoice
	}
	return nil
}
func (m *CreateSpecType) GetLogsReceiverChoice() isCreateSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *CreateSpecType) GetBlockedServicesChoice() isCreateSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}

func (m *CreateSpecType) GetVolterraCertifiedHw() string {
	if m != nil {
		return m.VolterraCertifiedHw
	}
	return ""
}

func (m *CreateSpecType) GetMasterNodeConfiguration() []*views.MasterNode {
	if m != nil {
		return m.MasterNodeConfiguration
	}
	return nil
}

func (m *CreateSpecType) GetWorkerNodes() []string {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *CreateSpecType) GetNoBondDevices() *schema.Empty {
	if x, ok := m.GetBondChoice().(*CreateSpecType_NoBondDevices); ok {
		return x.NoBondDevices
	}
	return nil
}

func (m *CreateSpecType) GetBondDeviceList() *fleet.FleetBondDevicesListType {
	if x, ok := m.GetBondChoice().(*CreateSpecType_BondDeviceList); ok {
		return x.BondDeviceList
	}
	return nil
}

func (m *CreateSpecType) GetDefaultNetworkConfig() *schema.Empty {
	if x, ok := m.GetNetworkCfgChoice().(*CreateSpecType_DefaultNetworkConfig); ok {
		return x.DefaultNetworkConfig
	}
	return nil
}

func (m *CreateSpecType) GetCustomNetworkConfig() *SmsNetworkConfiguration {
	if x, ok := m.GetNetworkCfgChoice().(*CreateSpecType_CustomNetworkConfig); ok {
		return x.CustomNetworkConfig
	}
	return nil
}

func (m *CreateSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreateSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *CreateSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *CreateSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*CreateSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *CreateSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*CreateSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *CreateSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*CreateSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *CreateSpecType) GetSw() *views.VolterraSoftwareType {
	if m != nil {
		return m.Sw
	}
	return nil
}

func (m *CreateSpecType) GetOs() *views.OperatingSystemType {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *CreateSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *CreateSpecType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

func (m *CreateSpecType) GetKubernetesUpgradeDrain() *views.KubernetesUpgradeDrain {
	if m != nil {
		return m.KubernetesUpgradeDrain
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_NoBondDevices)(nil),
		(*CreateSpecType_BondDeviceList)(nil),
		(*CreateSpecType_DefaultNetworkConfig)(nil),
		(*CreateSpecType_CustomNetworkConfig)(nil),
		(*CreateSpecType_LogsStreamingDisabled)(nil),
		(*CreateSpecType_LogReceiver)(nil),
		(*CreateSpecType_DefaultBlockedServices)(nil),
		(*CreateSpecType_BlockedServices)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace Secure Mesh site"
// Shape of the Secure Mesh site specification
type ReplaceSpecType struct {
	VolterraCertifiedHw     string              `protobuf:"bytes,49,opt,name=volterra_certified_hw,json=volterraCertifiedHw,proto3" json:"volterra_certified_hw,omitempty"`
	MasterNodeConfiguration []*views.MasterNode `protobuf:"bytes,53,rep,name=master_node_configuration,json=masterNodeConfiguration,proto3" json:"master_node_configuration,omitempty"`
	WorkerNodes             []string            `protobuf:"bytes,3,rep,name=worker_nodes,json=workerNodes,proto3" json:"worker_nodes,omitempty"`
	// Types that are valid to be assigned to BondChoice:
	//	*ReplaceSpecType_NoBondDevices
	//	*ReplaceSpecType_BondDeviceList
	BondChoice isReplaceSpecType_BondChoice `protobuf_oneof:"bond_choice"`
	// Types that are valid to be assigned to NetworkCfgChoice:
	//	*ReplaceSpecType_DefaultNetworkConfig
	//	*ReplaceSpecType_CustomNetworkConfig
	NetworkCfgChoice isReplaceSpecType_NetworkCfgChoice `protobuf_oneof:"network_cfg_choice"`
	Address          string                             `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates      *site.Coordinates                  `protobuf:"bytes,19,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*ReplaceSpecType_LogsStreamingDisabled
	//	*ReplaceSpecType_LogReceiver
	LogsReceiverChoice isReplaceSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*ReplaceSpecType_DefaultBlockedServices
	//	*ReplaceSpecType_BlockedServices
	BlockedServicesChoice      isReplaceSpecType_BlockedServicesChoice `protobuf_oneof:"blocked_services_choice"`
	Sw                         *views.VolterraSoftwareType             `protobuf:"bytes,34,opt,name=sw,proto3" json:"sw,omitempty"`
	Os                         *views.OperatingSystemType              `protobuf:"bytes,35,opt,name=os,proto3" json:"os,omitempty"`
	OfflineSurvivabilityMode   *views.OfflineSurvivabilityModeType     `protobuf:"bytes,47,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType   `protobuf:"bytes,50,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
	KubernetesUpgradeDrain     *views.KubernetesUpgradeDrain           `protobuf:"bytes,51,opt,name=kubernetes_upgrade_drain,json=kubernetesUpgradeDrain,proto3" json:"kubernetes_upgrade_drain,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6228ec914a1c46a1, []int{2}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_BondChoice interface {
	isReplaceSpecType_BondChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_NetworkCfgChoice interface {
	isReplaceSpecType_NetworkCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_LogsReceiverChoice interface {
	isReplaceSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_BlockedServicesChoice interface {
	isReplaceSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_NoBondDevices struct {
	NoBondDevices *schema.Empty `protobuf:"bytes,7,opt,name=no_bond_devices,json=noBondDevices,proto3,oneof" json:"no_bond_devices,omitempty"`
}
type ReplaceSpecType_BondDeviceList struct {
	BondDeviceList *fleet.FleetBondDevicesListType `protobuf:"bytes,8,opt,name=bond_device_list,json=bondDeviceList,proto3,oneof" json:"bond_device_list,omitempty"`
}
type ReplaceSpecType_DefaultNetworkConfig struct {
	DefaultNetworkConfig *schema.Empty `protobuf:"bytes,10,opt,name=default_network_config,json=defaultNetworkConfig,proto3,oneof" json:"default_network_config,omitempty"`
}
type ReplaceSpecType_CustomNetworkConfig struct {
	CustomNetworkConfig *SmsNetworkConfiguration `protobuf:"bytes,11,opt,name=custom_network_config,json=customNetworkConfig,proto3,oneof" json:"custom_network_config,omitempty"`
}
type ReplaceSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,24,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type ReplaceSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,25,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type ReplaceSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,41,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type ReplaceSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,44,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}

func (*ReplaceSpecType_NoBondDevices) isReplaceSpecType_BondChoice()                     {}
func (*ReplaceSpecType_BondDeviceList) isReplaceSpecType_BondChoice()                    {}
func (*ReplaceSpecType_DefaultNetworkConfig) isReplaceSpecType_NetworkCfgChoice()        {}
func (*ReplaceSpecType_CustomNetworkConfig) isReplaceSpecType_NetworkCfgChoice()         {}
func (*ReplaceSpecType_LogsStreamingDisabled) isReplaceSpecType_LogsReceiverChoice()     {}
func (*ReplaceSpecType_LogReceiver) isReplaceSpecType_LogsReceiverChoice()               {}
func (*ReplaceSpecType_DefaultBlockedServices) isReplaceSpecType_BlockedServicesChoice() {}
func (*ReplaceSpecType_BlockedServices) isReplaceSpecType_BlockedServicesChoice()        {}

func (m *ReplaceSpecType) GetBondChoice() isReplaceSpecType_BondChoice {
	if m != nil {
		return m.BondChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetNetworkCfgChoice() isReplaceSpecType_NetworkCfgChoice {
	if m != nil {
		return m.NetworkCfgChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetLogsReceiverChoice() isReplaceSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetBlockedServicesChoice() isReplaceSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetVolterraCertifiedHw() string {
	if m != nil {
		return m.VolterraCertifiedHw
	}
	return ""
}

func (m *ReplaceSpecType) GetMasterNodeConfiguration() []*views.MasterNode {
	if m != nil {
		return m.MasterNodeConfiguration
	}
	return nil
}

func (m *ReplaceSpecType) GetWorkerNodes() []string {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *ReplaceSpecType) GetNoBondDevices() *schema.Empty {
	if x, ok := m.GetBondChoice().(*ReplaceSpecType_NoBondDevices); ok {
		return x.NoBondDevices
	}
	return nil
}

func (m *ReplaceSpecType) GetBondDeviceList() *fleet.FleetBondDevicesListType {
	if x, ok := m.GetBondChoice().(*ReplaceSpecType_BondDeviceList); ok {
		return x.BondDeviceList
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultNetworkConfig() *schema.Empty {
	if x, ok := m.GetNetworkCfgChoice().(*ReplaceSpecType_DefaultNetworkConfig); ok {
		return x.DefaultNetworkConfig
	}
	return nil
}

func (m *ReplaceSpecType) GetCustomNetworkConfig() *SmsNetworkConfiguration {
	if x, ok := m.GetNetworkCfgChoice().(*ReplaceSpecType_CustomNetworkConfig); ok {
		return x.CustomNetworkConfig
	}
	return nil
}

func (m *ReplaceSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReplaceSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *ReplaceSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *ReplaceSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*ReplaceSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *ReplaceSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *ReplaceSpecType) GetSw() *views.VolterraSoftwareType {
	if m != nil {
		return m.Sw
	}
	return nil
}

func (m *ReplaceSpecType) GetOs() *views.OperatingSystemType {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *ReplaceSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *ReplaceSpecType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

func (m *ReplaceSpecType) GetKubernetesUpgradeDrain() *views.KubernetesUpgradeDrain {
	if m != nil {
		return m.KubernetesUpgradeDrain
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_NoBondDevices)(nil),
		(*ReplaceSpecType_BondDeviceList)(nil),
		(*ReplaceSpecType_DefaultNetworkConfig)(nil),
		(*ReplaceSpecType_CustomNetworkConfig)(nil),
		(*ReplaceSpecType_LogsStreamingDisabled)(nil),
		(*ReplaceSpecType_LogReceiver)(nil),
		(*ReplaceSpecType_DefaultBlockedServices)(nil),
		(*ReplaceSpecType_BlockedServices)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get Secure Mesh site"
// Shape of the Secure Mesh site specification
type GetSpecType struct {
	VolterraCertifiedHw     string              `protobuf:"bytes,49,opt,name=volterra_certified_hw,json=volterraCertifiedHw,proto3" json:"volterra_certified_hw,omitempty"`
	MasterNodeConfiguration []*views.MasterNode `protobuf:"bytes,53,rep,name=master_node_configuration,json=masterNodeConfiguration,proto3" json:"master_node_configuration,omitempty"`
	WorkerNodes             []string            `protobuf:"bytes,3,rep,name=worker_nodes,json=workerNodes,proto3" json:"worker_nodes,omitempty"`
	VolterraSoftwareVersion string              `protobuf:"bytes,4,opt,name=volterra_software_version,json=volterraSoftwareVersion,proto3" json:"volterra_software_version,omitempty"`
	OperatingSystemVersion  string              `protobuf:"bytes,5,opt,name=operating_system_version,json=operatingSystemVersion,proto3" json:"operating_system_version,omitempty"`
	// Types that are valid to be assigned to BondChoice:
	//	*GetSpecType_NoBondDevices
	//	*GetSpecType_BondDeviceList
	BondChoice isGetSpecType_BondChoice `protobuf_oneof:"bond_choice"`
	// Types that are valid to be assigned to NetworkCfgChoice:
	//	*GetSpecType_DefaultNetworkConfig
	//	*GetSpecType_CustomNetworkConfig
	NetworkCfgChoice isGetSpecType_NetworkCfgChoice `protobuf_oneof:"network_cfg_choice"`
	Address          string                         `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Coordinates      *site.Coordinates              `protobuf:"bytes,19,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// Types that are valid to be assigned to LogsReceiverChoice:
	//	*GetSpecType_LogsStreamingDisabled
	//	*GetSpecType_LogReceiver
	LogsReceiverChoice isGetSpecType_LogsReceiverChoice `protobuf_oneof:"logs_receiver_choice"`
	// site_state
	//
	// x-displayName: "Site State"
	// The operational phase of the site state machine.
	SiteState site.SiteState `protobuf:"varint,30,opt,name=site_state,json=siteState,proto3,enum=ves.io.schema.site.SiteState" json:"site_state,omitempty"`
	// Types that are valid to be assigned to BlockedServicesChoice:
	//	*GetSpecType_DefaultBlockedServices
	//	*GetSpecType_BlockedServices
	BlockedServicesChoice      isGetSpecType_BlockedServicesChoice   `protobuf_oneof:"blocked_services_choice"`
	OfflineSurvivabilityMode   *views.OfflineSurvivabilityModeType   `protobuf:"bytes,47,opt,name=offline_survivability_mode,json=offlineSurvivabilityMode,proto3" json:"offline_survivability_mode,omitempty"`
	PerformanceEnhancementMode *views.PerformanceEnhancementModeType `protobuf:"bytes,50,opt,name=performance_enhancement_mode,json=performanceEnhancementMode,proto3" json:"performance_enhancement_mode,omitempty"`
	KubernetesUpgradeDrain     *views.KubernetesUpgradeDrain         `protobuf:"bytes,51,opt,name=kubernetes_upgrade_drain,json=kubernetesUpgradeDrain,proto3" json:"kubernetes_upgrade_drain,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6228ec914a1c46a1, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_BondChoice interface {
	isGetSpecType_BondChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_NetworkCfgChoice interface {
	isGetSpecType_NetworkCfgChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_LogsReceiverChoice interface {
	isGetSpecType_LogsReceiverChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_BlockedServicesChoice interface {
	isGetSpecType_BlockedServicesChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_NoBondDevices struct {
	NoBondDevices *schema.Empty `protobuf:"bytes,7,opt,name=no_bond_devices,json=noBondDevices,proto3,oneof" json:"no_bond_devices,omitempty"`
}
type GetSpecType_BondDeviceList struct {
	BondDeviceList *fleet.FleetBondDevicesListType `protobuf:"bytes,8,opt,name=bond_device_list,json=bondDeviceList,proto3,oneof" json:"bond_device_list,omitempty"`
}
type GetSpecType_DefaultNetworkConfig struct {
	DefaultNetworkConfig *schema.Empty `protobuf:"bytes,10,opt,name=default_network_config,json=defaultNetworkConfig,proto3,oneof" json:"default_network_config,omitempty"`
}
type GetSpecType_CustomNetworkConfig struct {
	CustomNetworkConfig *SmsNetworkConfiguration `protobuf:"bytes,11,opt,name=custom_network_config,json=customNetworkConfig,proto3,oneof" json:"custom_network_config,omitempty"`
}
type GetSpecType_LogsStreamingDisabled struct {
	LogsStreamingDisabled *schema.Empty `protobuf:"bytes,24,opt,name=logs_streaming_disabled,json=logsStreamingDisabled,proto3,oneof" json:"logs_streaming_disabled,omitempty"`
}
type GetSpecType_LogReceiver struct {
	LogReceiver *views.ObjectRefType `protobuf:"bytes,25,opt,name=log_receiver,json=logReceiver,proto3,oneof" json:"log_receiver,omitempty"`
}
type GetSpecType_DefaultBlockedServices struct {
	DefaultBlockedServices *schema.Empty `protobuf:"bytes,41,opt,name=default_blocked_services,json=defaultBlockedServices,proto3,oneof" json:"default_blocked_services,omitempty"`
}
type GetSpecType_BlockedServices struct {
	BlockedServices *fleet.BlockedServicesListType `protobuf:"bytes,44,opt,name=blocked_services,json=blockedServices,proto3,oneof" json:"blocked_services,omitempty"`
}

func (*GetSpecType_NoBondDevices) isGetSpecType_BondChoice()                     {}
func (*GetSpecType_BondDeviceList) isGetSpecType_BondChoice()                    {}
func (*GetSpecType_DefaultNetworkConfig) isGetSpecType_NetworkCfgChoice()        {}
func (*GetSpecType_CustomNetworkConfig) isGetSpecType_NetworkCfgChoice()         {}
func (*GetSpecType_LogsStreamingDisabled) isGetSpecType_LogsReceiverChoice()     {}
func (*GetSpecType_LogReceiver) isGetSpecType_LogsReceiverChoice()               {}
func (*GetSpecType_DefaultBlockedServices) isGetSpecType_BlockedServicesChoice() {}
func (*GetSpecType_BlockedServices) isGetSpecType_BlockedServicesChoice()        {}

func (m *GetSpecType) GetBondChoice() isGetSpecType_BondChoice {
	if m != nil {
		return m.BondChoice
	}
	return nil
}
func (m *GetSpecType) GetNetworkCfgChoice() isGetSpecType_NetworkCfgChoice {
	if m != nil {
		return m.NetworkCfgChoice
	}
	return nil
}
func (m *GetSpecType) GetLogsReceiverChoice() isGetSpecType_LogsReceiverChoice {
	if m != nil {
		return m.LogsReceiverChoice
	}
	return nil
}
func (m *GetSpecType) GetBlockedServicesChoice() isGetSpecType_BlockedServicesChoice {
	if m != nil {
		return m.BlockedServicesChoice
	}
	return nil
}

func (m *GetSpecType) GetVolterraCertifiedHw() string {
	if m != nil {
		return m.VolterraCertifiedHw
	}
	return ""
}

func (m *GetSpecType) GetMasterNodeConfiguration() []*views.MasterNode {
	if m != nil {
		return m.MasterNodeConfiguration
	}
	return nil
}

func (m *GetSpecType) GetWorkerNodes() []string {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *GetSpecType) GetVolterraSoftwareVersion() string {
	if m != nil {
		return m.VolterraSoftwareVersion
	}
	return ""
}

func (m *GetSpecType) GetOperatingSystemVersion() string {
	if m != nil {
		return m.OperatingSystemVersion
	}
	return ""
}

func (m *GetSpecType) GetNoBondDevices() *schema.Empty {
	if x, ok := m.GetBondChoice().(*GetSpecType_NoBondDevices); ok {
		return x.NoBondDevices
	}
	return nil
}

func (m *GetSpecType) GetBondDeviceList() *fleet.FleetBondDevicesListType {
	if x, ok := m.GetBondChoice().(*GetSpecType_BondDeviceList); ok {
		return x.BondDeviceList
	}
	return nil
}

func (m *GetSpecType) GetDefaultNetworkConfig() *schema.Empty {
	if x, ok := m.GetNetworkCfgChoice().(*GetSpecType_DefaultNetworkConfig); ok {
		return x.DefaultNetworkConfig
	}
	return nil
}

func (m *GetSpecType) GetCustomNetworkConfig() *SmsNetworkConfiguration {
	if x, ok := m.GetNetworkCfgChoice().(*GetSpecType_CustomNetworkConfig); ok {
		return x.CustomNetworkConfig
	}
	return nil
}

func (m *GetSpecType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetSpecType) GetCoordinates() *site.Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *GetSpecType) GetLogsStreamingDisabled() *schema.Empty {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogsStreamingDisabled); ok {
		return x.LogsStreamingDisabled
	}
	return nil
}

func (m *GetSpecType) GetLogReceiver() *views.ObjectRefType {
	if x, ok := m.GetLogsReceiverChoice().(*GetSpecType_LogReceiver); ok {
		return x.LogReceiver
	}
	return nil
}

func (m *GetSpecType) GetSiteState() site.SiteState {
	if m != nil {
		return m.SiteState
	}
	return site.ONLINE
}

func (m *GetSpecType) GetDefaultBlockedServices() *schema.Empty {
	if x, ok := m.GetBlockedServicesChoice().(*GetSpecType_DefaultBlockedServices); ok {
		return x.DefaultBlockedServices
	}
	return nil
}

func (m *GetSpecType) GetBlockedServices() *fleet.BlockedServicesListType {
	if x, ok := m.GetBlockedServicesChoice().(*GetSpecType_BlockedServices); ok {
		return x.BlockedServices
	}
	return nil
}

func (m *GetSpecType) GetOfflineSurvivabilityMode() *views.OfflineSurvivabilityModeType {
	if m != nil {
		return m.OfflineSurvivabilityMode
	}
	return nil
}

func (m *GetSpecType) GetPerformanceEnhancementMode() *views.PerformanceEnhancementModeType {
	if m != nil {
		return m.PerformanceEnhancementMode
	}
	return nil
}

func (m *GetSpecType) GetKubernetesUpgradeDrain() *views.KubernetesUpgradeDrain {
	if m != nil {
		return m.KubernetesUpgradeDrain
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_NoBondDevices)(nil),
		(*GetSpecType_BondDeviceList)(nil),
		(*GetSpecType_DefaultNetworkConfig)(nil),
		(*GetSpecType_CustomNetworkConfig)(nil),
		(*GetSpecType_LogsStreamingDisabled)(nil),
		(*GetSpecType_LogReceiver)(nil),
		(*GetSpecType_DefaultBlockedServices)(nil),
		(*GetSpecType_BlockedServices)(nil),
	}
}

// SmsNetworkConfiguration
//
// x-displayName: "SmsNetworkConfiguration"
type SmsNetworkConfiguration struct {
	// Site Local Network
	//
	// x-displayName: "Site Local Network"
	// x-required
	// Select to configure site local network
	//
	// Types that are valid to be assigned to SloChoice:
	//	*SmsNetworkConfiguration_DefaultConfig
	//	*SmsNetworkConfiguration_SloConfig
	SloChoice isSmsNetworkConfiguration_SloChoice `protobuf_oneof:"slo_choice"`
	// Site Local Inside Network
	//
	// x-displayName: "Site Local Inside Network"
	// Select to configure site local network
	//
	// Types that are valid to be assigned to SliChoice:
	//	*SmsNetworkConfiguration_DefaultSliConfig
	//	*SmsNetworkConfiguration_SliConfig
	SliChoice isSmsNetworkConfiguration_SliChoice `protobuf_oneof:"sli_choice"`
	// Select Interface Config
	//
	// x-displayName: "Interface Configuration"
	// x-required
	// Select how interfaces are configured for this site
	//
	// Types that are valid to be assigned to InterfaceChoice:
	//	*SmsNetworkConfiguration_DefaultInterfaceConfig
	//	*SmsNetworkConfiguration_InterfaceList
	InterfaceChoice isSmsNetworkConfiguration_InterfaceChoice `protobuf_oneof:"interface_choice"`
	// Manage Firewall Policy
	//
	// x-displayName: "Firewall Policy"
	// x-required
	// Manage Firewall Policy via this view
	//
	// Types that are valid to be assigned to NetworkPolicyChoice:
	//	*SmsNetworkConfiguration_NoNetworkPolicy
	//	*SmsNetworkConfiguration_ActiveNetworkPolicies
	//	*SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies
	NetworkPolicyChoice isSmsNetworkConfiguration_NetworkPolicyChoice `protobuf_oneof:"network_policy_choice"`
	// Manage Forward Proxy
	//
	// x-displayName: "Forward Proxy"
	// x-required
	// Manage Forward Proxy for this site
	//
	// Types that are valid to be assigned to ForwardProxyChoice:
	//	*SmsNetworkConfiguration_NoForwardProxy
	//	*SmsNetworkConfiguration_ActiveForwardProxyPolicies
	//	*SmsNetworkConfiguration_ForwardProxyAllowAll
	ForwardProxyChoice isSmsNetworkConfiguration_ForwardProxyChoice `protobuf_oneof:"forward_proxy_choice"`
	// Connect to Global Network
	//
	// x-displayName: "Global Network Connections"
	// x-required
	// Select global networks to connect to site local network
	//
	// Types that are valid to be assigned to GlobalNetworkChoice:
	//	*SmsNetworkConfiguration_NoGlobalNetwork
	//	*SmsNetworkConfiguration_GlobalNetworkList
	GlobalNetworkChoice isSmsNetworkConfiguration_GlobalNetworkChoice `protobuf_oneof:"global_network_choice"`
	// bgp_router_id
	//
	// x-displayName: "BGP Router ID"
	// x-example: "10.1.1.1"
	// Optional bgp router id that can be used as parameter for BGP configuration when BGP is configured to
	// fetch BGP router ID from site object.
	BgpRouterId string `protobuf:"bytes,18,opt,name=bgp_router_id,json=bgpRouterId,proto3" json:"bgp_router_id,omitempty"`
	// bgp_peer_address
	//
	// x-displayName: "BGP Peer Address"
	// x-example: "10.1.1.1"
	// Optional bgp peer address that can be used as parameter for BGP configuration when BGP is configured
	// to fetch BGP peer address from site Object. This can be used to change peer address per site in fleet.
	BgpPeerAddress string `protobuf:"bytes,19,opt,name=bgp_peer_address,json=bgpPeerAddress,proto3" json:"bgp_peer_address,omitempty"`
	// vip_vrrp_mode
	//
	// x-displayName: "VIP Advertisement Mode"
	// Optional VIP VRRP advertisement mode. This controls the ARP behavior for  Common VIP
	// addresses, when it is configured. When turned on, the Master VER would advertise gratuitous ARPs and
	// would respond to ARP queries for these addresses. When turned off, ARP responses are not given by VER.
	//
	// If BGP is configured, common VIP addresses will be advertised by BGP. This is
	// irrespective of the vrrp mode.
	//
	// When Outside VIP / Inside VIP are configured, it is recommended to turn on vrrp and also configure BGP.
	VipVrrpMode schema.VipVrrpType `protobuf:"varint,20,opt,name=vip_vrrp_mode,json=vipVrrpMode,proto3,enum=ves.io.schema.VipVrrpType" json:"vip_vrrp_mode,omitempty"`
	// tunnel_dead_timeout
	//
	// x-displayName: "Tunnel Dead Timeout (msec)"
	// x-example: "0"
	// Time interval, in millisec, within which any ipsec / ssl connection from the site going down is detected.
	// When not set (== 0), a default value of 10000 msec will be used.
	TunnelDeadTimeout uint32 `protobuf:"varint,32,opt,name=tunnel_dead_timeout,json=tunnelDeadTimeout,proto3" json:"tunnel_dead_timeout,omitempty"`
	// Site Mesh Group Connection Type
	//
	// x-displayName: "Site Mesh Group Connection Type"
	// x-required
	// Select how the site mesh group needs to be connected
	//
	// Types that are valid to be assigned to SiteMeshGroupChoice:
	//	*SmsNetworkConfiguration_SmConnectionPublicIp
	//	*SmsNetworkConfiguration_SmConnectionPvtIp
	SiteMeshGroupChoice isSmsNetworkConfiguration_SiteMeshGroupChoice `protobuf_oneof:"site_mesh_group_choice"`
	// bgp_peer_address_v6
	//
	// x-displayName: "BGP Peer IPv6 Address"
	// x-example: "3c0f:7554:352a:a2dc:333f:67c5:c2b5:7326"
	// Optional bgp peer IPv6  address that can be used as parameter for BGP configuration when BGP is configured
	// to fetch BGP peer IPv6  address from site Object. This can be used to change peer IPv6  address per site in fleet.
	BgpPeerAddressV6 string `protobuf:"bytes,54,opt,name=bgp_peer_address_v6,json=bgpPeerAddressV6,proto3" json:"bgp_peer_address_v6,omitempty"`
}

func (m *SmsNetworkConfiguration) Reset()      { *m = SmsNetworkConfiguration{} }
func (*SmsNetworkConfiguration) ProtoMessage() {}
func (*SmsNetworkConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_6228ec914a1c46a1, []int{4}
}
func (m *SmsNetworkConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmsNetworkConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SmsNetworkConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmsNetworkConfiguration.Merge(m, src)
}
func (m *SmsNetworkConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *SmsNetworkConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SmsNetworkConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SmsNetworkConfiguration proto.InternalMessageInfo

type isSmsNetworkConfiguration_SloChoice interface {
	isSmsNetworkConfiguration_SloChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSmsNetworkConfiguration_SliChoice interface {
	isSmsNetworkConfiguration_SliChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSmsNetworkConfiguration_InterfaceChoice interface {
	isSmsNetworkConfiguration_InterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSmsNetworkConfiguration_NetworkPolicyChoice interface {
	isSmsNetworkConfiguration_NetworkPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSmsNetworkConfiguration_ForwardProxyChoice interface {
	isSmsNetworkConfiguration_ForwardProxyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSmsNetworkConfiguration_GlobalNetworkChoice interface {
	isSmsNetworkConfiguration_GlobalNetworkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSmsNetworkConfiguration_SiteMeshGroupChoice interface {
	isSmsNetworkConfiguration_SiteMeshGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SmsNetworkConfiguration_DefaultConfig struct {
	DefaultConfig *schema.Empty `protobuf:"bytes,2,opt,name=default_config,json=defaultConfig,proto3,oneof" json:"default_config,omitempty"`
}
type SmsNetworkConfiguration_SloConfig struct {
	SloConfig *VnConfiguration `protobuf:"bytes,3,opt,name=slo_config,json=sloConfig,proto3,oneof" json:"slo_config,omitempty"`
}
type SmsNetworkConfiguration_DefaultSliConfig struct {
	DefaultSliConfig *schema.Empty `protobuf:"bytes,25,opt,name=default_sli_config,json=defaultSliConfig,proto3,oneof" json:"default_sli_config,omitempty"`
}
type SmsNetworkConfiguration_SliConfig struct {
	SliConfig *VnConfiguration `protobuf:"bytes,26,opt,name=sli_config,json=sliConfig,proto3,oneof" json:"sli_config,omitempty"`
}
type SmsNetworkConfiguration_DefaultInterfaceConfig struct {
	DefaultInterfaceConfig *schema.Empty `protobuf:"bytes,5,opt,name=default_interface_config,json=defaultInterfaceConfig,proto3,oneof" json:"default_interface_config,omitempty"`
}
type SmsNetworkConfiguration_InterfaceList struct {
	InterfaceList *InterfaceListType `protobuf:"bytes,6,opt,name=interface_list,json=interfaceList,proto3,oneof" json:"interface_list,omitempty"`
}
type SmsNetworkConfiguration_NoNetworkPolicy struct {
	NoNetworkPolicy *schema.Empty `protobuf:"bytes,8,opt,name=no_network_policy,json=noNetworkPolicy,proto3,oneof" json:"no_network_policy,omitempty"`
}
type SmsNetworkConfiguration_ActiveNetworkPolicies struct {
	ActiveNetworkPolicies *network_firewall.ActiveNetworkPoliciesType `protobuf:"bytes,9,opt,name=active_network_policies,json=activeNetworkPolicies,proto3,oneof" json:"active_network_policies,omitempty"`
}
type SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies struct {
	ActiveEnhancedFirewallPolicies *network_firewall.ActiveEnhancedFirewallPoliciesType `protobuf:"bytes,27,opt,name=active_enhanced_firewall_policies,json=activeEnhancedFirewallPolicies,proto3,oneof" json:"active_enhanced_firewall_policies,omitempty"`
}
type SmsNetworkConfiguration_NoForwardProxy struct {
	NoForwardProxy *schema.Empty `protobuf:"bytes,11,opt,name=no_forward_proxy,json=noForwardProxy,proto3,oneof" json:"no_forward_proxy,omitempty"`
}
type SmsNetworkConfiguration_ActiveForwardProxyPolicies struct {
	ActiveForwardProxyPolicies *network_firewall.ActiveForwardProxyPoliciesType `protobuf:"bytes,12,opt,name=active_forward_proxy_policies,json=activeForwardProxyPolicies,proto3,oneof" json:"active_forward_proxy_policies,omitempty"`
}
type SmsNetworkConfiguration_ForwardProxyAllowAll struct {
	ForwardProxyAllowAll *schema.Empty `protobuf:"bytes,13,opt,name=forward_proxy_allow_all,json=forwardProxyAllowAll,proto3,oneof" json:"forward_proxy_allow_all,omitempty"`
}
type SmsNetworkConfiguration_NoGlobalNetwork struct {
	NoGlobalNetwork *schema.Empty `protobuf:"bytes,15,opt,name=no_global_network,json=noGlobalNetwork,proto3,oneof" json:"no_global_network,omitempty"`
}
type SmsNetworkConfiguration_GlobalNetworkList struct {
	GlobalNetworkList *views.GlobalNetworkConnectionListType `protobuf:"bytes,16,opt,name=global_network_list,json=globalNetworkList,proto3,oneof" json:"global_network_list,omitempty"`
}
type SmsNetworkConfiguration_SmConnectionPublicIp struct {
	SmConnectionPublicIp *schema.Empty `protobuf:"bytes,51,opt,name=sm_connection_public_ip,json=smConnectionPublicIp,proto3,oneof" json:"sm_connection_public_ip,omitempty"`
}
type SmsNetworkConfiguration_SmConnectionPvtIp struct {
	SmConnectionPvtIp *schema.Empty `protobuf:"bytes,52,opt,name=sm_connection_pvt_ip,json=smConnectionPvtIp,proto3,oneof" json:"sm_connection_pvt_ip,omitempty"`
}

func (*SmsNetworkConfiguration_DefaultConfig) isSmsNetworkConfiguration_SloChoice()                {}
func (*SmsNetworkConfiguration_SloConfig) isSmsNetworkConfiguration_SloChoice()                    {}
func (*SmsNetworkConfiguration_DefaultSliConfig) isSmsNetworkConfiguration_SliChoice()             {}
func (*SmsNetworkConfiguration_SliConfig) isSmsNetworkConfiguration_SliChoice()                    {}
func (*SmsNetworkConfiguration_DefaultInterfaceConfig) isSmsNetworkConfiguration_InterfaceChoice() {}
func (*SmsNetworkConfiguration_InterfaceList) isSmsNetworkConfiguration_InterfaceChoice()          {}
func (*SmsNetworkConfiguration_NoNetworkPolicy) isSmsNetworkConfiguration_NetworkPolicyChoice()    {}
func (*SmsNetworkConfiguration_ActiveNetworkPolicies) isSmsNetworkConfiguration_NetworkPolicyChoice() {
}
func (*SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies) isSmsNetworkConfiguration_NetworkPolicyChoice() {
}
func (*SmsNetworkConfiguration_NoForwardProxy) isSmsNetworkConfiguration_ForwardProxyChoice() {}
func (*SmsNetworkConfiguration_ActiveForwardProxyPolicies) isSmsNetworkConfiguration_ForwardProxyChoice() {
}
func (*SmsNetworkConfiguration_ForwardProxyAllowAll) isSmsNetworkConfiguration_ForwardProxyChoice() {}
func (*SmsNetworkConfiguration_NoGlobalNetwork) isSmsNetworkConfiguration_GlobalNetworkChoice()     {}
func (*SmsNetworkConfiguration_GlobalNetworkList) isSmsNetworkConfiguration_GlobalNetworkChoice()   {}
func (*SmsNetworkConfiguration_SmConnectionPublicIp) isSmsNetworkConfiguration_SiteMeshGroupChoice() {
}
func (*SmsNetworkConfiguration_SmConnectionPvtIp) isSmsNetworkConfiguration_SiteMeshGroupChoice() {}

func (m *SmsNetworkConfiguration) GetSloChoice() isSmsNetworkConfiguration_SloChoice {
	if m != nil {
		return m.SloChoice
	}
	return nil
}
func (m *SmsNetworkConfiguration) GetSliChoice() isSmsNetworkConfiguration_SliChoice {
	if m != nil {
		return m.SliChoice
	}
	return nil
}
func (m *SmsNetworkConfiguration) GetInterfaceChoice() isSmsNetworkConfiguration_InterfaceChoice {
	if m != nil {
		return m.InterfaceChoice
	}
	return nil
}
func (m *SmsNetworkConfiguration) GetNetworkPolicyChoice() isSmsNetworkConfiguration_NetworkPolicyChoice {
	if m != nil {
		return m.NetworkPolicyChoice
	}
	return nil
}
func (m *SmsNetworkConfiguration) GetForwardProxyChoice() isSmsNetworkConfiguration_ForwardProxyChoice {
	if m != nil {
		return m.ForwardProxyChoice
	}
	return nil
}
func (m *SmsNetworkConfiguration) GetGlobalNetworkChoice() isSmsNetworkConfiguration_GlobalNetworkChoice {
	if m != nil {
		return m.GlobalNetworkChoice
	}
	return nil
}
func (m *SmsNetworkConfiguration) GetSiteMeshGroupChoice() isSmsNetworkConfiguration_SiteMeshGroupChoice {
	if m != nil {
		return m.SiteMeshGroupChoice
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetDefaultConfig() *schema.Empty {
	if x, ok := m.GetSloChoice().(*SmsNetworkConfiguration_DefaultConfig); ok {
		return x.DefaultConfig
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetSloConfig() *VnConfiguration {
	if x, ok := m.GetSloChoice().(*SmsNetworkConfiguration_SloConfig); ok {
		return x.SloConfig
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetDefaultSliConfig() *schema.Empty {
	if x, ok := m.GetSliChoice().(*SmsNetworkConfiguration_DefaultSliConfig); ok {
		return x.DefaultSliConfig
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetSliConfig() *VnConfiguration {
	if x, ok := m.GetSliChoice().(*SmsNetworkConfiguration_SliConfig); ok {
		return x.SliConfig
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetDefaultInterfaceConfig() *schema.Empty {
	if x, ok := m.GetInterfaceChoice().(*SmsNetworkConfiguration_DefaultInterfaceConfig); ok {
		return x.DefaultInterfaceConfig
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetInterfaceList() *InterfaceListType {
	if x, ok := m.GetInterfaceChoice().(*SmsNetworkConfiguration_InterfaceList); ok {
		return x.InterfaceList
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetNoNetworkPolicy() *schema.Empty {
	if x, ok := m.GetNetworkPolicyChoice().(*SmsNetworkConfiguration_NoNetworkPolicy); ok {
		return x.NoNetworkPolicy
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetActiveNetworkPolicies() *network_firewall.ActiveNetworkPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*SmsNetworkConfiguration_ActiveNetworkPolicies); ok {
		return x.ActiveNetworkPolicies
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetActiveEnhancedFirewallPolicies() *network_firewall.ActiveEnhancedFirewallPoliciesType {
	if x, ok := m.GetNetworkPolicyChoice().(*SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies); ok {
		return x.ActiveEnhancedFirewallPolicies
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetNoForwardProxy() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*SmsNetworkConfiguration_NoForwardProxy); ok {
		return x.NoForwardProxy
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetActiveForwardProxyPolicies() *network_firewall.ActiveForwardProxyPoliciesType {
	if x, ok := m.GetForwardProxyChoice().(*SmsNetworkConfiguration_ActiveForwardProxyPolicies); ok {
		return x.ActiveForwardProxyPolicies
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetForwardProxyAllowAll() *schema.Empty {
	if x, ok := m.GetForwardProxyChoice().(*SmsNetworkConfiguration_ForwardProxyAllowAll); ok {
		return x.ForwardProxyAllowAll
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetNoGlobalNetwork() *schema.Empty {
	if x, ok := m.GetGlobalNetworkChoice().(*SmsNetworkConfiguration_NoGlobalNetwork); ok {
		return x.NoGlobalNetwork
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetGlobalNetworkList() *views.GlobalNetworkConnectionListType {
	if x, ok := m.GetGlobalNetworkChoice().(*SmsNetworkConfiguration_GlobalNetworkList); ok {
		return x.GlobalNetworkList
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetBgpRouterId() string {
	if m != nil {
		return m.BgpRouterId
	}
	return ""
}

func (m *SmsNetworkConfiguration) GetBgpPeerAddress() string {
	if m != nil {
		return m.BgpPeerAddress
	}
	return ""
}

func (m *SmsNetworkConfiguration) GetVipVrrpMode() schema.VipVrrpType {
	if m != nil {
		return m.VipVrrpMode
	}
	return schema.VIP_VRRP_INVALID
}

func (m *SmsNetworkConfiguration) GetTunnelDeadTimeout() uint32 {
	if m != nil {
		return m.TunnelDeadTimeout
	}
	return 0
}

func (m *SmsNetworkConfiguration) GetSmConnectionPublicIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*SmsNetworkConfiguration_SmConnectionPublicIp); ok {
		return x.SmConnectionPublicIp
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetSmConnectionPvtIp() *schema.Empty {
	if x, ok := m.GetSiteMeshGroupChoice().(*SmsNetworkConfiguration_SmConnectionPvtIp); ok {
		return x.SmConnectionPvtIp
	}
	return nil
}

func (m *SmsNetworkConfiguration) GetBgpPeerAddressV6() string {
	if m != nil {
		return m.BgpPeerAddressV6
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SmsNetworkConfiguration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SmsNetworkConfiguration_DefaultConfig)(nil),
		(*SmsNetworkConfiguration_SloConfig)(nil),
		(*SmsNetworkConfiguration_DefaultSliConfig)(nil),
		(*SmsNetworkConfiguration_SliConfig)(nil),
		(*SmsNetworkConfiguration_DefaultInterfaceConfig)(nil),
		(*SmsNetworkConfiguration_InterfaceList)(nil),
		(*SmsNetworkConfiguration_NoNetworkPolicy)(nil),
		(*SmsNetworkConfiguration_ActiveNetworkPolicies)(nil),
		(*SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies)(nil),
		(*SmsNetworkConfiguration_NoForwardProxy)(nil),
		(*SmsNetworkConfiguration_ActiveForwardProxyPolicies)(nil),
		(*SmsNetworkConfiguration_ForwardProxyAllowAll)(nil),
		(*SmsNetworkConfiguration_NoGlobalNetwork)(nil),
		(*SmsNetworkConfiguration_GlobalNetworkList)(nil),
		(*SmsNetworkConfiguration_SmConnectionPublicIp)(nil),
		(*SmsNetworkConfiguration_SmConnectionPvtIp)(nil),
	}
}

// Virtual Network Configuration
//
// x-displayName: "Site Local Network Configuration"
// Site local network configuration
type VnConfiguration struct {
	// Network labels
	//
	// x-displayName: "Network Labels"
	// x-example: "value"
	// Add Labels for this network, these labels can be used in firewall policy
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Common V4 VIP
	//
	// x-displayName: "Common V4 VIP"
	// x-example: "10.1.1.1"
	// Optional common virtual V4 IP  across all nodes to be used as automatic VIP.
	Vip string `protobuf:"bytes,5,opt,name=vip,proto3" json:"vip,omitempty"`
	// Common V6 VIP
	//
	// x-displayName: "Common V6 VIP"
	// x-example: "2001::1"
	// Optional common virtual V6 IP  across all nodes to be used as automatic VIP.
	VipV6 string `protobuf:"bytes,17,opt,name=vip_v6,json=vipV6,proto3" json:"vip_v6,omitempty"`
	// nameserver
	//
	// x-displayName: "DNS V4 Server"
	// x-example: "10.1.1.1"
	// Optional DNS V4 server IP to be used for name resolution
	Nameserver string `protobuf:"bytes,6,opt,name=nameserver,proto3" json:"nameserver,omitempty"`
	// nameserver_v6
	//
	// x-displayName: "DNS V6 Server"
	// x-example: "1001::1"
	// Optional DNS V6 server IP to be used for name resolution
	NameserverV6 string `protobuf:"bytes,18,opt,name=nameserver_v6,json=nameserverV6,proto3" json:"nameserver_v6,omitempty"`
	// Manage Static Routes
	//
	// x-displayName: "Manage Static Routes"
	// x-required
	// Add static routes to network. Used to reach indirectly connected subnets.
	//
	// Types that are valid to be assigned to StaticRouteChoice:
	//	*VnConfiguration_NoStaticRoutes
	//	*VnConfiguration_StaticRoutes
	StaticRouteChoice isVnConfiguration_StaticRouteChoice `protobuf_oneof:"static_route_choice"`
	// Manage IPv6 Static Routes
	//
	// x-displayName: "Manage IPv6 Static Routes"
	// x-required
	// Add IPv6 static routes to network. Used to reach indirectly connected IPv6 subnets.
	//
	// Types that are valid to be assigned to StaticV6RouteChoice:
	//	*VnConfiguration_NoV6StaticRoutes
	//	*VnConfiguration_StaticV6Routes
	StaticV6RouteChoice isVnConfiguration_StaticV6RouteChoice `protobuf_oneof:"static_v6_route_choice"`
	// Select DC Cluster Group
	//
	// x-displayName: "DC Cluster Group"
	// x-required
	// Is this site member of a dc cluster group via this network
	//
	// Types that are valid to be assigned to DcClusterGroupChoice:
	//	*VnConfiguration_NoDcClusterGroup
	//	*VnConfiguration_DcClusterGroup
	DcClusterGroupChoice isVnConfiguration_DcClusterGroupChoice `protobuf_oneof:"dc_cluster_group_choice"`
	//  DC Cluster group connectivity interface
	//
	// x-displayName: "DC cluster Group connectivity interface"
	// This Secure Mesh is member of dc cluster group and connected to network over this interface. By default it takes default gateway interface.
	DcClusterGroupInterface []*views.ObjectRefType `protobuf:"bytes,13,rep,name=dc_cluster_group_interface,json=dcClusterGroupInterface,proto3" json:"dc_cluster_group_interface,omitempty"`
}

func (m *VnConfiguration) Reset()      { *m = VnConfiguration{} }
func (*VnConfiguration) ProtoMessage() {}
func (*VnConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_6228ec914a1c46a1, []int{5}
}
func (m *VnConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VnConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VnConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VnConfiguration.Merge(m, src)
}
func (m *VnConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *VnConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_VnConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_VnConfiguration proto.InternalMessageInfo

type isVnConfiguration_StaticRouteChoice interface {
	isVnConfiguration_StaticRouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVnConfiguration_StaticV6RouteChoice interface {
	isVnConfiguration_StaticV6RouteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVnConfiguration_DcClusterGroupChoice interface {
	isVnConfiguration_DcClusterGroupChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VnConfiguration_NoStaticRoutes struct {
	NoStaticRoutes *schema.Empty `protobuf:"bytes,8,opt,name=no_static_routes,json=noStaticRoutes,proto3,oneof" json:"no_static_routes,omitempty"`
}
type VnConfiguration_StaticRoutes struct {
	StaticRoutes *StaticRoutesListType `protobuf:"bytes,9,opt,name=static_routes,json=staticRoutes,proto3,oneof" json:"static_routes,omitempty"`
}
type VnConfiguration_NoV6StaticRoutes struct {
	NoV6StaticRoutes *schema.Empty `protobuf:"bytes,15,opt,name=no_v6_static_routes,json=noV6StaticRoutes,proto3,oneof" json:"no_v6_static_routes,omitempty"`
}
type VnConfiguration_StaticV6Routes struct {
	StaticV6Routes *virtual_network.StaticV6RoutesListType `protobuf:"bytes,16,opt,name=static_v6_routes,json=staticV6Routes,proto3,oneof" json:"static_v6_routes,omitempty"`
}
type VnConfiguration_NoDcClusterGroup struct {
	NoDcClusterGroup *schema.Empty `protobuf:"bytes,11,opt,name=no_dc_cluster_group,json=noDcClusterGroup,proto3,oneof" json:"no_dc_cluster_group,omitempty"`
}
type VnConfiguration_DcClusterGroup struct {
	DcClusterGroup *views.ObjectRefType `protobuf:"bytes,12,opt,name=dc_cluster_group,json=dcClusterGroup,proto3,oneof" json:"dc_cluster_group,omitempty"`
}

func (*VnConfiguration_NoStaticRoutes) isVnConfiguration_StaticRouteChoice()      {}
func (*VnConfiguration_StaticRoutes) isVnConfiguration_StaticRouteChoice()        {}
func (*VnConfiguration_NoV6StaticRoutes) isVnConfiguration_StaticV6RouteChoice()  {}
func (*VnConfiguration_StaticV6Routes) isVnConfiguration_StaticV6RouteChoice()    {}
func (*VnConfiguration_NoDcClusterGroup) isVnConfiguration_DcClusterGroupChoice() {}
func (*VnConfiguration_DcClusterGroup) isVnConfiguration_DcClusterGroupChoice()   {}

func (m *VnConfiguration) GetStaticRouteChoice() isVnConfiguration_StaticRouteChoice {
	if m != nil {
		return m.StaticRouteChoice
	}
	return nil
}
func (m *VnConfiguration) GetStaticV6RouteChoice() isVnConfiguration_StaticV6RouteChoice {
	if m != nil {
		return m.StaticV6RouteChoice
	}
	return nil
}
func (m *VnConfiguration) GetDcClusterGroupChoice() isVnConfiguration_DcClusterGroupChoice {
	if m != nil {
		return m.DcClusterGroupChoice
	}
	return nil
}

func (m *VnConfiguration) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *VnConfiguration) GetVip() string {
	if m != nil {
		return m.Vip
	}
	return ""
}

func (m *VnConfiguration) GetVipV6() string {
	if m != nil {
		return m.VipV6
	}
	return ""
}

func (m *VnConfiguration) GetNameserver() string {
	if m != nil {
		return m.Nameserver
	}
	return ""
}

func (m *VnConfiguration) GetNameserverV6() string {
	if m != nil {
		return m.NameserverV6
	}
	return ""
}

func (m *VnConfiguration) GetNoStaticRoutes() *schema.Empty {
	if x, ok := m.GetStaticRouteChoice().(*VnConfiguration_NoStaticRoutes); ok {
		return x.NoStaticRoutes
	}
	return nil
}

func (m *VnConfiguration) GetStaticRoutes() *StaticRoutesListType {
	if x, ok := m.GetStaticRouteChoice().(*VnConfiguration_StaticRoutes); ok {
		return x.StaticRoutes
	}
	return nil
}

func (m *VnConfiguration) GetNoV6StaticRoutes() *schema.Empty {
	if x, ok := m.GetStaticV6RouteChoice().(*VnConfiguration_NoV6StaticRoutes); ok {
		return x.NoV6StaticRoutes
	}
	return nil
}

func (m *VnConfiguration) GetStaticV6Routes() *virtual_network.StaticV6RoutesListType {
	if x, ok := m.GetStaticV6RouteChoice().(*VnConfiguration_StaticV6Routes); ok {
		return x.StaticV6Routes
	}
	return nil
}

func (m *VnConfiguration) GetNoDcClusterGroup() *schema.Empty {
	if x, ok := m.GetDcClusterGroupChoice().(*VnConfiguration_NoDcClusterGroup); ok {
		return x.NoDcClusterGroup
	}
	return nil
}

func (m *VnConfiguration) GetDcClusterGroup() *views.ObjectRefType {
	if x, ok := m.GetDcClusterGroupChoice().(*VnConfiguration_DcClusterGroup); ok {
		return x.DcClusterGroup
	}
	return nil
}

func (m *VnConfiguration) GetDcClusterGroupInterface() []*views.ObjectRefType {
	if m != nil {
		return m.DcClusterGroupInterface
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VnConfiguration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VnConfiguration_NoStaticRoutes)(nil),
		(*VnConfiguration_StaticRoutes)(nil),
		(*VnConfiguration_NoV6StaticRoutes)(nil),
		(*VnConfiguration_StaticV6Routes)(nil),
		(*VnConfiguration_NoDcClusterGroup)(nil),
		(*VnConfiguration_DcClusterGroup)(nil),
	}
}

// Static Routes List
//
// x-displayName: "Static Routes List"
// List of static routes
type StaticRoutesListType struct {
	// static_routes
	//
	// x-displayName: "Static Routes"
	// x-required
	// List of static routes
	StaticRoutes []*virtual_network.StaticRouteViewType `protobuf:"bytes,1,rep,name=static_routes,json=staticRoutes,proto3" json:"static_routes,omitempty"`
}

func (m *StaticRoutesListType) Reset()      { *m = StaticRoutesListType{} }
func (*StaticRoutesListType) ProtoMessage() {}
func (*StaticRoutesListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6228ec914a1c46a1, []int{6}
}
func (m *StaticRoutesListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StaticRoutesListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StaticRoutesListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticRoutesListType.Merge(m, src)
}
func (m *StaticRoutesListType) XXX_Size() int {
	return m.Size()
}
func (m *StaticRoutesListType) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticRoutesListType.DiscardUnknown(m)
}

var xxx_messageInfo_StaticRoutesListType proto.InternalMessageInfo

func (m *StaticRoutesListType) GetStaticRoutes() []*virtual_network.StaticRouteViewType {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

// List of Interfaces
//
// x-displayName: "List of Interface"
// Configure network interfaces for this Secure Mesh site
type InterfaceListType struct {
	// List of Interfaces
	//
	// x-displayName: "List of Interface"
	// x-required
	// Configure network interfaces for this Secure Mesh site
	Interfaces []*Interface `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (m *InterfaceListType) Reset()      { *m = InterfaceListType{} }
func (*InterfaceListType) ProtoMessage() {}
func (*InterfaceListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6228ec914a1c46a1, []int{7}
}
func (m *InterfaceListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfaceListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InterfaceListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceListType.Merge(m, src)
}
func (m *InterfaceListType) XXX_Size() int {
	return m.Size()
}
func (m *InterfaceListType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceListType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceListType proto.InternalMessageInfo

func (m *InterfaceListType) GetInterfaces() []*Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

// Interface
//
// x-displayName: "Interface"
// Interface definition
type Interface struct {
	// Interface Description
	//
	// x-displayName: "Interface Description"
	// x-example: "value"
	// Description for this Interface
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Interface labels
	//
	// x-displayName: "Interface Labels"
	// x-example: "value"
	// Add Labels for this Interface, these labels can be used in firewall policy
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Interface Config Type
	//
	// x-displayName: "Interface Config Type"
	// x-required
	// Select the interface configuration type
	//
	// Types that are valid to be assigned to InterfaceChoice:
	//	*Interface_EthernetInterface
	//	*Interface_DedicatedInterface
	//	*Interface_DedicatedManagementInterface
	//	*Interface_LoopbackInterface
	InterfaceChoice isInterface_InterfaceChoice `protobuf_oneof:"interface_choice"`
	// DC Cluster Group Connectivity
	//
	// x-displayName: "DC Cluster Group Connectivity"
	// x-required
	// Controls whether this interface will be used to connect to other sites in DC Cluster Group.
	// If no interfaces are enabled, the default gateway interface will be used.
	//
	// Types that are valid to be assigned to DcClusterGroupConnectivityInterfaceChoice:
	//	*Interface_DcClusterGroupConnectivityInterfaceDisabled
	//	*Interface_DcClusterGroupConnectivityInterfaceEnabled
	DcClusterGroupConnectivityInterfaceChoice isInterface_DcClusterGroupConnectivityInterfaceChoice `protobuf_oneof:"dc_cluster_group_connectivity_interface_choice"`
}

func (m *Interface) Reset()      { *m = Interface{} }
func (*Interface) ProtoMessage() {}
func (*Interface) Descriptor() ([]byte, []int) {
	return fileDescriptor_6228ec914a1c46a1, []int{8}
}
func (m *Interface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Interface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface.Merge(m, src)
}
func (m *Interface) XXX_Size() int {
	return m.Size()
}
func (m *Interface) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface.DiscardUnknown(m)
}

var xxx_messageInfo_Interface proto.InternalMessageInfo

type isInterface_InterfaceChoice interface {
	isInterface_InterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isInterface_DcClusterGroupConnectivityInterfaceChoice interface {
	isInterface_DcClusterGroupConnectivityInterfaceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Interface_EthernetInterface struct {
	EthernetInterface *network_interface.EthernetInterfaceType `protobuf:"bytes,5,opt,name=ethernet_interface,json=ethernetInterface,proto3,oneof" json:"ethernet_interface,omitempty"`
}
type Interface_DedicatedInterface struct {
	DedicatedInterface *network_interface.DedicatedInterfaceType `protobuf:"bytes,6,opt,name=dedicated_interface,json=dedicatedInterface,proto3,oneof" json:"dedicated_interface,omitempty"`
}
type Interface_DedicatedManagementInterface struct {
	DedicatedManagementInterface *network_interface.DedicatedManagementInterfaceType `protobuf:"bytes,7,opt,name=dedicated_management_interface,json=dedicatedManagementInterface,proto3,oneof" json:"dedicated_management_interface,omitempty"`
}
type Interface_LoopbackInterface struct {
	LoopbackInterface *network_interface.LoopbackInterfaceType `protobuf:"bytes,8,opt,name=loopback_interface,json=loopbackInterface,proto3,oneof" json:"loopback_interface,omitempty"`
}
type Interface_DcClusterGroupConnectivityInterfaceDisabled struct {
	DcClusterGroupConnectivityInterfaceDisabled *schema.Empty `protobuf:"bytes,10,opt,name=dc_cluster_group_connectivity_interface_disabled,json=dcClusterGroupConnectivityInterfaceDisabled,proto3,oneof" json:"dc_cluster_group_connectivity_interface_disabled,omitempty"`
}
type Interface_DcClusterGroupConnectivityInterfaceEnabled struct {
	DcClusterGroupConnectivityInterfaceEnabled *schema.Empty `protobuf:"bytes,11,opt,name=dc_cluster_group_connectivity_interface_enabled,json=dcClusterGroupConnectivityInterfaceEnabled,proto3,oneof" json:"dc_cluster_group_connectivity_interface_enabled,omitempty"`
}

func (*Interface_EthernetInterface) isInterface_InterfaceChoice()            {}
func (*Interface_DedicatedInterface) isInterface_InterfaceChoice()           {}
func (*Interface_DedicatedManagementInterface) isInterface_InterfaceChoice() {}
func (*Interface_LoopbackInterface) isInterface_InterfaceChoice()            {}
func (*Interface_DcClusterGroupConnectivityInterfaceDisabled) isInterface_DcClusterGroupConnectivityInterfaceChoice() {
}
func (*Interface_DcClusterGroupConnectivityInterfaceEnabled) isInterface_DcClusterGroupConnectivityInterfaceChoice() {
}

func (m *Interface) GetInterfaceChoice() isInterface_InterfaceChoice {
	if m != nil {
		return m.InterfaceChoice
	}
	return nil
}
func (m *Interface) GetDcClusterGroupConnectivityInterfaceChoice() isInterface_DcClusterGroupConnectivityInterfaceChoice {
	if m != nil {
		return m.DcClusterGroupConnectivityInterfaceChoice
	}
	return nil
}

func (m *Interface) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Interface) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Interface) GetEthernetInterface() *network_interface.EthernetInterfaceType {
	if x, ok := m.GetInterfaceChoice().(*Interface_EthernetInterface); ok {
		return x.EthernetInterface
	}
	return nil
}

func (m *Interface) GetDedicatedInterface() *network_interface.DedicatedInterfaceType {
	if x, ok := m.GetInterfaceChoice().(*Interface_DedicatedInterface); ok {
		return x.DedicatedInterface
	}
	return nil
}

func (m *Interface) GetDedicatedManagementInterface() *network_interface.DedicatedManagementInterfaceType {
	if x, ok := m.GetInterfaceChoice().(*Interface_DedicatedManagementInterface); ok {
		return x.DedicatedManagementInterface
	}
	return nil
}

func (m *Interface) GetLoopbackInterface() *network_interface.LoopbackInterfaceType {
	if x, ok := m.GetInterfaceChoice().(*Interface_LoopbackInterface); ok {
		return x.LoopbackInterface
	}
	return nil
}

func (m *Interface) GetDcClusterGroupConnectivityInterfaceDisabled() *schema.Empty {
	if x, ok := m.GetDcClusterGroupConnectivityInterfaceChoice().(*Interface_DcClusterGroupConnectivityInterfaceDisabled); ok {
		return x.DcClusterGroupConnectivityInterfaceDisabled
	}
	return nil
}

func (m *Interface) GetDcClusterGroupConnectivityInterfaceEnabled() *schema.Empty {
	if x, ok := m.GetDcClusterGroupConnectivityInterfaceChoice().(*Interface_DcClusterGroupConnectivityInterfaceEnabled); ok {
		return x.DcClusterGroupConnectivityInterfaceEnabled
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Interface) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Interface_EthernetInterface)(nil),
		(*Interface_DedicatedInterface)(nil),
		(*Interface_DedicatedManagementInterface)(nil),
		(*Interface_LoopbackInterface)(nil),
		(*Interface_DcClusterGroupConnectivityInterfaceDisabled)(nil),
		(*Interface_DcClusterGroupConnectivityInterfaceEnabled)(nil),
	}
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.securemesh_site.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.securemesh_site.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.securemesh_site.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.securemesh_site.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.securemesh_site.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.securemesh_site.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.securemesh_site.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.securemesh_site.GetSpecType")
	proto.RegisterType((*SmsNetworkConfiguration)(nil), "ves.io.schema.views.securemesh_site.SmsNetworkConfiguration")
	golang_proto.RegisterType((*SmsNetworkConfiguration)(nil), "ves.io.schema.views.securemesh_site.SmsNetworkConfiguration")
	proto.RegisterType((*VnConfiguration)(nil), "ves.io.schema.views.securemesh_site.VnConfiguration")
	golang_proto.RegisterType((*VnConfiguration)(nil), "ves.io.schema.views.securemesh_site.VnConfiguration")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.securemesh_site.VnConfiguration.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.securemesh_site.VnConfiguration.LabelsEntry")
	proto.RegisterType((*StaticRoutesListType)(nil), "ves.io.schema.views.securemesh_site.StaticRoutesListType")
	golang_proto.RegisterType((*StaticRoutesListType)(nil), "ves.io.schema.views.securemesh_site.StaticRoutesListType")
	proto.RegisterType((*InterfaceListType)(nil), "ves.io.schema.views.securemesh_site.InterfaceListType")
	golang_proto.RegisterType((*InterfaceListType)(nil), "ves.io.schema.views.securemesh_site.InterfaceListType")
	proto.RegisterType((*Interface)(nil), "ves.io.schema.views.securemesh_site.Interface")
	golang_proto.RegisterType((*Interface)(nil), "ves.io.schema.views.securemesh_site.Interface")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.securemesh_site.Interface.LabelsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.securemesh_site.Interface.LabelsEntry")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/securemesh_site/types.proto", fileDescriptor_6228ec914a1c46a1)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/securemesh_site/types.proto", fileDescriptor_6228ec914a1c46a1)
}

var fileDescriptor_6228ec914a1c46a1 = []byte{
	// 3641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0x4f, 0x6c, 0xdb, 0x68,
	0x76, 0xf7, 0x27, 0xc9, 0x8e, 0xfc, 0x14, 0xdb, 0x34, 0xfd, 0x8f, 0xb6, 0x13, 0x45, 0xe3, 0x99,
	0xd9, 0x71, 0x1c, 0x5a, 0xb6, 0x64, 0x5b, 0x71, 0xb2, 0x3b, 0xe9, 0x58, 0x4e, 0x66, 0x12, 0x35,
	0x49, 0x03, 0x79, 0xd6, 0xed, 0x74, 0x81, 0xb2, 0x14, 0xf9, 0x49, 0xe1, 0x9a, 0x22, 0x09, 0x92,
	0x92, 0x63, 0x2c, 0x82, 0x4e, 0xa7, 0x7b, 0xda, 0xa2, 0xd8, 0x6d, 0x8a, 0x62, 0xd1, 0x01, 0x0a,
	0xec, 0x69, 0xbb, 0x98, 0x4b, 0x2f, 0x05, 0x0a, 0x94, 0x83, 0xc2, 0x1d, 0xa0, 0xe8, 0x62, 0xd0,
	0x83, 0x8f, 0xd3, 0x02, 0x45, 0x77, 0x34, 0x97, 0xf4, 0x36, 0xc7, 0x22, 0x87, 0xb6, 0xe0, 0xc7,
	0x3f, 0x22, 0x29, 0x4a, 0xf6, 0x76, 0x1a, 0x74, 0xa7, 0xf5, 0xc5, 0x26, 0xf9, 0xde, 0xfb, 0xbd,
	0xf7, 0xfd, 0x7b, 0xbf, 0xef, 0x9f, 0x60, 0xad, 0x8d, 0x8d, 0xbc, 0xa4, 0xae, 0x19, 0xc2, 0x63,
	0xdc, 0xe4, 0xd7, 0xda, 0x12, 0x3e, 0x34, 0xd6, 0x0c, 0x2c, 0xb4, 0x74, 0xdc, 0xc4, 0xc6, 0x63,
	0xce, 0x90, 0x4c, 0xbc, 0x66, 0x1e, 0x69, 0xd8, 0xc8, 0x6b, 0xba, 0x6a, 0xaa, 0xf4, 0xab, 0x8e,
	0x41, 0xde, 0x31, 0xc8, 0x13, 0x83, 0x7c, 0xc4, 0x60, 0x61, 0xb5, 0x21, 0x99, 0x8f, 0x5b, 0xb5,
	0xbc, 0xa0, 0x36, 0xd7, 0x1a, 0x6a, 0x43, 0x5d, 0x23, 0xb6, 0xb5, 0x56, 0x9d, 0xbc, 0x91, 0x17,
	0xf2, 0xe4, 0x60, 0x2e, 0x5c, 0x09, 0x07, 0x51, 0x97, 0x31, 0x36, 0x83, 0x4e, 0x17, 0x56, 0xc2,
	0x0a, 0x0a, 0x36, 0x0f, 0x55, 0xfd, 0x80, 0xab, 0x4b, 0x3a, 0x3e, 0xe4, 0x65, 0x39, 0xa4, 0x7b,
	0x2d, 0x5e, 0x57, 0x52, 0x4c, 0xac, 0xd7, 0x79, 0x21, 0x54, 0x9a, 0x85, 0xc5, 0xb0, 0xb2, 0xaa,
	0x99, 0x92, 0xaa, 0x78, 0xc2, 0x6c, 0x58, 0x18, 0xad, 0x8a, 0x85, 0xf9, 0xb0, 0x3c, 0x28, 0xba,
	0x14, 0xa9, 0x56, 0x5e, 0x96, 0x44, 0xde, 0xc4, 0xae, 0x34, 0xd7, 0x5b, 0xe9, 0x5c, 0xd8, 0xf5,
	0x6b, 0xb1, 0xcd, 0x22, 0x99, 0x98, 0x0b, 0x7a, 0xb9, 0x12, 0xa7, 0x15, 0x54, 0xb8, 0x1a, 0x55,
	0xd0, 0xcd, 0x16, 0x2f, 0x73, 0x6e, 0x9d, 0x04, 0x55, 0x97, 0xfe, 0x93, 0x86, 0xf1, 0x77, 0x64,
	0xb5, 0xc6, 0xcb, 0x7b, 0x1a, 0x16, 0xde, 0x3d, 0xd2, 0x30, 0xfd, 0x69, 0x02, 0x66, 0xda, 0xaa,
	0x6c, 0x62, 0x5d, 0xe7, 0x39, 0x01, 0xeb, 0xa6, 0x54, 0x97, 0xb0, 0xc8, 0x3d, 0x3e, 0x64, 0x0a,
	0x39, 0xb4, 0x3c, 0x5a, 0xfe, 0xd3, 0xc4, 0x3f, 0x5b, 0x88, 0x91, 0x8c, 0xf6, 0xea, 0xf6, 0xfa,
	0xfa, 0xfa, 0xaa, 0x81, 0x75, 0x09, 0x1b, 0xab, 0xb6, 0x85, 0xdd, 0x13, 0x3a, 0x16, 0xfa, 0x17,
	0x04, 0x8c, 0xd4, 0x38, 0x5c, 0xdd, 0x8a, 0x11, 0x43, 0x5f, 0x43, 0x58, 0x6c, 0x60, 0x05, 0xeb,
	0x92, 0xb0, 0x6a, 0x48, 0x4a, 0x43, 0xc6, 0xab, 0x8a, 0x24, 0x74, 0x85, 0x97, 0x3c, 0xa1, 0x8e,
	0x1b, 0x2d, 0x99, 0xd7, 0xc3, 0xd2, 0x89, 0x76, 0xf3, 0x90, 0xd7, 0x71, 0x00, 0xcb, 0xfd, 0x10,
	0xab, 0x7d, 0xf1, 0xa0, 0xdd, 0xec, 0xbe, 0xcd, 0xda, 0x6f, 0xcd, 0x96, 0x6c, 0x4a, 0x61, 0x2d,
	0xc6, 0xfe, 0x1e, 0x67, 0xff, 0xef, 0x16, 0x1a, 0xfa, 0x9b, 0x7f, 0x3b, 0x4e, 0xa6, 0xf4, 0x04,
	0x85, 0xec, 0x87, 0x61, 0x3d, 0xf9, 0x93, 0x04, 0xaa, 0x4e, 0x79, 0x95, 0xb6, 0xeb, 0xd5, 0xd9,
	0xdd, 0x43, 0xfa, 0xf7, 0x60, 0xbe, 0xc9, 0x1b, 0x26, 0xd6, 0x39, 0x45, 0x15, 0x31, 0x27, 0xa8,
	0x4a, 0x5d, 0x6a, 0xb4, 0x74, 0xde, 0x6e, 0x75, 0x66, 0x2b, 0x97, 0x5c, 0xce, 0x14, 0xaf, 0xe4,
	0xe3, 0xc6, 0xd6, 0x03, 0x62, 0xf5, 0x50, 0x15, 0x71, 0x79, 0x89, 0x38, 0x79, 0x86, 0x12, 0x54,
	0xd2, 0x7e, 0x4a, 0x3f, 0x43, 0xc3, 0x2b, 0xc9, 0x02, 0xbb, 0xd1, 0xf9, 0xc5, 0xdf, 0x27, 0x47,
	0x9e, 0x7d, 0x8c, 0x12, 0xe9, 0xa1, 0xea, 0x5c, 0xd3, 0xd7, 0xdf, 0x0d, 0xfa, 0xa0, 0xb7, 0xe1,
	0xa2, 0xdd, 0xe8, 0x6e, 0x00, 0x06, 0x93, 0xcc, 0x25, 0x97, 0x47, 0xcb, 0x33, 0x36, 0xd0, 0xc8,
	0x33, 0x94, 0xa4, 0xde, 0x47, 0x1e, 0x3a, 0x83, 0xaa, 0x19, 0x47, 0xd5, 0x46, 0x31, 0xe8, 0x0a,
	0xcc, 0xfb, 0xdd, 0xc0, 0x50, 0xeb, 0xa6, 0x5d, 0xa1, 0x5c, 0x1b, 0xeb, 0x86, 0x1d, 0x7a, 0x8a,
	0x74, 0x85, 0x71, 0xaf, 0x2e, 0x86, 0xf5, 0x24, 0xf3, 0x7e, 0xa2, 0x3a, 0xe7, 0x19, 0xec, 0xb9,
	0xfa, 0xfb, 0x8e, 0x3a, 0x7d, 0x17, 0x18, 0x55, 0xc3, 0x76, 0x48, 0x4a, 0x83, 0x33, 0x8e, 0x0c,
	0x13, 0x37, 0x7d, 0xa8, 0xe1, 0x58, 0xa8, 0x59, 0x5f, 0x7f, 0x8f, 0xa8, 0x7b, 0x48, 0xb7, 0x60,
	0x42, 0x51, 0xb9, 0x9a, 0xaa, 0x88, 0x9c, 0x88, 0xdb, 0x92, 0x80, 0x0d, 0xe6, 0x42, 0x0e, 0x2d,
	0x67, 0x8a, 0xd3, 0x91, 0x6a, 0xbc, 0xd3, 0xd4, 0xcc, 0xa3, 0xbb, 0x43, 0xd5, 0x31, 0x45, 0x2d,
	0xab, 0x8a, 0x78, 0xdb, 0x51, 0xa6, 0x39, 0xa0, 0x02, 0xc6, 0x9c, 0x2c, 0x19, 0x26, 0x93, 0x26,
	0x00, 0xab, 0x11, 0x00, 0x92, 0x8f, 0xf2, 0x6f, 0xdb, 0x7f, 0x03, 0x00, 0xf7, 0x25, 0xc3, 0xb4,
	0x87, 0x49, 0x39, 0x75, 0x62, 0x21, 0x74, 0x77, 0xa8, 0x3a, 0x5e, 0xf3, 0x85, 0xb6, 0x8c, 0xbe,
	0x0f, 0xb3, 0x22, 0xae, 0xf3, 0x2d, 0xd9, 0xf4, 0x06, 0x9c, 0xdb, 0xea, 0x0c, 0x0c, 0x88, 0x13,
	0x55, 0xa7, 0x5d, 0xab, 0x87, 0x8e, 0x91, 0xd3, 0x8a, 0xf4, 0x13, 0x98, 0x11, 0x5a, 0x86, 0xa9,
	0x36, 0xa3, 0x60, 0x19, 0x02, 0xf6, 0xad, 0xfc, 0x19, 0xf2, 0x72, 0x7e, 0xaf, 0x69, 0x84, 0x50,
	0xdd, 0xbe, 0xe1, 0x16, 0x01, 0x55, 0xa7, 0x1c, 0x17, 0x61, 0xcf, 0xaf, 0xc1, 0x05, 0x5e, 0x14,
	0x75, 0x6c, 0x18, 0x0c, 0x4d, 0x5a, 0x08, 0x02, 0xad, 0xe3, 0x89, 0xe8, 0x1d, 0xc8, 0x08, 0xaa,
	0xaa, 0x8b, 0x92, 0xc2, 0x9b, 0xd8, 0x60, 0xa6, 0x48, 0x54, 0xd1, 0x1e, 0x4d, 0x82, 0xd8, 0xed,
	0xaa, 0x55, 0x83, 0x36, 0xf4, 0x43, 0x98, 0x93, 0xd5, 0x86, 0xc1, 0x19, 0xa6, 0x8e, 0xf9, 0xa6,
	0xdd, 0x41, 0x44, 0xc9, 0xe0, 0x6b, 0x32, 0x16, 0x19, 0x66, 0x40, 0x8d, 0x25, 0xaa, 0x33, 0xb6,
	0xd9, 0x9e, 0x67, 0x75, 0xdb, 0x35, 0xa2, 0x7f, 0x0b, 0x2e, 0xca, 0x6a, 0x83, 0xd3, 0xb1, 0x80,
	0xa5, 0x36, 0xd6, 0x99, 0x79, 0x02, 0xb2, 0x14, 0x5b, 0x53, 0xbf, 0x51, 0xfb, 0x2e, 0x16, 0xcc,
	0x2a, 0xae, 0x93, 0x26, 0x9d, 0xf8, 0xe8, 0x69, 0xc8, 0xf4, 0x6e, 0xa2, 0x9a, 0x91, 0xd5, 0x46,
	0xd5, 0x7d, 0xa5, 0x7f, 0x0d, 0x12, 0xc6, 0x21, 0xb3, 0x44, 0xf0, 0xae, 0xc6, 0xe2, 0xed, 0x47,
	0xfa, 0xbf, 0xd3, 0x53, 0xbe, 0xb4, 0x10, 0xaa, 0x26, 0x8c, 0x43, 0xfa, 0x16, 0x24, 0x54, 0x83,
	0x79, 0x95, 0x00, 0x2c, 0xc7, 0x07, 0x14, 0xee, 0xf5, 0x41, 0x7b, 0xd5, 0xa0, 0x7f, 0x07, 0xc6,
	0x08, 0x6b, 0x10, 0x56, 0x53, 0x78, 0x99, 0x79, 0x7e, 0xe1, 0xcc, 0x85, 0x9b, 0xfe, 0xe8, 0x69,
	0xd8, 0xf8, 0xb9, 0x8d, 0x7a, 0xd1, 0xfe, 0x74, 0xcf, 0xfd, 0x42, 0x3f, 0x02, 0xc6, 0xeb, 0xbb,
	0x35, 0x59, 0x15, 0x0e, 0xb0, 0xc8, 0x19, 0x58, 0x77, 0x46, 0xd9, 0xd5, 0x01, 0x6d, 0x91, 0xac,
	0x7a, 0x7d, 0xbe, 0xec, 0x98, 0xed, 0xb9, 0x56, 0xf4, 0x7b, 0x40, 0xf5, 0x20, 0xb1, 0x04, 0x89,
	0x8d, 0x1d, 0x6e, 0x11, 0x7b, 0x6f, 0xb4, 0xdd, 0x4d, 0x56, 0x27, 0x6a, 0x11, 0xe8, 0x16, 0x2c,
	0xa8, 0xf5, 0xba, 0x2c, 0x29, 0x98, 0x33, 0x5a, 0x7a, 0x5b, 0x6a, 0xf3, 0x35, 0x49, 0x96, 0xcc,
	0x23, 0xae, 0xa9, 0x8a, 0x98, 0x59, 0x23, 0x4e, 0x0a, 0xf1, 0x15, 0xe3, 0x98, 0xed, 0x05, 0xad,
	0x1e, 0xa8, 0x62, 0xb0, 0xb5, 0x18, 0xb5, 0x8f, 0x0e, 0xfd, 0x3d, 0xb8, 0xa4, 0x61, 0xbd, 0xae,
	0xea, 0x4d, 0x5e, 0x11, 0x30, 0x87, 0x95, 0xc7, 0xf6, 0xff, 0x26, 0x56, 0x4c, 0xc7, 0x71, 0x91,
	0x38, 0xde, 0x88, 0x75, 0xfc, 0xa8, 0x6b, 0x78, 0xa7, 0x6b, 0x17, 0x71, 0xbd, 0xa0, 0xf5, 0xd5,
	0xa2, 0x0f, 0x80, 0x39, 0x68, 0xd5, 0xb0, 0xae, 0x60, 0x13, 0x1b, 0x5c, 0x4b, 0x6b, 0xe8, 0xbc,
	0x88, 0x39, 0x51, 0xe7, 0x25, 0x85, 0xd9, 0x20, 0x8e, 0xaf, 0xc5, 0x3a, 0xfe, 0x75, 0xdf, 0xe8,
	0xdb, 0x8e, 0xcd, 0x6d, 0xdb, 0xc4, 0x75, 0x38, 0x7b, 0x10, 0x2b, 0xbd, 0xf9, 0x23, 0xf4, 0x89,
	0x85, 0xfe, 0x10, 0xc1, 0x6b, 0x30, 0x55, 0xe6, 0x0d, 0x49, 0xc8, 0x85, 0x99, 0x65, 0x6c, 0xf3,
	0x06, 0xbb, 0xb5, 0xc1, 0x6e, 0xb0, 0x85, 0x6d, 0xb6, 0x70, 0x03, 0xe6, 0x80, 0xb6, 0xd3, 0x64,
	0x44, 0x09, 0x95, 0x60, 0x01, 0x66, 0xdc, 0xcc, 0x12, 0x95, 0xdd, 0x80, 0x3c, 0xcc, 0xee, 0x88,
	0x6d, 0xbb, 0x88, 0x51, 0xc3, 0xe9, 0xe2, 0x06, 0xbb, 0xb1, 0xc9, 0x6e, 0x6c, 0xb1, 0x5b, 0x05,
	0x76, 0x73, 0x9d, 0xdd, 0xbc, 0xce, 0x6e, 0xad, 0x97, 0xb3, 0x90, 0x21, 0xd9, 0x5b, 0x78, 0xac,
	0x4a, 0x02, 0xa6, 0x27, 0x8e, 0x2d, 0x74, 0xe1, 0xc4, 0x42, 0x23, 0x1d, 0x0b, 0x25, 0xaf, 0xb3,
	0xdb, 0xe5, 0x37, 0x80, 0xf6, 0xf3, 0x64, 0xbd, 0xe1, 0xa9, 0x4d, 0x1e, 0x5b, 0x08, 0x4e, 0x2c,
	0x34, 0xda, 0xb1, 0xd0, 0x70, 0x61, 0x9d, 0x2d, 0x14, 0xca, 0x57, 0x61, 0x9a, 0x24, 0x1d, 0x6f,
	0xa8, 0x07, 0x55, 0x99, 0x13, 0x0b, 0xcd, 0xd9, 0xaa, 0xc5, 0x4d, 0xb6, 0xb8, 0x55, 0x5e, 0x85,
	0xb9, 0x68, 0x17, 0xf6, 0xb4, 0xe9, 0x63, 0x0b, 0x5d, 0x3d, 0xb1, 0xd0, 0x72, 0xc7, 0x42, 0x23,
	0x9b, 0x05, 0x36, 0xb7, 0xb9, 0x59, 0x49, 0xa5, 0x11, 0x95, 0xa8, 0xa4, 0xd2, 0x09, 0x2a, 0x59,
	0x49, 0xa5, 0x47, 0xa8, 0x0b, 0x95, 0x54, 0x7a, 0x94, 0x82, 0x4a, 0x2a, 0x3d, 0x47, 0x31, 0x95,
	0x54, 0x7a, 0x99, 0xba, 0x5a, 0x49, 0xa5, 0x57, 0xa8, 0x6b, 0x95, 0x54, 0x7a, 0x9d, 0x2a, 0x2c,
	0xfd, 0x74, 0x0c, 0xc6, 0x77, 0x75, 0xcc, 0x9b, 0xd8, 0x9f, 0x81, 0x15, 0x07, 0x4e, 0xc0, 0xe2,
	0x27, 0x1a, 0xdf, 0xf9, 0xea, 0x13, 0x8d, 0xfe, 0x93, 0x88, 0x57, 0xe2, 0x26, 0x11, 0xe1, 0xd9,
	0xc2, 0x57, 0xe5, 0xe5, 0xf7, 0xfe, 0x87, 0x78, 0xf9, 0xa5, 0x33, 0xb2, 0xfe, 0x12, 0x19, 0xb9,
	0x1f, 0x17, 0x33, 0x11, 0x2e, 0xfe, 0x7f, 0xca, 0xbf, 0x5f, 0x2b, 0x7a, 0xfa, 0x5f, 0x9f, 0x2c,
	0xa8, 0x2f, 0x85, 0x1f, 0x07, 0x30, 0x63, 0xeb, 0xa5, 0x31, 0xe3, 0xaf, 0x0e, 0x27, 0x4e, 0x7e,
	0x7a, 0x2b, 0xb2, 0x5e, 0xee, 0xe1, 0xa4, 0x0f, 0x5e, 0xa0, 0xe0, 0x87, 0x32, 0x1b, 0xcb, 0x49,
	0xb3, 0x1f, 0xbc, 0x40, 0x31, 0xdf, 0xcb, 0xeb, 0x7d, 0x88, 0x89, 0xf9, 0xe0, 0x05, 0x8a, 0x95,
	0x94, 0x4b, 0xfd, 0xf9, 0x69, 0xf1, 0x83, 0x17, 0xa8, 0x9f, 0xf0, 0x54, 0xa2, 0xca, 0x52, 0x57,
	0x7c, 0xba, 0xb2, 0x89, 0xea, 0x2f, 0xc6, 0x60, 0xa2, 0x8a, 0x35, 0x99, 0x17, 0xce, 0x99, 0xea,
	0x9c, 0xa9, 0xce, 0x99, 0xea, 0x9c, 0xa9, 0xce, 0x99, 0xea, 0x9c, 0xa9, 0x7e, 0x15, 0x99, 0xea,
	0x9f, 0xc6, 0x20, 0xf3, 0x0e, 0x36, 0xbf, 0xd6, 0x2c, 0x75, 0xf3, 0xd4, 0xdd, 0xd7, 0xfe, 0xbb,
	0xad, 0xdb, 0xa7, 0xed, 0xb6, 0xbe, 0xb4, 0xdd, 0xd5, 0x73, 0x6e, 0x3c, 0xe7, 0xc6, 0xd3, 0xb8,
	0xf1, 0x5b, 0x00, 0xe4, 0x48, 0xcb, 0x30, 0x79, 0x13, 0x33, 0xd9, 0x1c, 0x5a, 0x1e, 0x2f, 0x5e,
	0x8e, 0x2b, 0xeb, 0x9e, 0x64, 0xe2, 0x3d, 0x5b, 0xa9, 0x3a, 0x6a, 0x78, 0x8f, 0x5f, 0x2f, 0x66,
	0x3d, 0x27, 0xb6, 0x97, 0x40, 0x6c, 0xd3, 0x3d, 0xc4, 0xf6, 0xfc, 0x16, 0xfa, 0x3f, 0xcb, 0x6d,
	0xd1, 0xed, 0xc2, 0x3f, 0xa3, 0x61, 0xae, 0x4f, 0xde, 0xa1, 0xdf, 0x84, 0x71, 0x6f, 0x6c, 0xb8,
	0xd9, 0x2c, 0x31, 0x38, 0x79, 0xbb, 0xda, 0x6e, 0x7e, 0xfa, 0x0e, 0x80, 0x21, 0xab, 0x9e, 0x69,
	0x92, 0x98, 0x6e, 0x9e, 0x29, 0x11, 0xee, 0x2b, 0x71, 0x07, 0x4b, 0x43, 0xd5, 0x51, 0x43, 0x56,
	0x5d, 0xf0, 0xdb, 0x40, 0x7b, 0xb1, 0x19, 0xb2, 0xe4, 0x39, 0x99, 0x1f, 0x98, 0xba, 0x29, 0xd7,
	0x62, 0x4f, 0x96, 0x82, 0x21, 0xfa, 0xd6, 0x0b, 0x5f, 0x39, 0x44, 0x64, 0x87, 0xe8, 0x81, 0x07,
	0x52, 0x8b, 0x7f, 0x6d, 0xc0, 0x73, 0x35, 0x3c, 0x30, 0x87, 0x7a, 0xa9, 0xe5, 0x9e, 0x67, 0xe6,
	0x22, 0x62, 0x18, 0xef, 0x22, 0x11, 0x32, 0x1c, 0x21, 0x38, 0xa5, 0x33, 0x85, 0xec, 0xa3, 0x45,
	0xce, 0x1c, 0x13, 0xd5, 0x31, 0x29, 0x28, 0xa2, 0xcb, 0x30, 0xa9, 0xa8, 0x3e, 0x91, 0x69, 0xaa,
	0x2c, 0x09, 0x47, 0x2e, 0xed, 0xf6, 0x4b, 0x86, 0x13, 0x8a, 0xea, 0x76, 0xa1, 0x47, 0x44, 0x9d,
	0x36, 0x60, 0x8e, 0x17, 0x4c, 0xa9, 0x8d, 0xc3, 0x38, 0x12, 0x36, 0x98, 0x51, 0x82, 0x74, 0x23,
	0x82, 0x14, 0xbd, 0x8d, 0x91, 0xdf, 0x21, 0xe6, 0x41, 0x54, 0x09, 0x1b, 0x6e, 0x66, 0x9c, 0xe1,
	0xe3, 0x84, 0xf4, 0x0f, 0x11, 0xbc, 0xe2, 0x7a, 0x75, 0x53, 0x95, 0xe8, 0xe3, 0x75, 0xfd, 0x2f,
	0x12, 0xff, 0xe5, 0xb3, 0xf9, 0x77, 0x53, 0x93, 0xf8, 0xb6, 0xfb, 0x39, 0x12, 0x48, 0x96, 0x1f,
	0xa8, 0x45, 0xbf, 0x05, 0x94, 0xa2, 0x72, 0x75, 0x55, 0x3f, 0xe4, 0x75, 0x91, 0xd3, 0x74, 0xf5,
	0xc9, 0x91, 0x3b, 0x25, 0x88, 0xaf, 0xc9, 0x54, 0x75, 0x5c, 0x51, 0xdf, 0x76, 0xd4, 0x1f, 0xd9,
	0xda, 0xf4, 0x1f, 0x20, 0xb8, 0xec, 0x96, 0x29, 0x04, 0xd3, 0x2d, 0xcf, 0x45, 0x82, 0x77, 0xeb,
	0x6c, 0xe5, 0x09, 0x62, 0x87, 0xca, 0x92, 0xaa, 0x2e, 0xf0, 0x7d, 0x35, 0xe8, 0x07, 0x30, 0x17,
	0xf6, 0xce, 0xcb, 0xb2, 0x7a, 0x68, 0xff, 0x65, 0xc6, 0x06, 0x16, 0x67, 0xba, 0x1e, 0x80, 0xdb,
	0xb1, 0x8d, 0x76, 0x64, 0xd9, 0xed, 0x61, 0x0d, 0x92, 0x75, 0xbd, 0x0e, 0xc2, 0x4c, 0x0c, 0x00,
	0x1a, 0xb6, 0x7b, 0x98, 0x93, 0xa5, 0xdd, 0x46, 0xa7, 0xeb, 0x30, 0x15, 0x06, 0x70, 0x46, 0x04,
	0x35, 0x60, 0x10, 0x87, 0x00, 0x76, 0x55, 0x45, 0xc1, 0x82, 0x3d, 0x78, 0x7d, 0xca, 0x1d, 0xae,
	0x4e, 0x36, 0x82, 0x2a, 0x64, 0x34, 0x6c, 0xc1, 0x58, 0xad, 0xa1, 0x71, 0xba, 0xda, 0xb2, 0x67,
	0xef, 0x92, 0xe8, 0x1e, 0x5f, 0x4f, 0x1e, 0x5b, 0x08, 0x3d, 0xb7, 0x10, 0x72, 0xef, 0x6e, 0x68,
	0xa8, 0x9a, 0xa9, 0x35, 0xb4, 0x2a, 0x51, 0xbb, 0x27, 0xd2, 0xdf, 0x04, 0xca, 0x36, 0xd3, 0x30,
	0xd6, 0x39, 0x6f, 0x9a, 0x36, 0xd5, 0xcf, 0x72, 0xbc, 0xd6, 0xd0, 0x1e, 0x61, 0xac, 0xef, 0xb8,
	0x13, 0xb8, 0x5b, 0x30, 0xd6, 0x96, 0x34, 0xae, 0xad, 0xeb, 0x9a, 0x43, 0xb4, 0xd3, 0x64, 0x5a,
	0xb3, 0x10, 0x29, 0xd5, 0xbe, 0xa4, 0xed, 0xeb, 0xba, 0x46, 0xf8, 0x34, 0xd3, 0x76, 0x5e, 0x08,
	0x81, 0x7e, 0x13, 0xa6, 0xcc, 0x96, 0xa2, 0x60, 0x99, 0x13, 0x31, 0x2f, 0x72, 0xa6, 0xd4, 0xc4,
	0x6a, 0xcb, 0x64, 0x72, 0x39, 0xb4, 0x3c, 0x56, 0xce, 0x90, 0xcb, 0x1a, 0x2b, 0x29, 0xe6, 0x27,
	0xff, 0x01, 0xd5, 0x49, 0x47, 0xef, 0x36, 0xe6, 0xc5, 0x77, 0x1d, 0x2d, 0xbb, 0xad, 0x8d, 0xa6,
	0x9d, 0xa8, 0xdc, 0xea, 0xe1, 0xb4, 0x56, 0x4d, 0x96, 0x04, 0x4e, 0xd2, 0x5c, 0xf2, 0x8d, 0x6f,
	0xa2, 0x91, 0xea, 0xb4, 0xd1, 0xec, 0x56, 0xea, 0x23, 0x62, 0x74, 0x4f, 0xa3, 0xdf, 0x81, 0xe9,
	0x08, 0x5c, 0xdb, 0xb4, 0xb1, 0x36, 0x07, 0x62, 0x4d, 0x86, 0xb0, 0xda, 0xe6, 0x3d, 0x8d, 0xde,
	0x81, 0xa9, 0x68, 0x8d, 0x72, 0xed, 0x12, 0x53, 0x22, 0x95, 0x4a, 0x07, 0x2b, 0x75, 0x58, 0x4f,
	0xbe, 0x8f, 0x50, 0x95, 0x0a, 0xd7, 0xea, 0x7e, 0xe9, 0xe6, 0x3f, 0xa2, 0x4f, 0x2c, 0xf4, 0x0f,
	0x08, 0x2e, 0xf7, 0x3b, 0x43, 0x4c, 0x15, 0xd8, 0xe2, 0x26, 0x64, 0x61, 0xce, 0x4f, 0x96, 0xd1,
	0x43, 0xc6, 0xcd, 0x65, 0x04, 0x59, 0x98, 0xdd, 0xb3, 0x93, 0xab, 0x64, 0x1e, 0x45, 0xed, 0xaf,
	0xb3, 0x85, 0x75, 0x60, 0x80, 0x76, 0xba, 0x5a, 0xae, 0x5b, 0x06, 0x83, 0x4e, 0x14, 0x36, 0xe1,
	0x75, 0xb8, 0x6c, 0x4f, 0x43, 0x73, 0x0f, 0xb0, 0xf1, 0x38, 0xf7, 0x8e, 0xae, 0xb6, 0xb4, 0x08,
	0x40, 0x62, 0x6b, 0x7d, 0x19, 0xc1, 0xeb, 0x7d, 0xcf, 0x31, 0x33, 0xe4, 0x74, 0x94, 0x2d, 0xae,
	0xb3, 0x1b, 0xc5, 0xf2, 0x65, 0x97, 0x61, 0xbb, 0xa7, 0x97, 0x09, 0x3b, 0xa3, 0x77, 0x2c, 0x94,
	0x2c, 0xb2, 0x1b, 0xe5, 0x2b, 0x2e, 0xbb, 0x75, 0x8f, 0x22, 0xe7, 0x4f, 0x2c, 0xc4, 0x90, 0xa3,
	0xc8, 0x2d, 0xb6, 0x58, 0x2a, 0xbf, 0x0a, 0x54, 0x80, 0x99, 0xba, 0x28, 0xc3, 0x27, 0x16, 0x4a,
	0xd9, 0x28, 0x5b, 0x6c, 0xa9, 0x7c, 0x0d, 0x66, 0xc2, 0x54, 0x10, 0x3c, 0xad, 0x4c, 0x9f, 0x58,
	0xe8, 0x42, 0xc7, 0x42, 0x23, 0xdb, 0x6c, 0xf1, 0x3a, 0x7b, 0xa3, 0xcc, 0xc2, 0x74, 0x38, 0x4f,
	0xb8, 0xba, 0xd3, 0xc7, 0x16, 0xca, 0x9c, 0x58, 0x08, 0x3a, 0x16, 0x4a, 0x17, 0x0a, 0x6c, 0xa1,
	0xc8, 0x16, 0x36, 0xca, 0x79, 0x98, 0x89, 0x0c, 0x61, 0x57, 0x7d, 0xe6, 0xd8, 0x42, 0x13, 0x3f,
	0xb7, 0x10, 0x3a, 0xb1, 0xd0, 0x38, 0x39, 0x65, 0xdd, 0x62, 0x0b, 0x76, 0x28, 0xb3, 0x64, 0xaa,
	0x4f, 0x38, 0xad, 0x61, 0xd7, 0x5e, 0xb0, 0x70, 0x9b, 0x27, 0x16, 0x2a, 0xda, 0xca, 0x5b, 0x45,
	0x76, 0xab, 0xe0, 0xcf, 0x84, 0x18, 0x6a, 0xbe, 0x92, 0x4a, 0xa7, 0xa8, 0xe1, 0x4a, 0x2a, 0x7d,
	0x81, 0x4a, 0x57, 0x52, 0x69, 0xa0, 0x32, 0x95, 0x54, 0x7a, 0x9c, 0x9a, 0xa8, 0xa4, 0xd2, 0x97,
	0xa8, 0xcb, 0x95, 0x54, 0xfa, 0x32, 0x95, 0xf5, 0xd7, 0xfd, 0x57, 0xa8, 0x5c, 0x25, 0x95, 0x2e,
	0x52, 0x1b, 0x4b, 0x7f, 0x09, 0x30, 0x11, 0xe1, 0x79, 0xfa, 0xc7, 0x08, 0x46, 0x64, 0xbe, 0x86,
	0x65, 0x83, 0x41, 0x64, 0xd5, 0xfe, 0xd6, 0x7f, 0x67, 0xba, 0x90, 0xbf, 0x4f, 0x20, 0xee, 0x28,
	0xa6, 0x7e, 0x54, 0x7e, 0xf3, 0xc3, 0x8f, 0x51, 0x0a, 0x12, 0xce, 0x75, 0xa5, 0xcc, 0x87, 0x28,
	0xbd, 0x34, 0xa2, 0xa7, 0x28, 0xc4, 0xbc, 0x45, 0xba, 0xf2, 0x87, 0x28, 0x41, 0x51, 0x9e, 0x64,
	0xc5, 0x95, 0x90, 0xab, 0x5a, 0x3f, 0x70, 0xae, 0x6a, 0xb9, 0xe1, 0xd0, 0x8b, 0x90, 0x6c, 0x4b,
	0x9a, 0x7b, 0xfd, 0x69, 0xd4, 0xcd, 0x2d, 0x4f, 0x50, 0xd5, 0xfe, 0x4a, 0xbf, 0x02, 0x23, 0x24,
	0xa1, 0x94, 0x98, 0xc9, 0xd0, 0xe5, 0x1b, 0x7b, 0x98, 0x0c, 0xdb, 0x99, 0xa3, 0x44, 0x5f, 0x05,
	0x50, 0xf8, 0x26, 0xb6, 0x27, 0x94, 0x58, 0x27, 0x13, 0x8b, 0x10, 0x4c, 0x40, 0x48, 0xaf, 0xc1,
	0x58, 0xf7, 0xcd, 0x06, 0xa5, 0x7b, 0x40, 0x2f, 0x76, 0x15, 0xf6, 0x4b, 0x2e, 0x0d, 0xda, 0x2b,
	0x34, 0x49, 0x70, 0x32, 0xa9, 0x31, 0x70, 0x42, 0x31, 0x64, 0xd3, 0xe0, 0x1e, 0x51, 0x27, 0x09,
	0xd5, 0xa0, 0x7f, 0x17, 0xc6, 0xc2, 0xe6, 0xf1, 0xb3, 0x88, 0x3e, 0x0b, 0xeb, 0x00, 0x52, 0x60,
	0x4b, 0xe0, 0xa2, 0x11, 0xf4, 0x70, 0x07, 0xa6, 0x14, 0x95, 0x6b, 0x97, 0x22, 0x61, 0x4e, 0x0c,
	0x9e, 0x52, 0x2a, 0xea, 0x7e, 0x29, 0x14, 0x28, 0x0f, 0x94, 0x0b, 0xd0, 0x2e, 0x79, 0x18, 0x0e,
	0x27, 0x6d, 0xf5, 0xc4, 0x1a, 0xba, 0x47, 0xe9, 0x46, 0xb9, 0x5f, 0x8a, 0xc4, 0x89, 0xaa, 0xe3,
	0x46, 0x48, 0xe2, 0x46, 0x2a, 0x0a, 0x9c, 0x20, 0xb7, 0xc8, 0x96, 0x12, 0x19, 0x0a, 0x03, 0xe7,
	0x15, 0x09, 0x3b, 0xd2, 0xdb, 0xc2, 0xae, 0x63, 0x40, 0x12, 0x0f, 0x2d, 0x00, 0xd5, 0x83, 0x71,
	0xf1, 0xcc, 0xcb, 0xf2, 0xa9, 0x8f, 0x9e, 0xf6, 0x98, 0xdf, 0x4d, 0x54, 0xc7, 0xc5, 0xb0, 0x93,
	0x3f, 0x46, 0xb0, 0x10, 0x55, 0xeb, 0x4e, 0x87, 0x99, 0x31, 0x32, 0x86, 0xce, 0xe2, 0x6f, 0xfd,
	0xa3, 0xa7, 0x93, 0x3d, 0xb7, 0x70, 0x43, 0x49, 0xff, 0x19, 0xf2, 0x2e, 0x50, 0x3a, 0xb7, 0x0f,
	0xe7, 0xc2, 0xa1, 0xf8, 0x19, 0x7d, 0xe1, 0x06, 0x64, 0x02, 0xe3, 0x8f, 0xa6, 0x20, 0x79, 0x80,
	0x8f, 0x18, 0x44, 0xf6, 0x50, 0xec, 0x47, 0x7a, 0x1a, 0x86, 0xdb, 0xbc, 0xdc, 0xc2, 0x64, 0xbd,
	0x33, 0x5a, 0x75, 0x5e, 0x6e, 0x26, 0xb6, 0xd1, 0xcd, 0xca, 0x27, 0x16, 0x7a, 0x1b, 0x66, 0x80,
	0xf2, 0xe8, 0xe3, 0x01, 0x36, 0x79, 0x91, 0x37, 0x79, 0x1a, 0x15, 0x60, 0x06, 0xc6, 0x9c, 0x36,
	0xcc, 0xb9, 0x0d, 0x65, 0xb3, 0xc1, 0x26, 0xcc, 0x02, 0x75, 0x7b, 0x37, 0xe7, 0x86, 0xe2, 0x24,
	0x7d, 0x3a, 0x51, 0x58, 0x2f, 0x7f, 0x03, 0xa6, 0x82, 0x5d, 0x2d, 0x98, 0x80, 0xbd, 0xb4, 0x9a,
	0xdc, 0x66, 0x6f, 0x94, 0x7f, 0x13, 0x66, 0x23, 0x3d, 0xca, 0x53, 0x7d, 0xd3, 0x4e, 0x93, 0xa1,
	0x14, 0xf9, 0x83, 0x17, 0x68, 0x59, 0xc4, 0x4d, 0xb5, 0xc0, 0x9a, 0xd8, 0x30, 0x59, 0x41, 0x37,
	0x59, 0xc3, 0xe4, 0x1b, 0x92, 0xd2, 0x60, 0x0d, 0xb5, 0x6e, 0xd6, 0x78, 0xe5, 0x80, 0x6b, 0x62,
	0x81, 0xd5, 0x74, 0x55, 0x2c, 0xb3, 0x30, 0xd7, 0xd3, 0x34, 0x81, 0x7c, 0xea, 0xe5, 0xeb, 0x61,
	0x92, 0xaf, 0xfd, 0x35, 0x65, 0x92, 0x4a, 0x45, 0xf2, 0xa9, 0x93, 0x49, 0x81, 0xca, 0x2c, 0xfd,
	0x10, 0xc1, 0x74, 0xdc, 0x60, 0xa3, 0x0f, 0xa3, 0xc3, 0xd7, 0x49, 0x9e, 0xc5, 0x33, 0x0d, 0x09,
	0x82, 0xb5, 0x2f, 0xe1, 0x43, 0x67, 0xd7, 0xd9, 0x6f, 0x6c, 0xca, 0x7b, 0x4a, 0x07, 0x9b, 0x3d,
	0x34, 0xaa, 0x97, 0xbe, 0x8f, 0x60, 0xb2, 0x67, 0xe1, 0x43, 0xab, 0x00, 0x7e, 0x1f, 0xf2, 0x62,
	0xc9, 0xff, 0x72, 0x8b, 0xa8, 0xf2, 0x95, 0x98, 0x3b, 0xaf, 0xa1, 0x40, 0x02, 0x2e, 0x96, 0x7e,
	0x46, 0xc1, 0xa8, 0x6f, 0x4a, 0xb3, 0x90, 0x11, 0xb1, 0x21, 0xe8, 0x12, 0xb9, 0xad, 0xed, 0xf4,
	0xbc, 0xd0, 0x7d, 0xc8, 0xa0, 0xd8, 0x1e, 0x42, 0x1e, 0xe5, 0x24, 0x48, 0xa4, 0x37, 0x7f, 0xb9,
	0x48, 0x5f, 0x06, 0xd9, 0x34, 0x81, 0xc6, 0xe6, 0x63, 0xb2, 0x9d, 0x12, 0x18, 0xcd, 0xc3, 0xb1,
	0xab, 0xd1, 0x9e, 0x51, 0x9b, 0xbf, 0xe3, 0x9a, 0xfa, 0x21, 0x86, 0x6e, 0xc0, 0x4e, 0xe2, 0xa8,
	0x98, 0xfe, 0x2e, 0x4c, 0x89, 0x58, 0x94, 0x04, 0xde, 0xc4, 0x62, 0xc0, 0x9f, 0xb3, 0xfa, 0xbd,
	0x7e, 0xaa, 0xbf, 0xdb, 0x9e, 0x6d, 0xc8, 0xe1, 0xdd, 0xa1, 0x2a, 0x2d, 0xf6, 0x48, 0xe8, 0x3f,
	0x41, 0x90, 0xed, 0x3a, 0x6b, 0xf2, 0x0a, 0xdf, 0x70, 0x76, 0xbc, 0xba, 0x7e, 0x9d, 0x3d, 0xec,
	0x9d, 0xb3, 0xfb, 0x7d, 0xe0, 0xa3, 0x84, 0x8b, 0x9c, 0x3e, 0x76, 0xe6, 0x38, 0x76, 0xb1, 0x2f,
	0x89, 0x03, 0xb4, 0xe9, 0x27, 0x40, 0xcb, 0xaa, 0xaa, 0xd5, 0x78, 0x21, 0xe0, 0xc0, 0xe5, 0xd0,
	0xd3, 0x2b, 0xfc, 0xbe, 0x6b, 0x1a, 0xf6, 0x3e, 0xf1, 0xd9, 0x53, 0xe4, 0x05, 0xf0, 0xdc, 0xad,
	0x7b, 0x39, 0xaa, 0x49, 0x3f, 0x85, 0xf5, 0xde, 0x2c, 0xe1, 0x4e, 0x6b, 0xdb, 0x92, 0x79, 0x14,
	0xd8, 0xdc, 0xf0, 0xb7, 0x88, 0x07, 0x6f, 0xa1, 0x5f, 0x0b, 0x27, 0xe6, 0xdd, 0x00, 0x98, 0xef,
	0xd6, 0xdf, 0x38, 0xfe, 0x1e, 0xac, 0x9d, 0xd5, 0x3d, 0x56, 0x1c, 0xef, 0x99, 0x81, 0xde, 0x57,
	0xce, 0xe0, 0xfd, 0x8e, 0x83, 0xf4, 0x55, 0x98, 0xe2, 0xe3, 0x0b, 0x9f, 0x58, 0xe8, 0x5d, 0x98,
	0x07, 0xba, 0xbb, 0x94, 0xf0, 0xc9, 0x22, 0x59, 0x60, 0x8b, 0x30, 0x05, 0xe3, 0x5d, 0x11, 0x49,
	0x4b, 0x68, 0x03, 0x96, 0xe0, 0x72, 0x94, 0x2c, 0x72, 0xc1, 0x10, 0x69, 0x74, 0xe3, 0x53, 0x0b,
	0xfd, 0xeb, 0x08, 0xfc, 0x14, 0x41, 0xca, 0x36, 0x5a, 0xf9, 0x73, 0x04, 0x1f, 0xda, 0x4b, 0x92,
	0x98, 0x01, 0x59, 0x4c, 0x7b, 0x23, 0x0d, 0x72, 0xb1, 0x23, 0xa8, 0x38, 0xea, 0x77, 0x51, 0x28,
	0x9d, 0xd6, 0xed, 0x8b, 0xd3, 0xbe, 0x72, 0xae, 0xdb, 0x45, 0x6d, 0xcf, 0xbd, 0x3d, 0xb3, 0x98,
	0xf6, 0xba, 0x1c, 0xfc, 0x11, 0x82, 0xd4, 0x43, 0xbe, 0x89, 0x57, 0xbe, 0x8f, 0xe0, 0xf7, 0x11,
	0x2c, 0xc2, 0x7c, 0x6f, 0xa0, 0x79, 0xe7, 0x80, 0x07, 0x2e, 0xc1, 0x42, 0x4c, 0x94, 0x9e, 0xf4,
	0x0d, 0x78, 0x7d, 0x70, 0x84, 0x9e, 0xe2, 0x22, 0xcc, 0xf7, 0x86, 0xe4, 0x09, 0x8f, 0x11, 0xa4,
	0xf6, 0xef, 0xef, 0x3c, 0x5c, 0xf9, 0x6b, 0x04, 0x7f, 0x85, 0xe0, 0x0d, 0x58, 0x8c, 0x89, 0xa7,
	0xa5, 0x98, 0x7c, 0xa3, 0x81, 0xc5, 0x62, 0xfa, 0xdb, 0xee, 0x93, 0x1d, 0x5b, 0x8c, 0x62, 0x5b,
	0xe6, 0x15, 0x4e, 0x12, 0xe1, 0x4a, 0x7c, 0xfd, 0x76, 0xcd, 0x57, 0x4e, 0xad, 0xde, 0xae, 0x6e,
	0x9f, 0x2a, 0xf5, 0xe5, 0x9f, 0x26, 0x20, 0xf5, 0x50, 0x15, 0xf1, 0xca, 0xdf, 0x25, 0xe0, 0x6f,
	0x13, 0xc0, 0xc6, 0x46, 0xe6, 0x0e, 0x99, 0xe2, 0xf8, 0x8e, 0x2c, 0xe7, 0xc8, 0xa2, 0x93, 0x9c,
	0x04, 0xc2, 0x3c, 0xcc, 0xc5, 0x68, 0x2b, 0xaa, 0x88, 0x61, 0x15, 0x16, 0xe3, 0xaa, 0xbf, 0x1f,
	0xd2, 0x02, 0x30, 0x71, 0xea, 0x04, 0x6a, 0x1b, 0xbe, 0x71, 0x4a, 0x5b, 0xf5, 0x43, 0x7d, 0x1d,
	0x5e, 0x3d, 0xc5, 0x92, 0x38, 0x60, 0x61, 0x21, 0xa6, 0x8d, 0x07, 0x14, 0x3a, 0x46, 0x9b, 0x00,
	0x4d, 0xc3, 0x88, 0x33, 0xc6, 0x2b, 0xe0, 0xf1, 0x2c, 0x35, 0x5c, 0x7e, 0x23, 0x66, 0x69, 0x3c,
	0xe5, 0x2e, 0x8d, 0x93, 0x1d, 0x0b, 0x5d, 0xd8, 0x62, 0x4b, 0xec, 0x75, 0x76, 0xbb, 0xbc, 0x0b,
	0xf9, 0xb3, 0xe6, 0xa7, 0xbe, 0xd7, 0x87, 0xfd, 0x59, 0xd5, 0x28, 0x05, 0xe5, 0x1f, 0xa3, 0x93,
	0xcf, 0xb3, 0x43, 0x9f, 0x7d, 0x9e, 0x1d, 0xfa, 0xf2, 0xf3, 0x2c, 0x7a, 0xbf, 0x93, 0x45, 0x3f,
	0xeb, 0x64, 0xd1, 0xcf, 0x3b, 0x59, 0x74, 0xd2, 0xc9, 0xa2, 0xcf, 0x3a, 0x59, 0xf4, 0x8b, 0x4e,
	0x16, 0x3d, 0xef, 0x64, 0x87, 0xbe, 0xec, 0x64, 0xd1, 0x8f, 0xbe, 0xc8, 0x0e, 0x1d, 0x7f, 0x91,
	0x45, 0x27, 0x5f, 0x64, 0x87, 0x3e, 0xfb, 0x22, 0x3b, 0xf4, 0xdb, 0xef, 0x35, 0x54, 0xed, 0xa0,
	0x91, 0xf7, 0xce, 0x72, 0xf3, 0x2d, 0x63, 0x8d, 0x3c, 0xd4, 0x55, 0xbd, 0xb9, 0xaa, 0xe9, 0x6a,
	0x5b, 0x12, 0xb1, 0xbe, 0xea, 0x89, 0xd7, 0xb4, 0x5a, 0x43, 0x5d, 0xc3, 0x4f, 0x4c, 0xef, 0xd7,
	0x69, 0x03, 0x7e, 0xc0, 0x57, 0x1b, 0x21, 0xbf, 0xf1, 0xda, 0xf8, 0xaf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb1, 0x3a, 0x57, 0xc4, 0xee, 0x37, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VolterraCertifiedHw != that1.VolterraCertifiedHw {
		return false
	}
	if len(this.MasterNodeConfiguration) != len(that1.MasterNodeConfiguration) {
		return false
	}
	for i := range this.MasterNodeConfiguration {
		if !this.MasterNodeConfiguration[i].Equal(that1.MasterNodeConfiguration[i]) {
			return false
		}
	}
	if len(this.WorkerNodes) != len(that1.WorkerNodes) {
		return false
	}
	for i := range this.WorkerNodes {
		if this.WorkerNodes[i] != that1.WorkerNodes[i] {
			return false
		}
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if that1.BondChoice == nil {
		if this.BondChoice != nil {
			return false
		}
	} else if this.BondChoice == nil {
		return false
	} else if !this.BondChoice.Equal(that1.BondChoice) {
		return false
	}
	if that1.NetworkCfgChoice == nil {
		if this.NetworkCfgChoice != nil {
			return false
		}
	} else if this.NetworkCfgChoice == nil {
		return false
	} else if !this.NetworkCfgChoice.Equal(that1.NetworkCfgChoice) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if !this.Sw.Equal(that1.Sw) {
		return false
	}
	if !this.Os.Equal(that1.Os) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	if !this.KubernetesUpgradeDrain.Equal(that1.KubernetesUpgradeDrain) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoBondDevices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoBondDevices)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoBondDevices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoBondDevices.Equal(that1.NoBondDevices) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BondDeviceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BondDeviceList)
	if !ok {
		that2, ok := that.(GlobalSpecType_BondDeviceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BondDeviceList.Equal(that1.BondDeviceList) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultNetworkConfig)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultNetworkConfig.Equal(that1.DefaultNetworkConfig) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CustomNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CustomNetworkConfig)
	if !ok {
		that2, ok := that.(GlobalSpecType_CustomNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomNetworkConfig.Equal(that1.CustomNetworkConfig) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GlobalSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(GlobalSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(GlobalSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VolterraCertifiedHw != that1.VolterraCertifiedHw {
		return false
	}
	if len(this.MasterNodeConfiguration) != len(that1.MasterNodeConfiguration) {
		return false
	}
	for i := range this.MasterNodeConfiguration {
		if !this.MasterNodeConfiguration[i].Equal(that1.MasterNodeConfiguration[i]) {
			return false
		}
	}
	if len(this.WorkerNodes) != len(that1.WorkerNodes) {
		return false
	}
	for i := range this.WorkerNodes {
		if this.WorkerNodes[i] != that1.WorkerNodes[i] {
			return false
		}
	}
	if that1.BondChoice == nil {
		if this.BondChoice != nil {
			return false
		}
	} else if this.BondChoice == nil {
		return false
	} else if !this.BondChoice.Equal(that1.BondChoice) {
		return false
	}
	if that1.NetworkCfgChoice == nil {
		if this.NetworkCfgChoice != nil {
			return false
		}
	} else if this.NetworkCfgChoice == nil {
		return false
	} else if !this.NetworkCfgChoice.Equal(that1.NetworkCfgChoice) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.Sw.Equal(that1.Sw) {
		return false
	}
	if !this.Os.Equal(that1.Os) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	if !this.KubernetesUpgradeDrain.Equal(that1.KubernetesUpgradeDrain) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoBondDevices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoBondDevices)
	if !ok {
		that2, ok := that.(CreateSpecType_NoBondDevices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoBondDevices.Equal(that1.NoBondDevices) {
		return false
	}
	return true
}
func (this *CreateSpecType_BondDeviceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BondDeviceList)
	if !ok {
		that2, ok := that.(CreateSpecType_BondDeviceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BondDeviceList.Equal(that1.BondDeviceList) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultNetworkConfig)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultNetworkConfig.Equal(that1.DefaultNetworkConfig) {
		return false
	}
	return true
}
func (this *CreateSpecType_CustomNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CustomNetworkConfig)
	if !ok {
		that2, ok := that.(CreateSpecType_CustomNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomNetworkConfig.Equal(that1.CustomNetworkConfig) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(CreateSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *CreateSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(CreateSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *CreateSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(CreateSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *CreateSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(CreateSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VolterraCertifiedHw != that1.VolterraCertifiedHw {
		return false
	}
	if len(this.MasterNodeConfiguration) != len(that1.MasterNodeConfiguration) {
		return false
	}
	for i := range this.MasterNodeConfiguration {
		if !this.MasterNodeConfiguration[i].Equal(that1.MasterNodeConfiguration[i]) {
			return false
		}
	}
	if len(this.WorkerNodes) != len(that1.WorkerNodes) {
		return false
	}
	for i := range this.WorkerNodes {
		if this.WorkerNodes[i] != that1.WorkerNodes[i] {
			return false
		}
	}
	if that1.BondChoice == nil {
		if this.BondChoice != nil {
			return false
		}
	} else if this.BondChoice == nil {
		return false
	} else if !this.BondChoice.Equal(that1.BondChoice) {
		return false
	}
	if that1.NetworkCfgChoice == nil {
		if this.NetworkCfgChoice != nil {
			return false
		}
	} else if this.NetworkCfgChoice == nil {
		return false
	} else if !this.NetworkCfgChoice.Equal(that1.NetworkCfgChoice) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.Sw.Equal(that1.Sw) {
		return false
	}
	if !this.Os.Equal(that1.Os) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	if !this.KubernetesUpgradeDrain.Equal(that1.KubernetesUpgradeDrain) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoBondDevices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoBondDevices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoBondDevices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoBondDevices.Equal(that1.NoBondDevices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BondDeviceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BondDeviceList)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BondDeviceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BondDeviceList.Equal(that1.BondDeviceList) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultNetworkConfig)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultNetworkConfig.Equal(that1.DefaultNetworkConfig) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CustomNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CustomNetworkConfig)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CustomNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomNetworkConfig.Equal(that1.CustomNetworkConfig) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VolterraCertifiedHw != that1.VolterraCertifiedHw {
		return false
	}
	if len(this.MasterNodeConfiguration) != len(that1.MasterNodeConfiguration) {
		return false
	}
	for i := range this.MasterNodeConfiguration {
		if !this.MasterNodeConfiguration[i].Equal(that1.MasterNodeConfiguration[i]) {
			return false
		}
	}
	if len(this.WorkerNodes) != len(that1.WorkerNodes) {
		return false
	}
	for i := range this.WorkerNodes {
		if this.WorkerNodes[i] != that1.WorkerNodes[i] {
			return false
		}
	}
	if this.VolterraSoftwareVersion != that1.VolterraSoftwareVersion {
		return false
	}
	if this.OperatingSystemVersion != that1.OperatingSystemVersion {
		return false
	}
	if that1.BondChoice == nil {
		if this.BondChoice != nil {
			return false
		}
	} else if this.BondChoice == nil {
		return false
	} else if !this.BondChoice.Equal(that1.BondChoice) {
		return false
	}
	if that1.NetworkCfgChoice == nil {
		if this.NetworkCfgChoice != nil {
			return false
		}
	} else if this.NetworkCfgChoice == nil {
		return false
	} else if !this.NetworkCfgChoice.Equal(that1.NetworkCfgChoice) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Coordinates.Equal(that1.Coordinates) {
		return false
	}
	if that1.LogsReceiverChoice == nil {
		if this.LogsReceiverChoice != nil {
			return false
		}
	} else if this.LogsReceiverChoice == nil {
		return false
	} else if !this.LogsReceiverChoice.Equal(that1.LogsReceiverChoice) {
		return false
	}
	if this.SiteState != that1.SiteState {
		return false
	}
	if that1.BlockedServicesChoice == nil {
		if this.BlockedServicesChoice != nil {
			return false
		}
	} else if this.BlockedServicesChoice == nil {
		return false
	} else if !this.BlockedServicesChoice.Equal(that1.BlockedServicesChoice) {
		return false
	}
	if !this.OfflineSurvivabilityMode.Equal(that1.OfflineSurvivabilityMode) {
		return false
	}
	if !this.PerformanceEnhancementMode.Equal(that1.PerformanceEnhancementMode) {
		return false
	}
	if !this.KubernetesUpgradeDrain.Equal(that1.KubernetesUpgradeDrain) {
		return false
	}
	return true
}
func (this *GetSpecType_NoBondDevices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoBondDevices)
	if !ok {
		that2, ok := that.(GetSpecType_NoBondDevices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoBondDevices.Equal(that1.NoBondDevices) {
		return false
	}
	return true
}
func (this *GetSpecType_BondDeviceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BondDeviceList)
	if !ok {
		that2, ok := that.(GetSpecType_BondDeviceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BondDeviceList.Equal(that1.BondDeviceList) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultNetworkConfig)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultNetworkConfig.Equal(that1.DefaultNetworkConfig) {
		return false
	}
	return true
}
func (this *GetSpecType_CustomNetworkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CustomNetworkConfig)
	if !ok {
		that2, ok := that.(GetSpecType_CustomNetworkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomNetworkConfig.Equal(that1.CustomNetworkConfig) {
		return false
	}
	return true
}
func (this *GetSpecType_LogsStreamingDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogsStreamingDisabled)
	if !ok {
		that2, ok := that.(GetSpecType_LogsStreamingDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogsStreamingDisabled.Equal(that1.LogsStreamingDisabled) {
		return false
	}
	return true
}
func (this *GetSpecType_LogReceiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LogReceiver)
	if !ok {
		that2, ok := that.(GetSpecType_LogReceiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogReceiver.Equal(that1.LogReceiver) {
		return false
	}
	return true
}
func (this *GetSpecType_DefaultBlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DefaultBlockedServices)
	if !ok {
		that2, ok := that.(GetSpecType_DefaultBlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultBlockedServices.Equal(that1.DefaultBlockedServices) {
		return false
	}
	return true
}
func (this *GetSpecType_BlockedServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BlockedServices)
	if !ok {
		that2, ok := that.(GetSpecType_BlockedServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockedServices.Equal(that1.BlockedServices) {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SloChoice == nil {
		if this.SloChoice != nil {
			return false
		}
	} else if this.SloChoice == nil {
		return false
	} else if !this.SloChoice.Equal(that1.SloChoice) {
		return false
	}
	if that1.SliChoice == nil {
		if this.SliChoice != nil {
			return false
		}
	} else if this.SliChoice == nil {
		return false
	} else if !this.SliChoice.Equal(that1.SliChoice) {
		return false
	}
	if that1.InterfaceChoice == nil {
		if this.InterfaceChoice != nil {
			return false
		}
	} else if this.InterfaceChoice == nil {
		return false
	} else if !this.InterfaceChoice.Equal(that1.InterfaceChoice) {
		return false
	}
	if that1.NetworkPolicyChoice == nil {
		if this.NetworkPolicyChoice != nil {
			return false
		}
	} else if this.NetworkPolicyChoice == nil {
		return false
	} else if !this.NetworkPolicyChoice.Equal(that1.NetworkPolicyChoice) {
		return false
	}
	if that1.ForwardProxyChoice == nil {
		if this.ForwardProxyChoice != nil {
			return false
		}
	} else if this.ForwardProxyChoice == nil {
		return false
	} else if !this.ForwardProxyChoice.Equal(that1.ForwardProxyChoice) {
		return false
	}
	if that1.GlobalNetworkChoice == nil {
		if this.GlobalNetworkChoice != nil {
			return false
		}
	} else if this.GlobalNetworkChoice == nil {
		return false
	} else if !this.GlobalNetworkChoice.Equal(that1.GlobalNetworkChoice) {
		return false
	}
	if this.BgpRouterId != that1.BgpRouterId {
		return false
	}
	if this.BgpPeerAddress != that1.BgpPeerAddress {
		return false
	}
	if this.VipVrrpMode != that1.VipVrrpMode {
		return false
	}
	if this.TunnelDeadTimeout != that1.TunnelDeadTimeout {
		return false
	}
	if that1.SiteMeshGroupChoice == nil {
		if this.SiteMeshGroupChoice != nil {
			return false
		}
	} else if this.SiteMeshGroupChoice == nil {
		return false
	} else if !this.SiteMeshGroupChoice.Equal(that1.SiteMeshGroupChoice) {
		return false
	}
	if this.BgpPeerAddressV6 != that1.BgpPeerAddressV6 {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration_DefaultConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration_DefaultConfig)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration_DefaultConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultConfig.Equal(that1.DefaultConfig) {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration_SloConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration_SloConfig)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration_SloConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SloConfig.Equal(that1.SloConfig) {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration_DefaultSliConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration_DefaultSliConfig)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration_DefaultSliConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultSliConfig.Equal(that1.DefaultSliConfig) {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration_SliConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration_SliConfig)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration_SliConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SliConfig.Equal(that1.SliConfig) {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration_DefaultInterfaceConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration_DefaultInterfaceConfig)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration_DefaultInterfaceConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultInterfaceConfig.Equal(that1.DefaultInterfaceConfig) {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration_InterfaceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration_InterfaceList)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration_InterfaceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InterfaceList.Equal(that1.InterfaceList) {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration_NoNetworkPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration_NoNetworkPolicy)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration_NoNetworkPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoNetworkPolicy.Equal(that1.NoNetworkPolicy) {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration_ActiveNetworkPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration_ActiveNetworkPolicies)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration_ActiveNetworkPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveNetworkPolicies.Equal(that1.ActiveNetworkPolicies) {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveEnhancedFirewallPolicies.Equal(that1.ActiveEnhancedFirewallPolicies) {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration_NoForwardProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration_NoForwardProxy)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration_NoForwardProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoForwardProxy.Equal(that1.NoForwardProxy) {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration_ActiveForwardProxyPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration_ActiveForwardProxyPolicies)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration_ActiveForwardProxyPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveForwardProxyPolicies.Equal(that1.ActiveForwardProxyPolicies) {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration_ForwardProxyAllowAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration_ForwardProxyAllowAll)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration_ForwardProxyAllowAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardProxyAllowAll.Equal(that1.ForwardProxyAllowAll) {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration_NoGlobalNetwork) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration_NoGlobalNetwork)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration_NoGlobalNetwork)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoGlobalNetwork.Equal(that1.NoGlobalNetwork) {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration_GlobalNetworkList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration_GlobalNetworkList)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration_GlobalNetworkList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalNetworkList.Equal(that1.GlobalNetworkList) {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration_SmConnectionPublicIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration_SmConnectionPublicIp)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration_SmConnectionPublicIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPublicIp.Equal(that1.SmConnectionPublicIp) {
		return false
	}
	return true
}
func (this *SmsNetworkConfiguration_SmConnectionPvtIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SmsNetworkConfiguration_SmConnectionPvtIp)
	if !ok {
		that2, ok := that.(SmsNetworkConfiguration_SmConnectionPvtIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmConnectionPvtIp.Equal(that1.SmConnectionPvtIp) {
		return false
	}
	return true
}
func (this *VnConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration)
	if !ok {
		that2, ok := that.(VnConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if this.Vip != that1.Vip {
		return false
	}
	if this.VipV6 != that1.VipV6 {
		return false
	}
	if this.Nameserver != that1.Nameserver {
		return false
	}
	if this.NameserverV6 != that1.NameserverV6 {
		return false
	}
	if that1.StaticRouteChoice == nil {
		if this.StaticRouteChoice != nil {
			return false
		}
	} else if this.StaticRouteChoice == nil {
		return false
	} else if !this.StaticRouteChoice.Equal(that1.StaticRouteChoice) {
		return false
	}
	if that1.StaticV6RouteChoice == nil {
		if this.StaticV6RouteChoice != nil {
			return false
		}
	} else if this.StaticV6RouteChoice == nil {
		return false
	} else if !this.StaticV6RouteChoice.Equal(that1.StaticV6RouteChoice) {
		return false
	}
	if that1.DcClusterGroupChoice == nil {
		if this.DcClusterGroupChoice != nil {
			return false
		}
	} else if this.DcClusterGroupChoice == nil {
		return false
	} else if !this.DcClusterGroupChoice.Equal(that1.DcClusterGroupChoice) {
		return false
	}
	if len(this.DcClusterGroupInterface) != len(that1.DcClusterGroupInterface) {
		return false
	}
	for i := range this.DcClusterGroupInterface {
		if !this.DcClusterGroupInterface[i].Equal(that1.DcClusterGroupInterface[i]) {
			return false
		}
	}
	return true
}
func (this *VnConfiguration_NoStaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_NoStaticRoutes)
	if !ok {
		that2, ok := that.(VnConfiguration_NoStaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoStaticRoutes.Equal(that1.NoStaticRoutes) {
		return false
	}
	return true
}
func (this *VnConfiguration_StaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_StaticRoutes)
	if !ok {
		that2, ok := that.(VnConfiguration_StaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StaticRoutes.Equal(that1.StaticRoutes) {
		return false
	}
	return true
}
func (this *VnConfiguration_NoV6StaticRoutes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_NoV6StaticRoutes)
	if !ok {
		that2, ok := that.(VnConfiguration_NoV6StaticRoutes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoV6StaticRoutes.Equal(that1.NoV6StaticRoutes) {
		return false
	}
	return true
}
func (this *VnConfiguration_StaticV6Routes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_StaticV6Routes)
	if !ok {
		that2, ok := that.(VnConfiguration_StaticV6Routes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StaticV6Routes.Equal(that1.StaticV6Routes) {
		return false
	}
	return true
}
func (this *VnConfiguration_NoDcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_NoDcClusterGroup)
	if !ok {
		that2, ok := that.(VnConfiguration_NoDcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoDcClusterGroup.Equal(that1.NoDcClusterGroup) {
		return false
	}
	return true
}
func (this *VnConfiguration_DcClusterGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VnConfiguration_DcClusterGroup)
	if !ok {
		that2, ok := that.(VnConfiguration_DcClusterGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroup.Equal(that1.DcClusterGroup) {
		return false
	}
	return true
}
func (this *StaticRoutesListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StaticRoutesListType)
	if !ok {
		that2, ok := that.(StaticRoutesListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StaticRoutes) != len(that1.StaticRoutes) {
		return false
	}
	for i := range this.StaticRoutes {
		if !this.StaticRoutes[i].Equal(that1.StaticRoutes[i]) {
			return false
		}
	}
	return true
}
func (this *InterfaceListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InterfaceListType)
	if !ok {
		that2, ok := that.(InterfaceListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Interfaces) != len(that1.Interfaces) {
		return false
	}
	for i := range this.Interfaces {
		if !this.Interfaces[i].Equal(that1.Interfaces[i]) {
			return false
		}
	}
	return true
}
func (this *Interface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface)
	if !ok {
		that2, ok := that.(Interface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if that1.InterfaceChoice == nil {
		if this.InterfaceChoice != nil {
			return false
		}
	} else if this.InterfaceChoice == nil {
		return false
	} else if !this.InterfaceChoice.Equal(that1.InterfaceChoice) {
		return false
	}
	if that1.DcClusterGroupConnectivityInterfaceChoice == nil {
		if this.DcClusterGroupConnectivityInterfaceChoice != nil {
			return false
		}
	} else if this.DcClusterGroupConnectivityInterfaceChoice == nil {
		return false
	} else if !this.DcClusterGroupConnectivityInterfaceChoice.Equal(that1.DcClusterGroupConnectivityInterfaceChoice) {
		return false
	}
	return true
}
func (this *Interface_EthernetInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_EthernetInterface)
	if !ok {
		that2, ok := that.(Interface_EthernetInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EthernetInterface.Equal(that1.EthernetInterface) {
		return false
	}
	return true
}
func (this *Interface_DedicatedInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_DedicatedInterface)
	if !ok {
		that2, ok := that.(Interface_DedicatedInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DedicatedInterface.Equal(that1.DedicatedInterface) {
		return false
	}
	return true
}
func (this *Interface_DedicatedManagementInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_DedicatedManagementInterface)
	if !ok {
		that2, ok := that.(Interface_DedicatedManagementInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DedicatedManagementInterface.Equal(that1.DedicatedManagementInterface) {
		return false
	}
	return true
}
func (this *Interface_LoopbackInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_LoopbackInterface)
	if !ok {
		that2, ok := that.(Interface_LoopbackInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LoopbackInterface.Equal(that1.LoopbackInterface) {
		return false
	}
	return true
}
func (this *Interface_DcClusterGroupConnectivityInterfaceDisabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_DcClusterGroupConnectivityInterfaceDisabled)
	if !ok {
		that2, ok := that.(Interface_DcClusterGroupConnectivityInterfaceDisabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupConnectivityInterfaceDisabled.Equal(that1.DcClusterGroupConnectivityInterfaceDisabled) {
		return false
	}
	return true
}
func (this *Interface_DcClusterGroupConnectivityInterfaceEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Interface_DcClusterGroupConnectivityInterfaceEnabled)
	if !ok {
		that2, ok := that.(Interface_DcClusterGroupConnectivityInterfaceEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DcClusterGroupConnectivityInterfaceEnabled.Equal(that1.DcClusterGroupConnectivityInterfaceEnabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&securemesh_site.GlobalSpecType{")
	s = append(s, "VolterraCertifiedHw: "+fmt.Sprintf("%#v", this.VolterraCertifiedHw)+",\n")
	if this.MasterNodeConfiguration != nil {
		s = append(s, "MasterNodeConfiguration: "+fmt.Sprintf("%#v", this.MasterNodeConfiguration)+",\n")
	}
	s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	if this.BondChoice != nil {
		s = append(s, "BondChoice: "+fmt.Sprintf("%#v", this.BondChoice)+",\n")
	}
	if this.NetworkCfgChoice != nil {
		s = append(s, "NetworkCfgChoice: "+fmt.Sprintf("%#v", this.NetworkCfgChoice)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.Sw != nil {
		s = append(s, "Sw: "+fmt.Sprintf("%#v", this.Sw)+",\n")
	}
	if this.Os != nil {
		s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	if this.KubernetesUpgradeDrain != nil {
		s = append(s, "KubernetesUpgradeDrain: "+fmt.Sprintf("%#v", this.KubernetesUpgradeDrain)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_NoBondDevices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.GlobalSpecType_NoBondDevices{` +
		`NoBondDevices:` + fmt.Sprintf("%#v", this.NoBondDevices) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BondDeviceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.GlobalSpecType_BondDeviceList{` +
		`BondDeviceList:` + fmt.Sprintf("%#v", this.BondDeviceList) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.GlobalSpecType_DefaultNetworkConfig{` +
		`DefaultNetworkConfig:` + fmt.Sprintf("%#v", this.DefaultNetworkConfig) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CustomNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.GlobalSpecType_CustomNetworkConfig{` +
		`CustomNetworkConfig:` + fmt.Sprintf("%#v", this.CustomNetworkConfig) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.GlobalSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.GlobalSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.GlobalSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.GlobalSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 22)
	s = append(s, "&securemesh_site.CreateSpecType{")
	s = append(s, "VolterraCertifiedHw: "+fmt.Sprintf("%#v", this.VolterraCertifiedHw)+",\n")
	if this.MasterNodeConfiguration != nil {
		s = append(s, "MasterNodeConfiguration: "+fmt.Sprintf("%#v", this.MasterNodeConfiguration)+",\n")
	}
	s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	if this.BondChoice != nil {
		s = append(s, "BondChoice: "+fmt.Sprintf("%#v", this.BondChoice)+",\n")
	}
	if this.NetworkCfgChoice != nil {
		s = append(s, "NetworkCfgChoice: "+fmt.Sprintf("%#v", this.NetworkCfgChoice)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.Sw != nil {
		s = append(s, "Sw: "+fmt.Sprintf("%#v", this.Sw)+",\n")
	}
	if this.Os != nil {
		s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	if this.KubernetesUpgradeDrain != nil {
		s = append(s, "KubernetesUpgradeDrain: "+fmt.Sprintf("%#v", this.KubernetesUpgradeDrain)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_NoBondDevices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.CreateSpecType_NoBondDevices{` +
		`NoBondDevices:` + fmt.Sprintf("%#v", this.NoBondDevices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BondDeviceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.CreateSpecType_BondDeviceList{` +
		`BondDeviceList:` + fmt.Sprintf("%#v", this.BondDeviceList) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.CreateSpecType_DefaultNetworkConfig{` +
		`DefaultNetworkConfig:` + fmt.Sprintf("%#v", this.DefaultNetworkConfig) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CustomNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.CreateSpecType_CustomNetworkConfig{` +
		`CustomNetworkConfig:` + fmt.Sprintf("%#v", this.CustomNetworkConfig) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.CreateSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.CreateSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.CreateSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.CreateSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 22)
	s = append(s, "&securemesh_site.ReplaceSpecType{")
	s = append(s, "VolterraCertifiedHw: "+fmt.Sprintf("%#v", this.VolterraCertifiedHw)+",\n")
	if this.MasterNodeConfiguration != nil {
		s = append(s, "MasterNodeConfiguration: "+fmt.Sprintf("%#v", this.MasterNodeConfiguration)+",\n")
	}
	s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	if this.BondChoice != nil {
		s = append(s, "BondChoice: "+fmt.Sprintf("%#v", this.BondChoice)+",\n")
	}
	if this.NetworkCfgChoice != nil {
		s = append(s, "NetworkCfgChoice: "+fmt.Sprintf("%#v", this.NetworkCfgChoice)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.Sw != nil {
		s = append(s, "Sw: "+fmt.Sprintf("%#v", this.Sw)+",\n")
	}
	if this.Os != nil {
		s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	if this.KubernetesUpgradeDrain != nil {
		s = append(s, "KubernetesUpgradeDrain: "+fmt.Sprintf("%#v", this.KubernetesUpgradeDrain)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_NoBondDevices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.ReplaceSpecType_NoBondDevices{` +
		`NoBondDevices:` + fmt.Sprintf("%#v", this.NoBondDevices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BondDeviceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.ReplaceSpecType_BondDeviceList{` +
		`BondDeviceList:` + fmt.Sprintf("%#v", this.BondDeviceList) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.ReplaceSpecType_DefaultNetworkConfig{` +
		`DefaultNetworkConfig:` + fmt.Sprintf("%#v", this.DefaultNetworkConfig) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CustomNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.ReplaceSpecType_CustomNetworkConfig{` +
		`CustomNetworkConfig:` + fmt.Sprintf("%#v", this.CustomNetworkConfig) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.ReplaceSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.ReplaceSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.ReplaceSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.ReplaceSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 23)
	s = append(s, "&securemesh_site.GetSpecType{")
	s = append(s, "VolterraCertifiedHw: "+fmt.Sprintf("%#v", this.VolterraCertifiedHw)+",\n")
	if this.MasterNodeConfiguration != nil {
		s = append(s, "MasterNodeConfiguration: "+fmt.Sprintf("%#v", this.MasterNodeConfiguration)+",\n")
	}
	s = append(s, "WorkerNodes: "+fmt.Sprintf("%#v", this.WorkerNodes)+",\n")
	s = append(s, "VolterraSoftwareVersion: "+fmt.Sprintf("%#v", this.VolterraSoftwareVersion)+",\n")
	s = append(s, "OperatingSystemVersion: "+fmt.Sprintf("%#v", this.OperatingSystemVersion)+",\n")
	if this.BondChoice != nil {
		s = append(s, "BondChoice: "+fmt.Sprintf("%#v", this.BondChoice)+",\n")
	}
	if this.NetworkCfgChoice != nil {
		s = append(s, "NetworkCfgChoice: "+fmt.Sprintf("%#v", this.NetworkCfgChoice)+",\n")
	}
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.Coordinates != nil {
		s = append(s, "Coordinates: "+fmt.Sprintf("%#v", this.Coordinates)+",\n")
	}
	if this.LogsReceiverChoice != nil {
		s = append(s, "LogsReceiverChoice: "+fmt.Sprintf("%#v", this.LogsReceiverChoice)+",\n")
	}
	s = append(s, "SiteState: "+fmt.Sprintf("%#v", this.SiteState)+",\n")
	if this.BlockedServicesChoice != nil {
		s = append(s, "BlockedServicesChoice: "+fmt.Sprintf("%#v", this.BlockedServicesChoice)+",\n")
	}
	if this.OfflineSurvivabilityMode != nil {
		s = append(s, "OfflineSurvivabilityMode: "+fmt.Sprintf("%#v", this.OfflineSurvivabilityMode)+",\n")
	}
	if this.PerformanceEnhancementMode != nil {
		s = append(s, "PerformanceEnhancementMode: "+fmt.Sprintf("%#v", this.PerformanceEnhancementMode)+",\n")
	}
	if this.KubernetesUpgradeDrain != nil {
		s = append(s, "KubernetesUpgradeDrain: "+fmt.Sprintf("%#v", this.KubernetesUpgradeDrain)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_NoBondDevices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.GetSpecType_NoBondDevices{` +
		`NoBondDevices:` + fmt.Sprintf("%#v", this.NoBondDevices) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BondDeviceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.GetSpecType_BondDeviceList{` +
		`BondDeviceList:` + fmt.Sprintf("%#v", this.BondDeviceList) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.GetSpecType_DefaultNetworkConfig{` +
		`DefaultNetworkConfig:` + fmt.Sprintf("%#v", this.DefaultNetworkConfig) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CustomNetworkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.GetSpecType_CustomNetworkConfig{` +
		`CustomNetworkConfig:` + fmt.Sprintf("%#v", this.CustomNetworkConfig) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogsStreamingDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.GetSpecType_LogsStreamingDisabled{` +
		`LogsStreamingDisabled:` + fmt.Sprintf("%#v", this.LogsStreamingDisabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LogReceiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.GetSpecType_LogReceiver{` +
		`LogReceiver:` + fmt.Sprintf("%#v", this.LogReceiver) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DefaultBlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.GetSpecType_DefaultBlockedServices{` +
		`DefaultBlockedServices:` + fmt.Sprintf("%#v", this.DefaultBlockedServices) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BlockedServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.GetSpecType_BlockedServices{` +
		`BlockedServices:` + fmt.Sprintf("%#v", this.BlockedServices) + `}`}, ", ")
	return s
}
func (this *SmsNetworkConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&securemesh_site.SmsNetworkConfiguration{")
	if this.SloChoice != nil {
		s = append(s, "SloChoice: "+fmt.Sprintf("%#v", this.SloChoice)+",\n")
	}
	if this.SliChoice != nil {
		s = append(s, "SliChoice: "+fmt.Sprintf("%#v", this.SliChoice)+",\n")
	}
	if this.InterfaceChoice != nil {
		s = append(s, "InterfaceChoice: "+fmt.Sprintf("%#v", this.InterfaceChoice)+",\n")
	}
	if this.NetworkPolicyChoice != nil {
		s = append(s, "NetworkPolicyChoice: "+fmt.Sprintf("%#v", this.NetworkPolicyChoice)+",\n")
	}
	if this.ForwardProxyChoice != nil {
		s = append(s, "ForwardProxyChoice: "+fmt.Sprintf("%#v", this.ForwardProxyChoice)+",\n")
	}
	if this.GlobalNetworkChoice != nil {
		s = append(s, "GlobalNetworkChoice: "+fmt.Sprintf("%#v", this.GlobalNetworkChoice)+",\n")
	}
	s = append(s, "BgpRouterId: "+fmt.Sprintf("%#v", this.BgpRouterId)+",\n")
	s = append(s, "BgpPeerAddress: "+fmt.Sprintf("%#v", this.BgpPeerAddress)+",\n")
	s = append(s, "VipVrrpMode: "+fmt.Sprintf("%#v", this.VipVrrpMode)+",\n")
	s = append(s, "TunnelDeadTimeout: "+fmt.Sprintf("%#v", this.TunnelDeadTimeout)+",\n")
	if this.SiteMeshGroupChoice != nil {
		s = append(s, "SiteMeshGroupChoice: "+fmt.Sprintf("%#v", this.SiteMeshGroupChoice)+",\n")
	}
	s = append(s, "BgpPeerAddressV6: "+fmt.Sprintf("%#v", this.BgpPeerAddressV6)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SmsNetworkConfiguration_DefaultConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.SmsNetworkConfiguration_DefaultConfig{` +
		`DefaultConfig:` + fmt.Sprintf("%#v", this.DefaultConfig) + `}`}, ", ")
	return s
}
func (this *SmsNetworkConfiguration_SloConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.SmsNetworkConfiguration_SloConfig{` +
		`SloConfig:` + fmt.Sprintf("%#v", this.SloConfig) + `}`}, ", ")
	return s
}
func (this *SmsNetworkConfiguration_DefaultSliConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.SmsNetworkConfiguration_DefaultSliConfig{` +
		`DefaultSliConfig:` + fmt.Sprintf("%#v", this.DefaultSliConfig) + `}`}, ", ")
	return s
}
func (this *SmsNetworkConfiguration_SliConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.SmsNetworkConfiguration_SliConfig{` +
		`SliConfig:` + fmt.Sprintf("%#v", this.SliConfig) + `}`}, ", ")
	return s
}
func (this *SmsNetworkConfiguration_DefaultInterfaceConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.SmsNetworkConfiguration_DefaultInterfaceConfig{` +
		`DefaultInterfaceConfig:` + fmt.Sprintf("%#v", this.DefaultInterfaceConfig) + `}`}, ", ")
	return s
}
func (this *SmsNetworkConfiguration_InterfaceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.SmsNetworkConfiguration_InterfaceList{` +
		`InterfaceList:` + fmt.Sprintf("%#v", this.InterfaceList) + `}`}, ", ")
	return s
}
func (this *SmsNetworkConfiguration_NoNetworkPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.SmsNetworkConfiguration_NoNetworkPolicy{` +
		`NoNetworkPolicy:` + fmt.Sprintf("%#v", this.NoNetworkPolicy) + `}`}, ", ")
	return s
}
func (this *SmsNetworkConfiguration_ActiveNetworkPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.SmsNetworkConfiguration_ActiveNetworkPolicies{` +
		`ActiveNetworkPolicies:` + fmt.Sprintf("%#v", this.ActiveNetworkPolicies) + `}`}, ", ")
	return s
}
func (this *SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies{` +
		`ActiveEnhancedFirewallPolicies:` + fmt.Sprintf("%#v", this.ActiveEnhancedFirewallPolicies) + `}`}, ", ")
	return s
}
func (this *SmsNetworkConfiguration_NoForwardProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.SmsNetworkConfiguration_NoForwardProxy{` +
		`NoForwardProxy:` + fmt.Sprintf("%#v", this.NoForwardProxy) + `}`}, ", ")
	return s
}
func (this *SmsNetworkConfiguration_ActiveForwardProxyPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.SmsNetworkConfiguration_ActiveForwardProxyPolicies{` +
		`ActiveForwardProxyPolicies:` + fmt.Sprintf("%#v", this.ActiveForwardProxyPolicies) + `}`}, ", ")
	return s
}
func (this *SmsNetworkConfiguration_ForwardProxyAllowAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.SmsNetworkConfiguration_ForwardProxyAllowAll{` +
		`ForwardProxyAllowAll:` + fmt.Sprintf("%#v", this.ForwardProxyAllowAll) + `}`}, ", ")
	return s
}
func (this *SmsNetworkConfiguration_NoGlobalNetwork) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.SmsNetworkConfiguration_NoGlobalNetwork{` +
		`NoGlobalNetwork:` + fmt.Sprintf("%#v", this.NoGlobalNetwork) + `}`}, ", ")
	return s
}
func (this *SmsNetworkConfiguration_GlobalNetworkList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.SmsNetworkConfiguration_GlobalNetworkList{` +
		`GlobalNetworkList:` + fmt.Sprintf("%#v", this.GlobalNetworkList) + `}`}, ", ")
	return s
}
func (this *SmsNetworkConfiguration_SmConnectionPublicIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.SmsNetworkConfiguration_SmConnectionPublicIp{` +
		`SmConnectionPublicIp:` + fmt.Sprintf("%#v", this.SmConnectionPublicIp) + `}`}, ", ")
	return s
}
func (this *SmsNetworkConfiguration_SmConnectionPvtIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.SmsNetworkConfiguration_SmConnectionPvtIp{` +
		`SmConnectionPvtIp:` + fmt.Sprintf("%#v", this.SmConnectionPvtIp) + `}`}, ", ")
	return s
}
func (this *VnConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&securemesh_site.VnConfiguration{")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	s = append(s, "Vip: "+fmt.Sprintf("%#v", this.Vip)+",\n")
	s = append(s, "VipV6: "+fmt.Sprintf("%#v", this.VipV6)+",\n")
	s = append(s, "Nameserver: "+fmt.Sprintf("%#v", this.Nameserver)+",\n")
	s = append(s, "NameserverV6: "+fmt.Sprintf("%#v", this.NameserverV6)+",\n")
	if this.StaticRouteChoice != nil {
		s = append(s, "StaticRouteChoice: "+fmt.Sprintf("%#v", this.StaticRouteChoice)+",\n")
	}
	if this.StaticV6RouteChoice != nil {
		s = append(s, "StaticV6RouteChoice: "+fmt.Sprintf("%#v", this.StaticV6RouteChoice)+",\n")
	}
	if this.DcClusterGroupChoice != nil {
		s = append(s, "DcClusterGroupChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupChoice)+",\n")
	}
	if this.DcClusterGroupInterface != nil {
		s = append(s, "DcClusterGroupInterface: "+fmt.Sprintf("%#v", this.DcClusterGroupInterface)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VnConfiguration_NoStaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.VnConfiguration_NoStaticRoutes{` +
		`NoStaticRoutes:` + fmt.Sprintf("%#v", this.NoStaticRoutes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_StaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.VnConfiguration_StaticRoutes{` +
		`StaticRoutes:` + fmt.Sprintf("%#v", this.StaticRoutes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_NoV6StaticRoutes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.VnConfiguration_NoV6StaticRoutes{` +
		`NoV6StaticRoutes:` + fmt.Sprintf("%#v", this.NoV6StaticRoutes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_StaticV6Routes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.VnConfiguration_StaticV6Routes{` +
		`StaticV6Routes:` + fmt.Sprintf("%#v", this.StaticV6Routes) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_NoDcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.VnConfiguration_NoDcClusterGroup{` +
		`NoDcClusterGroup:` + fmt.Sprintf("%#v", this.NoDcClusterGroup) + `}`}, ", ")
	return s
}
func (this *VnConfiguration_DcClusterGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.VnConfiguration_DcClusterGroup{` +
		`DcClusterGroup:` + fmt.Sprintf("%#v", this.DcClusterGroup) + `}`}, ", ")
	return s
}
func (this *StaticRoutesListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site.StaticRoutesListType{")
	if this.StaticRoutes != nil {
		s = append(s, "StaticRoutes: "+fmt.Sprintf("%#v", this.StaticRoutes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InterfaceListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&securemesh_site.InterfaceListType{")
	if this.Interfaces != nil {
		s = append(s, "Interfaces: "+fmt.Sprintf("%#v", this.Interfaces)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Interface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&securemesh_site.Interface{")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	if this.InterfaceChoice != nil {
		s = append(s, "InterfaceChoice: "+fmt.Sprintf("%#v", this.InterfaceChoice)+",\n")
	}
	if this.DcClusterGroupConnectivityInterfaceChoice != nil {
		s = append(s, "DcClusterGroupConnectivityInterfaceChoice: "+fmt.Sprintf("%#v", this.DcClusterGroupConnectivityInterfaceChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Interface_EthernetInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.Interface_EthernetInterface{` +
		`EthernetInterface:` + fmt.Sprintf("%#v", this.EthernetInterface) + `}`}, ", ")
	return s
}
func (this *Interface_DedicatedInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.Interface_DedicatedInterface{` +
		`DedicatedInterface:` + fmt.Sprintf("%#v", this.DedicatedInterface) + `}`}, ", ")
	return s
}
func (this *Interface_DedicatedManagementInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.Interface_DedicatedManagementInterface{` +
		`DedicatedManagementInterface:` + fmt.Sprintf("%#v", this.DedicatedManagementInterface) + `}`}, ", ")
	return s
}
func (this *Interface_LoopbackInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.Interface_LoopbackInterface{` +
		`LoopbackInterface:` + fmt.Sprintf("%#v", this.LoopbackInterface) + `}`}, ", ")
	return s
}
func (this *Interface_DcClusterGroupConnectivityInterfaceDisabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.Interface_DcClusterGroupConnectivityInterfaceDisabled{` +
		`DcClusterGroupConnectivityInterfaceDisabled:` + fmt.Sprintf("%#v", this.DcClusterGroupConnectivityInterfaceDisabled) + `}`}, ", ")
	return s
}
func (this *Interface_DcClusterGroupConnectivityInterfaceEnabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&securemesh_site.Interface_DcClusterGroupConnectivityInterfaceEnabled{` +
		`DcClusterGroupConnectivityInterfaceEnabled:` + fmt.Sprintf("%#v", this.DcClusterGroupConnectivityInterfaceEnabled) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if len(m.MasterNodeConfiguration) > 0 {
		for iNdEx := len(m.MasterNodeConfiguration) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MasterNodeConfiguration[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.KubernetesUpgradeDrain != nil {
		{
			size, err := m.KubernetesUpgradeDrain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if len(m.VolterraCertifiedHw) > 0 {
		i -= len(m.VolterraCertifiedHw)
		copy(dAtA[i:], m.VolterraCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraCertifiedHw)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Os != nil {
		{
			size, err := m.Os.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.Sw != nil {
		{
			size, err := m.Sw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.NetworkCfgChoice != nil {
		{
			size := m.NetworkCfgChoice.Size()
			i -= size
			if _, err := m.NetworkCfgChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BondChoice != nil {
		{
			size := m.BondChoice.Size()
			i -= size
			if _, err := m.BondChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.OperatingSystemVersion) > 0 {
		i -= len(m.OperatingSystemVersion)
		copy(dAtA[i:], m.OperatingSystemVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		i -= len(m.VolterraSoftwareVersion)
		copy(dAtA[i:], m.VolterraSoftwareVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WorkerNodes) > 0 {
		for iNdEx := len(m.WorkerNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WorkerNodes[iNdEx])
			copy(dAtA[i:], m.WorkerNodes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.WorkerNodes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_NoBondDevices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoBondDevices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoBondDevices != nil {
		{
			size, err := m.NoBondDevices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BondDeviceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BondDeviceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BondDeviceList != nil {
		{
			size, err := m.BondDeviceList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultNetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultNetworkConfig != nil {
		{
			size, err := m.DefaultNetworkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_CustomNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_CustomNetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomNetworkConfig != nil {
		{
			size, err := m.CustomNetworkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MasterNodeConfiguration) > 0 {
		for iNdEx := len(m.MasterNodeConfiguration) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MasterNodeConfiguration[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.KubernetesUpgradeDrain != nil {
		{
			size, err := m.KubernetesUpgradeDrain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if len(m.VolterraCertifiedHw) > 0 {
		i -= len(m.VolterraCertifiedHw)
		copy(dAtA[i:], m.VolterraCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraCertifiedHw)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Os != nil {
		{
			size, err := m.Os.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.Sw != nil {
		{
			size, err := m.Sw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.NetworkCfgChoice != nil {
		{
			size := m.NetworkCfgChoice.Size()
			i -= size
			if _, err := m.NetworkCfgChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BondChoice != nil {
		{
			size := m.BondChoice.Size()
			i -= size
			if _, err := m.BondChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.WorkerNodes) > 0 {
		for iNdEx := len(m.WorkerNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WorkerNodes[iNdEx])
			copy(dAtA[i:], m.WorkerNodes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.WorkerNodes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_NoBondDevices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoBondDevices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoBondDevices != nil {
		{
			size, err := m.NoBondDevices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BondDeviceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BondDeviceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BondDeviceList != nil {
		{
			size, err := m.BondDeviceList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultNetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultNetworkConfig != nil {
		{
			size, err := m.DefaultNetworkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_CustomNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_CustomNetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomNetworkConfig != nil {
		{
			size, err := m.CustomNetworkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MasterNodeConfiguration) > 0 {
		for iNdEx := len(m.MasterNodeConfiguration) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MasterNodeConfiguration[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.KubernetesUpgradeDrain != nil {
		{
			size, err := m.KubernetesUpgradeDrain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if len(m.VolterraCertifiedHw) > 0 {
		i -= len(m.VolterraCertifiedHw)
		copy(dAtA[i:], m.VolterraCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraCertifiedHw)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Os != nil {
		{
			size, err := m.Os.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.Sw != nil {
		{
			size, err := m.Sw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.NetworkCfgChoice != nil {
		{
			size := m.NetworkCfgChoice.Size()
			i -= size
			if _, err := m.NetworkCfgChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BondChoice != nil {
		{
			size := m.BondChoice.Size()
			i -= size
			if _, err := m.BondChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.WorkerNodes) > 0 {
		for iNdEx := len(m.WorkerNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WorkerNodes[iNdEx])
			copy(dAtA[i:], m.WorkerNodes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.WorkerNodes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_NoBondDevices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoBondDevices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoBondDevices != nil {
		{
			size, err := m.NoBondDevices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BondDeviceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BondDeviceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BondDeviceList != nil {
		{
			size, err := m.BondDeviceList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultNetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultNetworkConfig != nil {
		{
			size, err := m.DefaultNetworkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_CustomNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_CustomNetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomNetworkConfig != nil {
		{
			size, err := m.CustomNetworkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MasterNodeConfiguration) > 0 {
		for iNdEx := len(m.MasterNodeConfiguration) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MasterNodeConfiguration[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.KubernetesUpgradeDrain != nil {
		{
			size, err := m.KubernetesUpgradeDrain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	if m.PerformanceEnhancementMode != nil {
		{
			size, err := m.PerformanceEnhancementMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if len(m.VolterraCertifiedHw) > 0 {
		i -= len(m.VolterraCertifiedHw)
		copy(dAtA[i:], m.VolterraCertifiedHw)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraCertifiedHw)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	if m.OfflineSurvivabilityMode != nil {
		{
			size, err := m.OfflineSurvivabilityMode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	if m.BlockedServicesChoice != nil {
		{
			size := m.BlockedServicesChoice.Size()
			i -= size
			if _, err := m.BlockedServicesChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SiteState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SiteState))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.LogsReceiverChoice != nil {
		{
			size := m.LogsReceiverChoice.Size()
			i -= size
			if _, err := m.LogsReceiverChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Coordinates != nil {
		{
			size, err := m.Coordinates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.NetworkCfgChoice != nil {
		{
			size := m.NetworkCfgChoice.Size()
			i -= size
			if _, err := m.NetworkCfgChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BondChoice != nil {
		{
			size := m.BondChoice.Size()
			i -= size
			if _, err := m.BondChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.OperatingSystemVersion) > 0 {
		i -= len(m.OperatingSystemVersion)
		copy(dAtA[i:], m.OperatingSystemVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatingSystemVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VolterraSoftwareVersion) > 0 {
		i -= len(m.VolterraSoftwareVersion)
		copy(dAtA[i:], m.VolterraSoftwareVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VolterraSoftwareVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WorkerNodes) > 0 {
		for iNdEx := len(m.WorkerNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WorkerNodes[iNdEx])
			copy(dAtA[i:], m.WorkerNodes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.WorkerNodes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_NoBondDevices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoBondDevices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoBondDevices != nil {
		{
			size, err := m.NoBondDevices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BondDeviceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BondDeviceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BondDeviceList != nil {
		{
			size, err := m.BondDeviceList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultNetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultNetworkConfig != nil {
		{
			size, err := m.DefaultNetworkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_CustomNetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_CustomNetworkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomNetworkConfig != nil {
		{
			size, err := m.CustomNetworkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_LogsStreamingDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LogsStreamingDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogsStreamingDisabled != nil {
		{
			size, err := m.LogsStreamingDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_LogReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LogReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogReceiver != nil {
		{
			size, err := m.LogReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DefaultBlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DefaultBlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultBlockedServices != nil {
		{
			size, err := m.DefaultBlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BlockedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BlockedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockedServices != nil {
		{
			size, err := m.BlockedServices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *SmsNetworkConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmsNetworkConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BgpPeerAddressV6) > 0 {
		i -= len(m.BgpPeerAddressV6)
		copy(dAtA[i:], m.BgpPeerAddressV6)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BgpPeerAddressV6)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.SiteMeshGroupChoice != nil {
		{
			size := m.SiteMeshGroupChoice.Size()
			i -= size
			if _, err := m.SiteMeshGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TunnelDeadTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TunnelDeadTimeout))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.NetworkPolicyChoice != nil {
		{
			size := m.NetworkPolicyChoice.Size()
			i -= size
			if _, err := m.NetworkPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SliChoice != nil {
		{
			size := m.SliChoice.Size()
			i -= size
			if _, err := m.SliChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VipVrrpMode != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VipVrrpMode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.BgpPeerAddress) > 0 {
		i -= len(m.BgpPeerAddress)
		copy(dAtA[i:], m.BgpPeerAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BgpPeerAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.BgpRouterId) > 0 {
		i -= len(m.BgpRouterId)
		copy(dAtA[i:], m.BgpRouterId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BgpRouterId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.GlobalNetworkChoice != nil {
		{
			size := m.GlobalNetworkChoice.Size()
			i -= size
			if _, err := m.GlobalNetworkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ForwardProxyChoice != nil {
		{
			size := m.ForwardProxyChoice.Size()
			i -= size
			if _, err := m.ForwardProxyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InterfaceChoice != nil {
		{
			size := m.InterfaceChoice.Size()
			i -= size
			if _, err := m.InterfaceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SloChoice != nil {
		{
			size := m.SloChoice.Size()
			i -= size
			if _, err := m.SloChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SmsNetworkConfiguration_DefaultConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration_DefaultConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultConfig != nil {
		{
			size, err := m.DefaultConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SmsNetworkConfiguration_SloConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration_SloConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SloConfig != nil {
		{
			size, err := m.SloConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SmsNetworkConfiguration_DefaultInterfaceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration_DefaultInterfaceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultInterfaceConfig != nil {
		{
			size, err := m.DefaultInterfaceConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *SmsNetworkConfiguration_InterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration_InterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InterfaceList != nil {
		{
			size, err := m.InterfaceList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *SmsNetworkConfiguration_NoNetworkPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration_NoNetworkPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoNetworkPolicy != nil {
		{
			size, err := m.NoNetworkPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *SmsNetworkConfiguration_ActiveNetworkPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration_ActiveNetworkPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveNetworkPolicies != nil {
		{
			size, err := m.ActiveNetworkPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *SmsNetworkConfiguration_NoForwardProxy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration_NoForwardProxy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoForwardProxy != nil {
		{
			size, err := m.NoForwardProxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *SmsNetworkConfiguration_ActiveForwardProxyPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration_ActiveForwardProxyPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveForwardProxyPolicies != nil {
		{
			size, err := m.ActiveForwardProxyPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *SmsNetworkConfiguration_ForwardProxyAllowAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration_ForwardProxyAllowAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardProxyAllowAll != nil {
		{
			size, err := m.ForwardProxyAllowAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *SmsNetworkConfiguration_NoGlobalNetwork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration_NoGlobalNetwork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoGlobalNetwork != nil {
		{
			size, err := m.NoGlobalNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *SmsNetworkConfiguration_GlobalNetworkList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration_GlobalNetworkList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GlobalNetworkList != nil {
		{
			size, err := m.GlobalNetworkList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *SmsNetworkConfiguration_DefaultSliConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration_DefaultSliConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultSliConfig != nil {
		{
			size, err := m.DefaultSliConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *SmsNetworkConfiguration_SliConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration_SliConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SliConfig != nil {
		{
			size, err := m.SliConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveEnhancedFirewallPolicies != nil {
		{
			size, err := m.ActiveEnhancedFirewallPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *SmsNetworkConfiguration_SmConnectionPublicIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration_SmConnectionPublicIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPublicIp != nil {
		{
			size, err := m.SmConnectionPublicIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *SmsNetworkConfiguration_SmConnectionPvtIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsNetworkConfiguration_SmConnectionPvtIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmConnectionPvtIp != nil {
		{
			size, err := m.SmConnectionPvtIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VnConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NameserverV6) > 0 {
		i -= len(m.NameserverV6)
		copy(dAtA[i:], m.NameserverV6)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NameserverV6)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.VipV6) > 0 {
		i -= len(m.VipV6)
		copy(dAtA[i:], m.VipV6)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.VipV6)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.StaticV6RouteChoice != nil {
		{
			size := m.StaticV6RouteChoice.Size()
			i -= size
			if _, err := m.StaticV6RouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DcClusterGroupInterface) > 0 {
		for iNdEx := len(m.DcClusterGroupInterface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DcClusterGroupInterface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.DcClusterGroupChoice != nil {
		{
			size := m.DcClusterGroupChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.StaticRouteChoice != nil {
		{
			size := m.StaticRouteChoice.Size()
			i -= size
			if _, err := m.StaticRouteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Nameserver) > 0 {
		i -= len(m.Nameserver)
		copy(dAtA[i:], m.Nameserver)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Nameserver)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Vip) > 0 {
		i -= len(m.Vip)
		copy(dAtA[i:], m.Vip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Vip)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
		for iNdEx := len(keysForLabels) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Labels[string(keysForLabels[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForLabels[iNdEx])
			copy(dAtA[i:], keysForLabels[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForLabels[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VnConfiguration_NoStaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_NoStaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoStaticRoutes != nil {
		{
			size, err := m.NoStaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_StaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_StaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StaticRoutes != nil {
		{
			size, err := m.StaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_NoDcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_NoDcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoDcClusterGroup != nil {
		{
			size, err := m.NoDcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_DcClusterGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_DcClusterGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroup != nil {
		{
			size, err := m.DcClusterGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_NoV6StaticRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_NoV6StaticRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoV6StaticRoutes != nil {
		{
			size, err := m.NoV6StaticRoutes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *VnConfiguration_StaticV6Routes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnConfiguration_StaticV6Routes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StaticV6Routes != nil {
		{
			size, err := m.StaticV6Routes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *StaticRoutesListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaticRoutesListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StaticRoutesListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StaticRoutes) > 0 {
		for iNdEx := len(m.StaticRoutes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StaticRoutes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfaceListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfaceListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Interface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DcClusterGroupConnectivityInterfaceChoice != nil {
		{
			size := m.DcClusterGroupConnectivityInterfaceChoice.Size()
			i -= size
			if _, err := m.DcClusterGroupConnectivityInterfaceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.InterfaceChoice != nil {
		{
			size := m.InterfaceChoice.Size()
			i -= size
			if _, err := m.InterfaceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Labels) > 0 {
		keysForLabels := make([]string, 0, len(m.Labels))
		for k := range m.Labels {
			keysForLabels = append(keysForLabels, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
		for iNdEx := len(keysForLabels) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Labels[string(keysForLabels[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForLabels[iNdEx])
			copy(dAtA[i:], keysForLabels[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForLabels[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Interface_EthernetInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_EthernetInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EthernetInterface != nil {
		{
			size, err := m.EthernetInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Interface_DedicatedInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_DedicatedInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DedicatedInterface != nil {
		{
			size, err := m.DedicatedInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Interface_DedicatedManagementInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_DedicatedManagementInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DedicatedManagementInterface != nil {
		{
			size, err := m.DedicatedManagementInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Interface_LoopbackInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_LoopbackInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LoopbackInterface != nil {
		{
			size, err := m.LoopbackInterface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Interface_DcClusterGroupConnectivityInterfaceDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_DcClusterGroupConnectivityInterfaceDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupConnectivityInterfaceDisabled != nil {
		{
			size, err := m.DcClusterGroupConnectivityInterfaceDisabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Interface_DcClusterGroupConnectivityInterfaceEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface_DcClusterGroupConnectivityInterfaceEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DcClusterGroupConnectivityInterfaceEnabled != nil {
		{
			size, err := m.DcClusterGroupConnectivityInterfaceEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WorkerNodes) > 0 {
		for _, s := range m.WorkerNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BondChoice != nil {
		n += m.BondChoice.Size()
	}
	if m.NetworkCfgChoice != nil {
		n += m.NetworkCfgChoice.Size()
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.Sw != nil {
		l = m.Sw.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Os != nil {
		l = m.Os.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraCertifiedHw)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.KubernetesUpgradeDrain != nil {
		l = m.KubernetesUpgradeDrain.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.MasterNodeConfiguration) > 0 {
		for _, e := range m.MasterNodeConfiguration {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_NoBondDevices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoBondDevices != nil {
		l = m.NoBondDevices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BondDeviceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BondDeviceList != nil {
		l = m.BondDeviceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultNetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultNetworkConfig != nil {
		l = m.DefaultNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CustomNetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomNetworkConfig != nil {
		l = m.CustomNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WorkerNodes) > 0 {
		for _, s := range m.WorkerNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BondChoice != nil {
		n += m.BondChoice.Size()
	}
	if m.NetworkCfgChoice != nil {
		n += m.NetworkCfgChoice.Size()
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.Sw != nil {
		l = m.Sw.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Os != nil {
		l = m.Os.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraCertifiedHw)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.KubernetesUpgradeDrain != nil {
		l = m.KubernetesUpgradeDrain.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.MasterNodeConfiguration) > 0 {
		for _, e := range m.MasterNodeConfiguration {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType_NoBondDevices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoBondDevices != nil {
		l = m.NoBondDevices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BondDeviceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BondDeviceList != nil {
		l = m.BondDeviceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultNetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultNetworkConfig != nil {
		l = m.DefaultNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CustomNetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomNetworkConfig != nil {
		l = m.CustomNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WorkerNodes) > 0 {
		for _, s := range m.WorkerNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.BondChoice != nil {
		n += m.BondChoice.Size()
	}
	if m.NetworkCfgChoice != nil {
		n += m.NetworkCfgChoice.Size()
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.Sw != nil {
		l = m.Sw.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Os != nil {
		l = m.Os.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraCertifiedHw)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.KubernetesUpgradeDrain != nil {
		l = m.KubernetesUpgradeDrain.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.MasterNodeConfiguration) > 0 {
		for _, e := range m.MasterNodeConfiguration {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType_NoBondDevices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoBondDevices != nil {
		l = m.NoBondDevices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BondDeviceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BondDeviceList != nil {
		l = m.BondDeviceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultNetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultNetworkConfig != nil {
		l = m.DefaultNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CustomNetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomNetworkConfig != nil {
		l = m.CustomNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WorkerNodes) > 0 {
		for _, s := range m.WorkerNodes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.VolterraSoftwareVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatingSystemVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BondChoice != nil {
		n += m.BondChoice.Size()
	}
	if m.NetworkCfgChoice != nil {
		n += m.NetworkCfgChoice.Size()
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LogsReceiverChoice != nil {
		n += m.LogsReceiverChoice.Size()
	}
	if m.SiteState != 0 {
		n += 2 + sovTypes(uint64(m.SiteState))
	}
	if m.BlockedServicesChoice != nil {
		n += m.BlockedServicesChoice.Size()
	}
	if m.OfflineSurvivabilityMode != nil {
		l = m.OfflineSurvivabilityMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.VolterraCertifiedHw)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.PerformanceEnhancementMode != nil {
		l = m.PerformanceEnhancementMode.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.KubernetesUpgradeDrain != nil {
		l = m.KubernetesUpgradeDrain.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.MasterNodeConfiguration) > 0 {
		for _, e := range m.MasterNodeConfiguration {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType_NoBondDevices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoBondDevices != nil {
		l = m.NoBondDevices.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BondDeviceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BondDeviceList != nil {
		l = m.BondDeviceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultNetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultNetworkConfig != nil {
		l = m.DefaultNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CustomNetworkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomNetworkConfig != nil {
		l = m.CustomNetworkConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogsStreamingDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogsStreamingDisabled != nil {
		l = m.LogsStreamingDisabled.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LogReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogReceiver != nil {
		l = m.LogReceiver.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DefaultBlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultBlockedServices != nil {
		l = m.DefaultBlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BlockedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockedServices != nil {
		l = m.BlockedServices.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SmsNetworkConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SloChoice != nil {
		n += m.SloChoice.Size()
	}
	if m.InterfaceChoice != nil {
		n += m.InterfaceChoice.Size()
	}
	if m.NetworkPolicyChoice != nil {
		n += m.NetworkPolicyChoice.Size()
	}
	if m.ForwardProxyChoice != nil {
		n += m.ForwardProxyChoice.Size()
	}
	if m.GlobalNetworkChoice != nil {
		n += m.GlobalNetworkChoice.Size()
	}
	l = len(m.BgpRouterId)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.BgpPeerAddress)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.VipVrrpMode != 0 {
		n += 2 + sovTypes(uint64(m.VipVrrpMode))
	}
	if m.SliChoice != nil {
		n += m.SliChoice.Size()
	}
	if m.TunnelDeadTimeout != 0 {
		n += 2 + sovTypes(uint64(m.TunnelDeadTimeout))
	}
	if m.SiteMeshGroupChoice != nil {
		n += m.SiteMeshGroupChoice.Size()
	}
	l = len(m.BgpPeerAddressV6)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SmsNetworkConfiguration_DefaultConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultConfig != nil {
		l = m.DefaultConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SmsNetworkConfiguration_SloConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SloConfig != nil {
		l = m.SloConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SmsNetworkConfiguration_DefaultInterfaceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultInterfaceConfig != nil {
		l = m.DefaultInterfaceConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SmsNetworkConfiguration_InterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InterfaceList != nil {
		l = m.InterfaceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SmsNetworkConfiguration_NoNetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoNetworkPolicy != nil {
		l = m.NoNetworkPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SmsNetworkConfiguration_ActiveNetworkPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveNetworkPolicies != nil {
		l = m.ActiveNetworkPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SmsNetworkConfiguration_NoForwardProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoForwardProxy != nil {
		l = m.NoForwardProxy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SmsNetworkConfiguration_ActiveForwardProxyPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveForwardProxyPolicies != nil {
		l = m.ActiveForwardProxyPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SmsNetworkConfiguration_ForwardProxyAllowAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardProxyAllowAll != nil {
		l = m.ForwardProxyAllowAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SmsNetworkConfiguration_NoGlobalNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoGlobalNetwork != nil {
		l = m.NoGlobalNetwork.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SmsNetworkConfiguration_GlobalNetworkList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalNetworkList != nil {
		l = m.GlobalNetworkList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SmsNetworkConfiguration_DefaultSliConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSliConfig != nil {
		l = m.DefaultSliConfig.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SmsNetworkConfiguration_SliConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SliConfig != nil {
		l = m.SliConfig.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveEnhancedFirewallPolicies != nil {
		l = m.ActiveEnhancedFirewallPolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SmsNetworkConfiguration_SmConnectionPublicIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPublicIp != nil {
		l = m.SmConnectionPublicIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SmsNetworkConfiguration_SmConnectionPvtIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmConnectionPvtIp != nil {
		l = m.SmConnectionPvtIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	l = len(m.Vip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Nameserver)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StaticRouteChoice != nil {
		n += m.StaticRouteChoice.Size()
	}
	if m.DcClusterGroupChoice != nil {
		n += m.DcClusterGroupChoice.Size()
	}
	if len(m.DcClusterGroupInterface) > 0 {
		for _, e := range m.DcClusterGroupInterface {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.StaticV6RouteChoice != nil {
		n += m.StaticV6RouteChoice.Size()
	}
	l = len(m.VipV6)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.NameserverV6)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *VnConfiguration_NoStaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoStaticRoutes != nil {
		l = m.NoStaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_StaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StaticRoutes != nil {
		l = m.StaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_NoDcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoDcClusterGroup != nil {
		l = m.NoDcClusterGroup.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_DcClusterGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroup != nil {
		l = m.DcClusterGroup.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_NoV6StaticRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoV6StaticRoutes != nil {
		l = m.NoV6StaticRoutes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *VnConfiguration_StaticV6Routes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StaticV6Routes != nil {
		l = m.StaticV6Routes.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *StaticRoutesListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StaticRoutes) > 0 {
		for _, e := range m.StaticRoutes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *InterfaceListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Interface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.InterfaceChoice != nil {
		n += m.InterfaceChoice.Size()
	}
	if m.DcClusterGroupConnectivityInterfaceChoice != nil {
		n += m.DcClusterGroupConnectivityInterfaceChoice.Size()
	}
	return n
}

func (m *Interface_EthernetInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EthernetInterface != nil {
		l = m.EthernetInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_DedicatedInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DedicatedInterface != nil {
		l = m.DedicatedInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_DedicatedManagementInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DedicatedManagementInterface != nil {
		l = m.DedicatedManagementInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_LoopbackInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoopbackInterface != nil {
		l = m.LoopbackInterface.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_DcClusterGroupConnectivityInterfaceDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupConnectivityInterfaceDisabled != nil {
		l = m.DcClusterGroupConnectivityInterfaceDisabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *Interface_DcClusterGroupConnectivityInterfaceEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcClusterGroupConnectivityInterfaceEnabled != nil {
		l = m.DcClusterGroupConnectivityInterfaceEnabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMasterNodeConfiguration := "[]*MasterNode{"
	for _, f := range this.MasterNodeConfiguration {
		repeatedStringForMasterNodeConfiguration += strings.Replace(fmt.Sprintf("%v", f), "MasterNode", "views.MasterNode", 1) + ","
	}
	repeatedStringForMasterNodeConfiguration += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`BondChoice:` + fmt.Sprintf("%v", this.BondChoice) + `,`,
		`NetworkCfgChoice:` + fmt.Sprintf("%v", this.NetworkCfgChoice) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`Sw:` + strings.Replace(fmt.Sprintf("%v", this.Sw), "VolterraSoftwareType", "views.VolterraSoftwareType", 1) + `,`,
		`Os:` + strings.Replace(fmt.Sprintf("%v", this.Os), "OperatingSystemType", "views.OperatingSystemType", 1) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`VolterraCertifiedHw:` + fmt.Sprintf("%v", this.VolterraCertifiedHw) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`KubernetesUpgradeDrain:` + strings.Replace(fmt.Sprintf("%v", this.KubernetesUpgradeDrain), "KubernetesUpgradeDrain", "views.KubernetesUpgradeDrain", 1) + `,`,
		`MasterNodeConfiguration:` + repeatedStringForMasterNodeConfiguration + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoBondDevices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoBondDevices{`,
		`NoBondDevices:` + strings.Replace(fmt.Sprintf("%v", this.NoBondDevices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BondDeviceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BondDeviceList{`,
		`BondDeviceList:` + strings.Replace(fmt.Sprintf("%v", this.BondDeviceList), "FleetBondDevicesListType", "fleet.FleetBondDevicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultNetworkConfig{`,
		`DefaultNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultNetworkConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CustomNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CustomNetworkConfig{`,
		`CustomNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomNetworkConfig), "SmsNetworkConfiguration", "SmsNetworkConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMasterNodeConfiguration := "[]*MasterNode{"
	for _, f := range this.MasterNodeConfiguration {
		repeatedStringForMasterNodeConfiguration += strings.Replace(fmt.Sprintf("%v", f), "MasterNode", "views.MasterNode", 1) + ","
	}
	repeatedStringForMasterNodeConfiguration += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`BondChoice:` + fmt.Sprintf("%v", this.BondChoice) + `,`,
		`NetworkCfgChoice:` + fmt.Sprintf("%v", this.NetworkCfgChoice) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`Sw:` + strings.Replace(fmt.Sprintf("%v", this.Sw), "VolterraSoftwareType", "views.VolterraSoftwareType", 1) + `,`,
		`Os:` + strings.Replace(fmt.Sprintf("%v", this.Os), "OperatingSystemType", "views.OperatingSystemType", 1) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`VolterraCertifiedHw:` + fmt.Sprintf("%v", this.VolterraCertifiedHw) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`KubernetesUpgradeDrain:` + strings.Replace(fmt.Sprintf("%v", this.KubernetesUpgradeDrain), "KubernetesUpgradeDrain", "views.KubernetesUpgradeDrain", 1) + `,`,
		`MasterNodeConfiguration:` + repeatedStringForMasterNodeConfiguration + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoBondDevices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoBondDevices{`,
		`NoBondDevices:` + strings.Replace(fmt.Sprintf("%v", this.NoBondDevices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BondDeviceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BondDeviceList{`,
		`BondDeviceList:` + strings.Replace(fmt.Sprintf("%v", this.BondDeviceList), "FleetBondDevicesListType", "fleet.FleetBondDevicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultNetworkConfig{`,
		`DefaultNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultNetworkConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CustomNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CustomNetworkConfig{`,
		`CustomNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomNetworkConfig), "SmsNetworkConfiguration", "SmsNetworkConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMasterNodeConfiguration := "[]*MasterNode{"
	for _, f := range this.MasterNodeConfiguration {
		repeatedStringForMasterNodeConfiguration += strings.Replace(fmt.Sprintf("%v", f), "MasterNode", "views.MasterNode", 1) + ","
	}
	repeatedStringForMasterNodeConfiguration += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`BondChoice:` + fmt.Sprintf("%v", this.BondChoice) + `,`,
		`NetworkCfgChoice:` + fmt.Sprintf("%v", this.NetworkCfgChoice) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`Sw:` + strings.Replace(fmt.Sprintf("%v", this.Sw), "VolterraSoftwareType", "views.VolterraSoftwareType", 1) + `,`,
		`Os:` + strings.Replace(fmt.Sprintf("%v", this.Os), "OperatingSystemType", "views.OperatingSystemType", 1) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`VolterraCertifiedHw:` + fmt.Sprintf("%v", this.VolterraCertifiedHw) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`KubernetesUpgradeDrain:` + strings.Replace(fmt.Sprintf("%v", this.KubernetesUpgradeDrain), "KubernetesUpgradeDrain", "views.KubernetesUpgradeDrain", 1) + `,`,
		`MasterNodeConfiguration:` + repeatedStringForMasterNodeConfiguration + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoBondDevices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoBondDevices{`,
		`NoBondDevices:` + strings.Replace(fmt.Sprintf("%v", this.NoBondDevices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BondDeviceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BondDeviceList{`,
		`BondDeviceList:` + strings.Replace(fmt.Sprintf("%v", this.BondDeviceList), "FleetBondDevicesListType", "fleet.FleetBondDevicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultNetworkConfig{`,
		`DefaultNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultNetworkConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CustomNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CustomNetworkConfig{`,
		`CustomNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomNetworkConfig), "SmsNetworkConfiguration", "SmsNetworkConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMasterNodeConfiguration := "[]*MasterNode{"
	for _, f := range this.MasterNodeConfiguration {
		repeatedStringForMasterNodeConfiguration += strings.Replace(fmt.Sprintf("%v", f), "MasterNode", "views.MasterNode", 1) + ","
	}
	repeatedStringForMasterNodeConfiguration += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`WorkerNodes:` + fmt.Sprintf("%v", this.WorkerNodes) + `,`,
		`VolterraSoftwareVersion:` + fmt.Sprintf("%v", this.VolterraSoftwareVersion) + `,`,
		`OperatingSystemVersion:` + fmt.Sprintf("%v", this.OperatingSystemVersion) + `,`,
		`BondChoice:` + fmt.Sprintf("%v", this.BondChoice) + `,`,
		`NetworkCfgChoice:` + fmt.Sprintf("%v", this.NetworkCfgChoice) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Coordinates:` + strings.Replace(fmt.Sprintf("%v", this.Coordinates), "Coordinates", "site.Coordinates", 1) + `,`,
		`LogsReceiverChoice:` + fmt.Sprintf("%v", this.LogsReceiverChoice) + `,`,
		`SiteState:` + fmt.Sprintf("%v", this.SiteState) + `,`,
		`BlockedServicesChoice:` + fmt.Sprintf("%v", this.BlockedServicesChoice) + `,`,
		`OfflineSurvivabilityMode:` + strings.Replace(fmt.Sprintf("%v", this.OfflineSurvivabilityMode), "OfflineSurvivabilityModeType", "views.OfflineSurvivabilityModeType", 1) + `,`,
		`VolterraCertifiedHw:` + fmt.Sprintf("%v", this.VolterraCertifiedHw) + `,`,
		`PerformanceEnhancementMode:` + strings.Replace(fmt.Sprintf("%v", this.PerformanceEnhancementMode), "PerformanceEnhancementModeType", "views.PerformanceEnhancementModeType", 1) + `,`,
		`KubernetesUpgradeDrain:` + strings.Replace(fmt.Sprintf("%v", this.KubernetesUpgradeDrain), "KubernetesUpgradeDrain", "views.KubernetesUpgradeDrain", 1) + `,`,
		`MasterNodeConfiguration:` + repeatedStringForMasterNodeConfiguration + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoBondDevices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoBondDevices{`,
		`NoBondDevices:` + strings.Replace(fmt.Sprintf("%v", this.NoBondDevices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BondDeviceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BondDeviceList{`,
		`BondDeviceList:` + strings.Replace(fmt.Sprintf("%v", this.BondDeviceList), "FleetBondDevicesListType", "fleet.FleetBondDevicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultNetworkConfig{`,
		`DefaultNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultNetworkConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CustomNetworkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CustomNetworkConfig{`,
		`CustomNetworkConfig:` + strings.Replace(fmt.Sprintf("%v", this.CustomNetworkConfig), "SmsNetworkConfiguration", "SmsNetworkConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogsStreamingDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogsStreamingDisabled{`,
		`LogsStreamingDisabled:` + strings.Replace(fmt.Sprintf("%v", this.LogsStreamingDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LogReceiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LogReceiver{`,
		`LogReceiver:` + strings.Replace(fmt.Sprintf("%v", this.LogReceiver), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DefaultBlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DefaultBlockedServices{`,
		`DefaultBlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.DefaultBlockedServices), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BlockedServices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BlockedServices{`,
		`BlockedServices:` + strings.Replace(fmt.Sprintf("%v", this.BlockedServices), "BlockedServicesListType", "fleet.BlockedServicesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration{`,
		`SloChoice:` + fmt.Sprintf("%v", this.SloChoice) + `,`,
		`InterfaceChoice:` + fmt.Sprintf("%v", this.InterfaceChoice) + `,`,
		`NetworkPolicyChoice:` + fmt.Sprintf("%v", this.NetworkPolicyChoice) + `,`,
		`ForwardProxyChoice:` + fmt.Sprintf("%v", this.ForwardProxyChoice) + `,`,
		`GlobalNetworkChoice:` + fmt.Sprintf("%v", this.GlobalNetworkChoice) + `,`,
		`BgpRouterId:` + fmt.Sprintf("%v", this.BgpRouterId) + `,`,
		`BgpPeerAddress:` + fmt.Sprintf("%v", this.BgpPeerAddress) + `,`,
		`VipVrrpMode:` + fmt.Sprintf("%v", this.VipVrrpMode) + `,`,
		`SliChoice:` + fmt.Sprintf("%v", this.SliChoice) + `,`,
		`TunnelDeadTimeout:` + fmt.Sprintf("%v", this.TunnelDeadTimeout) + `,`,
		`SiteMeshGroupChoice:` + fmt.Sprintf("%v", this.SiteMeshGroupChoice) + `,`,
		`BgpPeerAddressV6:` + fmt.Sprintf("%v", this.BgpPeerAddressV6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration_DefaultConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration_DefaultConfig{`,
		`DefaultConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration_SloConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration_SloConfig{`,
		`SloConfig:` + strings.Replace(fmt.Sprintf("%v", this.SloConfig), "VnConfiguration", "VnConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration_DefaultInterfaceConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration_DefaultInterfaceConfig{`,
		`DefaultInterfaceConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultInterfaceConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration_InterfaceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration_InterfaceList{`,
		`InterfaceList:` + strings.Replace(fmt.Sprintf("%v", this.InterfaceList), "InterfaceListType", "InterfaceListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration_NoNetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration_NoNetworkPolicy{`,
		`NoNetworkPolicy:` + strings.Replace(fmt.Sprintf("%v", this.NoNetworkPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration_ActiveNetworkPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration_ActiveNetworkPolicies{`,
		`ActiveNetworkPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveNetworkPolicies), "ActiveNetworkPoliciesType", "network_firewall.ActiveNetworkPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration_NoForwardProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration_NoForwardProxy{`,
		`NoForwardProxy:` + strings.Replace(fmt.Sprintf("%v", this.NoForwardProxy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration_ActiveForwardProxyPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration_ActiveForwardProxyPolicies{`,
		`ActiveForwardProxyPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveForwardProxyPolicies), "ActiveForwardProxyPoliciesType", "network_firewall.ActiveForwardProxyPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration_ForwardProxyAllowAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration_ForwardProxyAllowAll{`,
		`ForwardProxyAllowAll:` + strings.Replace(fmt.Sprintf("%v", this.ForwardProxyAllowAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration_NoGlobalNetwork) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration_NoGlobalNetwork{`,
		`NoGlobalNetwork:` + strings.Replace(fmt.Sprintf("%v", this.NoGlobalNetwork), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration_GlobalNetworkList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration_GlobalNetworkList{`,
		`GlobalNetworkList:` + strings.Replace(fmt.Sprintf("%v", this.GlobalNetworkList), "GlobalNetworkConnectionListType", "views.GlobalNetworkConnectionListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration_DefaultSliConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration_DefaultSliConfig{`,
		`DefaultSliConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSliConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration_SliConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration_SliConfig{`,
		`SliConfig:` + strings.Replace(fmt.Sprintf("%v", this.SliConfig), "VnConfiguration", "VnConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies{`,
		`ActiveEnhancedFirewallPolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveEnhancedFirewallPolicies), "ActiveEnhancedFirewallPoliciesType", "network_firewall.ActiveEnhancedFirewallPoliciesType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration_SmConnectionPublicIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration_SmConnectionPublicIp{`,
		`SmConnectionPublicIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPublicIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SmsNetworkConfiguration_SmConnectionPvtIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SmsNetworkConfiguration_SmConnectionPvtIp{`,
		`SmConnectionPvtIp:` + strings.Replace(fmt.Sprintf("%v", this.SmConnectionPvtIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDcClusterGroupInterface := "[]*ObjectRefType{"
	for _, f := range this.DcClusterGroupInterface {
		repeatedStringForDcClusterGroupInterface += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForDcClusterGroupInterface += "}"
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&VnConfiguration{`,
		`Labels:` + mapStringForLabels + `,`,
		`Vip:` + fmt.Sprintf("%v", this.Vip) + `,`,
		`Nameserver:` + fmt.Sprintf("%v", this.Nameserver) + `,`,
		`StaticRouteChoice:` + fmt.Sprintf("%v", this.StaticRouteChoice) + `,`,
		`DcClusterGroupChoice:` + fmt.Sprintf("%v", this.DcClusterGroupChoice) + `,`,
		`DcClusterGroupInterface:` + repeatedStringForDcClusterGroupInterface + `,`,
		`StaticV6RouteChoice:` + fmt.Sprintf("%v", this.StaticV6RouteChoice) + `,`,
		`VipV6:` + fmt.Sprintf("%v", this.VipV6) + `,`,
		`NameserverV6:` + fmt.Sprintf("%v", this.NameserverV6) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_NoStaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_NoStaticRoutes{`,
		`NoStaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoStaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_StaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_StaticRoutes{`,
		`StaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.StaticRoutes), "StaticRoutesListType", "StaticRoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_NoDcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_NoDcClusterGroup{`,
		`NoDcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.NoDcClusterGroup), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_DcClusterGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_DcClusterGroup{`,
		`DcClusterGroup:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroup), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_NoV6StaticRoutes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_NoV6StaticRoutes{`,
		`NoV6StaticRoutes:` + strings.Replace(fmt.Sprintf("%v", this.NoV6StaticRoutes), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnConfiguration_StaticV6Routes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VnConfiguration_StaticV6Routes{`,
		`StaticV6Routes:` + strings.Replace(fmt.Sprintf("%v", this.StaticV6Routes), "StaticV6RoutesListType", "virtual_network.StaticV6RoutesListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StaticRoutesListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStaticRoutes := "[]*StaticRouteViewType{"
	for _, f := range this.StaticRoutes {
		repeatedStringForStaticRoutes += strings.Replace(fmt.Sprintf("%v", f), "StaticRouteViewType", "virtual_network.StaticRouteViewType", 1) + ","
	}
	repeatedStringForStaticRoutes += "}"
	s := strings.Join([]string{`&StaticRoutesListType{`,
		`StaticRoutes:` + repeatedStringForStaticRoutes + `,`,
		`}`,
	}, "")
	return s
}
func (this *InterfaceListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInterfaces := "[]*Interface{"
	for _, f := range this.Interfaces {
		repeatedStringForInterfaces += strings.Replace(f.String(), "Interface", "Interface", 1) + ","
	}
	repeatedStringForInterfaces += "}"
	s := strings.Join([]string{`&InterfaceListType{`,
		`Interfaces:` + repeatedStringForInterfaces + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&Interface{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`InterfaceChoice:` + fmt.Sprintf("%v", this.InterfaceChoice) + `,`,
		`DcClusterGroupConnectivityInterfaceChoice:` + fmt.Sprintf("%v", this.DcClusterGroupConnectivityInterfaceChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_EthernetInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_EthernetInterface{`,
		`EthernetInterface:` + strings.Replace(fmt.Sprintf("%v", this.EthernetInterface), "EthernetInterfaceType", "network_interface.EthernetInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_DedicatedInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_DedicatedInterface{`,
		`DedicatedInterface:` + strings.Replace(fmt.Sprintf("%v", this.DedicatedInterface), "DedicatedInterfaceType", "network_interface.DedicatedInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_DedicatedManagementInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_DedicatedManagementInterface{`,
		`DedicatedManagementInterface:` + strings.Replace(fmt.Sprintf("%v", this.DedicatedManagementInterface), "DedicatedManagementInterfaceType", "network_interface.DedicatedManagementInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_LoopbackInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_LoopbackInterface{`,
		`LoopbackInterface:` + strings.Replace(fmt.Sprintf("%v", this.LoopbackInterface), "LoopbackInterfaceType", "network_interface.LoopbackInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_DcClusterGroupConnectivityInterfaceDisabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_DcClusterGroupConnectivityInterfaceDisabled{`,
		`DcClusterGroupConnectivityInterfaceDisabled:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupConnectivityInterfaceDisabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Interface_DcClusterGroupConnectivityInterfaceEnabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Interface_DcClusterGroupConnectivityInterfaceEnabled{`,
		`DcClusterGroupConnectivityInterfaceEnabled:` + strings.Replace(fmt.Sprintf("%v", this.DcClusterGroupConnectivityInterfaceEnabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerNodes = append(m.WorkerNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBondDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &GlobalSpecType_NoBondDevices{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDeviceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.FleetBondDevicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &GlobalSpecType_BondDeviceList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &GlobalSpecType_DefaultNetworkConfig{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SmsNetworkConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &GlobalSpecType_CustomNetworkConfig{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GlobalSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sw == nil {
				m.Sw = &views.VolterraSoftwareType{}
			}
			if err := m.Sw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Os == nil {
				m.Os = &views.OperatingSystemType{}
			}
			if err := m.Os.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GlobalSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesUpgradeDrain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KubernetesUpgradeDrain == nil {
				m.KubernetesUpgradeDrain = &views.KubernetesUpgradeDrain{}
			}
			if err := m.KubernetesUpgradeDrain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodeConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodeConfiguration = append(m.MasterNodeConfiguration, &views.MasterNode{})
			if err := m.MasterNodeConfiguration[len(m.MasterNodeConfiguration)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerNodes = append(m.WorkerNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBondDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &CreateSpecType_NoBondDevices{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDeviceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.FleetBondDevicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &CreateSpecType_BondDeviceList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &CreateSpecType_DefaultNetworkConfig{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SmsNetworkConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &CreateSpecType_CustomNetworkConfig{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &CreateSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sw == nil {
				m.Sw = &views.VolterraSoftwareType{}
			}
			if err := m.Sw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Os == nil {
				m.Os = &views.OperatingSystemType{}
			}
			if err := m.Os.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &CreateSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &CreateSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesUpgradeDrain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KubernetesUpgradeDrain == nil {
				m.KubernetesUpgradeDrain = &views.KubernetesUpgradeDrain{}
			}
			if err := m.KubernetesUpgradeDrain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodeConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodeConfiguration = append(m.MasterNodeConfiguration, &views.MasterNode{})
			if err := m.MasterNodeConfiguration[len(m.MasterNodeConfiguration)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerNodes = append(m.WorkerNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBondDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &ReplaceSpecType_NoBondDevices{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDeviceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.FleetBondDevicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &ReplaceSpecType_BondDeviceList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &ReplaceSpecType_DefaultNetworkConfig{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SmsNetworkConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &ReplaceSpecType_CustomNetworkConfig{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sw == nil {
				m.Sw = &views.VolterraSoftwareType{}
			}
			if err := m.Sw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Os == nil {
				m.Os = &views.OperatingSystemType{}
			}
			if err := m.Os.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &ReplaceSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &ReplaceSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesUpgradeDrain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KubernetesUpgradeDrain == nil {
				m.KubernetesUpgradeDrain = &views.KubernetesUpgradeDrain{}
			}
			if err := m.KubernetesUpgradeDrain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodeConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodeConfiguration = append(m.MasterNodeConfiguration, &views.MasterNode{})
			if err := m.MasterNodeConfiguration[len(m.MasterNodeConfiguration)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerNodes = append(m.WorkerNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraSoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraSoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingSystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatingSystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBondDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &GetSpecType_NoBondDevices{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDeviceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.FleetBondDevicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BondChoice = &GetSpecType_BondDeviceList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &GetSpecType_DefaultNetworkConfig{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomNetworkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SmsNetworkConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkCfgChoice = &GetSpecType_CustomNetworkConfig{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &site.Coordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsStreamingDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LogsReceiverChoice = &GetSpecType_LogReceiver{v}
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteState", wireType)
			}
			m.SiteState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SiteState |= site.SiteState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GetSpecType_DefaultBlockedServices{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &fleet.BlockedServicesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BlockedServicesChoice = &GetSpecType_BlockedServices{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineSurvivabilityMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfflineSurvivabilityMode == nil {
				m.OfflineSurvivabilityMode = &views.OfflineSurvivabilityModeType{}
			}
			if err := m.OfflineSurvivabilityMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolterraCertifiedHw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolterraCertifiedHw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceEnhancementMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceEnhancementMode == nil {
				m.PerformanceEnhancementMode = &views.PerformanceEnhancementModeType{}
			}
			if err := m.PerformanceEnhancementMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesUpgradeDrain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KubernetesUpgradeDrain == nil {
				m.KubernetesUpgradeDrain = &views.KubernetesUpgradeDrain{}
			}
			if err := m.KubernetesUpgradeDrain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodeConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterNodeConfiguration = append(m.MasterNodeConfiguration, &views.MasterNode{})
			if err := m.MasterNodeConfiguration[len(m.MasterNodeConfiguration)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmsNetworkConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmsNetworkConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmsNetworkConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SloChoice = &SmsNetworkConfiguration_DefaultConfig{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SloConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VnConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SloChoice = &SmsNetworkConfiguration_SloConfig{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultInterfaceConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &SmsNetworkConfiguration_DefaultInterfaceConfig{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InterfaceListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &SmsNetworkConfiguration_InterfaceList{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNetworkPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &SmsNetworkConfiguration_NoNetworkPolicy{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveNetworkPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveNetworkPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &SmsNetworkConfiguration_ActiveNetworkPolicies{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoForwardProxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &SmsNetworkConfiguration_NoForwardProxy{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveForwardProxyPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveForwardProxyPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &SmsNetworkConfiguration_ActiveForwardProxyPolicies{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardProxyAllowAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ForwardProxyChoice = &SmsNetworkConfiguration_ForwardProxyAllowAll{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoGlobalNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &SmsNetworkConfiguration_NoGlobalNetwork{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalNetworkList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.GlobalNetworkConnectionListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GlobalNetworkChoice = &SmsNetworkConfiguration_GlobalNetworkList{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpRouterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgpRouterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpPeerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgpPeerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipVrrpMode", wireType)
			}
			m.VipVrrpMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipVrrpMode |= schema.VipVrrpType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSliConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SliChoice = &SmsNetworkConfiguration_DefaultSliConfig{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VnConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SliChoice = &SmsNetworkConfiguration_SliConfig{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEnhancedFirewallPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_firewall.ActiveEnhancedFirewallPoliciesType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetworkPolicyChoice = &SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies{v}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelDeadTimeout", wireType)
			}
			m.TunnelDeadTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelDeadTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPublicIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &SmsNetworkConfiguration_SmConnectionPublicIp{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmConnectionPvtIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SiteMeshGroupChoice = &SmsNetworkConfiguration_SmConnectionPvtIp{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgpPeerAddressV6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgpPeerAddressV6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VnConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VnConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VnConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nameserver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nameserver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoStaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticRouteChoice = &VnConfiguration_NoStaticRoutes{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StaticRoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticRouteChoice = &VnConfiguration_StaticRoutes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &VnConfiguration_NoDcClusterGroup{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupChoice = &VnConfiguration_DcClusterGroup{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DcClusterGroupInterface = append(m.DcClusterGroupInterface, &views.ObjectRefType{})
			if err := m.DcClusterGroupInterface[len(m.DcClusterGroupInterface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoV6StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticV6RouteChoice = &VnConfiguration_NoV6StaticRoutes{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticV6Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_network.StaticV6RoutesListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StaticV6RouteChoice = &VnConfiguration_StaticV6Routes{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipV6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipV6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameserverV6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameserverV6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaticRoutesListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaticRoutesListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaticRoutesListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticRoutes = append(m.StaticRoutes, &virtual_network.StaticRouteViewType{})
			if err := m.StaticRoutes[len(m.StaticRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &Interface{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthernetInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_interface.EthernetInterfaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &Interface_EthernetInterface{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DedicatedInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_interface.DedicatedInterfaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &Interface_DedicatedInterface{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DedicatedManagementInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_interface.DedicatedManagementInterfaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &Interface_DedicatedManagementInterface{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopbackInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &network_interface.LoopbackInterfaceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InterfaceChoice = &Interface_LoopbackInterface{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupConnectivityInterfaceDisabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupConnectivityInterfaceChoice = &Interface_DcClusterGroupConnectivityInterfaceDisabled{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcClusterGroupConnectivityInterfaceEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DcClusterGroupConnectivityInterfaceChoice = &Interface_DcClusterGroupConnectivityInterfaceEnabled{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

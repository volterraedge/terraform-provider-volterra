// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package securemesh_site

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_fleet "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/fleet"
	ves_io_schema_network_firewall "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_firewall"
	ves_io_schema_network_interface "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_interface"
	ves_io_schema_site "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/site"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_virtual_network "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_network"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *CreateSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetCustomNetworkConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting CreateSpecType.custom_network_config")
	}

	return nil
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkCfgChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkCfgChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *CreateSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:

		return nil, nil

	case *CreateSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *CreateSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:

	case *CreateSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetNetworkCfgChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkCfgChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkCfgChoice().(type) {
	case *CreateSpecType_DefaultNetworkConfig:

		return nil, nil

	case *CreateSpecType_CustomNetworkConfig:

		drInfos, err := m.GetCustomNetworkConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomNetworkConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "custom_network_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) BondChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bond_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) NetworkCfgChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_cfg_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) WorkerNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for worker_nodes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for worker_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated worker_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items worker_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) VolterraCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) MasterNodeConfigurationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for master_node_configuration")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.MasterNode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.MasterNodeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for master_node_configuration")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.MasterNode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.MasterNode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated master_node_configuration")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items master_node_configuration")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *CreateSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*CreateSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*CreateSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["bond_choice"]; exists {
		val := m.GetBondChoice()
		vOpts := append(opts,
			db.WithValidateField("bond_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBondChoice().(type) {
	case *CreateSpecType_NoBondDevices:
		if fv, exists := v.FldValidators["bond_choice.no_bond_devices"]; exists {
			val := m.GetBondChoice().(*CreateSpecType_NoBondDevices).NoBondDevices
			vOpts := append(opts,
				db.WithValidateField("bond_choice"),
				db.WithValidateField("no_bond_devices"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_BondDeviceList:
		if fv, exists := v.FldValidators["bond_choice.bond_device_list"]; exists {
			val := m.GetBondChoice().(*CreateSpecType_BondDeviceList).BondDeviceList
			vOpts := append(opts,
				db.WithValidateField("bond_choice"),
				db.WithValidateField("bond_device_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *CreateSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*CreateSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*CreateSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["master_node_configuration"]; exists {
		vOpts := append(opts, db.WithValidateField("master_node_configuration"))
		if err := fv(ctx, m.GetMasterNodeConfiguration(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_cfg_choice"]; exists {
		val := m.GetNetworkCfgChoice()
		vOpts := append(opts,
			db.WithValidateField("network_cfg_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkCfgChoice().(type) {
	case *CreateSpecType_DefaultNetworkConfig:
		if fv, exists := v.FldValidators["network_cfg_choice.default_network_config"]; exists {
			val := m.GetNetworkCfgChoice().(*CreateSpecType_DefaultNetworkConfig).DefaultNetworkConfig
			vOpts := append(opts,
				db.WithValidateField("network_cfg_choice"),
				db.WithValidateField("default_network_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_CustomNetworkConfig:
		if fv, exists := v.FldValidators["network_cfg_choice.custom_network_config"]; exists {
			val := m.GetNetworkCfgChoice().(*CreateSpecType_CustomNetworkConfig).CustomNetworkConfig
			vOpts := append(opts,
				db.WithValidateField("network_cfg_choice"),
				db.WithValidateField("custom_network_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["os"]; exists {

		vOpts := append(opts, db.WithValidateField("os"))
		if err := fv(ctx, m.GetOs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sw"]; exists {

		vOpts := append(opts, db.WithValidateField("sw"))
		if err := fv(ctx, m.GetSw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_certified_hw"))
		if err := fv(ctx, m.GetVolterraCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("worker_nodes"))
		if err := fv(ctx, m.GetWorkerNodes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhBondChoice := v.BondChoiceValidationRuleHandler
	rulesBondChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBondChoice(rulesBondChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.bond_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bond_choice"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhNetworkCfgChoice := v.NetworkCfgChoiceValidationRuleHandler
	rulesNetworkCfgChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkCfgChoice(rulesNetworkCfgChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.network_cfg_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_cfg_choice"] = vFn

	vrhWorkerNodes := v.WorkerNodesValidationRuleHandler
	rulesWorkerNodes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhWorkerNodes(rulesWorkerNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.worker_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["worker_nodes"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhVolterraCertifiedHw := v.VolterraCertifiedHwValidationRuleHandler
	rulesVolterraCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required":       "true",
		"ves.io.schema.rules.string.min_len":         "1",
		"ves.io.schema.rules.string.ves_object_name": "true",
	}
	vFn, err = vrhVolterraCertifiedHw(rulesVolterraCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.volterra_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_certified_hw"] = vFn

	vrhMasterNodeConfiguration := v.MasterNodeConfigurationValidationRuleHandler
	rulesMasterNodeConfiguration := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "3",
		"ves.io.schema.rules.repeated.num_items": "1,3",
	}
	vFn, err = vrhMasterNodeConfiguration(rulesMasterNodeConfiguration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.master_node_configuration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["master_node_configuration"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["bond_choice.bond_device_list"] = ves_io_schema_fleet.FleetBondDevicesListTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["network_cfg_choice.custom_network_config"] = SmsNetworkConfigurationValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["sw"] = ves_io_schema_views.VolterraSoftwareTypeValidator().Validate

	v.FldValidators["os"] = ves_io_schema_views.OperatingSystemTypeValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GetSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetCustomNetworkConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GetSpecType.custom_network_config")
	}

	return nil
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkCfgChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkCfgChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GetSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:

		return nil, nil

	case *GetSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GetSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:

	case *GetSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetNetworkCfgChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkCfgChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkCfgChoice().(type) {
	case *GetSpecType_DefaultNetworkConfig:

		return nil, nil

	case *GetSpecType_CustomNetworkConfig:

		drInfos, err := m.GetCustomNetworkConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomNetworkConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "custom_network_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) BondChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bond_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) NetworkCfgChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_cfg_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) WorkerNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for worker_nodes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for worker_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated worker_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items worker_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) VolterraSoftwareVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_software_version")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) OperatingSystemVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for operating_system_version")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) VolterraCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) MasterNodeConfigurationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for master_node_configuration")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.MasterNode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.MasterNodeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for master_node_configuration")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.MasterNode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.MasterNode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated master_node_configuration")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items master_node_configuration")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *GetSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GetSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GetSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["bond_choice"]; exists {
		val := m.GetBondChoice()
		vOpts := append(opts,
			db.WithValidateField("bond_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBondChoice().(type) {
	case *GetSpecType_NoBondDevices:
		if fv, exists := v.FldValidators["bond_choice.no_bond_devices"]; exists {
			val := m.GetBondChoice().(*GetSpecType_NoBondDevices).NoBondDevices
			vOpts := append(opts,
				db.WithValidateField("bond_choice"),
				db.WithValidateField("no_bond_devices"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_BondDeviceList:
		if fv, exists := v.FldValidators["bond_choice.bond_device_list"]; exists {
			val := m.GetBondChoice().(*GetSpecType_BondDeviceList).BondDeviceList
			vOpts := append(opts,
				db.WithValidateField("bond_choice"),
				db.WithValidateField("bond_device_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *GetSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*GetSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*GetSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["master_node_configuration"]; exists {
		vOpts := append(opts, db.WithValidateField("master_node_configuration"))
		if err := fv(ctx, m.GetMasterNodeConfiguration(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_cfg_choice"]; exists {
		val := m.GetNetworkCfgChoice()
		vOpts := append(opts,
			db.WithValidateField("network_cfg_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkCfgChoice().(type) {
	case *GetSpecType_DefaultNetworkConfig:
		if fv, exists := v.FldValidators["network_cfg_choice.default_network_config"]; exists {
			val := m.GetNetworkCfgChoice().(*GetSpecType_DefaultNetworkConfig).DefaultNetworkConfig
			vOpts := append(opts,
				db.WithValidateField("network_cfg_choice"),
				db.WithValidateField("default_network_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_CustomNetworkConfig:
		if fv, exists := v.FldValidators["network_cfg_choice.custom_network_config"]; exists {
			val := m.GetNetworkCfgChoice().(*GetSpecType_CustomNetworkConfig).CustomNetworkConfig
			vOpts := append(opts,
				db.WithValidateField("network_cfg_choice"),
				db.WithValidateField("custom_network_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["operating_system_version"]; exists {

		vOpts := append(opts, db.WithValidateField("operating_system_version"))
		if err := fv(ctx, m.GetOperatingSystemVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_state"]; exists {

		vOpts := append(opts, db.WithValidateField("site_state"))
		if err := fv(ctx, m.GetSiteState(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_certified_hw"))
		if err := fv(ctx, m.GetVolterraCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_software_version"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_software_version"))
		if err := fv(ctx, m.GetVolterraSoftwareVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("worker_nodes"))
		if err := fv(ctx, m.GetWorkerNodes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhBondChoice := v.BondChoiceValidationRuleHandler
	rulesBondChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBondChoice(rulesBondChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.bond_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bond_choice"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhNetworkCfgChoice := v.NetworkCfgChoiceValidationRuleHandler
	rulesNetworkCfgChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkCfgChoice(rulesNetworkCfgChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.network_cfg_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_cfg_choice"] = vFn

	vrhWorkerNodes := v.WorkerNodesValidationRuleHandler
	rulesWorkerNodes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhWorkerNodes(rulesWorkerNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.worker_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["worker_nodes"] = vFn

	vrhVolterraSoftwareVersion := v.VolterraSoftwareVersionValidationRuleHandler
	rulesVolterraSoftwareVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhVolterraSoftwareVersion(rulesVolterraSoftwareVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.volterra_software_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_software_version"] = vFn

	vrhOperatingSystemVersion := v.OperatingSystemVersionValidationRuleHandler
	rulesOperatingSystemVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhOperatingSystemVersion(rulesOperatingSystemVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.operating_system_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["operating_system_version"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhVolterraCertifiedHw := v.VolterraCertifiedHwValidationRuleHandler
	rulesVolterraCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required":       "true",
		"ves.io.schema.rules.string.min_len":         "1",
		"ves.io.schema.rules.string.ves_object_name": "true",
	}
	vFn, err = vrhVolterraCertifiedHw(rulesVolterraCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.volterra_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_certified_hw"] = vFn

	vrhMasterNodeConfiguration := v.MasterNodeConfigurationValidationRuleHandler
	rulesMasterNodeConfiguration := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "3",
		"ves.io.schema.rules.repeated.num_items": "1,3",
	}
	vFn, err = vrhMasterNodeConfiguration(rulesMasterNodeConfiguration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.master_node_configuration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["master_node_configuration"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["bond_choice.bond_device_list"] = ves_io_schema_fleet.FleetBondDevicesListTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["network_cfg_choice.custom_network_config"] = SmsNetworkConfigurationValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *GlobalSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetCustomNetworkConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting GlobalSpecType.custom_network_config")
	}

	return nil
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkCfgChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkCfgChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *GlobalSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:

		return nil, nil

	case *GlobalSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:

	case *GlobalSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetNetworkCfgChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkCfgChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkCfgChoice().(type) {
	case *GlobalSpecType_DefaultNetworkConfig:

		return nil, nil

	case *GlobalSpecType_CustomNetworkConfig:

		drInfos, err := m.GetCustomNetworkConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomNetworkConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "custom_network_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) BondChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bond_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) NetworkCfgChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_cfg_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) WorkerNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for worker_nodes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for worker_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated worker_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items worker_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) VolterraSoftwareVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_software_version")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) OperatingSystemVersionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for operating_system_version")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) VolterraCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) MasterNodeConfigurationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for master_node_configuration")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.MasterNode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.MasterNodeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for master_node_configuration")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.MasterNode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.MasterNode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated master_node_configuration")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items master_node_configuration")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *GlobalSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GlobalSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*GlobalSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["bond_choice"]; exists {
		val := m.GetBondChoice()
		vOpts := append(opts,
			db.WithValidateField("bond_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBondChoice().(type) {
	case *GlobalSpecType_NoBondDevices:
		if fv, exists := v.FldValidators["bond_choice.no_bond_devices"]; exists {
			val := m.GetBondChoice().(*GlobalSpecType_NoBondDevices).NoBondDevices
			vOpts := append(opts,
				db.WithValidateField("bond_choice"),
				db.WithValidateField("no_bond_devices"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_BondDeviceList:
		if fv, exists := v.FldValidators["bond_choice.bond_device_list"]; exists {
			val := m.GetBondChoice().(*GlobalSpecType_BondDeviceList).BondDeviceList
			vOpts := append(opts,
				db.WithValidateField("bond_choice"),
				db.WithValidateField("bond_device_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *GlobalSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*GlobalSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*GlobalSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["master_node_configuration"]; exists {
		vOpts := append(opts, db.WithValidateField("master_node_configuration"))
		if err := fv(ctx, m.GetMasterNodeConfiguration(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_cfg_choice"]; exists {
		val := m.GetNetworkCfgChoice()
		vOpts := append(opts,
			db.WithValidateField("network_cfg_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkCfgChoice().(type) {
	case *GlobalSpecType_DefaultNetworkConfig:
		if fv, exists := v.FldValidators["network_cfg_choice.default_network_config"]; exists {
			val := m.GetNetworkCfgChoice().(*GlobalSpecType_DefaultNetworkConfig).DefaultNetworkConfig
			vOpts := append(opts,
				db.WithValidateField("network_cfg_choice"),
				db.WithValidateField("default_network_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_CustomNetworkConfig:
		if fv, exists := v.FldValidators["network_cfg_choice.custom_network_config"]; exists {
			val := m.GetNetworkCfgChoice().(*GlobalSpecType_CustomNetworkConfig).CustomNetworkConfig
			vOpts := append(opts,
				db.WithValidateField("network_cfg_choice"),
				db.WithValidateField("custom_network_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["operating_system_version"]; exists {

		vOpts := append(opts, db.WithValidateField("operating_system_version"))
		if err := fv(ctx, m.GetOperatingSystemVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["os"]; exists {

		vOpts := append(opts, db.WithValidateField("os"))
		if err := fv(ctx, m.GetOs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sw"]; exists {

		vOpts := append(opts, db.WithValidateField("sw"))
		if err := fv(ctx, m.GetSw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_certified_hw"))
		if err := fv(ctx, m.GetVolterraCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_software_version"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_software_version"))
		if err := fv(ctx, m.GetVolterraSoftwareVersion(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("worker_nodes"))
		if err := fv(ctx, m.GetWorkerNodes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhBondChoice := v.BondChoiceValidationRuleHandler
	rulesBondChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBondChoice(rulesBondChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.bond_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bond_choice"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhNetworkCfgChoice := v.NetworkCfgChoiceValidationRuleHandler
	rulesNetworkCfgChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkCfgChoice(rulesNetworkCfgChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.network_cfg_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_cfg_choice"] = vFn

	vrhWorkerNodes := v.WorkerNodesValidationRuleHandler
	rulesWorkerNodes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhWorkerNodes(rulesWorkerNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.worker_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["worker_nodes"] = vFn

	vrhVolterraSoftwareVersion := v.VolterraSoftwareVersionValidationRuleHandler
	rulesVolterraSoftwareVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhVolterraSoftwareVersion(rulesVolterraSoftwareVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.volterra_software_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_software_version"] = vFn

	vrhOperatingSystemVersion := v.OperatingSystemVersionValidationRuleHandler
	rulesOperatingSystemVersion := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhOperatingSystemVersion(rulesOperatingSystemVersion)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.operating_system_version: %s", err)
		panic(errMsg)
	}
	v.FldValidators["operating_system_version"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhVolterraCertifiedHw := v.VolterraCertifiedHwValidationRuleHandler
	rulesVolterraCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required":       "true",
		"ves.io.schema.rules.string.min_len":         "1",
		"ves.io.schema.rules.string.ves_object_name": "true",
	}
	vFn, err = vrhVolterraCertifiedHw(rulesVolterraCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.volterra_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_certified_hw"] = vFn

	vrhMasterNodeConfiguration := v.MasterNodeConfigurationValidationRuleHandler
	rulesMasterNodeConfiguration := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "3",
		"ves.io.schema.rules.repeated.num_items": "1,3",
	}
	vFn, err = vrhMasterNodeConfiguration(rulesMasterNodeConfiguration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.master_node_configuration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["master_node_configuration"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["bond_choice.bond_device_list"] = ves_io_schema_fleet.FleetBondDevicesListTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["network_cfg_choice.custom_network_config"] = SmsNetworkConfigurationValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["sw"] = ves_io_schema_views.VolterraSoftwareTypeValidator().Validate

	v.FldValidators["os"] = ves_io_schema_views.OperatingSystemTypeValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *Interface) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Interface) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Interface) DeepCopy() *Interface {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Interface{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Interface) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Interface) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return InterfaceValidator().Validate(ctx, m, opts...)
}

func (m *Interface) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInterfaceChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *Interface) GetInterfaceChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInterfaceChoice() == nil {
		return nil, nil
	}
	switch m.GetInterfaceChoice().(type) {
	case *Interface_EthernetInterface:

		drInfos, err := m.GetEthernetInterface().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetEthernetInterface().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "ethernet_interface." + dri.DRField
		}
		return drInfos, err

	case *Interface_DedicatedInterface:

		return nil, nil

	case *Interface_DedicatedManagementInterface:

		return nil, nil

	case *Interface_LoopbackInterface:

		drInfos, err := m.GetLoopbackInterface().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetLoopbackInterface().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "loopback_interface." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateInterface struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateInterface) DcClusterGroupConnectivityInterfaceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_connectivity_interface_choice")
	}
	return validatorFn, nil
}

func (v *ValidateInterface) InterfaceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for interface_choice")
	}
	return validatorFn, nil
}

func (v *ValidateInterface) DescriptionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for description")
	}

	return validatorFn, nil
}

func (v *ValidateInterface) LabelsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for labels")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for labels")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for labels")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map labels")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items labels")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateInterface) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Interface)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Interface got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dc_cluster_group_connectivity_interface_choice"]; exists {
		val := m.GetDcClusterGroupConnectivityInterfaceChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_connectivity_interface_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupConnectivityInterfaceChoice().(type) {
	case *Interface_DcClusterGroupConnectivityInterfaceDisabled:
		if fv, exists := v.FldValidators["dc_cluster_group_connectivity_interface_choice.dc_cluster_group_connectivity_interface_disabled"]; exists {
			val := m.GetDcClusterGroupConnectivityInterfaceChoice().(*Interface_DcClusterGroupConnectivityInterfaceDisabled).DcClusterGroupConnectivityInterfaceDisabled
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_connectivity_interface_choice"),
				db.WithValidateField("dc_cluster_group_connectivity_interface_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_DcClusterGroupConnectivityInterfaceEnabled:
		if fv, exists := v.FldValidators["dc_cluster_group_connectivity_interface_choice.dc_cluster_group_connectivity_interface_enabled"]; exists {
			val := m.GetDcClusterGroupConnectivityInterfaceChoice().(*Interface_DcClusterGroupConnectivityInterfaceEnabled).DcClusterGroupConnectivityInterfaceEnabled
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_connectivity_interface_choice"),
				db.WithValidateField("dc_cluster_group_connectivity_interface_enabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["description"]; exists {

		vOpts := append(opts, db.WithValidateField("description"))
		if err := fv(ctx, m.GetDescription(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["interface_choice"]; exists {
		val := m.GetInterfaceChoice()
		vOpts := append(opts,
			db.WithValidateField("interface_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInterfaceChoice().(type) {
	case *Interface_EthernetInterface:
		if fv, exists := v.FldValidators["interface_choice.ethernet_interface"]; exists {
			val := m.GetInterfaceChoice().(*Interface_EthernetInterface).EthernetInterface
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("ethernet_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_DedicatedInterface:
		if fv, exists := v.FldValidators["interface_choice.dedicated_interface"]; exists {
			val := m.GetInterfaceChoice().(*Interface_DedicatedInterface).DedicatedInterface
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("dedicated_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_DedicatedManagementInterface:
		if fv, exists := v.FldValidators["interface_choice.dedicated_management_interface"]; exists {
			val := m.GetInterfaceChoice().(*Interface_DedicatedManagementInterface).DedicatedManagementInterface
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("dedicated_management_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *Interface_LoopbackInterface:
		if fv, exists := v.FldValidators["interface_choice.loopback_interface"]; exists {
			val := m.GetInterfaceChoice().(*Interface_LoopbackInterface).LoopbackInterface
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("loopback_interface"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["labels"]; exists {
		vOpts := append(opts, db.WithValidateField("labels"))
		if err := fv(ctx, m.GetLabels(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultInterfaceValidator = func() *ValidateInterface {
	v := &ValidateInterface{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupConnectivityInterfaceChoice := v.DcClusterGroupConnectivityInterfaceChoiceValidationRuleHandler
	rulesDcClusterGroupConnectivityInterfaceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupConnectivityInterfaceChoice(rulesDcClusterGroupConnectivityInterfaceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Interface.dc_cluster_group_connectivity_interface_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_connectivity_interface_choice"] = vFn

	vrhInterfaceChoice := v.InterfaceChoiceValidationRuleHandler
	rulesInterfaceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInterfaceChoice(rulesInterfaceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Interface.interface_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interface_choice"] = vFn

	vrhDescription := v.DescriptionValidationRuleHandler
	rulesDescription := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhDescription(rulesDescription)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Interface.description: %s", err)
		panic(errMsg)
	}
	v.FldValidators["description"] = vFn

	vrhLabels := v.LabelsValidationRuleHandler
	rulesLabels := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "64",
		"ves.io.schema.rules.map.keys.string.min_len":   "1",
		"ves.io.schema.rules.map.max_pairs":             "16",
		"ves.io.schema.rules.map.values.string.max_len": "64",
		"ves.io.schema.rules.map.values.string.min_len": "1",
	}
	vFn, err = vrhLabels(rulesLabels)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Interface.labels: %s", err)
		panic(errMsg)
	}
	v.FldValidators["labels"] = vFn

	v.FldValidators["interface_choice.ethernet_interface"] = ves_io_schema_network_interface.EthernetInterfaceTypeValidator().Validate
	v.FldValidators["interface_choice.dedicated_interface"] = ves_io_schema_network_interface.DedicatedInterfaceTypeValidator().Validate
	v.FldValidators["interface_choice.dedicated_management_interface"] = ves_io_schema_network_interface.DedicatedManagementInterfaceTypeValidator().Validate
	v.FldValidators["interface_choice.loopback_interface"] = ves_io_schema_network_interface.LoopbackInterfaceTypeValidator().Validate

	return v
}()

func InterfaceValidator() db.Validator {
	return DefaultInterfaceValidator
}

// augmented methods on protoc/std generated struct

func (m *InterfaceListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *InterfaceListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *InterfaceListType) DeepCopy() *InterfaceListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &InterfaceListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *InterfaceListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *InterfaceListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return InterfaceListTypeValidator().Validate(ctx, m, opts...)
}

func (m *InterfaceListType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetInterfacesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *InterfaceListType) GetInterfacesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInterfaces() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetInterfaces() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInterfaces() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("interfaces[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateInterfaceListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateInterfaceListType) InterfacesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for interfaces")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*Interface, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := InterfaceValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for interfaces")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Interface)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Interface, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated interfaces")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items interfaces")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateInterfaceListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*InterfaceListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *InterfaceListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["interfaces"]; exists {
		vOpts := append(opts, db.WithValidateField("interfaces"))
		if err := fv(ctx, m.GetInterfaces(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultInterfaceListTypeValidator = func() *ValidateInterfaceListType {
	v := &ValidateInterfaceListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhInterfaces := v.InterfacesValidationRuleHandler
	rulesInterfaces := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhInterfaces(rulesInterfaces)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for InterfaceListType.interfaces: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interfaces"] = vFn

	return v
}()

func InterfaceListTypeValidator() db.Validator {
	return DefaultInterfaceListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *ReplaceSpecType) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetCustomNetworkConfig().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting ReplaceSpecType.custom_network_config")
	}

	return nil
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetLogsReceiverChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetLogsReceiverChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkCfgChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkCfgChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *ReplaceSpecType) GetLogsReceiverChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:

		return nil, nil

	case *ReplaceSpecType_LogReceiver:

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("log_receiver.Object")
		dri := db.DRefInfo{
			RefdType:   "log_receiver.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "log_receiver",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetLogsReceiverChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ReplaceSpecType) GetLogsReceiverChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:

	case *ReplaceSpecType_LogReceiver:
		refdType, err := d.TypeForEntryKind("", "", "log_receiver.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: log_receiver")
		}

		vref := m.GetLogReceiver()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "log_receiver.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetNetworkCfgChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkCfgChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkCfgChoice().(type) {
	case *ReplaceSpecType_DefaultNetworkConfig:

		return nil, nil

	case *ReplaceSpecType_CustomNetworkConfig:

		drInfos, err := m.GetCustomNetworkConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetCustomNetworkConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "custom_network_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) BlockedServicesChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for blocked_services_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) BondChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bond_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) LogsReceiverChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for logs_receiver_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) NetworkCfgChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_cfg_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) WorkerNodesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for worker_nodes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for worker_nodes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated worker_nodes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items worker_nodes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) AddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for address")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) VolterraCertifiedHwValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for volterra_certified_hw")
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) MasterNodeConfigurationValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for master_node_configuration")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.MasterNode, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.MasterNodeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for master_node_configuration")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.MasterNode)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.MasterNode, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated master_node_configuration")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items master_node_configuration")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["address"]; exists {

		vOpts := append(opts, db.WithValidateField("address"))
		if err := fv(ctx, m.GetAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["blocked_services_choice"]; exists {
		val := m.GetBlockedServicesChoice()
		vOpts := append(opts,
			db.WithValidateField("blocked_services_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBlockedServicesChoice().(type) {
	case *ReplaceSpecType_DefaultBlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.default_blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*ReplaceSpecType_DefaultBlockedServices).DefaultBlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("default_blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_BlockedServices:
		if fv, exists := v.FldValidators["blocked_services_choice.blocked_services"]; exists {
			val := m.GetBlockedServicesChoice().(*ReplaceSpecType_BlockedServices).BlockedServices
			vOpts := append(opts,
				db.WithValidateField("blocked_services_choice"),
				db.WithValidateField("blocked_services"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["bond_choice"]; exists {
		val := m.GetBondChoice()
		vOpts := append(opts,
			db.WithValidateField("bond_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetBondChoice().(type) {
	case *ReplaceSpecType_NoBondDevices:
		if fv, exists := v.FldValidators["bond_choice.no_bond_devices"]; exists {
			val := m.GetBondChoice().(*ReplaceSpecType_NoBondDevices).NoBondDevices
			vOpts := append(opts,
				db.WithValidateField("bond_choice"),
				db.WithValidateField("no_bond_devices"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_BondDeviceList:
		if fv, exists := v.FldValidators["bond_choice.bond_device_list"]; exists {
			val := m.GetBondChoice().(*ReplaceSpecType_BondDeviceList).BondDeviceList
			vOpts := append(opts,
				db.WithValidateField("bond_choice"),
				db.WithValidateField("bond_device_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["coordinates"]; exists {

		vOpts := append(opts, db.WithValidateField("coordinates"))
		if err := fv(ctx, m.GetCoordinates(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["logs_receiver_choice"]; exists {
		val := m.GetLogsReceiverChoice()
		vOpts := append(opts,
			db.WithValidateField("logs_receiver_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetLogsReceiverChoice().(type) {
	case *ReplaceSpecType_LogsStreamingDisabled:
		if fv, exists := v.FldValidators["logs_receiver_choice.logs_streaming_disabled"]; exists {
			val := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogsStreamingDisabled).LogsStreamingDisabled
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("logs_streaming_disabled"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_LogReceiver:
		if fv, exists := v.FldValidators["logs_receiver_choice.log_receiver"]; exists {
			val := m.GetLogsReceiverChoice().(*ReplaceSpecType_LogReceiver).LogReceiver
			vOpts := append(opts,
				db.WithValidateField("logs_receiver_choice"),
				db.WithValidateField("log_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["master_node_configuration"]; exists {
		vOpts := append(opts, db.WithValidateField("master_node_configuration"))
		if err := fv(ctx, m.GetMasterNodeConfiguration(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["network_cfg_choice"]; exists {
		val := m.GetNetworkCfgChoice()
		vOpts := append(opts,
			db.WithValidateField("network_cfg_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkCfgChoice().(type) {
	case *ReplaceSpecType_DefaultNetworkConfig:
		if fv, exists := v.FldValidators["network_cfg_choice.default_network_config"]; exists {
			val := m.GetNetworkCfgChoice().(*ReplaceSpecType_DefaultNetworkConfig).DefaultNetworkConfig
			vOpts := append(opts,
				db.WithValidateField("network_cfg_choice"),
				db.WithValidateField("default_network_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_CustomNetworkConfig:
		if fv, exists := v.FldValidators["network_cfg_choice.custom_network_config"]; exists {
			val := m.GetNetworkCfgChoice().(*ReplaceSpecType_CustomNetworkConfig).CustomNetworkConfig
			vOpts := append(opts,
				db.WithValidateField("network_cfg_choice"),
				db.WithValidateField("custom_network_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["offline_survivability_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("offline_survivability_mode"))
		if err := fv(ctx, m.GetOfflineSurvivabilityMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["os"]; exists {

		vOpts := append(opts, db.WithValidateField("os"))
		if err := fv(ctx, m.GetOs(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["performance_enhancement_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("performance_enhancement_mode"))
		if err := fv(ctx, m.GetPerformanceEnhancementMode(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["sw"]; exists {

		vOpts := append(opts, db.WithValidateField("sw"))
		if err := fv(ctx, m.GetSw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["volterra_certified_hw"]; exists {

		vOpts := append(opts, db.WithValidateField("volterra_certified_hw"))
		if err := fv(ctx, m.GetVolterraCertifiedHw(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["worker_nodes"]; exists {
		vOpts := append(opts, db.WithValidateField("worker_nodes"))
		if err := fv(ctx, m.GetWorkerNodes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBlockedServicesChoice := v.BlockedServicesChoiceValidationRuleHandler
	rulesBlockedServicesChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBlockedServicesChoice(rulesBlockedServicesChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.blocked_services_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["blocked_services_choice"] = vFn

	vrhBondChoice := v.BondChoiceValidationRuleHandler
	rulesBondChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhBondChoice(rulesBondChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.bond_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bond_choice"] = vFn

	vrhLogsReceiverChoice := v.LogsReceiverChoiceValidationRuleHandler
	rulesLogsReceiverChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhLogsReceiverChoice(rulesLogsReceiverChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.logs_receiver_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["logs_receiver_choice"] = vFn

	vrhNetworkCfgChoice := v.NetworkCfgChoiceValidationRuleHandler
	rulesNetworkCfgChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkCfgChoice(rulesNetworkCfgChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.network_cfg_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_cfg_choice"] = vFn

	vrhWorkerNodes := v.WorkerNodesValidationRuleHandler
	rulesWorkerNodes := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "128",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhWorkerNodes(rulesWorkerNodes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.worker_nodes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["worker_nodes"] = vFn

	vrhAddress := v.AddressValidationRuleHandler
	rulesAddress := map[string]string{
		"ves.io.schema.rules.string.max_len": "256",
	}
	vFn, err = vrhAddress(rulesAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["address"] = vFn

	vrhVolterraCertifiedHw := v.VolterraCertifiedHwValidationRuleHandler
	rulesVolterraCertifiedHw := map[string]string{
		"ves.io.schema.rules.message.required":       "true",
		"ves.io.schema.rules.string.min_len":         "1",
		"ves.io.schema.rules.string.ves_object_name": "true",
	}
	vFn, err = vrhVolterraCertifiedHw(rulesVolterraCertifiedHw)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.volterra_certified_hw: %s", err)
		panic(errMsg)
	}
	v.FldValidators["volterra_certified_hw"] = vFn

	vrhMasterNodeConfiguration := v.MasterNodeConfigurationValidationRuleHandler
	rulesMasterNodeConfiguration := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "3",
		"ves.io.schema.rules.repeated.num_items": "1,3",
	}
	vFn, err = vrhMasterNodeConfiguration(rulesMasterNodeConfiguration)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.master_node_configuration: %s", err)
		panic(errMsg)
	}
	v.FldValidators["master_node_configuration"] = vFn

	v.FldValidators["blocked_services_choice.blocked_services"] = ves_io_schema_fleet.BlockedServicesListTypeValidator().Validate

	v.FldValidators["bond_choice.bond_device_list"] = ves_io_schema_fleet.FleetBondDevicesListTypeValidator().Validate

	v.FldValidators["logs_receiver_choice.log_receiver"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["network_cfg_choice.custom_network_config"] = SmsNetworkConfigurationValidator().Validate

	v.FldValidators["coordinates"] = ves_io_schema_site.CoordinatesValidator().Validate

	v.FldValidators["sw"] = ves_io_schema_views.VolterraSoftwareTypeValidator().Validate

	v.FldValidators["os"] = ves_io_schema_views.OperatingSystemTypeValidator().Validate

	v.FldValidators["offline_survivability_mode"] = ves_io_schema_views.OfflineSurvivabilityModeTypeValidator().Validate

	v.FldValidators["performance_enhancement_mode"] = ves_io_schema_views.PerformanceEnhancementModeTypeValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SmsNetworkConfiguration) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SmsNetworkConfiguration) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

// Redact squashes sensitive info in m (in-place)
func (m *SmsNetworkConfiguration) Redact(ctx context.Context) error {
	// clear fields with confidential option set (at message or field level)
	if m == nil {
		return nil
	}

	if err := m.GetGlobalNetworkList().Redact(ctx); err != nil {
		return errors.Wrapf(err, "Redacting SmsNetworkConfiguration.global_network_list")
	}

	return nil
}

func (m *SmsNetworkConfiguration) DeepCopy() *SmsNetworkConfiguration {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SmsNetworkConfiguration{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SmsNetworkConfiguration) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SmsNetworkConfiguration) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SmsNetworkConfigurationValidator().Validate(ctx, m, opts...)
}

func (m *SmsNetworkConfiguration) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetForwardProxyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetForwardProxyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetGlobalNetworkChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetGlobalNetworkChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetInterfaceChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetInterfaceChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetNetworkPolicyChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetNetworkPolicyChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSliChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSliChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSloChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSloChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *SmsNetworkConfiguration) GetForwardProxyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetForwardProxyChoice() == nil {
		return nil, nil
	}
	switch m.GetForwardProxyChoice().(type) {
	case *SmsNetworkConfiguration_NoForwardProxy:

		return nil, nil

	case *SmsNetworkConfiguration_ActiveForwardProxyPolicies:

		drInfos, err := m.GetActiveForwardProxyPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveForwardProxyPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_forward_proxy_policies." + dri.DRField
		}
		return drInfos, err

	case *SmsNetworkConfiguration_ForwardProxyAllowAll:

		return nil, nil

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *SmsNetworkConfiguration) GetGlobalNetworkChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetGlobalNetworkChoice() == nil {
		return nil, nil
	}
	switch m.GetGlobalNetworkChoice().(type) {
	case *SmsNetworkConfiguration_NoGlobalNetwork:

		return nil, nil

	case *SmsNetworkConfiguration_GlobalNetworkList:

		drInfos, err := m.GetGlobalNetworkList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetGlobalNetworkList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "global_network_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *SmsNetworkConfiguration) GetInterfaceChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetInterfaceChoice() == nil {
		return nil, nil
	}
	switch m.GetInterfaceChoice().(type) {
	case *SmsNetworkConfiguration_DefaultInterfaceConfig:

		return nil, nil

	case *SmsNetworkConfiguration_InterfaceList:

		drInfos, err := m.GetInterfaceList().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetInterfaceList().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "interface_list." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *SmsNetworkConfiguration) GetNetworkPolicyChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetNetworkPolicyChoice() == nil {
		return nil, nil
	}
	switch m.GetNetworkPolicyChoice().(type) {
	case *SmsNetworkConfiguration_NoNetworkPolicy:

		return nil, nil

	case *SmsNetworkConfiguration_ActiveNetworkPolicies:

		drInfos, err := m.GetActiveNetworkPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveNetworkPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_network_policies." + dri.DRField
		}
		return drInfos, err

	case *SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies:

		drInfos, err := m.GetActiveEnhancedFirewallPolicies().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetActiveEnhancedFirewallPolicies().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "active_enhanced_firewall_policies." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *SmsNetworkConfiguration) GetSliChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSliChoice() == nil {
		return nil, nil
	}
	switch m.GetSliChoice().(type) {
	case *SmsNetworkConfiguration_DefaultSliConfig:

		return nil, nil

	case *SmsNetworkConfiguration_SliConfig:

		drInfos, err := m.GetSliConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSliConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "sli_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *SmsNetworkConfiguration) GetSloChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSloChoice() == nil {
		return nil, nil
	}
	switch m.GetSloChoice().(type) {
	case *SmsNetworkConfiguration_DefaultConfig:

		return nil, nil

	case *SmsNetworkConfiguration_SloConfig:

		drInfos, err := m.GetSloConfig().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSloConfig().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "slo_config." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateSmsNetworkConfiguration struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSmsNetworkConfiguration) ForwardProxyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for forward_proxy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSmsNetworkConfiguration) GlobalNetworkChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for global_network_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSmsNetworkConfiguration) InterfaceChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for interface_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSmsNetworkConfiguration) NetworkPolicyChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_policy_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSmsNetworkConfiguration) SiteMeshGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for site_mesh_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSmsNetworkConfiguration) SloChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for slo_choice")
	}
	return validatorFn, nil
}

func (v *ValidateSmsNetworkConfiguration) BgpRouterIdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_router_id")
	}

	return validatorFn, nil
}

func (v *ValidateSmsNetworkConfiguration) BgpPeerAddressValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_peer_address")
	}

	return validatorFn, nil
}

func (v *ValidateSmsNetworkConfiguration) TunnelDeadTimeoutValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint32ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for tunnel_dead_timeout")
	}

	return validatorFn, nil
}

func (v *ValidateSmsNetworkConfiguration) BgpPeerAddressV6ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bgp_peer_address_v6")
	}

	return validatorFn, nil
}

func (v *ValidateSmsNetworkConfiguration) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SmsNetworkConfiguration)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SmsNetworkConfiguration got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["bgp_peer_address"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_peer_address"))
		if err := fv(ctx, m.GetBgpPeerAddress(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_peer_address_v6"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_peer_address_v6"))
		if err := fv(ctx, m.GetBgpPeerAddressV6(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bgp_router_id"]; exists {

		vOpts := append(opts, db.WithValidateField("bgp_router_id"))
		if err := fv(ctx, m.GetBgpRouterId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["forward_proxy_choice"]; exists {
		val := m.GetForwardProxyChoice()
		vOpts := append(opts,
			db.WithValidateField("forward_proxy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetForwardProxyChoice().(type) {
	case *SmsNetworkConfiguration_NoForwardProxy:
		if fv, exists := v.FldValidators["forward_proxy_choice.no_forward_proxy"]; exists {
			val := m.GetForwardProxyChoice().(*SmsNetworkConfiguration_NoForwardProxy).NoForwardProxy
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("no_forward_proxy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SmsNetworkConfiguration_ActiveForwardProxyPolicies:
		if fv, exists := v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"]; exists {
			val := m.GetForwardProxyChoice().(*SmsNetworkConfiguration_ActiveForwardProxyPolicies).ActiveForwardProxyPolicies
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("active_forward_proxy_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SmsNetworkConfiguration_ForwardProxyAllowAll:
		if fv, exists := v.FldValidators["forward_proxy_choice.forward_proxy_allow_all"]; exists {
			val := m.GetForwardProxyChoice().(*SmsNetworkConfiguration_ForwardProxyAllowAll).ForwardProxyAllowAll
			vOpts := append(opts,
				db.WithValidateField("forward_proxy_choice"),
				db.WithValidateField("forward_proxy_allow_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["global_network_choice"]; exists {
		val := m.GetGlobalNetworkChoice()
		vOpts := append(opts,
			db.WithValidateField("global_network_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetGlobalNetworkChoice().(type) {
	case *SmsNetworkConfiguration_NoGlobalNetwork:
		if fv, exists := v.FldValidators["global_network_choice.no_global_network"]; exists {
			val := m.GetGlobalNetworkChoice().(*SmsNetworkConfiguration_NoGlobalNetwork).NoGlobalNetwork
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("no_global_network"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SmsNetworkConfiguration_GlobalNetworkList:
		if fv, exists := v.FldValidators["global_network_choice.global_network_list"]; exists {
			val := m.GetGlobalNetworkChoice().(*SmsNetworkConfiguration_GlobalNetworkList).GlobalNetworkList
			vOpts := append(opts,
				db.WithValidateField("global_network_choice"),
				db.WithValidateField("global_network_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["interface_choice"]; exists {
		val := m.GetInterfaceChoice()
		vOpts := append(opts,
			db.WithValidateField("interface_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetInterfaceChoice().(type) {
	case *SmsNetworkConfiguration_DefaultInterfaceConfig:
		if fv, exists := v.FldValidators["interface_choice.default_interface_config"]; exists {
			val := m.GetInterfaceChoice().(*SmsNetworkConfiguration_DefaultInterfaceConfig).DefaultInterfaceConfig
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("default_interface_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SmsNetworkConfiguration_InterfaceList:
		if fv, exists := v.FldValidators["interface_choice.interface_list"]; exists {
			val := m.GetInterfaceChoice().(*SmsNetworkConfiguration_InterfaceList).InterfaceList
			vOpts := append(opts,
				db.WithValidateField("interface_choice"),
				db.WithValidateField("interface_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["network_policy_choice"]; exists {
		val := m.GetNetworkPolicyChoice()
		vOpts := append(opts,
			db.WithValidateField("network_policy_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetNetworkPolicyChoice().(type) {
	case *SmsNetworkConfiguration_NoNetworkPolicy:
		if fv, exists := v.FldValidators["network_policy_choice.no_network_policy"]; exists {
			val := m.GetNetworkPolicyChoice().(*SmsNetworkConfiguration_NoNetworkPolicy).NoNetworkPolicy
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("no_network_policy"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SmsNetworkConfiguration_ActiveNetworkPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_network_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*SmsNetworkConfiguration_ActiveNetworkPolicies).ActiveNetworkPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_network_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies:
		if fv, exists := v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"]; exists {
			val := m.GetNetworkPolicyChoice().(*SmsNetworkConfiguration_ActiveEnhancedFirewallPolicies).ActiveEnhancedFirewallPolicies
			vOpts := append(opts,
				db.WithValidateField("network_policy_choice"),
				db.WithValidateField("active_enhanced_firewall_policies"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_mesh_group_choice"]; exists {
		val := m.GetSiteMeshGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("site_mesh_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSiteMeshGroupChoice().(type) {
	case *SmsNetworkConfiguration_SmConnectionPublicIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_public_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*SmsNetworkConfiguration_SmConnectionPublicIp).SmConnectionPublicIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_public_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SmsNetworkConfiguration_SmConnectionPvtIp:
		if fv, exists := v.FldValidators["site_mesh_group_choice.sm_connection_pvt_ip"]; exists {
			val := m.GetSiteMeshGroupChoice().(*SmsNetworkConfiguration_SmConnectionPvtIp).SmConnectionPvtIp
			vOpts := append(opts,
				db.WithValidateField("site_mesh_group_choice"),
				db.WithValidateField("sm_connection_pvt_ip"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	switch m.GetSliChoice().(type) {
	case *SmsNetworkConfiguration_DefaultSliConfig:
		if fv, exists := v.FldValidators["sli_choice.default_sli_config"]; exists {
			val := m.GetSliChoice().(*SmsNetworkConfiguration_DefaultSliConfig).DefaultSliConfig
			vOpts := append(opts,
				db.WithValidateField("sli_choice"),
				db.WithValidateField("default_sli_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SmsNetworkConfiguration_SliConfig:
		if fv, exists := v.FldValidators["sli_choice.sli_config"]; exists {
			val := m.GetSliChoice().(*SmsNetworkConfiguration_SliConfig).SliConfig
			vOpts := append(opts,
				db.WithValidateField("sli_choice"),
				db.WithValidateField("sli_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["slo_choice"]; exists {
		val := m.GetSloChoice()
		vOpts := append(opts,
			db.WithValidateField("slo_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetSloChoice().(type) {
	case *SmsNetworkConfiguration_DefaultConfig:
		if fv, exists := v.FldValidators["slo_choice.default_config"]; exists {
			val := m.GetSloChoice().(*SmsNetworkConfiguration_DefaultConfig).DefaultConfig
			vOpts := append(opts,
				db.WithValidateField("slo_choice"),
				db.WithValidateField("default_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *SmsNetworkConfiguration_SloConfig:
		if fv, exists := v.FldValidators["slo_choice.slo_config"]; exists {
			val := m.GetSloChoice().(*SmsNetworkConfiguration_SloConfig).SloConfig
			vOpts := append(opts,
				db.WithValidateField("slo_choice"),
				db.WithValidateField("slo_config"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["tunnel_dead_timeout"]; exists {

		vOpts := append(opts, db.WithValidateField("tunnel_dead_timeout"))
		if err := fv(ctx, m.GetTunnelDeadTimeout(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vip_vrrp_mode"]; exists {

		vOpts := append(opts, db.WithValidateField("vip_vrrp_mode"))
		if err := fv(ctx, m.GetVipVrrpMode(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSmsNetworkConfigurationValidator = func() *ValidateSmsNetworkConfiguration {
	v := &ValidateSmsNetworkConfiguration{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhForwardProxyChoice := v.ForwardProxyChoiceValidationRuleHandler
	rulesForwardProxyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhForwardProxyChoice(rulesForwardProxyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SmsNetworkConfiguration.forward_proxy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["forward_proxy_choice"] = vFn

	vrhGlobalNetworkChoice := v.GlobalNetworkChoiceValidationRuleHandler
	rulesGlobalNetworkChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhGlobalNetworkChoice(rulesGlobalNetworkChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SmsNetworkConfiguration.global_network_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["global_network_choice"] = vFn

	vrhInterfaceChoice := v.InterfaceChoiceValidationRuleHandler
	rulesInterfaceChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhInterfaceChoice(rulesInterfaceChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SmsNetworkConfiguration.interface_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["interface_choice"] = vFn

	vrhNetworkPolicyChoice := v.NetworkPolicyChoiceValidationRuleHandler
	rulesNetworkPolicyChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhNetworkPolicyChoice(rulesNetworkPolicyChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SmsNetworkConfiguration.network_policy_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["network_policy_choice"] = vFn

	vrhSiteMeshGroupChoice := v.SiteMeshGroupChoiceValidationRuleHandler
	rulesSiteMeshGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSiteMeshGroupChoice(rulesSiteMeshGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SmsNetworkConfiguration.site_mesh_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_mesh_group_choice"] = vFn

	vrhSloChoice := v.SloChoiceValidationRuleHandler
	rulesSloChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhSloChoice(rulesSloChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SmsNetworkConfiguration.slo_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["slo_choice"] = vFn

	vrhBgpRouterId := v.BgpRouterIdValidationRuleHandler
	rulesBgpRouterId := map[string]string{
		"ves.io.schema.rules.string.ip": "true",
	}
	vFn, err = vrhBgpRouterId(rulesBgpRouterId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SmsNetworkConfiguration.bgp_router_id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_router_id"] = vFn

	vrhBgpPeerAddress := v.BgpPeerAddressValidationRuleHandler
	rulesBgpPeerAddress := map[string]string{
		"ves.io.schema.rules.string.ip": "true",
	}
	vFn, err = vrhBgpPeerAddress(rulesBgpPeerAddress)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SmsNetworkConfiguration.bgp_peer_address: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_peer_address"] = vFn

	vrhTunnelDeadTimeout := v.TunnelDeadTimeoutValidationRuleHandler
	rulesTunnelDeadTimeout := map[string]string{
		"ves.io.schema.rules.uint32.gte": "0",
		"ves.io.schema.rules.uint32.lte": "180000",
	}
	vFn, err = vrhTunnelDeadTimeout(rulesTunnelDeadTimeout)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SmsNetworkConfiguration.tunnel_dead_timeout: %s", err)
		panic(errMsg)
	}
	v.FldValidators["tunnel_dead_timeout"] = vFn

	vrhBgpPeerAddressV6 := v.BgpPeerAddressV6ValidationRuleHandler
	rulesBgpPeerAddressV6 := map[string]string{
		"ves.io.schema.rules.string.ipv6": "true",
	}
	vFn, err = vrhBgpPeerAddressV6(rulesBgpPeerAddressV6)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for SmsNetworkConfiguration.bgp_peer_address_v6: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bgp_peer_address_v6"] = vFn

	v.FldValidators["forward_proxy_choice.active_forward_proxy_policies"] = ves_io_schema_network_firewall.ActiveForwardProxyPoliciesTypeValidator().Validate

	v.FldValidators["global_network_choice.global_network_list"] = ves_io_schema_views.GlobalNetworkConnectionListTypeValidator().Validate

	v.FldValidators["interface_choice.interface_list"] = InterfaceListTypeValidator().Validate

	v.FldValidators["network_policy_choice.active_network_policies"] = ves_io_schema_network_firewall.ActiveNetworkPoliciesTypeValidator().Validate
	v.FldValidators["network_policy_choice.active_enhanced_firewall_policies"] = ves_io_schema_network_firewall.ActiveEnhancedFirewallPoliciesTypeValidator().Validate

	v.FldValidators["sli_choice.sli_config"] = VnConfigurationValidator().Validate

	v.FldValidators["slo_choice.slo_config"] = VnConfigurationValidator().Validate

	return v
}()

func SmsNetworkConfigurationValidator() db.Validator {
	return DefaultSmsNetworkConfigurationValidator
}

// augmented methods on protoc/std generated struct

func (m *StaticRoutesListType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *StaticRoutesListType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *StaticRoutesListType) DeepCopy() *StaticRoutesListType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &StaticRoutesListType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *StaticRoutesListType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *StaticRoutesListType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return StaticRoutesListTypeValidator().Validate(ctx, m, opts...)
}

func (m *StaticRoutesListType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetStaticRoutesDRefInfo()

}

// GetDRefInfo for the field's type
func (m *StaticRoutesListType) GetStaticRoutesDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticRoutes() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetStaticRoutes() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticRoutes() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("static_routes[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateStaticRoutesListType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateStaticRoutesListType) StaticRoutesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for static_routes")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_virtual_network.StaticRouteViewType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_virtual_network.StaticRouteViewTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for static_routes")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_virtual_network.StaticRouteViewType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_virtual_network.StaticRouteViewType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated static_routes")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items static_routes")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateStaticRoutesListType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*StaticRoutesListType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *StaticRoutesListType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["static_routes"]; exists {
		vOpts := append(opts, db.WithValidateField("static_routes"))
		if err := fv(ctx, m.GetStaticRoutes(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultStaticRoutesListTypeValidator = func() *ValidateStaticRoutesListType {
	v := &ValidateStaticRoutesListType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhStaticRoutes := v.StaticRoutesValidationRuleHandler
	rulesStaticRoutes := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhStaticRoutes(rulesStaticRoutes)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for StaticRoutesListType.static_routes: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_routes"] = vFn

	return v
}()

func StaticRoutesListTypeValidator() db.Validator {
	return DefaultStaticRoutesListTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *VnConfiguration) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *VnConfiguration) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *VnConfiguration) DeepCopy() *VnConfiguration {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &VnConfiguration{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *VnConfiguration) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *VnConfiguration) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return VnConfigurationValidator().Validate(ctx, m, opts...)
}

func (m *VnConfiguration) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetDcClusterGroupChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetDcClusterGroupInterfaceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetDcClusterGroupInterfaceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStaticRouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStaticRouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetStaticV6RouteChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetStaticV6RouteChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *VnConfiguration) GetDcClusterGroupChoiceDRefInfo() ([]db.DRefInfo, error) {
	switch m.GetDcClusterGroupChoice().(type) {
	case *VnConfiguration_NoDcClusterGroup:

		return nil, nil

	case *VnConfiguration_DcClusterGroup:

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("dc_cluster_group.Object")
		dri := db.DRefInfo{
			RefdType:   "dc_cluster_group.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group",
			Ref:        vdRef,
		}
		return []db.DRefInfo{dri}, nil

	default:
		return nil, nil
	}
}

// GetDcClusterGroupChoiceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *VnConfiguration) GetDcClusterGroupChoiceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry

	switch m.GetDcClusterGroupChoice().(type) {
	case *VnConfiguration_NoDcClusterGroup:

	case *VnConfiguration_DcClusterGroup:
		refdType, err := d.TypeForEntryKind("", "", "dc_cluster_group.Object")
		if err != nil {
			return nil, errors.Wrap(err, "Cannot find type for kind: dc_cluster_group")
		}

		vref := m.GetDcClusterGroup()
		if vref == nil {
			return nil, nil
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "dc_cluster_group.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}

	}

	return entries, nil
}

func (m *VnConfiguration) GetDcClusterGroupInterfaceDRefInfo() ([]db.DRefInfo, error) {
	vrefs := m.GetDcClusterGroupInterface()
	if len(vrefs) == 0 {
		return nil, nil
	}
	drInfos := make([]db.DRefInfo, 0, len(vrefs))
	for i, vref := range vrefs {
		if vref == nil {
			return nil, fmt.Errorf("VnConfiguration.dc_cluster_group_interface[%d] has a nil value", i)
		}
		vdRef := db.NewDirectRefForView(vref)
		vdRef.SetKind("network_interface.Object")
		// resolve kind to type if needed at DBObject.GetDRefInfo()
		drInfos = append(drInfos, db.DRefInfo{
			RefdType:   "network_interface.Object",
			RefdTenant: vref.Tenant,
			RefdNS:     vref.Namespace,
			RefdName:   vref.Name,
			DRField:    "dc_cluster_group_interface",
			Ref:        vdRef,
		})
	}
	return drInfos, nil

}

// GetDcClusterGroupInterfaceDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *VnConfiguration) GetDcClusterGroupInterfaceDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "network_interface.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: network_interface")
	}
	for i, vref := range m.GetDcClusterGroupInterface() {
		if vref == nil {
			return nil, fmt.Errorf("VnConfiguration.dc_cluster_group_interface[%d] has a nil value", i)
		}
		ref := &ves_io_schema.ObjectRefType{
			Kind:      "network_interface.Object",
			Tenant:    vref.Tenant,
			Namespace: vref.Namespace,
			Name:      vref.Name,
		}
		refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
		if err != nil {
			return nil, errors.Wrap(err, "Getting referred entry")
		}
		if refdEnt != nil {
			entries = append(entries, refdEnt)
		}
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *VnConfiguration) GetStaticRouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticRouteChoice() == nil {
		return nil, nil
	}
	switch m.GetStaticRouteChoice().(type) {
	case *VnConfiguration_NoStaticRoutes:

		return nil, nil

	case *VnConfiguration_StaticRoutes:

		drInfos, err := m.GetStaticRoutes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticRoutes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "static_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

// GetDRefInfo for the field's type
func (m *VnConfiguration) GetStaticV6RouteChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetStaticV6RouteChoice() == nil {
		return nil, nil
	}
	switch m.GetStaticV6RouteChoice().(type) {
	case *VnConfiguration_NoV6StaticRoutes:

		return nil, nil

	case *VnConfiguration_StaticV6Routes:

		drInfos, err := m.GetStaticV6Routes().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetStaticV6Routes().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "static_v6_routes." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateVnConfiguration struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateVnConfiguration) DcClusterGroupChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for dc_cluster_group_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVnConfiguration) StaticRouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for static_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVnConfiguration) StaticV6RouteChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for static_v6_route_choice")
	}
	return validatorFn, nil
}

func (v *ValidateVnConfiguration) LabelsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemKeyRules := db.GetMapStringKeyRules(rules)
	itemKeyFn, err := db.NewStringValidationRuleHandler(itemKeyRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item key ValidationRuleHandler for labels")
	}
	itemValRules := db.GetMapStringValueRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemValRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item value ValidationRuleHandler for labels")
	}
	itemsValidatorFn := func(ctx context.Context, kv map[string]string, opts ...db.ValidateOpt) error {
		for key, value := range kv {
			if err := itemKeyFn(ctx, key, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element with key %v", key))
			}
			if err := itemValFn(ctx, value, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("value for element with key %v", key))
			}
		}
		return nil
	}
	mapValFn, err := db.NewMapValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Map ValidationRuleHandler for labels")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.(map[string]string)
		if !ok {
			return fmt.Errorf("Map validation expected map[ string ]string, got %T", val)
		}
		if err := mapValFn(ctx, len(elems), opts...); err != nil {
			return errors.Wrap(err, "map labels")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items labels")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateVnConfiguration) VipValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vip")
	}

	return validatorFn, nil
}

func (v *ValidateVnConfiguration) NameserverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nameserver")
	}

	return validatorFn, nil
}

func (v *ValidateVnConfiguration) DcClusterGroupInterfaceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for dc_cluster_group_interface")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_views.ObjectRefType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for dc_cluster_group_interface")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_views.ObjectRefType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_views.ObjectRefType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated dc_cluster_group_interface")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items dc_cluster_group_interface")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateVnConfiguration) VipV6ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for vip_v6")
	}

	return validatorFn, nil
}

func (v *ValidateVnConfiguration) NameserverV6ValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for nameserver_v6")
	}

	return validatorFn, nil
}

func (v *ValidateVnConfiguration) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*VnConfiguration)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *VnConfiguration got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dc_cluster_group_choice"]; exists {
		val := m.GetDcClusterGroupChoice()
		vOpts := append(opts,
			db.WithValidateField("dc_cluster_group_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetDcClusterGroupChoice().(type) {
	case *VnConfiguration_NoDcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.no_dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*VnConfiguration_NoDcClusterGroup).NoDcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("no_dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VnConfiguration_DcClusterGroup:
		if fv, exists := v.FldValidators["dc_cluster_group_choice.dc_cluster_group"]; exists {
			val := m.GetDcClusterGroupChoice().(*VnConfiguration_DcClusterGroup).DcClusterGroup
			vOpts := append(opts,
				db.WithValidateField("dc_cluster_group_choice"),
				db.WithValidateField("dc_cluster_group"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["dc_cluster_group_interface"]; exists {
		vOpts := append(opts, db.WithValidateField("dc_cluster_group_interface"))
		if err := fv(ctx, m.GetDcClusterGroupInterface(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["labels"]; exists {
		vOpts := append(opts, db.WithValidateField("labels"))
		if err := fv(ctx, m.GetLabels(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["nameserver"]; exists {

		vOpts := append(opts, db.WithValidateField("nameserver"))
		if err := fv(ctx, m.GetNameserver(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["nameserver_v6"]; exists {

		vOpts := append(opts, db.WithValidateField("nameserver_v6"))
		if err := fv(ctx, m.GetNameserverV6(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["static_route_choice"]; exists {
		val := m.GetStaticRouteChoice()
		vOpts := append(opts,
			db.WithValidateField("static_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStaticRouteChoice().(type) {
	case *VnConfiguration_NoStaticRoutes:
		if fv, exists := v.FldValidators["static_route_choice.no_static_routes"]; exists {
			val := m.GetStaticRouteChoice().(*VnConfiguration_NoStaticRoutes).NoStaticRoutes
			vOpts := append(opts,
				db.WithValidateField("static_route_choice"),
				db.WithValidateField("no_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VnConfiguration_StaticRoutes:
		if fv, exists := v.FldValidators["static_route_choice.static_routes"]; exists {
			val := m.GetStaticRouteChoice().(*VnConfiguration_StaticRoutes).StaticRoutes
			vOpts := append(opts,
				db.WithValidateField("static_route_choice"),
				db.WithValidateField("static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["static_v6_route_choice"]; exists {
		val := m.GetStaticV6RouteChoice()
		vOpts := append(opts,
			db.WithValidateField("static_v6_route_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetStaticV6RouteChoice().(type) {
	case *VnConfiguration_NoV6StaticRoutes:
		if fv, exists := v.FldValidators["static_v6_route_choice.no_v6_static_routes"]; exists {
			val := m.GetStaticV6RouteChoice().(*VnConfiguration_NoV6StaticRoutes).NoV6StaticRoutes
			vOpts := append(opts,
				db.WithValidateField("static_v6_route_choice"),
				db.WithValidateField("no_v6_static_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *VnConfiguration_StaticV6Routes:
		if fv, exists := v.FldValidators["static_v6_route_choice.static_v6_routes"]; exists {
			val := m.GetStaticV6RouteChoice().(*VnConfiguration_StaticV6Routes).StaticV6Routes
			vOpts := append(opts,
				db.WithValidateField("static_v6_route_choice"),
				db.WithValidateField("static_v6_routes"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["vip"]; exists {

		vOpts := append(opts, db.WithValidateField("vip"))
		if err := fv(ctx, m.GetVip(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["vip_v6"]; exists {

		vOpts := append(opts, db.WithValidateField("vip_v6"))
		if err := fv(ctx, m.GetVipV6(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultVnConfigurationValidator = func() *ValidateVnConfiguration {
	v := &ValidateVnConfiguration{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDcClusterGroupChoice := v.DcClusterGroupChoiceValidationRuleHandler
	rulesDcClusterGroupChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhDcClusterGroupChoice(rulesDcClusterGroupChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VnConfiguration.dc_cluster_group_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_choice"] = vFn

	vrhStaticRouteChoice := v.StaticRouteChoiceValidationRuleHandler
	rulesStaticRouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStaticRouteChoice(rulesStaticRouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VnConfiguration.static_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_route_choice"] = vFn

	vrhStaticV6RouteChoice := v.StaticV6RouteChoiceValidationRuleHandler
	rulesStaticV6RouteChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhStaticV6RouteChoice(rulesStaticV6RouteChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VnConfiguration.static_v6_route_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["static_v6_route_choice"] = vFn

	vrhLabels := v.LabelsValidationRuleHandler
	rulesLabels := map[string]string{
		"ves.io.schema.rules.map.keys.string.max_len":   "64",
		"ves.io.schema.rules.map.keys.string.min_len":   "1",
		"ves.io.schema.rules.map.max_pairs":             "16",
		"ves.io.schema.rules.map.values.string.max_len": "64",
		"ves.io.schema.rules.map.values.string.min_len": "1",
	}
	vFn, err = vrhLabels(rulesLabels)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VnConfiguration.labels: %s", err)
		panic(errMsg)
	}
	v.FldValidators["labels"] = vFn

	vrhVip := v.VipValidationRuleHandler
	rulesVip := map[string]string{
		"ves.io.schema.rules.string.ipv4": "true",
	}
	vFn, err = vrhVip(rulesVip)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VnConfiguration.vip: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vip"] = vFn

	vrhNameserver := v.NameserverValidationRuleHandler
	rulesNameserver := map[string]string{
		"ves.io.schema.rules.string.ipv4": "true",
	}
	vFn, err = vrhNameserver(rulesNameserver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VnConfiguration.nameserver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["nameserver"] = vFn

	vrhDcClusterGroupInterface := v.DcClusterGroupInterfaceValidationRuleHandler
	rulesDcClusterGroupInterface := map[string]string{
		"ves.io.schema.rules.repeated.max_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDcClusterGroupInterface(rulesDcClusterGroupInterface)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VnConfiguration.dc_cluster_group_interface: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dc_cluster_group_interface"] = vFn

	vrhVipV6 := v.VipV6ValidationRuleHandler
	rulesVipV6 := map[string]string{
		"ves.io.schema.rules.string.ipv6": "true",
	}
	vFn, err = vrhVipV6(rulesVipV6)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VnConfiguration.vip_v6: %s", err)
		panic(errMsg)
	}
	v.FldValidators["vip_v6"] = vFn

	vrhNameserverV6 := v.NameserverV6ValidationRuleHandler
	rulesNameserverV6 := map[string]string{
		"ves.io.schema.rules.string.ipv6": "true",
	}
	vFn, err = vrhNameserverV6(rulesNameserverV6)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for VnConfiguration.nameserver_v6: %s", err)
		panic(errMsg)
	}
	v.FldValidators["nameserver_v6"] = vFn

	v.FldValidators["dc_cluster_group_choice.dc_cluster_group"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["static_route_choice.static_routes"] = StaticRoutesListTypeValidator().Validate

	v.FldValidators["static_v6_route_choice.static_v6_routes"] = ves_io_schema_virtual_network.StaticV6RoutesListTypeValidator().Validate

	return v
}()

func VnConfigurationValidator() db.Validator {
	return DefaultVnConfigurationValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetBlockedServicesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BlockedServicesChoice.(type) {
	case nil:
		o.BlockedServicesChoice = nil

	case *CreateSpecType_BlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *CreateSpecType_DefaultBlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetBlockedServicesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BlockedServicesChoice.(type) {
	case nil:
		r.BlockedServicesChoice = nil

	case *GlobalSpecType_BlockedServices:
		r.BlockedServicesChoice = &CreateSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GlobalSpecType_DefaultBlockedServices:
		r.BlockedServicesChoice = &CreateSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetBondChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BondChoice.(type) {
	case nil:
		o.BondChoice = nil

	case *CreateSpecType_BondDeviceList:
		o.BondChoice = &GlobalSpecType_BondDeviceList{BondDeviceList: of.BondDeviceList}

	case *CreateSpecType_NoBondDevices:
		o.BondChoice = &GlobalSpecType_NoBondDevices{NoBondDevices: of.NoBondDevices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetBondChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BondChoice.(type) {
	case nil:
		r.BondChoice = nil

	case *GlobalSpecType_BondDeviceList:
		r.BondChoice = &CreateSpecType_BondDeviceList{BondDeviceList: of.BondDeviceList}

	case *GlobalSpecType_NoBondDevices:
		r.BondChoice = &CreateSpecType_NoBondDevices{NoBondDevices: of.NoBondDevices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *CreateSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *CreateSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &CreateSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &CreateSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetNetworkCfgChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.NetworkCfgChoice.(type) {
	case nil:
		o.NetworkCfgChoice = nil

	case *CreateSpecType_CustomNetworkConfig:
		o.NetworkCfgChoice = &GlobalSpecType_CustomNetworkConfig{CustomNetworkConfig: of.CustomNetworkConfig}

	case *CreateSpecType_DefaultNetworkConfig:
		o.NetworkCfgChoice = &GlobalSpecType_DefaultNetworkConfig{DefaultNetworkConfig: of.DefaultNetworkConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetNetworkCfgChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.NetworkCfgChoice.(type) {
	case nil:
		r.NetworkCfgChoice = nil

	case *GlobalSpecType_CustomNetworkConfig:
		r.NetworkCfgChoice = &CreateSpecType_CustomNetworkConfig{CustomNetworkConfig: of.CustomNetworkConfig}

	case *GlobalSpecType_DefaultNetworkConfig:
		r.NetworkCfgChoice = &CreateSpecType_DefaultNetworkConfig{DefaultNetworkConfig: of.DefaultNetworkConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.GetBlockedServicesChoiceFromGlobalSpecType(f)
	m.GetBondChoiceFromGlobalSpecType(f)
	m.Coordinates = f.GetCoordinates()
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.MasterNodeConfiguration = f.GetMasterNodeConfiguration()
	m.GetNetworkCfgChoiceFromGlobalSpecType(f)
	m.OfflineSurvivabilityMode = f.GetOfflineSurvivabilityMode()
	m.Os = f.GetOs()
	m.PerformanceEnhancementMode = f.GetPerformanceEnhancementMode()
	m.Sw = f.GetSw()
	m.VolterraCertifiedHw = f.GetVolterraCertifiedHw()
	m.WorkerNodes = f.GetWorkerNodes()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Address = m1.Address
	m1.SetBlockedServicesChoiceToGlobalSpecType(f)
	m1.SetBondChoiceToGlobalSpecType(f)
	f.Coordinates = m1.Coordinates
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.MasterNodeConfiguration = m1.MasterNodeConfiguration
	m1.SetNetworkCfgChoiceToGlobalSpecType(f)
	f.OfflineSurvivabilityMode = m1.OfflineSurvivabilityMode
	f.Os = m1.Os
	f.PerformanceEnhancementMode = m1.PerformanceEnhancementMode
	f.Sw = m1.Sw
	f.VolterraCertifiedHw = m1.VolterraCertifiedHw
	f.WorkerNodes = m1.WorkerNodes
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetBlockedServicesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BlockedServicesChoice.(type) {
	case nil:
		o.BlockedServicesChoice = nil

	case *GetSpecType_BlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GetSpecType_DefaultBlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetBlockedServicesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BlockedServicesChoice.(type) {
	case nil:
		r.BlockedServicesChoice = nil

	case *GlobalSpecType_BlockedServices:
		r.BlockedServicesChoice = &GetSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GlobalSpecType_DefaultBlockedServices:
		r.BlockedServicesChoice = &GetSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetBondChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BondChoice.(type) {
	case nil:
		o.BondChoice = nil

	case *GetSpecType_BondDeviceList:
		o.BondChoice = &GlobalSpecType_BondDeviceList{BondDeviceList: of.BondDeviceList}

	case *GetSpecType_NoBondDevices:
		o.BondChoice = &GlobalSpecType_NoBondDevices{NoBondDevices: of.NoBondDevices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetBondChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BondChoice.(type) {
	case nil:
		r.BondChoice = nil

	case *GlobalSpecType_BondDeviceList:
		r.BondChoice = &GetSpecType_BondDeviceList{BondDeviceList: of.BondDeviceList}

	case *GlobalSpecType_NoBondDevices:
		r.BondChoice = &GetSpecType_NoBondDevices{NoBondDevices: of.NoBondDevices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *GetSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GetSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &GetSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &GetSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetNetworkCfgChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.NetworkCfgChoice.(type) {
	case nil:
		o.NetworkCfgChoice = nil

	case *GetSpecType_CustomNetworkConfig:
		o.NetworkCfgChoice = &GlobalSpecType_CustomNetworkConfig{CustomNetworkConfig: of.CustomNetworkConfig}

	case *GetSpecType_DefaultNetworkConfig:
		o.NetworkCfgChoice = &GlobalSpecType_DefaultNetworkConfig{DefaultNetworkConfig: of.DefaultNetworkConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetNetworkCfgChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.NetworkCfgChoice.(type) {
	case nil:
		r.NetworkCfgChoice = nil

	case *GlobalSpecType_CustomNetworkConfig:
		r.NetworkCfgChoice = &GetSpecType_CustomNetworkConfig{CustomNetworkConfig: of.CustomNetworkConfig}

	case *GlobalSpecType_DefaultNetworkConfig:
		r.NetworkCfgChoice = &GetSpecType_DefaultNetworkConfig{DefaultNetworkConfig: of.DefaultNetworkConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.GetBlockedServicesChoiceFromGlobalSpecType(f)
	m.GetBondChoiceFromGlobalSpecType(f)
	m.Coordinates = f.GetCoordinates()
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.MasterNodeConfiguration = f.GetMasterNodeConfiguration()
	m.GetNetworkCfgChoiceFromGlobalSpecType(f)
	m.OfflineSurvivabilityMode = f.GetOfflineSurvivabilityMode()
	m.OperatingSystemVersion = f.GetOperatingSystemVersion()
	m.PerformanceEnhancementMode = f.GetPerformanceEnhancementMode()

	m.VolterraCertifiedHw = f.GetVolterraCertifiedHw()
	m.VolterraSoftwareVersion = f.GetVolterraSoftwareVersion()
	m.WorkerNodes = f.GetWorkerNodes()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Address = m1.Address
	m1.SetBlockedServicesChoiceToGlobalSpecType(f)
	m1.SetBondChoiceToGlobalSpecType(f)
	f.Coordinates = m1.Coordinates
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.MasterNodeConfiguration = m1.MasterNodeConfiguration
	m1.SetNetworkCfgChoiceToGlobalSpecType(f)
	f.OfflineSurvivabilityMode = m1.OfflineSurvivabilityMode
	f.OperatingSystemVersion = m1.OperatingSystemVersion
	f.PerformanceEnhancementMode = m1.PerformanceEnhancementMode

	f.VolterraCertifiedHw = m1.VolterraCertifiedHw
	f.VolterraSoftwareVersion = m1.VolterraSoftwareVersion
	f.WorkerNodes = m1.WorkerNodes
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetBlockedServicesChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BlockedServicesChoice.(type) {
	case nil:
		o.BlockedServicesChoice = nil

	case *ReplaceSpecType_BlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *ReplaceSpecType_DefaultBlockedServices:
		o.BlockedServicesChoice = &GlobalSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetBlockedServicesChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BlockedServicesChoice.(type) {
	case nil:
		r.BlockedServicesChoice = nil

	case *GlobalSpecType_BlockedServices:
		r.BlockedServicesChoice = &ReplaceSpecType_BlockedServices{BlockedServices: of.BlockedServices}

	case *GlobalSpecType_DefaultBlockedServices:
		r.BlockedServicesChoice = &ReplaceSpecType_DefaultBlockedServices{DefaultBlockedServices: of.DefaultBlockedServices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetBondChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.BondChoice.(type) {
	case nil:
		o.BondChoice = nil

	case *ReplaceSpecType_BondDeviceList:
		o.BondChoice = &GlobalSpecType_BondDeviceList{BondDeviceList: of.BondDeviceList}

	case *ReplaceSpecType_NoBondDevices:
		o.BondChoice = &GlobalSpecType_NoBondDevices{NoBondDevices: of.NoBondDevices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetBondChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.BondChoice.(type) {
	case nil:
		r.BondChoice = nil

	case *GlobalSpecType_BondDeviceList:
		r.BondChoice = &ReplaceSpecType_BondDeviceList{BondDeviceList: of.BondDeviceList}

	case *GlobalSpecType_NoBondDevices:
		r.BondChoice = &ReplaceSpecType_NoBondDevices{NoBondDevices: of.NoBondDevices}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetLogsReceiverChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.LogsReceiverChoice.(type) {
	case nil:
		o.LogsReceiverChoice = nil

	case *ReplaceSpecType_LogReceiver:
		o.LogsReceiverChoice = &GlobalSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *ReplaceSpecType_LogsStreamingDisabled:
		o.LogsReceiverChoice = &GlobalSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetLogsReceiverChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.LogsReceiverChoice.(type) {
	case nil:
		r.LogsReceiverChoice = nil

	case *GlobalSpecType_LogReceiver:
		r.LogsReceiverChoice = &ReplaceSpecType_LogReceiver{LogReceiver: of.LogReceiver}

	case *GlobalSpecType_LogsStreamingDisabled:
		r.LogsReceiverChoice = &ReplaceSpecType_LogsStreamingDisabled{LogsStreamingDisabled: of.LogsStreamingDisabled}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetNetworkCfgChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.NetworkCfgChoice.(type) {
	case nil:
		o.NetworkCfgChoice = nil

	case *ReplaceSpecType_CustomNetworkConfig:
		o.NetworkCfgChoice = &GlobalSpecType_CustomNetworkConfig{CustomNetworkConfig: of.CustomNetworkConfig}

	case *ReplaceSpecType_DefaultNetworkConfig:
		o.NetworkCfgChoice = &GlobalSpecType_DefaultNetworkConfig{DefaultNetworkConfig: of.DefaultNetworkConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetNetworkCfgChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.NetworkCfgChoice.(type) {
	case nil:
		r.NetworkCfgChoice = nil

	case *GlobalSpecType_CustomNetworkConfig:
		r.NetworkCfgChoice = &ReplaceSpecType_CustomNetworkConfig{CustomNetworkConfig: of.CustomNetworkConfig}

	case *GlobalSpecType_DefaultNetworkConfig:
		r.NetworkCfgChoice = &ReplaceSpecType_DefaultNetworkConfig{DefaultNetworkConfig: of.DefaultNetworkConfig}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.Address = f.GetAddress()
	m.GetBlockedServicesChoiceFromGlobalSpecType(f)
	m.GetBondChoiceFromGlobalSpecType(f)
	m.Coordinates = f.GetCoordinates()
	m.GetLogsReceiverChoiceFromGlobalSpecType(f)
	m.MasterNodeConfiguration = f.GetMasterNodeConfiguration()
	m.GetNetworkCfgChoiceFromGlobalSpecType(f)
	m.OfflineSurvivabilityMode = f.GetOfflineSurvivabilityMode()
	m.Os = f.GetOs()
	m.PerformanceEnhancementMode = f.GetPerformanceEnhancementMode()
	m.Sw = f.GetSw()
	m.VolterraCertifiedHw = f.GetVolterraCertifiedHw()
	m.WorkerNodes = f.GetWorkerNodes()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.Address = m1.Address
	m1.SetBlockedServicesChoiceToGlobalSpecType(f)
	m1.SetBondChoiceToGlobalSpecType(f)
	f.Coordinates = m1.Coordinates
	m1.SetLogsReceiverChoiceToGlobalSpecType(f)
	f.MasterNodeConfiguration = m1.MasterNodeConfiguration
	m1.SetNetworkCfgChoiceToGlobalSpecType(f)
	f.OfflineSurvivabilityMode = m1.OfflineSurvivabilityMode
	f.Os = m1.Os
	f.PerformanceEnhancementMode = m1.PerformanceEnhancementMode
	f.Sw = m1.Sw
	f.VolterraCertifiedHw = m1.VolterraCertifiedHw
	f.WorkerNodes = m1.WorkerNodes
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/common_security/security_types.proto

package common_security

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MobileIdentifier
//
// x-displayName: "Mobile Identifier"
// Mobile identifier type
type MobileIdentifier int32

const (
	// Headers
	//
	// x-displayName: "Headers"
	// Headers
	HEADERS MobileIdentifier = 0
)

var MobileIdentifier_name = map[int32]string{
	0: "HEADERS",
}

var MobileIdentifier_value = map[string]int32{
	"HEADERS": 0,
}

func (MobileIdentifier) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{0}
}

// ShapeBotDefenseRegion
//
// x-displayName: "Bot Defense Region"
// Defines a selection for Bot Defense region
type ShapeBotDefenseRegion int32

const (
	// AUTO
	//
	// x-displayName: "Auto"
	// Automatic selection based on client IP address
	AUTO ShapeBotDefenseRegion = 0
	// US
	//
	// x-displayName: "US"
	// US region
	US ShapeBotDefenseRegion = 1
	// EU
	//
	// x-displayName: "EU"
	// European Union region
	EU ShapeBotDefenseRegion = 2
	// ASIA
	//
	// x-displayName: "Asia"
	// Asia region
	ASIA ShapeBotDefenseRegion = 3
)

var ShapeBotDefenseRegion_name = map[int32]string{
	0: "AUTO",
	1: "US",
	2: "EU",
	3: "ASIA",
}

var ShapeBotDefenseRegion_value = map[string]int32{
	"AUTO": 0,
	"US":   1,
	"EU":   2,
	"ASIA": 3,
}

func (ShapeBotDefenseRegion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{1}
}

// URLSchemeType
//
// x-displayName: "URL Scheme"
// SchemeType is used to indicate URL scheme.
type URLScheme int32

const (
	// BOTH
	//
	// x-displayName: "BOTH"
	// URL scheme for https:// or http://.
	BOTH URLScheme = 0
	// HTTP
	//
	// x-displayName: "HTTP"
	// URL scheme http:// only.
	HTTP URLScheme = 1
	// HTTPS
	//
	// x-displayName: "HTTPS"
	// URL scheme https:// only.
	HTTPS URLScheme = 2
)

var URLScheme_name = map[int32]string{
	0: "BOTH",
	1: "HTTP",
	2: "HTTPS",
}

var URLScheme_value = map[string]int32{
	"BOTH":  0,
	"HTTP":  1,
	"HTTPS": 2,
}

func (URLScheme) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{2}
}

// JavaScriptLocation
//
// x-displayName: "JavaScript Location"
// All inside networks.
type JavaScriptLocation int32

const (
	// x-displayName: "After <head> tag"
	// Insert JavaScript after <head> tag
	AFTER_HEAD JavaScriptLocation = 0
	// x-displayName: "After </title> tag"
	// Insert JavaScript after </title> tag.
	AFTER_TITLE_END JavaScriptLocation = 1
	// x-displayName: "Before <script> tag"
	// Insert JavaScript before first <script> tag
	BEFORE_SCRIPT JavaScriptLocation = 2
)

var JavaScriptLocation_name = map[int32]string{
	0: "AFTER_HEAD",
	1: "AFTER_TITLE_END",
	2: "BEFORE_SCRIPT",
}

var JavaScriptLocation_value = map[string]int32{
	"AFTER_HEAD":      0,
	"AFTER_TITLE_END": 1,
	"BEFORE_SCRIPT":   2,
}

func (JavaScriptLocation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{3}
}

// ShapeBotDefenseType
//
// x-displayName: "Bot Defense"
// This defines various configuration options for Bot Defense Policy.
type ShapeBotDefenseType struct {
	// Bot Defense Region
	//
	// x-displayName: "Bot Defense Region"
	// Specify Bot Defense region to use
	// x-required
	RegionalEndpoint ShapeBotDefenseRegion `protobuf:"varint,1,opt,name=regional_endpoint,json=regionalEndpoint,proto3,enum=ves.io.schema.views.common_security.ShapeBotDefenseRegion" json:"regional_endpoint,omitempty"`
	// ShapeBotDefensePolicyType
	//
	// x-displayName: "Bot Defense Policy"
	// x-required
	// Bot Defense Policy.
	Policy *ShapeBotDefensePolicyType `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	// timeout
	//
	// x-displayName: "Timeout"
	// x-example: "300"
	// The timeout for the inference check, in milliseconds.
	Timeout uint32 `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Cors Support Choice
	//
	// x-displayName: "CORS Policy Support"
	// x-required
	// Enables Cross-Origin Resource Sharing (CORS) Policy Support to allow
	// Bot Defense to work with CORS on the origin server. If you use CORS
	// on your application, disabling this setting significantly limits the
	// ability of Bot Defense to protect against bot attacks.
	//
	// Types that are valid to be assigned to CorsSupportChoice:
	//	*ShapeBotDefenseType_EnableCorsSupport
	//	*ShapeBotDefenseType_DisableCorsSupport
	CorsSupportChoice isShapeBotDefenseType_CorsSupportChoice `protobuf_oneof:"cors_support_choice"`
}

func (m *ShapeBotDefenseType) Reset()      { *m = ShapeBotDefenseType{} }
func (*ShapeBotDefenseType) ProtoMessage() {}
func (*ShapeBotDefenseType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{0}
}
func (m *ShapeBotDefenseType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeBotDefenseType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeBotDefenseType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeBotDefenseType.Merge(m, src)
}
func (m *ShapeBotDefenseType) XXX_Size() int {
	return m.Size()
}
func (m *ShapeBotDefenseType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeBotDefenseType.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeBotDefenseType proto.InternalMessageInfo

type isShapeBotDefenseType_CorsSupportChoice interface {
	isShapeBotDefenseType_CorsSupportChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ShapeBotDefenseType_EnableCorsSupport struct {
	EnableCorsSupport *schema.Empty `protobuf:"bytes,5,opt,name=enable_cors_support,json=enableCorsSupport,proto3,oneof" json:"enable_cors_support,omitempty"`
}
type ShapeBotDefenseType_DisableCorsSupport struct {
	DisableCorsSupport *schema.Empty `protobuf:"bytes,6,opt,name=disable_cors_support,json=disableCorsSupport,proto3,oneof" json:"disable_cors_support,omitempty"`
}

func (*ShapeBotDefenseType_EnableCorsSupport) isShapeBotDefenseType_CorsSupportChoice()  {}
func (*ShapeBotDefenseType_DisableCorsSupport) isShapeBotDefenseType_CorsSupportChoice() {}

func (m *ShapeBotDefenseType) GetCorsSupportChoice() isShapeBotDefenseType_CorsSupportChoice {
	if m != nil {
		return m.CorsSupportChoice
	}
	return nil
}

func (m *ShapeBotDefenseType) GetRegionalEndpoint() ShapeBotDefenseRegion {
	if m != nil {
		return m.RegionalEndpoint
	}
	return AUTO
}

func (m *ShapeBotDefenseType) GetPolicy() *ShapeBotDefensePolicyType {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *ShapeBotDefenseType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ShapeBotDefenseType) GetEnableCorsSupport() *schema.Empty {
	if x, ok := m.GetCorsSupportChoice().(*ShapeBotDefenseType_EnableCorsSupport); ok {
		return x.EnableCorsSupport
	}
	return nil
}

func (m *ShapeBotDefenseType) GetDisableCorsSupport() *schema.Empty {
	if x, ok := m.GetCorsSupportChoice().(*ShapeBotDefenseType_DisableCorsSupport); ok {
		return x.DisableCorsSupport
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ShapeBotDefenseType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ShapeBotDefenseType_EnableCorsSupport)(nil),
		(*ShapeBotDefenseType_DisableCorsSupport)(nil),
	}
}

// BotDefenseAdvancedType
//
// x-displayName: "Bot Defense Advanced"
// Bot Defense Advanced
type BotDefenseAdvancedType struct {
	// Web
	//
	// x-displayName: "Infrastructure For Web"
	// Select infrastructure for web.
	Web *views.ObjectRefType `protobuf:"bytes,1,opt,name=web,proto3" json:"web,omitempty"`
	// Mobile
	//
	// x-displayName: "Infrastructure For Mobile"
	// Select infrastructure for mobile.
	Mobile *views.ObjectRefType `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile,omitempty"`
	// BotDefenseAdvancedPolicyType
	//
	// x-displayName: "Bot Defense Advanced Policy"
	// x-required
	// Bot Defense Advanced Policy.
	Policy *BotDefenseAdvancedPolicyType `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (m *BotDefenseAdvancedType) Reset()      { *m = BotDefenseAdvancedType{} }
func (*BotDefenseAdvancedType) ProtoMessage() {}
func (*BotDefenseAdvancedType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{1}
}
func (m *BotDefenseAdvancedType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotDefenseAdvancedType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BotDefenseAdvancedType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotDefenseAdvancedType.Merge(m, src)
}
func (m *BotDefenseAdvancedType) XXX_Size() int {
	return m.Size()
}
func (m *BotDefenseAdvancedType) XXX_DiscardUnknown() {
	xxx_messageInfo_BotDefenseAdvancedType.DiscardUnknown(m)
}

var xxx_messageInfo_BotDefenseAdvancedType proto.InternalMessageInfo

func (m *BotDefenseAdvancedType) GetWeb() *views.ObjectRefType {
	if m != nil {
		return m.Web
	}
	return nil
}

func (m *BotDefenseAdvancedType) GetMobile() *views.ObjectRefType {
	if m != nil {
		return m.Mobile
	}
	return nil
}

func (m *BotDefenseAdvancedType) GetPolicy() *BotDefenseAdvancedPolicyType {
	if m != nil {
		return m.Policy
	}
	return nil
}

// BotDefenseAdvancedPolicyType
//
// x-displayName: "Bot Defense Advanced Policy"
// This defines various configuration options for Bot Defense Advanced Policy.
type BotDefenseAdvancedPolicyType struct {
	// ProtectedAppEndpointType
	//
	// x-displayName: "Protected App Endpoints"
	// x-required
	// List of protected endpoints (max 128 items)
	ProtectedAppEndpoints []*ProtectedAppEndpointType `protobuf:"bytes,1,rep,name=protected_app_endpoints,json=protectedAppEndpoints,proto3" json:"protected_app_endpoints,omitempty"`
	// js_download_path
	//
	// x-displayName: "Web Client JavaScript Download Path"
	// x-example: "/common.js"
	// x-required
	// Customize Bot Defense Web Client JavaScript path
	JsDownloadPath string `protobuf:"bytes,2,opt,name=js_download_path,json=jsDownloadPath,proto3" json:"js_download_path,omitempty"`
	// Mobile SDK Choice
	//
	// x-displayName: "Activate Mobile SDK"
	// x-required
	// Configure Mobile SDK parameters to protect native mobile app endpoints. If you have selected client type as
	// 'Mobile' or 'Web And Mobile' please Enable Mobile SDK. In the event that there is at least one protected
	// endpoint marked with a client type of 'Web And Mobile', then also define Mobile Request Identifier(s) in
	// advanced setting.
	//
	// Types that are valid to be assigned to MobileSdkChoice:
	//	*BotDefenseAdvancedPolicyType_DisableMobileSdk
	//	*BotDefenseAdvancedPolicyType_MobileSdkConfig
	MobileSdkChoice isBotDefenseAdvancedPolicyType_MobileSdkChoice `protobuf_oneof:"mobile_sdk_choice"`
}

func (m *BotDefenseAdvancedPolicyType) Reset()      { *m = BotDefenseAdvancedPolicyType{} }
func (*BotDefenseAdvancedPolicyType) ProtoMessage() {}
func (*BotDefenseAdvancedPolicyType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{2}
}
func (m *BotDefenseAdvancedPolicyType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotDefenseAdvancedPolicyType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BotDefenseAdvancedPolicyType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotDefenseAdvancedPolicyType.Merge(m, src)
}
func (m *BotDefenseAdvancedPolicyType) XXX_Size() int {
	return m.Size()
}
func (m *BotDefenseAdvancedPolicyType) XXX_DiscardUnknown() {
	xxx_messageInfo_BotDefenseAdvancedPolicyType.DiscardUnknown(m)
}

var xxx_messageInfo_BotDefenseAdvancedPolicyType proto.InternalMessageInfo

type isBotDefenseAdvancedPolicyType_MobileSdkChoice interface {
	isBotDefenseAdvancedPolicyType_MobileSdkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BotDefenseAdvancedPolicyType_DisableMobileSdk struct {
	DisableMobileSdk *schema.Empty `protobuf:"bytes,4,opt,name=disable_mobile_sdk,json=disableMobileSdk,proto3,oneof" json:"disable_mobile_sdk,omitempty"`
}
type BotDefenseAdvancedPolicyType_MobileSdkConfig struct {
	MobileSdkConfig *BotAdvancedMobileSDKConfigType `protobuf:"bytes,5,opt,name=mobile_sdk_config,json=mobileSdkConfig,proto3,oneof" json:"mobile_sdk_config,omitempty"`
}

func (*BotDefenseAdvancedPolicyType_DisableMobileSdk) isBotDefenseAdvancedPolicyType_MobileSdkChoice() {
}
func (*BotDefenseAdvancedPolicyType_MobileSdkConfig) isBotDefenseAdvancedPolicyType_MobileSdkChoice() {
}

func (m *BotDefenseAdvancedPolicyType) GetMobileSdkChoice() isBotDefenseAdvancedPolicyType_MobileSdkChoice {
	if m != nil {
		return m.MobileSdkChoice
	}
	return nil
}

func (m *BotDefenseAdvancedPolicyType) GetProtectedAppEndpoints() []*ProtectedAppEndpointType {
	if m != nil {
		return m.ProtectedAppEndpoints
	}
	return nil
}

func (m *BotDefenseAdvancedPolicyType) GetJsDownloadPath() string {
	if m != nil {
		return m.JsDownloadPath
	}
	return ""
}

func (m *BotDefenseAdvancedPolicyType) GetDisableMobileSdk() *schema.Empty {
	if x, ok := m.GetMobileSdkChoice().(*BotDefenseAdvancedPolicyType_DisableMobileSdk); ok {
		return x.DisableMobileSdk
	}
	return nil
}

func (m *BotDefenseAdvancedPolicyType) GetMobileSdkConfig() *BotAdvancedMobileSDKConfigType {
	if x, ok := m.GetMobileSdkChoice().(*BotDefenseAdvancedPolicyType_MobileSdkConfig); ok {
		return x.MobileSdkConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BotDefenseAdvancedPolicyType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BotDefenseAdvancedPolicyType_DisableMobileSdk)(nil),
		(*BotDefenseAdvancedPolicyType_MobileSdkConfig)(nil),
	}
}

// ProtectedAppEndpointType
//
// x-displayName: "Protected App Endpoint"
// Protected Application Endpoint.
type ProtectedAppEndpointType struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Domain Matcher
	//
	// x-displayName: "Domain Matcher"
	// This defines domain matcher.
	//
	// Types that are valid to be assigned to DomainMatcherChoice:
	//	*ProtectedAppEndpointType_AnyDomain
	//	*ProtectedAppEndpointType_Domain
	DomainMatcherChoice isProtectedAppEndpointType_DomainMatcherChoice `protobuf_oneof:"domain_matcher_choice"`
	// Path
	//
	// x-displayName: "Path"
	// x-required
	// x-example: "/id/1"
	// x-example: "/id/*"
	// x-example: "*login"
	// Accepts wildcards * to match multiple characters or ? to match a single character
	Path *schema.PathMatcherType `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	// Query
	//
	// x-displayName: "Query"
	// x-example: "(^|[^\\w])action=login([^\\w]|$)"
	// Enter a regular expression or exact value to match your query parameters of interest
	Query []*Query `protobuf:"bytes,6,rep,name=query,proto3" json:"query,omitempty"`
	// Request Body
	//
	// x-displayName: "Request Body"
	// Request Body
	RequestBody []*RequestBody `protobuf:"bytes,7,rep,name=request_body,json=requestBody,proto3" json:"request_body,omitempty"`
	// HTTP Methods
	//
	// x-displayName: "HTTP Methods"
	// x-required
	// List of HTTP methods.
	HttpMethods []schema.BotHttpMethod `protobuf:"varint,8,rep,packed,name=http_methods,json=httpMethods,proto3,enum=ves.io.schema.BotHttpMethod" json:"http_methods,omitempty"`
	// Traffic channel
	//
	// x-displayName: "Traffic Channel"
	// x-required
	// Select traffic channel.
	//
	// Types that are valid to be assigned to AppTrafficTypeChoice:
	//	*ProtectedAppEndpointType_WebClient
	//	*ProtectedAppEndpointType_MobileClient
	//	*ProtectedAppEndpointType_WebMobileClient
	AppTrafficTypeChoice isProtectedAppEndpointType_AppTrafficTypeChoice `protobuf_oneof:"app_traffic_type_choice"`
	// Endpoint category
	//
	// x-displayName: "Endpoint category"
	// Endpoint label category
	//
	// Types that are valid to be assigned to FlowLabelChoice:
	//	*ProtectedAppEndpointType_UndefinedFlowLabel
	//	*ProtectedAppEndpointType_FlowLabel
	FlowLabelChoice isProtectedAppEndpointType_FlowLabelChoice `protobuf_oneof:"flow_label_choice"`
}

func (m *ProtectedAppEndpointType) Reset()      { *m = ProtectedAppEndpointType{} }
func (*ProtectedAppEndpointType) ProtoMessage() {}
func (*ProtectedAppEndpointType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{3}
}
func (m *ProtectedAppEndpointType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtectedAppEndpointType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProtectedAppEndpointType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtectedAppEndpointType.Merge(m, src)
}
func (m *ProtectedAppEndpointType) XXX_Size() int {
	return m.Size()
}
func (m *ProtectedAppEndpointType) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtectedAppEndpointType.DiscardUnknown(m)
}

var xxx_messageInfo_ProtectedAppEndpointType proto.InternalMessageInfo

type isProtectedAppEndpointType_DomainMatcherChoice interface {
	isProtectedAppEndpointType_DomainMatcherChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProtectedAppEndpointType_AppTrafficTypeChoice interface {
	isProtectedAppEndpointType_AppTrafficTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProtectedAppEndpointType_FlowLabelChoice interface {
	isProtectedAppEndpointType_FlowLabelChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProtectedAppEndpointType_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,3,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type ProtectedAppEndpointType_Domain struct {
	Domain *schema.DomainType `protobuf:"bytes,4,opt,name=domain,proto3,oneof" json:"domain,omitempty"`
}
type ProtectedAppEndpointType_WebClient struct {
	WebClient *schema.Empty `protobuf:"bytes,10,opt,name=web_client,json=webClient,proto3,oneof" json:"web_client,omitempty"`
}
type ProtectedAppEndpointType_MobileClient struct {
	MobileClient *schema.Empty `protobuf:"bytes,11,opt,name=mobile_client,json=mobileClient,proto3,oneof" json:"mobile_client,omitempty"`
}
type ProtectedAppEndpointType_WebMobileClient struct {
	WebMobileClient *WebMobileTrafficType `protobuf:"bytes,12,opt,name=web_mobile_client,json=webMobileClient,proto3,oneof" json:"web_mobile_client,omitempty"`
}
type ProtectedAppEndpointType_UndefinedFlowLabel struct {
	UndefinedFlowLabel *schema.Empty `protobuf:"bytes,14,opt,name=undefined_flow_label,json=undefinedFlowLabel,proto3,oneof" json:"undefined_flow_label,omitempty"`
}
type ProtectedAppEndpointType_FlowLabel struct {
	FlowLabel *schema.BotDefenseFlowLabelCategoriesChoiceType `protobuf:"bytes,15,opt,name=flow_label,json=flowLabel,proto3,oneof" json:"flow_label,omitempty"`
}

func (*ProtectedAppEndpointType_AnyDomain) isProtectedAppEndpointType_DomainMatcherChoice()        {}
func (*ProtectedAppEndpointType_Domain) isProtectedAppEndpointType_DomainMatcherChoice()           {}
func (*ProtectedAppEndpointType_WebClient) isProtectedAppEndpointType_AppTrafficTypeChoice()       {}
func (*ProtectedAppEndpointType_MobileClient) isProtectedAppEndpointType_AppTrafficTypeChoice()    {}
func (*ProtectedAppEndpointType_WebMobileClient) isProtectedAppEndpointType_AppTrafficTypeChoice() {}
func (*ProtectedAppEndpointType_UndefinedFlowLabel) isProtectedAppEndpointType_FlowLabelChoice()   {}
func (*ProtectedAppEndpointType_FlowLabel) isProtectedAppEndpointType_FlowLabelChoice()            {}

func (m *ProtectedAppEndpointType) GetDomainMatcherChoice() isProtectedAppEndpointType_DomainMatcherChoice {
	if m != nil {
		return m.DomainMatcherChoice
	}
	return nil
}
func (m *ProtectedAppEndpointType) GetAppTrafficTypeChoice() isProtectedAppEndpointType_AppTrafficTypeChoice {
	if m != nil {
		return m.AppTrafficTypeChoice
	}
	return nil
}
func (m *ProtectedAppEndpointType) GetFlowLabelChoice() isProtectedAppEndpointType_FlowLabelChoice {
	if m != nil {
		return m.FlowLabelChoice
	}
	return nil
}

func (m *ProtectedAppEndpointType) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ProtectedAppEndpointType) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainMatcherChoice().(*ProtectedAppEndpointType_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *ProtectedAppEndpointType) GetDomain() *schema.DomainType {
	if x, ok := m.GetDomainMatcherChoice().(*ProtectedAppEndpointType_Domain); ok {
		return x.Domain
	}
	return nil
}

func (m *ProtectedAppEndpointType) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *ProtectedAppEndpointType) GetQuery() []*Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ProtectedAppEndpointType) GetRequestBody() []*RequestBody {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

func (m *ProtectedAppEndpointType) GetHttpMethods() []schema.BotHttpMethod {
	if m != nil {
		return m.HttpMethods
	}
	return nil
}

func (m *ProtectedAppEndpointType) GetWebClient() *schema.Empty {
	if x, ok := m.GetAppTrafficTypeChoice().(*ProtectedAppEndpointType_WebClient); ok {
		return x.WebClient
	}
	return nil
}

func (m *ProtectedAppEndpointType) GetMobileClient() *schema.Empty {
	if x, ok := m.GetAppTrafficTypeChoice().(*ProtectedAppEndpointType_MobileClient); ok {
		return x.MobileClient
	}
	return nil
}

func (m *ProtectedAppEndpointType) GetWebMobileClient() *WebMobileTrafficType {
	if x, ok := m.GetAppTrafficTypeChoice().(*ProtectedAppEndpointType_WebMobileClient); ok {
		return x.WebMobileClient
	}
	return nil
}

func (m *ProtectedAppEndpointType) GetUndefinedFlowLabel() *schema.Empty {
	if x, ok := m.GetFlowLabelChoice().(*ProtectedAppEndpointType_UndefinedFlowLabel); ok {
		return x.UndefinedFlowLabel
	}
	return nil
}

func (m *ProtectedAppEndpointType) GetFlowLabel() *schema.BotDefenseFlowLabelCategoriesChoiceType {
	if x, ok := m.GetFlowLabelChoice().(*ProtectedAppEndpointType_FlowLabel); ok {
		return x.FlowLabel
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProtectedAppEndpointType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProtectedAppEndpointType_AnyDomain)(nil),
		(*ProtectedAppEndpointType_Domain)(nil),
		(*ProtectedAppEndpointType_WebClient)(nil),
		(*ProtectedAppEndpointType_MobileClient)(nil),
		(*ProtectedAppEndpointType_WebMobileClient)(nil),
		(*ProtectedAppEndpointType_UndefinedFlowLabel)(nil),
		(*ProtectedAppEndpointType_FlowLabel)(nil),
	}
}

// WebMobileTrafficType
//
// x-displayName: "Web and Mobile traffic type"
// Web and Mobile traffic type
type WebMobileTrafficType struct {
	// Mobile header
	//
	// x-displayName: "Header"
	// Header that is used by mobile traffic.
	Header *policy.HeaderMatcherTypeBasic `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"` // Deprecated: Do not use.
	// Mobile headers
	//
	// x-displayName: "Headers"
	// Headers that can be used to identify mobile traffic.
	Headers []*policy.HeaderMatcherTypeBasic `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"` // Deprecated: Do not use.
	// Mobile Identifier
	//
	// x-displayName: "Mobile Identifier"
	// Mobile identifier type
	MobileIdentifier MobileIdentifier `protobuf:"varint,3,opt,name=mobile_identifier,json=mobileIdentifier,proto3,enum=ves.io.schema.views.common_security.MobileIdentifier" json:"mobile_identifier,omitempty"`
}

func (m *WebMobileTrafficType) Reset()      { *m = WebMobileTrafficType{} }
func (*WebMobileTrafficType) ProtoMessage() {}
func (*WebMobileTrafficType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{4}
}
func (m *WebMobileTrafficType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebMobileTrafficType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WebMobileTrafficType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebMobileTrafficType.Merge(m, src)
}
func (m *WebMobileTrafficType) XXX_Size() int {
	return m.Size()
}
func (m *WebMobileTrafficType) XXX_DiscardUnknown() {
	xxx_messageInfo_WebMobileTrafficType.DiscardUnknown(m)
}

var xxx_messageInfo_WebMobileTrafficType proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *WebMobileTrafficType) GetHeader() *policy.HeaderMatcherTypeBasic {
	if m != nil {
		return m.Header
	}
	return nil
}

// Deprecated: Do not use.
func (m *WebMobileTrafficType) GetHeaders() []*policy.HeaderMatcherTypeBasic {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *WebMobileTrafficType) GetMobileIdentifier() MobileIdentifier {
	if m != nil {
		return m.MobileIdentifier
	}
	return HEADERS
}

// Query
//
// x-displayName: "Query Parameter Matcher"
// Query Parameter Matcher
type Query struct {
	// Name
	//
	// x-displayName: "Query Parameter Name"
	// x-example: "id"
	// Enter query parameter name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//  Value Type
	//
	// x-displayName: "Value Type"
	// x-required
	// Query parameter value type
	//
	// Types that are valid to be assigned to ValueType:
	//	*Query_ExactValue
	//	*Query_RegexValue
	//	*Query_CheckPresence
	ValueType isQuery_ValueType `protobuf_oneof:"value_type"`
}

func (m *Query) Reset()      { *m = Query{} }
func (*Query) ProtoMessage() {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{5}
}
func (m *Query) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return m.Size()
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

type isQuery_ValueType interface {
	isQuery_ValueType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Query_ExactValue struct {
	ExactValue string `protobuf:"bytes,2,opt,name=exact_value,json=exactValue,proto3,oneof" json:"exact_value,omitempty"`
}
type Query_RegexValue struct {
	RegexValue string `protobuf:"bytes,3,opt,name=regex_value,json=regexValue,proto3,oneof" json:"regex_value,omitempty"`
}
type Query_CheckPresence struct {
	CheckPresence *schema.Empty `protobuf:"bytes,4,opt,name=check_presence,json=checkPresence,proto3,oneof" json:"check_presence,omitempty"`
}

func (*Query_ExactValue) isQuery_ValueType()    {}
func (*Query_RegexValue) isQuery_ValueType()    {}
func (*Query_CheckPresence) isQuery_ValueType() {}

func (m *Query) GetValueType() isQuery_ValueType {
	if m != nil {
		return m.ValueType
	}
	return nil
}

func (m *Query) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Query) GetExactValue() string {
	if x, ok := m.GetValueType().(*Query_ExactValue); ok {
		return x.ExactValue
	}
	return ""
}

func (m *Query) GetRegexValue() string {
	if x, ok := m.GetValueType().(*Query_RegexValue); ok {
		return x.RegexValue
	}
	return ""
}

func (m *Query) GetCheckPresence() *schema.Empty {
	if x, ok := m.GetValueType().(*Query_CheckPresence); ok {
		return x.CheckPresence
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Query) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Query_ExactValue)(nil),
		(*Query_RegexValue)(nil),
		(*Query_CheckPresence)(nil),
	}
}

// RequestBody
//
// x-displayName: "Request Body Parameter Matcher"
// Request Body Parameter Matcher
type RequestBody struct {
	// Name
	//
	// x-displayName: "Request Body Parameter Name"
	// x-example: "id"
	// Enter request body parameter name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//  Value Type
	//
	// x-displayName: "Value Type"
	// x-required
	// Request body value type
	//
	// Types that are valid to be assigned to ValueType:
	//	*RequestBody_ExactValue
	//	*RequestBody_RegexValue
	ValueType isRequestBody_ValueType `protobuf_oneof:"value_type"`
}

func (m *RequestBody) Reset()      { *m = RequestBody{} }
func (*RequestBody) ProtoMessage() {}
func (*RequestBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{6}
}
func (m *RequestBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RequestBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestBody.Merge(m, src)
}
func (m *RequestBody) XXX_Size() int {
	return m.Size()
}
func (m *RequestBody) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestBody.DiscardUnknown(m)
}

var xxx_messageInfo_RequestBody proto.InternalMessageInfo

type isRequestBody_ValueType interface {
	isRequestBody_ValueType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequestBody_ExactValue struct {
	ExactValue string `protobuf:"bytes,2,opt,name=exact_value,json=exactValue,proto3,oneof" json:"exact_value,omitempty"`
}
type RequestBody_RegexValue struct {
	RegexValue string `protobuf:"bytes,3,opt,name=regex_value,json=regexValue,proto3,oneof" json:"regex_value,omitempty"`
}

func (*RequestBody_ExactValue) isRequestBody_ValueType() {}
func (*RequestBody_RegexValue) isRequestBody_ValueType() {}

func (m *RequestBody) GetValueType() isRequestBody_ValueType {
	if m != nil {
		return m.ValueType
	}
	return nil
}

func (m *RequestBody) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RequestBody) GetExactValue() string {
	if x, ok := m.GetValueType().(*RequestBody_ExactValue); ok {
		return x.ExactValue
	}
	return ""
}

func (m *RequestBody) GetRegexValue() string {
	if x, ok := m.GetValueType().(*RequestBody_RegexValue); ok {
		return x.RegexValue
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequestBody) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequestBody_ExactValue)(nil),
		(*RequestBody_RegexValue)(nil),
	}
}

// BotAdvancedMobileSDKConfigType
//
// x-displayName: "Mobile Request Identifier Headers"
// Mobile Request Identifier Headers.
type BotAdvancedMobileSDKConfigType struct {
	// MobileTrafficIdentifierType
	//
	// x-displayName: "Mobile Request Identifier Headers"
	// Mobile Request Identifier Headers Type.
	MobileIdentifier *MobileTrafficIdentifierType `protobuf:"bytes,1,opt,name=mobile_identifier,json=mobileIdentifier,proto3" json:"mobile_identifier,omitempty"`
}

func (m *BotAdvancedMobileSDKConfigType) Reset()      { *m = BotAdvancedMobileSDKConfigType{} }
func (*BotAdvancedMobileSDKConfigType) ProtoMessage() {}
func (*BotAdvancedMobileSDKConfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{7}
}
func (m *BotAdvancedMobileSDKConfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotAdvancedMobileSDKConfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BotAdvancedMobileSDKConfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotAdvancedMobileSDKConfigType.Merge(m, src)
}
func (m *BotAdvancedMobileSDKConfigType) XXX_Size() int {
	return m.Size()
}
func (m *BotAdvancedMobileSDKConfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_BotAdvancedMobileSDKConfigType.DiscardUnknown(m)
}

var xxx_messageInfo_BotAdvancedMobileSDKConfigType proto.InternalMessageInfo

func (m *BotAdvancedMobileSDKConfigType) GetMobileIdentifier() *MobileTrafficIdentifierType {
	if m != nil {
		return m.MobileIdentifier
	}
	return nil
}

// ShapeShapeBotDefensePolicyType
//
// x-displayName: "Bot Defense Policy"
// This defines various configuration options for Bot Defense policy.
type ShapeBotDefensePolicyType struct {
	// AppEndpointType
	//
	// x-displayName: "App Endpoint Type"
	// x-required
	// List of protected application endpoints (max 128 items).
	ProtectedAppEndpoints []*AppEndpointType `protobuf:"bytes,1,rep,name=protected_app_endpoints,json=protectedAppEndpoints,proto3" json:"protected_app_endpoints,omitempty"`
	// JavaScript Choice
	//
	// x-displayName: "JavaScript Insertion Settings"
	// x-required
	// This defines a JavaScript insertion rule.
	//
	// Types that are valid to be assigned to JavaScriptChoice:
	//	*ShapeBotDefensePolicyType_DisableJsInsert
	//	*ShapeBotDefensePolicyType_JsInsertAllPages
	//	*ShapeBotDefensePolicyType_JsInsertAllPagesExcept
	//	*ShapeBotDefensePolicyType_JsInsertionRules
	JavaScriptChoice isShapeBotDefensePolicyType_JavaScriptChoice `protobuf_oneof:"java_script_choice"`
	// js_download_path
	//
	// x-displayName: "JavaScript Download Path"
	// x-example: "value"
	// Customize Bot Defense Client JavaScript path. If not specified, default `/common.js`
	JsDownloadPath string `protobuf:"bytes,2,opt,name=js_download_path,json=jsDownloadPath,proto3" json:"js_download_path,omitempty"`
	// javascript_mode
	//
	// x-displayName: "Web Client JavaScript Mode"
	// x-required
	// Determine the mode in which the JavaScript is loaded into the entry page.
	// The JavaScript is split into 2 chunks.
	// The larger chunk can be loaded asynchronously or synchronously. It can also be cacheable or non-cacheable on the browser.
	JavascriptMode schema.JavaScriptMode `protobuf:"varint,11,opt,name=javascript_mode,json=javascriptMode,proto3,enum=ves.io.schema.JavaScriptMode" json:"javascript_mode,omitempty"`
	// Mobile SDK Choice
	//
	// x-displayName: "Mobile SDK Settings"
	// x-required
	// This defines mobile SDK configuration.
	//
	// Types that are valid to be assigned to MobileSdkChoice:
	//	*ShapeBotDefensePolicyType_DisableMobileSdk
	//	*ShapeBotDefensePolicyType_MobileSdkConfig
	MobileSdkChoice isShapeBotDefensePolicyType_MobileSdkChoice `protobuf_oneof:"mobile_sdk_choice"`
}

func (m *ShapeBotDefensePolicyType) Reset()      { *m = ShapeBotDefensePolicyType{} }
func (*ShapeBotDefensePolicyType) ProtoMessage() {}
func (*ShapeBotDefensePolicyType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{8}
}
func (m *ShapeBotDefensePolicyType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeBotDefensePolicyType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeBotDefensePolicyType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeBotDefensePolicyType.Merge(m, src)
}
func (m *ShapeBotDefensePolicyType) XXX_Size() int {
	return m.Size()
}
func (m *ShapeBotDefensePolicyType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeBotDefensePolicyType.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeBotDefensePolicyType proto.InternalMessageInfo

type isShapeBotDefensePolicyType_JavaScriptChoice interface {
	isShapeBotDefensePolicyType_JavaScriptChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isShapeBotDefensePolicyType_MobileSdkChoice interface {
	isShapeBotDefensePolicyType_MobileSdkChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ShapeBotDefensePolicyType_DisableJsInsert struct {
	DisableJsInsert *schema.Empty `protobuf:"bytes,4,opt,name=disable_js_insert,json=disableJsInsert,proto3,oneof" json:"disable_js_insert,omitempty"`
}
type ShapeBotDefensePolicyType_JsInsertAllPages struct {
	JsInsertAllPages *ShapeJavaScriptInsertAllType `protobuf:"bytes,5,opt,name=js_insert_all_pages,json=jsInsertAllPages,proto3,oneof" json:"js_insert_all_pages,omitempty"`
}
type ShapeBotDefensePolicyType_JsInsertAllPagesExcept struct {
	JsInsertAllPagesExcept *ShapeJavaScriptInsertAllWithExceptionsType `protobuf:"bytes,6,opt,name=js_insert_all_pages_except,json=jsInsertAllPagesExcept,proto3,oneof" json:"js_insert_all_pages_except,omitempty"`
}
type ShapeBotDefensePolicyType_JsInsertionRules struct {
	JsInsertionRules *ShapeJavaScriptInsertType `protobuf:"bytes,7,opt,name=js_insertion_rules,json=jsInsertionRules,proto3,oneof" json:"js_insertion_rules,omitempty"`
}
type ShapeBotDefensePolicyType_DisableMobileSdk struct {
	DisableMobileSdk *schema.Empty `protobuf:"bytes,9,opt,name=disable_mobile_sdk,json=disableMobileSdk,proto3,oneof" json:"disable_mobile_sdk,omitempty"`
}
type ShapeBotDefensePolicyType_MobileSdkConfig struct {
	MobileSdkConfig *MobileSDKConfigType `protobuf:"bytes,10,opt,name=mobile_sdk_config,json=mobileSdkConfig,proto3,oneof" json:"mobile_sdk_config,omitempty"`
}

func (*ShapeBotDefensePolicyType_DisableJsInsert) isShapeBotDefensePolicyType_JavaScriptChoice()  {}
func (*ShapeBotDefensePolicyType_JsInsertAllPages) isShapeBotDefensePolicyType_JavaScriptChoice() {}
func (*ShapeBotDefensePolicyType_JsInsertAllPagesExcept) isShapeBotDefensePolicyType_JavaScriptChoice() {
}
func (*ShapeBotDefensePolicyType_JsInsertionRules) isShapeBotDefensePolicyType_JavaScriptChoice() {}
func (*ShapeBotDefensePolicyType_DisableMobileSdk) isShapeBotDefensePolicyType_MobileSdkChoice()  {}
func (*ShapeBotDefensePolicyType_MobileSdkConfig) isShapeBotDefensePolicyType_MobileSdkChoice()   {}

func (m *ShapeBotDefensePolicyType) GetJavaScriptChoice() isShapeBotDefensePolicyType_JavaScriptChoice {
	if m != nil {
		return m.JavaScriptChoice
	}
	return nil
}
func (m *ShapeBotDefensePolicyType) GetMobileSdkChoice() isShapeBotDefensePolicyType_MobileSdkChoice {
	if m != nil {
		return m.MobileSdkChoice
	}
	return nil
}

func (m *ShapeBotDefensePolicyType) GetProtectedAppEndpoints() []*AppEndpointType {
	if m != nil {
		return m.ProtectedAppEndpoints
	}
	return nil
}

func (m *ShapeBotDefensePolicyType) GetDisableJsInsert() *schema.Empty {
	if x, ok := m.GetJavaScriptChoice().(*ShapeBotDefensePolicyType_DisableJsInsert); ok {
		return x.DisableJsInsert
	}
	return nil
}

func (m *ShapeBotDefensePolicyType) GetJsInsertAllPages() *ShapeJavaScriptInsertAllType {
	if x, ok := m.GetJavaScriptChoice().(*ShapeBotDefensePolicyType_JsInsertAllPages); ok {
		return x.JsInsertAllPages
	}
	return nil
}

func (m *ShapeBotDefensePolicyType) GetJsInsertAllPagesExcept() *ShapeJavaScriptInsertAllWithExceptionsType {
	if x, ok := m.GetJavaScriptChoice().(*ShapeBotDefensePolicyType_JsInsertAllPagesExcept); ok {
		return x.JsInsertAllPagesExcept
	}
	return nil
}

func (m *ShapeBotDefensePolicyType) GetJsInsertionRules() *ShapeJavaScriptInsertType {
	if x, ok := m.GetJavaScriptChoice().(*ShapeBotDefensePolicyType_JsInsertionRules); ok {
		return x.JsInsertionRules
	}
	return nil
}

func (m *ShapeBotDefensePolicyType) GetJsDownloadPath() string {
	if m != nil {
		return m.JsDownloadPath
	}
	return ""
}

func (m *ShapeBotDefensePolicyType) GetJavascriptMode() schema.JavaScriptMode {
	if m != nil {
		return m.JavascriptMode
	}
	return schema.ASYNC_JS_NO_CACHING
}

func (m *ShapeBotDefensePolicyType) GetDisableMobileSdk() *schema.Empty {
	if x, ok := m.GetMobileSdkChoice().(*ShapeBotDefensePolicyType_DisableMobileSdk); ok {
		return x.DisableMobileSdk
	}
	return nil
}

func (m *ShapeBotDefensePolicyType) GetMobileSdkConfig() *MobileSDKConfigType {
	if x, ok := m.GetMobileSdkChoice().(*ShapeBotDefensePolicyType_MobileSdkConfig); ok {
		return x.MobileSdkConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ShapeBotDefensePolicyType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ShapeBotDefensePolicyType_DisableJsInsert)(nil),
		(*ShapeBotDefensePolicyType_JsInsertAllPages)(nil),
		(*ShapeBotDefensePolicyType_JsInsertAllPagesExcept)(nil),
		(*ShapeBotDefensePolicyType_JsInsertionRules)(nil),
		(*ShapeBotDefensePolicyType_DisableMobileSdk)(nil),
		(*ShapeBotDefensePolicyType_MobileSdkConfig)(nil),
	}
}

// AppEndpointType
//
// x-displayName: "Application Endpoint"
// Application Endpoint.
type AppEndpointType struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// HTTP Methods
	//
	// x-displayName: "HTTP Methods"
	// x-required
	// List of HTTP methods.
	HttpMethods []schema.BotHttpMethod `protobuf:"varint,2,rep,packed,name=http_methods,json=httpMethods,proto3,enum=ves.io.schema.BotHttpMethod" json:"http_methods,omitempty"`
	// Protocol
	//
	// x-displayName: "Protocol"
	// Protocol.
	Protocol URLScheme `protobuf:"varint,3,opt,name=protocol,proto3,enum=ves.io.schema.views.common_security.URLScheme" json:"protocol,omitempty"`
	// Path
	//
	// x-displayName: "Path"
	// x-required
	// Matching URI path of the route.
	Path *schema.PathMatcherType `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	// Domain Matcher
	//
	// x-displayName: "Domain Matcher"
	// This defines domain matcher.
	//
	// Types that are valid to be assigned to DomainMatcherChoice:
	//	*AppEndpointType_AnyDomain
	//	*AppEndpointType_Domain
	DomainMatcherChoice isAppEndpointType_DomainMatcherChoice `protobuf_oneof:"domain_matcher_choice"`
	// Traffic channel
	//
	// x-displayName: "Traffic Channel"
	// x-required
	// Select traffic channel.
	//
	// Types that are valid to be assigned to AppTrafficTypeChoice:
	//	*AppEndpointType_Web
	//	*AppEndpointType_Mobile
	//	*AppEndpointType_WebMobile
	AppTrafficTypeChoice isAppEndpointType_AppTrafficTypeChoice `protobuf_oneof:"app_traffic_type_choice"`
	// Mitigation
	//
	// x-displayName: "Bot Traffic Mitigation"
	// x-required
	// Mitigation action.
	Mitigation *policy.ShapeBotMitigationAction `protobuf:"bytes,12,opt,name=mitigation,proto3" json:"mitigation,omitempty"`
	// Flow label
	//
	// x-displayName: "Endpoint Label"
	// x-required
	// Endpoint label category
	//
	// Types that are valid to be assigned to FlowLabelChoice:
	//	*AppEndpointType_UndefinedFlowLabel
	//	*AppEndpointType_FlowLabel
	FlowLabelChoice isAppEndpointType_FlowLabelChoice `protobuf_oneof:"flow_label_choice"`
	// Good Bot
	//
	// x-displayName: "Good Bot Detection Settings"
	// x-required
	// The system will distinguish between good bot traffic and malicious automation. Select if you want to allow good bots to continue to the origin or receive the same mitigation handling as defined for all automated traffic.
	//
	// Types that are valid to be assigned to GoodbotChoice:
	//	*AppEndpointType_AllowGoodBots
	//	*AppEndpointType_MitigateGoodBots
	GoodbotChoice isAppEndpointType_GoodbotChoice `protobuf_oneof:"goodbot_choice"`
	// query params
	//
	// x-displayName: "HTTP Query Parameters"
	// A list of predicates for all query parameters that need to be matched. The criteria for matching each query parameter are described in individual instances
	// of QueryParameterMatcherType. The actual query parameter values are extracted from the request API as a list of strings for each query parameter name.
	// Note that all specified query parameter predicates must evaluate to true.
	QueryParams []*policy.QueryParameterMatcherType `protobuf:"bytes,20,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty"`
	// headers
	//
	// x-displayName: "HTTP Headers"
	// A list of predicates for various HTTP headers that need to match. The criteria for matching each HTTP header are described in individual HeaderMatcherType
	// instances. The actual HTTP header values are extracted from the request API as a list of strings for each HTTP header type.
	// Note that all specified header predicates must evaluate to true.
	Headers []*policy.HeaderMatcherType `protobuf:"bytes,21,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (m *AppEndpointType) Reset()      { *m = AppEndpointType{} }
func (*AppEndpointType) ProtoMessage() {}
func (*AppEndpointType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{9}
}
func (m *AppEndpointType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppEndpointType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppEndpointType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppEndpointType.Merge(m, src)
}
func (m *AppEndpointType) XXX_Size() int {
	return m.Size()
}
func (m *AppEndpointType) XXX_DiscardUnknown() {
	xxx_messageInfo_AppEndpointType.DiscardUnknown(m)
}

var xxx_messageInfo_AppEndpointType proto.InternalMessageInfo

type isAppEndpointType_DomainMatcherChoice interface {
	isAppEndpointType_DomainMatcherChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAppEndpointType_AppTrafficTypeChoice interface {
	isAppEndpointType_AppTrafficTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAppEndpointType_FlowLabelChoice interface {
	isAppEndpointType_FlowLabelChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAppEndpointType_GoodbotChoice interface {
	isAppEndpointType_GoodbotChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AppEndpointType_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,6,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type AppEndpointType_Domain struct {
	Domain *schema.DomainType `protobuf:"bytes,7,opt,name=domain,proto3,oneof" json:"domain,omitempty"`
}
type AppEndpointType_Web struct {
	Web *schema.Empty `protobuf:"bytes,9,opt,name=web,proto3,oneof" json:"web,omitempty"`
}
type AppEndpointType_Mobile struct {
	Mobile *schema.Empty `protobuf:"bytes,10,opt,name=mobile,proto3,oneof" json:"mobile,omitempty"`
}
type AppEndpointType_WebMobile struct {
	WebMobile *WebMobileTrafficType `protobuf:"bytes,11,opt,name=web_mobile,json=webMobile,proto3,oneof" json:"web_mobile,omitempty"`
}
type AppEndpointType_UndefinedFlowLabel struct {
	UndefinedFlowLabel *schema.Empty `protobuf:"bytes,14,opt,name=undefined_flow_label,json=undefinedFlowLabel,proto3,oneof" json:"undefined_flow_label,omitempty"`
}
type AppEndpointType_FlowLabel struct {
	FlowLabel *schema.BotDefenseFlowLabelCategoriesChoiceType `protobuf:"bytes,15,opt,name=flow_label,json=flowLabel,proto3,oneof" json:"flow_label,omitempty"`
}
type AppEndpointType_AllowGoodBots struct {
	AllowGoodBots *schema.Empty `protobuf:"bytes,19,opt,name=allow_good_bots,json=allowGoodBots,proto3,oneof" json:"allow_good_bots,omitempty"`
}
type AppEndpointType_MitigateGoodBots struct {
	MitigateGoodBots *schema.Empty `protobuf:"bytes,17,opt,name=mitigate_good_bots,json=mitigateGoodBots,proto3,oneof" json:"mitigate_good_bots,omitempty"`
}

func (*AppEndpointType_AnyDomain) isAppEndpointType_DomainMatcherChoice()      {}
func (*AppEndpointType_Domain) isAppEndpointType_DomainMatcherChoice()         {}
func (*AppEndpointType_Web) isAppEndpointType_AppTrafficTypeChoice()           {}
func (*AppEndpointType_Mobile) isAppEndpointType_AppTrafficTypeChoice()        {}
func (*AppEndpointType_WebMobile) isAppEndpointType_AppTrafficTypeChoice()     {}
func (*AppEndpointType_UndefinedFlowLabel) isAppEndpointType_FlowLabelChoice() {}
func (*AppEndpointType_FlowLabel) isAppEndpointType_FlowLabelChoice()          {}
func (*AppEndpointType_AllowGoodBots) isAppEndpointType_GoodbotChoice()        {}
func (*AppEndpointType_MitigateGoodBots) isAppEndpointType_GoodbotChoice()     {}

func (m *AppEndpointType) GetDomainMatcherChoice() isAppEndpointType_DomainMatcherChoice {
	if m != nil {
		return m.DomainMatcherChoice
	}
	return nil
}
func (m *AppEndpointType) GetAppTrafficTypeChoice() isAppEndpointType_AppTrafficTypeChoice {
	if m != nil {
		return m.AppTrafficTypeChoice
	}
	return nil
}
func (m *AppEndpointType) GetFlowLabelChoice() isAppEndpointType_FlowLabelChoice {
	if m != nil {
		return m.FlowLabelChoice
	}
	return nil
}
func (m *AppEndpointType) GetGoodbotChoice() isAppEndpointType_GoodbotChoice {
	if m != nil {
		return m.GoodbotChoice
	}
	return nil
}

func (m *AppEndpointType) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *AppEndpointType) GetHttpMethods() []schema.BotHttpMethod {
	if m != nil {
		return m.HttpMethods
	}
	return nil
}

func (m *AppEndpointType) GetProtocol() URLScheme {
	if m != nil {
		return m.Protocol
	}
	return BOTH
}

func (m *AppEndpointType) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *AppEndpointType) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainMatcherChoice().(*AppEndpointType_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *AppEndpointType) GetDomain() *schema.DomainType {
	if x, ok := m.GetDomainMatcherChoice().(*AppEndpointType_Domain); ok {
		return x.Domain
	}
	return nil
}

func (m *AppEndpointType) GetWeb() *schema.Empty {
	if x, ok := m.GetAppTrafficTypeChoice().(*AppEndpointType_Web); ok {
		return x.Web
	}
	return nil
}

func (m *AppEndpointType) GetMobile() *schema.Empty {
	if x, ok := m.GetAppTrafficTypeChoice().(*AppEndpointType_Mobile); ok {
		return x.Mobile
	}
	return nil
}

func (m *AppEndpointType) GetWebMobile() *WebMobileTrafficType {
	if x, ok := m.GetAppTrafficTypeChoice().(*AppEndpointType_WebMobile); ok {
		return x.WebMobile
	}
	return nil
}

func (m *AppEndpointType) GetMitigation() *policy.ShapeBotMitigationAction {
	if m != nil {
		return m.Mitigation
	}
	return nil
}

func (m *AppEndpointType) GetUndefinedFlowLabel() *schema.Empty {
	if x, ok := m.GetFlowLabelChoice().(*AppEndpointType_UndefinedFlowLabel); ok {
		return x.UndefinedFlowLabel
	}
	return nil
}

func (m *AppEndpointType) GetFlowLabel() *schema.BotDefenseFlowLabelCategoriesChoiceType {
	if x, ok := m.GetFlowLabelChoice().(*AppEndpointType_FlowLabel); ok {
		return x.FlowLabel
	}
	return nil
}

func (m *AppEndpointType) GetAllowGoodBots() *schema.Empty {
	if x, ok := m.GetGoodbotChoice().(*AppEndpointType_AllowGoodBots); ok {
		return x.AllowGoodBots
	}
	return nil
}

func (m *AppEndpointType) GetMitigateGoodBots() *schema.Empty {
	if x, ok := m.GetGoodbotChoice().(*AppEndpointType_MitigateGoodBots); ok {
		return x.MitigateGoodBots
	}
	return nil
}

func (m *AppEndpointType) GetQueryParams() []*policy.QueryParameterMatcherType {
	if m != nil {
		return m.QueryParams
	}
	return nil
}

func (m *AppEndpointType) GetHeaders() []*policy.HeaderMatcherType {
	if m != nil {
		return m.Headers
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AppEndpointType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AppEndpointType_AnyDomain)(nil),
		(*AppEndpointType_Domain)(nil),
		(*AppEndpointType_Web)(nil),
		(*AppEndpointType_Mobile)(nil),
		(*AppEndpointType_WebMobile)(nil),
		(*AppEndpointType_UndefinedFlowLabel)(nil),
		(*AppEndpointType_FlowLabel)(nil),
		(*AppEndpointType_AllowGoodBots)(nil),
		(*AppEndpointType_MitigateGoodBots)(nil),
	}
}

// MobileSDKConfigType
//
// x-displayName: "Mobile SDK Configuration"
// Mobile SDK configuration.
type MobileSDKConfigType struct {
	// Reload header name
	//
	// x-displayName: "Reload Header Name"
	// x-example: "x-oomZEZlK"
	// Header that is used for SDK configuration sync.
	ReloadHeaderName string `protobuf:"bytes,1,opt,name=reload_header_name,json=reloadHeaderName,proto3" json:"reload_header_name,omitempty"`
	// Mobile Traffic Identifier Type
	//
	// x-displayName: "Mobile Traffic Identifier"
	// Mobile traffic identifier type.
	MobileIdentifier *MobileTrafficIdentifierType `protobuf:"bytes,2,opt,name=mobile_identifier,json=mobileIdentifier,proto3" json:"mobile_identifier,omitempty"`
}

func (m *MobileSDKConfigType) Reset()      { *m = MobileSDKConfigType{} }
func (*MobileSDKConfigType) ProtoMessage() {}
func (*MobileSDKConfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{10}
}
func (m *MobileSDKConfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MobileSDKConfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MobileSDKConfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MobileSDKConfigType.Merge(m, src)
}
func (m *MobileSDKConfigType) XXX_Size() int {
	return m.Size()
}
func (m *MobileSDKConfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_MobileSDKConfigType.DiscardUnknown(m)
}

var xxx_messageInfo_MobileSDKConfigType proto.InternalMessageInfo

func (m *MobileSDKConfigType) GetReloadHeaderName() string {
	if m != nil {
		return m.ReloadHeaderName
	}
	return ""
}

func (m *MobileSDKConfigType) GetMobileIdentifier() *MobileTrafficIdentifierType {
	if m != nil {
		return m.MobileIdentifier
	}
	return nil
}

// MobileTrafficIdentifierType
//
// x-displayName: "Mobile Traffic Identifier"
// Mobile traffic identifier type.
type MobileTrafficIdentifierType struct {
	// Mobile headers
	//
	// x-displayName: "Headers"
	// Headers that can be used to identify mobile traffic.
	Headers []*policy.HeaderMatcherTypeBasic `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (m *MobileTrafficIdentifierType) Reset()      { *m = MobileTrafficIdentifierType{} }
func (*MobileTrafficIdentifierType) ProtoMessage() {}
func (*MobileTrafficIdentifierType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{11}
}
func (m *MobileTrafficIdentifierType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MobileTrafficIdentifierType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MobileTrafficIdentifierType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MobileTrafficIdentifierType.Merge(m, src)
}
func (m *MobileTrafficIdentifierType) XXX_Size() int {
	return m.Size()
}
func (m *MobileTrafficIdentifierType) XXX_DiscardUnknown() {
	xxx_messageInfo_MobileTrafficIdentifierType.DiscardUnknown(m)
}

var xxx_messageInfo_MobileTrafficIdentifierType proto.InternalMessageInfo

func (m *MobileTrafficIdentifierType) GetHeaders() []*policy.HeaderMatcherTypeBasic {
	if m != nil {
		return m.Headers
	}
	return nil
}

// ShapeJavaScriptInsertAllType
//
// x-displayName: "Insert Bot Defense JavaScript in All Pages"
// Insert Bot Defense JavaScript in all pages
type ShapeJavaScriptInsertAllType struct {
	// javascript_location
	//
	// x-displayName: "JavaScript Location"
	// Defines where to insert Bot Defense JavaScript in HTML page.
	JavascriptLocation JavaScriptLocation `protobuf:"varint,1,opt,name=javascript_location,json=javascriptLocation,proto3,enum=ves.io.schema.views.common_security.JavaScriptLocation" json:"javascript_location,omitempty"`
}

func (m *ShapeJavaScriptInsertAllType) Reset()      { *m = ShapeJavaScriptInsertAllType{} }
func (*ShapeJavaScriptInsertAllType) ProtoMessage() {}
func (*ShapeJavaScriptInsertAllType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{12}
}
func (m *ShapeJavaScriptInsertAllType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeJavaScriptInsertAllType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeJavaScriptInsertAllType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeJavaScriptInsertAllType.Merge(m, src)
}
func (m *ShapeJavaScriptInsertAllType) XXX_Size() int {
	return m.Size()
}
func (m *ShapeJavaScriptInsertAllType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeJavaScriptInsertAllType.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeJavaScriptInsertAllType proto.InternalMessageInfo

func (m *ShapeJavaScriptInsertAllType) GetJavascriptLocation() JavaScriptLocation {
	if m != nil {
		return m.JavascriptLocation
	}
	return AFTER_HEAD
}

// ShapeJavaScriptInsertAllWithExceptionsType
//
// x-displayName: "Insert JavaScript in All Pages with the Exceptions"
// Insert Bot Defense JavaScript in all pages  with the exceptions
type ShapeJavaScriptInsertAllWithExceptionsType struct {
	// javascript_location
	//
	// x-displayName: "JavaScript Location"
	// Defines where to insert Bot Defense JavaScript in HTML page.
	JavascriptLocation JavaScriptLocation `protobuf:"varint,1,opt,name=javascript_location,json=javascriptLocation,proto3,enum=ves.io.schema.views.common_security.JavaScriptLocation" json:"javascript_location,omitempty"`
	// exclude_list
	//
	// x-displayName: "Exclude Pages"
	// Optional JavaScript insertions exclude list of domain and path matchers.
	ExcludeList []*ShapeJavaScriptExclusionRule `protobuf:"bytes,2,rep,name=exclude_list,json=excludeList,proto3" json:"exclude_list,omitempty"`
}

func (m *ShapeJavaScriptInsertAllWithExceptionsType) Reset() {
	*m = ShapeJavaScriptInsertAllWithExceptionsType{}
}
func (*ShapeJavaScriptInsertAllWithExceptionsType) ProtoMessage() {}
func (*ShapeJavaScriptInsertAllWithExceptionsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{13}
}
func (m *ShapeJavaScriptInsertAllWithExceptionsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeJavaScriptInsertAllWithExceptionsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeJavaScriptInsertAllWithExceptionsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeJavaScriptInsertAllWithExceptionsType.Merge(m, src)
}
func (m *ShapeJavaScriptInsertAllWithExceptionsType) XXX_Size() int {
	return m.Size()
}
func (m *ShapeJavaScriptInsertAllWithExceptionsType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeJavaScriptInsertAllWithExceptionsType.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeJavaScriptInsertAllWithExceptionsType proto.InternalMessageInfo

func (m *ShapeJavaScriptInsertAllWithExceptionsType) GetJavascriptLocation() JavaScriptLocation {
	if m != nil {
		return m.JavascriptLocation
	}
	return AFTER_HEAD
}

func (m *ShapeJavaScriptInsertAllWithExceptionsType) GetExcludeList() []*ShapeJavaScriptExclusionRule {
	if m != nil {
		return m.ExcludeList
	}
	return nil
}

// ShapeJavaScriptExclusionRule
//
// x-displayName: "JavaScript Insertion Exclusion Rule"
// Define JavaScript insertion exclusion rule
type ShapeJavaScriptExclusionRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Domain Matcher
	//
	// x-displayName: "Domain Matcher"
	// x-required
	// This defines domain matcher.
	//
	// Types that are valid to be assigned to DomainMatcherChoice:
	//	*ShapeJavaScriptExclusionRule_AnyDomain
	//	*ShapeJavaScriptExclusionRule_Domain
	DomainMatcherChoice isShapeJavaScriptExclusionRule_DomainMatcherChoice `protobuf_oneof:"domain_matcher_choice"`
	// Path
	//
	// x-displayName: "Path"
	// x-required
	// URI path matcher.
	Path *schema.PathMatcherType `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *ShapeJavaScriptExclusionRule) Reset()      { *m = ShapeJavaScriptExclusionRule{} }
func (*ShapeJavaScriptExclusionRule) ProtoMessage() {}
func (*ShapeJavaScriptExclusionRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{14}
}
func (m *ShapeJavaScriptExclusionRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeJavaScriptExclusionRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeJavaScriptExclusionRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeJavaScriptExclusionRule.Merge(m, src)
}
func (m *ShapeJavaScriptExclusionRule) XXX_Size() int {
	return m.Size()
}
func (m *ShapeJavaScriptExclusionRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeJavaScriptExclusionRule.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeJavaScriptExclusionRule proto.InternalMessageInfo

type isShapeJavaScriptExclusionRule_DomainMatcherChoice interface {
	isShapeJavaScriptExclusionRule_DomainMatcherChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ShapeJavaScriptExclusionRule_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,3,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type ShapeJavaScriptExclusionRule_Domain struct {
	Domain *schema.DomainType `protobuf:"bytes,4,opt,name=domain,proto3,oneof" json:"domain,omitempty"`
}

func (*ShapeJavaScriptExclusionRule_AnyDomain) isShapeJavaScriptExclusionRule_DomainMatcherChoice() {}
func (*ShapeJavaScriptExclusionRule_Domain) isShapeJavaScriptExclusionRule_DomainMatcherChoice()    {}

func (m *ShapeJavaScriptExclusionRule) GetDomainMatcherChoice() isShapeJavaScriptExclusionRule_DomainMatcherChoice {
	if m != nil {
		return m.DomainMatcherChoice
	}
	return nil
}

func (m *ShapeJavaScriptExclusionRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ShapeJavaScriptExclusionRule) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainMatcherChoice().(*ShapeJavaScriptExclusionRule_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *ShapeJavaScriptExclusionRule) GetDomain() *schema.DomainType {
	if x, ok := m.GetDomainMatcherChoice().(*ShapeJavaScriptExclusionRule_Domain); ok {
		return x.Domain
	}
	return nil
}

func (m *ShapeJavaScriptExclusionRule) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ShapeJavaScriptExclusionRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ShapeJavaScriptExclusionRule_AnyDomain)(nil),
		(*ShapeJavaScriptExclusionRule_Domain)(nil),
	}
}

// ShapeJavaScriptInsertType
//
// x-displayName: "JavaScript Custom Insertion Rules"
// This defines custom JavaScript insertion rules for Bot Defense Policy.
type ShapeJavaScriptInsertType struct {
	// rules
	//
	// x-displayName: "JavaScript Insertions"
	// x-required
	// Required list of pages to insert Bot Defense client JavaScript.
	Rules []*ShapeJavaScriptInsertionRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
	// exclude_list
	//
	// x-displayName: "Exclude Paths"
	// Optional JavaScript insertions exclude list of domain and path matchers.
	ExcludeList []*ShapeJavaScriptExclusionRule `protobuf:"bytes,3,rep,name=exclude_list,json=excludeList,proto3" json:"exclude_list,omitempty"`
}

func (m *ShapeJavaScriptInsertType) Reset()      { *m = ShapeJavaScriptInsertType{} }
func (*ShapeJavaScriptInsertType) ProtoMessage() {}
func (*ShapeJavaScriptInsertType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{15}
}
func (m *ShapeJavaScriptInsertType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeJavaScriptInsertType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeJavaScriptInsertType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeJavaScriptInsertType.Merge(m, src)
}
func (m *ShapeJavaScriptInsertType) XXX_Size() int {
	return m.Size()
}
func (m *ShapeJavaScriptInsertType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeJavaScriptInsertType.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeJavaScriptInsertType proto.InternalMessageInfo

func (m *ShapeJavaScriptInsertType) GetRules() []*ShapeJavaScriptInsertionRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *ShapeJavaScriptInsertType) GetExcludeList() []*ShapeJavaScriptExclusionRule {
	if m != nil {
		return m.ExcludeList
	}
	return nil
}

// ShapeJavaScriptInsertionRule
//
// x-displayName: "JavaScript Insertion Rule"
// This defines a rule for Bot Defense JavaScript insertion.
type ShapeJavaScriptInsertionRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Domain Matcher
	//
	// x-displayName: "Domain Matcher"
	// x-required
	// This defines domain matcher.
	//
	// Types that are valid to be assigned to DomainMatcherChoice:
	//	*ShapeJavaScriptInsertionRule_AnyDomain
	//	*ShapeJavaScriptInsertionRule_Domain
	DomainMatcherChoice isShapeJavaScriptInsertionRule_DomainMatcherChoice `protobuf_oneof:"domain_matcher_choice"`
	// Path
	//
	// x-displayName: "Path"
	// x-required
	// URI path matcher.
	Path *schema.PathMatcherType `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	// javascript_location
	//
	// x-displayName: "JavaScript Location"
	// Defines where to insert Bot Defense JavaScript in HTML page.
	JavascriptLocation JavaScriptLocation `protobuf:"varint,6,opt,name=javascript_location,json=javascriptLocation,proto3,enum=ves.io.schema.views.common_security.JavaScriptLocation" json:"javascript_location,omitempty"`
}

func (m *ShapeJavaScriptInsertionRule) Reset()      { *m = ShapeJavaScriptInsertionRule{} }
func (*ShapeJavaScriptInsertionRule) ProtoMessage() {}
func (*ShapeJavaScriptInsertionRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{16}
}
func (m *ShapeJavaScriptInsertionRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeJavaScriptInsertionRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeJavaScriptInsertionRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeJavaScriptInsertionRule.Merge(m, src)
}
func (m *ShapeJavaScriptInsertionRule) XXX_Size() int {
	return m.Size()
}
func (m *ShapeJavaScriptInsertionRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeJavaScriptInsertionRule.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeJavaScriptInsertionRule proto.InternalMessageInfo

type isShapeJavaScriptInsertionRule_DomainMatcherChoice interface {
	isShapeJavaScriptInsertionRule_DomainMatcherChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ShapeJavaScriptInsertionRule_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,3,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type ShapeJavaScriptInsertionRule_Domain struct {
	Domain *schema.DomainType `protobuf:"bytes,4,opt,name=domain,proto3,oneof" json:"domain,omitempty"`
}

func (*ShapeJavaScriptInsertionRule_AnyDomain) isShapeJavaScriptInsertionRule_DomainMatcherChoice() {}
func (*ShapeJavaScriptInsertionRule_Domain) isShapeJavaScriptInsertionRule_DomainMatcherChoice()    {}

func (m *ShapeJavaScriptInsertionRule) GetDomainMatcherChoice() isShapeJavaScriptInsertionRule_DomainMatcherChoice {
	if m != nil {
		return m.DomainMatcherChoice
	}
	return nil
}

func (m *ShapeJavaScriptInsertionRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ShapeJavaScriptInsertionRule) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainMatcherChoice().(*ShapeJavaScriptInsertionRule_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *ShapeJavaScriptInsertionRule) GetDomain() *schema.DomainType {
	if x, ok := m.GetDomainMatcherChoice().(*ShapeJavaScriptInsertionRule_Domain); ok {
		return x.Domain
	}
	return nil
}

func (m *ShapeJavaScriptInsertionRule) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *ShapeJavaScriptInsertionRule) GetJavascriptLocation() JavaScriptLocation {
	if m != nil {
		return m.JavascriptLocation
	}
	return AFTER_HEAD
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ShapeJavaScriptInsertionRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ShapeJavaScriptInsertionRule_AnyDomain)(nil),
		(*ShapeJavaScriptInsertionRule_Domain)(nil),
	}
}

// DDoSMitigationRule
//
// x-displayName: "DDoS Mitigation Rule"
// DDoS Mitigation Rule specifies the sources to be blocked
type DDoSMitigationRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// mitigation action
	//
	// x-displayName: "Mitigation Action"
	// x-required
	// The action to be taken for a specified mitigation choice
	//
	// Types that are valid to be assigned to MitigationAction:
	//	*DDoSMitigationRule_Block
	MitigationAction isDDoSMitigationRule_MitigationAction `protobuf_oneof:"mitigation_action"`
	// Mitigation Choice
	//
	// x-displayName: "Mitigation Choice"
	// x-required
	// Mitigation source to be matched
	//
	// Types that are valid to be assigned to MitigationChoice:
	//	*DDoSMitigationRule_DdosClientSource
	//	*DDoSMitigationRule_IpPrefixList
	MitigationChoice isDDoSMitigationRule_MitigationChoice `protobuf_oneof:"mitigation_choice"`
	// expiration timestamp
	//
	// x-displayName: "Expiration Timestamp"
	// x-example: "2019-12-31:44:34.171543432Z"
	// The expiration_timestamp is the RFC 3339 format timestamp at which the containing rule is considered to be logically expired. The rule continues to exist in
	// the configuration but is not applied anymore.
	ExpirationTimestamp *types.Timestamp `protobuf:"bytes,10,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
}

func (m *DDoSMitigationRule) Reset()      { *m = DDoSMitigationRule{} }
func (*DDoSMitigationRule) ProtoMessage() {}
func (*DDoSMitigationRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{17}
}
func (m *DDoSMitigationRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DDoSMitigationRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DDoSMitigationRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DDoSMitigationRule.Merge(m, src)
}
func (m *DDoSMitigationRule) XXX_Size() int {
	return m.Size()
}
func (m *DDoSMitigationRule) XXX_DiscardUnknown() {
	xxx_messageInfo_DDoSMitigationRule.DiscardUnknown(m)
}

var xxx_messageInfo_DDoSMitigationRule proto.InternalMessageInfo

type isDDoSMitigationRule_MitigationAction interface {
	isDDoSMitigationRule_MitigationAction()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDDoSMitigationRule_MitigationChoice interface {
	isDDoSMitigationRule_MitigationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DDoSMitigationRule_Block struct {
	Block *schema.Empty `protobuf:"bytes,3,opt,name=block,proto3,oneof" json:"block,omitempty"`
}
type DDoSMitigationRule_DdosClientSource struct {
	DdosClientSource *DDoSClientSource `protobuf:"bytes,8,opt,name=ddos_client_source,json=ddosClientSource,proto3,oneof" json:"ddos_client_source,omitempty"`
}
type DDoSMitigationRule_IpPrefixList struct {
	IpPrefixList *policy.PrefixMatchList `protobuf:"bytes,9,opt,name=ip_prefix_list,json=ipPrefixList,proto3,oneof" json:"ip_prefix_list,omitempty"`
}

func (*DDoSMitigationRule_Block) isDDoSMitigationRule_MitigationAction()            {}
func (*DDoSMitigationRule_DdosClientSource) isDDoSMitigationRule_MitigationChoice() {}
func (*DDoSMitigationRule_IpPrefixList) isDDoSMitigationRule_MitigationChoice()     {}

func (m *DDoSMitigationRule) GetMitigationAction() isDDoSMitigationRule_MitigationAction {
	if m != nil {
		return m.MitigationAction
	}
	return nil
}
func (m *DDoSMitigationRule) GetMitigationChoice() isDDoSMitigationRule_MitigationChoice {
	if m != nil {
		return m.MitigationChoice
	}
	return nil
}

func (m *DDoSMitigationRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DDoSMitigationRule) GetBlock() *schema.Empty {
	if x, ok := m.GetMitigationAction().(*DDoSMitigationRule_Block); ok {
		return x.Block
	}
	return nil
}

func (m *DDoSMitigationRule) GetDdosClientSource() *DDoSClientSource {
	if x, ok := m.GetMitigationChoice().(*DDoSMitigationRule_DdosClientSource); ok {
		return x.DdosClientSource
	}
	return nil
}

func (m *DDoSMitigationRule) GetIpPrefixList() *policy.PrefixMatchList {
	if x, ok := m.GetMitigationChoice().(*DDoSMitigationRule_IpPrefixList); ok {
		return x.IpPrefixList
	}
	return nil
}

func (m *DDoSMitigationRule) GetExpirationTimestamp() *types.Timestamp {
	if m != nil {
		return m.ExpirationTimestamp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DDoSMitigationRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DDoSMitigationRule_Block)(nil),
		(*DDoSMitigationRule_DdosClientSource)(nil),
		(*DDoSMitigationRule_IpPrefixList)(nil),
	}
}

// DDoSClientSource
//
// x-displayName: "DDoS Client Source Choice"
// DDoS Mitigation sources to be blocked
type DDoSClientSource struct {
	// asn_list
	//
	// x-displayName: "ASN List"
	// Addresses that belong to the ASNs in the given list
	// The ASN is obtained by performing a lookup for the source IPv4 Address in a GeoIP DB.
	AsnList *policy.AsnMatchList `protobuf:"bytes,1,opt,name=asn_list,json=asnList,proto3" json:"asn_list,omitempty"`
	// country_list
	//
	// x-displayName: "Country List"
	// Sources that are located in one of the countries in the given list
	CountryList []policy.CountryCode `protobuf:"varint,3,rep,packed,name=country_list,json=countryList,proto3,enum=ves.io.schema.policy.CountryCode" json:"country_list,omitempty"`
	// TLS JA3 fingerprint matcher
	//
	// x-displayName: "TLS Fingerprint Matcher"
	// TLS JA3 fingerprints to be matched.
	// The predicate evaluates to true if the TLS fingerprint matches any of the exact values or classes of known TLS fingerprints.
	TlsFingerprintMatcher *policy.TlsFingerprintMatcherType `protobuf:"bytes,5,opt,name=tls_fingerprint_matcher,json=tlsFingerprintMatcher,proto3" json:"tls_fingerprint_matcher,omitempty"`
}

func (m *DDoSClientSource) Reset()      { *m = DDoSClientSource{} }
func (*DDoSClientSource) ProtoMessage() {}
func (*DDoSClientSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{18}
}
func (m *DDoSClientSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DDoSClientSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DDoSClientSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DDoSClientSource.Merge(m, src)
}
func (m *DDoSClientSource) XXX_Size() int {
	return m.Size()
}
func (m *DDoSClientSource) XXX_DiscardUnknown() {
	xxx_messageInfo_DDoSClientSource.DiscardUnknown(m)
}

var xxx_messageInfo_DDoSClientSource proto.InternalMessageInfo

func (m *DDoSClientSource) GetAsnList() *policy.AsnMatchList {
	if m != nil {
		return m.AsnList
	}
	return nil
}

func (m *DDoSClientSource) GetCountryList() []policy.CountryCode {
	if m != nil {
		return m.CountryList
	}
	return nil
}

func (m *DDoSClientSource) GetTlsFingerprintMatcher() *policy.TlsFingerprintMatcherType {
	if m != nil {
		return m.TlsFingerprintMatcher
	}
	return nil
}

// SensitiveDataPolicySettings
//
// x-displayName: "Sensitive Data Discovery"
// Settings for data type policy
type SensitiveDataPolicySettings struct {
	// Specify Sensitive Data Discovery
	//
	// x-displayName: "Specify Sensitive Data Discovery"
	// x-required
	// Specify Sensitive Data Discovery
	SensitiveDataPolicyRef *views.ObjectRefType `protobuf:"bytes,1,opt,name=sensitive_data_policy_ref,json=sensitiveDataPolicyRef,proto3" json:"sensitive_data_policy_ref,omitempty"`
}

func (m *SensitiveDataPolicySettings) Reset()      { *m = SensitiveDataPolicySettings{} }
func (*SensitiveDataPolicySettings) ProtoMessage() {}
func (*SensitiveDataPolicySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{19}
}
func (m *SensitiveDataPolicySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SensitiveDataPolicySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SensitiveDataPolicySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensitiveDataPolicySettings.Merge(m, src)
}
func (m *SensitiveDataPolicySettings) XXX_Size() int {
	return m.Size()
}
func (m *SensitiveDataPolicySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_SensitiveDataPolicySettings.DiscardUnknown(m)
}

var xxx_messageInfo_SensitiveDataPolicySettings proto.InternalMessageInfo

func (m *SensitiveDataPolicySettings) GetSensitiveDataPolicyRef() *views.ObjectRefType {
	if m != nil {
		return m.SensitiveDataPolicyRef
	}
	return nil
}

// ClientSideDefenseType
//
// x-displayName: "Client-Side Defense"
// This defines various configuration options for Client-Side Defense Policy.
type ClientSideDefenseType struct {
	// ClientSideDefensePolicyType
	//
	// x-displayName: "Client-Side Defense Policy"
	// x-required
	// Configure the pages where you want Client-Side Defense Protection.
	// Please ensure that the same domains are configured in the Client-Side Defense configuration.
	Policy *ClientSideDefensePolicyType `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (m *ClientSideDefenseType) Reset()      { *m = ClientSideDefenseType{} }
func (*ClientSideDefenseType) ProtoMessage() {}
func (*ClientSideDefenseType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{20}
}
func (m *ClientSideDefenseType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSideDefenseType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClientSideDefenseType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSideDefenseType.Merge(m, src)
}
func (m *ClientSideDefenseType) XXX_Size() int {
	return m.Size()
}
func (m *ClientSideDefenseType) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSideDefenseType.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSideDefenseType proto.InternalMessageInfo

func (m *ClientSideDefenseType) GetPolicy() *ClientSideDefensePolicyType {
	if m != nil {
		return m.Policy
	}
	return nil
}

// ClientSideDefensePolicyType
//
// x-displayName: "Client-Side Defense Policy"
// This defines various configuration options for Client-Side Defense policy.
type ClientSideDefensePolicyType struct {
	// JavaScript Choice
	//
	// x-displayName: "JavaScript Insertion Settings"
	// x-required
	// This defines a JavaScript insertion rule.
	//
	// Types that are valid to be assigned to JavaScriptChoice:
	//	*ClientSideDefensePolicyType_DisableJsInsert
	//	*ClientSideDefensePolicyType_JsInsertAllPages
	//	*ClientSideDefensePolicyType_JsInsertAllPagesExcept
	//	*ClientSideDefensePolicyType_JsInsertionRules
	JavaScriptChoice isClientSideDefensePolicyType_JavaScriptChoice `protobuf_oneof:"java_script_choice"`
}

func (m *ClientSideDefensePolicyType) Reset()      { *m = ClientSideDefensePolicyType{} }
func (*ClientSideDefensePolicyType) ProtoMessage() {}
func (*ClientSideDefensePolicyType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{21}
}
func (m *ClientSideDefensePolicyType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSideDefensePolicyType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClientSideDefensePolicyType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSideDefensePolicyType.Merge(m, src)
}
func (m *ClientSideDefensePolicyType) XXX_Size() int {
	return m.Size()
}
func (m *ClientSideDefensePolicyType) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSideDefensePolicyType.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSideDefensePolicyType proto.InternalMessageInfo

type isClientSideDefensePolicyType_JavaScriptChoice interface {
	isClientSideDefensePolicyType_JavaScriptChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClientSideDefensePolicyType_DisableJsInsert struct {
	DisableJsInsert *schema.Empty `protobuf:"bytes,2,opt,name=disable_js_insert,json=disableJsInsert,proto3,oneof" json:"disable_js_insert,omitempty"`
}
type ClientSideDefensePolicyType_JsInsertAllPages struct {
	JsInsertAllPages *schema.Empty `protobuf:"bytes,3,opt,name=js_insert_all_pages,json=jsInsertAllPages,proto3,oneof" json:"js_insert_all_pages,omitempty"`
}
type ClientSideDefensePolicyType_JsInsertAllPagesExcept struct {
	JsInsertAllPagesExcept *CSDJavaScriptInsertAllWithExceptionsType `protobuf:"bytes,4,opt,name=js_insert_all_pages_except,json=jsInsertAllPagesExcept,proto3,oneof" json:"js_insert_all_pages_except,omitempty"`
}
type ClientSideDefensePolicyType_JsInsertionRules struct {
	JsInsertionRules *CSDJavaScriptInsertType `protobuf:"bytes,5,opt,name=js_insertion_rules,json=jsInsertionRules,proto3,oneof" json:"js_insertion_rules,omitempty"`
}

func (*ClientSideDefensePolicyType_DisableJsInsert) isClientSideDefensePolicyType_JavaScriptChoice() {
}
func (*ClientSideDefensePolicyType_JsInsertAllPages) isClientSideDefensePolicyType_JavaScriptChoice() {
}
func (*ClientSideDefensePolicyType_JsInsertAllPagesExcept) isClientSideDefensePolicyType_JavaScriptChoice() {
}
func (*ClientSideDefensePolicyType_JsInsertionRules) isClientSideDefensePolicyType_JavaScriptChoice() {
}

func (m *ClientSideDefensePolicyType) GetJavaScriptChoice() isClientSideDefensePolicyType_JavaScriptChoice {
	if m != nil {
		return m.JavaScriptChoice
	}
	return nil
}

func (m *ClientSideDefensePolicyType) GetDisableJsInsert() *schema.Empty {
	if x, ok := m.GetJavaScriptChoice().(*ClientSideDefensePolicyType_DisableJsInsert); ok {
		return x.DisableJsInsert
	}
	return nil
}

func (m *ClientSideDefensePolicyType) GetJsInsertAllPages() *schema.Empty {
	if x, ok := m.GetJavaScriptChoice().(*ClientSideDefensePolicyType_JsInsertAllPages); ok {
		return x.JsInsertAllPages
	}
	return nil
}

func (m *ClientSideDefensePolicyType) GetJsInsertAllPagesExcept() *CSDJavaScriptInsertAllWithExceptionsType {
	if x, ok := m.GetJavaScriptChoice().(*ClientSideDefensePolicyType_JsInsertAllPagesExcept); ok {
		return x.JsInsertAllPagesExcept
	}
	return nil
}

func (m *ClientSideDefensePolicyType) GetJsInsertionRules() *CSDJavaScriptInsertType {
	if x, ok := m.GetJavaScriptChoice().(*ClientSideDefensePolicyType_JsInsertionRules); ok {
		return x.JsInsertionRules
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClientSideDefensePolicyType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClientSideDefensePolicyType_DisableJsInsert)(nil),
		(*ClientSideDefensePolicyType_JsInsertAllPages)(nil),
		(*ClientSideDefensePolicyType_JsInsertAllPagesExcept)(nil),
		(*ClientSideDefensePolicyType_JsInsertionRules)(nil),
	}
}

// CSDJavaScriptInsertAllWithExceptionsType
//
// x-displayName: "Insert JavaScript in All Pages with the Exceptions"
// Insert Client-Side Defense JavaScript in all pages  with the exceptions
type CSDJavaScriptInsertAllWithExceptionsType struct {
	// exclude_list
	//
	// x-displayName: "Exclude Pages"
	// Optional JavaScript insertions exclude list of domain and path matchers.
	ExcludeList []*ShapeJavaScriptExclusionRule `protobuf:"bytes,1,rep,name=exclude_list,json=excludeList,proto3" json:"exclude_list,omitempty"`
}

func (m *CSDJavaScriptInsertAllWithExceptionsType) Reset() {
	*m = CSDJavaScriptInsertAllWithExceptionsType{}
}
func (*CSDJavaScriptInsertAllWithExceptionsType) ProtoMessage() {}
func (*CSDJavaScriptInsertAllWithExceptionsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{22}
}
func (m *CSDJavaScriptInsertAllWithExceptionsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSDJavaScriptInsertAllWithExceptionsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CSDJavaScriptInsertAllWithExceptionsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSDJavaScriptInsertAllWithExceptionsType.Merge(m, src)
}
func (m *CSDJavaScriptInsertAllWithExceptionsType) XXX_Size() int {
	return m.Size()
}
func (m *CSDJavaScriptInsertAllWithExceptionsType) XXX_DiscardUnknown() {
	xxx_messageInfo_CSDJavaScriptInsertAllWithExceptionsType.DiscardUnknown(m)
}

var xxx_messageInfo_CSDJavaScriptInsertAllWithExceptionsType proto.InternalMessageInfo

func (m *CSDJavaScriptInsertAllWithExceptionsType) GetExcludeList() []*ShapeJavaScriptExclusionRule {
	if m != nil {
		return m.ExcludeList
	}
	return nil
}

// CSDJavaScriptInsertType
//
// x-displayName: "JavaScript Custom Insertion Rules"
// This defines custom JavaScript insertion rules for Client-Side Defense Policy.
type CSDJavaScriptInsertType struct {
	// rules
	//
	// x-displayName: "JavaScript Insertions"
	// x-required
	// Required list of pages to insert Client-Side Defense client JavaScript.
	Rules []*CSDJavaScriptInsertionRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	// exclude_list
	//
	// x-displayName: "Exclude Paths"
	// Optional JavaScript insertions exclude list of domain and path matchers.
	ExcludeList []*ShapeJavaScriptExclusionRule `protobuf:"bytes,2,rep,name=exclude_list,json=excludeList,proto3" json:"exclude_list,omitempty"`
}

func (m *CSDJavaScriptInsertType) Reset()      { *m = CSDJavaScriptInsertType{} }
func (*CSDJavaScriptInsertType) ProtoMessage() {}
func (*CSDJavaScriptInsertType) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{23}
}
func (m *CSDJavaScriptInsertType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSDJavaScriptInsertType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CSDJavaScriptInsertType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSDJavaScriptInsertType.Merge(m, src)
}
func (m *CSDJavaScriptInsertType) XXX_Size() int {
	return m.Size()
}
func (m *CSDJavaScriptInsertType) XXX_DiscardUnknown() {
	xxx_messageInfo_CSDJavaScriptInsertType.DiscardUnknown(m)
}

var xxx_messageInfo_CSDJavaScriptInsertType proto.InternalMessageInfo

func (m *CSDJavaScriptInsertType) GetRules() []*CSDJavaScriptInsertionRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *CSDJavaScriptInsertType) GetExcludeList() []*ShapeJavaScriptExclusionRule {
	if m != nil {
		return m.ExcludeList
	}
	return nil
}

// CSDJavaScriptInsertionRule
//
// x-displayName: "JavaScript Insertion Rule"
// This defines a rule for Client-Side Defense JavaScript insertion.
type CSDJavaScriptInsertionRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Domain Matcher
	//
	// x-displayName: "Domain Matcher"
	// x-required
	// This defines domain matcher.
	//
	// Types that are valid to be assigned to DomainMatcherChoice:
	//	*CSDJavaScriptInsertionRule_AnyDomain
	//	*CSDJavaScriptInsertionRule_Domain
	DomainMatcherChoice isCSDJavaScriptInsertionRule_DomainMatcherChoice `protobuf_oneof:"domain_matcher_choice"`
	// Path
	//
	// x-displayName: "Path"
	// x-required
	// URI path matcher.
	Path *schema.PathMatcherType `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *CSDJavaScriptInsertionRule) Reset()      { *m = CSDJavaScriptInsertionRule{} }
func (*CSDJavaScriptInsertionRule) ProtoMessage() {}
func (*CSDJavaScriptInsertionRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{24}
}
func (m *CSDJavaScriptInsertionRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSDJavaScriptInsertionRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CSDJavaScriptInsertionRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSDJavaScriptInsertionRule.Merge(m, src)
}
func (m *CSDJavaScriptInsertionRule) XXX_Size() int {
	return m.Size()
}
func (m *CSDJavaScriptInsertionRule) XXX_DiscardUnknown() {
	xxx_messageInfo_CSDJavaScriptInsertionRule.DiscardUnknown(m)
}

var xxx_messageInfo_CSDJavaScriptInsertionRule proto.InternalMessageInfo

type isCSDJavaScriptInsertionRule_DomainMatcherChoice interface {
	isCSDJavaScriptInsertionRule_DomainMatcherChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CSDJavaScriptInsertionRule_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,3,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type CSDJavaScriptInsertionRule_Domain struct {
	Domain *schema.DomainType `protobuf:"bytes,4,opt,name=domain,proto3,oneof" json:"domain,omitempty"`
}

func (*CSDJavaScriptInsertionRule_AnyDomain) isCSDJavaScriptInsertionRule_DomainMatcherChoice() {}
func (*CSDJavaScriptInsertionRule_Domain) isCSDJavaScriptInsertionRule_DomainMatcherChoice()    {}

func (m *CSDJavaScriptInsertionRule) GetDomainMatcherChoice() isCSDJavaScriptInsertionRule_DomainMatcherChoice {
	if m != nil {
		return m.DomainMatcherChoice
	}
	return nil
}

func (m *CSDJavaScriptInsertionRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CSDJavaScriptInsertionRule) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainMatcherChoice().(*CSDJavaScriptInsertionRule_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *CSDJavaScriptInsertionRule) GetDomain() *schema.DomainType {
	if x, ok := m.GetDomainMatcherChoice().(*CSDJavaScriptInsertionRule_Domain); ok {
		return x.Domain
	}
	return nil
}

func (m *CSDJavaScriptInsertionRule) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CSDJavaScriptInsertionRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CSDJavaScriptInsertionRule_AnyDomain)(nil),
		(*CSDJavaScriptInsertionRule_Domain)(nil),
	}
}

// MalwareProtectionPolicy
//
// x-displayName: "Malware Protection Policy"
// Malware Protection protects Web Apps and APIs, from malicious file uploads by scanning files in real-time.
type MalwareProtectionPolicy struct {
	// rules
	//
	// x-displayName: "Malware Detection Rules"
	// x-required
	// Configure the match criteria to trigger Malware Protection Scan
	MalwareProtectionRules []*MalwareProtectionRule `protobuf:"bytes,1,rep,name=malware_protection_rules,json=malwareProtectionRules,proto3" json:"malware_protection_rules,omitempty"`
}

func (m *MalwareProtectionPolicy) Reset()      { *m = MalwareProtectionPolicy{} }
func (*MalwareProtectionPolicy) ProtoMessage() {}
func (*MalwareProtectionPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{25}
}
func (m *MalwareProtectionPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MalwareProtectionPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MalwareProtectionPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MalwareProtectionPolicy.Merge(m, src)
}
func (m *MalwareProtectionPolicy) XXX_Size() int {
	return m.Size()
}
func (m *MalwareProtectionPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_MalwareProtectionPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_MalwareProtectionPolicy proto.InternalMessageInfo

func (m *MalwareProtectionPolicy) GetMalwareProtectionRules() []*MalwareProtectionRule {
	if m != nil {
		return m.MalwareProtectionRules
	}
	return nil
}

// MalwareProtectionRule
//
// x-displayName: "Malware Protection Rules"
// Configure the match criteria to trigger Malware Protection Scan
type MalwareProtectionRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// action
	//
	// x-displayName: "Action"
	// Report will identify and log threats, whereas Block will both log and block threats
	Action *schema.Action `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	// HTTP Methods
	//
	// x-displayName: "HTTP Methods"
	// Methods to be matched
	HttpMethods []schema.HttpMethod `protobuf:"varint,3,rep,packed,name=http_methods,json=httpMethods,proto3,enum=ves.io.schema.HttpMethod" json:"http_methods,omitempty"`
	// Protocol
	//
	// x-displayName: "Protocol"
	// Protocol to be matched
	Protocol schema.URLSchemeType `protobuf:"varint,4,opt,name=protocol,proto3,enum=ves.io.schema.URLSchemeType" json:"protocol,omitempty"`
	// Domain
	//
	// x-displayName: "Domain"
	// Domain to be matched
	Domain *schema.DomainMatcherType `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
	// Path
	//
	// x-displayName: "Path"
	// Path to be matched
	Path *schema.PathMatcherType `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *MalwareProtectionRule) Reset()      { *m = MalwareProtectionRule{} }
func (*MalwareProtectionRule) ProtoMessage() {}
func (*MalwareProtectionRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_66e2acf2273d8371, []int{26}
}
func (m *MalwareProtectionRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MalwareProtectionRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MalwareProtectionRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MalwareProtectionRule.Merge(m, src)
}
func (m *MalwareProtectionRule) XXX_Size() int {
	return m.Size()
}
func (m *MalwareProtectionRule) XXX_DiscardUnknown() {
	xxx_messageInfo_MalwareProtectionRule.DiscardUnknown(m)
}

var xxx_messageInfo_MalwareProtectionRule proto.InternalMessageInfo

func (m *MalwareProtectionRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *MalwareProtectionRule) GetAction() *schema.Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *MalwareProtectionRule) GetHttpMethods() []schema.HttpMethod {
	if m != nil {
		return m.HttpMethods
	}
	return nil
}

func (m *MalwareProtectionRule) GetProtocol() schema.URLSchemeType {
	if m != nil {
		return m.Protocol
	}
	return schema.HTTP
}

func (m *MalwareProtectionRule) GetDomain() *schema.DomainMatcherType {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *MalwareProtectionRule) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func init() {
	proto.RegisterEnum("ves.io.schema.views.common_security.MobileIdentifier", MobileIdentifier_name, MobileIdentifier_value)
	golang_proto.RegisterEnum("ves.io.schema.views.common_security.MobileIdentifier", MobileIdentifier_name, MobileIdentifier_value)
	proto.RegisterEnum("ves.io.schema.views.common_security.ShapeBotDefenseRegion", ShapeBotDefenseRegion_name, ShapeBotDefenseRegion_value)
	golang_proto.RegisterEnum("ves.io.schema.views.common_security.ShapeBotDefenseRegion", ShapeBotDefenseRegion_name, ShapeBotDefenseRegion_value)
	proto.RegisterEnum("ves.io.schema.views.common_security.URLScheme", URLScheme_name, URLScheme_value)
	golang_proto.RegisterEnum("ves.io.schema.views.common_security.URLScheme", URLScheme_name, URLScheme_value)
	proto.RegisterEnum("ves.io.schema.views.common_security.JavaScriptLocation", JavaScriptLocation_name, JavaScriptLocation_value)
	golang_proto.RegisterEnum("ves.io.schema.views.common_security.JavaScriptLocation", JavaScriptLocation_name, JavaScriptLocation_value)
	proto.RegisterType((*ShapeBotDefenseType)(nil), "ves.io.schema.views.common_security.ShapeBotDefenseType")
	golang_proto.RegisterType((*ShapeBotDefenseType)(nil), "ves.io.schema.views.common_security.ShapeBotDefenseType")
	proto.RegisterType((*BotDefenseAdvancedType)(nil), "ves.io.schema.views.common_security.BotDefenseAdvancedType")
	golang_proto.RegisterType((*BotDefenseAdvancedType)(nil), "ves.io.schema.views.common_security.BotDefenseAdvancedType")
	proto.RegisterType((*BotDefenseAdvancedPolicyType)(nil), "ves.io.schema.views.common_security.BotDefenseAdvancedPolicyType")
	golang_proto.RegisterType((*BotDefenseAdvancedPolicyType)(nil), "ves.io.schema.views.common_security.BotDefenseAdvancedPolicyType")
	proto.RegisterType((*ProtectedAppEndpointType)(nil), "ves.io.schema.views.common_security.ProtectedAppEndpointType")
	golang_proto.RegisterType((*ProtectedAppEndpointType)(nil), "ves.io.schema.views.common_security.ProtectedAppEndpointType")
	proto.RegisterType((*WebMobileTrafficType)(nil), "ves.io.schema.views.common_security.WebMobileTrafficType")
	golang_proto.RegisterType((*WebMobileTrafficType)(nil), "ves.io.schema.views.common_security.WebMobileTrafficType")
	proto.RegisterType((*Query)(nil), "ves.io.schema.views.common_security.Query")
	golang_proto.RegisterType((*Query)(nil), "ves.io.schema.views.common_security.Query")
	proto.RegisterType((*RequestBody)(nil), "ves.io.schema.views.common_security.RequestBody")
	golang_proto.RegisterType((*RequestBody)(nil), "ves.io.schema.views.common_security.RequestBody")
	proto.RegisterType((*BotAdvancedMobileSDKConfigType)(nil), "ves.io.schema.views.common_security.BotAdvancedMobileSDKConfigType")
	golang_proto.RegisterType((*BotAdvancedMobileSDKConfigType)(nil), "ves.io.schema.views.common_security.BotAdvancedMobileSDKConfigType")
	proto.RegisterType((*ShapeBotDefensePolicyType)(nil), "ves.io.schema.views.common_security.ShapeBotDefensePolicyType")
	golang_proto.RegisterType((*ShapeBotDefensePolicyType)(nil), "ves.io.schema.views.common_security.ShapeBotDefensePolicyType")
	proto.RegisterType((*AppEndpointType)(nil), "ves.io.schema.views.common_security.AppEndpointType")
	golang_proto.RegisterType((*AppEndpointType)(nil), "ves.io.schema.views.common_security.AppEndpointType")
	proto.RegisterType((*MobileSDKConfigType)(nil), "ves.io.schema.views.common_security.MobileSDKConfigType")
	golang_proto.RegisterType((*MobileSDKConfigType)(nil), "ves.io.schema.views.common_security.MobileSDKConfigType")
	proto.RegisterType((*MobileTrafficIdentifierType)(nil), "ves.io.schema.views.common_security.MobileTrafficIdentifierType")
	golang_proto.RegisterType((*MobileTrafficIdentifierType)(nil), "ves.io.schema.views.common_security.MobileTrafficIdentifierType")
	proto.RegisterType((*ShapeJavaScriptInsertAllType)(nil), "ves.io.schema.views.common_security.ShapeJavaScriptInsertAllType")
	golang_proto.RegisterType((*ShapeJavaScriptInsertAllType)(nil), "ves.io.schema.views.common_security.ShapeJavaScriptInsertAllType")
	proto.RegisterType((*ShapeJavaScriptInsertAllWithExceptionsType)(nil), "ves.io.schema.views.common_security.ShapeJavaScriptInsertAllWithExceptionsType")
	golang_proto.RegisterType((*ShapeJavaScriptInsertAllWithExceptionsType)(nil), "ves.io.schema.views.common_security.ShapeJavaScriptInsertAllWithExceptionsType")
	proto.RegisterType((*ShapeJavaScriptExclusionRule)(nil), "ves.io.schema.views.common_security.ShapeJavaScriptExclusionRule")
	golang_proto.RegisterType((*ShapeJavaScriptExclusionRule)(nil), "ves.io.schema.views.common_security.ShapeJavaScriptExclusionRule")
	proto.RegisterType((*ShapeJavaScriptInsertType)(nil), "ves.io.schema.views.common_security.ShapeJavaScriptInsertType")
	golang_proto.RegisterType((*ShapeJavaScriptInsertType)(nil), "ves.io.schema.views.common_security.ShapeJavaScriptInsertType")
	proto.RegisterType((*ShapeJavaScriptInsertionRule)(nil), "ves.io.schema.views.common_security.ShapeJavaScriptInsertionRule")
	golang_proto.RegisterType((*ShapeJavaScriptInsertionRule)(nil), "ves.io.schema.views.common_security.ShapeJavaScriptInsertionRule")
	proto.RegisterType((*DDoSMitigationRule)(nil), "ves.io.schema.views.common_security.DDoSMitigationRule")
	golang_proto.RegisterType((*DDoSMitigationRule)(nil), "ves.io.schema.views.common_security.DDoSMitigationRule")
	proto.RegisterType((*DDoSClientSource)(nil), "ves.io.schema.views.common_security.DDoSClientSource")
	golang_proto.RegisterType((*DDoSClientSource)(nil), "ves.io.schema.views.common_security.DDoSClientSource")
	proto.RegisterType((*SensitiveDataPolicySettings)(nil), "ves.io.schema.views.common_security.SensitiveDataPolicySettings")
	golang_proto.RegisterType((*SensitiveDataPolicySettings)(nil), "ves.io.schema.views.common_security.SensitiveDataPolicySettings")
	proto.RegisterType((*ClientSideDefenseType)(nil), "ves.io.schema.views.common_security.ClientSideDefenseType")
	golang_proto.RegisterType((*ClientSideDefenseType)(nil), "ves.io.schema.views.common_security.ClientSideDefenseType")
	proto.RegisterType((*ClientSideDefensePolicyType)(nil), "ves.io.schema.views.common_security.ClientSideDefensePolicyType")
	golang_proto.RegisterType((*ClientSideDefensePolicyType)(nil), "ves.io.schema.views.common_security.ClientSideDefensePolicyType")
	proto.RegisterType((*CSDJavaScriptInsertAllWithExceptionsType)(nil), "ves.io.schema.views.common_security.CSDJavaScriptInsertAllWithExceptionsType")
	golang_proto.RegisterType((*CSDJavaScriptInsertAllWithExceptionsType)(nil), "ves.io.schema.views.common_security.CSDJavaScriptInsertAllWithExceptionsType")
	proto.RegisterType((*CSDJavaScriptInsertType)(nil), "ves.io.schema.views.common_security.CSDJavaScriptInsertType")
	golang_proto.RegisterType((*CSDJavaScriptInsertType)(nil), "ves.io.schema.views.common_security.CSDJavaScriptInsertType")
	proto.RegisterType((*CSDJavaScriptInsertionRule)(nil), "ves.io.schema.views.common_security.CSDJavaScriptInsertionRule")
	golang_proto.RegisterType((*CSDJavaScriptInsertionRule)(nil), "ves.io.schema.views.common_security.CSDJavaScriptInsertionRule")
	proto.RegisterType((*MalwareProtectionPolicy)(nil), "ves.io.schema.views.common_security.MalwareProtectionPolicy")
	golang_proto.RegisterType((*MalwareProtectionPolicy)(nil), "ves.io.schema.views.common_security.MalwareProtectionPolicy")
	proto.RegisterType((*MalwareProtectionRule)(nil), "ves.io.schema.views.common_security.MalwareProtectionRule")
	golang_proto.RegisterType((*MalwareProtectionRule)(nil), "ves.io.schema.views.common_security.MalwareProtectionRule")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/common_security/security_types.proto", fileDescriptor_66e2acf2273d8371)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/common_security/security_types.proto", fileDescriptor_66e2acf2273d8371)
}

var fileDescriptor_66e2acf2273d8371 = []byte{
	// 4166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0x5d, 0x6c, 0x1b, 0x57,
	0x76, 0xd6, 0xe5, 0x9f, 0xa8, 0xa3, 0xbf, 0xd1, 0x48, 0x8a, 0x68, 0xda, 0xa6, 0x59, 0x3a, 0x4e,
	0x54, 0x81, 0xa6, 0x44, 0x4a, 0x76, 0x6c, 0x75, 0xa3, 0x8d, 0x46, 0x92, 0x57, 0x56, 0x2c, 0x5b,
	0x3b, 0x92, 0xeb, 0xdd, 0x34, 0xcd, 0x60, 0x48, 0x5e, 0x52, 0x63, 0x93, 0x1c, 0x7a, 0x66, 0x28,
	0x59, 0x28, 0x02, 0x18, 0xde, 0x66, 0x1b, 0x6c, 0x7f, 0xb6, 0x75, 0x7f, 0x51, 0x14, 0x68, 0x81,
	0xa2, 0xc0, 0x62, 0x1f, 0x5a, 0x60, 0x0b, 0x14, 0x68, 0x27, 0x68, 0x05, 0x17, 0x05, 0x02, 0xa3,
	0x68, 0x05, 0xb4, 0x0f, 0xe9, 0x3e, 0x2c, 0x12, 0x65, 0x81, 0xa6, 0xe8, 0x4b, 0x60, 0xf4, 0xa1,
	0x4f, 0x45, 0x71, 0x7f, 0x66, 0x38, 0xa4, 0x48, 0x9a, 0xb2, 0x9d, 0x2e, 0x76, 0xb7, 0x4f, 0x9c,
	0x9f, 0x73, 0xce, 0x3d, 0x73, 0xee, 0xf9, 0xce, 0x9c, 0xef, 0xde, 0x21, 0x5c, 0xda, 0xc1, 0x66,
	0x4a, 0xd3, 0xa7, 0xcd, 0xdc, 0x36, 0x2e, 0xab, 0xd3, 0x3b, 0x1a, 0xde, 0x35, 0xa7, 0x73, 0x7a,
	0xb9, 0xac, 0x57, 0x14, 0x13, 0xe7, 0x6a, 0x86, 0x66, 0xed, 0x4d, 0x3b, 0x07, 0x8a, 0xb5, 0x57,
	0xc5, 0x66, 0xaa, 0x6a, 0xe8, 0x96, 0x2e, 0x9e, 0x65, 0x9a, 0x29, 0xa6, 0x99, 0xa2, 0x9a, 0xa9,
	0x26, 0xcd, 0xe8, 0xf9, 0xa2, 0x66, 0x6d, 0xd7, 0xb2, 0xe4, 0xfa, 0x74, 0x51, 0x2f, 0xea, 0xd3,
	0x54, 0x37, 0x5b, 0x2b, 0xd0, 0x33, 0x7a, 0x42, 0x8f, 0x98, 0xcd, 0xe8, 0x99, 0xa2, 0xae, 0x17,
	0x4b, 0xb8, 0x2e, 0x65, 0x69, 0x65, 0x6c, 0x5a, 0x6a, 0xb9, 0xca, 0x05, 0x4e, 0x36, 0xba, 0xab,
	0x57, 0x2d, 0x4d, 0xaf, 0x70, 0x8f, 0xa2, 0xf1, 0xc6, 0x9b, 0x55, 0xbd, 0xa4, 0xe5, 0xf6, 0xa6,
	0x3d, 0x3e, 0x47, 0x27, 0x1b, 0x25, 0x4c, 0x6c, 0xec, 0x68, 0x39, 0xac, 0xb4, 0x90, 0x3c, 0xdf,
	0x49, 0x52, 0x31, 0x6a, 0x25, 0xdc, 0x20, 0x7e, 0xa2, 0x51, 0xdc, 0x7b, 0xeb, 0x54, 0x53, 0x84,
	0xd5, 0x92, 0x96, 0x57, 0x2d, 0xdc, 0xda, 0x67, 0x12, 0x45, 0xa5, 0xf1, 0xa9, 0xce, 0xb4, 0x9a,
	0x21, 0xcf, 0x00, 0x89, 0x1f, 0xfa, 0x61, 0x74, 0x73, 0x5b, 0xad, 0x62, 0x49, 0xb7, 0x96, 0x71,
	0x01, 0x57, 0x4c, 0xbc, 0xb5, 0x57, 0xc5, 0xa2, 0x09, 0x23, 0x06, 0x2e, 0x6a, 0x7a, 0x45, 0x2d,
	0x29, 0xb8, 0x92, 0xaf, 0xea, 0x5a, 0xc5, 0x8a, 0xa0, 0x38, 0x9a, 0x1c, 0xca, 0xcc, 0xa7, 0xba,
	0x98, 0xbc, 0x54, 0x93, 0x51, 0x99, 0x1a, 0x93, 0xe0, 0x6f, 0xfe, 0x63, 0xdf, 0x1f, 0x7c, 0x80,
	0x7c, 0x02, 0x92, 0x05, 0x67, 0x80, 0x15, 0x6e, 0x5f, 0x7c, 0x1b, 0x42, 0x2c, 0x46, 0x11, 0x5f,
	0x1c, 0x4d, 0xf6, 0x67, 0x16, 0x9e, 0x65, 0xa4, 0x0d, 0x6a, 0x81, 0x3c, 0x84, 0x14, 0x38, 0xb0,
	0x11, 0x92, 0xb9, 0x4d, 0xf1, 0x32, 0xf4, 0x92, 0x8c, 0xd0, 0x6b, 0x56, 0xc4, 0x1f, 0x47, 0x93,
	0x83, 0xd2, 0x99, 0x7d, 0x1b, 0xa1, 0xef, 0xdb, 0x28, 0x90, 0x9e, 0x99, 0x99, 0xf9, 0x6f, 0x1b,
	0xf5, 0xbc, 0xff, 0x01, 0xea, 0x21, 0x0e, 0x86, 0xa6, 0x02, 0x91, 0x8f, 0xff, 0xd5, 0x2f, 0x3b,
	0xf2, 0xe2, 0x15, 0x18, 0xc5, 0x15, 0x35, 0x5b, 0xc2, 0x4a, 0x4e, 0x37, 0x4c, 0xc5, 0xac, 0x55,
	0xab, 0xba, 0x61, 0x45, 0x82, 0xd4, 0xcb, 0xb1, 0x26, 0x2f, 0x57, 0xca, 0x55, 0x6b, 0x6f, 0xb5,
	0x47, 0x1e, 0x61, 0x2a, 0x4b, 0xba, 0x61, 0x6e, 0x32, 0x05, 0x71, 0x15, 0xc6, 0xf2, 0x9a, 0x79,
	0xd4, 0x50, 0xa8, 0xa3, 0x21, 0x91, 0xeb, 0x78, 0x2c, 0x49, 0xaf, 0xc2, 0xa8, 0xd7, 0x82, 0x92,
	0xdb, 0xd6, 0xb5, 0x1c, 0x16, 0x85, 0x7d, 0x1b, 0x05, 0x3f, 0xb4, 0x11, 0x3a, 0xb0, 0x51, 0xe0,
	0x73, 0x1b, 0xa1, 0xb5, 0x40, 0x38, 0x20, 0x04, 0x13, 0x7f, 0xed, 0x83, 0x97, 0xea, 0x21, 0x5a,
	0xcc, 0xef, 0xa8, 0x95, 0x1c, 0xce, 0xd3, 0x99, 0xfe, 0x05, 0xf0, 0xef, 0xe2, 0x2c, 0x9d, 0xdb,
	0xfe, 0x4c, 0xa2, 0x65, 0xc4, 0x6f, 0x64, 0x6f, 0xe3, 0x9c, 0x25, 0xe3, 0x02, 0x8d, 0xea, 0xb9,
	0xef, 0xbe, 0x1b, 0xcb, 0xea, 0x96, 0x92, 0x67, 0xc6, 0x14, 0xb5, 0x5a, 0x55, 0xb4, 0x4a, 0xc1,
	0x50, 0x4d, 0xcb, 0xa8, 0xe5, 0xac, 0x9a, 0x81, 0xef, 0x7f, 0x80, 0x90, 0x4c, 0xac, 0x8a, 0x2a,
	0x84, 0xca, 0x7a, 0x56, 0x2b, 0x61, 0x3e, 0xa3, 0x2f, 0xd0, 0x3e, 0x37, 0x2c, 0x2a, 0x6e, 0xd2,
	0xf8, 0xe9, 0x10, 0x8b, 0x5d, 0x25, 0xcd, 0xd1, 0x60, 0xb4, 0xcb, 0x9b, 0xc4, 0x3f, 0x05, 0xe0,
	0x54, 0x27, 0x71, 0xf1, 0xcf, 0x10, 0x4c, 0x10, 0x34, 0xe1, 0x9c, 0x85, 0xf3, 0xd4, 0x5d, 0x07,
	0x31, 0x66, 0x04, 0xc5, 0xfd, 0x93, 0xfd, 0x99, 0xd7, 0xbb, 0xf2, 0x69, 0xc3, 0xb1, 0xb1, 0x58,
	0xad, 0x3a, 0x98, 0xa0, 0xfe, 0xa4, 0x88, 0x3f, 0x34, 0x31, 0x1f, 0x22, 0xbf, 0x70, 0x9f, 0x1e,
	0x06, 0x1f, 0x22, 0x5f, 0xd8, 0x3d, 0x8a, 0xa0, 0xc3, 0x8f, 0xff, 0xc1, 0x1f, 0x7a, 0xf8, 0x01,
	0x45, 0xd6, 0x78, 0xb5, 0x85, 0x25, 0x53, 0x94, 0x40, 0xb8, 0x6d, 0x2a, 0x79, 0x7d, 0xb7, 0x52,
	0xd2, 0xd5, 0xbc, 0x52, 0x55, 0xad, 0x6d, 0x3a, 0x2d, 0x7d, 0x52, 0xe4, 0xfb, 0x36, 0x02, 0x5e,
	0xb9, 0x53, 0xb7, 0x4d, 0x6a, 0xd5, 0xf0, 0x7f, 0xe6, 0x43, 0xf2, 0xd0, 0x6d, 0x73, 0x99, 0x2b,
	0x6c, 0xa8, 0xd6, 0xb6, 0xb8, 0x0c, 0x4e, 0x36, 0x2a, 0x2c, 0xfe, 0x8a, 0x99, 0xbf, 0x13, 0x09,
	0x74, 0xcc, 0x5f, 0x81, 0x6b, 0xac, 0x53, 0x85, 0xcd, 0xfc, 0x1d, 0xf1, 0x2e, 0x8c, 0xd4, 0xb5,
	0x95, 0x9c, 0x5e, 0x29, 0x68, 0x45, 0x8e, 0xa6, 0xa5, 0x6e, 0xa7, 0xcf, 0x99, 0x08, 0x6e, 0x75,
	0xf9, 0xcd, 0x25, 0x6a, 0x86, 0x04, 0x6c, 0xb5, 0x47, 0x1e, 0x2e, 0x3b, 0x83, 0xb1, 0xcb, 0xf3,
	0xbf, 0xf8, 0xc8, 0x46, 0x5f, 0x87, 0x53, 0x30, 0xe1, 0x46, 0x39, 0xbe, 0x58, 0xad, 0xc6, 0xeb,
	0xd1, 0x41, 0x69, 0x38, 0x0b, 0xb1, 0x5b, 0x38, 0x1b, 0x5f, 0x2a, 0x69, 0xb8, 0x62, 0xc5, 0xd7,
	0xd4, 0x1d, 0x75, 0x33, 0x67, 0x68, 0x55, 0x2b, 0xbe, 0x89, 0x2d, 0x4b, 0xab, 0x14, 0x4d, 0x11,
	0x65, 0x60, 0x0c, 0x86, 0xd9, 0x90, 0x9e, 0xab, 0xb3, 0xd2, 0xcb, 0x8d, 0x4f, 0xc4, 0xd0, 0x38,
	0xbc, 0x6f, 0x23, 0x92, 0x4b, 0xfe, 0x43, 0x1b, 0xf9, 0xe7, 0x92, 0x17, 0xd6, 0x02, 0x61, 0xbf,
	0x10, 0x48, 0xbc, 0xd7, 0x0f, 0x91, 0x76, 0x73, 0x2d, 0xce, 0x43, 0xb8, 0x8c, 0x2d, 0x35, 0xaf,
	0x5a, 0x2a, 0xc7, 0x64, 0xac, 0x29, 0x22, 0xeb, 0xd8, 0x34, 0xd5, 0x22, 0x5e, 0xc7, 0x96, 0x4a,
	0x34, 0x64, 0x57, 0x5e, 0xbc, 0x00, 0xa0, 0x56, 0xf6, 0x94, 0xbc, 0x5e, 0x56, 0xb5, 0x0a, 0x87,
	0x43, 0xbb, 0x49, 0xe9, 0x53, 0x2b, 0x7b, 0xcb, 0x54, 0x50, 0xbc, 0x0c, 0x21, 0xae, 0xc2, 0xe6,
	0xf1, 0x44, 0x93, 0x0a, 0x13, 0x63, 0xc8, 0x20, 0x35, 0x65, 0xb5, 0x47, 0xe6, 0x0a, 0x62, 0x06,
	0x02, 0x34, 0x8d, 0x82, 0x2d, 0x3d, 0x25, 0x19, 0xb3, 0xae, 0x5a, 0xb9, 0x6d, 0x6c, 0x50, 0x4f,
	0xa9, 0xac, 0xf8, 0x06, 0x04, 0xef, 0xd6, 0xb0, 0xb1, 0x17, 0x09, 0x51, 0x6c, 0x4c, 0x75, 0x35,
	0xe1, 0x5f, 0x25, 0x1a, 0x32, 0x53, 0x14, 0x37, 0x61, 0xc0, 0xc0, 0x77, 0x6b, 0xd8, 0xb4, 0x94,
	0xac, 0x9e, 0xdf, 0x8b, 0xf4, 0x52, 0x43, 0x33, 0x5d, 0x19, 0x92, 0x99, 0xa2, 0xa4, 0xe7, 0xf7,
	0xe4, 0x7e, 0xa3, 0x7e, 0x22, 0xee, 0xc0, 0xc0, 0xb6, 0x65, 0x55, 0x95, 0x32, 0xb6, 0xb6, 0xf5,
	0xbc, 0x19, 0x09, 0xc7, 0xfd, 0x93, 0x43, 0x99, 0x53, 0x4d, 0x46, 0x25, 0xdd, 0x5a, 0xb5, 0xac,
	0xea, 0x3a, 0x15, 0x92, 0x2e, 0x10, 0xa4, 0x88, 0x0f, 0xd1, 0x70, 0x62, 0xf0, 0x01, 0x02, 0x01,
	0x45, 0x43, 0x3d, 0xc8, 0x1f, 0x08, 0x86, 0x1c, 0x58, 0x0a, 0xa1, 0x56, 0x50, 0x95, 0xfb, 0xb7,
	0x5d, 0x13, 0x26, 0x99, 0xb4, 0x5d, 0x9c, 0x55, 0x72, 0x34, 0xe9, 0x22, 0xd0, 0x61, 0xd2, 0x90,
	0xdc, 0xb7, 0x8b, 0xb3, 0x2c, 0x3b, 0xc5, 0x9f, 0x83, 0x41, 0x9e, 0x70, 0x5c, 0xb3, 0xbf, 0xa3,
	0xe6, 0x00, 0x13, 0xe6, 0xca, 0x45, 0x18, 0x21, 0x63, 0x36, 0x1a, 0x18, 0xa0, 0x06, 0x2e, 0x77,
	0x15, 0xc5, 0x5b, 0x38, 0xcb, 0x40, 0xb0, 0x65, 0xa8, 0x85, 0x82, 0x96, 0xa3, 0xa8, 0x43, 0xf2,
	0xf0, 0xae, 0x73, 0x9d, 0x0f, 0xb4, 0x0a, 0x63, 0xb5, 0x4a, 0x1e, 0x17, 0xb4, 0x0a, 0xce, 0x2b,
	0x85, 0x92, 0xbe, 0xab, 0x94, 0xd4, 0x2c, 0x2e, 0x45, 0x86, 0x3a, 0x38, 0xeb, 0x93, 0x45, 0x57,
	0xe7, 0x4a, 0x49, 0xdf, 0xbd, 0x46, 0x34, 0xc4, 0x5b, 0x00, 0x1e, 0xfd, 0x61, 0xaa, 0x7f, 0xf1,
	0xe8, 0xe4, 0xf0, 0x2a, 0xed, 0xea, 0x2d, 0xa9, 0x16, 0x2e, 0xea, 0x86, 0x86, 0xcd, 0x25, 0x8a,
	0x49, 0xea, 0xa8, 0x4f, 0xee, 0x2b, 0x38, 0x02, 0xf3, 0xff, 0xe9, 0x7b, 0xb2, 0x30, 0x96, 0x4e,
	0x66, 0x92, 0xb3, 0xc9, 0xb9, 0xe4, 0x85, 0xe4, 0xc5, 0xe4, 0x6b, 0xc9, 0x4b, 0xc9, 0xf4, 0x6c,
	0xf2, 0xf2, 0x63, 0x1b, 0xfd, 0xb3, 0x0f, 0x26, 0x20, 0x70, 0x5d, 0x2d, 0xe3, 0xe8, 0x30, 0x0c,
	0x3a, 0x38, 0x4b, 0x55, 0xd4, 0x32, 0x86, 0x2d, 0x08, 0x31, 0x60, 0x4c, 0xad, 0xc1, 0x2a, 0x8c,
	0x78, 0xa1, 0x97, 0xf1, 0x2f, 0x56, 0xf6, 0x60, 0x0c, 0x44, 0x76, 0x9a, 0xc2, 0xf7, 0xd4, 0x9c,
	0xa5, 0xec, 0xa8, 0xa5, 0x1a, 0x86, 0xd3, 0xee, 0x55, 0x03, 0x17, 0xf1, 0x3d, 0x76, 0x55, 0xec,
	0x8d, 0x06, 0x65, 0x72, 0x0a, 0x27, 0x20, 0x40, 0x50, 0x33, 0x35, 0x02, 0xc3, 0x30, 0xc8, 0xc0,
	0x95, 0x09, 0x92, 0x2b, 0x26, 0x44, 0x20, 0x48, 0x51, 0x20, 0x0d, 0x73, 0x00, 0x09, 0xc1, 0x44,
	0x80, 0xba, 0xf2, 0x0a, 0x0c, 0xf0, 0xb4, 0x8e, 0x93, 0x54, 0x96, 0x5e, 0x6a, 0xc4, 0x87, 0x2b,
	0x97, 0x85, 0x7e, 0x5e, 0xdb, 0x48, 0x18, 0xa6, 0x36, 0xe1, 0xab, 0xc4, 0xef, 0x7a, 0xf6, 0x65,
	0xfc, 0xb7, 0x70, 0x16, 0x26, 0x9a, 0x32, 0x2b, 0x13, 0x62, 0x53, 0x0a, 0x67, 0x5b, 0x64, 0x4d,
	0x66, 0x88, 0x54, 0x4c, 0xb5, 0x92, 0x8f, 0x73, 0xa1, 0xd3, 0xd0, 0xcb, 0x33, 0x5b, 0x12, 0x1b,
	0x11, 0x25, 0xc0, 0x0c, 0x92, 0x26, 0x61, 0x9c, 0x3d, 0xbe, 0x52, 0x66, 0x85, 0xc1, 0x5b, 0x2b,
	0xfd, 0x07, 0x36, 0xf2, 0x91, 0x5a, 0x39, 0x9b, 0x9c, 0x93, 0xa6, 0x61, 0x82, 0xbc, 0x4a, 0x2d,
	0x96, 0x60, 0x94, 0x3d, 0x38, 0xb2, 0x63, 0xfb, 0x36, 0x82, 0x03, 0x1b, 0xf5, 0x1d, 0xda, 0x28,
	0x9c, 0x9e, 0x49, 0xa6, 0xd3, 0xc9, 0x74, 0x46, 0x3a, 0x0d, 0x23, 0xf5, 0x0c, 0x71, 0x44, 0xc3,
	0xfb, 0x36, 0x1a, 0x3a, 0xb0, 0xd1, 0xe0, 0x5a, 0x20, 0xec, 0x13, 0xfc, 0x6b, 0x81, 0x70, 0x9f,
	0x00, 0x6b, 0x81, 0xf0, 0xa0, 0x30, 0x94, 0xf8, 0x03, 0x1f, 0x8c, 0xb5, 0x4a, 0x64, 0xf1, 0x1a,
	0x84, 0xb6, 0xb1, 0x9a, 0xc7, 0x06, 0xaf, 0xc0, 0xc9, 0xa6, 0x3c, 0x63, 0x8d, 0x41, 0x6a, 0x95,
	0xca, 0x78, 0x0a, 0x9c, 0xa4, 0x9a, 0x5a, 0x4e, 0x0a, 0x7d, 0x66, 0x23, 0x14, 0x41, 0x32, 0xb7,
	0x21, 0x5e, 0x87, 0x5e, 0x76, 0x64, 0x46, 0x7c, 0xb4, 0x50, 0x3d, 0x9b, 0x39, 0xc7, 0x88, 0x98,
	0x75, 0x5f, 0x35, 0x5a, 0x1e, 0x57, 0x2c, 0xad, 0xa0, 0x61, 0x83, 0x16, 0xfb, 0xa1, 0xcc, 0x85,
	0xae, 0xc0, 0xcb, 0x1e, 0xf8, 0xaa, 0xab, 0x2c, 0x0b, 0xe5, 0xa6, 0x2b, 0x89, 0xbf, 0xf0, 0xf3,
	0x64, 0x13, 0x45, 0xa0, 0xb9, 0x43, 0x23, 0xd1, 0x27, 0xd3, 0x63, 0x71, 0x16, 0xfa, 0x3d, 0x29,
	0xcd, 0x7b, 0x08, 0x81, 0x74, 0xd0, 0xa4, 0xc8, 0xf5, 0x1a, 0x41, 0x01, 0x45, 0xee, 0xfb, 0x56,
	0x7b, 0x64, 0xa0, 0x62, 0x3f, 0x4f, 0x53, 0xfc, 0x22, 0xf4, 0x7b, 0x32, 0x9e, 0x3a, 0xdc, 0x27,
	0x8d, 0x3a, 0x4a, 0x60, 0x84, 0xa9, 0xd2, 0x3e, 0x7d, 0xbd, 0x00, 0x95, 0x64, 0x7a, 0xaf, 0xc3,
	0x50, 0x6e, 0x1b, 0xe7, 0xee, 0x28, 0x55, 0x03, 0x9b, 0xb8, 0x92, 0xc3, 0x4f, 0xe9, 0x36, 0x06,
	0xa9, 0xf4, 0x06, 0x17, 0x9e, 0xff, 0x5b, 0xf4, 0x64, 0xc1, 0x9f, 0x4e, 0x5e, 0x78, 0x64, 0xa3,
	0x38, 0xc4, 0x60, 0x82, 0x3e, 0x55, 0x7c, 0x43, 0x35, 0xd4, 0x32, 0xb6, 0xb0, 0x11, 0xe7, 0xf1,
	0x16, 0x89, 0xcc, 0x63, 0x1b, 0x7d, 0x1b, 0xc1, 0x10, 0x47, 0x7c, 0x88, 0x3d, 0x39, 0x7c, 0x0d,
	0x80, 0x7a, 0xc2, 0x40, 0x43, 0xc0, 0x3e, 0xd6, 0xf0, 0xfc, 0x99, 0xe0, 0x0a, 0x39, 0x21, 0x57,
	0x3d, 0x0f, 0x98, 0xe1, 0x80, 0x8e, 0x36, 0xbb, 0x9f, 0x09, 0x3b, 0xbe, 0xc1, 0x59, 0x08, 0x52,
	0xcb, 0x99, 0x68, 0x83, 0xc1, 0x06, 0x3b, 0xd2, 0x19, 0x00, 0x7a, 0x40, 0x11, 0x20, 0x8e, 0xec,
	0xdb, 0xc8, 0x77, 0x60, 0xa3, 0xe0, 0xa1, 0x8d, 0x82, 0xb4, 0x66, 0xad, 0x05, 0xc2, 0x41, 0x21,
	0x94, 0xf8, 0x81, 0x0f, 0xfa, 0x3d, 0xef, 0xb6, 0xe3, 0xcd, 0x9b, 0xff, 0x59, 0xe6, 0xcd, 0xdf,
	0x71, 0xde, 0xe6, 0xbf, 0xc3, 0x02, 0x3f, 0xf7, 0xc8, 0x46, 0xaf, 0xc2, 0x39, 0x88, 0x79, 0x2b,
	0x54, 0xeb, 0xf8, 0xcf, 0x3d, 0xb6, 0x91, 0x79, 0x24, 0xfc, 0x5f, 0x6a, 0x08, 0x7f, 0x0a, 0x92,
	0xc7, 0x0a, 0x7f, 0x57, 0x21, 0x3e, 0xdd, 0x10, 0xe2, 0x61, 0x1e, 0xe2, 0x00, 0xa9, 0x44, 0x99,
	0xe4, 0x2c, 0xa7, 0x50, 0xbf, 0x8b, 0x20, 0xd6, 0xb9, 0xed, 0x24, 0xa4, 0xf9, 0x28, 0x32, 0x59,
	0x09, 0x79, 0xe3, 0x18, 0xc8, 0xe4, 0xa5, 0xa8, 0x0e, 0x47, 0xd6, 0x7a, 0x11, 0xb6, 0xda, 0x02,
	0xaa, 0xff, 0x15, 0x86, 0x13, 0x6d, 0x29, 0xb0, 0xf8, 0x47, 0x4f, 0xe5, 0x26, 0x73, 0x5d, 0x79,
	0xf6, 0x05, 0x51, 0x92, 0x55, 0x18, 0x71, 0xe8, 0xc4, 0x6d, 0x53, 0xd1, 0x2a, 0x26, 0x36, 0xac,
	0x4e, 0xf8, 0x66, 0x51, 0x20, 0xfd, 0x3d, 0x57, 0x5b, 0x33, 0xaf, 0x52, 0x25, 0xd1, 0x80, 0x51,
	0xd7, 0x82, 0xa2, 0x96, 0x4a, 0x4a, 0x55, 0x2d, 0x62, 0x93, 0x37, 0xa6, 0x8b, 0xdd, 0x2f, 0x24,
	0xd4, 0xbb, 0x7e, 0x66, 0x78, 0xb1, 0x54, 0xe2, 0x94, 0x42, 0xb8, 0x6d, 0xba, 0x97, 0x36, 0x88,
	0x71, 0xf1, 0xd7, 0x11, 0x44, 0x5b, 0x0c, 0xaa, 0xe0, 0x7b, 0x39, 0x5c, 0x75, 0x58, 0xfd, 0x8d,
	0xe7, 0x1a, 0xfb, 0x96, 0x66, 0x6d, 0xaf, 0x50, 0x73, 0x9a, 0x5e, 0x31, 0xb9, 0x27, 0x2f, 0x35,
	0x7b, 0xc2, 0x24, 0x44, 0x0b, 0x44, 0xd7, 0x1d, 0x4d, 0xaf, 0xd0, 0x95, 0x26, 0x33, 0xd2, 0x7b,
	0xdc, 0xb5, 0x94, 0x66, 0x37, 0xea, 0xe9, 0xe7, 0x8d, 0x82, 0xa6, 0x57, 0x64, 0x62, 0xff, 0x85,
	0xd0, 0xca, 0x2b, 0x30, 0x7c, 0x5b, 0xdd, 0x51, 0x4d, 0x3a, 0xaa, 0x52, 0xd6, 0xf3, 0x98, 0xf6,
	0xb3, 0x43, 0x99, 0xd3, 0x4d, 0x6e, 0xd7, 0x7d, 0x5b, 0xd7, 0xf3, 0x58, 0x1e, 0xaa, 0x6b, 0x91,
	0xf3, 0x36, 0xf4, 0xb4, 0xaf, 0x63, 0x6b, 0x7c, 0x94, 0x9e, 0x16, 0x5a, 0xd1, 0x53, 0xd6, 0x99,
	0x5f, 0x3a, 0x06, 0x8e, 0x1b, 0x39, 0x29, 0x3a, 0xca, 0x49, 0xdf, 0x7e, 0x64, 0xa3, 0xaf, 0x3d,
	0x85, 0x93, 0xc6, 0x60, 0xcc, 0x43, 0x44, 0xdd, 0xd0, 0x8b, 0xa1, 0x0c, 0x69, 0x7b, 0x66, 0x21,
	0x02, 0xa3, 0x0e, 0x1d, 0x5d, 0x7e, 0xd3, 0x43, 0x49, 0x2f, 0x49, 0x3f, 0x0b, 0x22, 0x89, 0x8e,
	0xc2, 0x83, 0xca, 0x1b, 0xa2, 0xd1, 0x7d, 0x1b, 0x05, 0x39, 0x27, 0xed, 0x65, 0xed, 0xee, 0x9c,
	0x74, 0xae, 0x15, 0x7b, 0x15, 0xf6, 0x6d, 0xd4, 0x77, 0x60, 0xa3, 0xf0, 0xa1, 0x8d, 0x02, 0x97,
	0x93, 0xe9, 0x19, 0x46, 0x5f, 0xd7, 0x02, 0xe1, 0xb0, 0xd0, 0x97, 0xf8, 0x8d, 0x61, 0x18, 0x7e,
	0x91, 0xdc, 0xb5, 0xd6, 0x44, 0xbf, 0x7c, 0x5d, 0xd0, 0xaf, 0x39, 0x92, 0x51, 0x23, 0x0f, 0xd1,
	0x50, 0x62, 0xe0, 0x01, 0xea, 0x13, 0x50, 0x34, 0x48, 0xe8, 0x17, 0xb8, 0xec, 0x2b, 0xf8, 0x74,
	0xf6, 0xb5, 0x06, 0x61, 0xba, 0x10, 0x9a, 0xd3, 0x4b, 0xbc, 0x87, 0x4a, 0x75, 0x35, 0xc3, 0x37,
	0xe5, 0x6b, 0x9b, 0xe4, 0x3e, 0x96, 0x5d, 0x7d, 0x97, 0x0c, 0x07, 0x8e, 0x41, 0x86, 0x1b, 0x29,
	0x7b, 0xe8, 0xf8, 0x94, 0xbd, 0xf7, 0xb8, 0x94, 0x7d, 0x92, 0xad, 0xf7, 0x75, 0xc6, 0x04, 0x5d,
	0xbc, 0x4b, 0xb9, 0x8b, 0x77, 0x9d, 0x59, 0xa9, 0xb3, 0x12, 0xf7, 0x16, 0xe3, 0x12, 0x5c, 0xa7,
	0xff, 0xf9, 0xe9, 0x64, 0x9f, 0x4b, 0x27, 0xc5, 0xeb, 0x00, 0x65, 0xcd, 0xd2, 0x8a, 0x2a, 0x49,
	0x7e, 0x4e, 0x55, 0x53, 0xad, 0xfb, 0x68, 0xe7, 0x65, 0xb8, 0xee, 0xca, 0x2f, 0xe6, 0x68, 0xb5,
	0xf2, 0x58, 0xf8, 0x31, 0x20, 0xa6, 0xe2, 0x02, 0x0c, 0xab, 0x25, 0x62, 0xb9, 0xa8, 0xeb, 0x79,
	0x25, 0xab, 0x5b, 0x66, 0x64, 0xb4, 0x83, 0x77, 0x7e, 0x79, 0x90, 0x8a, 0x7f, 0x45, 0xd7, 0xf3,
	0x92, 0x6e, 0x99, 0xa4, 0x16, 0xf2, 0x07, 0xc6, 0x1e, 0x13, 0x23, 0x1d, 0x4d, 0x08, 0x8e, 0x86,
	0x6b, 0xe5, 0x1d, 0x18, 0xa0, 0x64, 0x53, 0xa9, 0x92, 0x96, 0xcd, 0x8c, 0x8c, 0xd1, 0xa6, 0x61,
	0xba, 0x75, 0xe8, 0x69, 0x73, 0xed, 0xf6, 0x76, 0x5e, 0x2a, 0x53, 0x07, 0xa5, 0x20, 0xf7, 0xdf,
	0x75, 0xc5, 0x4c, 0x71, 0xbd, 0xce, 0x8e, 0xc6, 0xa9, 0xe9, 0x57, 0xbb, 0x65, 0x47, 0x5e, 0x93,
	0x8e, 0x8d, 0xf9, 0xbf, 0x0a, 0x3c, 0x59, 0x88, 0x12, 0x36, 0x9f, 0x9e, 0x4d, 0xce, 0x26, 0x2f,
	0x24, 0xe7, 0x92, 0x99, 0x99, 0x64, 0x26, 0x4d, 0x28, 0x7d, 0x26, 0x99, 0xbe, 0xf8, 0xd8, 0x46,
	0xbf, 0x13, 0x68, 0xcf, 0xe9, 0x3b, 0x90, 0xd7, 0xc0, 0x0c, 0x82, 0x08, 0x84, 0x37, 0x38, 0xd8,
	0xa3, 0x03, 0xf5, 0xc2, 0x11, 0x47, 0x50, 0x73, 0x17, 0x03, 0xee, 0x80, 0xd6, 0xfd, 0x62, 0xc0,
	0x19, 0x18, 0xe5, 0x57, 0xcd, 0x5a, 0xa1, 0xa0, 0x39, 0xab, 0x01, 0xe1, 0x68, 0x68, 0x93, 0x9e,
	0x3f, 0x6d, 0xb5, 0xe0, 0x2b, 0x7c, 0xb5, 0xe0, 0xcb, 0xf0, 0x3a, 0x4c, 0x40, 0x3f, 0xa9, 0x28,
	0xa9, 0xaa, 0x81, 0x0b, 0xda, 0x3d, 0x62, 0x63, 0x83, 0x1e, 0x41, 0x3f, 0xf4, 0xb1, 0x1b, 0xaa,
	0xb5, 0x0d, 0xe3, 0x00, 0xf4, 0x84, 0x9a, 0xab, 0x1b, 0x7a, 0x15, 0x06, 0x3c, 0xc4, 0xc8, 0x14,
	0x90, 0x34, 0xde, 0x38, 0xef, 0x82, 0x3f, 0xe1, 0xbf, 0x83, 0xf7, 0x20, 0x06, 0xbd, 0x6c, 0x26,
	0x88, 0xcc, 0x88, 0x3b, 0x77, 0x82, 0x9f, 0x2f, 0x31, 0x94, 0x60, 0xa4, 0x8e, 0xbb, 0x38, 0x03,
	0xde, 0xd4, 0x2d, 0xb8, 0x09, 0x13, 0x30, 0x5c, 0x87, 0x5f, 0xaa, 0x50, 0x52, 0x8b, 0x99, 0xc0,
	0x95, 0x92, 0x5a, 0x84, 0x13, 0x20, 0x78, 0x6e, 0x64, 0x4b, 0x7a, 0xee, 0x4e, 0x26, 0x28, 0x91,
	0x1f, 0x12, 0x1e, 0xcf, 0x2d, 0x03, 0xe7, 0x35, 0x03, 0xe7, 0xac, 0x4c, 0x58, 0xe6, 0x47, 0x70,
	0x15, 0x7a, 0x97, 0xb6, 0xd5, 0x4a, 0x05, 0x97, 0xa6, 0x16, 0x08, 0x51, 0xa0, 0xa5, 0x8d, 0xad,
	0x62, 0x08, 0x4e, 0xf1, 0x72, 0x97, 0x2f, 0x4e, 0x79, 0xcb, 0x53, 0xf3, 0xba, 0x45, 0xe7, 0x85,
	0x89, 0x10, 0x67, 0x5c, 0xfe, 0x8b, 0xc9, 0xd7, 0xa4, 0x54, 0xfb, 0x85, 0x89, 0x51, 0xcf, 0x2b,
	0xb3, 0x97, 0xbc, 0x32, 0x93, 0xe9, 0xb4, 0x94, 0x68, 0xb5, 0x2e, 0x31, 0x78, 0x60, 0xa3, 0x41,
	0xc2, 0xe1, 0xd2, 0x17, 0x92, 0xe9, 0x39, 0xe9, 0x2c, 0x0c, 0x11, 0x88, 0x66, 0x75, 0xf7, 0x3d,
	0x4d, 0x88, 0xde, 0xc8, 0x81, 0x8d, 0x44, 0x2a, 0x74, 0x39, 0x99, 0x7e, 0x8d, 0x11, 0x3d, 0xf6,
	0xfa, 0x65, 0x2b, 0x18, 0x6b, 0x81, 0xb0, 0x28, 0x8c, 0xae, 0x05, 0xc2, 0x82, 0x30, 0x92, 0xf8,
	0x18, 0x39, 0x9d, 0x40, 0x23, 0x29, 0xd9, 0x02, 0xd1, 0xc0, 0xb4, 0x33, 0x63, 0x73, 0xa5, 0xd4,
	0x69, 0xa1, 0xf4, 0x0a, 0x69, 0xd0, 0xee, 0x9d, 0xd7, 0xf5, 0xf2, 0x5b, 0x2b, 0x6f, 0x95, 0xde,
	0xfc, 0x8c, 0xf7, 0xf4, 0x41, 0xc3, 0xff, 0xa1, 0x7b, 0x34, 0x79, 0xdf, 0x27, 0x0b, 0xcc, 0x02,
	0x9b, 0x79, 0x02, 0x9d, 0xd6, 0x54, 0xc7, 0xf7, 0x05, 0x53, 0x9d, 0x5f, 0x82, 0x93, 0x1d, 0xd4,
	0xc4, 0xb7, 0xeb, 0xa5, 0x04, 0x3d, 0xc3, 0x42, 0xcb, 0x98, 0x5b, 0x4f, 0xe2, 0x9e, 0x6e, 0xc1,
	0x31, 0x99, 0x78, 0x1f, 0xc1, 0xa9, 0x4e, 0x0c, 0x41, 0xdc, 0x86, 0x51, 0x4f, 0x0f, 0x5b, 0xd2,
	0x73, 0xec, 0x5d, 0xc5, 0x36, 0x4d, 0x5f, 0xeb, 0x2a, 0x28, 0x75, 0xd3, 0xd7, 0xb8, 0xba, 0x2c,
	0xd6, 0x6d, 0x3a, 0xd7, 0x12, 0x7f, 0xec, 0x83, 0xa9, 0xee, 0x09, 0xc3, 0xff, 0x9d, 0x63, 0xe2,
	0x37, 0x11, 0x0c, 0xe0, 0x7b, 0xb9, 0x52, 0x2d, 0x8f, 0x95, 0x92, 0x66, 0x5a, 0x7c, 0xc1, 0xeb,
	0x99, 0xe8, 0xd7, 0x0a, 0xb1, 0x63, 0x72, 0x96, 0x21, 0xc5, 0x5b, 0x70, 0xcd, 0x46, 0x86, 0xd9,
	0xcf, 0x07, 0xbe, 0xa6, 0x99, 0x56, 0xe2, 0xb7, 0x02, 0x47, 0x26, 0xab, 0xc1, 0xde, 0x4f, 0xfe,
	0x36, 0xcb, 0xfc, 0x0f, 0xd0, 0x63, 0x1b, 0xfd, 0x1b, 0x6a, 0xff, 0xb2, 0xfb, 0x31, 0x7f, 0x67,
	0x75, 0xbf, 0x94, 0xcc, 0x96, 0x7e, 0x13, 0xdf, 0xf3, 0xf1, 0x85, 0x92, 0x56, 0xfc, 0x56, 0xfc,
	0x15, 0x04, 0x41, 0xc6, 0x97, 0x9f, 0x23, 0x67, 0x1b, 0x98, 0xf1, 0xb1, 0xd7, 0x48, 0xd8, 0xf8,
	0xe2, 0xb7, 0x9a, 0x41, 0xe4, 0x7f, 0x51, 0x20, 0x7a, 0xb9, 0x8d, 0x43, 0x1d, 0x80, 0xf4, 0x27,
	0xc1, 0x36, 0x55, 0xef, 0xa7, 0x06, 0x48, 0xed, 0xca, 0x67, 0xe8, 0x85, 0x97, 0xcf, 0xf9, 0x6f,
	0xf8, 0x1e, 0xdb, 0xe8, 0x7f, 0x7e, 0x72, 0x21, 0x0b, 0x67, 0x21, 0xec, 0x3c, 0x6c, 0x74, 0xa2,
	0x65, 0x58, 0xe3, 0xe8, 0xd8, 0xb8, 0xfe, 0xc7, 0x10, 0x88, 0xcb, 0xcb, 0xfa, 0x66, 0xbd, 0xef,
	0x7c, 0xee, 0xc4, 0x4c, 0x42, 0x90, 0x36, 0xa2, 0x4f, 0xc9, 0x49, 0x26, 0x24, 0xde, 0x05, 0x31,
	0x9f, 0xd7, 0x4d, 0xbe, 0x23, 0xa6, 0x98, 0x7a, 0xcd, 0xc8, 0xe1, 0x48, 0x98, 0xaa, 0x76, 0xb7,
	0x23, 0x43, 0xdc, 0x67, 0x3b, 0x73, 0x9b, 0x54, 0x99, 0x73, 0x9b, 0x6f, 0x21, 0x5f, 0x1c, 0xd1,
	0x15, 0xaa, 0xbc, 0x6e, 0x7a, 0xef, 0x8b, 0xeb, 0x30, 0xa4, 0x55, 0x15, 0x36, 0x07, 0xac, 0x48,
	0x30, 0x3e, 0x7f, 0xae, 0x75, 0xc7, 0xc3, 0xa6, 0x88, 0xa6, 0x36, 0x41, 0xf5, 0x2a, 0x92, 0x07,
	0xb4, 0x2a, 0xbb, 0x48, 0xce, 0xc5, 0x77, 0x60, 0x0c, 0xdf, 0xab, 0x6a, 0x06, 0x8d, 0x9e, 0xe2,
	0x7e, 0x37, 0xc7, 0x79, 0x7f, 0x34, 0xc5, 0xbe, 0xac, 0x4b, 0x39, 0x5f, 0xd6, 0xa5, 0xb6, 0x1c,
	0x09, 0x69, 0x98, 0x6e, 0x02, 0x7c, 0x0f, 0xf5, 0xae, 0x05, 0xc3, 0xf7, 0xff, 0xfd, 0x97, 0x87,
	0xe5, 0xd1, 0xba, 0x21, 0x57, 0x6a, 0xfe, 0x5f, 0x7c, 0x4f, 0x16, 0xc2, 0x84, 0x95, 0xbd, 0x96,
	0x4c, 0xcf, 0x3c, 0xb6, 0xd1, 0xdf, 0x77, 0xd8, 0x57, 0x9d, 0x86, 0xc1, 0xab, 0x1b, 0x3b, 0x73,
	0x71, 0xe6, 0x1e, 0x36, 0xa5, 0x18, 0x44, 0x1b, 0x9f, 0x35, 0xe5, 0x9e, 0x62, 0x53, 0xf0, 0x41,
	0x9a, 0x2a, 0x5c, 0xac, 0x2b, 0xc4, 0xe1, 0xd4, 0x11, 0x85, 0x9d, 0x8b, 0x5e, 0x95, 0x0c, 0x04,
	0x16, 0x37, 0xaf, 0x9b, 0xd2, 0x14, 0xbc, 0x72, 0x74, 0xe6, 0x52, 0xaa, 0x59, 0x61, 0x6a, 0xaa,
	0xa9, 0x54, 0x6a, 0xe5, 0x2c, 0xe5, 0x37, 0x90, 0x81, 0xbe, 0x25, 0xbd, 0x56, 0xb1, 0x08, 0x65,
	0x97, 0xce, 0xc1, 0x99, 0x16, 0x8a, 0x39, 0x7a, 0x7f, 0x8f, 0x2a, 0x0b, 0xc1, 0x19, 0x04, 0x6f,
	0x83, 0xb0, 0x75, 0x6d, 0x33, 0x7e, 0x45, 0xab, 0x14, 0xb1, 0x51, 0x35, 0xb4, 0x8a, 0x65, 0x26,
	0x56, 0x61, 0xaa, 0x85, 0xaa, 0x55, 0x32, 0x95, 0x42, 0x5d, 0xcc, 0x49, 0x7d, 0x11, 0x58, 0x27,
	0x5f, 0x33, 0x70, 0x3e, 0x3a, 0x74, 0x5d, 0xb7, 0xe2, 0xf5, 0x73, 0x42, 0x2c, 0xea, 0xf4, 0x48,
	0x51, 0x29, 0xd7, 0x12, 0x07, 0x3d, 0x20, 0xe1, 0xdf, 0xa5, 0xd4, 0x65, 0x3c, 0x40, 0x22, 0x34,
	0xa5, 0x97, 0x00, 0xe9, 0x52, 0xf2, 0xb2, 0xbb, 0x37, 0xda, 0x2b, 0x84, 0x13, 0x3f, 0xf4, 0x81,
	0xd0, 0x9c, 0x8f, 0xe2, 0x12, 0x84, 0x9d, 0xa8, 0xb4, 0xf9, 0x52, 0x8c, 0x67, 0xda, 0xa2, 0x59,
	0x71, 0xd3, 0x8c, 0x7f, 0x47, 0xd5, 0xab, 0x9a, 0x15, 0x9a, 0x65, 0x25, 0x18, 0xf0, 0x46, 0x88,
	0xbe, 0xd7, 0x86, 0x32, 0x3f, 0xd3, 0xda, 0x10, 0x8b, 0xf5, 0xde, 0x92, 0x9e, 0xc7, 0xd2, 0x2b,
	0x24, 0xc9, 0x06, 0x1f, 0x22, 0x48, 0x84, 0x1f, 0xa0, 0xa0, 0x80, 0x12, 0x6c, 0xcf, 0x90, 0xf6,
	0xea, 0x6f, 0x78, 0x57, 0xf6, 0xb8, 0x79, 0x3a, 0xda, 0x37, 0x11, 0x4c, 0xb4, 0x89, 0x2a, 0x2f,
	0xff, 0x6d, 0x16, 0x31, 0xb6, 0x4a, 0xa6, 0x67, 0xc2, 0xbc, 0x34, 0xe1, 0xf4, 0x3e, 0xfb, 0xb2,
	0x8e, 0xbe, 0x2e, 0x85, 0x3f, 0xfc, 0x00, 0x0d, 0x98, 0xdb, 0xaa, 0x81, 0xf3, 0xc9, 0x78, 0xcd,
	0xc4, 0x86, 0x3c, 0x6e, 0xb5, 0xd2, 0x9c, 0x0f, 0x3f, 0x59, 0x08, 0xa6, 0x93, 0xb3, 0xf4, 0xf3,
	0x1f, 0x16, 0xe6, 0x80, 0x10, 0x4c, 0xfc, 0x1e, 0x82, 0x93, 0x9b, 0xb8, 0x62, 0x6a, 0x96, 0xb6,
	0x83, 0x97, 0x55, 0x4b, 0x65, 0x9b, 0x36, 0xee, 0x02, 0xee, 0x2e, 0x9c, 0x30, 0x9d, 0xdb, 0x0a,
	0x41, 0x87, 0xfb, 0xf9, 0x28, 0x2e, 0x1c, 0xe3, 0x63, 0xbd, 0xc8, 0x77, 0xdf, 0x1d, 0x6f, 0x69,
	0x47, 0x7e, 0xc9, 0x3c, 0x3a, 0xba, 0x8c, 0x0b, 0x89, 0x5d, 0x18, 0xe7, 0x53, 0xaf, 0xe5, 0xb1,
	0xf7, 0x93, 0xd0, 0x77, 0xdc, 0x0f, 0xed, 0x8e, 0xb3, 0xa5, 0x75, 0xc4, 0x56, 0xdb, 0xef, 0xec,
	0x1e, 0x04, 0xe0, 0x64, 0x07, 0xe9, 0xd6, 0x7b, 0x45, 0xbe, 0x67, 0xd9, 0x2b, 0x5a, 0x69, 0xbd,
	0x57, 0xd4, 0xb9, 0xd8, 0x1f, 0xdd, 0xfe, 0xf9, 0xd5, 0xce, 0xdb, 0x3f, 0xac, 0x39, 0x59, 0xef,
	0x2e, 0x4a, 0x9b, 0xcb, 0xcf, 0xbb, 0xf9, 0x63, 0xb4, 0xdc, 0xfc, 0x61, 0x99, 0xfe, 0xa5, 0x67,
	0x75, 0xa2, 0xf3, 0xd6, 0xcf, 0xfc, 0x99, 0x47, 0x36, 0x3a, 0x09, 0x27, 0xda, 0x6c, 0x51, 0xa0,
	0x74, 0x87, 0x3d, 0x08, 0x3f, 0xc5, 0x91, 0x8d, 0x7a, 0xd9, 0x67, 0x37, 0x99, 0xb5, 0x40, 0x18,
	0x09, 0xbe, 0xc4, 0x5f, 0x22, 0x98, 0xec, 0x36, 0x18, 0x47, 0xe9, 0x26, 0xfa, 0x11, 0xd1, 0xcd,
	0x3f, 0xf7, 0xc1, 0x44, 0x9b, 0xe8, 0x89, 0xef, 0xb9, 0xc4, 0x82, 0x79, 0xf7, 0xe5, 0x67, 0x9d,
	0x8b, 0x17, 0x4d, 0x2b, 0x7c, 0x3f, 0x42, 0x5a, 0xf1, 0xed, 0x00, 0x44, 0xdb, 0x3f, 0xe2, 0xff,
	0xb3, 0xf3, 0x9f, 0x3e, 0x76, 0xfe, 0x77, 0x08, 0x26, 0xd6, 0xd5, 0xd2, 0xae, 0x6a, 0x60, 0xbe,
	0x1b, 0xaa, 0xe9, 0x15, 0x56, 0xfd, 0xc5, 0x3f, 0x45, 0x10, 0x29, 0xb3, 0x7b, 0x4a, 0xd5, 0xbd,
	0xa9, 0x78, 0x51, 0xd5, 0xdd, 0x9f, 0x12, 0x8e, 0x0c, 0x40, 0xf3, 0xf7, 0xbc, 0x93, 0xbf, 0x8d,
	0x8b, 0x7f, 0xed, 0xf0, 0xf4, 0x52, 0xb9, 0x95, 0x15, 0x33, 0xf1, 0x6b, 0x21, 0x18, 0x6f, 0x39,
	0xc0, 0x73, 0xa5, 0xf3, 0x2c, 0x84, 0x58, 0x67, 0xc7, 0x5f, 0x75, 0xe3, 0x4d, 0x9a, 0x6c, 0x89,
	0x9d, 0xe5, 0xa4, 0xcc, 0x45, 0xc5, 0xd5, 0xa6, 0xcd, 0x54, 0xd6, 0x69, 0x35, 0xa7, 0xb4, 0x67,
	0x27, 0x15, 0xda, 0xed, 0x8f, 0x5e, 0xf2, 0xec, 0x8f, 0x06, 0x28, 0xe3, 0x6d, 0xde, 0x92, 0x75,
	0x77, 0x42, 0x99, 0xe3, 0xee, 0x6e, 0xe8, 0x82, 0x0b, 0x28, 0x86, 0x8b, 0x78, 0x4b, 0x40, 0x79,
	0xdb, 0x2b, 0xfe, 0x0c, 0x1c, 0x55, 0x97, 0x38, 0xaa, 0x42, 0xdd, 0xa0, 0x8a, 0xeb, 0x32, 0x6c,
	0x7d, 0xc3, 0xff, 0x64, 0xa1, 0xdf, 0xf3, 0x45, 0xe7, 0x63, 0x1b, 0x7d, 0xde, 0x81, 0x70, 0xbc,
	0x0e, 0xbd, 0x2c, 0x88, 0xf1, 0xa9, 0x0c, 0xcc, 0xc0, 0x38, 0x0c, 0xb0, 0x28, 0x36, 0xee, 0x45,
	0x4c, 0xc0, 0x20, 0xbf, 0x6c, 0xe0, 0xaa, 0x6e, 0x58, 0x99, 0x90, 0x4c, 0x7f, 0x9f, 0x7d, 0xcf,
	0xe8, 0xb7, 0x91, 0x0b, 0xf1, 0xf7, 0x11, 0xbc, 0x47, 0x44, 0x47, 0x38, 0x34, 0x9b, 0xb1, 0x7e,
	0x12, 0x4e, 0xf0, 0x3b, 0x2d, 0x20, 0xff, 0x0a, 0x44, 0x1b, 0x6f, 0xb6, 0x41, 0xfe, 0xcb, 0xcd,
	0x46, 0xbe, 0xd0, 0x02, 0x30, 0x75, 0x0e, 0x84, 0xe6, 0x0f, 0x0d, 0xc5, 0x7e, 0xe8, 0x5d, 0x5d,
	0x59, 0x5c, 0x5e, 0x91, 0x37, 0x85, 0x9e, 0x28, 0x69, 0x2b, 0x7a, 0xa6, 0xae, 0xc0, 0x78, 0xcb,
	0xbf, 0x0a, 0x89, 0x83, 0x10, 0x58, 0xbc, 0xb9, 0x75, 0x43, 0xe8, 0x89, 0xfa, 0xef, 0xbf, 0x8b,
	0xc4, 0x10, 0xf8, 0x6e, 0x6e, 0x0a, 0xf4, 0x77, 0xe5, 0xa6, 0xe0, 0x13, 0xc3, 0x84, 0xc2, 0x5d,
	0x5d, 0x14, 0xfc, 0xd4, 0x0e, 0x9a, 0x9a, 0x81, 0x3e, 0x37, 0x13, 0xc9, 0x4d, 0xe9, 0xc6, 0xd6,
	0xaa, 0xd0, 0x43, 0x8e, 0x56, 0xb7, 0xb6, 0x36, 0x04, 0x24, 0xf6, 0x41, 0x90, 0x1c, 0x6d, 0x0a,
	0x3e, 0x3e, 0xb2, 0x0c, 0xe2, 0xd1, 0x75, 0x19, 0x71, 0x08, 0x60, 0xf1, 0xca, 0xd6, 0x8a, 0xac,
	0x10, 0x47, 0x85, 0x1e, 0x71, 0x14, 0x86, 0xd9, 0xf9, 0xd6, 0xd5, 0xad, 0x6b, 0x2b, 0xca, 0xca,
	0xf5, 0x65, 0x01, 0x89, 0x23, 0x30, 0x28, 0xad, 0x5c, 0xb9, 0x21, 0xaf, 0x28, 0x9b, 0x4b, 0xf2,
	0xd5, 0x8d, 0x2d, 0xc7, 0xa6, 0xf4, 0xfb, 0xe8, 0xe0, 0x93, 0x58, 0xcf, 0x47, 0x9f, 0xc4, 0x7a,
	0x3e, 0xff, 0x24, 0x86, 0xee, 0x1f, 0xc6, 0xd0, 0x77, 0x0e, 0x63, 0xe8, 0xc3, 0xc3, 0x18, 0x3a,
	0x38, 0x8c, 0xa1, 0x8f, 0x0e, 0x63, 0xe8, 0xe3, 0xc3, 0x18, 0xfa, 0xec, 0x30, 0xd6, 0xf3, 0xf9,
	0x61, 0x0c, 0xfd, 0xe6, 0xa7, 0xb1, 0x9e, 0xfd, 0x4f, 0x63, 0xe8, 0xe0, 0xd3, 0x58, 0xcf, 0x47,
	0x9f, 0xc6, 0x7a, 0xde, 0xfa, 0x7a, 0x51, 0xaf, 0xde, 0x29, 0xa6, 0x76, 0xf4, 0x92, 0x85, 0x0d,
	0x43, 0x4d, 0xd5, 0xcc, 0x69, 0x7a, 0x50, 0xd0, 0x8d, 0xf2, 0xf9, 0xaa, 0xa1, 0xef, 0x68, 0x79,
	0x6c, 0x9c, 0x77, 0x6e, 0x4f, 0x57, 0xb3, 0x45, 0x7d, 0x1a, 0xdf, 0xb3, 0x9c, 0xff, 0x99, 0x75,
	0xf8, 0x1b, 0x5e, 0x36, 0x44, 0x33, 0x6f, 0xf6, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x89, 0x4b,
	0x6e, 0x44, 0xb4, 0x37, 0x00, 0x00,
}

func (x MobileIdentifier) String() string {
	s, ok := MobileIdentifier_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ShapeBotDefenseRegion) String() string {
	s, ok := ShapeBotDefenseRegion_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x URLScheme) String() string {
	s, ok := URLScheme_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x JavaScriptLocation) String() string {
	s, ok := JavaScriptLocation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ShapeBotDefenseType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefenseType)
	if !ok {
		that2, ok := that.(ShapeBotDefenseType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegionalEndpoint != that1.RegionalEndpoint {
		return false
	}
	if !this.Policy.Equal(that1.Policy) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if that1.CorsSupportChoice == nil {
		if this.CorsSupportChoice != nil {
			return false
		}
	} else if this.CorsSupportChoice == nil {
		return false
	} else if !this.CorsSupportChoice.Equal(that1.CorsSupportChoice) {
		return false
	}
	return true
}
func (this *ShapeBotDefenseType_EnableCorsSupport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefenseType_EnableCorsSupport)
	if !ok {
		that2, ok := that.(ShapeBotDefenseType_EnableCorsSupport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableCorsSupport.Equal(that1.EnableCorsSupport) {
		return false
	}
	return true
}
func (this *ShapeBotDefenseType_DisableCorsSupport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefenseType_DisableCorsSupport)
	if !ok {
		that2, ok := that.(ShapeBotDefenseType_DisableCorsSupport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableCorsSupport.Equal(that1.DisableCorsSupport) {
		return false
	}
	return true
}
func (this *BotDefenseAdvancedType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotDefenseAdvancedType)
	if !ok {
		that2, ok := that.(BotDefenseAdvancedType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Web.Equal(that1.Web) {
		return false
	}
	if !this.Mobile.Equal(that1.Mobile) {
		return false
	}
	if !this.Policy.Equal(that1.Policy) {
		return false
	}
	return true
}
func (this *BotDefenseAdvancedPolicyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotDefenseAdvancedPolicyType)
	if !ok {
		that2, ok := that.(BotDefenseAdvancedPolicyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ProtectedAppEndpoints) != len(that1.ProtectedAppEndpoints) {
		return false
	}
	for i := range this.ProtectedAppEndpoints {
		if !this.ProtectedAppEndpoints[i].Equal(that1.ProtectedAppEndpoints[i]) {
			return false
		}
	}
	if this.JsDownloadPath != that1.JsDownloadPath {
		return false
	}
	if that1.MobileSdkChoice == nil {
		if this.MobileSdkChoice != nil {
			return false
		}
	} else if this.MobileSdkChoice == nil {
		return false
	} else if !this.MobileSdkChoice.Equal(that1.MobileSdkChoice) {
		return false
	}
	return true
}
func (this *BotDefenseAdvancedPolicyType_DisableMobileSdk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotDefenseAdvancedPolicyType_DisableMobileSdk)
	if !ok {
		that2, ok := that.(BotDefenseAdvancedPolicyType_DisableMobileSdk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMobileSdk.Equal(that1.DisableMobileSdk) {
		return false
	}
	return true
}
func (this *BotDefenseAdvancedPolicyType_MobileSdkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotDefenseAdvancedPolicyType_MobileSdkConfig)
	if !ok {
		that2, ok := that.(BotDefenseAdvancedPolicyType_MobileSdkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MobileSdkConfig.Equal(that1.MobileSdkConfig) {
		return false
	}
	return true
}
func (this *ProtectedAppEndpointType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtectedAppEndpointType)
	if !ok {
		that2, ok := that.(ProtectedAppEndpointType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.DomainMatcherChoice == nil {
		if this.DomainMatcherChoice != nil {
			return false
		}
	} else if this.DomainMatcherChoice == nil {
		return false
	} else if !this.DomainMatcherChoice.Equal(that1.DomainMatcherChoice) {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if len(this.Query) != len(that1.Query) {
		return false
	}
	for i := range this.Query {
		if !this.Query[i].Equal(that1.Query[i]) {
			return false
		}
	}
	if len(this.RequestBody) != len(that1.RequestBody) {
		return false
	}
	for i := range this.RequestBody {
		if !this.RequestBody[i].Equal(that1.RequestBody[i]) {
			return false
		}
	}
	if len(this.HttpMethods) != len(that1.HttpMethods) {
		return false
	}
	for i := range this.HttpMethods {
		if this.HttpMethods[i] != that1.HttpMethods[i] {
			return false
		}
	}
	if that1.AppTrafficTypeChoice == nil {
		if this.AppTrafficTypeChoice != nil {
			return false
		}
	} else if this.AppTrafficTypeChoice == nil {
		return false
	} else if !this.AppTrafficTypeChoice.Equal(that1.AppTrafficTypeChoice) {
		return false
	}
	if that1.FlowLabelChoice == nil {
		if this.FlowLabelChoice != nil {
			return false
		}
	} else if this.FlowLabelChoice == nil {
		return false
	} else if !this.FlowLabelChoice.Equal(that1.FlowLabelChoice) {
		return false
	}
	return true
}
func (this *ProtectedAppEndpointType_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtectedAppEndpointType_AnyDomain)
	if !ok {
		that2, ok := that.(ProtectedAppEndpointType_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *ProtectedAppEndpointType_Domain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtectedAppEndpointType_Domain)
	if !ok {
		that2, ok := that.(ProtectedAppEndpointType_Domain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	return true
}
func (this *ProtectedAppEndpointType_WebClient) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtectedAppEndpointType_WebClient)
	if !ok {
		that2, ok := that.(ProtectedAppEndpointType_WebClient)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WebClient.Equal(that1.WebClient) {
		return false
	}
	return true
}
func (this *ProtectedAppEndpointType_MobileClient) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtectedAppEndpointType_MobileClient)
	if !ok {
		that2, ok := that.(ProtectedAppEndpointType_MobileClient)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MobileClient.Equal(that1.MobileClient) {
		return false
	}
	return true
}
func (this *ProtectedAppEndpointType_WebMobileClient) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtectedAppEndpointType_WebMobileClient)
	if !ok {
		that2, ok := that.(ProtectedAppEndpointType_WebMobileClient)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WebMobileClient.Equal(that1.WebMobileClient) {
		return false
	}
	return true
}
func (this *ProtectedAppEndpointType_UndefinedFlowLabel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtectedAppEndpointType_UndefinedFlowLabel)
	if !ok {
		that2, ok := that.(ProtectedAppEndpointType_UndefinedFlowLabel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UndefinedFlowLabel.Equal(that1.UndefinedFlowLabel) {
		return false
	}
	return true
}
func (this *ProtectedAppEndpointType_FlowLabel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtectedAppEndpointType_FlowLabel)
	if !ok {
		that2, ok := that.(ProtectedAppEndpointType_FlowLabel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FlowLabel.Equal(that1.FlowLabel) {
		return false
	}
	return true
}
func (this *WebMobileTrafficType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebMobileTrafficType)
	if !ok {
		that2, ok := that.(WebMobileTrafficType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if this.MobileIdentifier != that1.MobileIdentifier {
		return false
	}
	return true
}
func (this *Query) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Query)
	if !ok {
		that2, ok := that.(Query)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.ValueType == nil {
		if this.ValueType != nil {
			return false
		}
	} else if this.ValueType == nil {
		return false
	} else if !this.ValueType.Equal(that1.ValueType) {
		return false
	}
	return true
}
func (this *Query_ExactValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Query_ExactValue)
	if !ok {
		that2, ok := that.(Query_ExactValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExactValue != that1.ExactValue {
		return false
	}
	return true
}
func (this *Query_RegexValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Query_RegexValue)
	if !ok {
		that2, ok := that.(Query_RegexValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegexValue != that1.RegexValue {
		return false
	}
	return true
}
func (this *Query_CheckPresence) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Query_CheckPresence)
	if !ok {
		that2, ok := that.(Query_CheckPresence)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CheckPresence.Equal(that1.CheckPresence) {
		return false
	}
	return true
}
func (this *RequestBody) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestBody)
	if !ok {
		that2, ok := that.(RequestBody)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.ValueType == nil {
		if this.ValueType != nil {
			return false
		}
	} else if this.ValueType == nil {
		return false
	} else if !this.ValueType.Equal(that1.ValueType) {
		return false
	}
	return true
}
func (this *RequestBody_ExactValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestBody_ExactValue)
	if !ok {
		that2, ok := that.(RequestBody_ExactValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExactValue != that1.ExactValue {
		return false
	}
	return true
}
func (this *RequestBody_RegexValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestBody_RegexValue)
	if !ok {
		that2, ok := that.(RequestBody_RegexValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegexValue != that1.RegexValue {
		return false
	}
	return true
}
func (this *BotAdvancedMobileSDKConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotAdvancedMobileSDKConfigType)
	if !ok {
		that2, ok := that.(BotAdvancedMobileSDKConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MobileIdentifier.Equal(that1.MobileIdentifier) {
		return false
	}
	return true
}
func (this *ShapeBotDefensePolicyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefensePolicyType)
	if !ok {
		that2, ok := that.(ShapeBotDefensePolicyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ProtectedAppEndpoints) != len(that1.ProtectedAppEndpoints) {
		return false
	}
	for i := range this.ProtectedAppEndpoints {
		if !this.ProtectedAppEndpoints[i].Equal(that1.ProtectedAppEndpoints[i]) {
			return false
		}
	}
	if that1.JavaScriptChoice == nil {
		if this.JavaScriptChoice != nil {
			return false
		}
	} else if this.JavaScriptChoice == nil {
		return false
	} else if !this.JavaScriptChoice.Equal(that1.JavaScriptChoice) {
		return false
	}
	if this.JsDownloadPath != that1.JsDownloadPath {
		return false
	}
	if this.JavascriptMode != that1.JavascriptMode {
		return false
	}
	if that1.MobileSdkChoice == nil {
		if this.MobileSdkChoice != nil {
			return false
		}
	} else if this.MobileSdkChoice == nil {
		return false
	} else if !this.MobileSdkChoice.Equal(that1.MobileSdkChoice) {
		return false
	}
	return true
}
func (this *ShapeBotDefensePolicyType_DisableJsInsert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefensePolicyType_DisableJsInsert)
	if !ok {
		that2, ok := that.(ShapeBotDefensePolicyType_DisableJsInsert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableJsInsert.Equal(that1.DisableJsInsert) {
		return false
	}
	return true
}
func (this *ShapeBotDefensePolicyType_JsInsertAllPages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefensePolicyType_JsInsertAllPages)
	if !ok {
		that2, ok := that.(ShapeBotDefensePolicyType_JsInsertAllPages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsInsertAllPages.Equal(that1.JsInsertAllPages) {
		return false
	}
	return true
}
func (this *ShapeBotDefensePolicyType_JsInsertAllPagesExcept) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefensePolicyType_JsInsertAllPagesExcept)
	if !ok {
		that2, ok := that.(ShapeBotDefensePolicyType_JsInsertAllPagesExcept)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsInsertAllPagesExcept.Equal(that1.JsInsertAllPagesExcept) {
		return false
	}
	return true
}
func (this *ShapeBotDefensePolicyType_JsInsertionRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefensePolicyType_JsInsertionRules)
	if !ok {
		that2, ok := that.(ShapeBotDefensePolicyType_JsInsertionRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsInsertionRules.Equal(that1.JsInsertionRules) {
		return false
	}
	return true
}
func (this *ShapeBotDefensePolicyType_DisableMobileSdk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefensePolicyType_DisableMobileSdk)
	if !ok {
		that2, ok := that.(ShapeBotDefensePolicyType_DisableMobileSdk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMobileSdk.Equal(that1.DisableMobileSdk) {
		return false
	}
	return true
}
func (this *ShapeBotDefensePolicyType_MobileSdkConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefensePolicyType_MobileSdkConfig)
	if !ok {
		that2, ok := that.(ShapeBotDefensePolicyType_MobileSdkConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MobileSdkConfig.Equal(that1.MobileSdkConfig) {
		return false
	}
	return true
}
func (this *AppEndpointType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppEndpointType)
	if !ok {
		that2, ok := that.(AppEndpointType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if len(this.HttpMethods) != len(that1.HttpMethods) {
		return false
	}
	for i := range this.HttpMethods {
		if this.HttpMethods[i] != that1.HttpMethods[i] {
			return false
		}
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if that1.DomainMatcherChoice == nil {
		if this.DomainMatcherChoice != nil {
			return false
		}
	} else if this.DomainMatcherChoice == nil {
		return false
	} else if !this.DomainMatcherChoice.Equal(that1.DomainMatcherChoice) {
		return false
	}
	if that1.AppTrafficTypeChoice == nil {
		if this.AppTrafficTypeChoice != nil {
			return false
		}
	} else if this.AppTrafficTypeChoice == nil {
		return false
	} else if !this.AppTrafficTypeChoice.Equal(that1.AppTrafficTypeChoice) {
		return false
	}
	if !this.Mitigation.Equal(that1.Mitigation) {
		return false
	}
	if that1.FlowLabelChoice == nil {
		if this.FlowLabelChoice != nil {
			return false
		}
	} else if this.FlowLabelChoice == nil {
		return false
	} else if !this.FlowLabelChoice.Equal(that1.FlowLabelChoice) {
		return false
	}
	if that1.GoodbotChoice == nil {
		if this.GoodbotChoice != nil {
			return false
		}
	} else if this.GoodbotChoice == nil {
		return false
	} else if !this.GoodbotChoice.Equal(that1.GoodbotChoice) {
		return false
	}
	if len(this.QueryParams) != len(that1.QueryParams) {
		return false
	}
	for i := range this.QueryParams {
		if !this.QueryParams[i].Equal(that1.QueryParams[i]) {
			return false
		}
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	return true
}
func (this *AppEndpointType_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppEndpointType_AnyDomain)
	if !ok {
		that2, ok := that.(AppEndpointType_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *AppEndpointType_Domain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppEndpointType_Domain)
	if !ok {
		that2, ok := that.(AppEndpointType_Domain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	return true
}
func (this *AppEndpointType_Web) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppEndpointType_Web)
	if !ok {
		that2, ok := that.(AppEndpointType_Web)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Web.Equal(that1.Web) {
		return false
	}
	return true
}
func (this *AppEndpointType_Mobile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppEndpointType_Mobile)
	if !ok {
		that2, ok := that.(AppEndpointType_Mobile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mobile.Equal(that1.Mobile) {
		return false
	}
	return true
}
func (this *AppEndpointType_WebMobile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppEndpointType_WebMobile)
	if !ok {
		that2, ok := that.(AppEndpointType_WebMobile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WebMobile.Equal(that1.WebMobile) {
		return false
	}
	return true
}
func (this *AppEndpointType_UndefinedFlowLabel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppEndpointType_UndefinedFlowLabel)
	if !ok {
		that2, ok := that.(AppEndpointType_UndefinedFlowLabel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UndefinedFlowLabel.Equal(that1.UndefinedFlowLabel) {
		return false
	}
	return true
}
func (this *AppEndpointType_FlowLabel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppEndpointType_FlowLabel)
	if !ok {
		that2, ok := that.(AppEndpointType_FlowLabel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FlowLabel.Equal(that1.FlowLabel) {
		return false
	}
	return true
}
func (this *AppEndpointType_AllowGoodBots) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppEndpointType_AllowGoodBots)
	if !ok {
		that2, ok := that.(AppEndpointType_AllowGoodBots)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowGoodBots.Equal(that1.AllowGoodBots) {
		return false
	}
	return true
}
func (this *AppEndpointType_MitigateGoodBots) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppEndpointType_MitigateGoodBots)
	if !ok {
		that2, ok := that.(AppEndpointType_MitigateGoodBots)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MitigateGoodBots.Equal(that1.MitigateGoodBots) {
		return false
	}
	return true
}
func (this *MobileSDKConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MobileSDKConfigType)
	if !ok {
		that2, ok := that.(MobileSDKConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReloadHeaderName != that1.ReloadHeaderName {
		return false
	}
	if !this.MobileIdentifier.Equal(that1.MobileIdentifier) {
		return false
	}
	return true
}
func (this *MobileTrafficIdentifierType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MobileTrafficIdentifierType)
	if !ok {
		that2, ok := that.(MobileTrafficIdentifierType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	return true
}
func (this *ShapeJavaScriptInsertAllType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptInsertAllType)
	if !ok {
		that2, ok := that.(ShapeJavaScriptInsertAllType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.JavascriptLocation != that1.JavascriptLocation {
		return false
	}
	return true
}
func (this *ShapeJavaScriptInsertAllWithExceptionsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptInsertAllWithExceptionsType)
	if !ok {
		that2, ok := that.(ShapeJavaScriptInsertAllWithExceptionsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.JavascriptLocation != that1.JavascriptLocation {
		return false
	}
	if len(this.ExcludeList) != len(that1.ExcludeList) {
		return false
	}
	for i := range this.ExcludeList {
		if !this.ExcludeList[i].Equal(that1.ExcludeList[i]) {
			return false
		}
	}
	return true
}
func (this *ShapeJavaScriptExclusionRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptExclusionRule)
	if !ok {
		that2, ok := that.(ShapeJavaScriptExclusionRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.DomainMatcherChoice == nil {
		if this.DomainMatcherChoice != nil {
			return false
		}
	} else if this.DomainMatcherChoice == nil {
		return false
	} else if !this.DomainMatcherChoice.Equal(that1.DomainMatcherChoice) {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	return true
}
func (this *ShapeJavaScriptExclusionRule_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptExclusionRule_AnyDomain)
	if !ok {
		that2, ok := that.(ShapeJavaScriptExclusionRule_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *ShapeJavaScriptExclusionRule_Domain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptExclusionRule_Domain)
	if !ok {
		that2, ok := that.(ShapeJavaScriptExclusionRule_Domain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	return true
}
func (this *ShapeJavaScriptInsertType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptInsertType)
	if !ok {
		that2, ok := that.(ShapeJavaScriptInsertType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	if len(this.ExcludeList) != len(that1.ExcludeList) {
		return false
	}
	for i := range this.ExcludeList {
		if !this.ExcludeList[i].Equal(that1.ExcludeList[i]) {
			return false
		}
	}
	return true
}
func (this *ShapeJavaScriptInsertionRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptInsertionRule)
	if !ok {
		that2, ok := that.(ShapeJavaScriptInsertionRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.DomainMatcherChoice == nil {
		if this.DomainMatcherChoice != nil {
			return false
		}
	} else if this.DomainMatcherChoice == nil {
		return false
	} else if !this.DomainMatcherChoice.Equal(that1.DomainMatcherChoice) {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if this.JavascriptLocation != that1.JavascriptLocation {
		return false
	}
	return true
}
func (this *ShapeJavaScriptInsertionRule_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptInsertionRule_AnyDomain)
	if !ok {
		that2, ok := that.(ShapeJavaScriptInsertionRule_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *ShapeJavaScriptInsertionRule_Domain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptInsertionRule_Domain)
	if !ok {
		that2, ok := that.(ShapeJavaScriptInsertionRule_Domain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	return true
}
func (this *DDoSMitigationRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DDoSMitigationRule)
	if !ok {
		that2, ok := that.(DDoSMitigationRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.MitigationAction == nil {
		if this.MitigationAction != nil {
			return false
		}
	} else if this.MitigationAction == nil {
		return false
	} else if !this.MitigationAction.Equal(that1.MitigationAction) {
		return false
	}
	if that1.MitigationChoice == nil {
		if this.MitigationChoice != nil {
			return false
		}
	} else if this.MitigationChoice == nil {
		return false
	} else if !this.MitigationChoice.Equal(that1.MitigationChoice) {
		return false
	}
	if !this.ExpirationTimestamp.Equal(that1.ExpirationTimestamp) {
		return false
	}
	return true
}
func (this *DDoSMitigationRule_Block) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DDoSMitigationRule_Block)
	if !ok {
		that2, ok := that.(DDoSMitigationRule_Block)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Block.Equal(that1.Block) {
		return false
	}
	return true
}
func (this *DDoSMitigationRule_DdosClientSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DDoSMitigationRule_DdosClientSource)
	if !ok {
		that2, ok := that.(DDoSMitigationRule_DdosClientSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DdosClientSource.Equal(that1.DdosClientSource) {
		return false
	}
	return true
}
func (this *DDoSMitigationRule_IpPrefixList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DDoSMitigationRule_IpPrefixList)
	if !ok {
		that2, ok := that.(DDoSMitigationRule_IpPrefixList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpPrefixList.Equal(that1.IpPrefixList) {
		return false
	}
	return true
}
func (this *DDoSClientSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DDoSClientSource)
	if !ok {
		that2, ok := that.(DDoSClientSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AsnList.Equal(that1.AsnList) {
		return false
	}
	if len(this.CountryList) != len(that1.CountryList) {
		return false
	}
	for i := range this.CountryList {
		if this.CountryList[i] != that1.CountryList[i] {
			return false
		}
	}
	if !this.TlsFingerprintMatcher.Equal(that1.TlsFingerprintMatcher) {
		return false
	}
	return true
}
func (this *SensitiveDataPolicySettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SensitiveDataPolicySettings)
	if !ok {
		that2, ok := that.(SensitiveDataPolicySettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SensitiveDataPolicyRef.Equal(that1.SensitiveDataPolicyRef) {
		return false
	}
	return true
}
func (this *ClientSideDefenseType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientSideDefenseType)
	if !ok {
		that2, ok := that.(ClientSideDefenseType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Policy.Equal(that1.Policy) {
		return false
	}
	return true
}
func (this *ClientSideDefensePolicyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientSideDefensePolicyType)
	if !ok {
		that2, ok := that.(ClientSideDefensePolicyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.JavaScriptChoice == nil {
		if this.JavaScriptChoice != nil {
			return false
		}
	} else if this.JavaScriptChoice == nil {
		return false
	} else if !this.JavaScriptChoice.Equal(that1.JavaScriptChoice) {
		return false
	}
	return true
}
func (this *ClientSideDefensePolicyType_DisableJsInsert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientSideDefensePolicyType_DisableJsInsert)
	if !ok {
		that2, ok := that.(ClientSideDefensePolicyType_DisableJsInsert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableJsInsert.Equal(that1.DisableJsInsert) {
		return false
	}
	return true
}
func (this *ClientSideDefensePolicyType_JsInsertAllPages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientSideDefensePolicyType_JsInsertAllPages)
	if !ok {
		that2, ok := that.(ClientSideDefensePolicyType_JsInsertAllPages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsInsertAllPages.Equal(that1.JsInsertAllPages) {
		return false
	}
	return true
}
func (this *ClientSideDefensePolicyType_JsInsertAllPagesExcept) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientSideDefensePolicyType_JsInsertAllPagesExcept)
	if !ok {
		that2, ok := that.(ClientSideDefensePolicyType_JsInsertAllPagesExcept)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsInsertAllPagesExcept.Equal(that1.JsInsertAllPagesExcept) {
		return false
	}
	return true
}
func (this *ClientSideDefensePolicyType_JsInsertionRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientSideDefensePolicyType_JsInsertionRules)
	if !ok {
		that2, ok := that.(ClientSideDefensePolicyType_JsInsertionRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsInsertionRules.Equal(that1.JsInsertionRules) {
		return false
	}
	return true
}
func (this *CSDJavaScriptInsertAllWithExceptionsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSDJavaScriptInsertAllWithExceptionsType)
	if !ok {
		that2, ok := that.(CSDJavaScriptInsertAllWithExceptionsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ExcludeList) != len(that1.ExcludeList) {
		return false
	}
	for i := range this.ExcludeList {
		if !this.ExcludeList[i].Equal(that1.ExcludeList[i]) {
			return false
		}
	}
	return true
}
func (this *CSDJavaScriptInsertType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSDJavaScriptInsertType)
	if !ok {
		that2, ok := that.(CSDJavaScriptInsertType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	if len(this.ExcludeList) != len(that1.ExcludeList) {
		return false
	}
	for i := range this.ExcludeList {
		if !this.ExcludeList[i].Equal(that1.ExcludeList[i]) {
			return false
		}
	}
	return true
}
func (this *CSDJavaScriptInsertionRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSDJavaScriptInsertionRule)
	if !ok {
		that2, ok := that.(CSDJavaScriptInsertionRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.DomainMatcherChoice == nil {
		if this.DomainMatcherChoice != nil {
			return false
		}
	} else if this.DomainMatcherChoice == nil {
		return false
	} else if !this.DomainMatcherChoice.Equal(that1.DomainMatcherChoice) {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	return true
}
func (this *CSDJavaScriptInsertionRule_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSDJavaScriptInsertionRule_AnyDomain)
	if !ok {
		that2, ok := that.(CSDJavaScriptInsertionRule_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *CSDJavaScriptInsertionRule_Domain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSDJavaScriptInsertionRule_Domain)
	if !ok {
		that2, ok := that.(CSDJavaScriptInsertionRule_Domain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	return true
}
func (this *MalwareProtectionPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MalwareProtectionPolicy)
	if !ok {
		that2, ok := that.(MalwareProtectionPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MalwareProtectionRules) != len(that1.MalwareProtectionRules) {
		return false
	}
	for i := range this.MalwareProtectionRules {
		if !this.MalwareProtectionRules[i].Equal(that1.MalwareProtectionRules[i]) {
			return false
		}
	}
	return true
}
func (this *MalwareProtectionRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MalwareProtectionRule)
	if !ok {
		that2, ok := that.(MalwareProtectionRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if len(this.HttpMethods) != len(that1.HttpMethods) {
		return false
	}
	for i := range this.HttpMethods {
		if this.HttpMethods[i] != that1.HttpMethods[i] {
			return false
		}
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	return true
}
func (this *ShapeBotDefenseType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&common_security.ShapeBotDefenseType{")
	s = append(s, "RegionalEndpoint: "+fmt.Sprintf("%#v", this.RegionalEndpoint)+",\n")
	if this.Policy != nil {
		s = append(s, "Policy: "+fmt.Sprintf("%#v", this.Policy)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	if this.CorsSupportChoice != nil {
		s = append(s, "CorsSupportChoice: "+fmt.Sprintf("%#v", this.CorsSupportChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeBotDefenseType_EnableCorsSupport) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ShapeBotDefenseType_EnableCorsSupport{` +
		`EnableCorsSupport:` + fmt.Sprintf("%#v", this.EnableCorsSupport) + `}`}, ", ")
	return s
}
func (this *ShapeBotDefenseType_DisableCorsSupport) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ShapeBotDefenseType_DisableCorsSupport{` +
		`DisableCorsSupport:` + fmt.Sprintf("%#v", this.DisableCorsSupport) + `}`}, ", ")
	return s
}
func (this *BotDefenseAdvancedType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&common_security.BotDefenseAdvancedType{")
	if this.Web != nil {
		s = append(s, "Web: "+fmt.Sprintf("%#v", this.Web)+",\n")
	}
	if this.Mobile != nil {
		s = append(s, "Mobile: "+fmt.Sprintf("%#v", this.Mobile)+",\n")
	}
	if this.Policy != nil {
		s = append(s, "Policy: "+fmt.Sprintf("%#v", this.Policy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BotDefenseAdvancedPolicyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&common_security.BotDefenseAdvancedPolicyType{")
	if this.ProtectedAppEndpoints != nil {
		s = append(s, "ProtectedAppEndpoints: "+fmt.Sprintf("%#v", this.ProtectedAppEndpoints)+",\n")
	}
	s = append(s, "JsDownloadPath: "+fmt.Sprintf("%#v", this.JsDownloadPath)+",\n")
	if this.MobileSdkChoice != nil {
		s = append(s, "MobileSdkChoice: "+fmt.Sprintf("%#v", this.MobileSdkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BotDefenseAdvancedPolicyType_DisableMobileSdk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.BotDefenseAdvancedPolicyType_DisableMobileSdk{` +
		`DisableMobileSdk:` + fmt.Sprintf("%#v", this.DisableMobileSdk) + `}`}, ", ")
	return s
}
func (this *BotDefenseAdvancedPolicyType_MobileSdkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.BotDefenseAdvancedPolicyType_MobileSdkConfig{` +
		`MobileSdkConfig:` + fmt.Sprintf("%#v", this.MobileSdkConfig) + `}`}, ", ")
	return s
}
func (this *ProtectedAppEndpointType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&common_security.ProtectedAppEndpointType{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.DomainMatcherChoice != nil {
		s = append(s, "DomainMatcherChoice: "+fmt.Sprintf("%#v", this.DomainMatcherChoice)+",\n")
	}
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	if this.RequestBody != nil {
		s = append(s, "RequestBody: "+fmt.Sprintf("%#v", this.RequestBody)+",\n")
	}
	s = append(s, "HttpMethods: "+fmt.Sprintf("%#v", this.HttpMethods)+",\n")
	if this.AppTrafficTypeChoice != nil {
		s = append(s, "AppTrafficTypeChoice: "+fmt.Sprintf("%#v", this.AppTrafficTypeChoice)+",\n")
	}
	if this.FlowLabelChoice != nil {
		s = append(s, "FlowLabelChoice: "+fmt.Sprintf("%#v", this.FlowLabelChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtectedAppEndpointType_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ProtectedAppEndpointType_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *ProtectedAppEndpointType_Domain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ProtectedAppEndpointType_Domain{` +
		`Domain:` + fmt.Sprintf("%#v", this.Domain) + `}`}, ", ")
	return s
}
func (this *ProtectedAppEndpointType_WebClient) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ProtectedAppEndpointType_WebClient{` +
		`WebClient:` + fmt.Sprintf("%#v", this.WebClient) + `}`}, ", ")
	return s
}
func (this *ProtectedAppEndpointType_MobileClient) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ProtectedAppEndpointType_MobileClient{` +
		`MobileClient:` + fmt.Sprintf("%#v", this.MobileClient) + `}`}, ", ")
	return s
}
func (this *ProtectedAppEndpointType_WebMobileClient) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ProtectedAppEndpointType_WebMobileClient{` +
		`WebMobileClient:` + fmt.Sprintf("%#v", this.WebMobileClient) + `}`}, ", ")
	return s
}
func (this *ProtectedAppEndpointType_UndefinedFlowLabel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ProtectedAppEndpointType_UndefinedFlowLabel{` +
		`UndefinedFlowLabel:` + fmt.Sprintf("%#v", this.UndefinedFlowLabel) + `}`}, ", ")
	return s
}
func (this *ProtectedAppEndpointType_FlowLabel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ProtectedAppEndpointType_FlowLabel{` +
		`FlowLabel:` + fmt.Sprintf("%#v", this.FlowLabel) + `}`}, ", ")
	return s
}
func (this *WebMobileTrafficType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&common_security.WebMobileTrafficType{")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	s = append(s, "MobileIdentifier: "+fmt.Sprintf("%#v", this.MobileIdentifier)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Query) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&common_security.Query{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.ValueType != nil {
		s = append(s, "ValueType: "+fmt.Sprintf("%#v", this.ValueType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Query_ExactValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.Query_ExactValue{` +
		`ExactValue:` + fmt.Sprintf("%#v", this.ExactValue) + `}`}, ", ")
	return s
}
func (this *Query_RegexValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.Query_RegexValue{` +
		`RegexValue:` + fmt.Sprintf("%#v", this.RegexValue) + `}`}, ", ")
	return s
}
func (this *Query_CheckPresence) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.Query_CheckPresence{` +
		`CheckPresence:` + fmt.Sprintf("%#v", this.CheckPresence) + `}`}, ", ")
	return s
}
func (this *RequestBody) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&common_security.RequestBody{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.ValueType != nil {
		s = append(s, "ValueType: "+fmt.Sprintf("%#v", this.ValueType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestBody_ExactValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.RequestBody_ExactValue{` +
		`ExactValue:` + fmt.Sprintf("%#v", this.ExactValue) + `}`}, ", ")
	return s
}
func (this *RequestBody_RegexValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.RequestBody_RegexValue{` +
		`RegexValue:` + fmt.Sprintf("%#v", this.RegexValue) + `}`}, ", ")
	return s
}
func (this *BotAdvancedMobileSDKConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_security.BotAdvancedMobileSDKConfigType{")
	if this.MobileIdentifier != nil {
		s = append(s, "MobileIdentifier: "+fmt.Sprintf("%#v", this.MobileIdentifier)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeBotDefensePolicyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&common_security.ShapeBotDefensePolicyType{")
	if this.ProtectedAppEndpoints != nil {
		s = append(s, "ProtectedAppEndpoints: "+fmt.Sprintf("%#v", this.ProtectedAppEndpoints)+",\n")
	}
	if this.JavaScriptChoice != nil {
		s = append(s, "JavaScriptChoice: "+fmt.Sprintf("%#v", this.JavaScriptChoice)+",\n")
	}
	s = append(s, "JsDownloadPath: "+fmt.Sprintf("%#v", this.JsDownloadPath)+",\n")
	s = append(s, "JavascriptMode: "+fmt.Sprintf("%#v", this.JavascriptMode)+",\n")
	if this.MobileSdkChoice != nil {
		s = append(s, "MobileSdkChoice: "+fmt.Sprintf("%#v", this.MobileSdkChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeBotDefensePolicyType_DisableJsInsert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ShapeBotDefensePolicyType_DisableJsInsert{` +
		`DisableJsInsert:` + fmt.Sprintf("%#v", this.DisableJsInsert) + `}`}, ", ")
	return s
}
func (this *ShapeBotDefensePolicyType_JsInsertAllPages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ShapeBotDefensePolicyType_JsInsertAllPages{` +
		`JsInsertAllPages:` + fmt.Sprintf("%#v", this.JsInsertAllPages) + `}`}, ", ")
	return s
}
func (this *ShapeBotDefensePolicyType_JsInsertAllPagesExcept) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ShapeBotDefensePolicyType_JsInsertAllPagesExcept{` +
		`JsInsertAllPagesExcept:` + fmt.Sprintf("%#v", this.JsInsertAllPagesExcept) + `}`}, ", ")
	return s
}
func (this *ShapeBotDefensePolicyType_JsInsertionRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ShapeBotDefensePolicyType_JsInsertionRules{` +
		`JsInsertionRules:` + fmt.Sprintf("%#v", this.JsInsertionRules) + `}`}, ", ")
	return s
}
func (this *ShapeBotDefensePolicyType_DisableMobileSdk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ShapeBotDefensePolicyType_DisableMobileSdk{` +
		`DisableMobileSdk:` + fmt.Sprintf("%#v", this.DisableMobileSdk) + `}`}, ", ")
	return s
}
func (this *ShapeBotDefensePolicyType_MobileSdkConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ShapeBotDefensePolicyType_MobileSdkConfig{` +
		`MobileSdkConfig:` + fmt.Sprintf("%#v", this.MobileSdkConfig) + `}`}, ", ")
	return s
}
func (this *AppEndpointType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&common_security.AppEndpointType{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "HttpMethods: "+fmt.Sprintf("%#v", this.HttpMethods)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	if this.DomainMatcherChoice != nil {
		s = append(s, "DomainMatcherChoice: "+fmt.Sprintf("%#v", this.DomainMatcherChoice)+",\n")
	}
	if this.AppTrafficTypeChoice != nil {
		s = append(s, "AppTrafficTypeChoice: "+fmt.Sprintf("%#v", this.AppTrafficTypeChoice)+",\n")
	}
	if this.Mitigation != nil {
		s = append(s, "Mitigation: "+fmt.Sprintf("%#v", this.Mitigation)+",\n")
	}
	if this.FlowLabelChoice != nil {
		s = append(s, "FlowLabelChoice: "+fmt.Sprintf("%#v", this.FlowLabelChoice)+",\n")
	}
	if this.GoodbotChoice != nil {
		s = append(s, "GoodbotChoice: "+fmt.Sprintf("%#v", this.GoodbotChoice)+",\n")
	}
	if this.QueryParams != nil {
		s = append(s, "QueryParams: "+fmt.Sprintf("%#v", this.QueryParams)+",\n")
	}
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AppEndpointType_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.AppEndpointType_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *AppEndpointType_Domain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.AppEndpointType_Domain{` +
		`Domain:` + fmt.Sprintf("%#v", this.Domain) + `}`}, ", ")
	return s
}
func (this *AppEndpointType_Web) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.AppEndpointType_Web{` +
		`Web:` + fmt.Sprintf("%#v", this.Web) + `}`}, ", ")
	return s
}
func (this *AppEndpointType_Mobile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.AppEndpointType_Mobile{` +
		`Mobile:` + fmt.Sprintf("%#v", this.Mobile) + `}`}, ", ")
	return s
}
func (this *AppEndpointType_WebMobile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.AppEndpointType_WebMobile{` +
		`WebMobile:` + fmt.Sprintf("%#v", this.WebMobile) + `}`}, ", ")
	return s
}
func (this *AppEndpointType_UndefinedFlowLabel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.AppEndpointType_UndefinedFlowLabel{` +
		`UndefinedFlowLabel:` + fmt.Sprintf("%#v", this.UndefinedFlowLabel) + `}`}, ", ")
	return s
}
func (this *AppEndpointType_FlowLabel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.AppEndpointType_FlowLabel{` +
		`FlowLabel:` + fmt.Sprintf("%#v", this.FlowLabel) + `}`}, ", ")
	return s
}
func (this *AppEndpointType_AllowGoodBots) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.AppEndpointType_AllowGoodBots{` +
		`AllowGoodBots:` + fmt.Sprintf("%#v", this.AllowGoodBots) + `}`}, ", ")
	return s
}
func (this *AppEndpointType_MitigateGoodBots) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.AppEndpointType_MitigateGoodBots{` +
		`MitigateGoodBots:` + fmt.Sprintf("%#v", this.MitigateGoodBots) + `}`}, ", ")
	return s
}
func (this *MobileSDKConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common_security.MobileSDKConfigType{")
	s = append(s, "ReloadHeaderName: "+fmt.Sprintf("%#v", this.ReloadHeaderName)+",\n")
	if this.MobileIdentifier != nil {
		s = append(s, "MobileIdentifier: "+fmt.Sprintf("%#v", this.MobileIdentifier)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MobileTrafficIdentifierType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_security.MobileTrafficIdentifierType{")
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeJavaScriptInsertAllType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_security.ShapeJavaScriptInsertAllType{")
	s = append(s, "JavascriptLocation: "+fmt.Sprintf("%#v", this.JavascriptLocation)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeJavaScriptInsertAllWithExceptionsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common_security.ShapeJavaScriptInsertAllWithExceptionsType{")
	s = append(s, "JavascriptLocation: "+fmt.Sprintf("%#v", this.JavascriptLocation)+",\n")
	if this.ExcludeList != nil {
		s = append(s, "ExcludeList: "+fmt.Sprintf("%#v", this.ExcludeList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeJavaScriptExclusionRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&common_security.ShapeJavaScriptExclusionRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.DomainMatcherChoice != nil {
		s = append(s, "DomainMatcherChoice: "+fmt.Sprintf("%#v", this.DomainMatcherChoice)+",\n")
	}
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeJavaScriptExclusionRule_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ShapeJavaScriptExclusionRule_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *ShapeJavaScriptExclusionRule_Domain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ShapeJavaScriptExclusionRule_Domain{` +
		`Domain:` + fmt.Sprintf("%#v", this.Domain) + `}`}, ", ")
	return s
}
func (this *ShapeJavaScriptInsertType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common_security.ShapeJavaScriptInsertType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	if this.ExcludeList != nil {
		s = append(s, "ExcludeList: "+fmt.Sprintf("%#v", this.ExcludeList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeJavaScriptInsertionRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&common_security.ShapeJavaScriptInsertionRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.DomainMatcherChoice != nil {
		s = append(s, "DomainMatcherChoice: "+fmt.Sprintf("%#v", this.DomainMatcherChoice)+",\n")
	}
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "JavascriptLocation: "+fmt.Sprintf("%#v", this.JavascriptLocation)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeJavaScriptInsertionRule_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ShapeJavaScriptInsertionRule_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *ShapeJavaScriptInsertionRule_Domain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ShapeJavaScriptInsertionRule_Domain{` +
		`Domain:` + fmt.Sprintf("%#v", this.Domain) + `}`}, ", ")
	return s
}
func (this *DDoSMitigationRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&common_security.DDoSMitigationRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.MitigationAction != nil {
		s = append(s, "MitigationAction: "+fmt.Sprintf("%#v", this.MitigationAction)+",\n")
	}
	if this.MitigationChoice != nil {
		s = append(s, "MitigationChoice: "+fmt.Sprintf("%#v", this.MitigationChoice)+",\n")
	}
	if this.ExpirationTimestamp != nil {
		s = append(s, "ExpirationTimestamp: "+fmt.Sprintf("%#v", this.ExpirationTimestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DDoSMitigationRule_Block) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.DDoSMitigationRule_Block{` +
		`Block:` + fmt.Sprintf("%#v", this.Block) + `}`}, ", ")
	return s
}
func (this *DDoSMitigationRule_DdosClientSource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.DDoSMitigationRule_DdosClientSource{` +
		`DdosClientSource:` + fmt.Sprintf("%#v", this.DdosClientSource) + `}`}, ", ")
	return s
}
func (this *DDoSMitigationRule_IpPrefixList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.DDoSMitigationRule_IpPrefixList{` +
		`IpPrefixList:` + fmt.Sprintf("%#v", this.IpPrefixList) + `}`}, ", ")
	return s
}
func (this *DDoSClientSource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&common_security.DDoSClientSource{")
	if this.AsnList != nil {
		s = append(s, "AsnList: "+fmt.Sprintf("%#v", this.AsnList)+",\n")
	}
	s = append(s, "CountryList: "+fmt.Sprintf("%#v", this.CountryList)+",\n")
	if this.TlsFingerprintMatcher != nil {
		s = append(s, "TlsFingerprintMatcher: "+fmt.Sprintf("%#v", this.TlsFingerprintMatcher)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SensitiveDataPolicySettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_security.SensitiveDataPolicySettings{")
	if this.SensitiveDataPolicyRef != nil {
		s = append(s, "SensitiveDataPolicyRef: "+fmt.Sprintf("%#v", this.SensitiveDataPolicyRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientSideDefenseType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_security.ClientSideDefenseType{")
	if this.Policy != nil {
		s = append(s, "Policy: "+fmt.Sprintf("%#v", this.Policy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientSideDefensePolicyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&common_security.ClientSideDefensePolicyType{")
	if this.JavaScriptChoice != nil {
		s = append(s, "JavaScriptChoice: "+fmt.Sprintf("%#v", this.JavaScriptChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientSideDefensePolicyType_DisableJsInsert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ClientSideDefensePolicyType_DisableJsInsert{` +
		`DisableJsInsert:` + fmt.Sprintf("%#v", this.DisableJsInsert) + `}`}, ", ")
	return s
}
func (this *ClientSideDefensePolicyType_JsInsertAllPages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ClientSideDefensePolicyType_JsInsertAllPages{` +
		`JsInsertAllPages:` + fmt.Sprintf("%#v", this.JsInsertAllPages) + `}`}, ", ")
	return s
}
func (this *ClientSideDefensePolicyType_JsInsertAllPagesExcept) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ClientSideDefensePolicyType_JsInsertAllPagesExcept{` +
		`JsInsertAllPagesExcept:` + fmt.Sprintf("%#v", this.JsInsertAllPagesExcept) + `}`}, ", ")
	return s
}
func (this *ClientSideDefensePolicyType_JsInsertionRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.ClientSideDefensePolicyType_JsInsertionRules{` +
		`JsInsertionRules:` + fmt.Sprintf("%#v", this.JsInsertionRules) + `}`}, ", ")
	return s
}
func (this *CSDJavaScriptInsertAllWithExceptionsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_security.CSDJavaScriptInsertAllWithExceptionsType{")
	if this.ExcludeList != nil {
		s = append(s, "ExcludeList: "+fmt.Sprintf("%#v", this.ExcludeList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CSDJavaScriptInsertType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&common_security.CSDJavaScriptInsertType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	if this.ExcludeList != nil {
		s = append(s, "ExcludeList: "+fmt.Sprintf("%#v", this.ExcludeList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CSDJavaScriptInsertionRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&common_security.CSDJavaScriptInsertionRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.DomainMatcherChoice != nil {
		s = append(s, "DomainMatcherChoice: "+fmt.Sprintf("%#v", this.DomainMatcherChoice)+",\n")
	}
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CSDJavaScriptInsertionRule_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.CSDJavaScriptInsertionRule_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *CSDJavaScriptInsertionRule_Domain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&common_security.CSDJavaScriptInsertionRule_Domain{` +
		`Domain:` + fmt.Sprintf("%#v", this.Domain) + `}`}, ", ")
	return s
}
func (this *MalwareProtectionPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&common_security.MalwareProtectionPolicy{")
	if this.MalwareProtectionRules != nil {
		s = append(s, "MalwareProtectionRules: "+fmt.Sprintf("%#v", this.MalwareProtectionRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MalwareProtectionRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&common_security.MalwareProtectionRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	s = append(s, "HttpMethods: "+fmt.Sprintf("%#v", this.HttpMethods)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	if this.Domain != nil {
		s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	}
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSecurityTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ShapeBotDefenseType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeBotDefenseType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefenseType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CorsSupportChoice != nil {
		{
			size := m.CorsSupportChoice.Size()
			i -= size
			if _, err := m.CorsSupportChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Timeout != 0 {
		i = encodeVarintSecurityTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x18
	}
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RegionalEndpoint != 0 {
		i = encodeVarintSecurityTypes(dAtA, i, uint64(m.RegionalEndpoint))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShapeBotDefenseType_EnableCorsSupport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefenseType_EnableCorsSupport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableCorsSupport != nil {
		{
			size, err := m.EnableCorsSupport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotDefenseType_DisableCorsSupport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefenseType_DisableCorsSupport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableCorsSupport != nil {
		{
			size, err := m.DisableCorsSupport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *BotDefenseAdvancedType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotDefenseAdvancedType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotDefenseAdvancedType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Mobile != nil {
		{
			size, err := m.Mobile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Web != nil {
		{
			size, err := m.Web.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BotDefenseAdvancedPolicyType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotDefenseAdvancedPolicyType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotDefenseAdvancedPolicyType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MobileSdkChoice != nil {
		{
			size := m.MobileSdkChoice.Size()
			i -= size
			if _, err := m.MobileSdkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.JsDownloadPath) > 0 {
		i -= len(m.JsDownloadPath)
		copy(dAtA[i:], m.JsDownloadPath)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.JsDownloadPath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProtectedAppEndpoints) > 0 {
		for iNdEx := len(m.ProtectedAppEndpoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProtectedAppEndpoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BotDefenseAdvancedPolicyType_DisableMobileSdk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotDefenseAdvancedPolicyType_DisableMobileSdk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableMobileSdk != nil {
		{
			size, err := m.DisableMobileSdk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *BotDefenseAdvancedPolicyType_MobileSdkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotDefenseAdvancedPolicyType_MobileSdkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MobileSdkConfig != nil {
		{
			size, err := m.MobileSdkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ProtectedAppEndpointType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtectedAppEndpointType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtectedAppEndpointType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlowLabelChoice != nil {
		{
			size := m.FlowLabelChoice.Size()
			i -= size
			if _, err := m.FlowLabelChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AppTrafficTypeChoice != nil {
		{
			size := m.AppTrafficTypeChoice.Size()
			i -= size
			if _, err := m.AppTrafficTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.HttpMethods) > 0 {
		dAtA10 := make([]byte, len(m.HttpMethods)*10)
		var j9 int
		for _, num := range m.HttpMethods {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintSecurityTypes(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RequestBody) > 0 {
		for iNdEx := len(m.RequestBody) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestBody[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Query) > 0 {
		for iNdEx := len(m.Query) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Query[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DomainMatcherChoice != nil {
		{
			size := m.DomainMatcherChoice.Size()
			i -= size
			if _, err := m.DomainMatcherChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtectedAppEndpointType_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtectedAppEndpointType_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ProtectedAppEndpointType_Domain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtectedAppEndpointType_Domain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Domain != nil {
		{
			size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ProtectedAppEndpointType_WebClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtectedAppEndpointType_WebClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WebClient != nil {
		{
			size, err := m.WebClient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ProtectedAppEndpointType_MobileClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtectedAppEndpointType_MobileClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MobileClient != nil {
		{
			size, err := m.MobileClient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ProtectedAppEndpointType_WebMobileClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtectedAppEndpointType_WebMobileClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WebMobileClient != nil {
		{
			size, err := m.WebMobileClient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ProtectedAppEndpointType_UndefinedFlowLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtectedAppEndpointType_UndefinedFlowLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UndefinedFlowLabel != nil {
		{
			size, err := m.UndefinedFlowLabel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ProtectedAppEndpointType_FlowLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtectedAppEndpointType_FlowLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FlowLabel != nil {
		{
			size, err := m.FlowLabel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *WebMobileTrafficType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebMobileTrafficType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebMobileTrafficType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MobileIdentifier != 0 {
		i = encodeVarintSecurityTypes(dAtA, i, uint64(m.MobileIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Query) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Query) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueType != nil {
		{
			size := m.ValueType.Size()
			i -= size
			if _, err := m.ValueType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Query_ExactValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query_ExactValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ExactValue)
	copy(dAtA[i:], m.ExactValue)
	i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.ExactValue)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *Query_RegexValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query_RegexValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RegexValue)
	copy(dAtA[i:], m.RegexValue)
	i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.RegexValue)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *Query_CheckPresence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query_CheckPresence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CheckPresence != nil {
		{
			size, err := m.CheckPresence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RequestBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueType != nil {
		{
			size := m.ValueType.Size()
			i -= size
			if _, err := m.ValueType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestBody_ExactValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestBody_ExactValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ExactValue)
	copy(dAtA[i:], m.ExactValue)
	i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.ExactValue)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *RequestBody_RegexValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestBody_RegexValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RegexValue)
	copy(dAtA[i:], m.RegexValue)
	i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.RegexValue)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *BotAdvancedMobileSDKConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotAdvancedMobileSDKConfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotAdvancedMobileSDKConfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MobileIdentifier != nil {
		{
			size, err := m.MobileIdentifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShapeBotDefensePolicyType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeBotDefensePolicyType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefensePolicyType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JavascriptMode != 0 {
		i = encodeVarintSecurityTypes(dAtA, i, uint64(m.JavascriptMode))
		i--
		dAtA[i] = 0x58
	}
	if m.MobileSdkChoice != nil {
		{
			size := m.MobileSdkChoice.Size()
			i -= size
			if _, err := m.MobileSdkChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.JavaScriptChoice != nil {
		{
			size := m.JavaScriptChoice.Size()
			i -= size
			if _, err := m.JavaScriptChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.JsDownloadPath) > 0 {
		i -= len(m.JsDownloadPath)
		copy(dAtA[i:], m.JsDownloadPath)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.JsDownloadPath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProtectedAppEndpoints) > 0 {
		for iNdEx := len(m.ProtectedAppEndpoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProtectedAppEndpoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShapeBotDefensePolicyType_DisableJsInsert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefensePolicyType_DisableJsInsert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableJsInsert != nil {
		{
			size, err := m.DisableJsInsert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotDefensePolicyType_JsInsertAllPages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefensePolicyType_JsInsertAllPages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsInsertAllPages != nil {
		{
			size, err := m.JsInsertAllPages.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotDefensePolicyType_JsInsertAllPagesExcept) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefensePolicyType_JsInsertAllPagesExcept) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsInsertAllPagesExcept != nil {
		{
			size, err := m.JsInsertAllPagesExcept.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotDefensePolicyType_JsInsertionRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefensePolicyType_JsInsertionRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsInsertionRules != nil {
		{
			size, err := m.JsInsertionRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotDefensePolicyType_DisableMobileSdk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefensePolicyType_DisableMobileSdk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableMobileSdk != nil {
		{
			size, err := m.DisableMobileSdk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotDefensePolicyType_MobileSdkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefensePolicyType_MobileSdkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MobileSdkConfig != nil {
		{
			size, err := m.MobileSdkConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AppEndpointType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppEndpointType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppEndpointType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.QueryParams) > 0 {
		for iNdEx := len(m.QueryParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueryParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.GoodbotChoice != nil {
		{
			size := m.GoodbotChoice.Size()
			i -= size
			if _, err := m.GoodbotChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FlowLabelChoice != nil {
		{
			size := m.FlowLabelChoice.Size()
			i -= size
			if _, err := m.FlowLabelChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Mitigation != nil {
		{
			size, err := m.Mitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.AppTrafficTypeChoice != nil {
		{
			size := m.AppTrafficTypeChoice.Size()
			i -= size
			if _, err := m.AppTrafficTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DomainMatcherChoice != nil {
		{
			size := m.DomainMatcherChoice.Size()
			i -= size
			if _, err := m.DomainMatcherChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Protocol != 0 {
		i = encodeVarintSecurityTypes(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x18
	}
	if len(m.HttpMethods) > 0 {
		dAtA32 := make([]byte, len(m.HttpMethods)*10)
		var j31 int
		for _, num := range m.HttpMethods {
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		i -= j31
		copy(dAtA[i:], dAtA32[:j31])
		i = encodeVarintSecurityTypes(dAtA, i, uint64(j31))
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppEndpointType_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppEndpointType_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *AppEndpointType_Domain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppEndpointType_Domain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Domain != nil {
		{
			size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *AppEndpointType_Web) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppEndpointType_Web) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Web != nil {
		{
			size, err := m.Web.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *AppEndpointType_Mobile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppEndpointType_Mobile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Mobile != nil {
		{
			size, err := m.Mobile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AppEndpointType_WebMobile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppEndpointType_WebMobile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WebMobile != nil {
		{
			size, err := m.WebMobile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *AppEndpointType_UndefinedFlowLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppEndpointType_UndefinedFlowLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UndefinedFlowLabel != nil {
		{
			size, err := m.UndefinedFlowLabel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *AppEndpointType_FlowLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppEndpointType_FlowLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FlowLabel != nil {
		{
			size, err := m.FlowLabel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AppEndpointType_MitigateGoodBots) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppEndpointType_MitigateGoodBots) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MitigateGoodBots != nil {
		{
			size, err := m.MitigateGoodBots.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *AppEndpointType_AllowGoodBots) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppEndpointType_AllowGoodBots) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllowGoodBots != nil {
		{
			size, err := m.AllowGoodBots.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *MobileSDKConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MobileSDKConfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MobileSDKConfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MobileIdentifier != nil {
		{
			size, err := m.MobileIdentifier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReloadHeaderName) > 0 {
		i -= len(m.ReloadHeaderName)
		copy(dAtA[i:], m.ReloadHeaderName)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.ReloadHeaderName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MobileTrafficIdentifierType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MobileTrafficIdentifierType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MobileTrafficIdentifierType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShapeJavaScriptInsertAllType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeJavaScriptInsertAllType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptInsertAllType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JavascriptLocation != 0 {
		i = encodeVarintSecurityTypes(dAtA, i, uint64(m.JavascriptLocation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShapeJavaScriptInsertAllWithExceptionsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeJavaScriptInsertAllWithExceptionsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptInsertAllWithExceptionsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExcludeList) > 0 {
		for iNdEx := len(m.ExcludeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExcludeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.JavascriptLocation != 0 {
		i = encodeVarintSecurityTypes(dAtA, i, uint64(m.JavascriptLocation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShapeJavaScriptExclusionRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeJavaScriptExclusionRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptExclusionRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DomainMatcherChoice != nil {
		{
			size := m.DomainMatcherChoice.Size()
			i -= size
			if _, err := m.DomainMatcherChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShapeJavaScriptExclusionRule_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptExclusionRule_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ShapeJavaScriptExclusionRule_Domain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptExclusionRule_Domain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Domain != nil {
		{
			size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ShapeJavaScriptInsertType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeJavaScriptInsertType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptInsertType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExcludeList) > 0 {
		for iNdEx := len(m.ExcludeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExcludeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShapeJavaScriptInsertionRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeJavaScriptInsertionRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptInsertionRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JavascriptLocation != 0 {
		i = encodeVarintSecurityTypes(dAtA, i, uint64(m.JavascriptLocation))
		i--
		dAtA[i] = 0x30
	}
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DomainMatcherChoice != nil {
		{
			size := m.DomainMatcherChoice.Size()
			i -= size
			if _, err := m.DomainMatcherChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShapeJavaScriptInsertionRule_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptInsertionRule_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ShapeJavaScriptInsertionRule_Domain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptInsertionRule_Domain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Domain != nil {
		{
			size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DDoSMitigationRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DDoSMitigationRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DDoSMitigationRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationTimestamp != nil {
		{
			size, err := m.ExpirationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.MitigationChoice != nil {
		{
			size := m.MitigationChoice.Size()
			i -= size
			if _, err := m.MitigationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MitigationAction != nil {
		{
			size := m.MitigationAction.Size()
			i -= size
			if _, err := m.MitigationAction.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DDoSMitigationRule_Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DDoSMitigationRule_Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DDoSMitigationRule_DdosClientSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DDoSMitigationRule_DdosClientSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DdosClientSource != nil {
		{
			size, err := m.DdosClientSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *DDoSMitigationRule_IpPrefixList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DDoSMitigationRule_IpPrefixList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpPrefixList != nil {
		{
			size, err := m.IpPrefixList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *DDoSClientSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DDoSClientSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DDoSClientSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TlsFingerprintMatcher != nil {
		{
			size, err := m.TlsFingerprintMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CountryList) > 0 {
		dAtA59 := make([]byte, len(m.CountryList)*10)
		var j58 int
		for _, num := range m.CountryList {
			for num >= 1<<7 {
				dAtA59[j58] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j58++
			}
			dAtA59[j58] = uint8(num)
			j58++
		}
		i -= j58
		copy(dAtA[i:], dAtA59[:j58])
		i = encodeVarintSecurityTypes(dAtA, i, uint64(j58))
		i--
		dAtA[i] = 0x1a
	}
	if m.AsnList != nil {
		{
			size, err := m.AsnList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SensitiveDataPolicySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SensitiveDataPolicySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensitiveDataPolicySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SensitiveDataPolicyRef != nil {
		{
			size, err := m.SensitiveDataPolicyRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientSideDefenseType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSideDefenseType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientSideDefenseType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientSideDefensePolicyType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSideDefensePolicyType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientSideDefensePolicyType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JavaScriptChoice != nil {
		{
			size := m.JavaScriptChoice.Size()
			i -= size
			if _, err := m.JavaScriptChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClientSideDefensePolicyType_DisableJsInsert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientSideDefensePolicyType_DisableJsInsert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableJsInsert != nil {
		{
			size, err := m.DisableJsInsert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ClientSideDefensePolicyType_JsInsertAllPages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientSideDefensePolicyType_JsInsertAllPages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsInsertAllPages != nil {
		{
			size, err := m.JsInsertAllPages.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ClientSideDefensePolicyType_JsInsertAllPagesExcept) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientSideDefensePolicyType_JsInsertAllPagesExcept) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsInsertAllPagesExcept != nil {
		{
			size, err := m.JsInsertAllPagesExcept.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ClientSideDefensePolicyType_JsInsertionRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientSideDefensePolicyType_JsInsertionRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsInsertionRules != nil {
		{
			size, err := m.JsInsertionRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CSDJavaScriptInsertAllWithExceptionsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSDJavaScriptInsertAllWithExceptionsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSDJavaScriptInsertAllWithExceptionsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExcludeList) > 0 {
		for iNdEx := len(m.ExcludeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExcludeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CSDJavaScriptInsertType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSDJavaScriptInsertType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSDJavaScriptInsertType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExcludeList) > 0 {
		for iNdEx := len(m.ExcludeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExcludeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CSDJavaScriptInsertionRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSDJavaScriptInsertionRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSDJavaScriptInsertionRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DomainMatcherChoice != nil {
		{
			size := m.DomainMatcherChoice.Size()
			i -= size
			if _, err := m.DomainMatcherChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CSDJavaScriptInsertionRule_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSDJavaScriptInsertionRule_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CSDJavaScriptInsertionRule_Domain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSDJavaScriptInsertionRule_Domain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Domain != nil {
		{
			size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MalwareProtectionPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MalwareProtectionPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MalwareProtectionPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MalwareProtectionRules) > 0 {
		for iNdEx := len(m.MalwareProtectionRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MalwareProtectionRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MalwareProtectionRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MalwareProtectionRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MalwareProtectionRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Domain != nil {
		{
			size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Protocol != 0 {
		i = encodeVarintSecurityTypes(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x20
	}
	if len(m.HttpMethods) > 0 {
		dAtA74 := make([]byte, len(m.HttpMethods)*10)
		var j73 int
		for _, num := range m.HttpMethods {
			for num >= 1<<7 {
				dAtA74[j73] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j73++
			}
			dAtA74[j73] = uint8(num)
			j73++
		}
		i -= j73
		copy(dAtA[i:], dAtA74[:j73])
		i = encodeVarintSecurityTypes(dAtA, i, uint64(j73))
		i--
		dAtA[i] = 0x1a
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSecurityTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovSecurityTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ShapeBotDefenseType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegionalEndpoint != 0 {
		n += 1 + sovSecurityTypes(uint64(m.RegionalEndpoint))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovSecurityTypes(uint64(m.Timeout))
	}
	if m.CorsSupportChoice != nil {
		n += m.CorsSupportChoice.Size()
	}
	return n
}

func (m *ShapeBotDefenseType_EnableCorsSupport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableCorsSupport != nil {
		l = m.EnableCorsSupport.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotDefenseType_DisableCorsSupport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableCorsSupport != nil {
		l = m.DisableCorsSupport.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *BotDefenseAdvancedType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Web != nil {
		l = m.Web.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.Mobile != nil {
		l = m.Mobile.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}

func (m *BotDefenseAdvancedPolicyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProtectedAppEndpoints) > 0 {
		for _, e := range m.ProtectedAppEndpoints {
			l = e.Size()
			n += 1 + l + sovSecurityTypes(uint64(l))
		}
	}
	l = len(m.JsDownloadPath)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.MobileSdkChoice != nil {
		n += m.MobileSdkChoice.Size()
	}
	return n
}

func (m *BotDefenseAdvancedPolicyType_DisableMobileSdk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableMobileSdk != nil {
		l = m.DisableMobileSdk.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *BotDefenseAdvancedPolicyType_MobileSdkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MobileSdkConfig != nil {
		l = m.MobileSdkConfig.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ProtectedAppEndpointType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.DomainMatcherChoice != nil {
		n += m.DomainMatcherChoice.Size()
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if len(m.Query) > 0 {
		for _, e := range m.Query {
			l = e.Size()
			n += 1 + l + sovSecurityTypes(uint64(l))
		}
	}
	if len(m.RequestBody) > 0 {
		for _, e := range m.RequestBody {
			l = e.Size()
			n += 1 + l + sovSecurityTypes(uint64(l))
		}
	}
	if len(m.HttpMethods) > 0 {
		l = 0
		for _, e := range m.HttpMethods {
			l += sovSecurityTypes(uint64(e))
		}
		n += 1 + sovSecurityTypes(uint64(l)) + l
	}
	if m.AppTrafficTypeChoice != nil {
		n += m.AppTrafficTypeChoice.Size()
	}
	if m.FlowLabelChoice != nil {
		n += m.FlowLabelChoice.Size()
	}
	return n
}

func (m *ProtectedAppEndpointType_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ProtectedAppEndpointType_Domain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Domain != nil {
		l = m.Domain.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ProtectedAppEndpointType_WebClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WebClient != nil {
		l = m.WebClient.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ProtectedAppEndpointType_MobileClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MobileClient != nil {
		l = m.MobileClient.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ProtectedAppEndpointType_WebMobileClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WebMobileClient != nil {
		l = m.WebMobileClient.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ProtectedAppEndpointType_UndefinedFlowLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UndefinedFlowLabel != nil {
		l = m.UndefinedFlowLabel.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ProtectedAppEndpointType_FlowLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowLabel != nil {
		l = m.FlowLabel.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *WebMobileTrafficType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovSecurityTypes(uint64(l))
		}
	}
	if m.MobileIdentifier != 0 {
		n += 1 + sovSecurityTypes(uint64(m.MobileIdentifier))
	}
	return n
}

func (m *Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.ValueType != nil {
		n += m.ValueType.Size()
	}
	return n
}

func (m *Query_ExactValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExactValue)
	n += 1 + l + sovSecurityTypes(uint64(l))
	return n
}
func (m *Query_RegexValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegexValue)
	n += 1 + l + sovSecurityTypes(uint64(l))
	return n
}
func (m *Query_CheckPresence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckPresence != nil {
		l = m.CheckPresence.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *RequestBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.ValueType != nil {
		n += m.ValueType.Size()
	}
	return n
}

func (m *RequestBody_ExactValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExactValue)
	n += 1 + l + sovSecurityTypes(uint64(l))
	return n
}
func (m *RequestBody_RegexValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegexValue)
	n += 1 + l + sovSecurityTypes(uint64(l))
	return n
}
func (m *BotAdvancedMobileSDKConfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MobileIdentifier != nil {
		l = m.MobileIdentifier.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}

func (m *ShapeBotDefensePolicyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProtectedAppEndpoints) > 0 {
		for _, e := range m.ProtectedAppEndpoints {
			l = e.Size()
			n += 1 + l + sovSecurityTypes(uint64(l))
		}
	}
	l = len(m.JsDownloadPath)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.JavaScriptChoice != nil {
		n += m.JavaScriptChoice.Size()
	}
	if m.MobileSdkChoice != nil {
		n += m.MobileSdkChoice.Size()
	}
	if m.JavascriptMode != 0 {
		n += 1 + sovSecurityTypes(uint64(m.JavascriptMode))
	}
	return n
}

func (m *ShapeBotDefensePolicyType_DisableJsInsert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableJsInsert != nil {
		l = m.DisableJsInsert.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotDefensePolicyType_JsInsertAllPages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsInsertAllPages != nil {
		l = m.JsInsertAllPages.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotDefensePolicyType_JsInsertAllPagesExcept) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsInsertAllPagesExcept != nil {
		l = m.JsInsertAllPagesExcept.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotDefensePolicyType_JsInsertionRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsInsertionRules != nil {
		l = m.JsInsertionRules.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotDefensePolicyType_DisableMobileSdk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableMobileSdk != nil {
		l = m.DisableMobileSdk.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotDefensePolicyType_MobileSdkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MobileSdkConfig != nil {
		l = m.MobileSdkConfig.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *AppEndpointType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if len(m.HttpMethods) > 0 {
		l = 0
		for _, e := range m.HttpMethods {
			l += sovSecurityTypes(uint64(e))
		}
		n += 1 + sovSecurityTypes(uint64(l)) + l
	}
	if m.Protocol != 0 {
		n += 1 + sovSecurityTypes(uint64(m.Protocol))
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.DomainMatcherChoice != nil {
		n += m.DomainMatcherChoice.Size()
	}
	if m.AppTrafficTypeChoice != nil {
		n += m.AppTrafficTypeChoice.Size()
	}
	if m.Mitigation != nil {
		l = m.Mitigation.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.FlowLabelChoice != nil {
		n += m.FlowLabelChoice.Size()
	}
	if m.GoodbotChoice != nil {
		n += m.GoodbotChoice.Size()
	}
	if len(m.QueryParams) > 0 {
		for _, e := range m.QueryParams {
			l = e.Size()
			n += 2 + l + sovSecurityTypes(uint64(l))
		}
	}
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 2 + l + sovSecurityTypes(uint64(l))
		}
	}
	return n
}

func (m *AppEndpointType_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *AppEndpointType_Domain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Domain != nil {
		l = m.Domain.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *AppEndpointType_Web) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Web != nil {
		l = m.Web.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *AppEndpointType_Mobile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mobile != nil {
		l = m.Mobile.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *AppEndpointType_WebMobile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WebMobile != nil {
		l = m.WebMobile.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *AppEndpointType_UndefinedFlowLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UndefinedFlowLabel != nil {
		l = m.UndefinedFlowLabel.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *AppEndpointType_FlowLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowLabel != nil {
		l = m.FlowLabel.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *AppEndpointType_MitigateGoodBots) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MitigateGoodBots != nil {
		l = m.MitigateGoodBots.Size()
		n += 2 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *AppEndpointType_AllowGoodBots) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowGoodBots != nil {
		l = m.AllowGoodBots.Size()
		n += 2 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *MobileSDKConfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReloadHeaderName)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.MobileIdentifier != nil {
		l = m.MobileIdentifier.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}

func (m *MobileTrafficIdentifierType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovSecurityTypes(uint64(l))
		}
	}
	return n
}

func (m *ShapeJavaScriptInsertAllType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JavascriptLocation != 0 {
		n += 1 + sovSecurityTypes(uint64(m.JavascriptLocation))
	}
	return n
}

func (m *ShapeJavaScriptInsertAllWithExceptionsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JavascriptLocation != 0 {
		n += 1 + sovSecurityTypes(uint64(m.JavascriptLocation))
	}
	if len(m.ExcludeList) > 0 {
		for _, e := range m.ExcludeList {
			l = e.Size()
			n += 1 + l + sovSecurityTypes(uint64(l))
		}
	}
	return n
}

func (m *ShapeJavaScriptExclusionRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.DomainMatcherChoice != nil {
		n += m.DomainMatcherChoice.Size()
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}

func (m *ShapeJavaScriptExclusionRule_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ShapeJavaScriptExclusionRule_Domain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Domain != nil {
		l = m.Domain.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ShapeJavaScriptInsertType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovSecurityTypes(uint64(l))
		}
	}
	if len(m.ExcludeList) > 0 {
		for _, e := range m.ExcludeList {
			l = e.Size()
			n += 1 + l + sovSecurityTypes(uint64(l))
		}
	}
	return n
}

func (m *ShapeJavaScriptInsertionRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.DomainMatcherChoice != nil {
		n += m.DomainMatcherChoice.Size()
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.JavascriptLocation != 0 {
		n += 1 + sovSecurityTypes(uint64(m.JavascriptLocation))
	}
	return n
}

func (m *ShapeJavaScriptInsertionRule_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ShapeJavaScriptInsertionRule_Domain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Domain != nil {
		l = m.Domain.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *DDoSMitigationRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.MitigationAction != nil {
		n += m.MitigationAction.Size()
	}
	if m.MitigationChoice != nil {
		n += m.MitigationChoice.Size()
	}
	if m.ExpirationTimestamp != nil {
		l = m.ExpirationTimestamp.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}

func (m *DDoSMitigationRule_Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *DDoSMitigationRule_DdosClientSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DdosClientSource != nil {
		l = m.DdosClientSource.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *DDoSMitigationRule_IpPrefixList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpPrefixList != nil {
		l = m.IpPrefixList.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *DDoSClientSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsnList != nil {
		l = m.AsnList.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if len(m.CountryList) > 0 {
		l = 0
		for _, e := range m.CountryList {
			l += sovSecurityTypes(uint64(e))
		}
		n += 1 + sovSecurityTypes(uint64(l)) + l
	}
	if m.TlsFingerprintMatcher != nil {
		l = m.TlsFingerprintMatcher.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}

func (m *SensitiveDataPolicySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensitiveDataPolicyRef != nil {
		l = m.SensitiveDataPolicyRef.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}

func (m *ClientSideDefenseType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}

func (m *ClientSideDefensePolicyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JavaScriptChoice != nil {
		n += m.JavaScriptChoice.Size()
	}
	return n
}

func (m *ClientSideDefensePolicyType_DisableJsInsert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableJsInsert != nil {
		l = m.DisableJsInsert.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ClientSideDefensePolicyType_JsInsertAllPages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsInsertAllPages != nil {
		l = m.JsInsertAllPages.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ClientSideDefensePolicyType_JsInsertAllPagesExcept) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsInsertAllPagesExcept != nil {
		l = m.JsInsertAllPagesExcept.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *ClientSideDefensePolicyType_JsInsertionRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsInsertionRules != nil {
		l = m.JsInsertionRules.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *CSDJavaScriptInsertAllWithExceptionsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExcludeList) > 0 {
		for _, e := range m.ExcludeList {
			l = e.Size()
			n += 1 + l + sovSecurityTypes(uint64(l))
		}
	}
	return n
}

func (m *CSDJavaScriptInsertType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovSecurityTypes(uint64(l))
		}
	}
	if len(m.ExcludeList) > 0 {
		for _, e := range m.ExcludeList {
			l = e.Size()
			n += 1 + l + sovSecurityTypes(uint64(l))
		}
	}
	return n
}

func (m *CSDJavaScriptInsertionRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.DomainMatcherChoice != nil {
		n += m.DomainMatcherChoice.Size()
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}

func (m *CSDJavaScriptInsertionRule_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *CSDJavaScriptInsertionRule_Domain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Domain != nil {
		l = m.Domain.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}
func (m *MalwareProtectionPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MalwareProtectionRules) > 0 {
		for _, e := range m.MalwareProtectionRules {
			l = e.Size()
			n += 1 + l + sovSecurityTypes(uint64(l))
		}
	}
	return n
}

func (m *MalwareProtectionRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if len(m.HttpMethods) > 0 {
		l = 0
		for _, e := range m.HttpMethods {
			l += sovSecurityTypes(uint64(e))
		}
		n += 1 + sovSecurityTypes(uint64(l)) + l
	}
	if m.Protocol != 0 {
		n += 1 + sovSecurityTypes(uint64(m.Protocol))
	}
	if m.Domain != nil {
		l = m.Domain.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}

func sovSecurityTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSecurityTypes(x uint64) (n int) {
	return sovSecurityTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ShapeBotDefenseType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotDefenseType{`,
		`RegionalEndpoint:` + fmt.Sprintf("%v", this.RegionalEndpoint) + `,`,
		`Policy:` + strings.Replace(this.Policy.String(), "ShapeBotDefensePolicyType", "ShapeBotDefensePolicyType", 1) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`CorsSupportChoice:` + fmt.Sprintf("%v", this.CorsSupportChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotDefenseType_EnableCorsSupport) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotDefenseType_EnableCorsSupport{`,
		`EnableCorsSupport:` + strings.Replace(fmt.Sprintf("%v", this.EnableCorsSupport), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotDefenseType_DisableCorsSupport) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotDefenseType_DisableCorsSupport{`,
		`DisableCorsSupport:` + strings.Replace(fmt.Sprintf("%v", this.DisableCorsSupport), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BotDefenseAdvancedType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotDefenseAdvancedType{`,
		`Web:` + strings.Replace(fmt.Sprintf("%v", this.Web), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Mobile:` + strings.Replace(fmt.Sprintf("%v", this.Mobile), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Policy:` + strings.Replace(this.Policy.String(), "BotDefenseAdvancedPolicyType", "BotDefenseAdvancedPolicyType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BotDefenseAdvancedPolicyType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProtectedAppEndpoints := "[]*ProtectedAppEndpointType{"
	for _, f := range this.ProtectedAppEndpoints {
		repeatedStringForProtectedAppEndpoints += strings.Replace(f.String(), "ProtectedAppEndpointType", "ProtectedAppEndpointType", 1) + ","
	}
	repeatedStringForProtectedAppEndpoints += "}"
	s := strings.Join([]string{`&BotDefenseAdvancedPolicyType{`,
		`ProtectedAppEndpoints:` + repeatedStringForProtectedAppEndpoints + `,`,
		`JsDownloadPath:` + fmt.Sprintf("%v", this.JsDownloadPath) + `,`,
		`MobileSdkChoice:` + fmt.Sprintf("%v", this.MobileSdkChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BotDefenseAdvancedPolicyType_DisableMobileSdk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotDefenseAdvancedPolicyType_DisableMobileSdk{`,
		`DisableMobileSdk:` + strings.Replace(fmt.Sprintf("%v", this.DisableMobileSdk), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BotDefenseAdvancedPolicyType_MobileSdkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotDefenseAdvancedPolicyType_MobileSdkConfig{`,
		`MobileSdkConfig:` + strings.Replace(fmt.Sprintf("%v", this.MobileSdkConfig), "BotAdvancedMobileSDKConfigType", "BotAdvancedMobileSDKConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProtectedAppEndpointType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQuery := "[]*Query{"
	for _, f := range this.Query {
		repeatedStringForQuery += strings.Replace(f.String(), "Query", "Query", 1) + ","
	}
	repeatedStringForQuery += "}"
	repeatedStringForRequestBody := "[]*RequestBody{"
	for _, f := range this.RequestBody {
		repeatedStringForRequestBody += strings.Replace(f.String(), "RequestBody", "RequestBody", 1) + ","
	}
	repeatedStringForRequestBody += "}"
	s := strings.Join([]string{`&ProtectedAppEndpointType{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`DomainMatcherChoice:` + fmt.Sprintf("%v", this.DomainMatcherChoice) + `,`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`Query:` + repeatedStringForQuery + `,`,
		`RequestBody:` + repeatedStringForRequestBody + `,`,
		`HttpMethods:` + fmt.Sprintf("%v", this.HttpMethods) + `,`,
		`AppTrafficTypeChoice:` + fmt.Sprintf("%v", this.AppTrafficTypeChoice) + `,`,
		`FlowLabelChoice:` + fmt.Sprintf("%v", this.FlowLabelChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProtectedAppEndpointType_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtectedAppEndpointType_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProtectedAppEndpointType_Domain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtectedAppEndpointType_Domain{`,
		`Domain:` + strings.Replace(fmt.Sprintf("%v", this.Domain), "DomainType", "schema.DomainType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProtectedAppEndpointType_WebClient) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtectedAppEndpointType_WebClient{`,
		`WebClient:` + strings.Replace(fmt.Sprintf("%v", this.WebClient), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProtectedAppEndpointType_MobileClient) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtectedAppEndpointType_MobileClient{`,
		`MobileClient:` + strings.Replace(fmt.Sprintf("%v", this.MobileClient), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProtectedAppEndpointType_WebMobileClient) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtectedAppEndpointType_WebMobileClient{`,
		`WebMobileClient:` + strings.Replace(fmt.Sprintf("%v", this.WebMobileClient), "WebMobileTrafficType", "WebMobileTrafficType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProtectedAppEndpointType_UndefinedFlowLabel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtectedAppEndpointType_UndefinedFlowLabel{`,
		`UndefinedFlowLabel:` + strings.Replace(fmt.Sprintf("%v", this.UndefinedFlowLabel), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProtectedAppEndpointType_FlowLabel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtectedAppEndpointType_FlowLabel{`,
		`FlowLabel:` + strings.Replace(fmt.Sprintf("%v", this.FlowLabel), "BotDefenseFlowLabelCategoriesChoiceType", "schema.BotDefenseFlowLabelCategoriesChoiceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebMobileTrafficType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHeaders := "[]*HeaderMatcherTypeBasic{"
	for _, f := range this.Headers {
		repeatedStringForHeaders += strings.Replace(fmt.Sprintf("%v", f), "HeaderMatcherTypeBasic", "policy.HeaderMatcherTypeBasic", 1) + ","
	}
	repeatedStringForHeaders += "}"
	s := strings.Join([]string{`&WebMobileTrafficType{`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "HeaderMatcherTypeBasic", "policy.HeaderMatcherTypeBasic", 1) + `,`,
		`Headers:` + repeatedStringForHeaders + `,`,
		`MobileIdentifier:` + fmt.Sprintf("%v", this.MobileIdentifier) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Query) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Query{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ValueType:` + fmt.Sprintf("%v", this.ValueType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Query_ExactValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Query_ExactValue{`,
		`ExactValue:` + fmt.Sprintf("%v", this.ExactValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Query_RegexValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Query_RegexValue{`,
		`RegexValue:` + fmt.Sprintf("%v", this.RegexValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Query_CheckPresence) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Query_CheckPresence{`,
		`CheckPresence:` + strings.Replace(fmt.Sprintf("%v", this.CheckPresence), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestBody) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestBody{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ValueType:` + fmt.Sprintf("%v", this.ValueType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestBody_ExactValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestBody_ExactValue{`,
		`ExactValue:` + fmt.Sprintf("%v", this.ExactValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestBody_RegexValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestBody_RegexValue{`,
		`RegexValue:` + fmt.Sprintf("%v", this.RegexValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BotAdvancedMobileSDKConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotAdvancedMobileSDKConfigType{`,
		`MobileIdentifier:` + strings.Replace(this.MobileIdentifier.String(), "MobileTrafficIdentifierType", "MobileTrafficIdentifierType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotDefensePolicyType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProtectedAppEndpoints := "[]*AppEndpointType{"
	for _, f := range this.ProtectedAppEndpoints {
		repeatedStringForProtectedAppEndpoints += strings.Replace(f.String(), "AppEndpointType", "AppEndpointType", 1) + ","
	}
	repeatedStringForProtectedAppEndpoints += "}"
	s := strings.Join([]string{`&ShapeBotDefensePolicyType{`,
		`ProtectedAppEndpoints:` + repeatedStringForProtectedAppEndpoints + `,`,
		`JsDownloadPath:` + fmt.Sprintf("%v", this.JsDownloadPath) + `,`,
		`JavaScriptChoice:` + fmt.Sprintf("%v", this.JavaScriptChoice) + `,`,
		`MobileSdkChoice:` + fmt.Sprintf("%v", this.MobileSdkChoice) + `,`,
		`JavascriptMode:` + fmt.Sprintf("%v", this.JavascriptMode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotDefensePolicyType_DisableJsInsert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotDefensePolicyType_DisableJsInsert{`,
		`DisableJsInsert:` + strings.Replace(fmt.Sprintf("%v", this.DisableJsInsert), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotDefensePolicyType_JsInsertAllPages) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotDefensePolicyType_JsInsertAllPages{`,
		`JsInsertAllPages:` + strings.Replace(fmt.Sprintf("%v", this.JsInsertAllPages), "ShapeJavaScriptInsertAllType", "ShapeJavaScriptInsertAllType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotDefensePolicyType_JsInsertAllPagesExcept) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotDefensePolicyType_JsInsertAllPagesExcept{`,
		`JsInsertAllPagesExcept:` + strings.Replace(fmt.Sprintf("%v", this.JsInsertAllPagesExcept), "ShapeJavaScriptInsertAllWithExceptionsType", "ShapeJavaScriptInsertAllWithExceptionsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotDefensePolicyType_JsInsertionRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotDefensePolicyType_JsInsertionRules{`,
		`JsInsertionRules:` + strings.Replace(fmt.Sprintf("%v", this.JsInsertionRules), "ShapeJavaScriptInsertType", "ShapeJavaScriptInsertType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotDefensePolicyType_DisableMobileSdk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotDefensePolicyType_DisableMobileSdk{`,
		`DisableMobileSdk:` + strings.Replace(fmt.Sprintf("%v", this.DisableMobileSdk), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotDefensePolicyType_MobileSdkConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotDefensePolicyType_MobileSdkConfig{`,
		`MobileSdkConfig:` + strings.Replace(fmt.Sprintf("%v", this.MobileSdkConfig), "MobileSDKConfigType", "MobileSDKConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppEndpointType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQueryParams := "[]*QueryParameterMatcherType{"
	for _, f := range this.QueryParams {
		repeatedStringForQueryParams += strings.Replace(fmt.Sprintf("%v", f), "QueryParameterMatcherType", "policy.QueryParameterMatcherType", 1) + ","
	}
	repeatedStringForQueryParams += "}"
	repeatedStringForHeaders := "[]*HeaderMatcherType{"
	for _, f := range this.Headers {
		repeatedStringForHeaders += strings.Replace(fmt.Sprintf("%v", f), "HeaderMatcherType", "policy.HeaderMatcherType", 1) + ","
	}
	repeatedStringForHeaders += "}"
	s := strings.Join([]string{`&AppEndpointType{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`HttpMethods:` + fmt.Sprintf("%v", this.HttpMethods) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`DomainMatcherChoice:` + fmt.Sprintf("%v", this.DomainMatcherChoice) + `,`,
		`AppTrafficTypeChoice:` + fmt.Sprintf("%v", this.AppTrafficTypeChoice) + `,`,
		`Mitigation:` + strings.Replace(fmt.Sprintf("%v", this.Mitigation), "ShapeBotMitigationAction", "policy.ShapeBotMitigationAction", 1) + `,`,
		`FlowLabelChoice:` + fmt.Sprintf("%v", this.FlowLabelChoice) + `,`,
		`GoodbotChoice:` + fmt.Sprintf("%v", this.GoodbotChoice) + `,`,
		`QueryParams:` + repeatedStringForQueryParams + `,`,
		`Headers:` + repeatedStringForHeaders + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppEndpointType_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppEndpointType_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppEndpointType_Domain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppEndpointType_Domain{`,
		`Domain:` + strings.Replace(fmt.Sprintf("%v", this.Domain), "DomainType", "schema.DomainType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppEndpointType_Web) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppEndpointType_Web{`,
		`Web:` + strings.Replace(fmt.Sprintf("%v", this.Web), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppEndpointType_Mobile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppEndpointType_Mobile{`,
		`Mobile:` + strings.Replace(fmt.Sprintf("%v", this.Mobile), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppEndpointType_WebMobile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppEndpointType_WebMobile{`,
		`WebMobile:` + strings.Replace(fmt.Sprintf("%v", this.WebMobile), "WebMobileTrafficType", "WebMobileTrafficType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppEndpointType_UndefinedFlowLabel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppEndpointType_UndefinedFlowLabel{`,
		`UndefinedFlowLabel:` + strings.Replace(fmt.Sprintf("%v", this.UndefinedFlowLabel), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppEndpointType_FlowLabel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppEndpointType_FlowLabel{`,
		`FlowLabel:` + strings.Replace(fmt.Sprintf("%v", this.FlowLabel), "BotDefenseFlowLabelCategoriesChoiceType", "schema.BotDefenseFlowLabelCategoriesChoiceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppEndpointType_MitigateGoodBots) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppEndpointType_MitigateGoodBots{`,
		`MitigateGoodBots:` + strings.Replace(fmt.Sprintf("%v", this.MitigateGoodBots), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppEndpointType_AllowGoodBots) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppEndpointType_AllowGoodBots{`,
		`AllowGoodBots:` + strings.Replace(fmt.Sprintf("%v", this.AllowGoodBots), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MobileSDKConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MobileSDKConfigType{`,
		`ReloadHeaderName:` + fmt.Sprintf("%v", this.ReloadHeaderName) + `,`,
		`MobileIdentifier:` + strings.Replace(this.MobileIdentifier.String(), "MobileTrafficIdentifierType", "MobileTrafficIdentifierType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MobileTrafficIdentifierType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHeaders := "[]*HeaderMatcherTypeBasic{"
	for _, f := range this.Headers {
		repeatedStringForHeaders += strings.Replace(fmt.Sprintf("%v", f), "HeaderMatcherTypeBasic", "policy.HeaderMatcherTypeBasic", 1) + ","
	}
	repeatedStringForHeaders += "}"
	s := strings.Join([]string{`&MobileTrafficIdentifierType{`,
		`Headers:` + repeatedStringForHeaders + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptInsertAllType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeJavaScriptInsertAllType{`,
		`JavascriptLocation:` + fmt.Sprintf("%v", this.JavascriptLocation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptInsertAllWithExceptionsType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExcludeList := "[]*ShapeJavaScriptExclusionRule{"
	for _, f := range this.ExcludeList {
		repeatedStringForExcludeList += strings.Replace(f.String(), "ShapeJavaScriptExclusionRule", "ShapeJavaScriptExclusionRule", 1) + ","
	}
	repeatedStringForExcludeList += "}"
	s := strings.Join([]string{`&ShapeJavaScriptInsertAllWithExceptionsType{`,
		`JavascriptLocation:` + fmt.Sprintf("%v", this.JavascriptLocation) + `,`,
		`ExcludeList:` + repeatedStringForExcludeList + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptExclusionRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeJavaScriptExclusionRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`DomainMatcherChoice:` + fmt.Sprintf("%v", this.DomainMatcherChoice) + `,`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptExclusionRule_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeJavaScriptExclusionRule_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptExclusionRule_Domain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeJavaScriptExclusionRule_Domain{`,
		`Domain:` + strings.Replace(fmt.Sprintf("%v", this.Domain), "DomainType", "schema.DomainType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptInsertType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*ShapeJavaScriptInsertionRule{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "ShapeJavaScriptInsertionRule", "ShapeJavaScriptInsertionRule", 1) + ","
	}
	repeatedStringForRules += "}"
	repeatedStringForExcludeList := "[]*ShapeJavaScriptExclusionRule{"
	for _, f := range this.ExcludeList {
		repeatedStringForExcludeList += strings.Replace(f.String(), "ShapeJavaScriptExclusionRule", "ShapeJavaScriptExclusionRule", 1) + ","
	}
	repeatedStringForExcludeList += "}"
	s := strings.Join([]string{`&ShapeJavaScriptInsertType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`ExcludeList:` + repeatedStringForExcludeList + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptInsertionRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeJavaScriptInsertionRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`DomainMatcherChoice:` + fmt.Sprintf("%v", this.DomainMatcherChoice) + `,`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`JavascriptLocation:` + fmt.Sprintf("%v", this.JavascriptLocation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptInsertionRule_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeJavaScriptInsertionRule_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptInsertionRule_Domain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeJavaScriptInsertionRule_Domain{`,
		`Domain:` + strings.Replace(fmt.Sprintf("%v", this.Domain), "DomainType", "schema.DomainType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DDoSMitigationRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DDoSMitigationRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`MitigationAction:` + fmt.Sprintf("%v", this.MitigationAction) + `,`,
		`MitigationChoice:` + fmt.Sprintf("%v", this.MitigationChoice) + `,`,
		`ExpirationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ExpirationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DDoSMitigationRule_Block) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DDoSMitigationRule_Block{`,
		`Block:` + strings.Replace(fmt.Sprintf("%v", this.Block), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DDoSMitigationRule_DdosClientSource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DDoSMitigationRule_DdosClientSource{`,
		`DdosClientSource:` + strings.Replace(fmt.Sprintf("%v", this.DdosClientSource), "DDoSClientSource", "DDoSClientSource", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DDoSMitigationRule_IpPrefixList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DDoSMitigationRule_IpPrefixList{`,
		`IpPrefixList:` + strings.Replace(fmt.Sprintf("%v", this.IpPrefixList), "PrefixMatchList", "policy.PrefixMatchList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DDoSClientSource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DDoSClientSource{`,
		`AsnList:` + strings.Replace(fmt.Sprintf("%v", this.AsnList), "AsnMatchList", "policy.AsnMatchList", 1) + `,`,
		`CountryList:` + fmt.Sprintf("%v", this.CountryList) + `,`,
		`TlsFingerprintMatcher:` + strings.Replace(fmt.Sprintf("%v", this.TlsFingerprintMatcher), "TlsFingerprintMatcherType", "policy.TlsFingerprintMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SensitiveDataPolicySettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SensitiveDataPolicySettings{`,
		`SensitiveDataPolicyRef:` + strings.Replace(fmt.Sprintf("%v", this.SensitiveDataPolicyRef), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientSideDefenseType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientSideDefenseType{`,
		`Policy:` + strings.Replace(this.Policy.String(), "ClientSideDefensePolicyType", "ClientSideDefensePolicyType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientSideDefensePolicyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientSideDefensePolicyType{`,
		`JavaScriptChoice:` + fmt.Sprintf("%v", this.JavaScriptChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientSideDefensePolicyType_DisableJsInsert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientSideDefensePolicyType_DisableJsInsert{`,
		`DisableJsInsert:` + strings.Replace(fmt.Sprintf("%v", this.DisableJsInsert), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientSideDefensePolicyType_JsInsertAllPages) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientSideDefensePolicyType_JsInsertAllPages{`,
		`JsInsertAllPages:` + strings.Replace(fmt.Sprintf("%v", this.JsInsertAllPages), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientSideDefensePolicyType_JsInsertAllPagesExcept) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientSideDefensePolicyType_JsInsertAllPagesExcept{`,
		`JsInsertAllPagesExcept:` + strings.Replace(fmt.Sprintf("%v", this.JsInsertAllPagesExcept), "CSDJavaScriptInsertAllWithExceptionsType", "CSDJavaScriptInsertAllWithExceptionsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientSideDefensePolicyType_JsInsertionRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientSideDefensePolicyType_JsInsertionRules{`,
		`JsInsertionRules:` + strings.Replace(fmt.Sprintf("%v", this.JsInsertionRules), "CSDJavaScriptInsertType", "CSDJavaScriptInsertType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSDJavaScriptInsertAllWithExceptionsType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExcludeList := "[]*ShapeJavaScriptExclusionRule{"
	for _, f := range this.ExcludeList {
		repeatedStringForExcludeList += strings.Replace(f.String(), "ShapeJavaScriptExclusionRule", "ShapeJavaScriptExclusionRule", 1) + ","
	}
	repeatedStringForExcludeList += "}"
	s := strings.Join([]string{`&CSDJavaScriptInsertAllWithExceptionsType{`,
		`ExcludeList:` + repeatedStringForExcludeList + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSDJavaScriptInsertType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*CSDJavaScriptInsertionRule{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "CSDJavaScriptInsertionRule", "CSDJavaScriptInsertionRule", 1) + ","
	}
	repeatedStringForRules += "}"
	repeatedStringForExcludeList := "[]*ShapeJavaScriptExclusionRule{"
	for _, f := range this.ExcludeList {
		repeatedStringForExcludeList += strings.Replace(f.String(), "ShapeJavaScriptExclusionRule", "ShapeJavaScriptExclusionRule", 1) + ","
	}
	repeatedStringForExcludeList += "}"
	s := strings.Join([]string{`&CSDJavaScriptInsertType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`ExcludeList:` + repeatedStringForExcludeList + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSDJavaScriptInsertionRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSDJavaScriptInsertionRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`DomainMatcherChoice:` + fmt.Sprintf("%v", this.DomainMatcherChoice) + `,`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSDJavaScriptInsertionRule_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSDJavaScriptInsertionRule_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSDJavaScriptInsertionRule_Domain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSDJavaScriptInsertionRule_Domain{`,
		`Domain:` + strings.Replace(fmt.Sprintf("%v", this.Domain), "DomainType", "schema.DomainType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MalwareProtectionPolicy) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMalwareProtectionRules := "[]*MalwareProtectionRule{"
	for _, f := range this.MalwareProtectionRules {
		repeatedStringForMalwareProtectionRules += strings.Replace(f.String(), "MalwareProtectionRule", "MalwareProtectionRule", 1) + ","
	}
	repeatedStringForMalwareProtectionRules += "}"
	s := strings.Join([]string{`&MalwareProtectionPolicy{`,
		`MalwareProtectionRules:` + repeatedStringForMalwareProtectionRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *MalwareProtectionRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MalwareProtectionRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`Action:` + strings.Replace(fmt.Sprintf("%v", this.Action), "Action", "schema.Action", 1) + `,`,
		`HttpMethods:` + fmt.Sprintf("%v", this.HttpMethods) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`Domain:` + strings.Replace(fmt.Sprintf("%v", this.Domain), "DomainMatcherType", "schema.DomainMatcherType", 1) + `,`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSecurityTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ShapeBotDefenseType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeBotDefenseType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeBotDefenseType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionalEndpoint", wireType)
			}
			m.RegionalEndpoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionalEndpoint |= ShapeBotDefenseRegion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &ShapeBotDefensePolicyType{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCorsSupport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CorsSupportChoice = &ShapeBotDefenseType_EnableCorsSupport{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableCorsSupport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CorsSupportChoice = &ShapeBotDefenseType_DisableCorsSupport{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotDefenseAdvancedType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotDefenseAdvancedType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotDefenseAdvancedType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Web", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Web == nil {
				m.Web = &views.ObjectRefType{}
			}
			if err := m.Web.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mobile == nil {
				m.Mobile = &views.ObjectRefType{}
			}
			if err := m.Mobile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &BotDefenseAdvancedPolicyType{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotDefenseAdvancedPolicyType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotDefenseAdvancedPolicyType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotDefenseAdvancedPolicyType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectedAppEndpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtectedAppEndpoints = append(m.ProtectedAppEndpoints, &ProtectedAppEndpointType{})
			if err := m.ProtectedAppEndpoints[len(m.ProtectedAppEndpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsDownloadPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsDownloadPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMobileSdk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MobileSdkChoice = &BotDefenseAdvancedPolicyType_DisableMobileSdk{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileSdkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BotAdvancedMobileSDKConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MobileSdkChoice = &BotDefenseAdvancedPolicyType_MobileSdkConfig{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtectedAppEndpointType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtectedAppEndpointType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtectedAppEndpointType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainMatcherChoice = &ProtectedAppEndpointType_AnyDomain{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DomainType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainMatcherChoice = &ProtectedAppEndpointType_Domain{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query, &Query{})
			if err := m.Query[len(m.Query)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestBody = append(m.RequestBody, &RequestBody{})
			if err := m.RequestBody[len(m.RequestBody)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v schema.BotHttpMethod
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecurityTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.BotHttpMethod(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HttpMethods = append(m.HttpMethods, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecurityTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSecurityTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSecurityTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.HttpMethods) == 0 {
					m.HttpMethods = make([]schema.BotHttpMethod, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.BotHttpMethod
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSecurityTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.BotHttpMethod(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HttpMethods = append(m.HttpMethods, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethods", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AppTrafficTypeChoice = &ProtectedAppEndpointType_WebClient{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AppTrafficTypeChoice = &ProtectedAppEndpointType_MobileClient{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebMobileClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WebMobileTrafficType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AppTrafficTypeChoice = &ProtectedAppEndpointType_WebMobileClient{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndefinedFlowLabel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FlowLabelChoice = &ProtectedAppEndpointType_UndefinedFlowLabel{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowLabel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.BotDefenseFlowLabelCategoriesChoiceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FlowLabelChoice = &ProtectedAppEndpointType_FlowLabel{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebMobileTrafficType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebMobileTrafficType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebMobileTrafficType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &policy.HeaderMatcherTypeBasic{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &policy.HeaderMatcherTypeBasic{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileIdentifier", wireType)
			}
			m.MobileIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MobileIdentifier |= MobileIdentifier(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Query) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Query: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Query: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueType = &Query_ExactValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegexValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueType = &Query_RegexValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckPresence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ValueType = &Query_CheckPresence{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueType = &RequestBody_ExactValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegexValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueType = &RequestBody_RegexValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotAdvancedMobileSDKConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotAdvancedMobileSDKConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotAdvancedMobileSDKConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MobileIdentifier == nil {
				m.MobileIdentifier = &MobileTrafficIdentifierType{}
			}
			if err := m.MobileIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeBotDefensePolicyType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeBotDefensePolicyType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeBotDefensePolicyType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectedAppEndpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtectedAppEndpoints = append(m.ProtectedAppEndpoints, &AppEndpointType{})
			if err := m.ProtectedAppEndpoints[len(m.ProtectedAppEndpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsDownloadPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsDownloadPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableJsInsert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JavaScriptChoice = &ShapeBotDefensePolicyType_DisableJsInsert{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsInsertAllPages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShapeJavaScriptInsertAllType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JavaScriptChoice = &ShapeBotDefensePolicyType_JsInsertAllPages{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsInsertAllPagesExcept", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShapeJavaScriptInsertAllWithExceptionsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JavaScriptChoice = &ShapeBotDefensePolicyType_JsInsertAllPagesExcept{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsInsertionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShapeJavaScriptInsertType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JavaScriptChoice = &ShapeBotDefensePolicyType_JsInsertionRules{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMobileSdk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MobileSdkChoice = &ShapeBotDefensePolicyType_DisableMobileSdk{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileSdkConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MobileSDKConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MobileSdkChoice = &ShapeBotDefensePolicyType_MobileSdkConfig{v}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptMode", wireType)
			}
			m.JavascriptMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JavascriptMode |= schema.JavaScriptMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppEndpointType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppEndpointType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppEndpointType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v schema.BotHttpMethod
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecurityTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.BotHttpMethod(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HttpMethods = append(m.HttpMethods, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecurityTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSecurityTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSecurityTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.HttpMethods) == 0 {
					m.HttpMethods = make([]schema.BotHttpMethod, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.BotHttpMethod
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSecurityTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.BotHttpMethod(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HttpMethods = append(m.HttpMethods, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethods", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= URLScheme(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainMatcherChoice = &AppEndpointType_AnyDomain{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DomainType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainMatcherChoice = &AppEndpointType_Domain{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Web", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AppTrafficTypeChoice = &AppEndpointType_Web{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AppTrafficTypeChoice = &AppEndpointType_Mobile{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebMobile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WebMobileTrafficType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AppTrafficTypeChoice = &AppEndpointType_WebMobile{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mitigation == nil {
				m.Mitigation = &policy.ShapeBotMitigationAction{}
			}
			if err := m.Mitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndefinedFlowLabel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FlowLabelChoice = &AppEndpointType_UndefinedFlowLabel{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowLabel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.BotDefenseFlowLabelCategoriesChoiceType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FlowLabelChoice = &AppEndpointType_FlowLabel{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MitigateGoodBots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GoodbotChoice = &AppEndpointType_MitigateGoodBots{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowGoodBots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GoodbotChoice = &AppEndpointType_AllowGoodBots{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryParams = append(m.QueryParams, &policy.QueryParameterMatcherType{})
			if err := m.QueryParams[len(m.QueryParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &policy.HeaderMatcherType{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MobileSDKConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MobileSDKConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MobileSDKConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReloadHeaderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReloadHeaderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileIdentifier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MobileIdentifier == nil {
				m.MobileIdentifier = &MobileTrafficIdentifierType{}
			}
			if err := m.MobileIdentifier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MobileTrafficIdentifierType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MobileTrafficIdentifierType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MobileTrafficIdentifierType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &policy.HeaderMatcherTypeBasic{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeJavaScriptInsertAllType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeJavaScriptInsertAllType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeJavaScriptInsertAllType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptLocation", wireType)
			}
			m.JavascriptLocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JavascriptLocation |= JavaScriptLocation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeJavaScriptInsertAllWithExceptionsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeJavaScriptInsertAllWithExceptionsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeJavaScriptInsertAllWithExceptionsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptLocation", wireType)
			}
			m.JavascriptLocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JavascriptLocation |= JavaScriptLocation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeList = append(m.ExcludeList, &ShapeJavaScriptExclusionRule{})
			if err := m.ExcludeList[len(m.ExcludeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeJavaScriptExclusionRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeJavaScriptExclusionRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeJavaScriptExclusionRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainMatcherChoice = &ShapeJavaScriptExclusionRule_AnyDomain{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DomainType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainMatcherChoice = &ShapeJavaScriptExclusionRule_Domain{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeJavaScriptInsertType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeJavaScriptInsertType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeJavaScriptInsertType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &ShapeJavaScriptInsertionRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeList = append(m.ExcludeList, &ShapeJavaScriptExclusionRule{})
			if err := m.ExcludeList[len(m.ExcludeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeJavaScriptInsertionRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeJavaScriptInsertionRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeJavaScriptInsertionRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainMatcherChoice = &ShapeJavaScriptInsertionRule_AnyDomain{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DomainType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainMatcherChoice = &ShapeJavaScriptInsertionRule_Domain{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptLocation", wireType)
			}
			m.JavascriptLocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JavascriptLocation |= JavaScriptLocation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DDoSMitigationRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DDoSMitigationRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DDoSMitigationRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MitigationAction = &DDoSMitigationRule_Block{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosClientSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DDoSClientSource{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MitigationChoice = &DDoSMitigationRule_DdosClientSource{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &policy.PrefixMatchList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MitigationChoice = &DDoSMitigationRule_IpPrefixList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpirationTimestamp == nil {
				m.ExpirationTimestamp = &types.Timestamp{}
			}
			if err := m.ExpirationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DDoSClientSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DDoSClientSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DDoSClientSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsnList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AsnList == nil {
				m.AsnList = &policy.AsnMatchList{}
			}
			if err := m.AsnList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v policy.CountryCode
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecurityTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= policy.CountryCode(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CountryList = append(m.CountryList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecurityTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSecurityTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSecurityTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.CountryList) == 0 {
					m.CountryList = make([]policy.CountryCode, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v policy.CountryCode
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSecurityTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= policy.CountryCode(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CountryList = append(m.CountryList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryList", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsFingerprintMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsFingerprintMatcher == nil {
				m.TlsFingerprintMatcher = &policy.TlsFingerprintMatcherType{}
			}
			if err := m.TlsFingerprintMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SensitiveDataPolicySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SensitiveDataPolicySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SensitiveDataPolicySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveDataPolicyRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SensitiveDataPolicyRef == nil {
				m.SensitiveDataPolicyRef = &views.ObjectRefType{}
			}
			if err := m.SensitiveDataPolicyRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSideDefenseType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSideDefenseType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSideDefenseType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &ClientSideDefensePolicyType{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSideDefensePolicyType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSideDefensePolicyType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSideDefensePolicyType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableJsInsert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JavaScriptChoice = &ClientSideDefensePolicyType_DisableJsInsert{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsInsertAllPages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JavaScriptChoice = &ClientSideDefensePolicyType_JsInsertAllPages{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsInsertAllPagesExcept", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CSDJavaScriptInsertAllWithExceptionsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JavaScriptChoice = &ClientSideDefensePolicyType_JsInsertAllPagesExcept{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsInsertionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CSDJavaScriptInsertType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JavaScriptChoice = &ClientSideDefensePolicyType_JsInsertionRules{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSDJavaScriptInsertAllWithExceptionsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSDJavaScriptInsertAllWithExceptionsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSDJavaScriptInsertAllWithExceptionsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeList = append(m.ExcludeList, &ShapeJavaScriptExclusionRule{})
			if err := m.ExcludeList[len(m.ExcludeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSDJavaScriptInsertType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSDJavaScriptInsertType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSDJavaScriptInsertType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &CSDJavaScriptInsertionRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeList = append(m.ExcludeList, &ShapeJavaScriptExclusionRule{})
			if err := m.ExcludeList[len(m.ExcludeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSDJavaScriptInsertionRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSDJavaScriptInsertionRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSDJavaScriptInsertionRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainMatcherChoice = &CSDJavaScriptInsertionRule_AnyDomain{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DomainType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainMatcherChoice = &CSDJavaScriptInsertionRule_Domain{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MalwareProtectionPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MalwareProtectionPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MalwareProtectionPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MalwareProtectionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MalwareProtectionRules = append(m.MalwareProtectionRules, &MalwareProtectionRule{})
			if err := m.MalwareProtectionRules[len(m.MalwareProtectionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MalwareProtectionRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MalwareProtectionRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MalwareProtectionRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &schema.Action{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v schema.HttpMethod
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecurityTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.HttpMethod(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HttpMethods = append(m.HttpMethods, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecurityTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSecurityTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSecurityTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.HttpMethods) == 0 {
					m.HttpMethods = make([]schema.HttpMethod, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.HttpMethod
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSecurityTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.HttpMethod(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HttpMethods = append(m.HttpMethods, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethods", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= schema.URLSchemeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Domain == nil {
				m.Domain = &schema.DomainMatcherType{}
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSecurityTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSecurityTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSecurityTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSecurityTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSecurityTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSecurityTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSecurityTypes = fmt.Errorf("proto: unexpected end of group")
)

// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package common_security

import (
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/svcfw"
)

func initializeValidatorRegistry(vr map[string]db.Validator) {
	vr["ves.io.schema.views.common_security.DeleteDoSAutoMitigationRuleReq"] = DeleteDoSAutoMitigationRuleReqValidator()
	vr["ves.io.schema.views.common_security.DeleteDoSAutoMitigationRuleRsp"] = DeleteDoSAutoMitigationRuleRspValidator()
	vr["ves.io.schema.views.common_security.GetDoSAutoMitigationRulesReq"] = GetDoSAutoMitigationRulesReqValidator()
	vr["ves.io.schema.views.common_security.GetDoSAutoMitigationRulesRsp"] = GetDoSAutoMitigationRulesRspValidator()
	vr["ves.io.schema.views.common_security.GetSecurityConfigRsp"] = GetSecurityConfigRspValidator()

	vr["ves.io.schema.views.common_security.AppEndpointType"] = AppEndpointTypeValidator()
	vr["ves.io.schema.views.common_security.BotAdvancedMobileSDKConfigType"] = BotAdvancedMobileSDKConfigTypeValidator()
	vr["ves.io.schema.views.common_security.BotDefenseAdvancedPolicyType"] = BotDefenseAdvancedPolicyTypeValidator()
	vr["ves.io.schema.views.common_security.BotDefenseAdvancedType"] = BotDefenseAdvancedTypeValidator()
	vr["ves.io.schema.views.common_security.CSDJavaScriptInsertAllWithExceptionsType"] = CSDJavaScriptInsertAllWithExceptionsTypeValidator()
	vr["ves.io.schema.views.common_security.CSDJavaScriptInsertType"] = CSDJavaScriptInsertTypeValidator()
	vr["ves.io.schema.views.common_security.CSDJavaScriptInsertionRule"] = CSDJavaScriptInsertionRuleValidator()
	vr["ves.io.schema.views.common_security.ClientSideDefensePolicyType"] = ClientSideDefensePolicyTypeValidator()
	vr["ves.io.schema.views.common_security.ClientSideDefenseType"] = ClientSideDefenseTypeValidator()
	vr["ves.io.schema.views.common_security.DDoSClientSource"] = DDoSClientSourceValidator()
	vr["ves.io.schema.views.common_security.DDoSMitigationRule"] = DDoSMitigationRuleValidator()
	vr["ves.io.schema.views.common_security.MalwareProtectionPolicy"] = MalwareProtectionPolicyValidator()
	vr["ves.io.schema.views.common_security.MalwareProtectionRule"] = MalwareProtectionRuleValidator()
	vr["ves.io.schema.views.common_security.MobileSDKConfigType"] = MobileSDKConfigTypeValidator()
	vr["ves.io.schema.views.common_security.MobileTrafficIdentifierType"] = MobileTrafficIdentifierTypeValidator()
	vr["ves.io.schema.views.common_security.ProtectedAppEndpointType"] = ProtectedAppEndpointTypeValidator()
	vr["ves.io.schema.views.common_security.Query"] = QueryValidator()
	vr["ves.io.schema.views.common_security.RequestBody"] = RequestBodyValidator()
	vr["ves.io.schema.views.common_security.SensitiveDataPolicySettings"] = SensitiveDataPolicySettingsValidator()
	vr["ves.io.schema.views.common_security.ShapeBotDefensePolicyType"] = ShapeBotDefensePolicyTypeValidator()
	vr["ves.io.schema.views.common_security.ShapeBotDefenseType"] = ShapeBotDefenseTypeValidator()
	vr["ves.io.schema.views.common_security.ShapeJavaScriptExclusionRule"] = ShapeJavaScriptExclusionRuleValidator()
	vr["ves.io.schema.views.common_security.ShapeJavaScriptInsertAllType"] = ShapeJavaScriptInsertAllTypeValidator()
	vr["ves.io.schema.views.common_security.ShapeJavaScriptInsertAllWithExceptionsType"] = ShapeJavaScriptInsertAllWithExceptionsTypeValidator()
	vr["ves.io.schema.views.common_security.ShapeJavaScriptInsertType"] = ShapeJavaScriptInsertTypeValidator()
	vr["ves.io.schema.views.common_security.ShapeJavaScriptInsertionRule"] = ShapeJavaScriptInsertionRuleValidator()
	vr["ves.io.schema.views.common_security.WebMobileTrafficType"] = WebMobileTrafficTypeValidator()

}

func initializeEntryRegistry(mdr *svcfw.MDRegistry) {

}

func initializeRPCRegistry(mdr *svcfw.MDRegistry) {

}

func initializeAPIGwServiceSlugsRegistry(sm map[string]string) {

}

func initializeP0PolicyRegistry(sm map[string]svcfw.P0PolicyInfo) {

}

func initializeCRUDServiceRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	var (
		csr       *svcfw.CRUDServiceRegistry
		customCSR *svcfw.CustomServiceRegistry
	)
	_, _ = csr, customCSR

}

func InitializeMDRegistry(mdr *svcfw.MDRegistry, isExternal bool) {
	initializeEntryRegistry(mdr)
	initializeValidatorRegistry(mdr.ValidatorRegistry)

	initializeCRUDServiceRegistry(mdr, isExternal)
	if isExternal {
		return
	}

	initializeRPCRegistry(mdr)
	initializeAPIGwServiceSlugsRegistry(mdr.APIGwServiceSlugs)
	initializeP0PolicyRegistry(mdr.P0PolicyRegistry)

}

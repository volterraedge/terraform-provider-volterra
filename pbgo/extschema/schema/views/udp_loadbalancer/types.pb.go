// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/udp_loadbalancer/types.proto

package udp_loadbalancer

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
	virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "View Specification"
// Shape of the UDP load balancer view specification
type GlobalSpecType struct {
	// Domains
	//
	// x-displayName: "Domains"
	// x-example: "www.foo.com"
	// A list of domains (host/authority header) that will be matched to this load balancer.
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Manage DNS Domain
	//
	// x-displayName: "Automatically Manage DNS Records"
	// DNS records for domains will be managed automatically by F5 Distributed Cloud.
	// As a prerequisite, the domain to be delegated to F5 Distributed Cloud using the Delegated Domain feature or a DNS CNAME record must be created in your DNS provider's portal.
	DnsVolterraManaged bool `protobuf:"varint,5,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
	// Listen Port
	//
	// x-required
	// x-displayName: "Listen Port"
	// Select a single Listen Port.
	//
	// Types that are valid to be assigned to PortChoice:
	//	*GlobalSpecType_ListenPort
	//	*GlobalSpecType_PortRanges
	PortChoice isGlobalSpecType_PortChoice `protobuf_oneof:"port_choice"`
	// Origin Pools with Weights
	//
	// x-displayName: "Origin Pools"
	// Origin pools with weights and priorities used for this load balancer.
	OriginPoolsWeights []*views.OriginPoolWithWeight `protobuf:"bytes,6,rep,name=origin_pools_weights,json=originPoolsWeights,proto3" json:"origin_pools_weights,omitempty"`
	// Advertise choice
	//
	// x-displayName: "Where to Advertise the VIP"
	// x-required
	// This is a choice to select the method to advertise the VIP.
	//
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*GlobalSpecType_DoNotAdvertise
	//	*GlobalSpecType_AdvertiseOnPublicDefaultVip
	//	*GlobalSpecType_AdvertiseOnPublic
	//	*GlobalSpecType_AdvertiseCustom
	AdvertiseChoice isGlobalSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Load Balancing Control
	//
	// x-displayName: "Load Balancing Control"
	// x-required
	// Selection for load balancing strategy.
	//
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*GlobalSpecType_HashPolicyChoiceRoundRobin
	//	*GlobalSpecType_HashPolicyChoiceLeastActive
	//	*GlobalSpecType_HashPolicyChoiceRandom
	//	*GlobalSpecType_HashPolicyChoiceSourceIpStickiness
	HashPolicyChoice isGlobalSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	// Idle timeout
	//
	// x-displayName: "Idle Timeout"
	// x-example: "2000"
	// The amount of time that a session can exist without upstream or downstream activity, in milliseconds.
	IdleTimeout uint32 `protobuf:"varint,17,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Oneof for Cluster retraction
	//
	// x-displayName: "Select Cluster retract option"
	// Specifies whether retraction of cluster has to be enabled or
	// disabled
	//
	// Types that are valid to be assigned to ClusterRetractChoice:
	//	*GlobalSpecType_RetractCluster
	//	*GlobalSpecType_DoNotRetractCluster
	ClusterRetractChoice isGlobalSpecType_ClusterRetractChoice `protobuf_oneof:"cluster_retract_choice"`
	// Proxy choice
	//
	// x-displayName: "Load Balancer Type"
	// x-required
	// Select a type of load balancer.
	//
	// Types that are valid to be assigned to LoadbalancerType:
	//	*GlobalSpecType_Udp
	LoadbalancerType isGlobalSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Per Packet Load Balancing
	//
	// x-displayName: "Per Packet Load Balancing"
	// Per packet load balancing:
	// If disabled (default): First packet identified by source IP/port and local IP/port is sent to an upstream server as the load balancing algorithm dictates, and subsequent packets with the same identity are forwarded to the same upstream server without rechecking the algorithm
	// If enabled: Each packet is directed to an upstream server as the load balancing algorithm dictates.
	EnablePerPacketLoadBalancing bool `protobuf:"varint,23,opt,name=enable_per_packet_load_balancing,json=enablePerPacketLoadBalancing,proto3" json:"enable_per_packet_load_balancing,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
	// host name
	//
	// x-displayName: "Host Name"
	// x-example: "ves-io-cf8684b9-a18f-4843-a24f-1f9ee8ea2776.ac.vh.ves.io"
	// Internally generated host name to be used for the virtual host
	HostName string `protobuf:"bytes,1001,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// DNS information
	//
	// x-displayName: "DNS Information"
	// DNS information for this virtual host
	DnsInfo []*virtual_host_dns_info.DnsInfo `protobuf:"bytes,1002,rep,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`
	// Internet VIP Info
	//
	// x-displayName: "Internet VIP Info"
	// Internet VIP Info
	InternetVipInfo []*views.InternetVIPInfo `protobuf:"bytes,1100,rep,name=internet_vip_info,json=internetVipInfo,proto3" json:"internet_vip_info,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d17f0d50ee479ed, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_PortChoice interface {
	isGlobalSpecType_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_AdvertiseChoice interface {
	isGlobalSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_HashPolicyChoice interface {
	isGlobalSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ClusterRetractChoice interface {
	isGlobalSpecType_ClusterRetractChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_LoadbalancerType interface {
	isGlobalSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_ListenPort struct {
	ListenPort uint32 `protobuf:"varint,3,opt,name=listen_port,json=listenPort,proto3,oneof" json:"listen_port,omitempty"`
}
type GlobalSpecType_PortRanges struct {
	PortRanges string `protobuf:"bytes,4,opt,name=port_ranges,json=portRanges,proto3,oneof" json:"port_ranges,omitempty"`
}
type GlobalSpecType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,8,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type GlobalSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,9,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type GlobalSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,10,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type GlobalSpecType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,11,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type GlobalSpecType_HashPolicyChoiceRoundRobin struct {
	HashPolicyChoiceRoundRobin *schema.Empty `protobuf:"bytes,13,opt,name=hash_policy_choice_round_robin,json=hashPolicyChoiceRoundRobin,proto3,oneof" json:"hash_policy_choice_round_robin,omitempty"`
}
type GlobalSpecType_HashPolicyChoiceLeastActive struct {
	HashPolicyChoiceLeastActive *schema.Empty `protobuf:"bytes,14,opt,name=hash_policy_choice_least_active,json=hashPolicyChoiceLeastActive,proto3,oneof" json:"hash_policy_choice_least_active,omitempty"`
}
type GlobalSpecType_HashPolicyChoiceRandom struct {
	HashPolicyChoiceRandom *schema.Empty `protobuf:"bytes,15,opt,name=hash_policy_choice_random,json=hashPolicyChoiceRandom,proto3,oneof" json:"hash_policy_choice_random,omitempty"`
}
type GlobalSpecType_HashPolicyChoiceSourceIpStickiness struct {
	HashPolicyChoiceSourceIpStickiness *schema.Empty `protobuf:"bytes,16,opt,name=hash_policy_choice_source_ip_stickiness,json=hashPolicyChoiceSourceIpStickiness,proto3,oneof" json:"hash_policy_choice_source_ip_stickiness,omitempty"`
}
type GlobalSpecType_RetractCluster struct {
	RetractCluster *schema.Empty `protobuf:"bytes,19,opt,name=retract_cluster,json=retractCluster,proto3,oneof" json:"retract_cluster,omitempty"`
}
type GlobalSpecType_DoNotRetractCluster struct {
	DoNotRetractCluster *schema.Empty `protobuf:"bytes,20,opt,name=do_not_retract_cluster,json=doNotRetractCluster,proto3,oneof" json:"do_not_retract_cluster,omitempty"`
}
type GlobalSpecType_Udp struct {
	Udp *schema.Empty `protobuf:"bytes,22,opt,name=udp,proto3,oneof" json:"udp,omitempty"`
}

func (*GlobalSpecType_ListenPort) isGlobalSpecType_PortChoice()                               {}
func (*GlobalSpecType_PortRanges) isGlobalSpecType_PortChoice()                               {}
func (*GlobalSpecType_DoNotAdvertise) isGlobalSpecType_AdvertiseChoice()                      {}
func (*GlobalSpecType_AdvertiseOnPublicDefaultVip) isGlobalSpecType_AdvertiseChoice()         {}
func (*GlobalSpecType_AdvertiseOnPublic) isGlobalSpecType_AdvertiseChoice()                   {}
func (*GlobalSpecType_AdvertiseCustom) isGlobalSpecType_AdvertiseChoice()                     {}
func (*GlobalSpecType_HashPolicyChoiceRoundRobin) isGlobalSpecType_HashPolicyChoice()         {}
func (*GlobalSpecType_HashPolicyChoiceLeastActive) isGlobalSpecType_HashPolicyChoice()        {}
func (*GlobalSpecType_HashPolicyChoiceRandom) isGlobalSpecType_HashPolicyChoice()             {}
func (*GlobalSpecType_HashPolicyChoiceSourceIpStickiness) isGlobalSpecType_HashPolicyChoice() {}
func (*GlobalSpecType_RetractCluster) isGlobalSpecType_ClusterRetractChoice()                 {}
func (*GlobalSpecType_DoNotRetractCluster) isGlobalSpecType_ClusterRetractChoice()            {}
func (*GlobalSpecType_Udp) isGlobalSpecType_LoadbalancerType()                                {}

func (m *GlobalSpecType) GetPortChoice() isGlobalSpecType_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}
func (m *GlobalSpecType) GetAdvertiseChoice() isGlobalSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *GlobalSpecType) GetHashPolicyChoice() isGlobalSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *GlobalSpecType) GetClusterRetractChoice() isGlobalSpecType_ClusterRetractChoice {
	if m != nil {
		return m.ClusterRetractChoice
	}
	return nil
}
func (m *GlobalSpecType) GetLoadbalancerType() isGlobalSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}

func (m *GlobalSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GlobalSpecType) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

func (m *GlobalSpecType) GetListenPort() uint32 {
	if x, ok := m.GetPortChoice().(*GlobalSpecType_ListenPort); ok {
		return x.ListenPort
	}
	return 0
}

func (m *GlobalSpecType) GetPortRanges() string {
	if x, ok := m.GetPortChoice().(*GlobalSpecType_PortRanges); ok {
		return x.PortRanges
	}
	return ""
}

func (m *GlobalSpecType) GetOriginPoolsWeights() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.OriginPoolsWeights
	}
	return nil
}

func (m *GlobalSpecType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *GlobalSpecType) GetHashPolicyChoiceRoundRobin() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_HashPolicyChoiceRoundRobin); ok {
		return x.HashPolicyChoiceRoundRobin
	}
	return nil
}

func (m *GlobalSpecType) GetHashPolicyChoiceLeastActive() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_HashPolicyChoiceLeastActive); ok {
		return x.HashPolicyChoiceLeastActive
	}
	return nil
}

func (m *GlobalSpecType) GetHashPolicyChoiceRandom() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_HashPolicyChoiceRandom); ok {
		return x.HashPolicyChoiceRandom
	}
	return nil
}

func (m *GlobalSpecType) GetHashPolicyChoiceSourceIpStickiness() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_HashPolicyChoiceSourceIpStickiness); ok {
		return x.HashPolicyChoiceSourceIpStickiness
	}
	return nil
}

func (m *GlobalSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *GlobalSpecType) GetRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*GlobalSpecType_RetractCluster); ok {
		return x.RetractCluster
	}
	return nil
}

func (m *GlobalSpecType) GetDoNotRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*GlobalSpecType_DoNotRetractCluster); ok {
		return x.DoNotRetractCluster
	}
	return nil
}

func (m *GlobalSpecType) GetUdp() *schema.Empty {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_Udp); ok {
		return x.Udp
	}
	return nil
}

func (m *GlobalSpecType) GetEnablePerPacketLoadBalancing() bool {
	if m != nil {
		return m.EnablePerPacketLoadBalancing
	}
	return false
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GlobalSpecType) GetDnsInfo() []*virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GlobalSpecType) GetInternetVipInfo() []*views.InternetVIPInfo {
	if m != nil {
		return m.InternetVipInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_ListenPort)(nil),
		(*GlobalSpecType_PortRanges)(nil),
		(*GlobalSpecType_DoNotAdvertise)(nil),
		(*GlobalSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*GlobalSpecType_AdvertiseOnPublic)(nil),
		(*GlobalSpecType_AdvertiseCustom)(nil),
		(*GlobalSpecType_HashPolicyChoiceRoundRobin)(nil),
		(*GlobalSpecType_HashPolicyChoiceLeastActive)(nil),
		(*GlobalSpecType_HashPolicyChoiceRandom)(nil),
		(*GlobalSpecType_HashPolicyChoiceSourceIpStickiness)(nil),
		(*GlobalSpecType_RetractCluster)(nil),
		(*GlobalSpecType_DoNotRetractCluster)(nil),
		(*GlobalSpecType_Udp)(nil),
	}
}

// CreateSpecType
//
// x-displayName: "Create UDP Load Balancer"
// Shape of the UDP load balancer create specification
type CreateSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Types that are valid to be assigned to PortChoice:
	//	*CreateSpecType_ListenPort
	//	*CreateSpecType_PortRanges
	PortChoice         isCreateSpecType_PortChoice   `protobuf_oneof:"port_choice"`
	DnsVolterraManaged bool                          `protobuf:"varint,5,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
	OriginPoolsWeights []*views.OriginPoolWithWeight `protobuf:"bytes,6,rep,name=origin_pools_weights,json=originPoolsWeights,proto3" json:"origin_pools_weights,omitempty"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*CreateSpecType_DoNotAdvertise
	//	*CreateSpecType_AdvertiseOnPublicDefaultVip
	//	*CreateSpecType_AdvertiseOnPublic
	//	*CreateSpecType_AdvertiseCustom
	AdvertiseChoice isCreateSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*CreateSpecType_HashPolicyChoiceRoundRobin
	//	*CreateSpecType_HashPolicyChoiceLeastActive
	//	*CreateSpecType_HashPolicyChoiceRandom
	//	*CreateSpecType_HashPolicyChoiceSourceIpStickiness
	HashPolicyChoice isCreateSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	IdleTimeout      uint32                            `protobuf:"varint,17,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Types that are valid to be assigned to ClusterRetractChoice:
	//	*CreateSpecType_RetractCluster
	//	*CreateSpecType_DoNotRetractCluster
	ClusterRetractChoice isCreateSpecType_ClusterRetractChoice `protobuf_oneof:"cluster_retract_choice"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*CreateSpecType_Udp
	LoadbalancerType             isCreateSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	EnablePerPacketLoadBalancing bool                              `protobuf:"varint,23,opt,name=enable_per_packet_load_balancing,json=enablePerPacketLoadBalancing,proto3" json:"enable_per_packet_load_balancing,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d17f0d50ee479ed, []int{1}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_PortChoice interface {
	isCreateSpecType_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_AdvertiseChoice interface {
	isCreateSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_HashPolicyChoice interface {
	isCreateSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ClusterRetractChoice interface {
	isCreateSpecType_ClusterRetractChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_LoadbalancerType interface {
	isCreateSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_ListenPort struct {
	ListenPort uint32 `protobuf:"varint,3,opt,name=listen_port,json=listenPort,proto3,oneof" json:"listen_port,omitempty"`
}
type CreateSpecType_PortRanges struct {
	PortRanges string `protobuf:"bytes,4,opt,name=port_ranges,json=portRanges,proto3,oneof" json:"port_ranges,omitempty"`
}
type CreateSpecType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,8,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type CreateSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,9,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type CreateSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,10,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type CreateSpecType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,11,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type CreateSpecType_HashPolicyChoiceRoundRobin struct {
	HashPolicyChoiceRoundRobin *schema.Empty `protobuf:"bytes,13,opt,name=hash_policy_choice_round_robin,json=hashPolicyChoiceRoundRobin,proto3,oneof" json:"hash_policy_choice_round_robin,omitempty"`
}
type CreateSpecType_HashPolicyChoiceLeastActive struct {
	HashPolicyChoiceLeastActive *schema.Empty `protobuf:"bytes,14,opt,name=hash_policy_choice_least_active,json=hashPolicyChoiceLeastActive,proto3,oneof" json:"hash_policy_choice_least_active,omitempty"`
}
type CreateSpecType_HashPolicyChoiceRandom struct {
	HashPolicyChoiceRandom *schema.Empty `protobuf:"bytes,15,opt,name=hash_policy_choice_random,json=hashPolicyChoiceRandom,proto3,oneof" json:"hash_policy_choice_random,omitempty"`
}
type CreateSpecType_HashPolicyChoiceSourceIpStickiness struct {
	HashPolicyChoiceSourceIpStickiness *schema.Empty `protobuf:"bytes,16,opt,name=hash_policy_choice_source_ip_stickiness,json=hashPolicyChoiceSourceIpStickiness,proto3,oneof" json:"hash_policy_choice_source_ip_stickiness,omitempty"`
}
type CreateSpecType_RetractCluster struct {
	RetractCluster *schema.Empty `protobuf:"bytes,19,opt,name=retract_cluster,json=retractCluster,proto3,oneof" json:"retract_cluster,omitempty"`
}
type CreateSpecType_DoNotRetractCluster struct {
	DoNotRetractCluster *schema.Empty `protobuf:"bytes,20,opt,name=do_not_retract_cluster,json=doNotRetractCluster,proto3,oneof" json:"do_not_retract_cluster,omitempty"`
}
type CreateSpecType_Udp struct {
	Udp *schema.Empty `protobuf:"bytes,22,opt,name=udp,proto3,oneof" json:"udp,omitempty"`
}

func (*CreateSpecType_ListenPort) isCreateSpecType_PortChoice()                               {}
func (*CreateSpecType_PortRanges) isCreateSpecType_PortChoice()                               {}
func (*CreateSpecType_DoNotAdvertise) isCreateSpecType_AdvertiseChoice()                      {}
func (*CreateSpecType_AdvertiseOnPublicDefaultVip) isCreateSpecType_AdvertiseChoice()         {}
func (*CreateSpecType_AdvertiseOnPublic) isCreateSpecType_AdvertiseChoice()                   {}
func (*CreateSpecType_AdvertiseCustom) isCreateSpecType_AdvertiseChoice()                     {}
func (*CreateSpecType_HashPolicyChoiceRoundRobin) isCreateSpecType_HashPolicyChoice()         {}
func (*CreateSpecType_HashPolicyChoiceLeastActive) isCreateSpecType_HashPolicyChoice()        {}
func (*CreateSpecType_HashPolicyChoiceRandom) isCreateSpecType_HashPolicyChoice()             {}
func (*CreateSpecType_HashPolicyChoiceSourceIpStickiness) isCreateSpecType_HashPolicyChoice() {}
func (*CreateSpecType_RetractCluster) isCreateSpecType_ClusterRetractChoice()                 {}
func (*CreateSpecType_DoNotRetractCluster) isCreateSpecType_ClusterRetractChoice()            {}
func (*CreateSpecType_Udp) isCreateSpecType_LoadbalancerType()                                {}

func (m *CreateSpecType) GetPortChoice() isCreateSpecType_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}
func (m *CreateSpecType) GetAdvertiseChoice() isCreateSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *CreateSpecType) GetHashPolicyChoice() isCreateSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *CreateSpecType) GetClusterRetractChoice() isCreateSpecType_ClusterRetractChoice {
	if m != nil {
		return m.ClusterRetractChoice
	}
	return nil
}
func (m *CreateSpecType) GetLoadbalancerType() isCreateSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}

func (m *CreateSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *CreateSpecType) GetListenPort() uint32 {
	if x, ok := m.GetPortChoice().(*CreateSpecType_ListenPort); ok {
		return x.ListenPort
	}
	return 0
}

func (m *CreateSpecType) GetPortRanges() string {
	if x, ok := m.GetPortChoice().(*CreateSpecType_PortRanges); ok {
		return x.PortRanges
	}
	return ""
}

func (m *CreateSpecType) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

func (m *CreateSpecType) GetOriginPoolsWeights() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.OriginPoolsWeights
	}
	return nil
}

func (m *CreateSpecType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *CreateSpecType) GetHashPolicyChoiceRoundRobin() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_HashPolicyChoiceRoundRobin); ok {
		return x.HashPolicyChoiceRoundRobin
	}
	return nil
}

func (m *CreateSpecType) GetHashPolicyChoiceLeastActive() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_HashPolicyChoiceLeastActive); ok {
		return x.HashPolicyChoiceLeastActive
	}
	return nil
}

func (m *CreateSpecType) GetHashPolicyChoiceRandom() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_HashPolicyChoiceRandom); ok {
		return x.HashPolicyChoiceRandom
	}
	return nil
}

func (m *CreateSpecType) GetHashPolicyChoiceSourceIpStickiness() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_HashPolicyChoiceSourceIpStickiness); ok {
		return x.HashPolicyChoiceSourceIpStickiness
	}
	return nil
}

func (m *CreateSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *CreateSpecType) GetRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*CreateSpecType_RetractCluster); ok {
		return x.RetractCluster
	}
	return nil
}

func (m *CreateSpecType) GetDoNotRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*CreateSpecType_DoNotRetractCluster); ok {
		return x.DoNotRetractCluster
	}
	return nil
}

func (m *CreateSpecType) GetUdp() *schema.Empty {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_Udp); ok {
		return x.Udp
	}
	return nil
}

func (m *CreateSpecType) GetEnablePerPacketLoadBalancing() bool {
	if m != nil {
		return m.EnablePerPacketLoadBalancing
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_ListenPort)(nil),
		(*CreateSpecType_PortRanges)(nil),
		(*CreateSpecType_DoNotAdvertise)(nil),
		(*CreateSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*CreateSpecType_AdvertiseOnPublic)(nil),
		(*CreateSpecType_AdvertiseCustom)(nil),
		(*CreateSpecType_HashPolicyChoiceRoundRobin)(nil),
		(*CreateSpecType_HashPolicyChoiceLeastActive)(nil),
		(*CreateSpecType_HashPolicyChoiceRandom)(nil),
		(*CreateSpecType_HashPolicyChoiceSourceIpStickiness)(nil),
		(*CreateSpecType_RetractCluster)(nil),
		(*CreateSpecType_DoNotRetractCluster)(nil),
		(*CreateSpecType_Udp)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace UDP Load Balancer"
// Shape of the UDP load balancer replace specification
type ReplaceSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Types that are valid to be assigned to PortChoice:
	//	*ReplaceSpecType_ListenPort
	//	*ReplaceSpecType_PortRanges
	PortChoice         isReplaceSpecType_PortChoice  `protobuf_oneof:"port_choice"`
	DnsVolterraManaged bool                          `protobuf:"varint,5,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
	OriginPoolsWeights []*views.OriginPoolWithWeight `protobuf:"bytes,6,rep,name=origin_pools_weights,json=originPoolsWeights,proto3" json:"origin_pools_weights,omitempty"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*ReplaceSpecType_DoNotAdvertise
	//	*ReplaceSpecType_AdvertiseOnPublicDefaultVip
	//	*ReplaceSpecType_AdvertiseOnPublic
	//	*ReplaceSpecType_AdvertiseCustom
	AdvertiseChoice isReplaceSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*ReplaceSpecType_HashPolicyChoiceRoundRobin
	//	*ReplaceSpecType_HashPolicyChoiceLeastActive
	//	*ReplaceSpecType_HashPolicyChoiceRandom
	//	*ReplaceSpecType_HashPolicyChoiceSourceIpStickiness
	HashPolicyChoice isReplaceSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	IdleTimeout      uint32                             `protobuf:"varint,17,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Types that are valid to be assigned to ClusterRetractChoice:
	//	*ReplaceSpecType_RetractCluster
	//	*ReplaceSpecType_DoNotRetractCluster
	ClusterRetractChoice isReplaceSpecType_ClusterRetractChoice `protobuf_oneof:"cluster_retract_choice"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*ReplaceSpecType_Udp
	LoadbalancerType             isReplaceSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	EnablePerPacketLoadBalancing bool                               `protobuf:"varint,23,opt,name=enable_per_packet_load_balancing,json=enablePerPacketLoadBalancing,proto3" json:"enable_per_packet_load_balancing,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d17f0d50ee479ed, []int{2}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_PortChoice interface {
	isReplaceSpecType_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_AdvertiseChoice interface {
	isReplaceSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_HashPolicyChoice interface {
	isReplaceSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ClusterRetractChoice interface {
	isReplaceSpecType_ClusterRetractChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_LoadbalancerType interface {
	isReplaceSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_ListenPort struct {
	ListenPort uint32 `protobuf:"varint,3,opt,name=listen_port,json=listenPort,proto3,oneof" json:"listen_port,omitempty"`
}
type ReplaceSpecType_PortRanges struct {
	PortRanges string `protobuf:"bytes,4,opt,name=port_ranges,json=portRanges,proto3,oneof" json:"port_ranges,omitempty"`
}
type ReplaceSpecType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,8,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type ReplaceSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,9,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type ReplaceSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,10,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type ReplaceSpecType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,11,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type ReplaceSpecType_HashPolicyChoiceRoundRobin struct {
	HashPolicyChoiceRoundRobin *schema.Empty `protobuf:"bytes,13,opt,name=hash_policy_choice_round_robin,json=hashPolicyChoiceRoundRobin,proto3,oneof" json:"hash_policy_choice_round_robin,omitempty"`
}
type ReplaceSpecType_HashPolicyChoiceLeastActive struct {
	HashPolicyChoiceLeastActive *schema.Empty `protobuf:"bytes,14,opt,name=hash_policy_choice_least_active,json=hashPolicyChoiceLeastActive,proto3,oneof" json:"hash_policy_choice_least_active,omitempty"`
}
type ReplaceSpecType_HashPolicyChoiceRandom struct {
	HashPolicyChoiceRandom *schema.Empty `protobuf:"bytes,15,opt,name=hash_policy_choice_random,json=hashPolicyChoiceRandom,proto3,oneof" json:"hash_policy_choice_random,omitempty"`
}
type ReplaceSpecType_HashPolicyChoiceSourceIpStickiness struct {
	HashPolicyChoiceSourceIpStickiness *schema.Empty `protobuf:"bytes,16,opt,name=hash_policy_choice_source_ip_stickiness,json=hashPolicyChoiceSourceIpStickiness,proto3,oneof" json:"hash_policy_choice_source_ip_stickiness,omitempty"`
}
type ReplaceSpecType_RetractCluster struct {
	RetractCluster *schema.Empty `protobuf:"bytes,19,opt,name=retract_cluster,json=retractCluster,proto3,oneof" json:"retract_cluster,omitempty"`
}
type ReplaceSpecType_DoNotRetractCluster struct {
	DoNotRetractCluster *schema.Empty `protobuf:"bytes,20,opt,name=do_not_retract_cluster,json=doNotRetractCluster,proto3,oneof" json:"do_not_retract_cluster,omitempty"`
}
type ReplaceSpecType_Udp struct {
	Udp *schema.Empty `protobuf:"bytes,22,opt,name=udp,proto3,oneof" json:"udp,omitempty"`
}

func (*ReplaceSpecType_ListenPort) isReplaceSpecType_PortChoice()                               {}
func (*ReplaceSpecType_PortRanges) isReplaceSpecType_PortChoice()                               {}
func (*ReplaceSpecType_DoNotAdvertise) isReplaceSpecType_AdvertiseChoice()                      {}
func (*ReplaceSpecType_AdvertiseOnPublicDefaultVip) isReplaceSpecType_AdvertiseChoice()         {}
func (*ReplaceSpecType_AdvertiseOnPublic) isReplaceSpecType_AdvertiseChoice()                   {}
func (*ReplaceSpecType_AdvertiseCustom) isReplaceSpecType_AdvertiseChoice()                     {}
func (*ReplaceSpecType_HashPolicyChoiceRoundRobin) isReplaceSpecType_HashPolicyChoice()         {}
func (*ReplaceSpecType_HashPolicyChoiceLeastActive) isReplaceSpecType_HashPolicyChoice()        {}
func (*ReplaceSpecType_HashPolicyChoiceRandom) isReplaceSpecType_HashPolicyChoice()             {}
func (*ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) isReplaceSpecType_HashPolicyChoice() {}
func (*ReplaceSpecType_RetractCluster) isReplaceSpecType_ClusterRetractChoice()                 {}
func (*ReplaceSpecType_DoNotRetractCluster) isReplaceSpecType_ClusterRetractChoice()            {}
func (*ReplaceSpecType_Udp) isReplaceSpecType_LoadbalancerType()                                {}

func (m *ReplaceSpecType) GetPortChoice() isReplaceSpecType_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetAdvertiseChoice() isReplaceSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetHashPolicyChoice() isReplaceSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetClusterRetractChoice() isReplaceSpecType_ClusterRetractChoice {
	if m != nil {
		return m.ClusterRetractChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetLoadbalancerType() isReplaceSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}

func (m *ReplaceSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *ReplaceSpecType) GetListenPort() uint32 {
	if x, ok := m.GetPortChoice().(*ReplaceSpecType_ListenPort); ok {
		return x.ListenPort
	}
	return 0
}

func (m *ReplaceSpecType) GetPortRanges() string {
	if x, ok := m.GetPortChoice().(*ReplaceSpecType_PortRanges); ok {
		return x.PortRanges
	}
	return ""
}

func (m *ReplaceSpecType) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

func (m *ReplaceSpecType) GetOriginPoolsWeights() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.OriginPoolsWeights
	}
	return nil
}

func (m *ReplaceSpecType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *ReplaceSpecType) GetHashPolicyChoiceRoundRobin() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_HashPolicyChoiceRoundRobin); ok {
		return x.HashPolicyChoiceRoundRobin
	}
	return nil
}

func (m *ReplaceSpecType) GetHashPolicyChoiceLeastActive() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_HashPolicyChoiceLeastActive); ok {
		return x.HashPolicyChoiceLeastActive
	}
	return nil
}

func (m *ReplaceSpecType) GetHashPolicyChoiceRandom() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_HashPolicyChoiceRandom); ok {
		return x.HashPolicyChoiceRandom
	}
	return nil
}

func (m *ReplaceSpecType) GetHashPolicyChoiceSourceIpStickiness() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_HashPolicyChoiceSourceIpStickiness); ok {
		return x.HashPolicyChoiceSourceIpStickiness
	}
	return nil
}

func (m *ReplaceSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *ReplaceSpecType) GetRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*ReplaceSpecType_RetractCluster); ok {
		return x.RetractCluster
	}
	return nil
}

func (m *ReplaceSpecType) GetDoNotRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*ReplaceSpecType_DoNotRetractCluster); ok {
		return x.DoNotRetractCluster
	}
	return nil
}

func (m *ReplaceSpecType) GetUdp() *schema.Empty {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_Udp); ok {
		return x.Udp
	}
	return nil
}

func (m *ReplaceSpecType) GetEnablePerPacketLoadBalancing() bool {
	if m != nil {
		return m.EnablePerPacketLoadBalancing
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_ListenPort)(nil),
		(*ReplaceSpecType_PortRanges)(nil),
		(*ReplaceSpecType_DoNotAdvertise)(nil),
		(*ReplaceSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*ReplaceSpecType_AdvertiseOnPublic)(nil),
		(*ReplaceSpecType_AdvertiseCustom)(nil),
		(*ReplaceSpecType_HashPolicyChoiceRoundRobin)(nil),
		(*ReplaceSpecType_HashPolicyChoiceLeastActive)(nil),
		(*ReplaceSpecType_HashPolicyChoiceRandom)(nil),
		(*ReplaceSpecType_HashPolicyChoiceSourceIpStickiness)(nil),
		(*ReplaceSpecType_RetractCluster)(nil),
		(*ReplaceSpecType_DoNotRetractCluster)(nil),
		(*ReplaceSpecType_Udp)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get UDP Load Balancer"
// Shape of the UDP load balancer get specification
type GetSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Types that are valid to be assigned to PortChoice:
	//	*GetSpecType_ListenPort
	//	*GetSpecType_PortRanges
	PortChoice         isGetSpecType_PortChoice      `protobuf_oneof:"port_choice"`
	DnsVolterraManaged bool                          `protobuf:"varint,5,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
	OriginPoolsWeights []*views.OriginPoolWithWeight `protobuf:"bytes,6,rep,name=origin_pools_weights,json=originPoolsWeights,proto3" json:"origin_pools_weights,omitempty"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*GetSpecType_DoNotAdvertise
	//	*GetSpecType_AdvertiseOnPublicDefaultVip
	//	*GetSpecType_AdvertiseOnPublic
	//	*GetSpecType_AdvertiseCustom
	AdvertiseChoice isGetSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*GetSpecType_HashPolicyChoiceRoundRobin
	//	*GetSpecType_HashPolicyChoiceLeastActive
	//	*GetSpecType_HashPolicyChoiceRandom
	//	*GetSpecType_HashPolicyChoiceSourceIpStickiness
	HashPolicyChoice isGetSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	IdleTimeout      uint32                         `protobuf:"varint,17,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Types that are valid to be assigned to ClusterRetractChoice:
	//	*GetSpecType_RetractCluster
	//	*GetSpecType_DoNotRetractCluster
	ClusterRetractChoice isGetSpecType_ClusterRetractChoice `protobuf_oneof:"cluster_retract_choice"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*GetSpecType_Udp
	LoadbalancerType             isGetSpecType_LoadbalancerType   `protobuf_oneof:"loadbalancer_type"`
	EnablePerPacketLoadBalancing bool                             `protobuf:"varint,23,opt,name=enable_per_packet_load_balancing,json=enablePerPacketLoadBalancing,proto3" json:"enable_per_packet_load_balancing,omitempty"`
	HostName                     string                           `protobuf:"bytes,1001,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	DnsInfo                      []*virtual_host_dns_info.DnsInfo `protobuf:"bytes,1002,rep,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`
	InternetVipInfo              []*views.InternetVIPInfo         `protobuf:"bytes,1100,rep,name=internet_vip_info,json=internetVipInfo,proto3" json:"internet_vip_info,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d17f0d50ee479ed, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_PortChoice interface {
	isGetSpecType_PortChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_AdvertiseChoice interface {
	isGetSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_HashPolicyChoice interface {
	isGetSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ClusterRetractChoice interface {
	isGetSpecType_ClusterRetractChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_LoadbalancerType interface {
	isGetSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_ListenPort struct {
	ListenPort uint32 `protobuf:"varint,3,opt,name=listen_port,json=listenPort,proto3,oneof" json:"listen_port,omitempty"`
}
type GetSpecType_PortRanges struct {
	PortRanges string `protobuf:"bytes,4,opt,name=port_ranges,json=portRanges,proto3,oneof" json:"port_ranges,omitempty"`
}
type GetSpecType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,8,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type GetSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,9,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type GetSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,10,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type GetSpecType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,11,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type GetSpecType_HashPolicyChoiceRoundRobin struct {
	HashPolicyChoiceRoundRobin *schema.Empty `protobuf:"bytes,13,opt,name=hash_policy_choice_round_robin,json=hashPolicyChoiceRoundRobin,proto3,oneof" json:"hash_policy_choice_round_robin,omitempty"`
}
type GetSpecType_HashPolicyChoiceLeastActive struct {
	HashPolicyChoiceLeastActive *schema.Empty `protobuf:"bytes,14,opt,name=hash_policy_choice_least_active,json=hashPolicyChoiceLeastActive,proto3,oneof" json:"hash_policy_choice_least_active,omitempty"`
}
type GetSpecType_HashPolicyChoiceRandom struct {
	HashPolicyChoiceRandom *schema.Empty `protobuf:"bytes,15,opt,name=hash_policy_choice_random,json=hashPolicyChoiceRandom,proto3,oneof" json:"hash_policy_choice_random,omitempty"`
}
type GetSpecType_HashPolicyChoiceSourceIpStickiness struct {
	HashPolicyChoiceSourceIpStickiness *schema.Empty `protobuf:"bytes,16,opt,name=hash_policy_choice_source_ip_stickiness,json=hashPolicyChoiceSourceIpStickiness,proto3,oneof" json:"hash_policy_choice_source_ip_stickiness,omitempty"`
}
type GetSpecType_RetractCluster struct {
	RetractCluster *schema.Empty `protobuf:"bytes,19,opt,name=retract_cluster,json=retractCluster,proto3,oneof" json:"retract_cluster,omitempty"`
}
type GetSpecType_DoNotRetractCluster struct {
	DoNotRetractCluster *schema.Empty `protobuf:"bytes,20,opt,name=do_not_retract_cluster,json=doNotRetractCluster,proto3,oneof" json:"do_not_retract_cluster,omitempty"`
}
type GetSpecType_Udp struct {
	Udp *schema.Empty `protobuf:"bytes,22,opt,name=udp,proto3,oneof" json:"udp,omitempty"`
}

func (*GetSpecType_ListenPort) isGetSpecType_PortChoice()                               {}
func (*GetSpecType_PortRanges) isGetSpecType_PortChoice()                               {}
func (*GetSpecType_DoNotAdvertise) isGetSpecType_AdvertiseChoice()                      {}
func (*GetSpecType_AdvertiseOnPublicDefaultVip) isGetSpecType_AdvertiseChoice()         {}
func (*GetSpecType_AdvertiseOnPublic) isGetSpecType_AdvertiseChoice()                   {}
func (*GetSpecType_AdvertiseCustom) isGetSpecType_AdvertiseChoice()                     {}
func (*GetSpecType_HashPolicyChoiceRoundRobin) isGetSpecType_HashPolicyChoice()         {}
func (*GetSpecType_HashPolicyChoiceLeastActive) isGetSpecType_HashPolicyChoice()        {}
func (*GetSpecType_HashPolicyChoiceRandom) isGetSpecType_HashPolicyChoice()             {}
func (*GetSpecType_HashPolicyChoiceSourceIpStickiness) isGetSpecType_HashPolicyChoice() {}
func (*GetSpecType_RetractCluster) isGetSpecType_ClusterRetractChoice()                 {}
func (*GetSpecType_DoNotRetractCluster) isGetSpecType_ClusterRetractChoice()            {}
func (*GetSpecType_Udp) isGetSpecType_LoadbalancerType()                                {}

func (m *GetSpecType) GetPortChoice() isGetSpecType_PortChoice {
	if m != nil {
		return m.PortChoice
	}
	return nil
}
func (m *GetSpecType) GetAdvertiseChoice() isGetSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *GetSpecType) GetHashPolicyChoice() isGetSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *GetSpecType) GetClusterRetractChoice() isGetSpecType_ClusterRetractChoice {
	if m != nil {
		return m.ClusterRetractChoice
	}
	return nil
}
func (m *GetSpecType) GetLoadbalancerType() isGetSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}

func (m *GetSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetSpecType) GetListenPort() uint32 {
	if x, ok := m.GetPortChoice().(*GetSpecType_ListenPort); ok {
		return x.ListenPort
	}
	return 0
}

func (m *GetSpecType) GetPortRanges() string {
	if x, ok := m.GetPortChoice().(*GetSpecType_PortRanges); ok {
		return x.PortRanges
	}
	return ""
}

func (m *GetSpecType) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

func (m *GetSpecType) GetOriginPoolsWeights() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.OriginPoolsWeights
	}
	return nil
}

func (m *GetSpecType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *GetSpecType) GetHashPolicyChoiceRoundRobin() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_HashPolicyChoiceRoundRobin); ok {
		return x.HashPolicyChoiceRoundRobin
	}
	return nil
}

func (m *GetSpecType) GetHashPolicyChoiceLeastActive() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_HashPolicyChoiceLeastActive); ok {
		return x.HashPolicyChoiceLeastActive
	}
	return nil
}

func (m *GetSpecType) GetHashPolicyChoiceRandom() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_HashPolicyChoiceRandom); ok {
		return x.HashPolicyChoiceRandom
	}
	return nil
}

func (m *GetSpecType) GetHashPolicyChoiceSourceIpStickiness() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_HashPolicyChoiceSourceIpStickiness); ok {
		return x.HashPolicyChoiceSourceIpStickiness
	}
	return nil
}

func (m *GetSpecType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *GetSpecType) GetRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*GetSpecType_RetractCluster); ok {
		return x.RetractCluster
	}
	return nil
}

func (m *GetSpecType) GetDoNotRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*GetSpecType_DoNotRetractCluster); ok {
		return x.DoNotRetractCluster
	}
	return nil
}

func (m *GetSpecType) GetUdp() *schema.Empty {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_Udp); ok {
		return x.Udp
	}
	return nil
}

func (m *GetSpecType) GetEnablePerPacketLoadBalancing() bool {
	if m != nil {
		return m.EnablePerPacketLoadBalancing
	}
	return false
}

func (m *GetSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GetSpecType) GetDnsInfo() []*virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GetSpecType) GetInternetVipInfo() []*views.InternetVIPInfo {
	if m != nil {
		return m.InternetVipInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_ListenPort)(nil),
		(*GetSpecType_PortRanges)(nil),
		(*GetSpecType_DoNotAdvertise)(nil),
		(*GetSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*GetSpecType_AdvertiseOnPublic)(nil),
		(*GetSpecType_AdvertiseCustom)(nil),
		(*GetSpecType_HashPolicyChoiceRoundRobin)(nil),
		(*GetSpecType_HashPolicyChoiceLeastActive)(nil),
		(*GetSpecType_HashPolicyChoiceRandom)(nil),
		(*GetSpecType_HashPolicyChoiceSourceIpStickiness)(nil),
		(*GetSpecType_RetractCluster)(nil),
		(*GetSpecType_DoNotRetractCluster)(nil),
		(*GetSpecType_Udp)(nil),
	}
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.udp_loadbalancer.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.udp_loadbalancer.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.udp_loadbalancer.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.udp_loadbalancer.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.udp_loadbalancer.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.udp_loadbalancer.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.udp_loadbalancer.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.udp_loadbalancer.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/udp_loadbalancer/types.proto", fileDescriptor_4d17f0d50ee479ed)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/udp_loadbalancer/types.proto", fileDescriptor_4d17f0d50ee479ed)
}

var fileDescriptor_4d17f0d50ee479ed = []byte{
	// 1538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x99, 0x3d, 0x6c, 0xdb, 0xcc,
	0x1d, 0xc6, 0x75, 0x12, 0x5f, 0x4b, 0x3a, 0xf9, 0x43, 0x3e, 0xdb, 0x2a, 0x5f, 0xdb, 0xa5, 0x15,
	0xe3, 0x45, 0xe3, 0x04, 0x8a, 0x3e, 0xec, 0x26, 0x69, 0xd2, 0x22, 0x6d, 0xe8, 0x34, 0xb1, 0xdd,
	0x34, 0x71, 0x98, 0xc0, 0x01, 0xdc, 0x00, 0xc4, 0x89, 0x3c, 0x4b, 0xac, 0x29, 0x1e, 0x4b, 0x9e,
	0x94, 0x7a, 0x08, 0x10, 0x78, 0xea, 0x52, 0xa0, 0xc8, 0xd2, 0x8c, 0x1d, 0x8b, 0x4e, 0x9d, 0xcb,
	0x0c, 0x46, 0xa7, 0xa2, 0x28, 0x50, 0x8d, 0x46, 0xa7, 0x46, 0x5e, 0x92, 0x4c, 0x19, 0x0b, 0x2f,
	0x29, 0x78, 0x94, 0x64, 0x4b, 0xa6, 0xdd, 0xa4, 0xed, 0xd0, 0xe6, 0xd5, 0x76, 0xe4, 0x3d, 0xcf,
	0x73, 0xc7, 0x33, 0xef, 0xff, 0x3b, 0x8b, 0xb0, 0xd8, 0x20, 0x6e, 0xde, 0xa0, 0x05, 0x57, 0xab,
	0x92, 0x1a, 0x2e, 0x34, 0x0c, 0xf2, 0xd4, 0x2d, 0xd4, 0x75, 0x5b, 0x35, 0x29, 0xd6, 0xcb, 0xd8,
	0xc4, 0x96, 0x46, 0x9c, 0x02, 0xdb, 0xb1, 0x89, 0x9b, 0xb7, 0x1d, 0xca, 0x28, 0xfa, 0x2a, 0x70,
	0xe4, 0x03, 0x47, 0x9e, 0x3b, 0xf2, 0xfd, 0x8e, 0xe9, 0x4b, 0x15, 0x83, 0x55, 0xeb, 0xe5, 0xbc,
	0x46, 0x6b, 0x85, 0x0a, 0xad, 0xd0, 0x02, 0x37, 0x97, 0xeb, 0x5b, 0xfc, 0x8a, 0x5f, 0xf0, 0x56,
	0x10, 0x3a, 0x3d, 0x57, 0xa1, 0xb4, 0x62, 0x92, 0x23, 0x15, 0x33, 0x6a, 0xc4, 0x65, 0xb8, 0x66,
	0xb7, 0x05, 0x33, 0xbd, 0xf3, 0xa4, 0x36, 0x33, 0xa8, 0xd5, 0x9e, 0xd2, 0xf4, 0x97, 0xbd, 0x9d,
	0xc7, 0x66, 0x3b, 0x3d, 0xdb, 0xf7, 0x7c, 0xd8, 0x34, 0x74, 0xcc, 0x48, 0xbb, 0x37, 0x7b, 0xf2,
	0xe9, 0xd5, 0xde, 0xe8, 0xb9, 0xb0, 0xf5, 0x39, 0x3e, 0xc0, 0xb7, 0xfa, 0x05, 0x0e, 0xab, 0x63,
	0x53, 0xad, 0x52, 0x97, 0xf5, 0xe8, 0x8a, 0xa7, 0xeb, 0x54, 0xdd, 0x72, 0x55, 0xc3, 0xda, 0xa2,
	0x05, 0x5a, 0xfe, 0x29, 0xd1, 0x58, 0xe0, 0x98, 0xff, 0x65, 0x1a, 0x8e, 0xde, 0x31, 0x69, 0x19,
	0x9b, 0x0f, 0x6d, 0xa2, 0x3d, 0xda, 0xb1, 0x09, 0xfa, 0x1e, 0x8c, 0xeb, 0xb4, 0x86, 0x0d, 0xcb,
	0x15, 0x41, 0x36, 0xb6, 0x90, 0x94, 0xe7, 0xff, 0xf0, 0x76, 0x2f, 0x96, 0x7c, 0x01, 0x86, 0xe6,
	0x05, 0x27, 0x5a, 0x05, 0xfe, 0xd5, 0x17, 0x2f, 0x40, 0x34, 0x9d, 0xed, 0xb4, 0x44, 0xa0, 0x74,
	0x2c, 0xa8, 0x08, 0x27, 0xfd, 0x91, 0x1a, 0xd4, 0x64, 0xc4, 0x71, 0xb0, 0x5a, 0xc3, 0x16, 0xae,
	0x10, 0x5d, 0xfc, 0x22, 0x0b, 0x16, 0x12, 0x0a, 0xd2, 0x2d, 0x77, 0xa3, 0xdd, 0xf5, 0xe3, 0xa0,
	0x07, 0xe5, 0x61, 0xca, 0x34, 0x5c, 0x46, 0x2c, 0xd5, 0xa6, 0x0e, 0x13, 0x63, 0x59, 0xb0, 0x30,
	0x22, 0xa7, 0xfc, 0xec, 0xa1, 0x8b, 0x82, 0xf8, 0xe1, 0x43, 0x6c, 0x25, 0xa2, 0xc0, 0x40, 0xb1,
	0x4e, 0x1d, 0x86, 0x1e, 0xc0, 0x94, 0x2f, 0x54, 0x1d, 0x6c, 0x55, 0x88, 0x2b, 0x0a, 0x59, 0xb0,
	0x90, 0x94, 0xf3, 0xfb, 0xcf, 0xc0, 0x1b, 0x0f, 0x04, 0x93, 0x73, 0x62, 0xe2, 0x73, 0xa1, 0xdd,
	0x6a, 0x0a, 0x3f, 0xf0, 0x5b, 0x82, 0x13, 0x4d, 0x77, 0x3a, 0xf7, 0x05, 0xe0, 0x47, 0xfa, 0x21,
	0x0a, 0xcf, 0x40, 0x3f, 0x83, 0x93, 0xd4, 0x31, 0x2a, 0x86, 0x3f, 0x05, 0x6a, 0xba, 0xea, 0x53,
	0x62, 0x54, 0xaa, 0xcc, 0x15, 0x87, 0xb2, 0xb1, 0x85, 0xd4, 0xe2, 0x85, 0x7c, 0xd8, 0xdb, 0x78,
	0x9f, 0x1b, 0xd6, 0x29, 0x35, 0x1f, 0x1b, 0xac, 0xfa, 0x98, 0x3b, 0xe4, 0xc9, 0xee, 0xe2, 0xa4,
	0x8f, 0x2d, 0x0e, 0xa2, 0x5d, 0xad, 0x1b, 0x08, 0x5d, 0x74, 0x1b, 0xa6, 0x75, 0xaa, 0x5a, 0x94,
	0xa9, 0x58, 0x6f, 0x10, 0x87, 0x19, 0x2e, 0x11, 0x13, 0x59, 0xb0, 0x90, 0x5a, 0x9c, 0xec, 0x1b,
	0xee, 0x87, 0x35, 0x9b, 0xed, 0xc8, 0xc2, 0x9e, 0x07, 0xc0, 0x0a, 0x50, 0x46, 0x75, 0x7a, 0x8f,
	0xb2, 0x9b, 0x1d, 0x0f, 0x7a, 0x02, 0xe7, 0xba, 0x01, 0x2a, 0xb5, 0x54, 0xbb, 0x5e, 0x36, 0x0d,
	0x4d, 0xd5, 0xc9, 0x16, 0xae, 0x9b, 0x4c, 0x6d, 0x18, 0xb6, 0x98, 0x3c, 0x3d, 0x76, 0x05, 0x28,
	0x33, 0x5d, 0xfb, 0x7d, 0x6b, 0x9d, 0x9b, 0x6f, 0x05, 0xde, 0x0d, 0xc3, 0x46, 0x4f, 0xe0, 0x44,
	0x48, 0xba, 0x08, 0x79, 0xe2, 0x57, 0xa1, 0xeb, 0xd2, 0x9d, 0x5a, 0x10, 0xd6, 0x9d, 0xf8, 0xf8,
	0x89, 0x71, 0xd0, 0x63, 0x98, 0x3e, 0x4a, 0xd7, 0xea, 0x2e, 0xa3, 0x35, 0x31, 0xf5, 0x31, 0xd1,
	0xcb, 0x5c, 0x2b, 0x0b, 0xcd, 0x20, 0x7a, 0x0c, 0xf7, 0x76, 0xa0, 0x4d, 0x28, 0x55, 0xb1, 0x5b,
	0x55, 0x6d, 0x6a, 0x1a, 0xda, 0x8e, 0xaa, 0x55, 0xa9, 0xa1, 0x11, 0xd5, 0xa1, 0x75, 0x4b, 0x57,
	0x1d, 0x5a, 0x36, 0x2c, 0x71, 0xe4, 0x8c, 0x35, 0x89, 0x2a, 0xd3, 0xbe, 0x7b, 0x9d, 0x9b, 0x97,
	0xb9, 0x57, 0xf1, 0xad, 0x8a, 0xef, 0x44, 0x04, 0xce, 0x85, 0x64, 0x9b, 0x04, 0xbb, 0x4c, 0xc5,
	0x1a, 0x33, 0x1a, 0x44, 0x1c, 0x3d, 0xe3, 0xef, 0x18, 0x6f, 0xbf, 0xa8, 0x2b, 0x51, 0x65, 0xa6,
	0x7f, 0x94, 0xbb, 0x7e, 0xc8, 0x4d, 0x9e, 0x81, 0x1e, 0xc0, 0x2f, 0xc3, 0x1e, 0x01, 0x5b, 0x3a,
	0xad, 0x89, 0x63, 0x67, 0xce, 0x3e, 0x73, 0x62, 0xf6, 0xdc, 0x85, 0xb6, 0xe1, 0xf9, 0x90, 0x48,
	0x97, 0xd6, 0x1d, 0x8d, 0xa8, 0x86, 0xad, 0xba, 0xcc, 0xd0, 0xb6, 0x0d, 0x8b, 0xb8, 0xae, 0x98,
	0x3e, 0x73, 0x80, 0xf9, 0xfe, 0x01, 0x1e, 0xf2, 0x8c, 0x55, 0xfb, 0x61, 0x37, 0x01, 0xdd, 0x80,
	0xc3, 0x86, 0x6e, 0x12, 0xd5, 0xaf, 0xb1, 0xb4, 0xce, 0xc4, 0x71, 0xbe, 0xad, 0x67, 0xfe, 0xe6,
	0x01, 0xe1, 0x72, 0xb1, 0x58, 0xfc, 0x87, 0x07, 0x22, 0xbf, 0x78, 0x05, 0x22, 0x9d, 0x6d, 0xfe,
	0xfb, 0x77, 0x40, 0x49, 0xf9, 0x86, 0x47, 0x81, 0x1e, 0xad, 0xc0, 0x31, 0x87, 0x30, 0x07, 0x6b,
	0x4c, 0xd5, 0xcc, 0xba, 0xcb, 0x88, 0x23, 0x4e, 0x7c, 0xcc, 0xb2, 0xc6, 0x94, 0xd1, 0xb6, 0x6f,
	0x39, 0xb0, 0xa1, 0x47, 0x30, 0xd3, 0xde, 0x69, 0xfd, 0x81, 0x93, 0x1f, 0x17, 0x38, 0xc1, 0xb7,
	0x9c, 0xd2, 0x9b, 0xba, 0x00, 0x63, 0x75, 0xdd, 0x16, 0x33, 0x67, 0x2c, 0x94, 0xa0, 0xf8, 0x12,
	0x74, 0x1b, 0x66, 0x89, 0x85, 0xcb, 0x26, 0x51, 0x6d, 0xe2, 0xa8, 0x36, 0xd6, 0xb6, 0x09, 0xe3,
	0x1c, 0x53, 0x03, 0x90, 0x19, 0x56, 0x45, 0xfc, 0x06, 0xaf, 0x8e, 0xb3, 0x81, 0x6e, 0x9d, 0x38,
	0xeb, 0x5c, 0x75, 0x97, 0x62, 0x5d, 0xee, 0x68, 0xd0, 0x26, 0x1c, 0xe1, 0xec, 0x30, 0x2c, 0x46,
	0x1c, 0x0b, 0x9b, 0xe2, 0x9b, 0x38, 0x1f, 0x7c, 0x3e, 0xbc, 0x3c, 0xf1, 0x2a, 0xaf, 0x90, 0x2d,
	0xbf, 0xa6, 0xcb, 0xe9, 0xdf, 0x3d, 0xeb, 0x35, 0x2b, 0xc3, 0xfe, 0xe5, 0x6a, 0xfb, 0x0a, 0xcd,
	0xc2, 0x24, 0x87, 0x84, 0x85, 0x6b, 0x44, 0x7c, 0xeb, 0xe7, 0x26, 0x95, 0x84, 0x7f, 0xe7, 0x1e,
	0xae, 0x11, 0xb4, 0x02, 0x13, 0x1d, 0x7a, 0x88, 0xef, 0xe2, 0xbc, 0x26, 0xe6, 0x4e, 0x0c, 0x1a,
	0x82, 0x9a, 0xfc, 0x2d, 0xcb, 0x5d, 0xb5, 0xb6, 0xa8, 0x12, 0xd7, 0x83, 0x06, 0x7a, 0x00, 0xc7,
	0x83, 0x19, 0x10, 0x5e, 0x9a, 0x82, 0xc8, 0xbf, 0x24, 0x78, 0x64, 0xf8, 0x9e, 0x5f, 0x6d, 0xcb,
	0x37, 0x56, 0xd7, 0x79, 0xd4, 0x58, 0xc7, 0xbf, 0x61, 0xd8, 0xfe, 0x8d, 0xeb, 0xd5, 0x3f, 0x7a,
	0x40, 0x87, 0x59, 0x38, 0x21, 0x63, 0xd7, 0xd0, 0xb2, 0xcb, 0xd4, 0xda, 0x32, 0x2a, 0x75, 0x07,
	0xfb, 0x80, 0x45, 0xc9, 0x52, 0xee, 0x72, 0x6e, 0x31, 0x77, 0x25, 0x77, 0x15, 0xce, 0xc3, 0x8c,
	0xbf, 0x9e, 0xd9, 0xee, 0x82, 0xfa, 0x52, 0xe6, 0x50, 0x13, 0x25, 0x16, 0x4b, 0xb9, 0xd2, 0x62,
	0x6e, 0x71, 0x09, 0xce, 0xc2, 0xcc, 0x4d, 0xbd, 0xe1, 0x1f, 0x2e, 0xf4, 0xbe, 0xa0, 0x68, 0xe9,
	0xaa, 0x9c, 0x6d, 0x83, 0x27, 0xd8, 0x38, 0x68, 0x7c, 0xcf, 0x03, 0xb1, 0xa6, 0x07, 0xa2, 0x2d,
	0x0f, 0x80, 0xa5, 0xdf, 0xbc, 0x02, 0x40, 0xbe, 0xd0, 0x53, 0xd0, 0x02, 0xd9, 0xd4, 0x9e, 0x07,
	0x92, 0x4d, 0x0f, 0xc4, 0x5b, 0x1e, 0x48, 0x5e, 0xcb, 0x95, 0x8a, 0xb9, 0xef, 0xe4, 0x4a, 0x25,
	0xf9, 0x22, 0x44, 0x27, 0x37, 0x23, 0x9a, 0xdc, 0xf3, 0xc0, 0x48, 0xd3, 0x03, 0xc3, 0x2d, 0x0f,
	0x24, 0x4a, 0x4b, 0xb9, 0xd2, 0xe5, 0x5c, 0xe9, 0x8a, 0x9c, 0x83, 0x99, 0xf6, 0x2b, 0x7b, 0xf4,
	0x0a, 0x07, 0x7a, 0xd4, 0xf4, 0x00, 0x6a, 0x79, 0x60, 0xa8, 0x74, 0x2d, 0x97, 0x5d, 0x2c, 0xbe,
	0xf7, 0x00, 0x90, 0xbf, 0x09, 0xc7, 0x8f, 0x9f, 0x92, 0x54, 0xff, 0x80, 0x80, 0x12, 0x7b, 0x1e,
	0xc8, 0x34, 0x3d, 0x30, 0xb5, 0x26, 0x24, 0xa2, 0xe9, 0xd8, 0x9a, 0x90, 0x88, 0xa7, 0x13, 0x6b,
	0x42, 0x62, 0x38, 0x3d, 0xb2, 0x26, 0x24, 0x50, 0x7a, 0x62, 0x4d, 0x48, 0x4c, 0xa5, 0x33, 0xf3,
	0xbf, 0x1e, 0x86, 0xa3, 0xcb, 0x0e, 0xc1, 0x8c, 0x74, 0xcf, 0x03, 0x62, 0xdf, 0x79, 0xe0, 0x88,
	0xf5, 0xe7, 0x42, 0xc8, 0xdd, 0x07, 0xeb, 0x73, 0x21, 0xb0, 0xee, 0x83, 0xef, 0xa7, 0x9f, 0x18,
	0x7e, 0xf2, 0x5f, 0xc2, 0xf5, 0x00, 0xcc, 0x9f, 0x13, 0x98, 0x9f, 0xfc, 0x47, 0x60, 0xfe, 0xdc,
	0x79, 0x7c, 0x2e, 0x8c, 0xc7, 0xbd, 0xc8, 0xfd, 0xfe, 0x27, 0x21, 0x37, 0x84, 0xb4, 0x3f, 0xfa,
	0x77, 0x48, 0xfb, 0x3f, 0x03, 0xd8, 0xeb, 0xe3, 0x7f, 0xbe, 0xd1, 0xf7, 0xbf, 0x90, 0x2c, 0xf5,
	0x96, 0xfc, 0xb1, 0xdd, 0x43, 0x70, 0xfc, 0x86, 0xfc, 0xdd, 0x90, 0x82, 0x7f, 0xfe, 0x58, 0xc1,
	0x8f, 0xb7, 0xcb, 0xfd, 0xee, 0x21, 0x38, 0x21, 0x94, 0x73, 0xa1, 0x08, 0xc8, 0xec, 0x1e, 0x82,
	0x90, 0xfb, 0xf2, 0xb7, 0x4f, 0x85, 0xc0, 0xf4, 0xee, 0x21, 0x38, 0xa5, 0x4f, 0xbe, 0x18, 0x06,
	0x83, 0xa9, 0xdd, 0x43, 0x70, 0xf2, 0xf6, 0xbf, 0x20, 0xc3, 0xcb, 0x61, 0x38, 0xa6, 0x10, 0xdb,
	0xc4, 0xda, 0x00, 0x0d, 0x03, 0x34, 0x0c, 0xd0, 0x30, 0x40, 0xc3, 0x00, 0x0d, 0x03, 0x34, 0x70,
	0x34, 0xfc, 0x75, 0x04, 0xa6, 0xee, 0x10, 0x36, 0xc0, 0xc2, 0x00, 0x0b, 0x03, 0x2c, 0x0c, 0xb0,
	0xf0, 0xb5, 0xc1, 0xc2, 0xff, 0xf3, 0xcf, 0x66, 0x03, 0xa2, 0x9d, 0x41, 0x34, 0xf9, 0x25, 0x68,
	0xbe, 0x96, 0x22, 0xfb, 0xaf, 0xa5, 0xc8, 0xfb, 0xd7, 0x12, 0x78, 0xde, 0x92, 0xc0, 0x6f, 0x5b,
	0x12, 0xf8, 0x53, 0x4b, 0x02, 0xcd, 0x96, 0x04, 0xf6, 0x5b, 0x12, 0xf8, 0x7b, 0x4b, 0x02, 0x6f,
	0x5a, 0x52, 0xe4, 0x7d, 0x4b, 0x02, 0xbf, 0x3a, 0x90, 0x22, 0x7b, 0x07, 0x12, 0x68, 0x1e, 0x48,
	0x91, 0xfd, 0x03, 0x29, 0xb2, 0xb9, 0x59, 0xa1, 0xf6, 0x76, 0x25, 0xdf, 0x01, 0x54, 0xbe, 0xee,
	0x16, 0x78, 0x63, 0x8b, 0x3a, 0xb5, 0x4b, 0xb6, 0x43, 0x1b, 0x86, 0x4e, 0x9c, 0x4b, 0x9d, 0xee,
	0x82, 0x5d, 0xae, 0xd0, 0x02, 0xf9, 0x39, 0x6b, 0x7f, 0xb6, 0x3b, 0xf3, 0x33, 0x69, 0x79, 0x88,
	0x7f, 0xb8, 0x5b, 0xfa, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x57, 0x01, 0x43, 0xd3, 0x55, 0x1d,
	0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	if len(this.OriginPoolsWeights) != len(that1.OriginPoolsWeights) {
		return false
	}
	for i := range this.OriginPoolsWeights {
		if !this.OriginPoolsWeights[i].Equal(that1.OriginPoolsWeights[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if that1.ClusterRetractChoice == nil {
		if this.ClusterRetractChoice != nil {
			return false
		}
	} else if this.ClusterRetractChoice == nil {
		return false
	} else if !this.ClusterRetractChoice.Equal(that1.ClusterRetractChoice) {
		return false
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if this.EnablePerPacketLoadBalancing != that1.EnablePerPacketLoadBalancing {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if len(this.InternetVipInfo) != len(that1.InternetVipInfo) {
		return false
	}
	for i := range this.InternetVipInfo {
		if !this.InternetVipInfo[i].Equal(that1.InternetVipInfo[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType_ListenPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ListenPort)
	if !ok {
		that2, ok := that.(GlobalSpecType_ListenPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ListenPort != that1.ListenPort {
		return false
	}
	return true
}
func (this *GlobalSpecType_PortRanges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PortRanges)
	if !ok {
		that2, ok := that.(GlobalSpecType_PortRanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRanges != that1.PortRanges {
		return false
	}
	return true
}
func (this *GlobalSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(GlobalSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HashPolicyChoiceRoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HashPolicyChoiceRoundRobin)
	if !ok {
		that2, ok := that.(GlobalSpecType_HashPolicyChoiceRoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRoundRobin.Equal(that1.HashPolicyChoiceRoundRobin) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HashPolicyChoiceLeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HashPolicyChoiceLeastActive)
	if !ok {
		that2, ok := that.(GlobalSpecType_HashPolicyChoiceLeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceLeastActive.Equal(that1.HashPolicyChoiceLeastActive) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HashPolicyChoiceRandom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HashPolicyChoiceRandom)
	if !ok {
		that2, ok := that.(GlobalSpecType_HashPolicyChoiceRandom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRandom.Equal(that1.HashPolicyChoiceRandom) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HashPolicyChoiceSourceIpStickiness)
	if !ok {
		that2, ok := that.(GlobalSpecType_HashPolicyChoiceSourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceSourceIpStickiness.Equal(that1.HashPolicyChoiceSourceIpStickiness) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RetractCluster)
	if !ok {
		that2, ok := that.(GlobalSpecType_RetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetractCluster.Equal(that1.RetractCluster) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DoNotRetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DoNotRetractCluster)
	if !ok {
		that2, ok := that.(GlobalSpecType_DoNotRetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotRetractCluster.Equal(that1.DoNotRetractCluster) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Udp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Udp)
	if !ok {
		that2, ok := that.(GlobalSpecType_Udp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Udp.Equal(that1.Udp) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	if len(this.OriginPoolsWeights) != len(that1.OriginPoolsWeights) {
		return false
	}
	for i := range this.OriginPoolsWeights {
		if !this.OriginPoolsWeights[i].Equal(that1.OriginPoolsWeights[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if that1.ClusterRetractChoice == nil {
		if this.ClusterRetractChoice != nil {
			return false
		}
	} else if this.ClusterRetractChoice == nil {
		return false
	} else if !this.ClusterRetractChoice.Equal(that1.ClusterRetractChoice) {
		return false
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if this.EnablePerPacketLoadBalancing != that1.EnablePerPacketLoadBalancing {
		return false
	}
	return true
}
func (this *CreateSpecType_ListenPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ListenPort)
	if !ok {
		that2, ok := that.(CreateSpecType_ListenPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ListenPort != that1.ListenPort {
		return false
	}
	return true
}
func (this *CreateSpecType_PortRanges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_PortRanges)
	if !ok {
		that2, ok := that.(CreateSpecType_PortRanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRanges != that1.PortRanges {
		return false
	}
	return true
}
func (this *CreateSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(CreateSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *CreateSpecType_HashPolicyChoiceRoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HashPolicyChoiceRoundRobin)
	if !ok {
		that2, ok := that.(CreateSpecType_HashPolicyChoiceRoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRoundRobin.Equal(that1.HashPolicyChoiceRoundRobin) {
		return false
	}
	return true
}
func (this *CreateSpecType_HashPolicyChoiceLeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HashPolicyChoiceLeastActive)
	if !ok {
		that2, ok := that.(CreateSpecType_HashPolicyChoiceLeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceLeastActive.Equal(that1.HashPolicyChoiceLeastActive) {
		return false
	}
	return true
}
func (this *CreateSpecType_HashPolicyChoiceRandom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HashPolicyChoiceRandom)
	if !ok {
		that2, ok := that.(CreateSpecType_HashPolicyChoiceRandom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRandom.Equal(that1.HashPolicyChoiceRandom) {
		return false
	}
	return true
}
func (this *CreateSpecType_HashPolicyChoiceSourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HashPolicyChoiceSourceIpStickiness)
	if !ok {
		that2, ok := that.(CreateSpecType_HashPolicyChoiceSourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceSourceIpStickiness.Equal(that1.HashPolicyChoiceSourceIpStickiness) {
		return false
	}
	return true
}
func (this *CreateSpecType_RetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RetractCluster)
	if !ok {
		that2, ok := that.(CreateSpecType_RetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetractCluster.Equal(that1.RetractCluster) {
		return false
	}
	return true
}
func (this *CreateSpecType_DoNotRetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DoNotRetractCluster)
	if !ok {
		that2, ok := that.(CreateSpecType_DoNotRetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotRetractCluster.Equal(that1.DoNotRetractCluster) {
		return false
	}
	return true
}
func (this *CreateSpecType_Udp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Udp)
	if !ok {
		that2, ok := that.(CreateSpecType_Udp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Udp.Equal(that1.Udp) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	if len(this.OriginPoolsWeights) != len(that1.OriginPoolsWeights) {
		return false
	}
	for i := range this.OriginPoolsWeights {
		if !this.OriginPoolsWeights[i].Equal(that1.OriginPoolsWeights[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if that1.ClusterRetractChoice == nil {
		if this.ClusterRetractChoice != nil {
			return false
		}
	} else if this.ClusterRetractChoice == nil {
		return false
	} else if !this.ClusterRetractChoice.Equal(that1.ClusterRetractChoice) {
		return false
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if this.EnablePerPacketLoadBalancing != that1.EnablePerPacketLoadBalancing {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ListenPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ListenPort)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ListenPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ListenPort != that1.ListenPort {
		return false
	}
	return true
}
func (this *ReplaceSpecType_PortRanges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_PortRanges)
	if !ok {
		that2, ok := that.(ReplaceSpecType_PortRanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRanges != that1.PortRanges {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HashPolicyChoiceRoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HashPolicyChoiceRoundRobin)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HashPolicyChoiceRoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRoundRobin.Equal(that1.HashPolicyChoiceRoundRobin) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HashPolicyChoiceLeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HashPolicyChoiceLeastActive)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HashPolicyChoiceLeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceLeastActive.Equal(that1.HashPolicyChoiceLeastActive) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HashPolicyChoiceRandom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HashPolicyChoiceRandom)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HashPolicyChoiceRandom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRandom.Equal(that1.HashPolicyChoiceRandom) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HashPolicyChoiceSourceIpStickiness)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HashPolicyChoiceSourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceSourceIpStickiness.Equal(that1.HashPolicyChoiceSourceIpStickiness) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RetractCluster)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetractCluster.Equal(that1.RetractCluster) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DoNotRetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DoNotRetractCluster)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DoNotRetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotRetractCluster.Equal(that1.DoNotRetractCluster) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Udp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Udp)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Udp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Udp.Equal(that1.Udp) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.PortChoice == nil {
		if this.PortChoice != nil {
			return false
		}
	} else if this.PortChoice == nil {
		return false
	} else if !this.PortChoice.Equal(that1.PortChoice) {
		return false
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	if len(this.OriginPoolsWeights) != len(that1.OriginPoolsWeights) {
		return false
	}
	for i := range this.OriginPoolsWeights {
		if !this.OriginPoolsWeights[i].Equal(that1.OriginPoolsWeights[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if that1.ClusterRetractChoice == nil {
		if this.ClusterRetractChoice != nil {
			return false
		}
	} else if this.ClusterRetractChoice == nil {
		return false
	} else if !this.ClusterRetractChoice.Equal(that1.ClusterRetractChoice) {
		return false
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if this.EnablePerPacketLoadBalancing != that1.EnablePerPacketLoadBalancing {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if len(this.InternetVipInfo) != len(that1.InternetVipInfo) {
		return false
	}
	for i := range this.InternetVipInfo {
		if !this.InternetVipInfo[i].Equal(that1.InternetVipInfo[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType_ListenPort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ListenPort)
	if !ok {
		that2, ok := that.(GetSpecType_ListenPort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ListenPort != that1.ListenPort {
		return false
	}
	return true
}
func (this *GetSpecType_PortRanges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_PortRanges)
	if !ok {
		that2, ok := that.(GetSpecType_PortRanges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PortRanges != that1.PortRanges {
		return false
	}
	return true
}
func (this *GetSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(GetSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *GetSpecType_HashPolicyChoiceRoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HashPolicyChoiceRoundRobin)
	if !ok {
		that2, ok := that.(GetSpecType_HashPolicyChoiceRoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRoundRobin.Equal(that1.HashPolicyChoiceRoundRobin) {
		return false
	}
	return true
}
func (this *GetSpecType_HashPolicyChoiceLeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HashPolicyChoiceLeastActive)
	if !ok {
		that2, ok := that.(GetSpecType_HashPolicyChoiceLeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceLeastActive.Equal(that1.HashPolicyChoiceLeastActive) {
		return false
	}
	return true
}
func (this *GetSpecType_HashPolicyChoiceRandom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HashPolicyChoiceRandom)
	if !ok {
		that2, ok := that.(GetSpecType_HashPolicyChoiceRandom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceRandom.Equal(that1.HashPolicyChoiceRandom) {
		return false
	}
	return true
}
func (this *GetSpecType_HashPolicyChoiceSourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HashPolicyChoiceSourceIpStickiness)
	if !ok {
		that2, ok := that.(GetSpecType_HashPolicyChoiceSourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HashPolicyChoiceSourceIpStickiness.Equal(that1.HashPolicyChoiceSourceIpStickiness) {
		return false
	}
	return true
}
func (this *GetSpecType_RetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RetractCluster)
	if !ok {
		that2, ok := that.(GetSpecType_RetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetractCluster.Equal(that1.RetractCluster) {
		return false
	}
	return true
}
func (this *GetSpecType_DoNotRetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DoNotRetractCluster)
	if !ok {
		that2, ok := that.(GetSpecType_DoNotRetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotRetractCluster.Equal(that1.DoNotRetractCluster) {
		return false
	}
	return true
}
func (this *GetSpecType_Udp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Udp)
	if !ok {
		that2, ok := that.(GetSpecType_Udp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Udp.Equal(that1.Udp) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&udp_loadbalancer.GlobalSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	if this.OriginPoolsWeights != nil {
		s = append(s, "OriginPoolsWeights: "+fmt.Sprintf("%#v", this.OriginPoolsWeights)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	if this.ClusterRetractChoice != nil {
		s = append(s, "ClusterRetractChoice: "+fmt.Sprintf("%#v", this.ClusterRetractChoice)+",\n")
	}
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	s = append(s, "EnablePerPacketLoadBalancing: "+fmt.Sprintf("%#v", this.EnablePerPacketLoadBalancing)+",\n")
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	if this.InternetVipInfo != nil {
		s = append(s, "InternetVipInfo: "+fmt.Sprintf("%#v", this.InternetVipInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_ListenPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GlobalSpecType_ListenPort{` +
		`ListenPort:` + fmt.Sprintf("%#v", this.ListenPort) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_PortRanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GlobalSpecType_PortRanges{` +
		`PortRanges:` + fmt.Sprintf("%#v", this.PortRanges) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GlobalSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GlobalSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GlobalSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GlobalSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceRoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GlobalSpecType_HashPolicyChoiceRoundRobin{` +
		`HashPolicyChoiceRoundRobin:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRoundRobin) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceLeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GlobalSpecType_HashPolicyChoiceLeastActive{` +
		`HashPolicyChoiceLeastActive:` + fmt.Sprintf("%#v", this.HashPolicyChoiceLeastActive) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceRandom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GlobalSpecType_HashPolicyChoiceRandom{` +
		`HashPolicyChoiceRandom:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRandom) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GlobalSpecType_HashPolicyChoiceSourceIpStickiness{` +
		`HashPolicyChoiceSourceIpStickiness:` + fmt.Sprintf("%#v", this.HashPolicyChoiceSourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GlobalSpecType_RetractCluster{` +
		`RetractCluster:` + fmt.Sprintf("%#v", this.RetractCluster) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DoNotRetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GlobalSpecType_DoNotRetractCluster{` +
		`DoNotRetractCluster:` + fmt.Sprintf("%#v", this.DoNotRetractCluster) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Udp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GlobalSpecType_Udp{` +
		`Udp:` + fmt.Sprintf("%#v", this.Udp) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 22)
	s = append(s, "&udp_loadbalancer.CreateSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	if this.OriginPoolsWeights != nil {
		s = append(s, "OriginPoolsWeights: "+fmt.Sprintf("%#v", this.OriginPoolsWeights)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	if this.ClusterRetractChoice != nil {
		s = append(s, "ClusterRetractChoice: "+fmt.Sprintf("%#v", this.ClusterRetractChoice)+",\n")
	}
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	s = append(s, "EnablePerPacketLoadBalancing: "+fmt.Sprintf("%#v", this.EnablePerPacketLoadBalancing)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_ListenPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.CreateSpecType_ListenPort{` +
		`ListenPort:` + fmt.Sprintf("%#v", this.ListenPort) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_PortRanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.CreateSpecType_PortRanges{` +
		`PortRanges:` + fmt.Sprintf("%#v", this.PortRanges) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.CreateSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.CreateSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.CreateSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.CreateSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceRoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.CreateSpecType_HashPolicyChoiceRoundRobin{` +
		`HashPolicyChoiceRoundRobin:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRoundRobin) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceLeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.CreateSpecType_HashPolicyChoiceLeastActive{` +
		`HashPolicyChoiceLeastActive:` + fmt.Sprintf("%#v", this.HashPolicyChoiceLeastActive) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceRandom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.CreateSpecType_HashPolicyChoiceRandom{` +
		`HashPolicyChoiceRandom:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRandom) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceSourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.CreateSpecType_HashPolicyChoiceSourceIpStickiness{` +
		`HashPolicyChoiceSourceIpStickiness:` + fmt.Sprintf("%#v", this.HashPolicyChoiceSourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.CreateSpecType_RetractCluster{` +
		`RetractCluster:` + fmt.Sprintf("%#v", this.RetractCluster) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DoNotRetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.CreateSpecType_DoNotRetractCluster{` +
		`DoNotRetractCluster:` + fmt.Sprintf("%#v", this.DoNotRetractCluster) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Udp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.CreateSpecType_Udp{` +
		`Udp:` + fmt.Sprintf("%#v", this.Udp) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 22)
	s = append(s, "&udp_loadbalancer.ReplaceSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	if this.OriginPoolsWeights != nil {
		s = append(s, "OriginPoolsWeights: "+fmt.Sprintf("%#v", this.OriginPoolsWeights)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	if this.ClusterRetractChoice != nil {
		s = append(s, "ClusterRetractChoice: "+fmt.Sprintf("%#v", this.ClusterRetractChoice)+",\n")
	}
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	s = append(s, "EnablePerPacketLoadBalancing: "+fmt.Sprintf("%#v", this.EnablePerPacketLoadBalancing)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_ListenPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.ReplaceSpecType_ListenPort{` +
		`ListenPort:` + fmt.Sprintf("%#v", this.ListenPort) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_PortRanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.ReplaceSpecType_PortRanges{` +
		`PortRanges:` + fmt.Sprintf("%#v", this.PortRanges) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.ReplaceSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.ReplaceSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.ReplaceSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.ReplaceSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceRoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.ReplaceSpecType_HashPolicyChoiceRoundRobin{` +
		`HashPolicyChoiceRoundRobin:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRoundRobin) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceLeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.ReplaceSpecType_HashPolicyChoiceLeastActive{` +
		`HashPolicyChoiceLeastActive:` + fmt.Sprintf("%#v", this.HashPolicyChoiceLeastActive) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceRandom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.ReplaceSpecType_HashPolicyChoiceRandom{` +
		`HashPolicyChoiceRandom:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRandom) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.ReplaceSpecType_HashPolicyChoiceSourceIpStickiness{` +
		`HashPolicyChoiceSourceIpStickiness:` + fmt.Sprintf("%#v", this.HashPolicyChoiceSourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.ReplaceSpecType_RetractCluster{` +
		`RetractCluster:` + fmt.Sprintf("%#v", this.RetractCluster) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DoNotRetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.ReplaceSpecType_DoNotRetractCluster{` +
		`DoNotRetractCluster:` + fmt.Sprintf("%#v", this.DoNotRetractCluster) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Udp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.ReplaceSpecType_Udp{` +
		`Udp:` + fmt.Sprintf("%#v", this.Udp) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 25)
	s = append(s, "&udp_loadbalancer.GetSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.PortChoice != nil {
		s = append(s, "PortChoice: "+fmt.Sprintf("%#v", this.PortChoice)+",\n")
	}
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	if this.OriginPoolsWeights != nil {
		s = append(s, "OriginPoolsWeights: "+fmt.Sprintf("%#v", this.OriginPoolsWeights)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	if this.ClusterRetractChoice != nil {
		s = append(s, "ClusterRetractChoice: "+fmt.Sprintf("%#v", this.ClusterRetractChoice)+",\n")
	}
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	s = append(s, "EnablePerPacketLoadBalancing: "+fmt.Sprintf("%#v", this.EnablePerPacketLoadBalancing)+",\n")
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	if this.InternetVipInfo != nil {
		s = append(s, "InternetVipInfo: "+fmt.Sprintf("%#v", this.InternetVipInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_ListenPort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GetSpecType_ListenPort{` +
		`ListenPort:` + fmt.Sprintf("%#v", this.ListenPort) + `}`}, ", ")
	return s
}
func (this *GetSpecType_PortRanges) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GetSpecType_PortRanges{` +
		`PortRanges:` + fmt.Sprintf("%#v", this.PortRanges) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GetSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GetSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GetSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GetSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HashPolicyChoiceRoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GetSpecType_HashPolicyChoiceRoundRobin{` +
		`HashPolicyChoiceRoundRobin:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRoundRobin) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HashPolicyChoiceLeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GetSpecType_HashPolicyChoiceLeastActive{` +
		`HashPolicyChoiceLeastActive:` + fmt.Sprintf("%#v", this.HashPolicyChoiceLeastActive) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HashPolicyChoiceRandom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GetSpecType_HashPolicyChoiceRandom{` +
		`HashPolicyChoiceRandom:` + fmt.Sprintf("%#v", this.HashPolicyChoiceRandom) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HashPolicyChoiceSourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GetSpecType_HashPolicyChoiceSourceIpStickiness{` +
		`HashPolicyChoiceSourceIpStickiness:` + fmt.Sprintf("%#v", this.HashPolicyChoiceSourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GetSpecType_RetractCluster{` +
		`RetractCluster:` + fmt.Sprintf("%#v", this.RetractCluster) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DoNotRetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GetSpecType_DoNotRetractCluster{` +
		`DoNotRetractCluster:` + fmt.Sprintf("%#v", this.DoNotRetractCluster) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Udp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&udp_loadbalancer.GetSpecType_Udp{` +
		`Udp:` + fmt.Sprintf("%#v", this.Udp) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InternetVipInfo) > 0 {
		for iNdEx := len(m.InternetVipInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InternetVipInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x44
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.DnsInfo) > 0 {
		for iNdEx := len(m.DnsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.HostName) > 0 {
		i -= len(m.HostName)
		copy(dAtA[i:], m.HostName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.EnablePerPacketLoadBalancing {
		i--
		if m.EnablePerPacketLoadBalancing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClusterRetractChoice != nil {
		{
			size := m.ClusterRetractChoice.Size()
			i -= size
			if _, err := m.ClusterRetractChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.OriginPoolsWeights) > 0 {
		for iNdEx := len(m.OriginPoolsWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginPoolsWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.DnsVolterraManaged {
		i--
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_ListenPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ListenPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.ListenPort))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_PortRanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_PortRanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PortRanges)
	copy(dAtA[i:], m.PortRanges)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PortRanges)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HashPolicyChoiceRoundRobin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HashPolicyChoiceRoundRobin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceRoundRobin != nil {
		{
			size, err := m.HashPolicyChoiceRoundRobin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HashPolicyChoiceLeastActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HashPolicyChoiceLeastActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceLeastActive != nil {
		{
			size, err := m.HashPolicyChoiceLeastActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HashPolicyChoiceRandom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HashPolicyChoiceRandom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceRandom != nil {
		{
			size, err := m.HashPolicyChoiceRandom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		{
			size, err := m.HashPolicyChoiceSourceIpStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_RetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_RetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RetractCluster != nil {
		{
			size, err := m.RetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DoNotRetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DoNotRetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotRetractCluster != nil {
		{
			size, err := m.DoNotRetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Udp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Udp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Udp != nil {
		{
			size, err := m.Udp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnablePerPacketLoadBalancing {
		i--
		if m.EnablePerPacketLoadBalancing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClusterRetractChoice != nil {
		{
			size := m.ClusterRetractChoice.Size()
			i -= size
			if _, err := m.ClusterRetractChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.OriginPoolsWeights) > 0 {
		for iNdEx := len(m.OriginPoolsWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginPoolsWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.DnsVolterraManaged {
		i--
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_ListenPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ListenPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.ListenPort))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_PortRanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_PortRanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PortRanges)
	copy(dAtA[i:], m.PortRanges)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PortRanges)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_HashPolicyChoiceRoundRobin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HashPolicyChoiceRoundRobin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceRoundRobin != nil {
		{
			size, err := m.HashPolicyChoiceRoundRobin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_HashPolicyChoiceLeastActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HashPolicyChoiceLeastActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceLeastActive != nil {
		{
			size, err := m.HashPolicyChoiceLeastActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_HashPolicyChoiceRandom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HashPolicyChoiceRandom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceRandom != nil {
		{
			size, err := m.HashPolicyChoiceRandom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_HashPolicyChoiceSourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HashPolicyChoiceSourceIpStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		{
			size, err := m.HashPolicyChoiceSourceIpStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_RetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_RetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RetractCluster != nil {
		{
			size, err := m.RetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DoNotRetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DoNotRetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotRetractCluster != nil {
		{
			size, err := m.DoNotRetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Udp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Udp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Udp != nil {
		{
			size, err := m.Udp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnablePerPacketLoadBalancing {
		i--
		if m.EnablePerPacketLoadBalancing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClusterRetractChoice != nil {
		{
			size := m.ClusterRetractChoice.Size()
			i -= size
			if _, err := m.ClusterRetractChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.OriginPoolsWeights) > 0 {
		for iNdEx := len(m.OriginPoolsWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginPoolsWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.DnsVolterraManaged {
		i--
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_ListenPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ListenPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.ListenPort))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_PortRanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_PortRanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PortRanges)
	copy(dAtA[i:], m.PortRanges)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PortRanges)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_HashPolicyChoiceRoundRobin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HashPolicyChoiceRoundRobin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceRoundRobin != nil {
		{
			size, err := m.HashPolicyChoiceRoundRobin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_HashPolicyChoiceLeastActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HashPolicyChoiceLeastActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceLeastActive != nil {
		{
			size, err := m.HashPolicyChoiceLeastActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_HashPolicyChoiceRandom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HashPolicyChoiceRandom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceRandom != nil {
		{
			size, err := m.HashPolicyChoiceRandom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		{
			size, err := m.HashPolicyChoiceSourceIpStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_RetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_RetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RetractCluster != nil {
		{
			size, err := m.RetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DoNotRetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DoNotRetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotRetractCluster != nil {
		{
			size, err := m.DoNotRetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Udp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Udp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Udp != nil {
		{
			size, err := m.Udp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InternetVipInfo) > 0 {
		for iNdEx := len(m.InternetVipInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InternetVipInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x44
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.DnsInfo) > 0 {
		for iNdEx := len(m.DnsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.HostName) > 0 {
		i -= len(m.HostName)
		copy(dAtA[i:], m.HostName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.EnablePerPacketLoadBalancing {
		i--
		if m.EnablePerPacketLoadBalancing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClusterRetractChoice != nil {
		{
			size := m.ClusterRetractChoice.Size()
			i -= size
			if _, err := m.ClusterRetractChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.OriginPoolsWeights) > 0 {
		for iNdEx := len(m.OriginPoolsWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginPoolsWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.DnsVolterraManaged {
		i--
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.PortChoice != nil {
		{
			size := m.PortChoice.Size()
			i -= size
			if _, err := m.PortChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_ListenPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ListenPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.ListenPort))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *GetSpecType_PortRanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_PortRanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PortRanges)
	copy(dAtA[i:], m.PortRanges)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PortRanges)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_HashPolicyChoiceRoundRobin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HashPolicyChoiceRoundRobin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceRoundRobin != nil {
		{
			size, err := m.HashPolicyChoiceRoundRobin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_HashPolicyChoiceLeastActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HashPolicyChoiceLeastActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceLeastActive != nil {
		{
			size, err := m.HashPolicyChoiceLeastActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_HashPolicyChoiceRandom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HashPolicyChoiceRandom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceRandom != nil {
		{
			size, err := m.HashPolicyChoiceRandom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_HashPolicyChoiceSourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HashPolicyChoiceSourceIpStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		{
			size, err := m.HashPolicyChoiceSourceIpStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_RetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_RetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RetractCluster != nil {
		{
			size, err := m.RetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DoNotRetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DoNotRetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotRetractCluster != nil {
		{
			size, err := m.DoNotRetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Udp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Udp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Udp != nil {
		{
			size, err := m.Udp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	if m.DnsVolterraManaged {
		n += 2
	}
	if len(m.OriginPoolsWeights) > 0 {
		for _, e := range m.OriginPoolsWeights {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.ClusterRetractChoice != nil {
		n += m.ClusterRetractChoice.Size()
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.EnablePerPacketLoadBalancing {
		n += 3
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.InternetVipInfo) > 0 {
		for _, e := range m.InternetVipInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType_ListenPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.ListenPort))
	return n
}
func (m *GlobalSpecType_PortRanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortRanges)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HashPolicyChoiceRoundRobin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceRoundRobin != nil {
		l = m.HashPolicyChoiceRoundRobin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HashPolicyChoiceLeastActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceLeastActive != nil {
		l = m.HashPolicyChoiceLeastActive.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HashPolicyChoiceRandom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceRandom != nil {
		l = m.HashPolicyChoiceRandom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		l = m.HashPolicyChoiceSourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetractCluster != nil {
		l = m.RetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DoNotRetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotRetractCluster != nil {
		l = m.DoNotRetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Udp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Udp != nil {
		l = m.Udp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	if m.DnsVolterraManaged {
		n += 2
	}
	if len(m.OriginPoolsWeights) > 0 {
		for _, e := range m.OriginPoolsWeights {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.ClusterRetractChoice != nil {
		n += m.ClusterRetractChoice.Size()
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.EnablePerPacketLoadBalancing {
		n += 3
	}
	return n
}

func (m *CreateSpecType_ListenPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.ListenPort))
	return n
}
func (m *CreateSpecType_PortRanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortRanges)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CreateSpecType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HashPolicyChoiceRoundRobin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceRoundRobin != nil {
		l = m.HashPolicyChoiceRoundRobin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HashPolicyChoiceLeastActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceLeastActive != nil {
		l = m.HashPolicyChoiceLeastActive.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HashPolicyChoiceRandom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceRandom != nil {
		l = m.HashPolicyChoiceRandom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HashPolicyChoiceSourceIpStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		l = m.HashPolicyChoiceSourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetractCluster != nil {
		l = m.RetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DoNotRetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotRetractCluster != nil {
		l = m.DoNotRetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Udp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Udp != nil {
		l = m.Udp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	if m.DnsVolterraManaged {
		n += 2
	}
	if len(m.OriginPoolsWeights) > 0 {
		for _, e := range m.OriginPoolsWeights {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.ClusterRetractChoice != nil {
		n += m.ClusterRetractChoice.Size()
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.EnablePerPacketLoadBalancing {
		n += 3
	}
	return n
}

func (m *ReplaceSpecType_ListenPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.ListenPort))
	return n
}
func (m *ReplaceSpecType_PortRanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortRanges)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ReplaceSpecType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HashPolicyChoiceRoundRobin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceRoundRobin != nil {
		l = m.HashPolicyChoiceRoundRobin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HashPolicyChoiceLeastActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceLeastActive != nil {
		l = m.HashPolicyChoiceLeastActive.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HashPolicyChoiceRandom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceRandom != nil {
		l = m.HashPolicyChoiceRandom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		l = m.HashPolicyChoiceSourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetractCluster != nil {
		l = m.RetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DoNotRetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotRetractCluster != nil {
		l = m.DoNotRetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Udp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Udp != nil {
		l = m.Udp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.PortChoice != nil {
		n += m.PortChoice.Size()
	}
	if m.DnsVolterraManaged {
		n += 2
	}
	if len(m.OriginPoolsWeights) > 0 {
		for _, e := range m.OriginPoolsWeights {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.ClusterRetractChoice != nil {
		n += m.ClusterRetractChoice.Size()
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.EnablePerPacketLoadBalancing {
		n += 3
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.InternetVipInfo) > 0 {
		for _, e := range m.InternetVipInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType_ListenPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.ListenPort))
	return n
}
func (m *GetSpecType_PortRanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortRanges)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GetSpecType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HashPolicyChoiceRoundRobin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceRoundRobin != nil {
		l = m.HashPolicyChoiceRoundRobin.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HashPolicyChoiceLeastActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceLeastActive != nil {
		l = m.HashPolicyChoiceLeastActive.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HashPolicyChoiceRandom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceRandom != nil {
		l = m.HashPolicyChoiceRandom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HashPolicyChoiceSourceIpStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoiceSourceIpStickiness != nil {
		l = m.HashPolicyChoiceSourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetractCluster != nil {
		l = m.RetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DoNotRetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotRetractCluster != nil {
		l = m.DoNotRetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Udp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Udp != nil {
		l = m.Udp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginPoolsWeights := "[]*OriginPoolWithWeight{"
	for _, f := range this.OriginPoolsWeights {
		repeatedStringForOriginPoolsWeights += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForOriginPoolsWeights += "}"
	repeatedStringForDnsInfo := "[]*DnsInfo{"
	for _, f := range this.DnsInfo {
		repeatedStringForDnsInfo += strings.Replace(fmt.Sprintf("%v", f), "DnsInfo", "virtual_host_dns_info.DnsInfo", 1) + ","
	}
	repeatedStringForDnsInfo += "}"
	repeatedStringForInternetVipInfo := "[]*InternetVIPInfo{"
	for _, f := range this.InternetVipInfo {
		repeatedStringForInternetVipInfo += strings.Replace(fmt.Sprintf("%v", f), "InternetVIPInfo", "views.InternetVIPInfo", 1) + ","
	}
	repeatedStringForInternetVipInfo += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`OriginPoolsWeights:` + repeatedStringForOriginPoolsWeights + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`ClusterRetractChoice:` + fmt.Sprintf("%v", this.ClusterRetractChoice) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`EnablePerPacketLoadBalancing:` + fmt.Sprintf("%v", this.EnablePerPacketLoadBalancing) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + repeatedStringForDnsInfo + `,`,
		`InternetVipInfo:` + repeatedStringForInternetVipInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ListenPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ListenPort{`,
		`ListenPort:` + fmt.Sprintf("%v", this.ListenPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PortRanges) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PortRanges{`,
		`PortRanges:` + fmt.Sprintf("%v", this.PortRanges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceRoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HashPolicyChoiceRoundRobin{`,
		`HashPolicyChoiceRoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRoundRobin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceLeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HashPolicyChoiceLeastActive{`,
		`HashPolicyChoiceLeastActive:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceLeastActive), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceRandom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HashPolicyChoiceRandom{`,
		`HashPolicyChoiceRandom:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRandom), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HashPolicyChoiceSourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HashPolicyChoiceSourceIpStickiness{`,
		`HashPolicyChoiceSourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceSourceIpStickiness), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RetractCluster{`,
		`RetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.RetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DoNotRetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DoNotRetractCluster{`,
		`DoNotRetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.DoNotRetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Udp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Udp{`,
		`Udp:` + strings.Replace(fmt.Sprintf("%v", this.Udp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginPoolsWeights := "[]*OriginPoolWithWeight{"
	for _, f := range this.OriginPoolsWeights {
		repeatedStringForOriginPoolsWeights += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForOriginPoolsWeights += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`OriginPoolsWeights:` + repeatedStringForOriginPoolsWeights + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`ClusterRetractChoice:` + fmt.Sprintf("%v", this.ClusterRetractChoice) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`EnablePerPacketLoadBalancing:` + fmt.Sprintf("%v", this.EnablePerPacketLoadBalancing) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ListenPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ListenPort{`,
		`ListenPort:` + fmt.Sprintf("%v", this.ListenPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_PortRanges) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_PortRanges{`,
		`PortRanges:` + fmt.Sprintf("%v", this.PortRanges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceRoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HashPolicyChoiceRoundRobin{`,
		`HashPolicyChoiceRoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRoundRobin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceLeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HashPolicyChoiceLeastActive{`,
		`HashPolicyChoiceLeastActive:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceLeastActive), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceRandom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HashPolicyChoiceRandom{`,
		`HashPolicyChoiceRandom:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRandom), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HashPolicyChoiceSourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HashPolicyChoiceSourceIpStickiness{`,
		`HashPolicyChoiceSourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceSourceIpStickiness), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RetractCluster{`,
		`RetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.RetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DoNotRetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DoNotRetractCluster{`,
		`DoNotRetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.DoNotRetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Udp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Udp{`,
		`Udp:` + strings.Replace(fmt.Sprintf("%v", this.Udp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginPoolsWeights := "[]*OriginPoolWithWeight{"
	for _, f := range this.OriginPoolsWeights {
		repeatedStringForOriginPoolsWeights += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForOriginPoolsWeights += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`OriginPoolsWeights:` + repeatedStringForOriginPoolsWeights + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`ClusterRetractChoice:` + fmt.Sprintf("%v", this.ClusterRetractChoice) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`EnablePerPacketLoadBalancing:` + fmt.Sprintf("%v", this.EnablePerPacketLoadBalancing) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ListenPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ListenPort{`,
		`ListenPort:` + fmt.Sprintf("%v", this.ListenPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_PortRanges) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_PortRanges{`,
		`PortRanges:` + fmt.Sprintf("%v", this.PortRanges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceRoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HashPolicyChoiceRoundRobin{`,
		`HashPolicyChoiceRoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRoundRobin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceLeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HashPolicyChoiceLeastActive{`,
		`HashPolicyChoiceLeastActive:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceLeastActive), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceRandom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HashPolicyChoiceRandom{`,
		`HashPolicyChoiceRandom:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRandom), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HashPolicyChoiceSourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HashPolicyChoiceSourceIpStickiness{`,
		`HashPolicyChoiceSourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceSourceIpStickiness), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RetractCluster{`,
		`RetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.RetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DoNotRetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DoNotRetractCluster{`,
		`DoNotRetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.DoNotRetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Udp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Udp{`,
		`Udp:` + strings.Replace(fmt.Sprintf("%v", this.Udp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginPoolsWeights := "[]*OriginPoolWithWeight{"
	for _, f := range this.OriginPoolsWeights {
		repeatedStringForOriginPoolsWeights += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForOriginPoolsWeights += "}"
	repeatedStringForDnsInfo := "[]*DnsInfo{"
	for _, f := range this.DnsInfo {
		repeatedStringForDnsInfo += strings.Replace(fmt.Sprintf("%v", f), "DnsInfo", "virtual_host_dns_info.DnsInfo", 1) + ","
	}
	repeatedStringForDnsInfo += "}"
	repeatedStringForInternetVipInfo := "[]*InternetVIPInfo{"
	for _, f := range this.InternetVipInfo {
		repeatedStringForInternetVipInfo += strings.Replace(fmt.Sprintf("%v", f), "InternetVIPInfo", "views.InternetVIPInfo", 1) + ","
	}
	repeatedStringForInternetVipInfo += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`PortChoice:` + fmt.Sprintf("%v", this.PortChoice) + `,`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`OriginPoolsWeights:` + repeatedStringForOriginPoolsWeights + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`ClusterRetractChoice:` + fmt.Sprintf("%v", this.ClusterRetractChoice) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`EnablePerPacketLoadBalancing:` + fmt.Sprintf("%v", this.EnablePerPacketLoadBalancing) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + repeatedStringForDnsInfo + `,`,
		`InternetVipInfo:` + repeatedStringForInternetVipInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ListenPort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ListenPort{`,
		`ListenPort:` + fmt.Sprintf("%v", this.ListenPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_PortRanges) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_PortRanges{`,
		`PortRanges:` + fmt.Sprintf("%v", this.PortRanges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HashPolicyChoiceRoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HashPolicyChoiceRoundRobin{`,
		`HashPolicyChoiceRoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRoundRobin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HashPolicyChoiceLeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HashPolicyChoiceLeastActive{`,
		`HashPolicyChoiceLeastActive:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceLeastActive), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HashPolicyChoiceRandom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HashPolicyChoiceRandom{`,
		`HashPolicyChoiceRandom:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceRandom), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HashPolicyChoiceSourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HashPolicyChoiceSourceIpStickiness{`,
		`HashPolicyChoiceSourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.HashPolicyChoiceSourceIpStickiness), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RetractCluster{`,
		`RetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.RetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DoNotRetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DoNotRetractCluster{`,
		`DoNotRetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.DoNotRetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Udp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Udp{`,
		`Udp:` + strings.Replace(fmt.Sprintf("%v", this.Udp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &GlobalSpecType_ListenPort{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortChoice = &GlobalSpecType_PortRanges{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPoolsWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPoolsWeights = append(m.OriginPoolsWeights, &views.OriginPoolWithWeight{})
			if err := m.OriginPoolsWeights[len(m.OriginPoolsWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceRoundRobin{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceLeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceLeastActive{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRandom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceRandom{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceSourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_HashPolicyChoiceSourceIpStickiness{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &GlobalSpecType_RetractCluster{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotRetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &GlobalSpecType_DoNotRetractCluster{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Udp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_Udp{v}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePerPacketLoadBalancing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnablePerPacketLoadBalancing = bool(v != 0)
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternetVipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternetVipInfo = append(m.InternetVipInfo, &views.InternetVIPInfo{})
			if err := m.InternetVipInfo[len(m.InternetVipInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &CreateSpecType_ListenPort{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortChoice = &CreateSpecType_PortRanges{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPoolsWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPoolsWeights = append(m.OriginPoolsWeights, &views.OriginPoolWithWeight{})
			if err := m.OriginPoolsWeights[len(m.OriginPoolsWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceRoundRobin{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceLeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceLeastActive{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRandom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceRandom{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceSourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_HashPolicyChoiceSourceIpStickiness{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &CreateSpecType_RetractCluster{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotRetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &CreateSpecType_DoNotRetractCluster{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Udp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_Udp{v}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePerPacketLoadBalancing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnablePerPacketLoadBalancing = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &ReplaceSpecType_ListenPort{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortChoice = &ReplaceSpecType_PortRanges{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPoolsWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPoolsWeights = append(m.OriginPoolsWeights, &views.OriginPoolWithWeight{})
			if err := m.OriginPoolsWeights[len(m.OriginPoolsWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceRoundRobin{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceLeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceLeastActive{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRandom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceRandom{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceSourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_HashPolicyChoiceSourceIpStickiness{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &ReplaceSpecType_RetractCluster{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotRetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &ReplaceSpecType_DoNotRetractCluster{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Udp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_Udp{v}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePerPacketLoadBalancing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnablePerPacketLoadBalancing = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortChoice = &GetSpecType_ListenPort{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRanges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortChoice = &GetSpecType_PortRanges{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPoolsWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPoolsWeights = append(m.OriginPoolsWeights, &views.OriginPoolWithWeight{})
			if err := m.OriginPoolsWeights[len(m.OriginPoolsWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_HashPolicyChoiceRoundRobin{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceLeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_HashPolicyChoiceLeastActive{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceRandom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_HashPolicyChoiceRandom{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicyChoiceSourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_HashPolicyChoiceSourceIpStickiness{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &GetSpecType_RetractCluster{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotRetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &GetSpecType_DoNotRetractCluster{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Udp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_Udp{v}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePerPacketLoadBalancing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnablePerPacketLoadBalancing = bool(v != 0)
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternetVipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternetVipInfo = append(m.InternetVipInfo, &views.InternetVIPInfo{})
			if err := m.InternetVipInfo[len(m.InternetVipInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

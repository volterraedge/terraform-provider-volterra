// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.

package app_api_group

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_api_group_element "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_group_element"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	ves_io_schema_views_api_definition "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/api_definition"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *ApiGroupScopeApiDefinition) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiGroupScopeApiDefinition) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApiGroupScopeApiDefinition) DeepCopy() *ApiGroupScopeApiDefinition {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiGroupScopeApiDefinition{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiGroupScopeApiDefinition) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiGroupScopeApiDefinition) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiGroupScopeApiDefinitionValidator().Validate(ctx, m, opts...)
}

func (m *ApiGroupScopeApiDefinition) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetApiDefinitionDRefInfo()

}

func (m *ApiGroupScopeApiDefinition) GetApiDefinitionDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetApiDefinition()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("api_definition.Object")
	dri := db.DRefInfo{
		RefdType:   "api_definition.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "api_definition",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetApiDefinitionDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ApiGroupScopeApiDefinition) GetApiDefinitionDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "api_definition.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: api_definition")
	}

	vref := m.GetApiDefinition()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "api_definition.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateApiGroupScopeApiDefinition struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiGroupScopeApiDefinition) ApiDefinitionValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for api_definition")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateApiGroupScopeApiDefinition) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiGroupScopeApiDefinition)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiGroupScopeApiDefinition got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_definition"]; exists {

		vOpts := append(opts, db.WithValidateField("api_definition"))
		if err := fv(ctx, m.GetApiDefinition(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiGroupScopeApiDefinitionValidator = func() *ValidateApiGroupScopeApiDefinition {
	v := &ValidateApiGroupScopeApiDefinition{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhApiDefinition := v.ApiDefinitionValidationRuleHandler
	rulesApiDefinition := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhApiDefinition(rulesApiDefinition)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiGroupScopeApiDefinition.api_definition: %s", err)
		panic(errMsg)
	}
	v.FldValidators["api_definition"] = vFn

	return v
}()

func ApiGroupScopeApiDefinitionValidator() db.Validator {
	return DefaultApiGroupScopeApiDefinitionValidator
}

// augmented methods on protoc/std generated struct

func (m *ApiGroupScopeHttpLoadbalancer) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ApiGroupScopeHttpLoadbalancer) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ApiGroupScopeHttpLoadbalancer) DeepCopy() *ApiGroupScopeHttpLoadbalancer {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ApiGroupScopeHttpLoadbalancer{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ApiGroupScopeHttpLoadbalancer) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ApiGroupScopeHttpLoadbalancer) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ApiGroupScopeHttpLoadbalancerValidator().Validate(ctx, m, opts...)
}

func (m *ApiGroupScopeHttpLoadbalancer) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetHttpLoadbalancerDRefInfo()

}

func (m *ApiGroupScopeHttpLoadbalancer) GetHttpLoadbalancerDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetHttpLoadbalancer()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("http_loadbalancer.Object")
	dri := db.DRefInfo{
		RefdType:   "http_loadbalancer.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "http_loadbalancer",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetHttpLoadbalancerDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *ApiGroupScopeHttpLoadbalancer) GetHttpLoadbalancerDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "http_loadbalancer.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: http_loadbalancer")
	}

	vref := m.GetHttpLoadbalancer()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "http_loadbalancer.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateApiGroupScopeHttpLoadbalancer struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateApiGroupScopeHttpLoadbalancer) HttpLoadbalancerValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for http_loadbalancer")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateApiGroupScopeHttpLoadbalancer) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ApiGroupScopeHttpLoadbalancer)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ApiGroupScopeHttpLoadbalancer got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["http_loadbalancer"]; exists {

		vOpts := append(opts, db.WithValidateField("http_loadbalancer"))
		if err := fv(ctx, m.GetHttpLoadbalancer(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultApiGroupScopeHttpLoadbalancerValidator = func() *ValidateApiGroupScopeHttpLoadbalancer {
	v := &ValidateApiGroupScopeHttpLoadbalancer{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhHttpLoadbalancer := v.HttpLoadbalancerValidationRuleHandler
	rulesHttpLoadbalancer := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhHttpLoadbalancer(rulesHttpLoadbalancer)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ApiGroupScopeHttpLoadbalancer.http_loadbalancer: %s", err)
		panic(errMsg)
	}
	v.FldValidators["http_loadbalancer"] = vFn

	return v
}()

func ApiGroupScopeHttpLoadbalancerValidator() db.Validator {
	return DefaultApiGroupScopeHttpLoadbalancerValidator
}

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetScopeChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetScopeChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetScopeChoice() == nil {
		return nil, nil
	}
	switch m.GetScopeChoice().(type) {
	case *CreateSpecType_Generic:

		return nil, nil

	case *CreateSpecType_HttpLoadbalancer:

		drInfos, err := m.GetHttpLoadbalancer().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpLoadbalancer().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "http_loadbalancer." + dri.DRField
		}
		return drInfos, err

	case *CreateSpecType_ApiDefinition:

		drInfos, err := m.GetApiDefinition().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiDefinition().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_definition." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) ScopeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for scope_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ElementsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for elements")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_api_group_element.GlobalSpecType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_api_group_element.GlobalSpecTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for elements")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_api_group_element.GlobalSpecType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_api_group_element.GlobalSpecType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated elements")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items elements")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_group_builder"]; exists {

		vOpts := append(opts, db.WithValidateField("api_group_builder"))
		if err := fv(ctx, m.GetApiGroupBuilder(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["elements"]; exists {
		vOpts := append(opts, db.WithValidateField("elements"))
		if err := fv(ctx, m.GetElements(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["scope_choice"]; exists {
		val := m.GetScopeChoice()
		vOpts := append(opts,
			db.WithValidateField("scope_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetScopeChoice().(type) {
	case *CreateSpecType_Generic:
		if fv, exists := v.FldValidators["scope_choice.generic"]; exists {
			val := m.GetScopeChoice().(*CreateSpecType_Generic).Generic
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("generic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_HttpLoadbalancer:
		if fv, exists := v.FldValidators["scope_choice.http_loadbalancer"]; exists {
			val := m.GetScopeChoice().(*CreateSpecType_HttpLoadbalancer).HttpLoadbalancer
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("http_loadbalancer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ApiDefinition:
		if fv, exists := v.FldValidators["scope_choice.api_definition"]; exists {
			val := m.GetScopeChoice().(*CreateSpecType_ApiDefinition).ApiDefinition
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhScopeChoice := v.ScopeChoiceValidationRuleHandler
	rulesScopeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhScopeChoice(rulesScopeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.scope_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["scope_choice"] = vFn

	vrhElements := v.ElementsValidationRuleHandler
	rulesElements := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1000",
	}
	vFn, err = vrhElements(rulesElements)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.elements: %s", err)
		panic(errMsg)
	}
	v.FldValidators["elements"] = vFn

	v.FldValidators["scope_choice.http_loadbalancer"] = ApiGroupScopeHttpLoadbalancerValidator().Validate
	v.FldValidators["scope_choice.api_definition"] = ApiGroupScopeApiDefinitionValidator().Validate

	v.FldValidators["api_group_builder"] = ves_io_schema_views_api_definition.ApiGroupBuilderValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetScopeChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetScopeChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetScopeChoice() == nil {
		return nil, nil
	}
	switch m.GetScopeChoice().(type) {
	case *GetSpecType_Generic:

		return nil, nil

	case *GetSpecType_HttpLoadbalancer:

		drInfos, err := m.GetHttpLoadbalancer().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpLoadbalancer().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "http_loadbalancer." + dri.DRField
		}
		return drInfos, err

	case *GetSpecType_ApiDefinition:

		drInfos, err := m.GetApiDefinition().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiDefinition().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_definition." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) ScopeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for scope_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ElementsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for elements")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_api_group_element.GlobalSpecType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_api_group_element.GlobalSpecTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for elements")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_api_group_element.GlobalSpecType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_api_group_element.GlobalSpecType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated elements")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items elements")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_endpoints_count"]; exists {

		vOpts := append(opts, db.WithValidateField("api_endpoints_count"))
		if err := fv(ctx, m.GetApiEndpointsCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_group_builder"]; exists {

		vOpts := append(opts, db.WithValidateField("api_group_builder"))
		if err := fv(ctx, m.GetApiGroupBuilder(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["elements"]; exists {
		vOpts := append(opts, db.WithValidateField("elements"))
		if err := fv(ctx, m.GetElements(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["scope_choice"]; exists {
		val := m.GetScopeChoice()
		vOpts := append(opts,
			db.WithValidateField("scope_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetScopeChoice().(type) {
	case *GetSpecType_Generic:
		if fv, exists := v.FldValidators["scope_choice.generic"]; exists {
			val := m.GetScopeChoice().(*GetSpecType_Generic).Generic
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("generic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_HttpLoadbalancer:
		if fv, exists := v.FldValidators["scope_choice.http_loadbalancer"]; exists {
			val := m.GetScopeChoice().(*GetSpecType_HttpLoadbalancer).HttpLoadbalancer
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("http_loadbalancer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ApiDefinition:
		if fv, exists := v.FldValidators["scope_choice.api_definition"]; exists {
			val := m.GetScopeChoice().(*GetSpecType_ApiDefinition).ApiDefinition
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhScopeChoice := v.ScopeChoiceValidationRuleHandler
	rulesScopeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhScopeChoice(rulesScopeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.scope_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["scope_choice"] = vFn

	vrhElements := v.ElementsValidationRuleHandler
	rulesElements := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1000",
	}
	vFn, err = vrhElements(rulesElements)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.elements: %s", err)
		panic(errMsg)
	}
	v.FldValidators["elements"] = vFn

	v.FldValidators["scope_choice.http_loadbalancer"] = ApiGroupScopeHttpLoadbalancerValidator().Validate
	v.FldValidators["scope_choice.api_definition"] = ApiGroupScopeApiDefinitionValidator().Validate

	v.FldValidators["api_group_builder"] = ves_io_schema_views_api_definition.ApiGroupBuilderValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetScopeChoiceDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetScopeChoiceDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetScopeChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetScopeChoice() == nil {
		return nil, nil
	}
	switch m.GetScopeChoice().(type) {
	case *GlobalSpecType_Generic:

		return nil, nil

	case *GlobalSpecType_HttpLoadbalancer:

		drInfos, err := m.GetHttpLoadbalancer().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpLoadbalancer().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "http_loadbalancer." + dri.DRField
		}
		return drInfos, err

	case *GlobalSpecType_ApiDefinition:

		drInfos, err := m.GetApiDefinition().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiDefinition().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_definition." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) ScopeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for scope_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ElementsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for elements")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_api_group_element.GlobalSpecType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_api_group_element.GlobalSpecTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for elements")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_api_group_element.GlobalSpecType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_api_group_element.GlobalSpecType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated elements")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items elements")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_endpoints_count"]; exists {

		vOpts := append(opts, db.WithValidateField("api_endpoints_count"))
		if err := fv(ctx, m.GetApiEndpointsCount(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["api_group_builder"]; exists {

		vOpts := append(opts, db.WithValidateField("api_group_builder"))
		if err := fv(ctx, m.GetApiGroupBuilder(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["elements"]; exists {
		vOpts := append(opts, db.WithValidateField("elements"))
		if err := fv(ctx, m.GetElements(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["scope_choice"]; exists {
		val := m.GetScopeChoice()
		vOpts := append(opts,
			db.WithValidateField("scope_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetScopeChoice().(type) {
	case *GlobalSpecType_Generic:
		if fv, exists := v.FldValidators["scope_choice.generic"]; exists {
			val := m.GetScopeChoice().(*GlobalSpecType_Generic).Generic
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("generic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_HttpLoadbalancer:
		if fv, exists := v.FldValidators["scope_choice.http_loadbalancer"]; exists {
			val := m.GetScopeChoice().(*GlobalSpecType_HttpLoadbalancer).HttpLoadbalancer
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("http_loadbalancer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ApiDefinition:
		if fv, exists := v.FldValidators["scope_choice.api_definition"]; exists {
			val := m.GetScopeChoice().(*GlobalSpecType_ApiDefinition).ApiDefinition
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhScopeChoice := v.ScopeChoiceValidationRuleHandler
	rulesScopeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhScopeChoice(rulesScopeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.scope_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["scope_choice"] = vFn

	vrhElements := v.ElementsValidationRuleHandler
	rulesElements := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1000",
	}
	vFn, err = vrhElements(rulesElements)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.elements: %s", err)
		panic(errMsg)
	}
	v.FldValidators["elements"] = vFn

	v.FldValidators["scope_choice.http_loadbalancer"] = ApiGroupScopeHttpLoadbalancerValidator().Validate
	v.FldValidators["scope_choice.api_definition"] = ApiGroupScopeApiDefinitionValidator().Validate

	v.FldValidators["api_group_builder"] = ves_io_schema_views_api_definition.ApiGroupBuilderValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetScopeChoiceDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetScopeChoiceDRefInfo() ([]db.DRefInfo, error) {
	if m.GetScopeChoice() == nil {
		return nil, nil
	}
	switch m.GetScopeChoice().(type) {
	case *ReplaceSpecType_Generic:

		return nil, nil

	case *ReplaceSpecType_HttpLoadbalancer:

		drInfos, err := m.GetHttpLoadbalancer().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetHttpLoadbalancer().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "http_loadbalancer." + dri.DRField
		}
		return drInfos, err

	case *ReplaceSpecType_ApiDefinition:

		drInfos, err := m.GetApiDefinition().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetApiDefinition().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "api_definition." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) ScopeChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for scope_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ElementsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepMessageItemRules(rules)
	itemValFn, err := db.NewMessageValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Message ValidationRuleHandler for elements")
	}
	itemsValidatorFn := func(ctx context.Context, elems []*ves_io_schema_api_group_element.GlobalSpecType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
			if err := ves_io_schema_api_group_element.GlobalSpecTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for elements")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*ves_io_schema_api_group_element.GlobalSpecType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*ves_io_schema_api_group_element.GlobalSpecType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated elements")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items elements")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["api_group_builder"]; exists {

		vOpts := append(opts, db.WithValidateField("api_group_builder"))
		if err := fv(ctx, m.GetApiGroupBuilder(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["elements"]; exists {
		vOpts := append(opts, db.WithValidateField("elements"))
		if err := fv(ctx, m.GetElements(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["scope_choice"]; exists {
		val := m.GetScopeChoice()
		vOpts := append(opts,
			db.WithValidateField("scope_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetScopeChoice().(type) {
	case *ReplaceSpecType_Generic:
		if fv, exists := v.FldValidators["scope_choice.generic"]; exists {
			val := m.GetScopeChoice().(*ReplaceSpecType_Generic).Generic
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("generic"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_HttpLoadbalancer:
		if fv, exists := v.FldValidators["scope_choice.http_loadbalancer"]; exists {
			val := m.GetScopeChoice().(*ReplaceSpecType_HttpLoadbalancer).HttpLoadbalancer
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("http_loadbalancer"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ApiDefinition:
		if fv, exists := v.FldValidators["scope_choice.api_definition"]; exists {
			val := m.GetScopeChoice().(*ReplaceSpecType_ApiDefinition).ApiDefinition
			vOpts := append(opts,
				db.WithValidateField("scope_choice"),
				db.WithValidateField("api_definition"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhScopeChoice := v.ScopeChoiceValidationRuleHandler
	rulesScopeChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhScopeChoice(rulesScopeChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.scope_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["scope_choice"] = vFn

	vrhElements := v.ElementsValidationRuleHandler
	rulesElements := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1000",
	}
	vFn, err = vrhElements(rulesElements)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.elements: %s", err)
		panic(errMsg)
	}
	v.FldValidators["elements"] = vFn

	v.FldValidators["scope_choice.http_loadbalancer"] = ApiGroupScopeHttpLoadbalancerValidator().Validate
	v.FldValidators["scope_choice.api_definition"] = ApiGroupScopeApiDefinitionValidator().Validate

	v.FldValidators["api_group_builder"] = ves_io_schema_views_api_definition.ApiGroupBuilderValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetScopeChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ScopeChoice.(type) {
	case nil:
		o.ScopeChoice = nil

	case *CreateSpecType_ApiDefinition:
		o.ScopeChoice = &GlobalSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *CreateSpecType_Generic:
		o.ScopeChoice = &GlobalSpecType_Generic{Generic: of.Generic}

	case *CreateSpecType_HttpLoadbalancer:
		o.ScopeChoice = &GlobalSpecType_HttpLoadbalancer{HttpLoadbalancer: of.HttpLoadbalancer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetScopeChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ScopeChoice.(type) {
	case nil:
		r.ScopeChoice = nil

	case *GlobalSpecType_ApiDefinition:
		r.ScopeChoice = &CreateSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *GlobalSpecType_Generic:
		r.ScopeChoice = &CreateSpecType_Generic{Generic: of.Generic}

	case *GlobalSpecType_HttpLoadbalancer:
		r.ScopeChoice = &CreateSpecType_HttpLoadbalancer{HttpLoadbalancer: of.HttpLoadbalancer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ApiGroupBuilder = f.GetApiGroupBuilder()
	m.Elements = f.GetElements()
	m.GetScopeChoiceFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ApiGroupBuilder = m1.ApiGroupBuilder
	f.Elements = m1.Elements
	m1.SetScopeChoiceToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetScopeChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ScopeChoice.(type) {
	case nil:
		o.ScopeChoice = nil

	case *GetSpecType_ApiDefinition:
		o.ScopeChoice = &GlobalSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *GetSpecType_Generic:
		o.ScopeChoice = &GlobalSpecType_Generic{Generic: of.Generic}

	case *GetSpecType_HttpLoadbalancer:
		o.ScopeChoice = &GlobalSpecType_HttpLoadbalancer{HttpLoadbalancer: of.HttpLoadbalancer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetScopeChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ScopeChoice.(type) {
	case nil:
		r.ScopeChoice = nil

	case *GlobalSpecType_ApiDefinition:
		r.ScopeChoice = &GetSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *GlobalSpecType_Generic:
		r.ScopeChoice = &GetSpecType_Generic{Generic: of.Generic}

	case *GlobalSpecType_HttpLoadbalancer:
		r.ScopeChoice = &GetSpecType_HttpLoadbalancer{HttpLoadbalancer: of.HttpLoadbalancer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ApiEndpointsCount = f.GetApiEndpointsCount()
	m.ApiGroupBuilder = f.GetApiGroupBuilder()
	m.Elements = f.GetElements()
	m.GetScopeChoiceFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ApiEndpointsCount = m1.ApiEndpointsCount
	f.ApiGroupBuilder = m1.ApiGroupBuilder
	f.Elements = m1.Elements
	m1.SetScopeChoiceToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetScopeChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ScopeChoice.(type) {
	case nil:
		o.ScopeChoice = nil

	case *ReplaceSpecType_ApiDefinition:
		o.ScopeChoice = &GlobalSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *ReplaceSpecType_Generic:
		o.ScopeChoice = &GlobalSpecType_Generic{Generic: of.Generic}

	case *ReplaceSpecType_HttpLoadbalancer:
		o.ScopeChoice = &GlobalSpecType_HttpLoadbalancer{HttpLoadbalancer: of.HttpLoadbalancer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetScopeChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ScopeChoice.(type) {
	case nil:
		r.ScopeChoice = nil

	case *GlobalSpecType_ApiDefinition:
		r.ScopeChoice = &ReplaceSpecType_ApiDefinition{ApiDefinition: of.ApiDefinition}

	case *GlobalSpecType_Generic:
		r.ScopeChoice = &ReplaceSpecType_Generic{Generic: of.Generic}

	case *GlobalSpecType_HttpLoadbalancer:
		r.ScopeChoice = &ReplaceSpecType_HttpLoadbalancer{HttpLoadbalancer: of.HttpLoadbalancer}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.ApiGroupBuilder = f.GetApiGroupBuilder()
	m.Elements = f.GetElements()
	m.GetScopeChoiceFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	f.ApiGroupBuilder = m1.ApiGroupBuilder
	f.Elements = m1.Elements
	m1.SetScopeChoiceToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

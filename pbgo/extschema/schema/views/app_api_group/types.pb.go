// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/app_api_group/types.proto

package app_api_group

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	api_group_element "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/api_group_element"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	api_definition "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/api_definition"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of app_api_group in the storage backend.
type GlobalSpecType struct {
	// elements
	//
	// x-displayName: "API Group Elements"
	// x-required
	// List of API group elements with methods and path regex for matching requests.
	Elements []*api_group_element.GlobalSpecType `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
	// API Group Scope
	//
	// x-displayName: "API Group Scope"
	// x-required
	// The scope of the API Group which limits the superset of API endpoints which can be used to create an API Group
	//
	// Types that are valid to be assigned to ScopeChoice:
	//	*GlobalSpecType_Generic
	//	*GlobalSpecType_HttpLoadbalancer
	//	*GlobalSpecType_ApiDefinition
	ScopeChoice isGlobalSpecType_ScopeChoice `protobuf_oneof:"scope_choice"`
	// API Group Builder
	//
	// x-displayName: "API Group Builder"
	// API Group builder defines how to create API group from a list of endpoints
	ApiGroupBuilder *api_definition.ApiGroupBuilder `protobuf:"bytes,9,opt,name=api_group_builder,json=apiGroupBuilder,proto3" json:"api_group_builder,omitempty"`
	// api_endpoints_count
	//
	// x-displayName: "API Endpoints Count"
	// x-example: "25"
	// Number of API Endpoints in the actual API Group.
	// If the lists included, matched, excluded are disjoint then the length is
	// len(included) + len(matched) - excluded
	ApiEndpointsCount uint32 `protobuf:"varint,10,opt,name=api_endpoints_count,json=apiEndpointsCount,proto3" json:"api_endpoints_count,omitempty"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object.
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_64d1d0b57abb1bf6, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_ScopeChoice interface {
	isGlobalSpecType_ScopeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Generic struct {
	Generic *schema.Empty `protobuf:"bytes,4,opt,name=generic,proto3,oneof" json:"generic,omitempty"`
}
type GlobalSpecType_HttpLoadbalancer struct {
	HttpLoadbalancer *ApiGroupScopeHttpLoadbalancer `protobuf:"bytes,5,opt,name=http_loadbalancer,json=httpLoadbalancer,proto3,oneof" json:"http_loadbalancer,omitempty"`
}
type GlobalSpecType_ApiDefinition struct {
	ApiDefinition *ApiGroupScopeApiDefinition `protobuf:"bytes,6,opt,name=api_definition,json=apiDefinition,proto3,oneof" json:"api_definition,omitempty"`
}

func (*GlobalSpecType_Generic) isGlobalSpecType_ScopeChoice()          {}
func (*GlobalSpecType_HttpLoadbalancer) isGlobalSpecType_ScopeChoice() {}
func (*GlobalSpecType_ApiDefinition) isGlobalSpecType_ScopeChoice()    {}

func (m *GlobalSpecType) GetScopeChoice() isGlobalSpecType_ScopeChoice {
	if m != nil {
		return m.ScopeChoice
	}
	return nil
}

func (m *GlobalSpecType) GetElements() []*api_group_element.GlobalSpecType {
	if m != nil {
		return m.Elements
	}
	return nil
}

func (m *GlobalSpecType) GetGeneric() *schema.Empty {
	if x, ok := m.GetScopeChoice().(*GlobalSpecType_Generic); ok {
		return x.Generic
	}
	return nil
}

func (m *GlobalSpecType) GetHttpLoadbalancer() *ApiGroupScopeHttpLoadbalancer {
	if x, ok := m.GetScopeChoice().(*GlobalSpecType_HttpLoadbalancer); ok {
		return x.HttpLoadbalancer
	}
	return nil
}

func (m *GlobalSpecType) GetApiDefinition() *ApiGroupScopeApiDefinition {
	if x, ok := m.GetScopeChoice().(*GlobalSpecType_ApiDefinition); ok {
		return x.ApiDefinition
	}
	return nil
}

func (m *GlobalSpecType) GetApiGroupBuilder() *api_definition.ApiGroupBuilder {
	if m != nil {
		return m.ApiGroupBuilder
	}
	return nil
}

func (m *GlobalSpecType) GetApiEndpointsCount() uint32 {
	if m != nil {
		return m.ApiEndpointsCount
	}
	return 0
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_Generic)(nil),
		(*GlobalSpecType_HttpLoadbalancer)(nil),
		(*GlobalSpecType_ApiDefinition)(nil),
	}
}

// Create app_api_group
//
// x-displayName: "Create API Group"
// Create app_api_group creates a new object in the storage backend for metadata.namespace.
type CreateSpecType struct {
	Elements []*api_group_element.GlobalSpecType `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
	// Types that are valid to be assigned to ScopeChoice:
	//	*CreateSpecType_Generic
	//	*CreateSpecType_HttpLoadbalancer
	//	*CreateSpecType_ApiDefinition
	ScopeChoice     isCreateSpecType_ScopeChoice    `protobuf_oneof:"scope_choice"`
	ApiGroupBuilder *api_definition.ApiGroupBuilder `protobuf:"bytes,9,opt,name=api_group_builder,json=apiGroupBuilder,proto3" json:"api_group_builder,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_64d1d0b57abb1bf6, []int{1}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_ScopeChoice interface {
	isCreateSpecType_ScopeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Generic struct {
	Generic *schema.Empty `protobuf:"bytes,4,opt,name=generic,proto3,oneof" json:"generic,omitempty"`
}
type CreateSpecType_HttpLoadbalancer struct {
	HttpLoadbalancer *ApiGroupScopeHttpLoadbalancer `protobuf:"bytes,5,opt,name=http_loadbalancer,json=httpLoadbalancer,proto3,oneof" json:"http_loadbalancer,omitempty"`
}
type CreateSpecType_ApiDefinition struct {
	ApiDefinition *ApiGroupScopeApiDefinition `protobuf:"bytes,6,opt,name=api_definition,json=apiDefinition,proto3,oneof" json:"api_definition,omitempty"`
}

func (*CreateSpecType_Generic) isCreateSpecType_ScopeChoice()          {}
func (*CreateSpecType_HttpLoadbalancer) isCreateSpecType_ScopeChoice() {}
func (*CreateSpecType_ApiDefinition) isCreateSpecType_ScopeChoice()    {}

func (m *CreateSpecType) GetScopeChoice() isCreateSpecType_ScopeChoice {
	if m != nil {
		return m.ScopeChoice
	}
	return nil
}

func (m *CreateSpecType) GetElements() []*api_group_element.GlobalSpecType {
	if m != nil {
		return m.Elements
	}
	return nil
}

func (m *CreateSpecType) GetGeneric() *schema.Empty {
	if x, ok := m.GetScopeChoice().(*CreateSpecType_Generic); ok {
		return x.Generic
	}
	return nil
}

func (m *CreateSpecType) GetHttpLoadbalancer() *ApiGroupScopeHttpLoadbalancer {
	if x, ok := m.GetScopeChoice().(*CreateSpecType_HttpLoadbalancer); ok {
		return x.HttpLoadbalancer
	}
	return nil
}

func (m *CreateSpecType) GetApiDefinition() *ApiGroupScopeApiDefinition {
	if x, ok := m.GetScopeChoice().(*CreateSpecType_ApiDefinition); ok {
		return x.ApiDefinition
	}
	return nil
}

func (m *CreateSpecType) GetApiGroupBuilder() *api_definition.ApiGroupBuilder {
	if m != nil {
		return m.ApiGroupBuilder
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_Generic)(nil),
		(*CreateSpecType_HttpLoadbalancer)(nil),
		(*CreateSpecType_ApiDefinition)(nil),
	}
}

// Replace app_api_group
//
// x-displayName: "Replace API Group"
// Replace app_api_group replaces an existing object in the storage backend for metadata.namespace.
type ReplaceSpecType struct {
	Elements []*api_group_element.GlobalSpecType `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
	// Types that are valid to be assigned to ScopeChoice:
	//	*ReplaceSpecType_Generic
	//	*ReplaceSpecType_HttpLoadbalancer
	//	*ReplaceSpecType_ApiDefinition
	ScopeChoice     isReplaceSpecType_ScopeChoice   `protobuf_oneof:"scope_choice"`
	ApiGroupBuilder *api_definition.ApiGroupBuilder `protobuf:"bytes,9,opt,name=api_group_builder,json=apiGroupBuilder,proto3" json:"api_group_builder,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_64d1d0b57abb1bf6, []int{2}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_ScopeChoice interface {
	isReplaceSpecType_ScopeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Generic struct {
	Generic *schema.Empty `protobuf:"bytes,4,opt,name=generic,proto3,oneof" json:"generic,omitempty"`
}
type ReplaceSpecType_HttpLoadbalancer struct {
	HttpLoadbalancer *ApiGroupScopeHttpLoadbalancer `protobuf:"bytes,5,opt,name=http_loadbalancer,json=httpLoadbalancer,proto3,oneof" json:"http_loadbalancer,omitempty"`
}
type ReplaceSpecType_ApiDefinition struct {
	ApiDefinition *ApiGroupScopeApiDefinition `protobuf:"bytes,6,opt,name=api_definition,json=apiDefinition,proto3,oneof" json:"api_definition,omitempty"`
}

func (*ReplaceSpecType_Generic) isReplaceSpecType_ScopeChoice()          {}
func (*ReplaceSpecType_HttpLoadbalancer) isReplaceSpecType_ScopeChoice() {}
func (*ReplaceSpecType_ApiDefinition) isReplaceSpecType_ScopeChoice()    {}

func (m *ReplaceSpecType) GetScopeChoice() isReplaceSpecType_ScopeChoice {
	if m != nil {
		return m.ScopeChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetElements() []*api_group_element.GlobalSpecType {
	if m != nil {
		return m.Elements
	}
	return nil
}

func (m *ReplaceSpecType) GetGeneric() *schema.Empty {
	if x, ok := m.GetScopeChoice().(*ReplaceSpecType_Generic); ok {
		return x.Generic
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpLoadbalancer() *ApiGroupScopeHttpLoadbalancer {
	if x, ok := m.GetScopeChoice().(*ReplaceSpecType_HttpLoadbalancer); ok {
		return x.HttpLoadbalancer
	}
	return nil
}

func (m *ReplaceSpecType) GetApiDefinition() *ApiGroupScopeApiDefinition {
	if x, ok := m.GetScopeChoice().(*ReplaceSpecType_ApiDefinition); ok {
		return x.ApiDefinition
	}
	return nil
}

func (m *ReplaceSpecType) GetApiGroupBuilder() *api_definition.ApiGroupBuilder {
	if m != nil {
		return m.ApiGroupBuilder
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_Generic)(nil),
		(*ReplaceSpecType_HttpLoadbalancer)(nil),
		(*ReplaceSpecType_ApiDefinition)(nil),
	}
}

// Get app_api_group
//
// x-displayName: "Get API Group"
// Get app_api_group reads a given object from storage backend for metadata.namespace.
type GetSpecType struct {
	Elements []*api_group_element.GlobalSpecType `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
	// Types that are valid to be assigned to ScopeChoice:
	//	*GetSpecType_Generic
	//	*GetSpecType_HttpLoadbalancer
	//	*GetSpecType_ApiDefinition
	ScopeChoice       isGetSpecType_ScopeChoice       `protobuf_oneof:"scope_choice"`
	ApiGroupBuilder   *api_definition.ApiGroupBuilder `protobuf:"bytes,9,opt,name=api_group_builder,json=apiGroupBuilder,proto3" json:"api_group_builder,omitempty"`
	ApiEndpointsCount uint32                          `protobuf:"varint,10,opt,name=api_endpoints_count,json=apiEndpointsCount,proto3" json:"api_endpoints_count,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_64d1d0b57abb1bf6, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_ScopeChoice interface {
	isGetSpecType_ScopeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Generic struct {
	Generic *schema.Empty `protobuf:"bytes,4,opt,name=generic,proto3,oneof" json:"generic,omitempty"`
}
type GetSpecType_HttpLoadbalancer struct {
	HttpLoadbalancer *ApiGroupScopeHttpLoadbalancer `protobuf:"bytes,5,opt,name=http_loadbalancer,json=httpLoadbalancer,proto3,oneof" json:"http_loadbalancer,omitempty"`
}
type GetSpecType_ApiDefinition struct {
	ApiDefinition *ApiGroupScopeApiDefinition `protobuf:"bytes,6,opt,name=api_definition,json=apiDefinition,proto3,oneof" json:"api_definition,omitempty"`
}

func (*GetSpecType_Generic) isGetSpecType_ScopeChoice()          {}
func (*GetSpecType_HttpLoadbalancer) isGetSpecType_ScopeChoice() {}
func (*GetSpecType_ApiDefinition) isGetSpecType_ScopeChoice()    {}

func (m *GetSpecType) GetScopeChoice() isGetSpecType_ScopeChoice {
	if m != nil {
		return m.ScopeChoice
	}
	return nil
}

func (m *GetSpecType) GetElements() []*api_group_element.GlobalSpecType {
	if m != nil {
		return m.Elements
	}
	return nil
}

func (m *GetSpecType) GetGeneric() *schema.Empty {
	if x, ok := m.GetScopeChoice().(*GetSpecType_Generic); ok {
		return x.Generic
	}
	return nil
}

func (m *GetSpecType) GetHttpLoadbalancer() *ApiGroupScopeHttpLoadbalancer {
	if x, ok := m.GetScopeChoice().(*GetSpecType_HttpLoadbalancer); ok {
		return x.HttpLoadbalancer
	}
	return nil
}

func (m *GetSpecType) GetApiDefinition() *ApiGroupScopeApiDefinition {
	if x, ok := m.GetScopeChoice().(*GetSpecType_ApiDefinition); ok {
		return x.ApiDefinition
	}
	return nil
}

func (m *GetSpecType) GetApiGroupBuilder() *api_definition.ApiGroupBuilder {
	if m != nil {
		return m.ApiGroupBuilder
	}
	return nil
}

func (m *GetSpecType) GetApiEndpointsCount() uint32 {
	if m != nil {
		return m.ApiEndpointsCount
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_Generic)(nil),
		(*GetSpecType_HttpLoadbalancer)(nil),
		(*GetSpecType_ApiDefinition)(nil),
	}
}

// ApiGroupScopeHttpLoadbalancer
//
// x-displayName: "API Group Scope HTTP Loadbalancer"
// Set the scope of the API Group to a specific HTTP Loadbalancer
type ApiGroupScopeHttpLoadbalancer struct {
	// HTTP Loadbalancer Reference
	//
	// x-displayName: "HTTP Loadbalancer"
	// x-required
	// Reference to an HTTP Loadbalancer object which defines a superset of API Endpoints for the API Group
	HttpLoadbalancer *views.ObjectRefType `protobuf:"bytes,1,opt,name=http_loadbalancer,json=httpLoadbalancer,proto3" json:"http_loadbalancer,omitempty"`
}

func (m *ApiGroupScopeHttpLoadbalancer) Reset()      { *m = ApiGroupScopeHttpLoadbalancer{} }
func (*ApiGroupScopeHttpLoadbalancer) ProtoMessage() {}
func (*ApiGroupScopeHttpLoadbalancer) Descriptor() ([]byte, []int) {
	return fileDescriptor_64d1d0b57abb1bf6, []int{4}
}
func (m *ApiGroupScopeHttpLoadbalancer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiGroupScopeHttpLoadbalancer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiGroupScopeHttpLoadbalancer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiGroupScopeHttpLoadbalancer.Merge(m, src)
}
func (m *ApiGroupScopeHttpLoadbalancer) XXX_Size() int {
	return m.Size()
}
func (m *ApiGroupScopeHttpLoadbalancer) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiGroupScopeHttpLoadbalancer.DiscardUnknown(m)
}

var xxx_messageInfo_ApiGroupScopeHttpLoadbalancer proto.InternalMessageInfo

func (m *ApiGroupScopeHttpLoadbalancer) GetHttpLoadbalancer() *views.ObjectRefType {
	if m != nil {
		return m.HttpLoadbalancer
	}
	return nil
}

// ApiGroupScopeApiDefinition
//
// x-displayName: "API Group Scope API Definition"
// Set the scope of the API Group to a specific API Definition
type ApiGroupScopeApiDefinition struct {
	// API Definition Reference
	//
	// x-displayName: "API Definition"
	// x-required
	// Reference to an API Definition object which defines a superset of API Endpoints for the API Group
	ApiDefinition *views.ObjectRefType `protobuf:"bytes,1,opt,name=api_definition,json=apiDefinition,proto3" json:"api_definition,omitempty"`
}

func (m *ApiGroupScopeApiDefinition) Reset()      { *m = ApiGroupScopeApiDefinition{} }
func (*ApiGroupScopeApiDefinition) ProtoMessage() {}
func (*ApiGroupScopeApiDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_64d1d0b57abb1bf6, []int{5}
}
func (m *ApiGroupScopeApiDefinition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiGroupScopeApiDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiGroupScopeApiDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiGroupScopeApiDefinition.Merge(m, src)
}
func (m *ApiGroupScopeApiDefinition) XXX_Size() int {
	return m.Size()
}
func (m *ApiGroupScopeApiDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiGroupScopeApiDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_ApiGroupScopeApiDefinition proto.InternalMessageInfo

func (m *ApiGroupScopeApiDefinition) GetApiDefinition() *views.ObjectRefType {
	if m != nil {
		return m.ApiDefinition
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.app_api_group.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.app_api_group.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.app_api_group.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.app_api_group.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.app_api_group.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.app_api_group.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.app_api_group.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.app_api_group.GetSpecType")
	proto.RegisterType((*ApiGroupScopeHttpLoadbalancer)(nil), "ves.io.schema.views.app_api_group.ApiGroupScopeHttpLoadbalancer")
	golang_proto.RegisterType((*ApiGroupScopeHttpLoadbalancer)(nil), "ves.io.schema.views.app_api_group.ApiGroupScopeHttpLoadbalancer")
	proto.RegisterType((*ApiGroupScopeApiDefinition)(nil), "ves.io.schema.views.app_api_group.ApiGroupScopeApiDefinition")
	golang_proto.RegisterType((*ApiGroupScopeApiDefinition)(nil), "ves.io.schema.views.app_api_group.ApiGroupScopeApiDefinition")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/app_api_group/types.proto", fileDescriptor_64d1d0b57abb1bf6)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/app_api_group/types.proto", fileDescriptor_64d1d0b57abb1bf6)
}

var fileDescriptor_64d1d0b57abb1bf6 = []byte{
	// 790 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x97, 0xcf, 0x6f, 0xd3, 0x48,
	0x14, 0xc7, 0x3d, 0x1b, 0xb7, 0xe9, 0x4e, 0x9a, 0x36, 0xf5, 0x76, 0x25, 0x6f, 0xb6, 0xeb, 0xcd,
	0xe6, 0x54, 0x69, 0x15, 0x7b, 0xd5, 0x9e, 0xb6, 0xd2, 0xae, 0xb6, 0xe9, 0x56, 0xfd, 0xb1, 0x2b,
	0x81, 0x52, 0x24, 0x10, 0x07, 0x8c, 0xed, 0x4c, 0x9c, 0x01, 0xc7, 0x33, 0xb2, 0x27, 0x81, 0x1e,
	0x82, 0x2a, 0x8e, 0xe5, 0x82, 0x90, 0xf8, 0x1f, 0x50, 0xff, 0x01, 0x24, 0xc2, 0xa1, 0xea, 0x09,
	0x71, 0xca, 0x31, 0x47, 0xea, 0x5c, 0xc2, 0xad, 0x67, 0x4e, 0xc8, 0xce, 0x0f, 0xec, 0x24, 0x85,
	0x56, 0x05, 0x21, 0xa4, 0xde, 0xc6, 0xef, 0xc7, 0xf7, 0xbd, 0x79, 0xef, 0xa3, 0xd8, 0x81, 0xb9,
	0x1a, 0x72, 0x65, 0x4c, 0x14, 0xd7, 0x28, 0xa3, 0x8a, 0xa6, 0xd4, 0x30, 0xba, 0xe7, 0x2a, 0x1a,
	0xa5, 0xaa, 0x46, 0xb1, 0x6a, 0x3a, 0xa4, 0x4a, 0x15, 0xb6, 0x4b, 0x91, 0x2b, 0x53, 0x87, 0x30,
	0x22, 0xfc, 0xd6, 0x0d, 0x97, 0xbb, 0xe1, 0x72, 0x10, 0x2e, 0x47, 0xc2, 0xd3, 0x39, 0x13, 0xb3,
	0x72, 0x55, 0x97, 0x0d, 0x52, 0x51, 0x4c, 0x62, 0x12, 0x25, 0xc8, 0xd4, 0xab, 0xa5, 0xe0, 0x29,
	0x78, 0x08, 0x4e, 0x5d, 0xc5, 0xf4, 0xef, 0xd1, 0x06, 0x06, 0x3a, 0x2a, 0xb2, 0x50, 0x05, 0xd9,
	0x2c, 0x5c, 0x3e, 0xfd, 0x73, 0x34, 0x98, 0x50, 0x86, 0x89, 0xdd, 0x77, 0xfe, 0x14, 0x75, 0x86,
	0xf3, 0x16, 0x86, 0x6e, 0xa9, 0x59, 0xb8, 0xa8, 0x31, 0xd4, 0xf3, 0x66, 0x46, 0x67, 0xa0, 0x46,
	0xa5, 0xe5, 0xf1, 0x53, 0xc2, 0x6a, 0x11, 0x95, 0xb0, 0x8d, 0xfd, 0xd0, 0x48, 0xbd, 0x5f, 0xc7,
	0xc5, 0x87, 0x02, 0xb2, 0x47, 0x13, 0x70, 0x66, 0xc3, 0x22, 0xba, 0x66, 0xed, 0x50, 0x64, 0x5c,
	0xdb, 0xa5, 0x48, 0xb8, 0x01, 0xa7, 0x7a, 0x57, 0x76, 0x45, 0x90, 0x89, 0x2d, 0x26, 0x96, 0x14,
	0x39, 0x3a, 0xed, 0x91, 0xd9, 0xc8, 0x51, 0x89, 0x7c, 0xe2, 0xc5, 0xdb, 0xc3, 0xd8, 0xe4, 0x13,
	0x10, 0x4b, 0x75, 0xe2, 0x85, 0x81, 0x9a, 0xf0, 0x27, 0x8c, 0x9b, 0xc8, 0x46, 0x0e, 0x36, 0x44,
	0x3e, 0x03, 0x16, 0x13, 0x4b, 0xf3, 0x43, 0xc2, 0xeb, 0x15, 0xca, 0x76, 0xf3, 0xf1, 0x56, 0x1d,
	0x74, 0x1a, 0x00, 0x6c, 0x72, 0x85, 0x7e, 0xbc, 0x40, 0xe0, 0x5c, 0x99, 0x31, 0xaa, 0x5a, 0x44,
	0x2b, 0xea, 0x9a, 0xa5, 0xd9, 0x06, 0x72, 0xc4, 0x89, 0x40, 0xe4, 0x1f, 0xf9, 0x93, 0x2c, 0xc8,
	0xab, 0x14, 0x6f, 0xf8, 0x87, 0x1d, 0x83, 0x50, 0xb4, 0xc9, 0x18, 0xfd, 0x3f, 0xa4, 0xb3, 0xc9,
	0x15, 0x52, 0xe5, 0x21, 0x9b, 0x40, 0xe0, 0x4c, 0x74, 0xae, 0xe2, 0x64, 0x50, 0xed, 0xaf, 0xf3,
	0x56, 0x5b, 0xa5, 0xf8, 0xdf, 0x81, 0x48, 0xf8, 0x6e, 0x49, 0x2d, 0xec, 0x11, 0x10, 0x9c, 0xfb,
	0x30, 0x57, 0xbd, 0x8a, 0xad, 0x22, 0x72, 0xc4, 0xef, 0x83, 0x9a, 0xcb, 0xa7, 0xd4, 0x0c, 0xb7,
	0x37, 0x28, 0x9a, 0xef, 0xa6, 0xe6, 0x79, 0xbf, 0x4c, 0x61, 0x56, 0x8b, 0x9a, 0x05, 0x19, 0xfe,
	0xe0, 0x27, 0x22, 0xbb, 0x48, 0x09, 0xb6, 0x99, 0xab, 0x1a, 0xa4, 0x6a, 0x33, 0x11, 0x66, 0xc0,
	0x62, 0xb2, 0xe0, 0x77, 0xb0, 0xde, 0xf7, 0xac, 0xf9, 0x0e, 0xe1, 0x16, 0x4c, 0x06, 0x1c, 0x62,
	0x9b, 0x21, 0xc7, 0xd6, 0x2c, 0xb1, 0x13, 0x0f, 0x7a, 0xca, 0x8e, 0xed, 0xe9, 0x8a, 0x7e, 0x07,
	0x19, 0xac, 0x80, 0x4a, 0x01, 0x06, 0xf3, 0x07, 0xf5, 0x68, 0x72, 0xd0, 0xd2, 0xb4, 0x6f, 0xda,
	0xea, 0x59, 0x56, 0xc4, 0xa3, 0x06, 0x98, 0x87, 0x02, 0x4c, 0xae, 0x5e, 0xdd, 0xca, 0x0c, 0x6a,
	0x0b, 0x60, 0x39, 0xbf, 0x00, 0xa7, 0x5d, 0x7f, 0x80, 0xaa, 0x51, 0x26, 0xd8, 0x40, 0xc2, 0xf4,
	0x61, 0x03, 0xf0, 0xcd, 0x06, 0x88, 0xf9, 0x2a, 0xdb, 0xfc, 0xd4, 0x77, 0xa9, 0xd8, 0x36, 0x3f,
	0x15, 0x4b, 0xf1, 0xd9, 0x7d, 0x1e, 0xce, 0xac, 0x39, 0x48, 0x63, 0x68, 0x00, 0xf1, 0x7f, 0x17,
	0x86, 0x38, 0xc4, 0xed, 0x1f, 0x67, 0xe2, 0xf6, 0xab, 0xe2, 0x5a, 0xfa, 0x22, 0xb8, 0x8e, 0x52,
	0xaa, 0x7e, 0x5e, 0x4a, 0x47, 0xf8, 0x5c, 0x99, 0x7b, 0xfd, 0xf7, 0xd0, 0x0f, 0x52, 0x3e, 0x33,
	0x04, 0x42, 0xea, 0xe1, 0x3b, 0x10, 0xb1, 0x44, 0x60, 0x78, 0xc4, 0xc3, 0xd9, 0x02, 0xa2, 0x96,
	0x66, 0x5c, 0xd2, 0x70, 0x49, 0xc3, 0x73, 0x1e, 0x26, 0x36, 0x10, 0xbb, 0x24, 0xe1, 0x1b, 0x27,
	0xe1, 0xbc, 0xef, 0xad, 0x8b, 0x93, 0xb3, 0x0f, 0xe0, 0x2f, 0x1f, 0x9d, 0xb7, 0x80, 0xc7, 0x2d,
	0x13, 0x9c, 0xf9, 0xed, 0x28, 0x1e, 0xd4, 0x47, 0xf3, 0xf7, 0x5e, 0x02, 0x30, 0xba, 0xc6, 0xec,
	0x03, 0x98, 0x3e, 0x7d, 0x1b, 0xc2, 0xed, 0x91, 0x25, 0x9f, 0xbd, 0x8b, 0x1f, 0x0f, 0xea, 0x43,
	0xc9, 0x41, 0x0b, 0xd1, 0xf5, 0xe6, 0x9f, 0x82, 0xe6, 0xb1, 0xc4, 0xb5, 0x8e, 0x25, 0xee, 0xe4,
	0x58, 0x02, 0x7b, 0x9e, 0x04, 0x9e, 0x79, 0x12, 0x78, 0xe5, 0x49, 0xa0, 0xe9, 0x49, 0xa0, 0xe5,
	0x49, 0xe0, 0x8d, 0x27, 0x81, 0x8e, 0x27, 0x71, 0x27, 0x9e, 0x04, 0x1e, 0xb7, 0x25, 0xee, 0xb0,
	0x2d, 0x81, 0x66, 0x5b, 0xe2, 0x5a, 0x6d, 0x89, 0xbb, 0x79, 0xdd, 0x24, 0xf4, 0xae, 0x29, 0xd7,
	0x88, 0xc5, 0x90, 0xe3, 0x68, 0x72, 0xd5, 0x55, 0x82, 0x43, 0x89, 0x38, 0x95, 0x1c, 0x75, 0x48,
	0x0d, 0x17, 0x91, 0x93, 0xeb, 0xbb, 0x15, 0xaa, 0x9b, 0x44, 0x41, 0xf7, 0x59, 0xef, 0xab, 0xf5,
	0xf4, 0xbf, 0x04, 0xfa, 0x64, 0xf0, 0x15, 0xbb, 0xfc, 0x3e, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x9c,
	0xcf, 0xb0, 0x3e, 0x0c, 0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Elements) != len(that1.Elements) {
		return false
	}
	for i := range this.Elements {
		if !this.Elements[i].Equal(that1.Elements[i]) {
			return false
		}
	}
	if that1.ScopeChoice == nil {
		if this.ScopeChoice != nil {
			return false
		}
	} else if this.ScopeChoice == nil {
		return false
	} else if !this.ScopeChoice.Equal(that1.ScopeChoice) {
		return false
	}
	if !this.ApiGroupBuilder.Equal(that1.ApiGroupBuilder) {
		return false
	}
	if this.ApiEndpointsCount != that1.ApiEndpointsCount {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Generic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Generic)
	if !ok {
		that2, ok := that.(GlobalSpecType_Generic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Generic.Equal(that1.Generic) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HttpLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HttpLoadbalancer)
	if !ok {
		that2, ok := that.(GlobalSpecType_HttpLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpLoadbalancer.Equal(that1.HttpLoadbalancer) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ApiDefinition)
	if !ok {
		that2, ok := that.(GlobalSpecType_ApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Elements) != len(that1.Elements) {
		return false
	}
	for i := range this.Elements {
		if !this.Elements[i].Equal(that1.Elements[i]) {
			return false
		}
	}
	if that1.ScopeChoice == nil {
		if this.ScopeChoice != nil {
			return false
		}
	} else if this.ScopeChoice == nil {
		return false
	} else if !this.ScopeChoice.Equal(that1.ScopeChoice) {
		return false
	}
	if !this.ApiGroupBuilder.Equal(that1.ApiGroupBuilder) {
		return false
	}
	return true
}
func (this *CreateSpecType_Generic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Generic)
	if !ok {
		that2, ok := that.(CreateSpecType_Generic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Generic.Equal(that1.Generic) {
		return false
	}
	return true
}
func (this *CreateSpecType_HttpLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HttpLoadbalancer)
	if !ok {
		that2, ok := that.(CreateSpecType_HttpLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpLoadbalancer.Equal(that1.HttpLoadbalancer) {
		return false
	}
	return true
}
func (this *CreateSpecType_ApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ApiDefinition)
	if !ok {
		that2, ok := that.(CreateSpecType_ApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Elements) != len(that1.Elements) {
		return false
	}
	for i := range this.Elements {
		if !this.Elements[i].Equal(that1.Elements[i]) {
			return false
		}
	}
	if that1.ScopeChoice == nil {
		if this.ScopeChoice != nil {
			return false
		}
	} else if this.ScopeChoice == nil {
		return false
	} else if !this.ScopeChoice.Equal(that1.ScopeChoice) {
		return false
	}
	if !this.ApiGroupBuilder.Equal(that1.ApiGroupBuilder) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Generic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Generic)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Generic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Generic.Equal(that1.Generic) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HttpLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HttpLoadbalancer)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HttpLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpLoadbalancer.Equal(that1.HttpLoadbalancer) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ApiDefinition)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Elements) != len(that1.Elements) {
		return false
	}
	for i := range this.Elements {
		if !this.Elements[i].Equal(that1.Elements[i]) {
			return false
		}
	}
	if that1.ScopeChoice == nil {
		if this.ScopeChoice != nil {
			return false
		}
	} else if this.ScopeChoice == nil {
		return false
	} else if !this.ScopeChoice.Equal(that1.ScopeChoice) {
		return false
	}
	if !this.ApiGroupBuilder.Equal(that1.ApiGroupBuilder) {
		return false
	}
	if this.ApiEndpointsCount != that1.ApiEndpointsCount {
		return false
	}
	return true
}
func (this *GetSpecType_Generic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Generic)
	if !ok {
		that2, ok := that.(GetSpecType_Generic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Generic.Equal(that1.Generic) {
		return false
	}
	return true
}
func (this *GetSpecType_HttpLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HttpLoadbalancer)
	if !ok {
		that2, ok := that.(GetSpecType_HttpLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpLoadbalancer.Equal(that1.HttpLoadbalancer) {
		return false
	}
	return true
}
func (this *GetSpecType_ApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ApiDefinition)
	if !ok {
		that2, ok := that.(GetSpecType_ApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	return true
}
func (this *ApiGroupScopeHttpLoadbalancer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiGroupScopeHttpLoadbalancer)
	if !ok {
		that2, ok := that.(ApiGroupScopeHttpLoadbalancer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpLoadbalancer.Equal(that1.HttpLoadbalancer) {
		return false
	}
	return true
}
func (this *ApiGroupScopeApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiGroupScopeApiDefinition)
	if !ok {
		that2, ok := that.(ApiGroupScopeApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&app_api_group.GlobalSpecType{")
	if this.Elements != nil {
		s = append(s, "Elements: "+fmt.Sprintf("%#v", this.Elements)+",\n")
	}
	if this.ScopeChoice != nil {
		s = append(s, "ScopeChoice: "+fmt.Sprintf("%#v", this.ScopeChoice)+",\n")
	}
	if this.ApiGroupBuilder != nil {
		s = append(s, "ApiGroupBuilder: "+fmt.Sprintf("%#v", this.ApiGroupBuilder)+",\n")
	}
	s = append(s, "ApiEndpointsCount: "+fmt.Sprintf("%#v", this.ApiEndpointsCount)+",\n")
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Generic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_api_group.GlobalSpecType_Generic{` +
		`Generic:` + fmt.Sprintf("%#v", this.Generic) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HttpLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_api_group.GlobalSpecType_HttpLoadbalancer{` +
		`HttpLoadbalancer:` + fmt.Sprintf("%#v", this.HttpLoadbalancer) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_api_group.GlobalSpecType_ApiDefinition{` +
		`ApiDefinition:` + fmt.Sprintf("%#v", this.ApiDefinition) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&app_api_group.CreateSpecType{")
	if this.Elements != nil {
		s = append(s, "Elements: "+fmt.Sprintf("%#v", this.Elements)+",\n")
	}
	if this.ScopeChoice != nil {
		s = append(s, "ScopeChoice: "+fmt.Sprintf("%#v", this.ScopeChoice)+",\n")
	}
	if this.ApiGroupBuilder != nil {
		s = append(s, "ApiGroupBuilder: "+fmt.Sprintf("%#v", this.ApiGroupBuilder)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Generic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_api_group.CreateSpecType_Generic{` +
		`Generic:` + fmt.Sprintf("%#v", this.Generic) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HttpLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_api_group.CreateSpecType_HttpLoadbalancer{` +
		`HttpLoadbalancer:` + fmt.Sprintf("%#v", this.HttpLoadbalancer) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_api_group.CreateSpecType_ApiDefinition{` +
		`ApiDefinition:` + fmt.Sprintf("%#v", this.ApiDefinition) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&app_api_group.ReplaceSpecType{")
	if this.Elements != nil {
		s = append(s, "Elements: "+fmt.Sprintf("%#v", this.Elements)+",\n")
	}
	if this.ScopeChoice != nil {
		s = append(s, "ScopeChoice: "+fmt.Sprintf("%#v", this.ScopeChoice)+",\n")
	}
	if this.ApiGroupBuilder != nil {
		s = append(s, "ApiGroupBuilder: "+fmt.Sprintf("%#v", this.ApiGroupBuilder)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Generic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_api_group.ReplaceSpecType_Generic{` +
		`Generic:` + fmt.Sprintf("%#v", this.Generic) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HttpLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_api_group.ReplaceSpecType_HttpLoadbalancer{` +
		`HttpLoadbalancer:` + fmt.Sprintf("%#v", this.HttpLoadbalancer) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_api_group.ReplaceSpecType_ApiDefinition{` +
		`ApiDefinition:` + fmt.Sprintf("%#v", this.ApiDefinition) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&app_api_group.GetSpecType{")
	if this.Elements != nil {
		s = append(s, "Elements: "+fmt.Sprintf("%#v", this.Elements)+",\n")
	}
	if this.ScopeChoice != nil {
		s = append(s, "ScopeChoice: "+fmt.Sprintf("%#v", this.ScopeChoice)+",\n")
	}
	if this.ApiGroupBuilder != nil {
		s = append(s, "ApiGroupBuilder: "+fmt.Sprintf("%#v", this.ApiGroupBuilder)+",\n")
	}
	s = append(s, "ApiEndpointsCount: "+fmt.Sprintf("%#v", this.ApiEndpointsCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Generic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_api_group.GetSpecType_Generic{` +
		`Generic:` + fmt.Sprintf("%#v", this.Generic) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HttpLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_api_group.GetSpecType_HttpLoadbalancer{` +
		`HttpLoadbalancer:` + fmt.Sprintf("%#v", this.HttpLoadbalancer) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&app_api_group.GetSpecType_ApiDefinition{` +
		`ApiDefinition:` + fmt.Sprintf("%#v", this.ApiDefinition) + `}`}, ", ")
	return s
}
func (this *ApiGroupScopeHttpLoadbalancer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_api_group.ApiGroupScopeHttpLoadbalancer{")
	if this.HttpLoadbalancer != nil {
		s = append(s, "HttpLoadbalancer: "+fmt.Sprintf("%#v", this.HttpLoadbalancer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiGroupScopeApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&app_api_group.ApiGroupScopeApiDefinition{")
	if this.ApiDefinition != nil {
		s = append(s, "ApiDefinition: "+fmt.Sprintf("%#v", this.ApiDefinition)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.ApiEndpointsCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ApiEndpointsCount))
		i--
		dAtA[i] = 0x50
	}
	if m.ApiGroupBuilder != nil {
		{
			size, err := m.ApiGroupBuilder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ScopeChoice != nil {
		{
			size := m.ScopeChoice.Size()
			i -= size
			if _, err := m.ScopeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Elements) > 0 {
		for iNdEx := len(m.Elements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Elements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_Generic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Generic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Generic != nil {
		{
			size, err := m.Generic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HttpLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HttpLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpLoadbalancer != nil {
		{
			size, err := m.HttpLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiGroupBuilder != nil {
		{
			size, err := m.ApiGroupBuilder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ScopeChoice != nil {
		{
			size := m.ScopeChoice.Size()
			i -= size
			if _, err := m.ScopeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Elements) > 0 {
		for iNdEx := len(m.Elements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Elements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_Generic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Generic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Generic != nil {
		{
			size, err := m.Generic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_HttpLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HttpLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpLoadbalancer != nil {
		{
			size, err := m.HttpLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiGroupBuilder != nil {
		{
			size, err := m.ApiGroupBuilder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ScopeChoice != nil {
		{
			size := m.ScopeChoice.Size()
			i -= size
			if _, err := m.ScopeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Elements) > 0 {
		for iNdEx := len(m.Elements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Elements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_Generic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Generic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Generic != nil {
		{
			size, err := m.Generic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_HttpLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HttpLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpLoadbalancer != nil {
		{
			size, err := m.HttpLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiEndpointsCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ApiEndpointsCount))
		i--
		dAtA[i] = 0x50
	}
	if m.ApiGroupBuilder != nil {
		{
			size, err := m.ApiGroupBuilder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ScopeChoice != nil {
		{
			size := m.ScopeChoice.Size()
			i -= size
			if _, err := m.ScopeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Elements) > 0 {
		for iNdEx := len(m.Elements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Elements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_Generic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Generic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Generic != nil {
		{
			size, err := m.Generic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_HttpLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HttpLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpLoadbalancer != nil {
		{
			size, err := m.HttpLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ApiGroupScopeHttpLoadbalancer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiGroupScopeHttpLoadbalancer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiGroupScopeHttpLoadbalancer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HttpLoadbalancer != nil {
		{
			size, err := m.HttpLoadbalancer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApiGroupScopeApiDefinition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiGroupScopeApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiGroupScopeApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Elements) > 0 {
		for _, e := range m.Elements {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ScopeChoice != nil {
		n += m.ScopeChoice.Size()
	}
	if m.ApiGroupBuilder != nil {
		l = m.ApiGroupBuilder.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ApiEndpointsCount != 0 {
		n += 1 + sovTypes(uint64(m.ApiEndpointsCount))
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_Generic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Generic != nil {
		l = m.Generic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HttpLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpLoadbalancer != nil {
		l = m.HttpLoadbalancer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Elements) > 0 {
		for _, e := range m.Elements {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ScopeChoice != nil {
		n += m.ScopeChoice.Size()
	}
	if m.ApiGroupBuilder != nil {
		l = m.ApiGroupBuilder.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType_Generic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Generic != nil {
		l = m.Generic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HttpLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpLoadbalancer != nil {
		l = m.HttpLoadbalancer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Elements) > 0 {
		for _, e := range m.Elements {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ScopeChoice != nil {
		n += m.ScopeChoice.Size()
	}
	if m.ApiGroupBuilder != nil {
		l = m.ApiGroupBuilder.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType_Generic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Generic != nil {
		l = m.Generic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HttpLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpLoadbalancer != nil {
		l = m.HttpLoadbalancer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Elements) > 0 {
		for _, e := range m.Elements {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ScopeChoice != nil {
		n += m.ScopeChoice.Size()
	}
	if m.ApiGroupBuilder != nil {
		l = m.ApiGroupBuilder.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ApiEndpointsCount != 0 {
		n += 1 + sovTypes(uint64(m.ApiEndpointsCount))
	}
	return n
}

func (m *GetSpecType_Generic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Generic != nil {
		l = m.Generic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HttpLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpLoadbalancer != nil {
		l = m.HttpLoadbalancer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ApiGroupScopeHttpLoadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpLoadbalancer != nil {
		l = m.HttpLoadbalancer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ApiGroupScopeApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForElements := "[]*GlobalSpecType{"
	for _, f := range this.Elements {
		repeatedStringForElements += strings.Replace(fmt.Sprintf("%v", f), "GlobalSpecType", "api_group_element.GlobalSpecType", 1) + ","
	}
	repeatedStringForElements += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Elements:` + repeatedStringForElements + `,`,
		`ScopeChoice:` + fmt.Sprintf("%v", this.ScopeChoice) + `,`,
		`ApiGroupBuilder:` + strings.Replace(fmt.Sprintf("%v", this.ApiGroupBuilder), "ApiGroupBuilder", "api_definition.ApiGroupBuilder", 1) + `,`,
		`ApiEndpointsCount:` + fmt.Sprintf("%v", this.ApiEndpointsCount) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Generic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Generic{`,
		`Generic:` + strings.Replace(fmt.Sprintf("%v", this.Generic), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HttpLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HttpLoadbalancer{`,
		`HttpLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.HttpLoadbalancer), "ApiGroupScopeHttpLoadbalancer", "ApiGroupScopeHttpLoadbalancer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ApiDefinition{`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ApiGroupScopeApiDefinition", "ApiGroupScopeApiDefinition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForElements := "[]*GlobalSpecType{"
	for _, f := range this.Elements {
		repeatedStringForElements += strings.Replace(fmt.Sprintf("%v", f), "GlobalSpecType", "api_group_element.GlobalSpecType", 1) + ","
	}
	repeatedStringForElements += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Elements:` + repeatedStringForElements + `,`,
		`ScopeChoice:` + fmt.Sprintf("%v", this.ScopeChoice) + `,`,
		`ApiGroupBuilder:` + strings.Replace(fmt.Sprintf("%v", this.ApiGroupBuilder), "ApiGroupBuilder", "api_definition.ApiGroupBuilder", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Generic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Generic{`,
		`Generic:` + strings.Replace(fmt.Sprintf("%v", this.Generic), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HttpLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HttpLoadbalancer{`,
		`HttpLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.HttpLoadbalancer), "ApiGroupScopeHttpLoadbalancer", "ApiGroupScopeHttpLoadbalancer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ApiDefinition{`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ApiGroupScopeApiDefinition", "ApiGroupScopeApiDefinition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForElements := "[]*GlobalSpecType{"
	for _, f := range this.Elements {
		repeatedStringForElements += strings.Replace(fmt.Sprintf("%v", f), "GlobalSpecType", "api_group_element.GlobalSpecType", 1) + ","
	}
	repeatedStringForElements += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Elements:` + repeatedStringForElements + `,`,
		`ScopeChoice:` + fmt.Sprintf("%v", this.ScopeChoice) + `,`,
		`ApiGroupBuilder:` + strings.Replace(fmt.Sprintf("%v", this.ApiGroupBuilder), "ApiGroupBuilder", "api_definition.ApiGroupBuilder", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Generic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Generic{`,
		`Generic:` + strings.Replace(fmt.Sprintf("%v", this.Generic), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HttpLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HttpLoadbalancer{`,
		`HttpLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.HttpLoadbalancer), "ApiGroupScopeHttpLoadbalancer", "ApiGroupScopeHttpLoadbalancer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ApiDefinition{`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ApiGroupScopeApiDefinition", "ApiGroupScopeApiDefinition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForElements := "[]*GlobalSpecType{"
	for _, f := range this.Elements {
		repeatedStringForElements += strings.Replace(fmt.Sprintf("%v", f), "GlobalSpecType", "api_group_element.GlobalSpecType", 1) + ","
	}
	repeatedStringForElements += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Elements:` + repeatedStringForElements + `,`,
		`ScopeChoice:` + fmt.Sprintf("%v", this.ScopeChoice) + `,`,
		`ApiGroupBuilder:` + strings.Replace(fmt.Sprintf("%v", this.ApiGroupBuilder), "ApiGroupBuilder", "api_definition.ApiGroupBuilder", 1) + `,`,
		`ApiEndpointsCount:` + fmt.Sprintf("%v", this.ApiEndpointsCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Generic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Generic{`,
		`Generic:` + strings.Replace(fmt.Sprintf("%v", this.Generic), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HttpLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HttpLoadbalancer{`,
		`HttpLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.HttpLoadbalancer), "ApiGroupScopeHttpLoadbalancer", "ApiGroupScopeHttpLoadbalancer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ApiDefinition{`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ApiGroupScopeApiDefinition", "ApiGroupScopeApiDefinition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiGroupScopeHttpLoadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiGroupScopeHttpLoadbalancer{`,
		`HttpLoadbalancer:` + strings.Replace(fmt.Sprintf("%v", this.HttpLoadbalancer), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiGroupScopeApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiGroupScopeApiDefinition{`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elements = append(m.Elements, &api_group_element.GlobalSpecType{})
			if err := m.Elements[len(m.Elements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Generic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &GlobalSpecType_Generic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiGroupScopeHttpLoadbalancer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &GlobalSpecType_HttpLoadbalancer{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiGroupScopeApiDefinition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &GlobalSpecType_ApiDefinition{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroupBuilder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiGroupBuilder == nil {
				m.ApiGroupBuilder = &api_definition.ApiGroupBuilder{}
			}
			if err := m.ApiGroupBuilder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointsCount", wireType)
			}
			m.ApiEndpointsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiEndpointsCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elements = append(m.Elements, &api_group_element.GlobalSpecType{})
			if err := m.Elements[len(m.Elements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Generic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &CreateSpecType_Generic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiGroupScopeHttpLoadbalancer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &CreateSpecType_HttpLoadbalancer{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiGroupScopeApiDefinition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &CreateSpecType_ApiDefinition{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroupBuilder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiGroupBuilder == nil {
				m.ApiGroupBuilder = &api_definition.ApiGroupBuilder{}
			}
			if err := m.ApiGroupBuilder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elements = append(m.Elements, &api_group_element.GlobalSpecType{})
			if err := m.Elements[len(m.Elements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Generic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &ReplaceSpecType_Generic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiGroupScopeHttpLoadbalancer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &ReplaceSpecType_HttpLoadbalancer{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiGroupScopeApiDefinition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &ReplaceSpecType_ApiDefinition{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroupBuilder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiGroupBuilder == nil {
				m.ApiGroupBuilder = &api_definition.ApiGroupBuilder{}
			}
			if err := m.ApiGroupBuilder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elements = append(m.Elements, &api_group_element.GlobalSpecType{})
			if err := m.Elements[len(m.Elements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Generic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &GetSpecType_Generic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiGroupScopeHttpLoadbalancer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &GetSpecType_HttpLoadbalancer{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiGroupScopeApiDefinition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ScopeChoice = &GetSpecType_ApiDefinition{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroupBuilder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiGroupBuilder == nil {
				m.ApiGroupBuilder = &api_definition.ApiGroupBuilder{}
			}
			if err := m.ApiGroupBuilder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointsCount", wireType)
			}
			m.ApiEndpointsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiEndpointsCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiGroupScopeHttpLoadbalancer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiGroupScopeHttpLoadbalancer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiGroupScopeHttpLoadbalancer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpLoadbalancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HttpLoadbalancer == nil {
				m.HttpLoadbalancer = &views.ObjectRefType{}
			}
			if err := m.HttpLoadbalancer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiGroupScopeApiDefinition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiGroupScopeApiDefinition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiGroupScopeApiDefinition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiDefinition == nil {
				m.ApiDefinition = &views.ObjectRefType{}
			}
			if err := m.ApiDefinition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
